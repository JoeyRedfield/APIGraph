{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "Signature(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: hex-encoded string representing the signature"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when signature is odd-length"]], "SeeAlso": [], "Permissions": [], "Description": "Create Signature from a text representation previously returned by @B_android#content#pm#Signature#toChars_E@ or @B_android#content#pm#Signature#toCharsString_E@. Signatures are expected to be a hex-encoded ASCII string.", "history": "Added in API level 1", "FullName": "public Signature (String text)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "toChars(char[], int[])": {"Returns": [["char[]", "Returns either existingArray if it was large enough to hold the ASCII representation, or a newly created char[] array if needed."]], "Parameters": [["char[]", "char: Existing char array or null."], ["int[]", "int: Output parameter for the number of characters written in to the array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode the Signature as ASCII text in to an existing array.", "history": "added in API level 1", "FullName": "public char[] toChars (char[] existingArray, int[] outLen)"}, "toByteArray()": {"Returns": [["byte[]", "the contents of this signature as a byte array."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public byte[] toByteArray ()"}, "Signature(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create Signature from an existing raw byte array.", "history": "Added in API level 1", "FullName": "public Signature (byte[] signature)"}, "toChars()": {"Returns": [["char[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode the Signature as ASCII text.", "history": "Added in API level 1", "FullName": "public char[] toChars ()"}, "toChars(char[],int[])": {"Returns": [["char[]", "Returns either existingArray if it was large enough to hold the ASCII representation, or a newly created char[] array if needed."]], "Parameters": [["char[]", "char: Existing char array or null."], ["int[]", "int: Output parameter for the number of characters written in to the array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode the Signature as ASCII text in to an existing array.", "history": "Added in API level 1", "FullName": "public char[] toChars (char[] existingArray, int[] outLen)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "toCharsString()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the result of @B_android#content#pm#Signature#toChars_E@ as a String.", "history": "Added in API level 1", "FullName": "public String toCharsString ()"}}, "Inheritance": [], "ClassName": "android.content.pm.Signature", "ClassDesc": "Opaque, immutable representation of a signing certificate associated with an application package. This class name is slightly misleading, since it's not actually a signature."}