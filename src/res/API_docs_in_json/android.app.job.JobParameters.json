{"Functions": {"completeWork(android.app.job.JobWorkItem)": {"Returns": [], "Parameters": [["@B_android#app#job#JobWorkItem_E@", "JobWorkItem: The work you have completed processing, as previously returned by @B_android#app#job#JobParameters#dequeueWork_E@ This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report the completion of executing a @B_android#app#job#JobWorkItem_E@ previously returned by @B_android#app#job#JobParameters#dequeueWork_E@. This tells the system you are done with the work associated with that item, so it will not be returned again. Note that if this is the last work in the queue, completing it here will not finish the overall job -- for that to happen, you still need to call @B_android#app#job#JobParameters#dequeueWork_E@ again. If you are enqueueing work into a job, you must call this method for each piece of work you process. Do not call @B_android#app#job#JobService#jobFinished_E@ or else you can lose work in your queue.", "history": "Added in API level 26", "FullName": "public void completeWork (JobWorkItem work)"}, "getTransientExtras()": {"Returns": [["@B_android#os#Bundle_E@", "The transient extras you passed in when constructing this job with @B_android#app#job#JobInfo#Builder#setTransientExtras_E@. This will never be null. If you did not set any extras this will be an empty bundle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public Bundle getTransientExtras ()"}, "getJobId()": {"Returns": [["int", "The unique id of this job, specified at creation time."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public int getJobId ()"}, "dequeueWork()": {"Returns": [["@B_android#app#job#JobWorkItem_E@", "Returns a new @B_android#app#job#JobWorkItem_E@ if there is one pending, otherwise null. If null is returned, the system will also stop the job if all work has also been completed. (This means that for correct operation, you must always call dequeueWork() after you have completed other work, to check either for more work or allow the system to stop the job.)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dequeue the next pending @B_android#app#job#JobWorkItem_E@ from these JobParameters associated with their currently running job. Calling this method when there is no more work available and all previously dequeued work has been completed will result in the system taking care of stopping the job for you -- you should not call @B_android#app#job#JobService#jobFinished_E@ yourself (otherwise you risk losing an upcoming JobWorkItem that is being enqueued at the same time). Once you are done with the @B_android#app#job#JobWorkItem_E@ returned by this method, you must call @B_android#app#job#JobParameters#completeWork_E@ with it to inform the system that you are done executing the work. The job will not be finished until all dequeued work has been completed. You do not, however, have to complete each returned work item before deqeueing the next one -- you can use @B_android#app#job#JobParameters#dequeueWork_E@ multiple times before completing previous work if you want to process work in parallel, and you can complete the work in whatever order you want. If the job runs to the end of its available time period before all work has been completed, it will stop as normal. You should return true from @B_android#app#job#JobService#onStopJob_E@ in order to have the job rescheduled, and by doing so any pending as well as remaining uncompleted work will be re-queued for the next time the job runs. This example shows how to construct a JobService that will serially dequeue and process work that is available for it:", "history": "Added in API level 26", "FullName": "public JobWorkItem dequeueWork ()"}, "getExtras()": {"Returns": [["@B_android#os#PersistableBundle_E@", "The extras you passed in when constructing this job with @B_android#app#job#JobInfo#Builder#setExtras_E@. This will never be null. If you did not set any extras this will be an empty bundle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public PersistableBundle getExtras ()"}, "isOverrideDeadlineExpired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For jobs with @B_android#app#job#JobInfo#Builder#setOverrideDeadline_E@ set, this provides an easy way to tell whether the job is being executed due to the deadline expiring. Note: If the job is running because its deadline expired, it implies that its constraints will not be met.", "history": "Added in API level 21", "FullName": "public boolean isOverrideDeadlineExpired ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getNetwork()": {"Returns": [["@B_android#net#Network_E@", "the network that should be used to perform any network requests for this job, or null if this job didn't set any required network type."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#Builder#setRequiredNetworkType_E@"], "Permissions": [], "Description": "Return the network that should be used to perform any network requests for this job. Devices may have multiple active network connections simultaneously, or they may not have a default network route at all. To correctly handle all situations like this, your job should always use the network returned by this method instead of implicitly using the default network route. Note that the system may relax the constraints you originally requested, such as allowing a @B_android#app#job#JobInfo#NETWORK_TYPE_UNMETERED_E@ job to run over a metered network when there is a surplus of metered data available.", "history": "Added in API level 28", "FullName": "public Network getNetwork ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getClipGrantFlags()": {"Returns": [["int", "The clip grant flags you passed in when constructing this job with @B_android#app#job#JobInfo#Builder#setClipData_E@. Will be 0 if it was not set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int getClipGrantFlags ()"}, "getClipData()": {"Returns": [["@B_android#content#ClipData_E@", "The clip you passed in when constructing this job with @B_android#app#job#JobInfo#Builder#setClipData_E@. Will be null if it was not set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public ClipData getClipData ()"}, "getTriggeredContentAuthorities()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For jobs with @B_android#app#job#JobInfo#Builder#addTriggerContentUri_E@ set, this reports which content authorities have triggered the job. It will only be null if no authorities have triggered it -- that is, the job executed for some other reason, such as a deadline expiring. If this is non-null, you can use @B_android#app#job#JobParameters#getTriggeredContentUris_E@ to retrieve the details of which URIs changed (as long as that has not exceeded the maximum number it can reported).", "history": "Added in API level 24", "FullName": "public String[] getTriggeredContentAuthorities ()"}, "getTriggeredContentUris()": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For jobs with @B_android#app#job#JobInfo#Builder#addTriggerContentUri_E@ set, this reports which URIs have triggered the job. This will be null if either no URIs have triggered it (it went off due to a deadline or other reason), or the number of changed URIs is too large to report. Whether or not the number of URIs is too large, you can always use @B_android#app#job#JobParameters#getTriggeredContentAuthorities_E@ to determine whether the job was triggered due to any content changes and the authorities they are associated with.", "history": "Added in API level 24", "FullName": "public Uri[] getTriggeredContentUris ()"}}, "Inheritance": [], "ClassName": "android.app.job.JobParameters", "ClassDesc": "Contains the parameters used to configure/identify your job. You do not create this object yourself, instead it is handed in to your application by the System."}