{"Functions": {"onTrimMemory(int)": {"Returns": [], "Parameters": [["int", "int: The context of the trim, giving a hint of the amount of trimming the application may like to perform. Value is @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_MODERATE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_BACKGROUND_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_UI_HIDDEN_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_CRITICAL_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_LOW_E@, or @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_MODERATE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level, since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point, you can use @B_android#app#ActivityManager#getMyMemoryState_E@.", "history": "Added in API level 14", "FullName": "public abstract void onTrimMemory (int level)"}}, "Inheritance": [], "ClassName": "android.content.ComponentCallbacks2", "ClassDesc": "Extended @B_android#content#ComponentCallbacks_E@ interface with a new callback for finer-grained memory management. This interface is available in all application components (@B_android#app#Activity_E@, @B_android#app#Service_E@, @B_android#content#ContentProvider_E@, and @B_android#app#Application_E@). You should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ to incrementally release memory based on current system constraints. Using this callback to release your resources helps provide a more responsive system overall, but also directly benefits the user experience for your app by allowing the system to keep your process alive longer. That is, if you don't trim your resources based on memory levels defined by this callback, the system is more likely to kill your process while it is cached in the least-recently used (LRU) list, thus requiring your app to restart and restore all state when the user returns to it. The values provided by @B_android#content#ComponentCallbacks2#onTrimMemory_E@ do not represent a single linear progression of memory limits, but provide you different types of clues about memory availability: When your app is running: When your app's visibility changes: When your app's process resides in the background LRU list: More information about the different stages of a process lifecycle (such as what it means to be placed in the background LRU list) is provided in the"}