{"Functions": {"hasQueuedThreads()": {"Returns": [["boolean", "true if there may be other threads waiting to acquire the lock"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting to acquire this lock. Note that because cancellations may occur at any time, a true return does not guarantee that any other thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state.", "history": "Added in API level 1", "FullName": "public final boolean hasQueuedThreads ()"}, "getWaitQueueLength(java.util.concurrent.locks.Condition)": {"Returns": [["int", "the estimated number of waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#Condition_E@", "Condition: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if this lock is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this lock"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, the estimate serves only as an upper bound on the actual number of waiters. This method is designed for use in monitoring of the system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public int getWaitQueueLength (Condition condition)"}, "getWaitingThreads(java.util.concurrent.locks.Condition)": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [["@B_java#util#concurrent#locks#Condition_E@", "Condition: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if this lock is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this lock"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing those threads that may be waiting on the given condition associated with this lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive condition monitoring facilities.", "history": "Added in API level 1", "FullName": "protected Collection<Thread> getWaitingThreads (Condition condition)"}, "hasQueuedThread(java.lang.Thread)": {"Returns": [["boolean", "true if the given thread is queued waiting for this lock"]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the thread"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the thread is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether the given thread is waiting to acquire this lock. Note that because cancellations may occur at any time, a true return does not guarantee that this thread will ever acquire this lock. This method is designed primarily for use in monitoring of the system state.", "history": "Added in API level 1", "FullName": "public final boolean hasQueuedThread (Thread thread)"}, "getQueueLength()": {"Returns": [["int", "the estimated number of threads waiting for this lock"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of threads waiting to acquire this lock. The value is only an estimate because the number of threads may change dynamically while this method traverses internal data structures. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public final int getQueueLength ()"}, "lockInterruptibly()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the lock unless the current thread is Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The lock is acquired by the current thread; or Some other thread If the lock is acquired by the current thread then the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.", "history": "Added in API level 1", "FullName": "public void lockInterruptibly ()"}, "ReentrantLock(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this lock should use a fair ordering policy"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of ReentrantLock with the given fairness policy.", "history": "Added in API level 1", "FullName": "public ReentrantLock (boolean fair)"}, "hasWaiters(java.util.concurrent.locks.Condition)": {"Returns": [["boolean", "true if there are any waiting threads"]], "Parameters": [["@B_java#util#concurrent#locks#Condition_E@", "Condition: the condition"]], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if this lock is not held"], ["@B_java#lang#IllegalArgumentException_E@", "if the given condition is not associated with this lock"], ["@B_java#lang#NullPointerException_E@", "if the condition is null"]], "SeeAlso": [], "Permissions": [], "Description": "Queries whether any threads are waiting on the given condition associated with this lock. Note that because timeouts and interrupts may occur at any time, a true return does not guarantee that a future signal will awaken any threads. This method is designed primarily for use in monitoring of the system state.", "history": "Added in API level 1", "FullName": "public boolean hasWaiters (Condition condition)"}, "isFair()": {"Returns": [["boolean", "true if this lock has fairness set true"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this lock has fairness set true.", "history": "Added in API level 1", "FullName": "public final boolean isFair ()"}, "getOwner()": {"Returns": [["@B_java#lang#Thread_E@", "the owner, or null if not owned"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thread that currently owns this lock, or null if not owned. When this method is called by a thread that is not the owner, the return value reflects a best-effort approximation of current lock status. For example, the owner may be momentarily null even if there are threads trying to acquire the lock but have not yet done so. This method is designed to facilitate construction of subclasses that provide more extensive lock monitoring facilities.", "history": "Added in API level 1", "FullName": "protected Thread getOwner ()"}, "lock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the lock. Acquires the lock if it is not held by another thread and returns immediately, setting the lock hold count to one. If the current thread already holds the lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the lock has been acquired, at which time the lock hold count is set to one.", "history": "Added in API level 1", "FullName": "public void lock ()"}, "isHeldByCurrentThread()": {"Returns": [["boolean", "true if current thread holds this lock and false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this lock is held by the current thread. Analogous to the @B_java#lang#Thread#holdsLock_E@ method for built-in monitor locks, this method is typically used for debugging and testing. For example, a method that should only be called while a lock is held can assert that this is the case: It can also be used to ensure that a reentrant lock is used in a non-reentrant manner, for example:", "history": "Added in API level 1", "FullName": "public boolean isHeldByCurrentThread ()"}, "ReentrantLock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of ReentrantLock. This is equivalent to using ReentrantLock(false).", "history": "Added in API level 1", "FullName": "public ReentrantLock ()"}, "getQueuedThreads()": {"Returns": [["@B_java#util#Collection_E@", "the collection of threads"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection containing threads that may be waiting to acquire this lock. Because the actual set of threads may change dynamically while constructing this result, the returned collection is only a best-effort estimate. The elements of the returned collection are in no particular order. This method is designed to facilitate construction of subclasses that provide more extensive monitoring facilities.", "history": "Added in API level 1", "FullName": "protected Collection<Thread> getQueuedThreads ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this lock, as well as its lock state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes either the String \"Unlocked\" or the String \"Locked by\" followed by the", "history": "Added in API level 1", "FullName": "public String toString ()"}, "unlock()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the current thread does not hold this lock"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to release this lock. If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released. If the current thread is not the holder of this lock then @B_java#lang#IllegalMonitorStateException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public void unlock ()"}, "tryLock()": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the lock only if it is not held by another thread at the time of invocation. Acquires the lock if it is not held by another thread and returns immediately with the value true, setting the lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to tryLock() will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the lock. This \"barging\" behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use @B_java#util#concurrent#locks#ReentrantLock#tryLock_E@ which is almost equivalent (it also detects interruption). If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then this method will return immediately with the value false.", "history": "Added in API level 1", "FullName": "public boolean tryLock ()"}, "tryLock(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and false if the waiting time elapsed before the lock could be acquired"]], "Parameters": [["long", "long: the time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been Acquires the lock if it is not held by another thread and returns immediately with the value true, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The lock is acquired by the current thread; or Some other thread The specified waiting time elapses If the lock is acquired then the value true is returned and the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}, "newCondition()": {"Returns": [["@B_java#util#concurrent#locks#Condition_E@", "the Condition object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#locks#Condition_E@ instance for use with this @B_java#util#concurrent#locks#Lock_E@ instance. The returned @B_java#util#concurrent#locks#Condition_E@ instance supports the same usages as do the @B_java#lang#Object_E@ monitor methods (@B_java#lang#Object#wait_E@, @B_java#lang#Object#notify_E@, and @B_java#lang#Object#notifyAll_E@) when used with the built-in monitor lock. If this lock is not held when any of the @B_java#util#concurrent#locks#Condition_E@ @B_java#lang#IllegalMonitorStateException_E@ is thrown. When the condition If a thread is @B_java#lang#InterruptedException_E@ will be thrown, and the thread's interrupted status will be cleared. Waiting threads are signalled in FIFO order. The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for fair locks favors those threads that have been waiting the longest.", "history": "Added in API level 1", "FullName": "public Condition newCondition ()"}, "tryLock(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the lock was already held by the current thread; and false if the waiting time elapsed before the lock could be acquired"]], "Parameters": [["long", "long: the time to wait for the lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the lock if it is not held by another thread within the given waiting time and the current thread has not been Acquires the lock if it is not held by another thread and returns immediately with the value true, setting the lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The lock is acquired by the current thread; or Some other thread The specified waiting time elapses If the lock is acquired then the value true is returned and the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "Added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}, "isLocked()": {"Returns": [["boolean", "true if any thread holds this lock and false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this lock is held by any thread. This method is designed for use in monitoring of the system state, not for synchronization control.", "history": "Added in API level 1", "FullName": "public boolean isLocked ()"}, "getHoldCount()": {"Returns": [["int", "the number of holds on this lock by the current thread, or zero if this lock is not held by the current thread"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the number of holds on this lock by the current thread. A thread has a hold on a lock for each lock action that is not matched by an unlock action. The hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact:", "history": "Added in API level 1", "FullName": "public int getHoldCount ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.ReentrantLock", "ClassDesc": "A reentrant mutual exclusion @B_java#util#concurrent#locks#Lock_E@ with the same basic behavior and semantics as the implicit monitor lock accessed using synchronized methods and statements, but with extended capabilities. A ReentrantLock is owned by the thread last successfully locking, but not yet unlocking it. A thread invoking lock will return, successfully acquiring the lock, when the lock is not owned by another thread. The method will return immediately if the current thread already owns the lock. This can be checked using methods @B_java#util#concurrent#locks#ReentrantLock#isHeldByCurrentThread_E@, and @B_java#util#concurrent#locks#ReentrantLock#getHoldCount_E@. The constructor for this class accepts an optional fairness parameter. When set true, under contention, locks favor granting access to the longest-waiting thread. Otherwise this lock does not guarantee any particular access order. Programs using fair locks accessed by many threads may display lower overall throughput (i.e., are slower; often much slower) than those using the default setting, but have smaller variances in times to obtain locks and guarantee lack of starvation. Note however, that fairness of locks does not guarantee fairness of thread scheduling. Thus, one of many threads using a fair lock may obtain it multiple times in succession while other active threads are not progressing and not currently holding the lock. Also note that the untimed @B_java#util#concurrent#locks#ReentrantLock#tryLock_E@ method does not honor the fairness setting. It will succeed if the lock is available even if other threads are waiting. It is recommended practice to always immediately follow a call to lock with a try block, most typically in a before/after construction such as: In addition to implementing the @B_java#util#concurrent#locks#Lock_E@ interface, this class defines a number of public and protected methods for inspecting the state of the lock. Some of these methods are only useful for instrumentation and monitoring. Serialization of this class behaves in the same way as built-in locks: a deserialized lock is in the unlocked state, regardless of its state when serialized. This lock supports a maximum of 2147483647 recursive locks by the same thread. Attempts to exceed this limit result in @B_java#lang#Error_E@ throws from locking methods."}