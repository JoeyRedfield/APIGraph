{"Functions": {"StringReader(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: String providing the character stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new string reader.", "history": "Added in API level 1", "FullName": "public StringReader (String s)"}, "read(char[],int,int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start writing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream to the most recent mark, or to the beginning of the string if it has never been marked.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation, which it does.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start writing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), or reset() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If the stream is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "read()": {"Returns": [["int", "The character read, or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips the specified number of characters in the stream. Returns the number of characters that were skipped. The ns parameter may be negative, even though the skip method of the @B_java#io#Reader_E@ superclass throws an exception in this case. Negative values of ns cause the stream to skip backwards. Negative return values indicate a skip backwards. It is not possible to skip backwards past the beginning of the string. If the entire string has been read or skipped, then this method has no effect and always returns 0.", "history": "Added in API level 1", "FullName": "public long skip (long ns)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. Because the stream's input comes from a string, there is no actual limit, so this argument must not be negative, but is otherwise ignored."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If readAheadLimit < 0"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream. Subsequent calls to reset() will reposition the stream to this point.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}}, "Inheritance": ["@B_java#io#Reader_E@"], "ClassName": "java.io.StringReader", "ClassDesc": "A character stream whose source is a string."}