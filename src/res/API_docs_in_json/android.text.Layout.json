{"Functions": {"getParagraphAlignment(int)": {"Returns": [["@B_android#text#Layout#Alignment_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the alignment of the specified paragraph, taking into account markup attached to it.", "history": "Added in API level 1", "FullName": "public final Layout.Alignment getParagraphAlignment (int line)"}, "getEllipsizedWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width to which this Layout is ellipsizing, or @B_android#text#Layout#getWidth_E@ if it is not doing anything special.", "history": "Added in API level 1", "FullName": "public int getEllipsizedWidth ()"}, "isSpanned()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected final boolean isSpanned ()"}, "getPaint()": {"Returns": [["@B_android#text#TextPaint_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the base Paint properties for this layout. Do NOT change the paint, which may result in funny drawing for this layout.", "history": "Added in API level 1", "FullName": "public final TextPaint getPaint ()"}, "getParagraphLeft(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the left edge of the specified paragraph, inset by left margins.", "history": "Added in API level 1", "FullName": "public final int getParagraphLeft (int line)"}, "getLineEnd(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text offset after the last character on the specified line.", "history": "Added in API level 1", "FullName": "public final int getLineEnd (int line)"}, "getSelectionPath(int, int, android.graphics.Path)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#graphics#Path_E@", "Path no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.", "history": "added in API level 1", "FullName": "public void getSelectionPath (int start, int end, Path dest)"}, "getLineAscent(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ascent of the text on the specified line. The return value is negative to match the Paint.ascent() convention.", "history": "Added in API level 1", "FullName": "public final int getLineAscent (int line)"}, "getLineContainsTab(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified line contains one or more characters that need to be handled specially, like tabs.", "history": "Added in API level 1", "FullName": "public abstract boolean getLineContainsTab (int line)"}, "getLineDirections(int)": {"Returns": [["@B_android#text#Layout#Directions_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the directional run information for the specified line. The array alternates counts of characters in left-to-right and right-to-left segments of the line. NOTE: this is inadequate to support bidirectional text, and will change.", "history": "Added in API level 1", "FullName": "public abstract Layout.Directions getLineDirections (int line)"}, "increaseWidthTo(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increase the width of this layout to the specified width. Be careful to use this only when you know it is appropriate\u2014 it does not cause the text to reflow to use the full new width.", "history": "Added in API level 1", "FullName": "public final void increaseWidthTo (int wid)"}, "getOffsetForHorizontal(int, float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character offset on the specified line whose position is closest to the specified horizontal position.", "history": "added in API level 1", "FullName": "public int getOffsetForHorizontal (int line, float horiz)"}, "getLineStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text offset of the beginning of the specified line ( 0\u2026getLineCount()). If the specified line is equal to the line count, returns the length of the text.", "history": "Added in API level 1", "FullName": "public abstract int getLineStart (int line)"}, "getLineVisibleEnd(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text offset after the last visible character (so whitespace is not counted) on the specified line.", "history": "Added in API level 1", "FullName": "public int getLineVisibleEnd (int line)"}, "getLineForVertical(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the line number corresponding to the specified vertical position. If you ask for a position above 0, you get 0; if you ask for a position below the bottom of the text, you get the last line.", "history": "Added in API level 1", "FullName": "public int getLineForVertical (int vertical)"}, "getAlignment()": {"Returns": [["@B_android#text#Layout#Alignment_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the base alignment of this layout.", "history": "Added in API level 1", "FullName": "public final Layout.Alignment getAlignment ()"}, "getLineBottom(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical position of the bottom of the specified line.", "history": "Added in API level 1", "FullName": "public final int getLineBottom (int line)"}, "getLineRight(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the rightmost position that should be exposed for horizontal scrolling on the specified line.", "history": "Added in API level 1", "FullName": "public float getLineRight (int line)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the total height of this layout.", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "getCursorPath(int,android.graphics.Path,java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#graphics#Path_E@", "Path no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fills in the specified Path with a representation of a cursor at the specified offset. This will often be a vertical line but can be multiple discontinuous lines in text with multiple directionalities.", "history": "Added in API level 1", "FullName": "public void getCursorPath (int point, Path dest, CharSequence editingBuffer)"}, "getEllipsisStart(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the first character to be ellipsized away, relative to the start of the line. (So 0 if the beginning of the line is ellipsized, not getLineStart().)", "history": "Added in API level 1", "FullName": "public abstract int getEllipsisStart (int line)"}, "getSecondaryHorizontal(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the secondary horizontal position for the specified text offset. This is the location where a new character would be inserted in the direction other than the paragraph's primary direction.", "history": "Added in API level 1", "FullName": "public float getSecondaryHorizontal (int offset)"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of this layout.", "history": "Added in API level 1", "FullName": "public final int getWidth ()"}, "getTopPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the (negative) number of extra pixels of ascent padding in the top line of the Layout.", "history": "Added in API level 1", "FullName": "public abstract int getTopPadding ()"}, "getParagraphDirection(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primary directionality of the paragraph containing the specified line, either 1 for left-to-right lines, or -1 for right-to-left lines (see @B_android#text#Layout#DIR_LEFT_TO_RIGHT_E@, @B_android#text#Layout#DIR_RIGHT_TO_LEFT_E@).", "history": "Added in API level 1", "FullName": "public abstract int getParagraphDirection (int line)"}, "getOffsetToRightOf(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getOffsetToRightOf (int offset)"}, "getLineDescent(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the descent of the specified line(0\u2026getLineCount() - 1).", "history": "Added in API level 1", "FullName": "public abstract int getLineDescent (int line)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw this Layout on the specified Canvas.", "history": "Added in API level 1", "FullName": "public void draw (Canvas c)"}, "getLineWidth(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unsigned horizontal extent of the specified line, including leading margin indent and trailing whitespace.", "history": "Added in API level 1", "FullName": "public float getLineWidth (int line)"}, "getLineForOffset(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the line number on which the specified text offset appears. If you ask for a position before 0, you get 0; if you ask for a position beyond the end of the text, you get the last line.", "history": "Added in API level 1", "FullName": "public int getLineForOffset (int offset)"}, "getSpacingMultiplier()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return what the text height is multiplied by to get the line height.", "history": "Added in API level 1", "FullName": "public final float getSpacingMultiplier ()"}, "getOffsetToLeftOf(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getOffsetToLeftOf (int offset)"}, "getLineBounds(int, android.graphics.Rect)": {"Returns": [["int", "the Y-coordinate of the baseline"]], "Parameters": [["int", "int: which line to examine (0..getLineCount() - 1)"], ["@B_android#graphics#Rect_E@", "Rect: Optional. If not null, it returns the extent of the line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the baseline for the specified line (0\u2026getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.", "history": "added in API level 1", "FullName": "public int getLineBounds (int line, Rect bounds)"}, "getLineMax(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unsigned horizontal extent of the specified line, including leading margin indent, but excluding trailing whitespace.", "history": "Added in API level 1", "FullName": "public float getLineMax (int line)"}, "getSelectionPath(int,int,android.graphics.Path)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#graphics#Path_E@", "Path no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fills in the specified Path with a representation of a highlight between the specified offsets. This will often be a rectangle or a potentially discontinuous set of rectangles. If the start and end are the same, the returned path is empty.", "history": "Added in API level 1", "FullName": "public void getSelectionPath (int start, int end, Path dest)"}, "getPrimaryHorizontal(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the primary horizontal position for the specified text offset. This is the location where a new character would be inserted in the paragraph's primary direction.", "history": "Added in API level 1", "FullName": "public float getPrimaryHorizontal (int offset)"}, "getLineLeft(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the leftmost position that should be exposed for horizontal scrolling on the specified line.", "history": "Added in API level 1", "FullName": "public float getLineLeft (int line)"}, "getLineCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of lines of text in this layout.", "history": "Added in API level 1", "FullName": "public abstract int getLineCount ()"}, "getSpacingAdd()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of units of leading that are added to each line.", "history": "Added in API level 1", "FullName": "public final float getSpacingAdd ()"}, "getLineBaseline(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical position of the baseline of the specified line.", "history": "Added in API level 1", "FullName": "public final int getLineBaseline (int line)"}, "Layout(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout.Alignment,float,float)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to render"], ["@B_android#text#TextPaint_E@", "TextPaint: the default paint for the layout. Styles can override various attributes of the paint."], ["int", "int: the wrapping width for the text."], ["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: whether to left, right, or center the text. Styles can override the alignment."], ["float", "float: factor by which to scale the font size to get the default line spacing"], ["float", "float: amount to add to the default line spacing"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses of Layout use this constructor to set the display text, width, and other standard properties.", "history": "Added in API level 1", "FullName": "protected Layout (CharSequence text, TextPaint paint, int width, Layout.Alignment align, float spacingMult, float spacingAdd)"}, "getParagraphRight(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the right edge of the specified paragraph, inset by right margins.", "history": "Added in API level 1", "FullName": "public final int getParagraphRight (int line)"}, "getEllipsisCount(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of characters to be ellipsized away, or 0 if no ellipsis is to take place.", "history": "Added in API level 1", "FullName": "public abstract int getEllipsisCount (int line)"}, "getDesiredWidth(java.lang.CharSequence,android.text.TextPaint)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return how wide a layout must be in order to display the specified text with one line per paragraph. As of O, Uses @B_android#text#TextDirectionHeuristics#FIRSTSTRONG_LTR_E@ as the default text direction heuristics. In the earlier versions uses @B_android#text#TextDirectionHeuristics#LTR_E@ as the default.", "history": "Added in API level 1", "FullName": "public static float getDesiredWidth (CharSequence source, TextPaint paint)"}, "getOffsetForHorizontal(int,float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character offset on the specified line whose position is closest to the specified horizontal position.", "history": "Added in API level 1", "FullName": "public int getOffsetForHorizontal (int line, float horiz)"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text that is displayed by this Layout.", "history": "Added in API level 1", "FullName": "public final CharSequence getText ()"}, "isRtlCharAt(int)": {"Returns": [["boolean", "true if the character is RTL, false if it is LTR"]], "Parameters": [["int", "int: the offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the character at offset is right to left (RTL).", "history": "Added in API level 14", "FullName": "public boolean isRtlCharAt (int offset)"}, "getBottomPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of extra pixels of descent padding in the bottom line of the Layout.", "history": "Added in API level 1", "FullName": "public abstract int getBottomPadding ()"}, "getLineTop(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the vertical position of the top of the specified line (0\u2026getLineCount()). If the specified line is equal to the line count, returns the bottom of the last line.", "history": "Added in API level 1", "FullName": "public abstract int getLineTop (int line)"}, "getDesiredWidth(java.lang.CharSequence,int,int,android.text.TextPaint)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return how wide a layout must be in order to display the specified text slice with one line per paragraph. As of O, Uses @B_android#text#TextDirectionHeuristics#FIRSTSTRONG_LTR_E@ as the default text direction heuristics. In the earlier versions uses @B_android#text#TextDirectionHeuristics#LTR_E@ as the default.", "history": "Added in API level 1", "FullName": "public static float getDesiredWidth (CharSequence source, int start, int end, TextPaint paint)"}, "getLineBounds(int,android.graphics.Rect)": {"Returns": [["int", "the Y-coordinate of the baseline"]], "Parameters": [["int", "int: which line to examine (0..getLineCount() - 1)"], ["@B_android#graphics#Rect_E@", "Rect: Optional. If not null, it returns the extent of the line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the baseline for the specified line (0\u2026getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it.", "history": "Added in API level 1", "FullName": "public int getLineBounds (int line, Rect bounds)"}, "draw(android.graphics.Canvas,android.graphics.Path,android.graphics.Paint,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas"], ["@B_android#graphics#Path_E@", "Path: the path of the highlight or cursor; can be null"], ["@B_android#graphics#Paint_E@", "Paint: the paint for the highlight"], ["int", "int: the amount to temporarily translate the canvas while rendering the highlight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw this Layout on the specified canvas, with the highlight path drawn between the background and the text.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas, Path highlight, Paint highlightPaint, int cursorOffsetVertical)"}}, "Inheritance": [], "ClassName": "android.text.Layout", "ClassDesc": "A base class that manages text layout in visual elements on the screen. For text that will be edited, use a @B_android#text#DynamicLayout_E@, which will be updated as the text changes. For text that will not change, use a @B_android#text#StaticLayout_E@."}