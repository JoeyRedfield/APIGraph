{"Functions": {"remove()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this iterator"], ["@B_java#lang#IllegalStateException_E@", "if the next method has not yet been called, or the remove method has already been called after the last call to the next method"]], "SeeAlso": [], "Permissions": [], "Description": "Removes from the underlying collection the last element returned by this iterator (optional operation). This method can be called only once per call to @B_java#util#Iterator#next_E@. The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling this method.", "history": "Added in API level 1", "FullName": "public void remove ()"}, "forEachRemaining(java.util.function.Consumer<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: The action to be performed for each element"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified action is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each remaining element until all elements have been processed or the action throws an exception. Actions are performed in the order of iteration, if that order is specified. Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEachRemaining (Consumer<? super E> action)"}, "next()": {"Returns": [["E", "the next element in the iteration"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the iteration has no more elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next element in the iteration.", "history": "Added in API level 1", "FullName": "public abstract E next ()"}, "hasNext()": {"Returns": [["boolean", "true if the iteration has more elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the iteration has more elements. (In other words, returns true if @B_java#util#Iterator#next_E@ would return an element rather than throwing an exception.)", "history": "Added in API level 1", "FullName": "public abstract boolean hasNext ()"}}, "Inheritance": [], "ClassName": "java.util.Iterator<E>", "ClassDesc": "An iterator over a collection. Iterator takes the place of @B_java#util#Enumeration_E@ in the Java Collections Framework. Iterators differ from enumerations in two ways: Iterators allow the caller to remove elements from the underlying collection during the iteration with well-defined semantics. Method names have been improved. This interface is a member of the"}