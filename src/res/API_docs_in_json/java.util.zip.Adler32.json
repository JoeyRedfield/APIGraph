{"Functions": {"update(int)": {"Returns": [], "Parameters": [["int", "int: the byte to update the checksum with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the checksum with the specified byte (the low eight bits of the argument b).", "history": "Added in API level 1", "FullName": "public void update (int b)"}, "update(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer to update the checksum with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the checksum with the bytes from the specified buffer. The checksum is updated using buffer.@B_java#nio#Buffer#remaining_E@ bytes starting at buffer.@B_java#nio#Buffer#position_E@ Upon return, the buffer's position will be updated to its limit; its limit will not have been changed.", "history": "Added in API level 26", "FullName": "public void update (ByteBuffer buffer)"}, "getValue()": {"Returns": [["long", "the current checksum value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the checksum value.", "history": "Added in API level 1", "FullName": "public long getValue ()"}, "update(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to update the checksum with"], ["int", "int: the start offset of the data"], ["int", "int: the number of bytes to use for the update"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if off is negative, or len is negative, or off+len is greater than the length of the array b"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the checksum with the specified array of bytes.", "history": "added in API level 1", "FullName": "public void update (byte[] b, int off, int len)"}, "Adler32()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Adler32 object.", "history": "Added in API level 1", "FullName": "public Adler32 ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the checksum to initial value.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "update(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to update the checksum with"], ["int", "int: the start offset of the data"], ["int", "int: the number of bytes to use for the update"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if off is negative, or len is negative, or off+len is greater than the length of the array b"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the checksum with the specified array of bytes.", "history": "Added in API level 1", "FullName": "public void update (byte[] b, int off, int len)"}, "update(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to update the checksum with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the checksum with the specified array of bytes.", "history": "Added in API level 1", "FullName": "public void update (byte[] b)"}}, "Inheritance": [], "ClassName": "java.util.zip.Adler32", "ClassDesc": "A class that can be used to compute the Adler-32 checksum of a data stream. An Adler-32 checksum is almost as reliable as a CRC-32 but can be computed much faster. Passing a null argument to a method in this class will cause a @B_java#lang#NullPointerException_E@ to be thrown."}