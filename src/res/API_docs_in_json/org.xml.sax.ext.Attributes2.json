{"Functions": {"isSpecified(int)": {"Returns": [["boolean", "true if the value was found in the XML text, false if the value was provided by DTD defaulting."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true unless the attribute value was provided by DTD defaulting.", "history": "Added in API level 1", "FullName": "public abstract boolean isSpecified (int index)"}, "isDeclared(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "Added in API level 1", "FullName": "public abstract boolean isDeclared (String uri, String localName)"}, "isSpecified(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the value was found in the XML text, false if the value was provided by DTD defaulting."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true unless the attribute value was provided by DTD defaulting. Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "Added in API level 1", "FullName": "public abstract boolean isSpecified (String uri, String localName)"}, "isSpecified(java.lang.String)": {"Returns": [["boolean", "true if the value was found in the XML text, false if the value was provided by DTD defaulting."]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified (prefixed) name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied name does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true unless the attribute value was provided by DTD defaulting.", "history": "Added in API level 1", "FullName": "public abstract boolean isSpecified (String qName)"}, "isDeclared(int)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["int", "int: The attribute index (zero-based)."]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "When the supplied index does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).", "history": "Added in API level 1", "FullName": "public abstract boolean isDeclared (int index)"}, "isDeclared(java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The XML qualified (prefixed) name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied name does not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid).", "history": "Added in API level 1", "FullName": "public abstract boolean isDeclared (String qName)"}, "isDeclared(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the attribute was declared in the DTD, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the attribute was declared in the DTD. This helps distinguish two kinds of attributes that SAX reports as CDATA: ones that were declared (and hence are usually valid), and those that were not (and which are never valid). Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "added in API level 1", "FullName": "public abstract boolean isDeclared (String uri, String localName)"}, "isSpecified(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the value was found in the XML text, false if the value was provided by DTD defaulting."]], "Parameters": [["@B_java#lang#String_E@", "String: The Namespace URI, or the empty string if the name has no Namespace URI."], ["@B_java#lang#String_E@", "String: The attribute's local name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "When the supplied names do not identify an attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true unless the attribute value was provided by DTD defaulting. Remember that since DTDs do not \"understand\" namespaces, the namespace URI associated with an attribute may not have come from the DTD. The declaration will have applied to the attribute's qName.", "history": "added in API level 1", "FullName": "public abstract boolean isSpecified (String uri, String localName)"}}, "Inheritance": [], "ClassName": "org.xml.sax.ext.Attributes2", "ClassDesc": "SAX2 extension to augment the per-attribute information provided though @B_org#xml#sax#Attributes_E@. If an implementation supports this extension, the attributes provided in @B_org#xml#sax#ContentHandler#startElement_E@ will implement this interface, and the http://xml.org/sax/features/use-attributes2 feature flag will have the value true. XMLReader implementations are not required to support this information, and it is not part of core-only SAX2 distributions. Note that if an attribute was defaulted (!isSpecified()) it will of necessity also have been declared (isDeclared()) in the DTD. Similarly if an attribute's type is anything except CDATA, then it must have been declared."}