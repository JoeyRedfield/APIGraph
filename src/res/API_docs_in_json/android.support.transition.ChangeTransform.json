{"Functions": {"setReparent(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true to track parent changes or false to only track changes of the transitioning view without considering the parent change."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether parent changes will be tracked by the ChangeTransform. If parent changes are tracked, then the transform will adjust to the transforms of the different parents. If they aren't tracked, only the transforms of the transitioning view will be tracked. Default is true.", "history": "added in version 26.0.0-beta1", "FullName": "void setReparent (boolean reparent)"}, "getReparent()": {"Returns": [["boolean", "whether parent changes will be tracked by the ChangeTransform."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether parent changes will be tracked by the ChangeTransform. If parent changes are tracked, then the transform will adjust to the transforms of the different parents. If they aren't tracked, only the transforms of the transitioning view will be tracked. Default is true.", "history": "added in version 26.0.0-beta1", "FullName": "boolean getReparent ()"}, "getReparentWithOverlay()": {"Returns": [["boolean", "true when a changed parent should execute the transition inside the scene root's overlay or false if a parent change only affects the transform of the transitioning view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether changes to parent should use an overlay or not. When the parent change doesn't use an overlay, it affects the transforms of the child. The default value is true. Note: when Overlays are not used when a parent changes, a view can be clipped when it moves outside the bounds of its parent. Setting @B_android#view#ViewGroup#setClipChildren_E@ and @B_android#view#ViewGroup#setClipToPadding_E@ can help. Also, when Overlays are not used and the parent is animating its location, the position of the child view will be relative to its parent's final position, so it may appear to \"jump\" at the beginning.", "history": "added in version 26.0.0-beta1", "FullName": "boolean getReparentWithOverlay ()"}, "setReparentWithOverlay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true when a changed parent should execute the transition inside the scene root's overlay or false if a parent change only affects the transform of the transitioning view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether changes to parent should use an overlay or not. When the parent change doesn't use an overlay, it affects the transforms of the child. The default value is true. Note: when Overlays are not used when a parent changes, a view can be clipped when it moves outside the bounds of its parent. Setting @B_android#view#ViewGroup#setClipChildren_E@ and @B_android#view#ViewGroup#setClipToPadding_E@ can help. Also, when Overlays are not used and the parent is animating its location, the position of the child view will be relative to its parent's final position, so it may appear to \"jump\" at the beginning.", "history": "added in version 26.0.0-beta1", "FullName": "void setReparentWithOverlay (boolean reparentWithOverlay)"}, "ChangeTransform()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 26.0.0-beta1", "FullName": "ChangeTransform ()"}, "getTransitionProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#support#transition#TransitionValues_E@. The default implementation returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names used stored in the @B_android#support#transition#TransitionValues_E@ object passed into @B_android#support#transition#Transition#captureStartValues_E@ that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.", "history": "added in version 26.0.0-beta1", "FullName": "String[] getTransitionProperties ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#transition#Transition_E@"], "ClassName": "android.support.transition.ChangeTransform", "ClassDesc": "This Transition captures scale and rotation for Views before and after the scene change and animates those changes during the transition. A change in parent is handled as well by capturing the transforms from the parent before and after the scene change and animating those during the transition."}