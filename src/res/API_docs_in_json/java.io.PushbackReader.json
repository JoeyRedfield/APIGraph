{"Functions": {"skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If n is negative."], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "Always, since reset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream. The reset method of PushbackReader always throws an exception.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start writing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "PushbackReader(java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: The reader from which characters will be read"], ["int", "int: The size of the pushback buffer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new pushback reader with a pushback buffer of the given size.", "history": "Added in API level 1", "FullName": "public PushbackReader (Reader in, int size)"}, "read()": {"Returns": [["int", "The character read, or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "PushbackReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: The reader from which characters will be read"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new pushback reader with a one-character pushback buffer.", "history": "Added in API level 1", "FullName": "public PushbackReader (Reader in)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), unread(), ready(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "PushbackReader(java.io.Reader, int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: The reader from which characters will be read"], ["int", "int: The size of the pushback buffer"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new pushback reader with a pushback buffer of the given size.", "history": "added in API level 1", "FullName": "public PushbackReader (Reader in, int size)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail."]], "Throws": [["@B_java#io#IOException_E@", "Always, since mark is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream. The mark for class PushbackReader always throws an exception.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "read(char[],int,int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start writing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "unread(int)": {"Returns": [], "Parameters": [["int", "int: The int value representing a character to be pushed back"]], "Throws": [["@B_java#io#IOException_E@", "If the pushback buffer is full, or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a single character by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value (char)c.", "history": "Added in API level 1", "FullName": "public void unread (int c)"}, "unread(char[])": {"Returns": [], "Parameters": [["char[]", "char: Character array to push back"]], "Throws": [["@B_java#io#IOException_E@", "If there is insufficient room in the pushback buffer, or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back an array of characters by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value cbuf[0], the character after that will have the value cbuf[1], and so forth.", "history": "Added in API level 1", "FullName": "public void unread (char[] cbuf)"}, "unread(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Character array"], ["int", "int: Offset of first character to push back"], ["int", "int: Number of characters to push back"]], "Throws": [["@B_java#io#IOException_E@", "If there is insufficient room in the pushback buffer, or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a portion of an array of characters by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value cbuf[off], the character after that will have the value cbuf[off+1], and so forth.", "history": "added in API level 1", "FullName": "public void unread (char[] cbuf, int off, int len)"}, "unread(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Character array"], ["int", "int: Offset of first character to push back"], ["int", "int: Number of characters to push back"]], "Throws": [["@B_java#io#IOException_E@", "If there is insufficient room in the pushback buffer, or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes back a portion of an array of characters by copying it to the front of the pushback buffer. After this method returns, the next character to be read will have the value cbuf[off], the character after that will have the value cbuf[off+1], and so forth.", "history": "Added in API level 1", "FullName": "public void unread (char[] cbuf, int off, int len)"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation, which it does not.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}}, "Inheritance": ["@B_java#io#Reader_E@", "@B_java#io#FilterReader_E@"], "ClassName": "java.io.PushbackReader", "ClassDesc": "A character-stream reader that allows characters to be pushed back into the stream."}