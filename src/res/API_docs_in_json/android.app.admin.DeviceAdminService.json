{"Functions": {"DeviceAdminService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public DeviceAdminService ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 26", "FullName": "public final IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.app.admin.DeviceAdminService", "ClassDesc": "Base class for a service that device owner/profile owners can optionally have. The system searches for it with an intent filter with the @B_android#app#admin#DevicePolicyManager#ACTION_DEVICE_ADMIN_SERVICE_E@ action, and tries to keep a bound connection as long as the hosting user is running, so that the device/profile owner is always considered to be in the foreground. This is useful to receive implicit broadcasts that can no longer be received by manifest receivers by apps targeting Android version @B_android#os#Build#VERSION_CODES#O_E@. Device/profile owners can use a runtime-registered broadcast receiver instead, and have a @B_android#app#admin#DeviceAdminService_E@ so that the process is always running. Device/profile owners can use @B_android#content#pm#PackageManager#setComponentEnabledSetting_E@ to disable/enable its own service. For example, when a device/profile owner no longer needs to be in the foreground, it can (and should) disable its service. The service must be protected with the permission @B_android#Manifest#permission#BIND_DEVICE_ADMIN_E@. Otherwise the system would ignore it. When the owner process crashes, the service will be re-bound automatically after a back-off. Note the process may still be killed if the system is under heavy memory pressure, in which case the process will be re-started later."}