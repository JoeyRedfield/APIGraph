{"Functions": {"decodeByteArray(byte[],int,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image could not be decoded."]], "Parameters": [["byte[]", "byte: byte array of compressed image data"], ["int", "int: offset into imageData for where the decoder should begin parsing."], ["int", "int: the number of bytes, beginning at offset, to parse"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode an immutable bitmap from the specified byte array.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeByteArray (byte[] data, int offset, int length)"}, "decodeFile(java.lang.String)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the resulting decoded bitmap, or null if it could not be decoded."]], "Parameters": [["@B_java#lang#String_E@", "String: complete path name for the file to be decoded."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode a file path into a bitmap. If the specified file name is null, or cannot be decoded into a bitmap, the function returns null.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeFile (String pathName)"}, "decodeStream(java.io.InputStream)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: The input stream that holds the raw data to be decoded into a bitmap."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode an input stream into a bitmap. If the input stream is null, or cannot be used to decode a bitmap, the function returns null. The stream's position will be where ever it was after the encoded data was read.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeStream (InputStream is)"}, "decodeResource(android.content.res.Resources, int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image could not be decoded."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The resources object containing the image data"], ["int", "int: The resource id of the image data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#graphics#BitmapFactory#decodeResource_E@ with null Options.", "history": "added in API level 1", "FullName": "public static Bitmap decodeResource (Resources res, int id)"}, "decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The resources object containing the image data"], ["int", "int: The resource id of the image data"], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Synonym for opening the given resource and calling @B_android#graphics#BitmapFactory#decodeResourceStream_E@.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeResource (Resources res, int id, BitmapFactory.Options opts)"}, "decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: The input stream that holds the raw data to be decoded into a bitmap. This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: If not null, return the padding rect for the bitmap if it exists, otherwise set padding to [-1,-1,-1,-1]. If no bitmap is returned (null) then padding is unchanged. This value may be null."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@ Prior to Build.VERSION_CODES.KITKAT, if InputStream#markSupported returns true, is.mark(1024) would be called. As of Build.VERSION_CODES.KITKAT, this is no longer the case."]], "SeeAlso": [], "Permissions": [], "Description": "Decode an input stream into a bitmap. If the input stream is null, or cannot be used to decode a bitmap, the function returns null. The stream's position will be where ever it was after the encoded data was read.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeStream (InputStream is, Rect outPadding, BitmapFactory.Options opts)"}, "decodeFileDescriptor(java.io.FileDescriptor)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the decoded bitmap, or null"]], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor containing the bitmap data to decode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeFileDescriptor (FileDescriptor fd)"}, "decodeByteArray(byte[], int, int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image could not be decoded."]], "Parameters": [["byte[]", "byte: byte array of compressed image data"], ["int", "int: offset into imageData for where the decoder should begin parsing."], ["int", "int: the number of bytes, beginning at offset, to parse"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode an immutable bitmap from the specified byte array.", "history": "added in API level 1", "FullName": "public static Bitmap decodeByteArray (byte[] data, int offset, int length)"}, "decodeFile(java.lang.String,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)"]], "Parameters": [["@B_java#lang#String_E@", "String: complete path name for the file to be decoded."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Decode a file path into a bitmap. If the specified file name is null, or cannot be decoded into a bitmap, the function returns null.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeFile (String pathName, BitmapFactory.Options opts)"}, "decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the decoded bitmap, or null"]], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor containing the bitmap data to decode"], ["@B_android#graphics#Rect_E@", "Rect: If not null, return the padding rect for the bitmap if it exists, otherwise set padding to [-1,-1,-1,-1]. If no bitmap is returned (null) then padding is unchanged."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling and whether the image should be completely decoded, or just its size returned."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Decode a bitmap from the file descriptor. If the bitmap cannot be decoded return null. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as-is.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeFileDescriptor (FileDescriptor fd, Rect outPadding, BitmapFactory.Options opts)"}, "decodeByteArray(byte[],int,int,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded, or, if opts is non-null, if opts requested only the size be returned (in opts.outWidth and opts.outHeight)"]], "Parameters": [["byte[]", "byte: byte array of compressed image data"], ["int", "int: offset into imageData for where the decoder should begin parsing."], ["int", "int: the number of bytes, beginning at offset, to parse"], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling and whether the image should be completely decoded, or just is size returned."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Decode an immutable bitmap from the specified byte array.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeByteArray (byte[] data, int offset, int length, BitmapFactory.Options opts)"}, "decodeResource(android.content.res.Resources,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image could not be decoded."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The resources object containing the image data"], ["int", "int: The resource id of the image data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#graphics#BitmapFactory#decodeResource_E@ with null Options.", "history": "Added in API level 1", "FullName": "public static Bitmap decodeResource (Resources res, int id)"}, "decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "This value may be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value may be null."], ["@B_android#util#TypedValue_E@", "TypedValue: This value may be null."], ["@B_java#io#InputStream_E@", "InputStream: This value may be null."], ["@B_android#graphics#Rect_E@", "Rect: This value may be null."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Decode a new Bitmap from an InputStream. This InputStream was obtained from resources, which we pass to be able to scale the bitmap accordingly.", "history": "Added in API level 4", "FullName": "public static Bitmap decodeResourceStream (Resources res, TypedValue value, InputStream is, Rect pad, BitmapFactory.Options opts)"}, "BitmapFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public BitmapFactory ()"}}, "Inheritance": [], "ClassName": "android.graphics.BitmapFactory", "ClassDesc": "Creates Bitmap objects from various sources, including files, streams, and byte-arrays."}