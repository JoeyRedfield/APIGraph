{"Functions": {"FragmentActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "FragmentActivity ()"}, "onAttachFragment(android.support.v4.app.Fragment)": {"Returns": [], "Parameters": [["@B_android#support#v4#app#Fragment_E@", "Fragment no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is attached to the activity. This is called after the attached fragment's onAttach and before the attached fragment's onCreate if the fragment has not yet had a previous call to onCreate.", "history": "added in version 22.0.0", "FullName": "void onAttachFragment (Fragment fragment)"}, "onRetainNonConfigurationInstance()": {"Returns": [["@B_java#lang#Object_E@", "any Object holding the desired state to propagate to the next activity instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retain all appropriate fragment and loader state. You can NOT override this yourself! Use @B_android#support#v4#app#FragmentActivity#onRetainCustomNonConfigurationInstance_E@ if you want to retain your own state.", "history": "added in version 22.0.0", "FullName": "Object onRetainNonConfigurationInstance ()"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call onOptionsMenuClosed() on fragments.", "history": "", "FullName": "void onPanelClosed (int featureId, Menu menu)"}, "validateRequestPermissionsRequestCode(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "void validateRequestPermissionsRequestCode (int requestCode)"}, "onStateNotSaved()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook in to note that fragment state is no longer saved.", "history": "", "FullName": "void onStateNotSaved ()"}, "onResumeFragments()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is the fragment-orientated version of @B_android#support#v4#app#FragmentActivity#onResume_E@ that you can override to perform operations in the Activity at the same point where its fragments are resumed. Be sure to always call through to the super-class.", "history": "added in version 22.0.0", "FullName": "void onResumeFragments ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onPause() to fragments.", "history": "", "FullName": "void onPause ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onStart() to all fragments. Ensure any created loaders are now started.", "history": "", "FullName": "void onStart ()"}, "onBackPressed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take care of popping the fragment back stack or finishing the activity as appropriate.", "history": "", "FullName": "void onBackPressed ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in @B_android#support#v4#app#FragmentActivity#onSaveInstanceState_E@. Note: Otherwise it is null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform initialization of all fragments and loaders.", "history": "", "FullName": "void onCreate (Bundle savedInstanceState)"}, "onMultiWindowModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in multi-window mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Activity#onMultiWindowModeChanged_E@ instead. Called by the system when the activity changes from fullscreen mode to multi-window mode and visa-versa. super.onMultiWindowModeChanged to correctly dispatch the event to support fragments attached to this activity.", "history": "", "FullName": "void onMultiWindowModeChanged (boolean isInMultiWindowMode)"}, "supportStartPostponedEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#startPostponedEnterTransition_E@ that only works with API 21 and later.", "history": "added in version 22.0.0", "FullName": "void supportStartPostponedEnterTransition ()"}, "getSupportFragmentManager()": {"Returns": [["@B_android#support#v4#app#FragmentManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the FragmentManager for interacting with fragments associated with this activity.", "history": "added in version 22.0.0", "FullName": "FragmentManager getSupportFragmentManager ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onStop() to all fragments. Ensure all loaders are stopped.", "history": "", "FullName": "void onStop ()"}, "getLastCustomNonConfigurationInstance()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value previously returned from @B_android#support#v4#app#FragmentActivity#onRetainCustomNonConfigurationInstance_E@.", "history": "added in version 22.0.0", "FullName": "Object getLastCustomNonConfigurationInstance ()"}, "onResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onResume() to fragments. Note that for better inter-operation with older versions of the platform, at the point of this call the fragments attached to the activity are not resumed. This means that in some cases the previous state may still be saved, not allowing fragment transactions that modify the state. To correctly interact with fragments in their proper state, you should instead override @B_android#support#v4#app#FragmentActivity#onResumeFragments_E@.", "history": "", "FullName": "void onResume ()"}, "onCreatePanelMenu(int, android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch to Fragment.onCreateOptionsMenu().", "history": "", "FullName": "boolean onCreatePanelMenu (int featureId, Menu menu)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onNewIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The new intent that was started for the activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle onNewIntent() to inform the fragment manager that the state is not saved. If you are handling new intents and may be making changes to the fragment state, you want to be sure to call through to the super-class here first. Otherwise, if your state is saved but the activity is not stopped, you could get an onNewIntent() call which happens before onResume() and trying to perform fragment operations at that point will throw IllegalStateException because the fragment manager thinks the state is still saved.", "history": "", "FullName": "void onNewIntent (Intent intent)"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onLowMemory() to all fragments.", "history": "", "FullName": "void onLowMemory ()"}, "getSupportMediaController()": {"Returns": [["@B_android#support#v4#media#session#MediaControllerCompat_E@", "The controller which should receive events."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#app#FragmentActivity#setSupportMediaController_E@", "@B_android#app#Activity#getMediaController_E@"], "Permissions": [], "Description": "Retrieves the current @B_android#support#v4#media#session#MediaControllerCompat_E@ for sending media key and volume events.", "history": "", "FullName": "MediaControllerCompat getSupportMediaController ()"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch context and options menu to fragments.", "history": "", "FullName": "boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy all fragments and loaders.", "history": "", "FullName": "void onDestroy ()"}, "supportPostponeEnterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#postponeEnterTransition_E@ that works only on API 21 and later.", "history": "added in version 22.0.0", "FullName": "void supportPostponeEnterTransition ()"}, "onActivityResult(int, int, android.content.Intent)": {"Returns": [], "Parameters": [["int", "int: The integer request code originally supplied to startActivityForResult(), allowing you to identify who this result came from."], ["int", "int: The integer result code returned by the child activity through its setResult()."], ["@B_android#content#Intent_E@", "Intent: An Intent, which can return result data to the caller (various data can be attached to Intent \"extras\")."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch incoming result to the correct fragment.", "history": "", "FullName": "void onActivityResult (int requestCode, int resultCode, Intent data)"}, "getSupportLoaderManager()": {"Returns": [["@B_android#support#v4#app#LoaderManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "LoaderManager getSupportLoaderManager ()"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Save all appropriate fragment state.", "history": "", "FullName": "void onSaveInstanceState (Bundle outState)"}, "supportFinishAfterTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reverses the Activity Scene entry Transition and triggers the calling Activity to reverse its exit Transition. When the exit Transition completes, @B_android#app#Activity#finish_E@ is called. If no entry Transition was used, finish() is called immediately and the Activity exit Transition is run. On Android 4.4 or lower, this method only finishes the Activity with no special exit transition.", "history": "added in version 22.0.0", "FullName": "void supportFinishAfterTransition ()"}, "supportInvalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#app#Activity#invalidateOptionsMenu_E@ directly. Support library version of @B_android#app#Activity#invalidateOptionsMenu_E@. Invalidate the activity's options menu. This will cause relevant presentations of the menu to fully update via calls to onCreateOptionsMenu and onPrepareOptionsMenu the next time the menu is requested.", "history": "added in version 22.0.0", "FullName": "void supportInvalidateOptionsMenu ()"}, "onRetainCustomNonConfigurationInstance()": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use this instead of @B_android#support#v4#app#FragmentActivity#onRetainNonConfigurationInstance_E@. Retrieve later with @B_android#support#v4#app#FragmentActivity#getLastCustomNonConfigurationInstance_E@.", "history": "added in version 22.0.0", "FullName": "Object onRetainCustomNonConfigurationInstance ()"}, "onPostResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onResume() to fragments.", "history": "", "FullName": "void onPostResume ()"}, "onPictureInPictureModeChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the activity is in picture-in-picture mode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Activity#onPictureInPictureModeChanged_E@ instead. Called by the system when the activity changes to and from picture-in-picture mode. super.onPictureInPictureModeChanged to correctly dispatch the event to support fragments attached to this activity.", "history": "", "FullName": "void onPictureInPictureModeChanged (boolean isInPictureInPictureMode)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#content#Context_E@", "https:##developer#android#com@B_android#content#ContextWrapper_E@", "https:##developer#android#com@B_android#view#ContextThemeWrapper_E@", "https:##developer#android#com@B_android#app#Activity_E@"], "ClassName": "android.support.v4.app.FragmentActivity", "ClassDesc": "Base class for activities that want to use the support-based @B_android#support#v4#app#Fragment_E@ and @B_android#support#v4#content#Loader_E@ APIs. When using this class as opposed to new platform's built-in fragment and loader support, you must use the @B_android#support#v4#app#FragmentActivity#getSupportFragmentManager_E@ and @B_android#support#v4#app#FragmentActivity#getSupportLoaderManager_E@ methods respectively to access those features. Known limitations: When using the <fragment> tag, this implementation can not use the parent view's ID as the new fragment's ID. You must explicitly specify an ID (or tag) in the <fragment>."}