{"Functions": {"DexFile(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Applications should use one of the standard classloaders such as @B_dalvik#system#PathClassLoader_E@ instead. Opens a DEX file from a given File object.", "history": "Added in API level 1", "FullName": "public DexFile (File file)"}, "loadDex(java.lang.String,java.lang.String,int)": {"Returns": [["@B_dalvik#system#DexFile_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Applications should use one of the standard classloaders such as @B_dalvik#system#PathClassLoader_E@ instead. Open a DEX file, specifying the file in which the optimized DEX data should be written. If the optimized form exists and appears to be current, it will be used; if not, the VM will attempt to regenerate it.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public static DexFile loadDex (String sourcePathName, String outputPathName, int flags)"}, "loadDex(java.lang.String, java.lang.String, int)": {"Returns": [["@B_dalvik#system#DexFile_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Applications should use one of the standard classloaders such as @B_dalvik#system#PathClassLoader_E@ instead. Open a DEX file, specifying the file in which the optimized DEX data should be written. If the optimized form exists and appears to be current, it will be used; if not, the VM will attempt to regenerate it.", "history": "added in API level 3", "FullName": "public static DexFile loadDex (String sourcePathName, String outputPathName, int flags)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs during closing the file, which normally should not happen"], ["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called when the class is finalized. Makes sure the DEX file is closed.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "protected void finalize ()"}, "DexFile(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Applications should use one of the standard classloaders such as @B_dalvik#system#PathClassLoader_E@ instead. Opens a DEX file from a given filename.", "history": "Added in API level 1", "FullName": "public DexFile (String fileName)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs during closing the file, which normally should not happen"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the DEX file. This may not be able to release all of the resources. If classes from this DEX file are still resident, the DEX file can't be unmapped. In the case where we do not release all the resources, close is called again in the finalizer.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public void close ()"}, "entries()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of names of classes contained in the DEX file, in the usual internal form (like \"java/lang/String\")."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enumerate the names of the classes in this DEX file.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public Enumeration<String> entries ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public String toString ()"}, "loadClass(java.lang.String, java.lang.ClassLoader)": {"Returns": [["@B_java#lang#Class_E@", "the @B_java#lang#Class_E@ object representing the class, or null if the class cannot be loaded"]], "Parameters": [["@B_java#lang#String_E@", "String: the class name, which should look like \"java/lang/String\""], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader that tries to load the class (in most cases the caller of the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads a class. Returns the class on success, or a null reference on failure. If you are not calling this from a class loader, this is most likely not going to do what you want. Use @B_java#lang#Class#forName_E@ instead. The method does not throw @B_java#lang#ClassNotFoundException_E@ if the class isn't found because it isn't reasonable to throw exceptions wildly every time a class is not found in the first DEX file we look at.", "history": "added in API level 1", "FullName": "public Class loadClass (String name, ClassLoader loader)"}, "isDexOptNeeded(java.lang.String)": {"Returns": [["boolean", "true if dexopt should be called on the file, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the absolute path to the apk/jar file to examine."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if fileName is not readable, not a file, or not present."], ["@B_java#io#IOException_E@", "if fileName is not a valid apk/jar file or if problems occur while parsing it."], ["@B_java#lang#NullPointerException_E@", "if fileName is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the VM believes that the apk/jar file is out of date and should be passed through \"dexopt\" again.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public static boolean isDexOptNeeded (String fileName)"}, "loadClass(java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_java#lang#Class_E@", "the @B_java#lang#Class_E@ object representing the class, or null if the class cannot be loaded"]], "Parameters": [["@B_java#lang#String_E@", "String: the class name, which should look like \"java/lang/String\""], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader that tries to load the class (in most cases the caller of the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads a class. Returns the class on success, or a null reference on failure. If you are not calling this from a class loader, this is most likely not going to do what you want. Use @B_java#lang#Class#forName_E@ instead. The method does not throw @B_java#lang#ClassNotFoundException_E@ if the class isn't found because it isn't reasonable to throw exceptions wildly every time a class is not found in the first DEX file we look at.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public Class loadClass (String name, ClassLoader loader)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the file name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the (already opened) DEX file.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public String getName ()"}}, "Inheritance": [], "ClassName": "dalvik.system.DexFile", "ClassDesc": "This class should not be used directly by applications. It will hurt performance in most cases and will lead to incorrect execution of bytecode in the worst case. Applications should use one of the standard classloaders such as @B_dalvik#system#PathClassLoader_E@ instead. Loads DEX files. This class is meant for internal use and should not be used by applications."}