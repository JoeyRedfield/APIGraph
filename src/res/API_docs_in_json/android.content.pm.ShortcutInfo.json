{"Functions": {"getShortLabel()": {"Returns": [["@B_java#lang#CharSequence_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setShortLabel_E@"], "Permissions": [], "Description": "Return the short description of a shortcut.", "history": "Added in API level 25", "FullName": "public CharSequence getShortLabel ()"}, "getLastChangedTimestamp()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Last time when any of the fields was updated.", "history": "Added in API level 25", "FullName": "public long getLastChangedTimestamp ()"}, "getExtras()": {"Returns": [["@B_android#os#PersistableBundle_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setExtras_E@"], "Permissions": [], "Description": "Extras that the app can set for any purpose.", "history": "Added in API level 25", "FullName": "public PersistableBundle getExtras ()"}, "isImmutable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return if a shortcut is immutable, in which case it cannot be modified with any of @B_android#content#pm#ShortcutManager_E@ APIs. All static shortcuts are immutable. When a static shortcut is pinned and is then disabled because it doesn't appear in AndroidManifest.xml for a newer version of the app, @B_android#content#pm#ShortcutInfo#isDeclaredInManifest_E@ returns false, but the shortcut is still immutable. All shortcuts originally published via the @B_android#content#pm#ShortcutManager_E@ APIs are all mutable.", "history": "Added in API level 25", "FullName": "public boolean isImmutable ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 25", "FullName": "public int describeContents ()"}, "getRank()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setRank_E@"], "Permissions": [], "Description": "\"Rank\" of a shortcut, which is a non-negative, sequential value that's unique for each @B_android#content#pm#ShortcutInfo#getActivity_E@ for each of the two types of shortcuts (static and dynamic). Because static shortcuts and dynamic shortcuts have overlapping ranks, when a launcher app shows shortcuts for an activity, it should first show the static shortcuts, followed by the dynamic shortcuts. Within each of those categories, shortcuts should be sorted by rank in ascending order. Floating shortcuts, or shortcuts that are neither static nor dynamic, will all have rank 0, because they aren't sorted. See the @B_android#content#pm#ShortcutManager_E@'s class javadoc for details.", "history": "Added in API level 25", "FullName": "public int getRank ()"}, "getUserHandle()": {"Returns": [["@B_android#os#UserHandle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#os#UserHandle_E@ on which the publisher created this shortcut.", "history": "Added in API level 25", "FullName": "public UserHandle getUserHandle ()"}, "getLongLabel()": {"Returns": [["@B_java#lang#CharSequence_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setLongLabel_E@"], "Permissions": [], "Description": "Return the long description of a shortcut.", "history": "Added in API level 25", "FullName": "public CharSequence getLongLabel ()"}, "isPinned()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether a shortcut is pinned.", "history": "Added in API level 25", "FullName": "public boolean isPinned ()"}, "getDisabledMessage()": {"Returns": [["@B_java#lang#CharSequence_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setDisabledMessage_E@"], "Permissions": [], "Description": "Return the message that should be shown when the user attempts to start a shortcut that is disabled.", "history": "Added in API level 25", "FullName": "public CharSequence getDisabledMessage ()"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ID of a shortcut. Shortcut IDs are unique within each publisher app and must be stable across devices so that shortcuts will still be valid when restored on a different device. See @B_android#content#pm#ShortcutManager_E@ for details.", "history": "Added in API level 25", "FullName": "public String getId ()"}, "getActivity()": {"Returns": [["@B_android#content#ComponentName_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setActivity_E@"], "Permissions": [], "Description": "Return the target activity. This has nothing to do with the activity that this shortcut will launch. Launcher apps should show the launcher icon for the returned activity alongside this shortcut.", "history": "Added in API level 25", "FullName": "public ComponentName getActivity ()"}, "getLocusId()": {"Returns": [["@B_android#content#LocusId_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#content#LocusId_E@ associated with this shortcut. Used by the Android system to correlate objects (such as @B_android#app#Notification_E@ and @B_android#view#contentcapture#ContentCaptureContext_E@).", "history": "Added in API level 29", "FullName": "public LocusId getLocusId ()"}, "getDisabledReason()": {"Returns": [["int", "Value is @B_android#content#pm#ShortcutInfo#DISABLED_REASON_NOT_DISABLED_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_BY_APP_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_APP_CHANGED_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_UNKNOWN_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_VERSION_LOWER_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_BACKUP_NOT_SUPPORTED_E@, @B_android#content#pm#ShortcutInfo#DISABLED_REASON_SIGNATURE_MISMATCH_E@, or @B_android#content#pm#ShortcutInfo#DISABLED_REASON_OTHER_RESTORE_ISSUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns why a shortcut has been disabled.", "history": "Added in API level 28", "FullName": "public int getDisabledReason ()"}, "getIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setIntent_E@"], "Permissions": [], "Description": "Returns the intent that is executed when the user selects this shortcut. If setIntents() was used, then return the last intent in the array. Launcher apps @B_android#content#pm#ShortcutInfo_E@ is obtained via @B_android#content#pm#LauncherApps_E@, then this method will always return null. Launchers can only start a shortcut intent with @B_android#content#pm#LauncherApps#startShortcut_E@.", "history": "Added in API level 25", "FullName": "public Intent getIntent ()"}, "getCategories()": {"Returns": [["@B_java#util#Set_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setCategories_E@"], "Permissions": [], "Description": "Return the shortcut's categories.", "history": "Added in API level 25", "FullName": "public Set<String> getCategories ()"}, "hasKeyFieldsOnly()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether a shortcut only contains \"key\" information only or not. If true, only the following fields are available. @B_android#content#pm#ShortcutInfo#getId_E@ @B_android#content#pm#ShortcutInfo#getPackage_E@ @B_android#content#pm#ShortcutInfo#getActivity_E@ @B_android#content#pm#ShortcutInfo#getLastChangedTimestamp_E@ @B_android#content#pm#ShortcutInfo#isDynamic_E@ @B_android#content#pm#ShortcutInfo#isPinned_E@ @B_android#content#pm#ShortcutInfo#isDeclaredInManifest_E@ @B_android#content#pm#ShortcutInfo#isImmutable_E@ @B_android#content#pm#ShortcutInfo#isEnabled_E@ @B_android#content#pm#ShortcutInfo#getUserHandle_E@ For performance reasons, shortcuts passed to @B_android#content#pm#LauncherApps#Callback#onShortcutsChanged_E@ as well as those returned from @B_android#content#pm#LauncherApps#getShortcuts_E@ while using the @B_android#content#pm#LauncherApps#ShortcutQuery#FLAG_GET_KEY_FIELDS_ONLY_E@ option contain only key information.", "history": "Added in API level 25", "FullName": "public boolean hasKeyFieldsOnly ()"}, "getPackage()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the package name of the publisher app.", "history": "Added in API level 25", "FullName": "public String getPackage ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 25", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "isEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false if a shortcut is disabled with @B_android#content#pm#ShortcutManager#disableShortcuts_E@.", "history": "Added in API level 25", "FullName": "public boolean isEnabled ()"}, "isDeclaredInManifest()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether a shortcut is static; that is, whether a shortcut is published from AndroidManifest.xml. If true, the shortcut is also @B_android#content#pm#ShortcutInfo#isImmutable_E@. When an app is upgraded and a shortcut is no longer published from AndroidManifest.xml, this will be set to false. If the shortcut is not pinned, then it'll disappear. However, if it's pinned, it will still be visible, @B_android#content#pm#ShortcutInfo#isEnabled_E@ will be false and @B_android#content#pm#ShortcutInfo#isImmutable_E@ will be true.", "history": "Added in API level 25", "FullName": "public boolean isDeclaredInManifest ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation, intended for logging. Some fields will be retracted.", "history": "Added in API level 25", "FullName": "public String toString ()"}, "getIntents()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutInfo#Builder#setIntents_E@"], "Permissions": [], "Description": "Return the intent set with @B_android#content#pm#ShortcutInfo#Builder#setIntents_E@. Launcher apps @B_android#content#pm#ShortcutInfo_E@ is obtained via @B_android#content#pm#LauncherApps_E@, then this method will always return null. Launchers can only start a shortcut intent with @B_android#content#pm#LauncherApps#startShortcut_E@.", "history": "Added in API level 25", "FullName": "public Intent[] getIntents ()"}, "isDynamic()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether a shortcut is dynamic.", "history": "Added in API level 25", "FullName": "public boolean isDynamic ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 25", "FullName": "public void writeToParcel (Parcel dest, int flags)"}}, "Inheritance": [], "ClassName": "android.content.pm.ShortcutInfo", "ClassDesc": "Represents a shortcut that can be published via @B_android#content#pm#ShortcutManager_E@."}