{"Functions": {"beginSection(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the code section to appear in the trace. This may be at most 127 Unicode code units long. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a trace message to indicate that a given section of code has begun. This call must be followed by a corresponding call to @B_android#os#Trace#endSection_E@ on the same thread. At this time the vertical bar character '|', newline character '\\n', and null character '\\0' are used internally by the tracing mechanism. If sectionName contains these characters they will be replaced with a space character in the trace.", "history": "Added in API level 18", "FullName": "public static void beginSection (String sectionName)"}, "isEnabled()": {"Returns": [["boolean", "true if tracing is currently enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether or not tracing is currently enabled. This is useful to avoid intermediate string creation for trace sections that require formatting. It is not necessary to guard all Trace method calls as they internally already check this. However it is recommended to use this to prevent creating any temporary objects that would then be passed to those methods to reduce runtime cost when tracing isn't enabled.", "history": "Added in API level 29", "FullName": "public static boolean isEnabled ()"}, "beginAsyncSection(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The method name to appear in the trace. This value must never be null."], ["int", "int: Unique identifier for distinguishing simultaneous events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a trace message to indicate that a given section of code has begun. Must be followed by a call to @B_android#os#Trace#endAsyncSection_E@ with the same methodName and cookie. Unlike @B_android#os#Trace#beginSection_E@ and @B_android#os#Trace#endSection_E@, asynchronous events do not need to be nested. The name and cookie used to begin an event must be used to end it.", "history": "Added in API level 29", "FullName": "public static void beginAsyncSection (String methodName, int cookie)"}, "endAsyncSection(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The method name to appear in the trace. This value must never be null."], ["int", "int: Unique identifier for distinguishing simultaneous events"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a trace message to indicate that the current method has ended. Must be called exactly once for each call to @B_android#os#Trace#beginAsyncSection_E@ using the same name and cookie.", "history": "Added in API level 29", "FullName": "public static void endAsyncSection (String methodName, int cookie)"}, "setCounter(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The counter name to appear in the trace. This value must never be null."], ["long", "long: The counter value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes trace message to indicate the value of a given counter.", "history": "Added in API level 29", "FullName": "public static void setCounter (String counterName, long counterValue)"}, "endSection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a trace message to indicate that a given section of code has ended. This call must be preceeded by a corresponding call to @B_android#os#Trace#beginSection_E@. Calling this method will mark the end of the most recently begun section of code, so care must be taken to ensure that beginSection / endSection pairs are properly nested and called from the same thread.", "history": "Added in API level 18", "FullName": "public static void endSection ()"}}, "Inheritance": [], "ClassName": "android.os.Trace", "ClassDesc": "Writes trace events to the system trace buffer. These trace events can be collected and visualized using the Systrace tool. This tracing mechanism is independent of the method tracing mechanism offered by @B_android#os#Debug#startMethodTracing_E@. In particular, it enables tracing of events that occur across multiple processes. For information about using the Systrace tool, read"}