{"Functions": {"getActualTypeArguments()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Type objects representing the actual type arguments to this type"]], "Parameters": [], "Throws": [["@B_java#lang#TypeNotPresentException_E@", "if any of the actual type arguments refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if any of the actual type parameters refer to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects representing the actual type arguments to this type. Note that in some cases, the returned array be empty. This can occur if this type represents a non-parameterized type nested within a parameterized type.", "history": "Added in API level 1", "FullName": "public abstract Type[] getActualTypeArguments ()"}, "getRawType()": {"Returns": [["@B_java#lang#reflect#Type_E@", "the Type object representing the class or interface that declared this type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Type object representing the class or interface that declared this type.", "history": "Added in API level 1", "FullName": "public abstract Type getRawType ()"}, "getOwnerType()": {"Returns": [["@B_java#lang#reflect#Type_E@", "a Type object representing the type that this type is a member of. If this type is a top-level type, null is returned"]], "Parameters": [], "Throws": [["@B_java#lang#TypeNotPresentException_E@", "if the owner type refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if the owner type refers to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Type object representing the type that this type is a member of. For example, if this type is O<T>.I<S>, return a representation of O<T>. If this type is a top-level type, null is returned.", "history": "Added in API level 1", "FullName": "public abstract Type getOwnerType ()"}}, "Inheritance": [], "ClassName": "java.lang.reflect.ParameterizedType", "ClassDesc": "ParameterizedType represents a parameterized type such as Collection<String>. A parameterized type is created the first time it is needed by a reflective method, as specified in this package. When a parameterized type p is created, the generic type declaration that p instantiates is resolved, and all type arguments of p are created recursively. See @B_java#lang#reflect#TypeVariable_E@ for details on the creation process for type variables. Repeated creation of a parameterized type has no effect. Instances of classes that implement this interface must implement an equals() method that equates any two instances that share the same generic type declaration and have equal type parameters."}