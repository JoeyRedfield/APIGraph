{"Functions": {"drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.", "history": "Added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "SynchronousQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a SynchronousQueue with nonfair access policy.", "history": "Added in API level 1", "FullName": "public SynchronousQueue ()"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this queue, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, if another thread is waiting to receive it.", "history": "Added in API level 1", "FullName": "public boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "zero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns zero. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public int remainingCapacity ()"}, "SynchronousQueue(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true, waiting threads contend in FIFO order for access; otherwise the order is unspecified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a SynchronousQueue with the specified fairness policy.", "history": "Added in API level 1", "FullName": "public SynchronousQueue (boolean fair)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "false"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns false. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does nothing. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before a consumer appears"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.", "history": "Added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "an empty spliterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty spliterator in which calls to @B_java#util#Spliterator#trySplit_E@ always return null.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an empty iterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty iterator in which hasNext always returns false.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "poll()": {"Returns": [["E", "the head of this queue, or null if no element is available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, if another thread is currently making an element available.", "history": "Added in API level 1", "FullName": "public E poll ()"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "false unless given collection is empty"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns false unless the given collection is empty. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "false"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns false. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "toArray(T[])": {"Returns": [["T[]", "the specified array"]], "Parameters": [["T[]", "T: the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the zeroth element of the specified array to null (if the array has non-zero length) and returns it.", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "zero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns zero. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public int size ()"}, "isEmpty()": {"Returns": [["boolean", "true"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns true. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary for another thread to insert it.", "history": "Added in API level 1", "FullName": "public E take ()"}, "peek()": {"Returns": [["E", "null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns null. A SynchronousQueue does not return elements unless actively waited on.", "history": "Added in API level 1", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the element to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns false. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "\"[]\""]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns \"[]\".", "history": "Added in API level 1", "FullName": "public String toString ()"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this queue, waiting if necessary for another thread to receive it.", "history": "Added in API level 1", "FullName": "public void put (E e)"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public int drainTo (Collection<? super E> c)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "a zero-length array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a zero-length array.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before a consumer appears"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, waiting if necessary up to the specified wait time for another thread to receive it.", "history": "added in API level 1", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns false. A SynchronousQueue has no internal capacity.", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary up to the specified wait time, for another thread to insert it.", "history": "added in API level 1", "FullName": "public E poll (long timeout, TimeUnit unit)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.SynchronousQueue<E>", "ClassDesc": "A peek at a synchronous queue because an element is only present when you try to remove it; you cannot insert an element (using any method) unless another thread is trying to remove it; you cannot iterate as there is nothing to iterate. The head of the queue is the element that the first queued inserting thread is trying to add to the queue; if there is no such queued thread then no element is available for removal and poll() will return null. For purposes of other Collection methods (for example contains), a SynchronousQueue acts as an empty collection. This queue does not permit null elements. Synchronous queues are similar to rendezvous channels used in CSP and Ada. They are well suited for handoff designs, in which an object running in one thread must sync up with an object running in another thread in order to hand it some information, event, or task. This class supports an optional fairness policy for ordering waiting producer and consumer threads. By default, this ordering is not guaranteed. However, a queue constructed with fairness set to true grants threads access in FIFO order. This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces."}