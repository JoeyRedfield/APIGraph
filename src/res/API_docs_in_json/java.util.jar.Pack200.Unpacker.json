{"Functions": {"addPropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: An object to be invoked when a property is changed."]], "Throws": [], "SeeAlso": ["@B_java#util#jar#Pack200#Unpacker#properties_E@", "@B_java#util#jar#Pack200#Unpacker_E@"], "Permissions": [], "Description": "The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the unpacker can poll the value of the @B_java#util#jar#Pack200#Unpacker#PROGRESS_E@ property instead. Registers a listener for PropertyChange events on the properties map. This is typically used by applications to update a progress bar. The default implementation of this method does nothing and has no side-effects. java.beans package.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public void addPropertyChangeListener (PropertyChangeListener listener)"}, "unpack(java.io.File,java.util.jar.JarOutputStream)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: a File."], ["@B_java#util#jar#JarOutputStream_E@", "JarOutputStream: a JarOutputStream."]], "Throws": [["@B_java#io#IOException_E@", "if an error is encountered."]], "SeeAlso": [], "Permissions": [], "Description": "Read a Pack200 archive, and write the encoded JAR to a JarOutputStream. Does not close its output. (The output can accumulate more elements.)", "history": "Added in API level 1", "FullName": "public abstract void unpack (File in, JarOutputStream out)"}, "unpack(java.io.InputStream,java.util.jar.JarOutputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream."], ["@B_java#util#jar#JarOutputStream_E@", "JarOutputStream: a JarOutputStream."]], "Throws": [["@B_java#io#IOException_E@", "if an error is encountered."]], "SeeAlso": [], "Permissions": [], "Description": "Read a Pack200 archive, and write the encoded JAR to a JarOutputStream. The entire contents of the input stream will be read. It may be more efficient to read the Pack200 archive to a file and pass the File object, using the alternate method described below. Closes its input but not its output. (The output can accumulate more elements.)", "history": "Added in API level 1", "FullName": "public abstract void unpack (InputStream in, JarOutputStream out)"}, "properties()": {"Returns": [["@B_java#util#SortedMap_E@", "A sorted association of option key strings to option values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the set of this engine's properties. This set is a \"live view\", so that changing its contents immediately affects the Packer engine, and changes from the engine (such as progress indications) are immediately visible in the map. The property map may contain pre-defined implementation specific and default properties. Users are encouraged to read the information and fully understand the implications, before modifying pre-existing properties. Implementation specific properties are prefixed with a package name associated with the implementor, beginning with Unknown properties may be ignored or rejected with an unspecified error, and invalid entries may cause an unspecified error to be thrown.", "history": "Added in API level 1", "FullName": "public abstract SortedMap<String, String> properties ()"}, "removePropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChange listener to be removed."]], "Throws": [], "SeeAlso": ["@B_java#util#jar#Pack200#Unpacker#addPropertyChangeListener_E@"], "Permissions": [], "Description": "The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Remove a listener for PropertyChange events, added by the @B_java#util#jar#Pack200#Unpacker#addPropertyChangeListener_E@. The default implementation of this method does nothing and has no side-effects. java.beans package.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public void removePropertyChangeListener (PropertyChangeListener listener)"}}, "Inheritance": [], "ClassName": "java.util.jar.Pack200.Unpacker", "ClassDesc": "The unpacker engine converts the packed stream to a JAR file. An instance of the engine can be obtained using @B_java#util#jar#Pack200#newUnpacker_E@. Every JAR file produced by this engine will include the string \" Note: Unless otherwise noted, passing a @B_java#lang#NullPointerException_E@ to be thrown. This version of the unpacker is compatible with all previous versions."}