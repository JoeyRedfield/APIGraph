{"Functions": {"setInnerRadiusRatio(float)": {"Returns": [], "Parameters": [["float", "float: Value is 0.0f or greater"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#getInnerRadiusRatio_E@"], "Permissions": [], "Description": "Inner radius of the ring expressed as a ratio of the ring's width.", "history": "Added in API level 29", "FullName": "public void setInnerRadiusRatio (float innerRadiusRatio)"}, "setShape(int)": {"Returns": [], "Parameters": [["int", "int: The desired shape for this drawable: @B_android#graphics#drawable#GradientDrawable#LINE_E@, @B_android#graphics#drawable#GradientDrawable#OVAL_E@, @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@ or @B_android#graphics#drawable#GradientDrawable#RING_E@ Value is @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@, @B_android#graphics#drawable#GradientDrawable#OVAL_E@, @B_android#graphics#drawable#GradientDrawable#LINE_E@, or @B_android#graphics#drawable#GradientDrawable#RING_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@"], "Permissions": [], "Description": "Sets the type of shape used to draw the gradient. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setShape (int shape)"}, "getGradientRadius()": {"Returns": [["float", "the radius of the gradient in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setGradientRadius_E@"], "Permissions": [], "Description": "Returns the radius of the gradient in pixels. The radius is valid only when the gradient type is set to @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@.", "history": "Added in API level 21", "FullName": "public float getGradientRadius ()"}, "setStroke(int, android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["@B_android#content#res#ColorStateList_E@", "ColorStateList: The color state list of the stroke"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color state list for the drawable. If width is zero, then no stroke is drawn. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "added in API level 21", "FullName": "public void setStroke (int width, ColorStateList colorStateList)"}, "getThickness()": {"Returns": [["int", "This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setThickness_E@"], "Permissions": [], "Description": "Return the thickness of the ring This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getThickness ()"}, "setColor(int)": {"Returns": [], "Parameters": [["int", "int: The color used to fill the shape"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setColors_E@", "@B_android#graphics#drawable#GradientDrawable#getColor_E@"], "Permissions": [], "Description": "Changes this drawable to use a single color instead of a gradient. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing the color.", "history": "Added in API level 1", "FullName": "public void setColor (int argb)"}, "getColor()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the color state list used to fill this gradient, or null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setColor_E@"], "Permissions": [], "Description": "Returns the color state list used to fill the shape, or null if the shape is filled with a gradient or has no fill color.", "history": "Added in API level 24", "FullName": "public ColorStateList getColor ()"}, "getCornerRadius()": {"Returns": [["float", "the radius in pixels of the corners of the rectangle shape, or 0"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setCornerRadius_E@"], "Permissions": [], "Description": "Returns the radius for the corners of the gradient, that was previously set with @B_android#graphics#drawable#GradientDrawable#setCornerRadius_E@. If the radius was previously cleared via passing null to @B_android#graphics#drawable#GradientDrawable#setCornerRadii_E@, this method will return 0.", "history": "Added in API level 24", "FullName": "public float getCornerRadius ()"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "GradientDrawable(android.graphics.drawable.GradientDrawable.Orientation,int[])": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#GradientDrawable#Orientation_E@", "GradientDrawable.Orientation no parameter comment"], ["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new gradient drawable given an orientation and an array of colors for the gradient.", "history": "Added in API level 1", "FullName": "public GradientDrawable (GradientDrawable.Orientation orientation, int[] colors)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 1", "FullName": "public void setDither (boolean dither)"}, "setUseLevel(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the gradient should be scaled based on level, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this drawable's level property will be used to scale the gradient. If a gradient is not used, this property has no effect. Scaling behavior varies based on gradient type: @B_android#graphics#drawable#GradientDrawable#LINEAR_GRADIENT_E@ adjusts the ending position along the gradient's axis of orientation (see @B_android#graphics#drawable#GradientDrawable#getOrientation_E@) @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@ adjusts the outer radius @B_android#graphics#drawable#GradientDrawable#SWEEP_GRADIENT_E@ adjusts the ending angle The default value for this property is false. android:useLevel attribute on the inner <gradient> tag, NOT the android:useLevel attribute on the outer <shape> tag. For example, @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setUseLevel (boolean useLevel)"}, "setGradientCenter(float, float)": {"Returns": [], "Parameters": [["float", "float: the X-position of the center of the gradient"], ["float", "float: the Y-position of the center of the gradient"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setGradientType_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientCenterX_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientCenterY_E@"], "Permissions": [], "Description": "Sets the position of the center of the gradient as a fraction of the width and height. The default value is (0.5, 0.5). @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "added in API level 1", "FullName": "public void setGradientCenter (float x, float y)"}, "setGradientRadius(float)": {"Returns": [], "Parameters": [["float", "float: the radius of the gradient in pixels"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setGradientType_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientRadius_E@"], "Permissions": [], "Description": "Sets the radius of the gradient. The radius is honored only when the gradient type is set to @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setGradientRadius (float gradientRadius)"}, "setStroke(int,android.content.res.ColorStateList,float,float)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["@B_android#content#res#ColorStateList_E@", "ColorStateList: The color state list of the stroke"], ["float", "float: The length in pixels of the dashes, set to 0 to disable dashes"], ["float", "float: The gap in pixels between dashes"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color state list for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 21", "FullName": "public void setStroke (int width, ColorStateList colorStateList, float dashWidth, float dashGap)"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "setColors(int[])": {"Returns": [], "Parameters": [["int[]", "int: an array containing 2 or more ARGB colors This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setColor_E@"], "Permissions": [], "Description": "Sets the colors used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing the colors.", "history": "Added in API level 16", "FullName": "public void setColors (int[] colors)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setStroke(int, int, float, float)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["int", "int: The color of the stroke"], ["float", "float: The length in pixels of the dashes, set to 0 to disable dashes"], ["float", "float: The gap in pixels between dashes"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "added in API level 1", "FullName": "public void setStroke (int width, int color, float dashWidth, float dashGap)"}, "setThicknessRatio(float)": {"Returns": [], "Parameters": [["float", "float: Value is 0.0f or greater"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#getThicknessRatio_E@"], "Permissions": [], "Description": "Configure the thickness of the ring expressed as a ratio of the ring's width.", "history": "Added in API level 29", "FullName": "public void setThicknessRatio (float thicknessRatio)"}, "setOrientation(android.graphics.drawable.GradientDrawable.Orientation)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#GradientDrawable#Orientation_E@", "GradientDrawable.Orientation: the desired orientation (angle) of the gradient"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#getOrientation_E@"], "Permissions": [], "Description": "Sets the orientation of the gradient defined in this drawable. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing the orientation.", "history": "Added in API level 16", "FullName": "public void setOrientation (GradientDrawable.Orientation orientation)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 1", "FullName": "public void setAlpha (int alpha)"}, "getInnerRadius()": {"Returns": [["int", "This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setInnerRadius_E@"], "Permissions": [], "Description": "Retrn the inner radius of the ring This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getInnerRadius ()"}, "setPadding(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Left padding of the gradient shape This units of this value are pixels."], ["int", "int: Top padding of the gradient shape This units of this value are pixels."], ["int", "int: Right padding of the gradient shape This units of this value are pixels."], ["int", "int: Bottom padding of the gradient shape This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configure the padding of the gradient shape", "history": "Added in API level 29", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "setGradientCenter(float,float)": {"Returns": [], "Parameters": [["float", "float: the X-position of the center of the gradient"], ["float", "float: the Y-position of the center of the gradient"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setGradientType_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientCenterX_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientCenterY_E@"], "Permissions": [], "Description": "Sets the position of the center of the gradient as a fraction of the width and height. The default value is (0.5, 0.5). @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setGradientCenter (float x, float y)"}, "getThicknessRatio()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setThicknessRatio_E@"], "Permissions": [], "Description": "Return the thickness ratio of the ring expressed as a ratio of the ring's width.", "history": "Added in API level 29", "FullName": "public float getThicknessRatio ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 1", "FullName": "public int getOpacity ()"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setColor(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: The color state list used to fill the shape This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#getColor_E@"], "Permissions": [], "Description": "Changes this drawable to use a single color state list instead of a gradient. Calling this method with a null argument will clear the color and is equivalent to calling @B_android#graphics#drawable#GradientDrawable#setColor_E@ with the argument @B_android#graphics#Color#TRANSPARENT_E@. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing the color.", "history": "Added in API level 21", "FullName": "public void setColor (ColorStateList colorStateList)"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 1", "FullName": "protected boolean onLevelChange (int level)"}, "setCornerRadii(float[])": {"Returns": [], "Parameters": [["float[]", "float: an array of length >= 8 containing 4 pairs of X and Y radius for each corner, specified in pixels This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setShape_E@", "@B_android#graphics#drawable#GradientDrawable#setCornerRadius_E@"], "Permissions": [], "Description": "Specifies radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. This property is honored only when the shape is of type @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setCornerRadii (float[] radii)"}, "setSize(int,int)": {"Returns": [], "Parameters": [["int", "int: The width of the shape used by this drawable"], ["int", "int: The height of the shape used by this drawable"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setGradientType_E@"], "Permissions": [], "Description": "Sets the size of the shape drawn by this drawable. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setSize (int width, int height)"}, "getInnerRadiusRatio()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setInnerRadiusRatio_E@"], "Permissions": [], "Description": "Return the inner radius of the ring expressed as a ratio of the ring's width.", "history": "Added in API level 29", "FullName": "public float getInnerRadiusRatio ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "setStroke(int, int)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["int", "int: The color of the stroke"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "added in API level 1", "FullName": "public void setStroke (int width, int color)"}, "setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending modeThis value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "GradientDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public GradientDrawable ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "Added in API level 21", "FullName": "public ColorFilter getColorFilter ()"}, "getShape()": {"Returns": [["int", "the type of shape used by this drawable Value is @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@, @B_android#graphics#drawable#GradientDrawable#OVAL_E@, @B_android#graphics#drawable#GradientDrawable#LINE_E@, or @B_android#graphics#drawable#GradientDrawable#RING_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setShape_E@"], "Permissions": [], "Description": "Returns the type of shape used by this drawable, one of @B_android#graphics#drawable#GradientDrawable#LINE_E@, @B_android#graphics#drawable#GradientDrawable#OVAL_E@, @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@ or @B_android#graphics#drawable#GradientDrawable#RING_E@.", "history": "Added in API level 24", "FullName": "public int getShape ()"}, "getGradientCenterY()": {"Returns": [["float", "the Y-position of the center of the gradient"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setGradientCenter_E@"], "Permissions": [], "Description": "Returns the Y-position of the center of this gradient as a fraction of the height.", "history": "Added in API level 24", "FullName": "public float getGradientCenterY ()"}, "getGradientType()": {"Returns": [["int", "the type of gradient used by this drawable Value is @B_android#graphics#drawable#GradientDrawable#LINEAR_GRADIENT_E@, @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@, or @B_android#graphics#drawable#GradientDrawable#SWEEP_GRADIENT_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setGradientType_E@"], "Permissions": [], "Description": "Returns the type of gradient used by this drawable, one of @B_android#graphics#drawable#GradientDrawable#LINEAR_GRADIENT_E@, @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@, or @B_android#graphics#drawable#GradientDrawable#SWEEP_GRADIENT_E@.", "history": "Added in API level 24", "FullName": "public int getGradientType ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "setGradientType(int)": {"Returns": [], "Parameters": [["int", "int: The type of the gradient: @B_android#graphics#drawable#GradientDrawable#LINEAR_GRADIENT_E@, @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@ or @B_android#graphics#drawable#GradientDrawable#SWEEP_GRADIENT_E@ Value is @B_android#graphics#drawable#GradientDrawable#LINEAR_GRADIENT_E@, @B_android#graphics#drawable#GradientDrawable#RADIAL_GRADIENT_E@, or @B_android#graphics#drawable#GradientDrawable#SWEEP_GRADIENT_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#getGradientType_E@"], "Permissions": [], "Description": "Sets the type of gradient used by this drawable. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setGradientType (int gradient)"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getGradientCenterX()": {"Returns": [["float", "the X-position of the center of the gradient"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setGradientCenter_E@"], "Permissions": [], "Description": "Returns the X-position of the center of the gradient as a fraction of the width.", "history": "Added in API level 24", "FullName": "public float getGradientCenterX ()"}, "setThickness(int)": {"Returns": [], "Parameters": [["int", "int: This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configure the thickness of the ring.", "history": "Added in API level 29", "FullName": "public void setThickness (int thickness)"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getColors()": {"Returns": [["int[]", "the colors used to draw the gradient, or null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setColors_E@"], "Permissions": [], "Description": "Returns the colors used to draw the gradient, or null if the gradient is drawn using a single color or no colors.", "history": "Added in API level 24", "FullName": "public int[] getColors ()"}, "setInnerRadius(int)": {"Returns": [], "Parameters": [["int", "int: This units of this value are pixels."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#getInnerRadius_E@"], "Permissions": [], "Description": "Configure the inner radius of the ring.", "history": "Added in API level 29", "FullName": "public void setInnerRadius (int innerRadius)"}, "setColors(int[],float[])": {"Returns": [], "Parameters": [["int[]", "int: an array containing 2 or more ARGB colors This value may be null."], ["float[]", "float: optional array of floating point parameters representing the positions of the colors. Null evenly disperses the colors This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setColors_E@"], "Permissions": [], "Description": "Sets the colors and offsets used to draw the gradient. Each color is specified as an ARGB integer and the array must contain at least 2 colors. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing the colors.", "history": "Added in API level 29", "FullName": "public void setColors (int[] colors, float[] offsets)"}, "getCornerRadii()": {"Returns": [["float[]", "an array containing the radii for each of the 4 corners, or null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setCornerRadii_E@"], "Permissions": [], "Description": "Returns the radii for each of the 4 corners. For each corner, the array contains 2 values, [X_radius, Y_radius]. The corners are ordered top-left, top-right, bottom-right, bottom-left. If the radius was previously set with @B_android#graphics#drawable#GradientDrawable#setCornerRadius_E@, or if the corners are not rounded, this method will return null.", "history": "Added in API level 24", "FullName": "public float[] getCornerRadii ()"}, "setSize(int, int)": {"Returns": [], "Parameters": [["int", "int: The width of the shape used by this drawable"], ["int", "int: The height of the shape used by this drawable"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setGradientType_E@"], "Permissions": [], "Description": "Sets the size of the shape drawn by this drawable. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "added in API level 1", "FullName": "public void setSize (int width, int height)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 1", "FullName": "protected void onBoundsChange (Rect r)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "getOrientation()": {"Returns": [["@B_android#graphics#drawable#GradientDrawable#Orientation_E@", "the orientation of the gradient defined in this drawable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setOrientation_E@"], "Permissions": [], "Description": "Returns the orientation of the gradient defined in this drawable.", "history": "Added in API level 16", "FullName": "public GradientDrawable.Orientation getOrientation ()"}, "setCornerRadius(float)": {"Returns": [], "Parameters": [["float", "float: The radius in pixels of the corners of the rectangle shape"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setCornerRadii_E@", "@B_android#graphics#drawable#GradientDrawable#setShape_E@"], "Permissions": [], "Description": "Specifies the radius for the corners of the gradient. If this is > 0, then the drawable is drawn in a round-rectangle, rather than a rectangle. This property is honored only when the shape is of type @B_android#graphics#drawable#GradientDrawable#RECTANGLE_E@. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setCornerRadius (float radius)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "setStroke(int,int,float,float)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["int", "int: The color of the stroke"], ["float", "float: The length in pixels of the dashes, set to 0 to disable dashes"], ["float", "float: The gap in pixels between dashes"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. This method can also be used to dash the stroke. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setStroke (int width, int color, float dashWidth, float dashGap)"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "setStroke(int,android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["@B_android#content#res#ColorStateList_E@", "ColorStateList: The color state list of the stroke"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color state list for the drawable. If width is zero, then no stroke is drawn. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 21", "FullName": "public void setStroke (int width, ColorStateList colorStateList)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "setStroke(int,int)": {"Returns": [], "Parameters": [["int", "int: The width in pixels of the stroke"], ["int", "int: The color of the stroke"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#mutate_E@", "@B_android#graphics#drawable#GradientDrawable#setStroke_E@"], "Permissions": [], "Description": "Set the stroke width and color for the drawable. If width is zero, then no stroke is drawn. @B_android#graphics#drawable#GradientDrawable#mutate_E@ before changing this property.", "history": "Added in API level 1", "FullName": "public void setStroke (int width, int color)"}, "getUseLevel()": {"Returns": [["boolean", "true if the gradient should be scaled based on level, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#GradientDrawable#setUseLevel_E@"], "Permissions": [], "Description": "Returns whether this drawable's level property will be used to scale the gradient.", "history": "Added in API level 24", "FullName": "public boolean getUseLevel ()"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.GradientDrawable", "ClassDesc": "A Drawable with a color gradient for buttons, backgrounds, etc. It can be defined in an XML file with the <shape> element. For more information, see the guide to"}