{"Functions": {"choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching the new sub-Activity to prompt the user to select a private key; used only to call startActivity(); must not be null. This value must never be null."], ["@B_android#security#KeyChainAliasCallback_E@", "KeyChainAliasCallback: Callback to invoke when the request completes; must not be null. This value must never be null."], ["@B_java#lang#String_E@", "String: The acceptable types of asymmetric keys such as \"RSA\", \"EC\" or null. This value may be null. Value is @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_RSA_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_EC_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_AES_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA1_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA224_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA256_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA384_E@, or @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA512_E@"], ["@B_java#security#Principal_E@", "Principal: The acceptable certificate issuers for the certificate matching the private key, or null. This value may be null."], ["@B_java#lang#String_E@", "String: The host name of the server requesting the certificate, or null if unavailable. This value may be null."], ["int", "int: The port number of the server requesting the certificate, or -1 if unavailable."], ["@B_java#lang#String_E@", "String: The alias to preselect if available, or null if unavailable. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Launches an Activity for the user to select the alias for a private key and certificate pair for authentication. The selected alias or null will be returned via the KeyChainAliasCallback callback. A device policy controller (as a device or profile owner) can intercept the request before the activity is shown, to pick a specific private key alias by implementing @B_android#app#admin#DeviceAdminReceiver#onChoosePrivateKeyAlias_E@. keyTypes and issuers may be used to narrow down suggested choices to the user. If either keyTypes or issuers is specified and non-empty, and there are no matching certificates in the KeyChain, then the certificate selection prompt would be suppressed entirely. host and port may be used to give the user more context about the server requesting the credentials. alias allows the caller to preselect an existing alias which will still be subject to user confirmation.", "history": "Added in API level 14", "FullName": "public static void choosePrivateKeyAlias (Activity activity, KeyChainAliasCallback response, String[] keyTypes, Principal[] issuers, String host, int port, String alias)"}, "isBoundKeyAlgorithm(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null. Value is @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_RSA_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_EC_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_AES_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA1_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA224_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA256_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA384_E@, or @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA512_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the key is bound to the secure hardware is known only once the key has been imported. To find out, use: Returns true if the current device's KeyChain binds any PrivateKey of the given algorithm to the device once imported or generated. This can be used to tell if there is special hardware support that can be used to bind keys to the device in a way that makes it non-exportable.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public static boolean isBoundKeyAlgorithm (String algorithm)"}, "KeyChain()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public KeyChain ()"}, "getPrivateKey(android.content.Context,java.lang.String)": {"Returns": [["@B_java#security#PrivateKey_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_java#lang#String_E@", "String: The alias of the desired private key, typically returned via @B_android#security#KeyChainAliasCallback#alias_E@. This value must never be null."]], "Throws": [["@B_android#security#KeyChainException_E@", "if the alias was valid but there was some problem accessing it."], ["@B_java#lang#IllegalStateException_E@", "if called from the main thread."], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the PrivateKey for the requested alias, or null if the alias does not exist or the caller has no permission to access it (see note on exceptions below). This method may block while waiting for a connection to another process, and must never be called from the main thread. As @B_android#app#Activity_E@ and @B_android#app#Service_E@ contexts are short-lived and can be destroyed at any time from the main thread, it is safer to rely on a long-lived context such as one returned from @B_android#content#Context#getApplicationContext_E@. If the caller provides a valid alias to which it was not granted access, then the caller must invoke @B_android#security#KeyChain#choosePrivateKeyAlias_E@ again to get another valid alias or a grant to access the same alias. On Android versions prior to Q, when a key associated with the specified alias is unavailable, the method will throw a KeyChainException rather than return null. If the exception's cause (as obtained by calling KeyChainException.getCause()) is a throwable of type IllegalStateException then the caller lacks a grant to access the key and certificates associated with this alias. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 14", "FullName": "public static PrivateKey getPrivateKey (Context context, String alias)"}, "getCertificateChain(android.content.Context,java.lang.String)": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."], ["@B_java#lang#String_E@", "String: The alias of the desired certificate chain, typically returned via @B_android#security#KeyChainAliasCallback#alias_E@. This value must never be null."]], "Throws": [["@B_android#security#KeyChainException_E@", "if the alias was valid but there was some problem accessing it."], ["@B_java#lang#IllegalStateException_E@", "if called from the main thread."], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the X509Certificate chain for the requested alias, or null if the alias does not exist or the caller has no permission to access it (see note on exceptions in @B_android#security#KeyChain#getPrivateKey_E@). This method may block while waiting for a connection to another process, and must never be called from the main thread. As @B_android#app#Activity_E@ and @B_android#app#Service_E@ contexts are short-lived and can be destroyed at any time from the main thread, it is safer to rely on a long-lived context such as one returned from @B_android#content#Context#getApplicationContext_E@. In case the caller specifies an alias for which it lacks a grant, it must call @B_android#security#KeyChain#choosePrivateKeyAlias_E@ again. See @B_android#security#KeyChain#getPrivateKey_E@ for more details on coping with this scenario. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 14", "FullName": "public static X509Certificate[] getCertificateChain (Context context, String alias)"}, "choosePrivateKeyAlias(android.app.Activity,android.security.KeyChainAliasCallback,java.lang.String[],java.security.Principal[],android.net.Uri,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching the new sub-Activity to prompt the user to select a private key; used only to call startActivity(); must not be null. This value must never be null."], ["@B_android#security#KeyChainAliasCallback_E@", "KeyChainAliasCallback: Callback to invoke when the request completes; must not be null. This value must never be null."], ["@B_java#lang#String_E@", "String: The acceptable types of asymmetric keys such as \"RSA\", \"EC\" or null. This value may be null. Value is @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_RSA_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_EC_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_AES_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA1_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA224_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA256_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA384_E@, or @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA512_E@"], ["@B_java#security#Principal_E@", "Principal: The acceptable certificate issuers for the certificate matching the private key, or null. This value may be null."], ["@B_android#net#Uri_E@", "Uri: The full URI the server is requesting the certificate for, or null if unavailable. This value may be null."], ["@B_java#lang#String_E@", "String: The alias to preselect if available, or null if unavailable. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified issuers are not of type X500Principal."]], "SeeAlso": [], "Permissions": [], "Description": "Launches an Activity for the user to select the alias for a private key and certificate pair for authentication. The selected alias or null will be returned via the KeyChainAliasCallback callback. A device policy controller (as a device or profile owner) can intercept the request before the activity is shown, to pick a specific private key alias by implementing @B_android#app#admin#DeviceAdminReceiver#onChoosePrivateKeyAlias_E@. keyTypes and issuers may be used to narrow down suggested choices to the user. If either keyTypes or issuers is specified and non-empty, and there are no matching certificates in the KeyChain, then the certificate selection prompt would be suppressed entirely. uri may be used to give the user more context about the server requesting the credentials. alias allows the caller to preselect an existing alias which will still be subject to user confirmation.", "history": "Added in API level 23", "FullName": "public static void choosePrivateKeyAlias (Activity activity, KeyChainAliasCallback response, String[] keyTypes, Principal[] issuers, Uri uri, String alias)"}, "createInstallIntent()": {"Returns": [["@B_android#content#Intent_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an Intent that can be used for credential installation. The intent may be used without any extras, in which case the user will be able to install credentials from their own source. Alternatively, @B_android#security#KeyChain#EXTRA_CERTIFICATE_E@ or @B_android#security#KeyChain#EXTRA_PKCS12_E@ maybe used to specify the bytes of an X.509 certificate or a PKCS#12 key store for installation. These extras may be combined with @B_android#security#KeyChain#EXTRA_NAME_E@ to provide a default alias name for credentials being installed. When used with @B_android#app#Activity#startActivityForResult_E@, @B_android#app#Activity#RESULT_OK_E@ will be returned if a credential was successfully installed, otherwise @B_android#app#Activity#RESULT_CANCELED_E@ will be returned.", "history": "Added in API level 14", "FullName": "public static Intent createInstallIntent ()"}, "isKeyAlgorithmSupported(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null. Value is @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_RSA_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_EC_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_AES_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA1_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA224_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA256_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA384_E@, or @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA512_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current device's KeyChain supports a specific PrivateKey type indicated by algorithm (e.g., \"RSA\").", "history": "Added in API level 18", "FullName": "public static boolean isKeyAlgorithmSupported (String algorithm)"}}, "Inheritance": [], "ClassName": "android.security.KeyChain", "ClassDesc": "The KeyChain class provides access to private keys and their corresponding certificate chains in credential storage. Applications accessing the KeyChain normally go through these steps: An application may remember the value of a selected alias to avoid prompting the user with @B_android#security#KeyChain#choosePrivateKeyAlias_E@ on subsequent connections. If the alias is no longer valid, null will be returned on lookups using that value An application can request the installation of private keys and certificates via the Intent provided by @B_android#security#KeyChain#createInstallIntent_E@. Private keys installed via this Intent will be accessible via @B_android#security#KeyChain#choosePrivateKeyAlias_E@ while Certificate Authority (CA) certificates will be trusted by all applications through the default X509TrustManager."}