{"Functions": {"createSetupIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an intent to start the setup activity for this TV input.", "history": "Added in API level 21", "FullName": "public Intent createSetupIntent ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "isPassthroughInput()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvContract#buildChannelUriForPassthroughInput_E@"], "Permissions": [], "Description": "Returns true if this TV input is pass-though which does not have any real channels in TvProvider. false otherwise.", "history": "Added in API level 21", "FullName": "public boolean isPassthroughInput ()"}, "getParentId()": {"Returns": [["@B_java#lang#String_E@", "the ID of the parent input, if exists. Returns null if the parent input is not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent input ID. A TV input may have a parent input if the TV input is actually a logical representation of a device behind the hardware port represented by the parent input. For example, a HDMI CEC logical device, connected to a HDMI port, appears as another TV input. In this case, the parent input of this logical device is the HDMI port. Applications may group inputs by parent input ID to provide an easier access to inputs sharing the same physical port. In the example of HDMI CEC, logical HDMI CEC devices behind the same HDMI port have the same parent ID, which is the ID representing the port. Thus applications can group the hardware HDMI port and the logical HDMI CEC devices behind it together using this method.", "history": "Added in API level 21", "FullName": "public String getParentId ()"}, "loadIcon(android.content.Context)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "a Drawable containing the TV input's icon. If the TV input does not have an icon, application's icon is returned. If it's unavailable too, null is returned."]], "Parameters": [["@B_android#content#Context_E@", "Context: Supplies a @B_android#content#Context_E@ used to load the icon. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the user-displayed icon for this TV input.", "history": "Added in API level 21", "FullName": "public Drawable loadIcon (Context context)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written.This value must never be null."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "canRecord()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this TV input can record TV programs, false otherwise.", "history": "Added in API level 24", "FullName": "public boolean canRecord ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns domain-specific extras associated with this TV input.", "history": "Added in API level 24", "FullName": "public Bundle getExtras ()"}, "isHidden(android.content.Context)": {"Returns": [["boolean", "true if the user marked this TV input hidden in settings. false otherwise."]], "Parameters": [["@B_android#content#Context_E@", "Context: Supplies a @B_android#content#Context_E@ used to check if this TV input is hidden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this TV input is marked hidden by the user in the settings.", "history": "Added in API level 24", "FullName": "public boolean isHidden (Context context)"}, "createSettingsIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#media#tv#TvInputInfo#createSetupIntent_E@ instead. Settings activity is deprecated. Use setup activity instead to provide settings. Returns an intent to start the settings activity for this TV input.", "history": "Added in API level 21 Deprecated in API level 26", "FullName": "public Intent createSettingsIntent ()"}, "loadCustomLabel(android.content.Context)": {"Returns": [["@B_java#lang#CharSequence_E@", "a CharSequence containing the TV input's custom label. null if there is no custom label."]], "Parameters": [["@B_android#content#Context_E@", "Context: Supplies a @B_android#content#Context_E@ used to load the custom label."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the custom label set by user in settings.", "history": "Added in API level 24", "FullName": "public CharSequence loadCustomLabel (Context context)"}, "getTunerCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of tuners this TV input has. This method is valid only for inputs of type @B_android#media#tv#TvInputInfo#TYPE_TUNER_E@. For inputs of other types, it returns 0. Tuners correspond to physical/logical resources that allow reception of TV signal. Having", "history": "Added in API level 24", "FullName": "public int getTunerCount ()"}, "getType()": {"Returns": [["int", "Value is @B_android#media#tv#TvInputInfo#TYPE_TUNER_E@, @B_android#media#tv#TvInputInfo#TYPE_OTHER_E@, @B_android#media#tv#TvInputInfo#TYPE_COMPOSITE_E@, @B_android#media#tv#TvInputInfo#TYPE_SVIDEO_E@, @B_android#media#tv#TvInputInfo#TYPE_SCART_E@, @B_android#media#tv#TvInputInfo#TYPE_COMPONENT_E@, @B_android#media#tv#TvInputInfo#TYPE_VGA_E@, @B_android#media#tv#TvInputInfo#TYPE_DVI_E@, @B_android#media#tv#TvInputInfo#TYPE_HDMI_E@, or @B_android#media#tv#TvInputInfo#TYPE_DISPLAY_PORT_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this TV input.", "history": "Added in API level 21", "FullName": "public int getType ()"}, "getServiceInfo()": {"Returns": [["@B_android#content#pm#ServiceInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the information of the service that implements this TV input.", "history": "Added in API level 21", "FullName": "public ServiceInfo getServiceInfo ()"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a unique ID for this TV input. The ID is generated from the package and class name implementing the TV input service.", "history": "Added in API level 21", "FullName": "public String getId ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written. This value must never be null."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object o)"}, "loadLabel(android.content.Context)": {"Returns": [["@B_java#lang#CharSequence_E@", "a CharSequence containing the TV input's label. If the TV input does not have a label, its name is returned."]], "Parameters": [["@B_android#content#Context_E@", "Context: Supplies a @B_android#content#Context_E@ used to load the label. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the user-displayed label for this TV input.", "history": "Added in API level 21", "FullName": "public CharSequence loadLabel (Context context)"}}, "Inheritance": [], "ClassName": "android.media.tv.TvInputInfo", "ClassDesc": "This class is used to specify meta information of a TV input."}