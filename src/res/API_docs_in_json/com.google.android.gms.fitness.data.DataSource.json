{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "extract(android.content.Intent)": {"Returns": [["", "the data source, or null if not found"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extracts the data source extra from the given intent, such as an intent to", "history": "", "FullName": "public static DataSource extract (Intent intent)"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "getStreamIdentifier()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a unique identifier for the data stream produced by this data source. The identifier includes: the physical device's manufacturer, model, and serial number (UID) the application's package name (unique for a given application) The data source's the data source's type (raw or derived) the data source's", "history": "", "FullName": "public String getStreamIdentifier ()"}, "getStreamName()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the specific @B_com#google#android#gms#fitness#data#DataSource#Builder#setStreamName_E@ for the stream coming form this data source, or null if unset.", "history": "", "FullName": "public String getStreamName ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getDataType()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data type for data coming from this data source. Knowing the type of data source can be useful to perform transformations on top of raw data without using sources that are themselves computed by transforming raw data.", "history": "", "FullName": "public DataType getDataType ()"}, "getAppPackageName()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the package name for the application responsible for setting the data, or null if unset/unknown. The @B_android#content#pm#PackageManager_E@ can be used to query relevant data on the application, such as the name, icon, logo, etc. Data coming from local sensors or BLE devices will not have a corresponding application.", "history": "", "FullName": "public String getAppPackageName ()"}, "getType()": {"Returns": [["", "one of the constant values (@B_com#google#android#gms#fitness#data#DataSource#TYPE_DERIVED_E@ or @B_com#google#android#gms#fitness#data#DataSource#TYPE_RAW_E@), zero if unset. Values outside of this range should be treated as unset/unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the constant describing the type of this data source.", "history": "", "FullName": "public int getType ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object that)"}, "getDevice()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the device where data is being collected, or null if unset.", "history": "", "FullName": "public Device getDevice ()"}, "getName()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the specified user-visible name for the data source, or null if unset. If the name is unset, the @B_com#google#android#gms#fitness#data#DataSource#getDevice_E@ model and @B_com#google#android#gms#fitness#data#DataSource#getAppPackageName_E@ can be used as user-visible identifiers for the source.", "history": "", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.fitness.data.DataSource", "ClassDesc": "Definition of a unique source of sensor data. Data sources can expose raw data coming from hardware sensors on local or companion devices. They can also expose derived data, created by transforming or merging other data sources. Multiple data sources can exist for the same @B_com#google#android#gms#fitness#data#DataType_E@. Every data point inserted into or read from Google Fit has an associated data source. The data source contains enough information to uniquely identify its data, including the hardware @B_com#google#android#gms#fitness#data#Device_E@ and the @B_com#google#android#gms#fitness#data#DataSource#getAppPackageName_E@ that collected and/or transformed the data. It also holds useful metadata, such as a stream name and the device type. The data source's data stream can be accessed in a live fashion by registering a data source listener, or via queries over fixed time intervals. An end-user-visible name for the data stream can be set by calling @B_com#google#android#gms#fitness#data#DataSource#Builder#setName_E@ or otherwise computed from the device model and application name."}