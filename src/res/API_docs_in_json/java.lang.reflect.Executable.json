{"Functions": {"getModifiers()": {"Returns": [["int", "the Java language modifiers for the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Java language", "history": "Added in API level 26", "FullName": "public abstract int getModifiers ()"}, "getTypeParameters()": {"Returns": [["@B_java#lang#reflect#TypeVariable_E@", "an array of TypeVariable objects that represent the type variables declared by this generic declaration"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic signature of this generic declaration does not conform to the format specified in The Java\u2122 Virtual Machine Specification"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.", "history": "Added in API level 26", "FullName": "public abstract TypeVariable[]<?> getTypeParameters ()"}, "getExceptionTypes()": {"Returns": [["@B_java#lang#Class_E@", "the exception types declared as being thrown by the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object. Returns an array of length 0 if the executable declares no exceptions in its throws clause.", "history": "Added in API level 26", "FullName": "public abstract Class[]<?> getExceptionTypes ()"}, "getParameterCount()": {"Returns": [["int", "The number of formal parameters for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.", "history": "Added in API level 26", "FullName": "public int getParameterCount ()"}, "getGenericParameterTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the formal parameter types of the underlying executable, in declaration order"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic method signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if any of the parameter types of the underlying executable refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if any of the underlying executable's parameter types refer to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. If a formal parameter type is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 26", "FullName": "public Type[] getGenericParameterTypes ()"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 26", "FullName": "public final boolean isAnnotationPresent (Class<? extends Annotation> annotationType)"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "an object representing the declaring class of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object representing the class or interface that declares the executable represented by this object.", "history": "Added in API level 26", "FullName": "public abstract Class<?> getDeclaringClass ()"}, "getParameterTypes()": {"Returns": [["@B_java#lang#Class_E@", "the parameter types for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters.", "history": "Added in API level 26", "FullName": "public abstract Class[]<?> getParameterTypes ()"}, "isVarArgs()": {"Returns": [["boolean", "true if an only if this executable was declared to take a variable number of arguments."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isVarArgs ()"}, "getGenericExceptionTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the exception types thrown by the underlying executable"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic method signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if the underlying executable's throws clause refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if the underlying executable's throws clause refers to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object. Returns an array of length 0 if the underlying executable declares no exceptions in its throws clause. If an exception type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 26", "FullName": "public Type[] getGenericExceptionTypes ()"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this executable is a synthetic construct as defined by The Java\u2122 Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable is a synthetic construct; returns false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isSynthetic ()"}, "getParameterAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#reflect#Parameter_E@", "@B_java#lang#reflect#Parameter#getAnnotations_E@"], "Permissions": [], "Description": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If the Executable has one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See @B_java#lang#reflect#Parameter_E@ for more information.", "history": "Added in API level 26", "FullName": "public abstract Annotation[][] getParameterAnnotations ()"}, "getParameters()": {"Returns": [["@B_java#lang#reflect#Parameter_E@", "an array of Parameter objects representing all the parameters to the executable this object represents."]], "Parameters": [], "Throws": [["@B_java#lang#reflect#MalformedParametersException_E@", "if the class file contains a MethodParameters attribute that is improperly formatted."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Parameter objects that represent all the parameters to the underlying executable represented by this object. Returns an array of length 0 if the executable has no parameters. The parameters of the underlying executable do not necessarily have unique names, or names that are legal identifiers in the Java programming language (JLS 3.8).", "history": "Added in API level 26", "FullName": "public Parameter[] getParameters ()"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public T[] getAnnotationsByType (Class<T> annotationClass)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 26", "FullName": "public T getAnnotation (Class<T> annotationClass)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the simple name of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the executable represented by this object.", "history": "Added in API level 26", "FullName": "public abstract String getName ()"}, "toGenericString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Executable, including any type parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Executable, including any type parameters.", "history": "Added in API level 26", "FullName": "public abstract String toGenericString ()"}}, "Inheritance": ["@B_java#lang#reflect#AccessibleObject_E@"], "ClassName": "java.lang.reflect.Executable", "ClassDesc": "A shared superclass for the common functionality of @B_java#lang#reflect#Method_E@ and @B_java#lang#reflect#Constructor_E@."}