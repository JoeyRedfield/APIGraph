{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "getFlags()": {"Returns": [["int", "a combined mask of all flags"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the flags.", "history": "added in version 26.0.0-beta1", "FullName": "int getFlags ()"}, "getContentType()": {"Returns": [["int", "one of the values that can be set in @B_android#support#v4#media#AudioAttributesCompat#Builder#setContentType_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the content type.", "history": "added in version 26.0.0-beta1", "FullName": "int getContentType ()"}, "getVolumeControlStream()": {"Returns": [["int", "a valid stream type for Activity or stream volume control that matches the attributes, or @B_android#media#AudioManager#USE_DEFAULT_STREAM_TYPE_E@ if there isn't a direct match. Note that USE_DEFAULT_STREAM_TYPE is not a valid value for @B_android#media#AudioManager#setStreamVolume_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the stream type matching the given attributes for volume control. Use this method to derive the stream type needed to configure the volume control slider in an @B_android#app#Activity_E@ with @B_android#app#Activity#setVolumeControlStream_E@. Do not use this method to set the stream type on an audio player object (e.g. @B_android#media#AudioTrack_E@, @B_android#media#MediaPlayer_E@) as this is deprecated; use AudioAttributes instead.", "history": "added in version 26.0.0-beta1", "FullName": "int getVolumeControlStream ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "", "FullName": "boolean equals (Object o)"}, "unwrap()": {"Returns": [["@B_java#lang#Object_E@", "the underlying @B_android#media#AudioAttributes_E@ object or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the current SDK level is 21 or higher, return the @B_android#media#AudioAttributes_E@ object inside this @B_android#support#v4#media#AudioAttributesCompat_E@. Otherwise null.", "history": "added in version 26.0.0-beta1", "FullName": "Object unwrap ()"}, "wrap(java.lang.Object)": {"Returns": [["@B_android#support#v4#media#AudioAttributesCompat_E@", "the new AudioAttributesCompat, or null on API < 21"]], "Parameters": [["@B_java#lang#Object_E@", "Object: an instance of @B_android#media#AudioAttributes_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an @B_android#support#v4#media#AudioAttributesCompat_E@ given an API 21 @B_android#media#AudioAttributes_E@ object.", "history": "added in version 26.0.0-beta1", "FullName": "AudioAttributesCompat wrap (Object aa)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "", "FullName": "int hashCode ()"}, "getUsage()": {"Returns": [["int", "one of the values that can be set in @B_android#support#v4#media#AudioAttributesCompat#Builder#setUsage_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the usage.", "history": "added in version 26.0.0-beta1", "FullName": "int getUsage ()"}, "getLegacyStreamType()": {"Returns": [["int", "the stream type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a stream type passed to @B_android#support#v4#media#AudioAttributesCompat#Builder#setLegacyStreamType_E@, or -1 if no legacy stream is available", "history": "added in version 26.0.0-beta1", "FullName": "int getLegacyStreamType ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.media.AudioAttributesCompat", "ClassDesc": "A class to encapsulate a collection of attributes describing information about an audio stream. AudioAttributesCompat supersede the notion of stream types (see for instance https:##developer#android#com@B_android#media#AudioManager#STREAM_MUSIC_E@ or https:##developer#android#com@B_android#media#AudioManager#STREAM_ALARM_E@) for defining the behavior of audio playback. Attributes allow an application to specify more information than is conveyed in a stream type by allowing the application to define: usage: \"why\" you are playing a sound, what is this sound used for. This is achieved with the \"usage\" information. Examples of usage are @B_android#support#v4#media#AudioAttributesCompat#USAGE_MEDIA_E@ and @B_android#support#v4#media#AudioAttributesCompat#USAGE_ALARM_E@. These two examples are the closest to stream types, but more detailed use cases are available. Usage information is more expressive than a stream type, and allows certain platforms or routing policies to use this information for more refined volume or routing decisions. Usage is the most important information to supply in AudioAttributesCompat and it is recommended to build any instance with this information supplied, see @B_android#support#v4#media#AudioAttributesCompat#Builder_E@ for exceptions. content type: \"what\" you are playing. The content type expresses the general category of the content. This information is optional. But in case it is known (for instance @B_android#support#v4#media#AudioAttributesCompat#CONTENT_TYPE_MOVIE_E@ for a movie streaming service or @B_android#support#v4#media#AudioAttributesCompat#CONTENT_TYPE_MUSIC_E@ for a music playback application) this information might be used by the audio framework to selectively configure some audio post-processing blocks. flags: \"how\" is playback to be affected, see the flag definitions for the specific playback behaviors they control. AudioAttributesCompat instance is built through its builder, @B_android#support#v4#media#AudioAttributesCompat#Builder_E@. Also see https:##developer#android#com@B_android#media#AudioAttributes_E@ for the framework implementation of this class."}