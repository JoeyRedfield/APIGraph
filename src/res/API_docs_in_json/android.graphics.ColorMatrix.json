{"Functions": {"set(float[])": {"Returns": [], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the array of floats into this matrix, copying all of its values.", "history": "Added in API level 1", "FullName": "public void set (float[] src)"}, "setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"], ["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this colormatrix to the concatenation of the two specified colormatrices, such that the resulting colormatrix has the same effect as applying matB and then applying matA. It is legal for either matA or matB to be the same colormatrix as this.", "history": "Added in API level 1", "FullName": "public void setConcat (ColorMatrix matA, ColorMatrix matB)"}, "postConcat(android.graphics.ColorMatrix)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Concat this colormatrix with the specified postmatrix. This is logically the same as calling setConcat(postmatrix, this);", "history": "Added in API level 1", "FullName": "public void postConcat (ColorMatrix postmatrix)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this colormatrix to identity:", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setScale(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this colormatrix to scale by the specified values.", "history": "Added in API level 1", "FullName": "public void setScale (float rScale, float gScale, float bScale, float aScale)"}, "setRotate(int, float)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color", "history": "added in API level 1", "FullName": "public void setRotate (int axis, float degrees)"}, "ColorMatrix(android.graphics.ColorMatrix)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new colormatrix initialized with the specified colormatrix.", "history": "Added in API level 1", "FullName": "public ColorMatrix (ColorMatrix src)"}, "preConcat(android.graphics.ColorMatrix)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Concat this colormatrix with the specified prematrix. This is logically the same as calling setConcat(this, prematrix);", "history": "Added in API level 1", "FullName": "public void preConcat (ColorMatrix prematrix)"}, "ColorMatrix()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new colormatrix initialized to identity (as if reset() had been called).", "history": "Added in API level 1", "FullName": "public ColorMatrix ()"}, "setYUV2RGB()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert from YUV to RGB", "history": "Added in API level 1", "FullName": "public void setYUV2RGB ()"}, "setRotate(int,float)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rotation on a color axis by the specified values. axis=0 correspond to a rotation around the RED color axis=1 correspond to a rotation around the GREEN color axis=2 correspond to a rotation around the BLUE color", "history": "Added in API level 1", "FullName": "public void setRotate (int axis, float degrees)"}, "setScale(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this colormatrix to scale by the specified values.", "history": "added in API level 1", "FullName": "public void setScale (float rScale, float gScale, float bScale, float aScale)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "setSaturation(float)": {"Returns": [], "Parameters": [["float", "float: A value of 0 maps the color to gray-scale. 1 is identity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to affect the saturation of colors.", "history": "Added in API level 1", "FullName": "public void setSaturation (float sat)"}, "setRGB2YUV()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert RGB to YUV", "history": "Added in API level 1", "FullName": "public void setRGB2YUV ()"}, "getArray()": {"Returns": [["float[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the array of floats representing this colormatrix.", "history": "Added in API level 1", "FullName": "public final float[] getArray ()"}, "set(android.graphics.ColorMatrix)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorMatrix_E@", "ColorMatrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the src colormatrix into this matrix, copying all of its values.", "history": "Added in API level 1", "FullName": "public void set (ColorMatrix src)"}, "ColorMatrix(float[])": {"Returns": [], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new colormatrix initialized with the specified array of values.", "history": "Added in API level 1", "FullName": "public ColorMatrix (float[] src)"}}, "Inheritance": [], "ClassName": "android.graphics.ColorMatrix", "ClassDesc": "4x5 matrix for transforming the color and alpha components of a Bitmap. The matrix can be passed as single array, and is treated as follows: When applied to a color [R, G, B, A], the resulting color is computed as: That resulting color [R\u2019, G\u2019, B\u2019, A\u2019] then has each channel clamped to the 0 to 255 range. The sample ColorMatrix below inverts incoming colors by scaling each channel by -1, and then shifting the result up by 255 to remain in the standard color space."}