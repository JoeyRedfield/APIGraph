{"Functions": {"isMultiSimSupported()": {"Returns": [["int", "@B_android#telephony#TelephonyManager#MULTISIM_ALLOWED_E@ if the device supports multiple SIMs. @B_android#telephony#TelephonyManager#MULTISIM_NOT_SUPPORTED_BY_HARDWARE_E@ if the device does not support multiple SIMs. @B_android#telephony#TelephonyManager#MULTISIM_NOT_SUPPORTED_BY_CARRIER_E@ in the device supports multiple SIMs, but the functionality is restricted by the carrier. Value is @B_android#telephony#TelephonyManager#MULTISIM_ALLOWED_E@, @B_android#telephony#TelephonyManager#MULTISIM_NOT_SUPPORTED_BY_HARDWARE_E@, or @B_android#telephony#TelephonyManager#MULTISIM_NOT_SUPPORTED_BY_CARRIER_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns if the usage of multiple SIM cards at the same time to register on the network (e.g. Dual Standby or Dual Active) is supported by the device and by the carrier. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public int isMultiSimSupported ()"}, "isSmsCapable()": {"Returns": [["boolean", "true if the current device supports sms service. If true, this means that the device supports both sending and receiving sms via the telephony network. Note: Voicemail waiting sms, cell broadcasting sms, and MMS are disabled when device doesn't support sms."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isSmsCapable ()"}, "iccCloseLogicalChannel(int)": {"Returns": [["boolean", "true if the channel was closed successfully."]], "Parameters": [["int", "int: is the channel id to be closed as returned by a successful iccOpenLogicalChannel."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Closes a previously opened logical channel to the ICC card. Input parameters equivalent to TS 27.007 AT+CCHC command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21", "FullName": "public boolean iccCloseLogicalChannel (int channel)"}, "getServiceState()": {"Returns": [["@B_android#telephony#ServiceState_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@", "@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@"], "Description": "Returns the current @B_android#telephony#ServiceState_E@ information. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@ Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@) and @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@ and @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "history": "Added in API level 26", "FullName": "public ServiceState getServiceState ()"}, "setNetworkSelectionModeManual(java.lang.String,boolean)": {"Returns": [["boolean", "true on success; false on any failure."]], "Parameters": [["@B_java#lang#String_E@", "String: the PLMN ID of the network to select."], ["boolean", "boolean: whether the selection will persist until reboot. If true, only allows attaching to the selected PLMN until reboot; otherwise, attach to the chosen PLMN and resume normal network selection next time."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Ask the radio to connect to the input network and change selection mode to manual. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@ Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 28", "FullName": "public boolean setNetworkSelectionModeManual (String operatorNumeric, boolean persistSelection)"}, "getPreferredOpportunisticDataSubscription()": {"Returns": [["int", "subId preferred opportunistic subscription id or @B_android#telephony#SubscriptionManager#DEFAULT_SUBSCRIPTION_ID_E@ if there are no preferred subscription id"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get preferred opportunistic data subscription Id Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@), or has either READ_PRIVILEGED_PHONE_STATE or @B_android#Manifest#permission#READ_PHONE_STATE_E@ permission. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE or @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public int getPreferredOpportunisticDataSubscription ()"}, "getNetworkSpecifier()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@", "@B_android#telephony#TelephonyManager#createForSubscriptionId_E@", "@B_android#telephony#TelephonyManager#createForPhoneAccountHandle_E@"], "Permissions": [], "Description": "Returns the network specifier of the subscription ID pinned to the TelephonyManager. The network specifier is used by @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to create a @B_android#net#NetworkRequest_E@ that connects through the subscription.", "history": "Added in API level 26", "FullName": "public String getNetworkSpecifier ()"}, "getMmsUserAgent()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MMS user agent.", "history": "Added in API level 19", "FullName": "public String getMmsUserAgent ()"}, "isDataEnabled()": {"Returns": [["boolean", "true if mobile data is enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Returns whether mobile data is enabled or not per user setting. There are other factors that could disable mobile data, but they are not considered here. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultDataSubscriptionId_E@ Requires one of the following permissions: @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@, @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Note that this does not take into account any data restrictions that may be present on the calling app. Such restrictions may be inspected with @B_android#net#ConnectivityManager#getRestrictBackgroundStatus_E@. Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@ or @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public boolean isDataEnabled ()"}, "getCarrierConfig()": {"Returns": [["@B_android#os#PersistableBundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#CarrierConfigManager#getConfigForSubId_E@", "@B_android#telephony#TelephonyManager#createForSubscriptionId_E@", "@B_android#telephony#TelephonyManager#createForPhoneAccountHandle_E@"], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the carrier config of the subscription ID pinned to the TelephonyManager. If an invalid subscription ID is pinned to the TelephonyManager, the returned config will contain default values. This method may take several seconds to complete, so it should only be called from a worker thread. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). This method may take several seconds to complete, so it should only be called from a worker thread. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public PersistableBundle getCarrierConfig ()"}, "getSimCarrierIdName()": {"Returns": [["@B_java#lang#CharSequence_E@", "Carrier name of the current subscription. Return null if the subscription is unavailable or the carrier cannot be identified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns carrier id name of the current subscription. Carrier id name is a user-facing name of carrier id returned by @B_android#telephony#TelephonyManager#getSimCarrierId_E@, usually the brand name of the subsidiary (e.g. T-Mobile). Each carrier could configure multiple @B_android#telephony#TelephonyManager#getSimOperatorName_E@ but should have a single carrier name. Carrier name is not a canonical identity, use @B_android#telephony#TelephonyManager#getSimCarrierId_E@ instead. The returned carrier name is unlocalized.", "history": "Added in API level 28", "FullName": "public CharSequence getSimCarrierIdName ()"}, "hasCarrierPrivileges()": {"Returns": [["boolean", "true if the app has carrier privileges."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Has the calling application been granted carrier privileges by the carrier. If any of the packages in the calling UID has carrier privileges, the call will return true. This access is granted by the owner of the UICC card and does not depend on the registered carrier.", "history": "Added in API level 22", "FullName": "public boolean hasCarrierPrivileges ()"}, "getEmergencyNumberList(int)": {"Returns": [["@B_java#util#Map_E@", "Map including the keys as the active subscription IDs (Note: if there is no active subscription, the key is @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@) and the value as the list of @B_android#telephony#emergency#EmergencyNumber_E@; empty Map if this information is not available; or throw a SecurityException if the caller does not have the permission. This value will never be null."]], "Parameters": [["int", "int: the emergency service categories which are the bitwise-OR combination of the following constants: EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC Value is either 0 or a combination of @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_UNSPECIFIED_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_POLICE_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AMBULANCE_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_FIRE_BRIGADE_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MARINE_GUARD_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MOUNTAIN_RESCUE_E@, @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_MIEC_E@, and @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_SERVICE_CATEGORY_AIEC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get the per-category emergency number list based on current locale, sim, default, modem and network. In each returned list, the emergency number @B_android#telephony#emergency#EmergencyNumber_E@ coming from higher priority sources will be located at the smaller index; the priority order of sources are: @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_SIM_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_DATABASE_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_DEFAULT_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG_E@ The subscriptions which the returned list would be based on, are all the active subscriptions, no matter which subscription could be used to create TelephonyManager. Requires permission @B_android#Manifest#permission#READ_PHONE_STATE_E@ or the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public Map<Integer, List<EmergencyNumber>> getEmergencyNumberList (int categories)"}, "getNetworkOperatorName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alphabetic name of current registered operator. Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use @B_android#telephony#TelephonyManager#getPhoneType_E@ to determine if on a CDMA network).", "history": "Added in API level 1", "FullName": "public String getNetworkOperatorName ()"}, "updateAvailableNetworks(java.util.List<android.telephony.AvailableNetworkInfo>,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: is a list of available network information. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor of where the callback will execute. This value may be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_java#util#function#Consumer_E@", "Consumer: Callback will be triggered once it succeeds or failed. Value is @B_android#telephony#TelephonyManager#UPDATE_AVAILABLE_NETWORKS_SUCCESS_E@, @B_android#telephony#TelephonyManager#UPDATE_AVAILABLE_NETWORKS_UNKNOWN_FAILURE_E@, @B_android#telephony#TelephonyManager#UPDATE_AVAILABLE_NETWORKS_ABORTED_E@, @B_android#telephony#TelephonyManager#UPDATE_AVAILABLE_NETWORKS_INVALID_ARGUMENTS_E@, or @B_android#telephony#TelephonyManager#UPDATE_AVAILABLE_NETWORKS_NO_CARRIER_PRIVILEGE_E@ This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Update availability of a list of networks in the current location. This api should be called to inform OpportunisticNetwork Service about the availability of a network at the current location. This information will be used by OpportunisticNetwork service to enable modem stack and to attach to the network. If an empty list is passed, it is assumed that no network is available and will result in disabling the modem stack to save power. This api do not switch internet data once network attach is completed. Use @B_android#telephony#TelephonyManager#setPreferredOpportunisticDataSubscription_E@ to switch internet data after network attach is complete. Requires that the calling app has carrier privileges on both primary and secondary subscriptions (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@), or has permission @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@.", "history": "Added in API level 29", "FullName": "public void updateAvailableNetworks (List<AvailableNetworkInfo> availableNetworks, Executor executor, Consumer<Integer> callback)"}, "getMeid()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MEID (Mobile Equipment Identifier). Return null if MEID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 26", "FullName": "public String getMeid ()"}, "iccTransmitApduBasicChannel(int,int,int,int,int,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The APDU response from the ICC card with the status appended at the end."]], "Parameters": [["int", "int: Class of the APDU command."], ["int", "int: Instruction of the APDU command."], ["int", "int: P1 value of the APDU command."], ["int", "int: P2 value of the APDU command."], ["int", "int: P3 value of the APDU command. If p3 is negative a 4 byte APDU is sent to the SIM."], ["@B_java#lang#String_E@", "String: Data to be sent with the APDU."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Transmit an APDU to the ICC card over the basic channel. Input parameters equivalent to TS 27.007 AT+CSIM command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21", "FullName": "public String iccTransmitApduBasicChannel (int cla, int instruction, int p1, int p2, int p3, String data)"}, "isHearingAidCompatibilitySupported()": {"Returns": [["boolean", "true if the device supports hearing aid compatibility, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the phone supports hearing aid compatibility.", "history": "Added in API level 23", "FullName": "public boolean isHearingAidCompatibilitySupported ()"}, "getPhoneType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Returns a constant indicating the device phone type. This indicates the type of radio used to transmit voice calls.", "history": "Added in API level 1", "FullName": "public int getPhoneType ()"}, "setPreferredOpportunisticDataSubscription(int,boolean,java.util.concurrent.Executor,java.util.function.Consumer<java.lang.Integer>)": {"Returns": [], "Parameters": [["int", "int: which opportunistic subscription @B_android#telephony#SubscriptionManager#getOpportunisticSubscriptions_E@ is preferred for cellular data. Pass @B_android#telephony#SubscriptionManager#DEFAULT_SUBSCRIPTION_ID_E@ to unset the preference"], ["boolean", "boolean: whether validation is needed before switch happens."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor of where the callback will execute. This value may be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_java#util#function#Consumer_E@", "Consumer: Callback will be triggered once it succeeds or failed. See @B_android#telephony#TelephonyManager#SetOpportunisticSubscriptionResult_E@ for more details. Pass null if don't care about the result. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Set preferred opportunistic data subscription id. Switch internet data to preferred opportunistic data subscription id. This api can result in lose of internet connectivity for short period of time while internet data is handed over. Requires that the calling app has carrier privileges on both primary and secondary subscriptions (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@), or has permission @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@.", "history": "Added in API level 29", "FullName": "public void setPreferredOpportunisticDataSubscription (int subId, boolean needValidation, Executor executor, Consumer<Integer> callback)"}, "setVisualVoicemailSmsFilterSettings(android.telephony.VisualVoicemailSmsFilterSettings)": {"Returns": [], "Parameters": [["@B_android#telephony#VisualVoicemailSmsFilterSettings_E@", "VisualVoicemailSmsFilterSettings: The settings for the filter, or null to disable the filter."]], "Throws": [], "SeeAlso": ["@B_android#telecom#TelecomManager#getDefaultDialerPackage_E@", "@B_android#telephony#CarrierConfigManager_E@"], "Permissions": [], "Description": "Set the visual voicemail SMS filter settings for the subscription ID pinned to the TelephonyManager. When the filter is enabled, @B_android#telephony#VisualVoicemailService#onSmsReceived_E@ will be called when a SMS matching the settings is received. Caller must be the default dialer, system dialer, or carrier visual voicemail app.", "history": "Added in API level 26", "FullName": "public void setVisualVoicemailSmsFilterSettings (VisualVoicemailSmsFilterSettings settings)"}, "isTtyModeSupported()": {"Returns": [["boolean", "true if the device supports TTY mode, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telecom#TelecomManager#isTtySupported_E@ instead Whether the phone supports TTY mode.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public boolean isTtyModeSupported ()"}, "getSimCarrierId()": {"Returns": [["int", "Carrier id of the current subscription. Return @B_android#telephony#TelephonyManager#UNKNOWN_CARRIER_ID_E@ if the subscription is unavailable or the carrier cannot be identified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns carrier id of the current subscription. To recognize a carrier (including MVNO) as a first-class identity, Android assigns each carrier with a canonical integer a.k.a. carrier id. The carrier ID is an Android platform-wide identifier for a carrier. AOSP maintains carrier ID assignments in Apps which have carrier-specific configurations or business logic can use the carrier id as an Android platform-wide identifier for carriers.", "history": "Added in API level 28", "FullName": "public int getSimCarrierId ()"}, "getNetworkType()": {"Returns": [["int", "the NETWORK_TYPE_xxxx for current data connection. Value is @B_android#telephony#TelephonyManager#NETWORK_TYPE_UNKNOWN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GPRS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EDGE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_UMTS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_CDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_0_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_A_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_1xRTT_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSDPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSUPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IDEN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_B_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_LTE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EHRPD_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPAP_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GSM_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_TD_SCDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IWLAN_E@, android.telephony.TelephonyManager.NETWORK_TYPE_LTE_CA, or @B_android#telephony#TelephonyManager#NETWORK_TYPE_NR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getNetworkType ()"}, "setLine1NumberForDisplay(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the operation was executed correctly."]], "Parameters": [["@B_java#lang#String_E@", "String: alpha-tagging of the dailing nubmer"], ["@B_java#lang#String_E@", "String: The dialing number"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the line 1 phone number string and its alphatag for the current ICCID for display purpose only, for example, displayed in Phone Status. It won't change the actual MSISDN/MDN. To unset alphatag or number, pass in a null value. Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 22", "FullName": "public boolean setLine1NumberForDisplay (String alphaTag, String number)"}, "setVoiceMailNumber(java.lang.String,java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The alpha tag to display."], ["@B_java#lang#String_E@", "String: The voicemail number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the voice mail number. Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 22", "FullName": "public boolean setVoiceMailNumber (String alphaTag, String number)"}, "getNai()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the Network Access Identifier (NAI). Return null if NAI is not available. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 28", "FullName": "public String getNai ()"}, "getNeighboringCellInfo()": {"Returns": [["@B_java#util#List_E@", "List of NeighboringCellInfo or null if info unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@"], "Description": "Use @B_android#telephony#TelephonyManager#getAllCellInfo_E@ which returns a superset of the information from NeighboringCellInfo. Returns the neighboring cell information of the device.Requires the @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@ permission.", "history": "added in API level 3", "FullName": "public List<NeighboringCellInfo> getNeighboringCellInfo ()"}, "getPhoneCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of phones available. Returns 0 if none of voice, sms, data is not supported Returns 1 for Single standby mode (Single SIM functionality) Returns 2 for Dual standby mode.(Dual SIM functionality) Returns 3 for Tri standby mode.(Tri SIM functionality)", "history": "Added in API level 23", "FullName": "public int getPhoneCount ()"}, "getForbiddenPlmns()": {"Returns": [["@B_java#lang#String_E@", "an array of forbidden PLMNs or null if not available"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns an array of Forbidden PLMNs from the USIM App Returns null if the query fails. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public String[] getForbiddenPlmns ()"}, "setVoicemailRingtoneUri(android.telecom.PhoneAccountHandle,android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the @B_android#telecom#PhoneAccount_E@ for which to set the voicemail ringtone."], ["@B_android#net#Uri_E@", "Uri: The URI for the ringtone to play when receiving a voicemail from a specific PhoneAccount."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Use @B_android#provider#Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS_E@ instead. Sets the per-account voicemail ringtone. Requires that the calling app is the default dialer, or has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@, or has permission @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void setVoicemailRingtoneUri (PhoneAccountHandle phoneAccountHandle, Uri uri)"}, "getSimCountryIso()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO country code equivalent for the SIM provider's country code.", "history": "Added in API level 1", "FullName": "public String getSimCountryIso ()"}, "getVisualVoicemailPackageName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager#createForSubscriptionId_E@", "@B_android#telephony#TelephonyManager#createForPhoneAccountHandle_E@", "@B_android#telephony#VisualVoicemailService_E@"], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the package responsible of processing visual voicemail for the subscription ID pinned to the TelephonyManager. Returns null when there is no package responsible for processing visual voicemail for the subscription. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public String getVisualVoicemailPackageName ()"}, "listen(android.telephony.PhoneStateListener,int)": {"Returns": [], "Parameters": [["@B_android#telephony#PhoneStateListener_E@", "PhoneStateListener: The @B_android#telephony#PhoneStateListener_E@ object to register (or unregister)"], ["int", "int: The telephony state(s) of interest to the listener, as a bitwise-OR combination of @B_android#telephony#PhoneStateListener_E@ LISTEN_ flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener object to receive notification of changes in specified telephony states. To register a listener, pass a @B_android#telephony#PhoneStateListener_E@ and specify at least one telephony state of interest in the events argument. At registration, and when a specified telephony state changes, the telephony manager invokes the appropriate callback method on the listener object and passes the current (updated) values. To un-register a listener, pass the listener object and set the events argument to @B_android#telephony#PhoneStateListener#LISTEN_NONE_E@ (0). If this TelephonyManager object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@. To listen events for multiple subIds, pass a separate listener object to each TelephonyManager object created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@. Note: if you call this method while in the middle of a binder transaction, you @B_android#os#Binder#clearCallingIdentity_E@ before calling this method. A @B_java#lang#SecurityException_E@ will be thrown otherwise.", "history": "Added in API level 1", "FullName": "public void listen (PhoneStateListener listener, int events)"}, "getVoiceMailNumber()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the voice mail number. Return null if it is unavailable. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 1", "FullName": "public String getVoiceMailNumber ()"}, "getNetworkOperator()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the numeric name (MCC+MNC) of current registered operator. Availability: Only when user is registered to a network. Result may be unreliable on CDMA networks (use @B_android#telephony#TelephonyManager#getPhoneType_E@ to determine if on a CDMA network).", "history": "Added in API level 1", "FullName": "public String getNetworkOperator ()"}, "setDataEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to enable mobile data."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Turns mobile data on or off. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultDataSubscriptionId_E@ Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public void setDataEnabled (boolean enable)"}, "getTypeAllocationCode(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: of which Type Allocation Code is returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Type Allocation Code from the IMEI. Return null if Type Allocation Code is not available.", "history": "Added in API level 29", "FullName": "public String getTypeAllocationCode (int slotIndex)"}, "isVoiceCapable()": {"Returns": [["boolean", "true if the current device is \"voice capable\". \"Voice capable\" means that this device supports circuit-switched (i.e. voice) phone calls over the telephony network, and is allowed to display the in-call UI while a cellular voice call is active. This will be false on \"data only\" devices which can't make voice calls and don't support any in-call UI. Note: the meaning of this flag is subtly different from the PackageManager.FEATURE_TELEPHONY system feature, which is available on any device with a telephony radio, even if the device is data-only."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 22", "FullName": "public boolean isVoiceCapable ()"}, "getAllCellInfo()": {"Returns": [["@B_java#util#List_E@", "List of @B_android#telephony#CellInfo_E@; null if cell information is unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Requests all available cell information from all radios on the device including the camped/registered, serving, and neighboring cells. The response can include one or more @B_android#telephony#CellInfoGsm_E@, @B_android#telephony#CellInfoCdma_E@, @B_android#telephony#CellInfoTdscdma_E@, @B_android#telephony#CellInfoLte_E@, and @B_android#telephony#CellInfoWcdma_E@ objects, in any combination. It is typical to see instances of one or more of any these in the list. In addition, zero or more of the returned objects may be considered registered; that is, their @B_android#telephony#CellInfo#isRegistered_E@ methods may return true, indicating that the cell is being used or would be used for signaling communication if necessary. Beginning with @B_android#os#Build#VERSION_CODES#Q_E@, if this API results in a change of the cached CellInfo, that change will be reported via @B_android#telephony#PhoneStateListener#onCellInfoChanged_E@. Apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ or higher will no longer trigger a refresh of the cached CellInfo by invoking this API. Instead, those apps will receive the latest cached results, which may not be current. Apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ or higher that wish to request updated CellInfo should call @B_android#telephony#TelephonyManager#requestCellInfoUpdate_E@; however, in all cases, updates will be rate-limited and are not guaranteed. To determine the recency of CellInfo data, callers should check @B_android#telephony#CellInfo#getTimeStamp_E@. This method returns valid data for devices with @B_android#content#pm#PackageManager#FEATURE_TELEPHONY_E@. In cases where only partial information is available for a particular CellInfo entry, unavailable fields will be reported as @B_android#telephony#CellInfo#UNAVAILABLE_E@. All reported cells will include at least a valid set of technology-specific identification info and a power level measurement. This method is preferred over using @B_android#telephony#TelephonyManager#getCellLocation_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 17", "FullName": "public List<CellInfo> getAllCellInfo ()"}, "getCarrierIdFromSimMccMnc()": {"Returns": [["int", "matching carrier id from sim MCCMNC. Return @B_android#telephony#TelephonyManager#UNKNOWN_CARRIER_ID_E@ if the subscription is unavailable or the carrier cannot be identified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns carrier id based on sim MCCMNC (returned by @B_android#telephony#TelephonyManager#getSimOperator_E@) only. This is used for fallback when configurations/logic for exact carrier id @B_android#telephony#TelephonyManager#getSimCarrierId_E@ are not found. Android carrier id table", "history": "Added in API level 29", "FullName": "public int getCarrierIdFromSimMccMnc ()"}, "iccOpenLogicalChannel(java.lang.String)": {"Returns": [["@B_android#telephony#IccOpenLogicalChannelResponse_E@", "an IccOpenLogicalChannelResponse object."]], "Parameters": [["@B_java#lang#String_E@", "String: Application id. See ETSI 102.221 and 101.220."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Replaced by @B_android#telephony#TelephonyManager#iccOpenLogicalChannel_E@ Opens a logical channel to the ICC card. Input parameters equivalent to TS 27.007 AT+CCHO command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21 Deprecated in API level 26", "FullName": "public IccOpenLogicalChannelResponse iccOpenLogicalChannel (String AID)"}, "doesSwitchMultiSimConfigTriggerReboot()": {"Returns": [["boolean", "true if reboot will be triggered after making changes to modem configurations, otherwise return false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get whether making changes to modem configurations by @B_android#telephony#TelephonyManager#switchMultiSimConfig_E@ will trigger device reboot. The modem configuration change refers to switching from single SIM configuration to DSDS or the other way around. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public boolean doesSwitchMultiSimConfigTriggerReboot ()"}, "isEmergencyNumber(java.lang.String)": {"Returns": [["boolean", "true if the given number is an emergency number based on current locale, SIM card(s), Android database, modem, network or defaults; false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: - the number to look up This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Identifies if the supplied phone number is an emergency number that matches a known emergency number based on current locale, SIM card(s), Android database, modem, network, or defaults. This method assumes that only dialable phone numbers are passed in; non-dialable numbers are not considered emergency numbers. A dialable phone number consists only of characters/digits identified by @B_android#telephony#PhoneNumberUtils#isDialable_E@. The subscriptions which the identification would be based on, are all the active subscriptions, no matter which subscription could be used to create TelephonyManager.", "history": "Added in API level 29", "FullName": "public boolean isEmergencyNumber (String number)"}, "iccOpenLogicalChannel(java.lang.String, int)": {"Returns": [["@B_android#telephony#IccOpenLogicalChannelResponse_E@", "an IccOpenLogicalChannelResponse object."]], "Parameters": [["@B_java#lang#String_E@", "String: Application id. See ETSI 102.221 and 101.220."], ["int", "int: P2 parameter (described in ISO 7816-4)."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Opens a logical channel to the ICC card. Input parameters equivalent to TS 27.007 AT+CCHO command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "added in API level 26", "FullName": "public IccOpenLogicalChannelResponse iccOpenLogicalChannel (String AID, int p2)"}, "getCellLocation()": {"Returns": [["@B_android#telephony#CellLocation_E@", "Current location of the device or null if not available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "use @B_android#telephony#TelephonyManager#getAllCellInfo_E@ instead, which returns a superset of this API. Returns the current location of the device. If there is only one radio in the device and that radio has an LTE connection, this method will return null. The implementation must not to try add LTE identifiers into the existing cdma/gsm classes. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public CellLocation getCellLocation ()"}, "getManufacturerCode()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Manufacturer Code from the MEID. Return null if Manufacturer Code is not available.", "history": "Added in API level 29", "FullName": "public String getManufacturerCode ()"}, "iccExchangeSimIO(int,int,int,int,int,java.lang.String)": {"Returns": [["byte[]", "The APDU response."]], "Parameters": [["int", "int: P1 value of the APDU command."], ["int", "int: P2 value of the APDU command."], ["int", "int: P3 value of the APDU command."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Returns the response APDU for a command APDU sent through SIM_IO. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21", "FullName": "public byte[] iccExchangeSimIO (int fileID, int command, int p1, int p2, int p3, String filePath)"}, "createForSubscriptionId(int)": {"Returns": [["@B_android#telephony#TelephonyManager_E@", "a TelephonyManager that uses the given subId for all calls."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new TelephonyManager object pinned to the given subscription ID.", "history": "Added in API level 24", "FullName": "public TelephonyManager createForSubscriptionId (int subId)"}, "isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)": {"Returns": [["boolean", "true if the vibration is set for this PhoneAccount, false otherwise."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the @B_android#telecom#PhoneAccount_E@ for which to retrieve the voicemail vibration setting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether vibration is set for voicemail notification in Phone settings.", "history": "Added in API level 24", "FullName": "public boolean isVoicemailVibrationEnabled (PhoneAccountHandle accountHandle)"}, "sendUssdRequest(java.lang.String,android.telephony.TelephonyManager.UssdResponseCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the USSD command to be executed."], ["@B_android#telephony#TelephonyManager#UssdResponseCallback_E@", "TelephonyManager.UssdResponseCallback: called by the framework to inform the caller of the result of executing the USSD request (see @B_android#telephony#TelephonyManager#UssdResponseCallback_E@)."], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ to run the request on."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CALL_PHONE_E@"], "Description": "Sends an Unstructured Supplementary Service Data (USSD) request to the mobile network and informs the caller of the response via the supplied callback. Carriers define USSD codes which can be sent by the user to request information such as the user's current data balance or minutes balance. Requires permission: @B_android#Manifest#permission#CALL_PHONE_E@ Requires @B_android#Manifest#permission#CALL_PHONE_E@", "history": "Added in API level 26", "FullName": "public void sendUssdRequest (String ussdRequest, TelephonyManager.UssdResponseCallback callback, Handler handler)"}, "getTypeAllocationCode()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Type Allocation Code from the IMEI. Return null if Type Allocation Code is not available.", "history": "Added in API level 29", "FullName": "public String getTypeAllocationCode ()"}, "getLine1Number()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@", "@B_android#Manifest#permission#READ_SMS_E@", "@B_android#Manifest#permission#READ_PHONE_NUMBERS_E@"], "Description": "Returns the phone number string for line 1, for example, the MSISDN for a GSM phone. Return null if it is unavailable. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@, @B_android#Manifest#permission#READ_SMS_E@, @B_android#Manifest#permission#READ_PHONE_NUMBERS_E@, that the caller is the default SMS app, or that the caller has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@ or @B_android#Manifest#permission#READ_SMS_E@ or @B_android#Manifest#permission#READ_PHONE_NUMBERS_E@", "history": "Added in API level 1", "FullName": "public String getLine1Number ()"}, "getCardIdForDefaultEuicc()": {"Returns": [["int", "card ID of the default eUICC card, if loaded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the card ID of the default eUICC card. If the eUICCs have not yet been loaded, returns @B_android#telephony#TelephonyManager#UNINITIALIZED_CARD_ID_E@. If there is no eUICC or the device does not support card IDs for eUICCs, returns @B_android#telephony#TelephonyManager#UNSUPPORTED_CARD_ID_E@. The card ID is a unique identifier associated with a UICC or eUICC card. Card IDs are unique to a device, and always refer to the same UICC or eUICC card unless the device goes through a factory reset.", "history": "Added in API level 29", "FullName": "public int getCardIdForDefaultEuicc ()"}, "sendDialerSpecialCode(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The special dialer code to send"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have carrier privileges or is not the current default dialer"]], "SeeAlso": [], "Permissions": [], "Description": "Send the special dialer code. The IPC caller must be the current default dialer or have carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 26", "FullName": "public void sendDialerSpecialCode (String inputCode)"}, "getSimOperatorName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager#getSimState_E@"], "Permissions": [], "Description": "Returns the Service Provider Name (SPN). Availability: SIM state must be @B_android#telephony#TelephonyManager#SIM_STATE_READY_E@", "history": "Added in API level 1", "FullName": "public String getSimOperatorName ()"}, "getMeid(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: of which MEID is returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MEID (Mobile Equipment Identifier). Return null if MEID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 26", "FullName": "public String getMeid (int slotIndex)"}, "listen(android.telephony.PhoneStateListener, int)": {"Returns": [], "Parameters": [["@B_android#telephony#PhoneStateListener_E@", "PhoneStateListener: The @B_android#telephony#PhoneStateListener_E@ object to register (or unregister)"], ["int", "int: The telephony state(s) of interest to the listener, as a bitwise-OR combination of @B_android#telephony#PhoneStateListener_E@ LISTEN_ flags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener object to receive notification of changes in specified telephony states. To register a listener, pass a @B_android#telephony#PhoneStateListener_E@ and specify at least one telephony state of interest in the events argument. At registration, and when a specified telephony state changes, the telephony manager invokes the appropriate callback method on the listener object and passes the current (updated) values. To unregister a listener, pass the listener object and set the events argument to @B_android#telephony#PhoneStateListener#LISTEN_NONE_E@ (0). Note: if you call this method while in the middle of a binder transaction, you @B_android#os#Binder#clearCallingIdentity_E@ before calling this method. A @B_java#lang#SecurityException_E@ will be thrown otherwise.", "history": "added in API level 1", "FullName": "public void listen (PhoneStateListener listener, int events)"}, "getImei()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the IMEI (International Mobile Equipment Identity). Return null if IMEI is not available. See @B_android#telephony#TelephonyManager#getImei_E@ for details on the required permissions and behavior when the caller does not hold sufficient permissions. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 26", "FullName": "public String getImei ()"}, "getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_android#net#Uri_E@", "The URI for the ringtone to play when receiving a voicemail from a specific PhoneAccount."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the @B_android#telecom#PhoneAccount_E@ for which to retrieve the voicemail ringtone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the URI for the per-account voicemail ringtone set in Phone settings.", "history": "Added in API level 24", "FullName": "public Uri getVoicemailRingtoneUri (PhoneAccountHandle accountHandle)"}, "setNetworkSelectionModeAutomatic()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Sets the network selection mode to automatic. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@ Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 28", "FullName": "public void setNetworkSelectionModeAutomatic ()"}, "hasIccCard()": {"Returns": [["boolean", "true if a ICC card is present"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public boolean hasIccCard ()"}, "getVoiceNetworkType()": {"Returns": [["int", "Value is @B_android#telephony#TelephonyManager#NETWORK_TYPE_UNKNOWN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GPRS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EDGE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_UMTS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_CDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_0_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_A_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_1xRTT_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSDPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSUPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IDEN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_B_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_LTE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EHRPD_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPAP_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GSM_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_TD_SCDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IWLAN_E@, android.telephony.TelephonyManager.NETWORK_TYPE_LTE_CA, or @B_android#telephony#TelephonyManager#NETWORK_TYPE_NR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the NETWORK_TYPE_xxxx for voice Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 24", "FullName": "public int getVoiceNetworkType ()"}, "isNetworkRoaming()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the device is considered roaming on the current network, for GSM purposes. Availability: Only when user registered to a network.", "history": "Added in API level 1", "FullName": "public boolean isNetworkRoaming ()"}, "getSimOperator()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager#getSimState_E@"], "Permissions": [], "Description": "Returns the MCC+MNC (mobile country code + mobile network code) of the provider of the SIM. 5 or 6 decimal digits. Availability: SIM state must be @B_android#telephony#TelephonyManager#SIM_STATE_READY_E@", "history": "Added in API level 1", "FullName": "public String getSimOperator ()"}, "getDataState()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Returns a constant indicating the current data connection state (cellular).", "history": "Added in API level 1", "FullName": "public int getDataState ()"}, "canChangeDtmfToneLength()": {"Returns": [["boolean", "true if the DTMF tone length can be changed, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the device supports configuring the DTMF tone length.", "history": "Added in API level 23", "FullName": "public boolean canChangeDtmfToneLength ()"}, "requestNetworkScan(android.telephony.NetworkScanRequest,java.util.concurrent.Executor,android.telephony.TelephonyScanManager.NetworkScanCallback)": {"Returns": [["@B_android#telephony#NetworkScan_E@", "A NetworkScan obj which contains a callback which can be used to stop the scan."]], "Parameters": [["@B_android#telephony#NetworkScanRequest_E@", "NetworkScanRequest: Contains all the RAT with bands/channels that need to be scanned."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor through which the callback should be invoked. Since the scan request may trigger multiple callbacks and they must be invoked in the same order as they are received by the platform, the user should provide an executor which executes tasks one at a time in serial order. For example AsyncTask.SERIAL_EXECUTOR."], ["@B_android#telephony#TelephonyScanManager#NetworkScanCallback_E@", "TelephonyScanManager.NetworkScanCallback: Returns network scan results or errors."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Request a network scan. This method is asynchronous, so the network scan results will be returned by callback. The returned NetworkScan will contain a callback method which can be used to stop the scan. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@) and @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@. If the system-wide location switch is off, apps may still call this API, with the following constraints: Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ and @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 28", "FullName": "public NetworkScan requestNetworkScan (NetworkScanRequest request, Executor executor, TelephonyScanManager.NetworkScanCallback callback)"}, "getManufacturerCode(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: of which Type Allocation Code is returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Manufacturer Code from the MEID. Return null if Manufacturer Code is not available.", "history": "Added in API level 29", "FullName": "public String getManufacturerCode (int slotIndex)"}, "getEmergencyNumberList()": {"Returns": [["@B_java#util#Map_E@", "Map including the keys as the active subscription IDs (Note: if there is no active subscription, the key is @B_android#telephony#SubscriptionManager#getDefaultSubscriptionId_E@) and the value as the list of @B_android#telephony#emergency#EmergencyNumber_E@; empty Map if this information is not available; or throw a SecurityException if the caller does not have the permission. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get the emergency number list based on current locale, sim, default, modem and network. In each returned list, the emergency number @B_android#telephony#emergency#EmergencyNumber_E@ coming from higher priority sources will be located at the smaller index; the priority order of sources are: @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_NETWORK_SIGNALING_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_SIM_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_DATABASE_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_DEFAULT_E@ > @B_android#telephony#emergency#EmergencyNumber#EMERGENCY_NUMBER_SOURCE_MODEM_CONFIG_E@ The subscriptions which the returned list would be based on, are all the active subscriptions, no matter which subscription could be used to create TelephonyManager. Requires permission @B_android#Manifest#permission#READ_PHONE_STATE_E@ or the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public Map<Integer, List<EmergencyNumber>> getEmergencyNumberList ()"}, "sendVisualVoicemailSms(java.lang.String,int,java.lang.String,android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The destination number."], ["int", "int: The destination port for data SMS, or 0 for text SMS."], ["@B_java#lang#String_E@", "String: The message content. For data sms, it will be encoded as a UTF-8 byte stream."], ["@B_android#app#PendingIntent_E@", "PendingIntent: The sent intent passed to the @B_android#telephony#SmsManager_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not the current default dialer"]], "SeeAlso": ["@B_android#telephony#SmsManager#sendDataMessage_E@", "@B_android#telephony#SmsManager#sendTextMessage_E@"], "Permissions": ["@B_android#Manifest#permission#SEND_SMS_E@"], "Description": "Send a visual voicemail SMS. The caller must be the current default dialer. A @B_android#telephony#VisualVoicemailService_E@ uses this method to send a command via SMS to the carrier's visual voicemail server. Some examples for carriers using the OMTP standard include activating and deactivating visual voicemail, or requesting the current visual voicemail provisioning status. See the OMTP Visual Voicemail specification for more information on the format of these SMS messages. Requires Permission: @B_android#Manifest#permission#SEND_SMS_E@", "history": "Added in API level 26", "FullName": "public void sendVisualVoicemailSms (String number, int port, String text, PendingIntent sentIntent)"}, "sendEnvelopeWithStatus(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The APDU response from the ICC card in hexadecimal format with the last 4 bytes being the status word. If the command fails, returns an empty string."]], "Parameters": [["@B_java#lang#String_E@", "String: String containing SAT/USAT response in hexadecimal format starting with command tag. See TS 102 223 for details."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Send ENVELOPE to the SIM and return the response. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21", "FullName": "public String sendEnvelopeWithStatus (String content)"}, "getGroupIdLevel1()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the Group Identifier Level1 for a GSM phone. Return null if it is unavailable. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 18", "FullName": "public String getGroupIdLevel1 ()"}, "getCallState()": {"Returns": [["int", "the current call state. Value is @B_android#telephony#TelephonyManager#CALL_STATE_IDLE_E@, @B_android#telephony#TelephonyManager#CALL_STATE_RINGING_E@, or @B_android#telephony#TelephonyManager#CALL_STATE_OFFHOOK_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the state of all calls on the device. This method considers not only calls in the Telephony stack, but also calls via other @B_android#telecom#ConnectionService_E@ implementations. Note: The call state returned via this method may differ from what is reported by @B_android#telephony#PhoneStateListener#onCallStateChanged_E@, as that callback only considers Telephony (mobile) calls.", "history": "Added in API level 1", "FullName": "public int getCallState ()"}, "getSimState()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Returns a constant indicating the state of the default SIM card.", "history": "Added in API level 1", "FullName": "public int getSimState ()"}, "getDeviceId(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: of which deviceID is returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telephony#TelephonyManager#getImei_E@ which returns IMEI for GSM or @B_android#telephony#TelephonyManager#getMeid_E@ which returns MEID for CDMA. Returns the unique device ID of a subscription, for example, the IMEI for GSM and the MEID for CDMA phones. Return null if device ID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 23 Deprecated in API level 26", "FullName": "public String getDeviceId (int slotIndex)"}, "setVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle,boolean)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the @B_android#telecom#PhoneAccount_E@ for which to set the voicemail vibration setting."], ["boolean", "boolean: Whether to enable or disable vibration for voicemail notifications from a specific PhoneAccount."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Use @B_android#provider#Settings#ACTION_CHANNEL_NOTIFICATION_SETTINGS_E@ instead. Sets the per-account preference whether vibration is enabled for voicemail notifications. Requires that the calling app is the default dialer, or has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@, or has permission @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@.", "history": "Added in API level 26 Deprecated in API level 28", "FullName": "public void setVoicemailVibrationEnabled (PhoneAccountHandle phoneAccountHandle, boolean enabled)"}, "getDeviceId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#telephony#TelephonyManager#getImei_E@ which returns IMEI for GSM or @B_android#telephony#TelephonyManager#getMeid_E@ which returns MEID for CDMA. Returns the unique device ID, for example, the IMEI for GSM and the MEID or ESN for CDMA phones. Return null if device ID is not available. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public String getDeviceId ()"}, "getSubscriberId()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique subscriber ID, for example, the IMSI for a GSM phone. Return null if it is unavailable. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 1", "FullName": "public String getSubscriberId ()"}, "getIccAuthentication(int, int, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the response of authentication. This value will be null in the following cases: Authentication error, incorrect MAC Authentication error, security context not supported Key freshness failure Authentication error, no memory space available Authentication error, no memory space available in EFMUK"]], "Parameters": [["int", "int: the icc application type, like @B_android#telephony#TelephonyManager#APPTYPE_USIM_E@"], ["int", "int: the authentication type, @B_android#telephony#TelephonyManager#AUTHTYPE_EAP_AKA_E@ or @B_android#telephony#TelephonyManager#AUTHTYPE_EAP_SIM_E@"], ["@B_java#lang#String_E@", "String: authentication challenge data, base64 encoded. See 3GPP TS 31.102 7.1.2 for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the response of authentication for the default subscription. Returns null if the authentication hasn't been successful Requires Permission: READ_PRIVILEGED_PHONE_STATE or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "added in API level 24", "FullName": "public String getIccAuthentication (int appType, int authType, String data)"}, "getSimSpecificCarrierId()": {"Returns": [["int", "Returns fine-grained carrier id of the current subscription. Return @B_android#telephony#TelephonyManager#UNKNOWN_CARRIER_ID_E@ if the subscription is unavailable or the carrier cannot be identified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns fine-grained carrier ID of the current subscription. A specific carrier ID can represent the fact that a carrier may be in effect an aggregation of other carriers (ie in an MVNO type scenario) where each of these specific carriers which are used to make up the actual carrier service may have different carrier configurations. A specific carrier ID could also be used, for example, in a scenario where a carrier requires different carrier configuration for different service offering such as a prepaid plan. the specific carrier ID would be used for configuration purposes, but apps wishing to know about the carrier itself should use the regular carrier ID returned by @B_android#telephony#TelephonyManager#getSimCarrierId_E@. e.g, Tracfone SIMs could return different specific carrier ID based on IMSI from current subscription while carrier ID remains the same. For carriers without fine-grained specific carrier ids, return @B_android#telephony#TelephonyManager#getSimCarrierId_E@ Specific carrier ids are defined in the same way as carrier id", "history": "Added in API level 29", "FullName": "public int getSimSpecificCarrierId ()"}, "getIccAuthentication(int,int,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the response of authentication. This value will be null in the following cases: Authentication error, incorrect MAC Authentication error, security context not supported Key freshness failure Authentication error, no memory space available Authentication error, no memory space available in EFMUK"]], "Parameters": [["int", "int: the icc application type, like @B_android#telephony#TelephonyManager#APPTYPE_USIM_E@"], ["int", "int: the authentication type, @B_android#telephony#TelephonyManager#AUTHTYPE_EAP_AKA_E@ or @B_android#telephony#TelephonyManager#AUTHTYPE_EAP_SIM_E@"], ["@B_java#lang#String_E@", "String: authentication challenge data, base64 encoded. See 3GPP TS 31.102 7.1.2 for more details."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the response of authentication for the default subscription. Returns null if the authentication hasn't been successful Requires Permission: READ_PRIVILEGED_PHONE_STATE or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 24", "FullName": "public String getIccAuthentication (int appType, int authType, String data)"}, "getNetworkCountryIso()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO country code equivalent of the MCC (Mobile Country Code) of the current registered operator or the cell nearby, if available. . Note: Result may be unreliable on CDMA networks (use @B_android#telephony#TelephonyManager#getPhoneType_E@ to determine if on a CDMA network).", "history": "Added in API level 1", "FullName": "public String getNetworkCountryIso ()"}, "setOperatorBrandOverride(java.lang.String)": {"Returns": [["boolean", "true if the operation was executed correctly."]], "Parameters": [["@B_java#lang#String_E@", "String: The brand name to display/set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override the branding for the current ICCID. Once set, whenever the SIM is present in the device, the service provider name (SPN) and the operator name will both be replaced by the brand value input. To unset the value, the same function should be called with a null brand value. Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 22", "FullName": "public boolean setOperatorBrandOverride (String brand)"}, "getImei(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int: of which IMEI is returned"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the IMEI (International Mobile Equipment Identity). Return null if IMEI is not available. This API requires one of the following: The caller holds the READ_PRIVILEGED_PHONE_STATE permission. If the caller is the device or profile owner, the caller holds the @B_android#Manifest#permission#READ_PHONE_STATE_E@ permission. The caller has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. The caller is the default SMS app for the device. The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 26", "FullName": "public String getImei (int slotIndex)"}, "isDataRoamingEnabled()": {"Returns": [["boolean", "true if the data roaming is enabled on the subscription, otherwise return false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@", "@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns whether mobile data roaming is enabled on the subscription. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultDataSubscriptionId_E@ Requires one of the following permissions: @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@, @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#ACCESS_NETWORK_STATE_E@ or @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public boolean isDataRoamingEnabled ()"}, "isWorldPhone()": {"Returns": [["boolean", "true if the device is a world phone, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the device is a world phone.", "history": "Added in API level 23", "FullName": "public boolean isWorldPhone ()"}, "getSimState(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Returns a constant indicating the state of the device SIM card in a slot.", "history": "Added in API level 26", "FullName": "public int getSimState (int slotIndex)"}, "switchMultiSimConfig(int)": {"Returns": [], "Parameters": [["int", "int: number of live SIMs we want to switch to"]], "Throws": [["", "android.os.RemoteException"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Switch configs to enable multi-sim or switch back to single-sim Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Note: with only carrier privileges, it is not allowed to switch from multi-sim to single-sim Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public void switchMultiSimConfig (int numOfSims)"}, "getDataActivity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@"], "Permissions": [], "Description": "Returns a constant indicating the type of activity on a data connection (cellular).", "history": "Added in API level 1", "FullName": "public int getDataActivity ()"}, "getSimSerialNumber()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the serial number of the SIM, if applicable. Return null if it is unavailable. Requires Permission: READ_PRIVILEGED_PHONE_STATE, for the calling app to be the device or profile owner and have the READ_PHONE_STATE permission, or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). The profile owner is an app that owns a managed profile on the device; for more details see If the calling app does not meet one of these requirements then this method will behave as follows: If the calling app's target SDK is API level 28 or lower and the app has the READ_PHONE_STATE permission then null is returned. If the calling app's target SDK is API level 28 or lower and the app does not have the READ_PHONE_STATE permission, or if the calling app is targeting API level 29 or higher, then a SecurityException is thrown. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 1", "FullName": "public String getSimSerialNumber ()"}, "createForPhoneAccountHandle(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_android#telephony#TelephonyManager_E@", "a TelephonyManager that uses the given phone account for all calls, or null if the phone account does not correspond to a valid subscription ID."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new TelephonyManager object pinned to the subscription ID associated with the given phone account.", "history": "Added in API level 26", "FullName": "public TelephonyManager createForPhoneAccountHandle (PhoneAccountHandle phoneAccountHandle)"}, "getMmsUAProfUrl()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the MMS user agent profile URL.", "history": "Added in API level 19", "FullName": "public String getMmsUAProfUrl ()"}, "isConcurrentVoiceAndDataSupported()": {"Returns": [["boolean", "true if simultaneous voice and data supported, and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether the device is currently on a technology (e.g. UMTS or LTE) which can support voice and data simultaneously. This can change based on location or network condition.", "history": "Added in API level 26", "FullName": "public boolean isConcurrentVoiceAndDataSupported ()"}, "getUiccCardsInfo()": {"Returns": [["@B_java#util#List_E@", "a list of UiccCardInfo objects, representing information on the currently inserted UICCs and eUICCs. Each UiccCardInfo in the list will have private information filtered out if the caller does not have adequate permissions for that card. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets information about currently inserted UICCs and eUICCs. Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). If the caller has carrier priviliges on any active subscription, then they have permission to get simple information like the card ID (@B_android#telephony#UiccCardInfo#getCardId_E@), whether the card is an eUICC (@B_android#telephony#UiccCardInfo#isEuicc_E@), and the slot index where the card is inserted (@B_android#telephony#UiccCardInfo#getSlotIndex_E@). To get private information such as the EID (@B_android#telephony#UiccCardInfo#getEid_E@) or ICCID (@B_android#telephony#UiccCardInfo#getIccId_E@), the caller must have carrier priviliges on that specific UICC or eUICC card. See @B_android#telephony#UiccCardInfo_E@ for more details on the kind of information available. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE", "history": "Added in API level 29", "FullName": "public List<UiccCardInfo> getUiccCardsInfo ()"}, "isRttSupported()": {"Returns": [["boolean", "true if the device and carrier both support RTT, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the device currently supports RTT (Real-time text). Based both on carrier support for the feature and device firmware support.", "history": "Added in API level 29", "FullName": "public boolean isRttSupported ()"}, "getVoiceMailAlphaTag()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Retrieves the alphabetic identifier associated with the voice mail number. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 1", "FullName": "public String getVoiceMailAlphaTag ()"}, "iccOpenLogicalChannel(java.lang.String,int)": {"Returns": [["@B_android#telephony#IccOpenLogicalChannelResponse_E@", "an IccOpenLogicalChannelResponse object."]], "Parameters": [["@B_java#lang#String_E@", "String: Application id. See ETSI 102.221 and 101.220."], ["int", "int: P2 parameter (described in ISO 7816-4)."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Opens a logical channel to the ICC card. Input parameters equivalent to TS 27.007 AT+CCHO command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 26", "FullName": "public IccOpenLogicalChannelResponse iccOpenLogicalChannel (String AID, int p2)"}, "getSimSpecificCarrierIdName()": {"Returns": [["@B_java#lang#CharSequence_E@", "user-facing name of the subscription specific carrier id. Return null if the subscription is unavailable or the carrier cannot be identified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar like @B_android#telephony#TelephonyManager#getSimCarrierIdName_E@, returns user-facing name of the specific carrier id returned by @B_android#telephony#TelephonyManager#getSimSpecificCarrierId_E@. The specific carrier ID would be used for configuration purposes, but apps wishing to know about the carrier itself should use the regular carrier ID returned by @B_android#telephony#TelephonyManager#getSimCarrierIdName_E@. The returned name is unlocalized.", "history": "Added in API level 29", "FullName": "public CharSequence getSimSpecificCarrierIdName ()"}, "iccTransmitApduLogicalChannel(int,int,int,int,int,int,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The APDU response from the ICC card with the status appended at the end."]], "Parameters": [["int", "int: is the channel id to be closed as returned by a successful iccOpenLogicalChannel."], ["int", "int: Class of the APDU command."], ["int", "int: Instruction of the APDU command."], ["int", "int: P1 value of the APDU command."], ["int", "int: P2 value of the APDU command."], ["int", "int: P3 value of the APDU command. If p3 is negative a 4 byte APDU is sent to the SIM."], ["@B_java#lang#String_E@", "String: Data to be sent with the APDU."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Transmit an APDU to the ICC card over a logical channel. Input parameters equivalent to TS 27.007 AT+CGLA command. Requires Permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 21", "FullName": "public String iccTransmitApduLogicalChannel (int channel, int cla, int instruction, int p1, int p2, int p3, String data)"}, "getDeviceSoftwareVersion()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns the software version number for the device, for example, the IMEI/SV for GSM phones. Return null if the software version is not available. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 1", "FullName": "public String getDeviceSoftwareVersion ()"}, "requestCellInfoUpdate(java.util.concurrent.Executor,android.telephony.TelephonyManager.CellInfoCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the executor on which callback will be invoked. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#telephony#TelephonyManager#CellInfoCallback_E@", "TelephonyManager.CellInfoCallback: a callback to receive CellInfo. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Requests all available cell information from the current subscription for observed camped/registered, serving, and neighboring cells. Any available results from this request will be provided by calls to @B_android#telephony#PhoneStateListener#onCellInfoChanged_E@ for each active subscription. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 29", "FullName": "public void requestCellInfoUpdate (Executor executor, TelephonyManager.CellInfoCallback callback)"}, "getSignalStrength()": {"Returns": [["@B_android#telephony#SignalStrength_E@", "the most recent cached signal strength info from the modem This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the most recently available signal strength information. Get the most recent SignalStrength information reported by the modem. Due to power saving this information may not always be current.", "history": "Added in API level 28", "FullName": "public SignalStrength getSignalStrength ()"}, "setPreferredNetworkTypeToGlobal()": {"Returns": [["boolean", "true on success; false on any failure."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the preferred network type to global mode which includes LTE, CDMA, EvDo and GSM/WCDMA. Requires that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@).", "history": "Added in API level 22", "FullName": "public boolean setPreferredNetworkTypeToGlobal ()"}, "getDataNetworkType()": {"Returns": [["int", "the network type Value is @B_android#telephony#TelephonyManager#NETWORK_TYPE_UNKNOWN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GPRS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EDGE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_UMTS_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_CDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_0_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_A_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_1xRTT_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSDPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSUPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IDEN_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EVDO_B_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_LTE_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_EHRPD_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_HSPAP_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_GSM_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_TD_SCDMA_E@, @B_android#telephony#TelephonyManager#NETWORK_TYPE_IWLAN_E@, android.telephony.TelephonyManager.NETWORK_TYPE_LTE_CA, or @B_android#telephony#TelephonyManager#NETWORK_TYPE_NR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#TelephonyManager_E@", "@B_android#telephony#TelephonyManager#NETWORK_TYPE_1xRTT_E@"], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns a constant indicating the radio technology (network type) currently in use on the device for data transmission. If this object has been created with @B_android#telephony#TelephonyManager#createForSubscriptionId_E@, applies to the given subId. Otherwise, applies to @B_android#telephony#SubscriptionManager#getDefaultDataSubscriptionId_E@ Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 24", "FullName": "public int getDataNetworkType ()"}}, "Inheritance": [], "ClassName": "android.telephony.TelephonyManager", "ClassDesc": "Provides access to information about the telephony services on the device. Applications can use the methods in this class to determine telephony services and states, as well as to access some types of subscriber information. Applications can also register a listener to receive notification of telephony state changes. The returned TelephonyManager will use the default subscription for all calls. To call an API for a specific subscription, use @B_android#telephony#TelephonyManager#createForSubscriptionId_E@. e.g. telephonyManager = defaultSubTelephonyManager.createForSubscriptionId(subId); Note that access to some telephony information is permission-protected. Your application cannot access the protected information unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the the methods through which you access the protected information."}