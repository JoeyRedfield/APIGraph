{"Functions": {"WebMessagePort.WebMessageCallback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 23", "FullName": "public WebMessagePort.WebMessageCallback ()"}, "onMessage(android.webkit.WebMessagePort,android.webkit.WebMessage)": {"Returns": [], "Parameters": [["@B_android#webkit#WebMessagePort_E@", "WebMessagePort: the WebMessagePort that the message is destined for"], ["@B_android#webkit#WebMessage_E@", "WebMessage: the message from the entangled port."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Message callback for receiving onMessage events.", "history": "Added in API level 23", "FullName": "public void onMessage (WebMessagePort port, WebMessage message)"}}, "Inheritance": [], "ClassName": "android.webkit.WebMessagePort.WebMessageCallback", "ClassDesc": "The listener for handling MessagePort events. The message callback methods are called on the main thread. If the embedder application wants to receive the messages on a different thread, it can do this by passing a Handler in @B_android#webkit#WebMessagePort#setWebMessageCallback_E@. In the latter case, the application should be extra careful for thread safety since WebMessagePort methods should be called on main thread."}