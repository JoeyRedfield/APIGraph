{"Functions": {"writeData(javax.sql.RowSetInternal)": {"Returns": [["boolean", "true if the modified data was written; false if not, which will be the case if there is a conflict"]], "Parameters": [["@B_javax#sql#RowSetInternal_E@", "RowSetInternal: the RowSet object (1) that has implemented the RowSetInternal interface, (2) with which this writer is registered, and (3) that called this method internally"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes the changes in this RowSetWriter object's rowset back to the data source from which it got its data.", "history": "Added in API level 1", "FullName": "public abstract boolean writeData (RowSetInternal caller)"}}, "Inheritance": [], "ClassName": "javax.sql.RowSetWriter", "ClassDesc": "An object that implements the RowSetWriter interface, called a RowSet object that supports the reader/writer paradigm. If a disconnected RowSet object modifies some of its data, and it has a writer associated with it, it may be implemented so that it calls on the writer's writeData method internally to write the updates back to the data source. In order to do this, the writer must first establish a connection with the rowset's data source. If the data to be updated has already been changed in the data source, there is a conflict, in which case the writer will not write the changes to the data source. The algorithm the writer uses for preventing or limiting conflicts depends entirely on its implementation."}