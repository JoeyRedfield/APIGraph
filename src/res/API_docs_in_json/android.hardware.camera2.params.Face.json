{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Represent the Face as a string for debugging purposes.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getBounds()": {"Returns": [["@B_android#graphics#Rect_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Bounds of the face. A rectangle relative to the sensor's @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE_E@, with (0,0) representing the top-left corner of the active array rectangle. There is no constraints on the the Rectangle value other than it is not-null.", "history": "Added in API level 21", "FullName": "public Rect getBounds ()"}, "getMouthPosition()": {"Returns": [["@B_android#graphics#Point_E@", "The mouth position, or null if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The coordinates of the center of the mouth. The coordinates are in the same space as the ones for @B_android#hardware#camera2#params#Face#getBounds_E@. This is an optional field, may not be supported on all devices. If not supported, the value will always be set to null. This value will always be null only if @B_android#hardware#camera2#params#Face#getId_E@ returns @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@.", "history": "Added in API level 21", "FullName": "public Point getMouthPosition ()"}, "getRightEyePosition()": {"Returns": [["@B_android#graphics#Point_E@", "The right eye position, or null if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The coordinates of the center of the right eye. The coordinates are in the same space as the ones for @B_android#hardware#camera2#params#Face#getBounds_E@.This is an optional field, may not be supported on all devices. If not supported, the value will always be set to null. This value will always be null only if @B_android#hardware#camera2#params#Face#getId_E@ returns @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@.", "history": "Added in API level 21", "FullName": "public Point getRightEyePosition ()"}, "getId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#Face_E@"], "Permissions": [], "Description": "An unique id per face while the face is visible to the tracker. If the face leaves the field-of-view and comes back, it will get a new id. This is an optional field, may not be supported on all devices. If the id is @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@ then the leftEyePosition, rightEyePosition, and mouthPositions are guaranteed to be null. Otherwise, each of leftEyePosition, rightEyePosition, and mouthPosition may be independently null or not-null. When devices report the value of key @B_android#hardware#camera2#CaptureResult#STATISTICS_FACE_DETECT_MODE_E@ as @B_android#hardware#camera2#CameraMetadata#STATISTICS_FACE_DETECT_MODE_SIMPLE_E@ in @B_android#hardware#camera2#CaptureResult_E@, the face id of each face is expected to be @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@. This value will either be @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@ or otherwise greater than 0.", "history": "Added in API level 21", "FullName": "public int getId ()"}, "getScore()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#Face_E@"], "Permissions": [], "Description": "The confidence level for the detection of the face. The range is @B_android#hardware#camera2#params#Face#SCORE_MIN_E@ to @B_android#hardware#camera2#params#Face#SCORE_MAX_E@. @B_android#hardware#camera2#params#Face#SCORE_MAX_E@ is the highest confidence. Depending on the device, even very low-confidence faces may be listed, so applications should filter out faces with low confidence, depending on the use case. For a typical point-and-shoot camera application that wishes to display rectangles around detected faces, filtering out faces with confidence less than half of @B_android#hardware#camera2#params#Face#SCORE_MAX_E@ is recommended.", "history": "Added in API level 21", "FullName": "public int getScore ()"}, "getLeftEyePosition()": {"Returns": [["@B_android#graphics#Point_E@", "The left eye position, or null if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The coordinates of the center of the left eye. The coordinates are in the same space as the ones for @B_android#hardware#camera2#params#Face#getBounds_E@. This is an optional field, may not be supported on all devices. If not supported, the value will always be set to null. This value will always be null only if @B_android#hardware#camera2#params#Face#getId_E@ returns @B_android#hardware#camera2#params#Face#ID_UNSUPPORTED_E@.", "history": "Added in API level 21", "FullName": "public Point getLeftEyePosition ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.Face", "ClassDesc": "Describes a face detected in an image."}