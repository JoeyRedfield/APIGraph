{"Functions": {"getEncodedDataSize(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the size of the encoded image data (does not include size of PKM header).", "history": "added in API level 8", "FullName": "public static int getEncodedDataSize (int width, int height)"}, "getEncodedDataSize(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the size of the encoded image data (does not include size of PKM header).", "history": "Added in API level 8", "FullName": "public static int getEncodedDataSize (int width, int height)"}, "decodeBlock(java.nio.Buffer, java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size ENCODED_BLOCK_SIZE that contains the ETC1 compressed version of the data."], ["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size DECODED_BLOCK_SIZE that will receive the decoded data. The data represents a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode a block of pixels.", "history": "added in API level 8", "FullName": "public static void decodeBlock (Buffer in, Buffer out)"}, "ETC1()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 8", "FullName": "public ETC1 ()"}, "decodeBlock(java.nio.Buffer,java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size ENCODED_BLOCK_SIZE that contains the ETC1 compressed version of the data."], ["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size DECODED_BLOCK_SIZE that will receive the decoded data. The data represents a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode a block of pixels.", "history": "Added in API level 8", "FullName": "public static void decodeBlock (Buffer in, Buffer out)"}, "getHeight(java.nio.Buffer)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the header."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read the image height from a PKM header", "history": "Added in API level 8", "FullName": "public static int getHeight (Buffer header)"}, "encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of the image data. Formatted such that pixel (x,y) is at pIn + pixelSize * x + stride * y;"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int: must be 2 or 3. 2 is an GL_UNSIGNED_SHORT_5_6_5 image, 3 is a GL_BYTE RGB image."], ["int", "int no parameter comment"], ["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of the encoded data. Must be large enough to store entire encoded image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode an entire image.", "history": "Added in API level 8", "FullName": "public static void encodeImage (Buffer in, int width, int height, int pixelSize, int stride, Buffer out)"}, "getWidth(java.nio.Buffer)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the header."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read the image width from a PKM header", "history": "Added in API level 8", "FullName": "public static int getWidth (Buffer header)"}, "formatHeader(java.nio.Buffer, int, int)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the header."], ["int", "int: the width of the image in pixels."], ["int", "int: the height of the image in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a PKM header", "history": "added in API level 8", "FullName": "public static void formatHeader (Buffer header, int width, int height)"}, "encodeBlock(java.nio.Buffer, int, java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y)."], ["int", "int: is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing."], ["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode a block of pixels.", "history": "added in API level 8", "FullName": "public static void encodeBlock (Buffer in, int validPixelMask, Buffer out)"}, "formatHeader(java.nio.Buffer,int,int)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the header."], ["int", "int: the width of the image in pixels."], ["int", "int: the height of the image in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format a PKM header", "history": "Added in API level 8", "FullName": "public static void formatHeader (Buffer header, int width, int height)"}, "encodeBlock(java.nio.Buffer,int,java.nio.Buffer)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size DECODED_BLOCK_SIZE that represent a 4 x 4 square of 3-byte pixels in form R, G, B. Byte (3 * (x + 4 * y) is the R value of pixel (x, y)."], ["int", "int: is a 16-bit mask where bit (1 << (x + y * 4)) indicates whether the corresponding (x,y) pixel is valid. Invalid pixel color values are ignored when compressing."], ["@B_java#nio#Buffer_E@", "Buffer: a native order direct buffer of size ENCODED_BLOCK_SIZE that receives the ETC1 compressed version of the data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encode a block of pixels.", "history": "Added in API level 8", "FullName": "public static void encodeBlock (Buffer in, int validPixelMask, Buffer out)"}, "decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)": {"Returns": [], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the encoded data."], ["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the image data. Will be written such that pixel (x,y) is at pIn + pixelSize * x + stride * y. Must be large enough to store entire image."], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int: must be 2 or 3. 2 is an GL_UNSIGNED_SHORT_5_6_5 image, 3 is a GL_BYTE RGB image."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decode an entire image.", "history": "Added in API level 8", "FullName": "public static void decodeImage (Buffer in, Buffer out, int width, int height, int pixelSize, int stride)"}, "isValid(java.nio.Buffer)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#nio#Buffer_E@", "Buffer: native order direct buffer of the header."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if a PKM header is correctly formatted.", "history": "Added in API level 8", "FullName": "public static boolean isValid (Buffer header)"}}, "Inheritance": [], "ClassName": "android.opengl.ETC1", "ClassDesc": "Methods for encoding and decoding ETC1 textures. The standard for the ETC1 texture format can be found at http://www.khronos.org/registry/gles/extensions/OES/OES_compressed_ETC1_RGB8_texture.txt The PKM file format is of a 16-byte header that describes the image bounds followed by the encoded ETC1 texture data."}