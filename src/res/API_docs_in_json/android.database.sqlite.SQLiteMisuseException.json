{"Functions": {"SQLiteMisuseException(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SQLiteMisuseException (String error)"}, "SQLiteMisuseException()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SQLiteMisuseException ()"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@", "@B_java#lang#RuntimeException_E@", "@B_android#database#SQLException_E@", "@B_android#database#sqlite#SQLiteException_E@"], "ClassName": "android.database.sqlite.SQLiteMisuseException", "ClassDesc": "This error can occur if the application creates a SQLiteStatement object and allows multiple threads in the application use it at the same time. Sqlite returns this error if bind and execute methods on this object occur at the same time from multiple threads, like so: thread # 1: in execute() method of the SQLiteStatement object while thread # 2: is in bind..() on the same object. FIX this by NEVER sharing the same SQLiteStatement object between threads. Create a local instance of the SQLiteStatement whenever it is needed, use it and close it ASAP. NEVER make it globally available."}