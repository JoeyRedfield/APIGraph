{"Functions": {"BrowseFragment.MainFragmentAdapterRegistry()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "BrowseFragment.MainFragmentAdapterRegistry ()"}, "createFragment(java.lang.Object)": {"Returns": [["@B_android#app#Fragment_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.0.0", "FullName": "Fragment createFragment (Object item)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v17.leanback.app.BrowseFragment.MainFragmentAdapterRegistry", "ClassDesc": "use @B_android#support#v17#leanback#app#BrowseSupportFragment_E@ Registry class maintaining the mapping of @B_android#support#v17#leanback#widget#Row_E@ subclasses to @B_android#support#v17#leanback#app#BrowseFragment#FragmentFactory_E@. BrowseRowFragment automatically registers @B_android#support#v17#leanback#app#BrowseFragment#ListRowFragmentFactory_E@ for handling @B_android#support#v17#leanback#widget#ListRow_E@. Developers can override that and also if they want to use custom fragment, they can register a custom @B_android#support#v17#leanback#app#BrowseFragment#FragmentFactory_E@ against @B_android#support#v17#leanback#widget#PageRow_E@."}