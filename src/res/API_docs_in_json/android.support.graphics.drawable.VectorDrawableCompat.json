{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "", "FullName": "void setTintMode (PorterDuff.Mode tintMode)"}, "getMinimumWidth()": {"Returns": [["int", "The minimum width suggested by this Drawable. If this Drawable doesn't have a suggested minimum width, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "", "FullName": "int getMinimumWidth ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "added in version 23.2.0", "FullName": "void draw (Canvas canvas)"}, "setTint(int)": {"Returns": [], "Parameters": [["int", "int: Color to use for tinting this drawable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. To clear the tint, pass null to @B_android#graphics#drawable#Drawable#setTintList_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "", "FullName": "void setTint (int tint)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicWidth ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the current color filter, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "", "FullName": "ColorFilter getColorFilter ()"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "", "FullName": "void jumpToCurrentState ()"}, "unscheduleSelf(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The runnable that you no longer want called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable unscheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "", "FullName": "void unscheduleSelf (Runnable what)"}, "getTransparentRegion()": {"Returns": [["@B_android#graphics#Region_E@", "Returns null if the Drawables has no transparent region to report, else a Region holding the parts of the Drawable's bounds that are transparent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Region representing the part of the Drawable that is completely transparent. This can be used to perform drawing operations, identifying which parts of the target will not change when rendering the Drawable. The default implementation returns null, indicating no transparent region; subclasses can optionally override this to return an actual Region if they want to supply this optimization information, but it is not required that they do so.", "history": "", "FullName": "Region getTransparentRegion ()"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "", "FullName": "void setAutoMirrored (boolean mirrored)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicHeight ()"}, "getChangingConfigurations()": {"Returns": [["int", "Returns a mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "", "FullName": "int getChangingConfigurations ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "added in version 23.2.0", "FullName": "void setColorFilter (ColorFilter colorFilter)"}, "scheduleSelf(java.lang.Runnable, long)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The action being scheduled."], ["long", "long: The time (in milliseconds) to run."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable scheduled. Does nothing if there is no Callback attached to the Drawable.", "history": "", "FullName": "void scheduleSelf (Runnable what, long when)"}, "getAlpha()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "", "FullName": "int getAlpha ()"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "", "FullName": "boolean getPadding (Rect padding)"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "", "FullName": "Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "added in version 23.2.0", "FullName": "int getOpacity ()"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "", "FullName": "boolean isStateful ()"}, "getState()": {"Returns": [["int[]", "An array of resource Ids describing the current state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the current state, as a union of primitve states, such as @B_android#R#attr#state_focused_E@, @B_android#R#attr#state_selected_E@, etc. Some drawables may modify their imagery based on the selected state.", "history": "", "FullName": "int[] getState ()"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "", "FullName": "boolean isAutoMirrored ()"}, "getMinimumHeight()": {"Returns": [["int", "The minimum height suggested by this Drawable. If this Drawable doesn't have a suggested minimum height, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "", "FullName": "int getMinimumHeight ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "added in version 23.2.0", "FullName": "void setAlpha (int alpha)"}, "setFilterBitmap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated. This can improve appearance when bitmaps are rotated. If the drawable does not use bitmaps, this call is ignored.", "history": "", "FullName": "void setFilterBitmap (boolean filter)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "", "FullName": "void onBoundsChange (Rect bounds)"}, "clearColorFilter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the color filter for this drawable.", "history": "", "FullName": "void clearColorFilter ()"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "", "FullName": "boolean onStateChange (int[] stateSet)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "", "FullName": "void applyTheme (Resources.Theme t)"}, "setChangingConfigurations(int)": {"Returns": [], "Parameters": [["int", "int: A mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a mask of the configuration parameters for which this drawable may change, requiring that it be re-created.", "history": "", "FullName": "void setChangingConfigurations (int configs)"}, "invalidateSelf()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the current @B_android#graphics#drawable#Drawable#Callback_E@ implementation to have this Drawable redrawn. Does nothing if there is no Callback attached to the Drawable.", "history": "", "FullName": "void invalidateSelf ()"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "", "FullName": "void setHotspot (float x, float y)"}, "getCurrent()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current drawable that will be used by this drawable. For simple drawables, this is just the drawable itself. For drawables that change state like @B_android#graphics#drawable#StateListDrawable_E@ and @B_android#graphics#drawable#LevelListDrawable_E@ this will be the child drawable currently in use."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "Drawable getCurrent ()"}, "setState(int[])": {"Returns": [["boolean", "Returns true if this change in state has caused the appearance of the Drawable to change (hence requiring an invalidate), otherwise returns false."]], "Parameters": [["int[]", "int: The new set of states to be displayed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify a set of states for the drawable. These are use-case specific, so see the relevant documentation. As an example, the background for widgets like Button understand the following states: [@B_android#R#attr#state_focused_E@, @B_android#R#attr#state_pressed_E@]. If the new state you are supplying causes the appearance of the Drawable to change, then it is responsible for calling @B_android#graphics#drawable#Drawable#invalidateSelf_E@ in order to have itself redrawn, and true will be returned from this function. Note: The Drawable holds a reference on to", "history": "", "FullName": "boolean setState (int[] stateSet)"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "", "FullName": "boolean onLevelChange (int level)"}, "getLayoutDirection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getLayoutDirection ()"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean canApplyTheme ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "", "FullName": "Drawable mutate ()"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "", "FullName": "void setHotspotBounds (int left, int top, int right, int bottom)"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "", "FullName": "boolean setVisible (boolean visible, boolean restart)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "", "FullName": "void setTintList (ColorStateList tint)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.support.graphics.drawable.VectorDrawableCompat", "ClassDesc": "For API 24 and above, this class is delegating to the framework's https:##developer#android#com@B_android#graphics#drawable#VectorDrawable_E@. For older API version, this class lets you create a drawable based on an XML vector graphic. You can always create a VectorDrawableCompat object and use it as a Drawable by the Java API. In order to refer to VectorDrawableCompat inside a XML file, you can use app:srcCompat attribute in AppCompat library's ImageButton or ImageView. VectorDrawableCompat can be defined in an XML file with the <vector> element. The VectorDrawableCompat has the following elements: Note that theme attributes in XML file are supported through inflate(Resources, XmlPullParser, AttributeSet, Theme)."}