{"Functions": {"performFiltering(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts filtering the content of the drop down list. The filtering pattern is the specified range of text from the edit box. Subclasses may override this method to filter with a different pattern, for instance a smaller substring of text.", "history": "Added in API level 1", "FullName": "protected void performFiltering (CharSequence text, int start, int end, int keyCode)"}, "MultiAutoCompleteTextView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MultiAutoCompleteTextView (Context context)"}, "enoughToFilter()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instead of filtering whenever the total length of the text exceeds the threshhold, this subclass filters only when the length of the range from @B_android#widget#MultiAutoCompleteTextView#Tokenizer#findTokenStart_E@ to @B_android#widget#TextView#getSelectionEnd_E@ meets or exceeds @B_android#widget#AutoCompleteTextView#getThreshold_E@.", "history": "Added in API level 1", "FullName": "public boolean enoughToFilter ()"}, "MultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MultiAutoCompleteTextView (Context context, AttributeSet attrs)"}, "performValidation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instead of validating the entire text, this subclass method validates each token of the text individually. Empty tokens are removed.", "history": "Added in API level 1", "FullName": "public void performValidation ()"}, "performFiltering(java.lang.CharSequence, int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the filtering pattern"], ["int", "int: the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instead of filtering on the entire contents of the edit box, this subclass method filters on the range from @B_android#widget#MultiAutoCompleteTextView#Tokenizer#findTokenStart_E@ to @B_android#widget#TextView#getSelectionEnd_E@ if the length of that range meets or exceeds @B_android#widget#AutoCompleteTextView#getThreshold_E@.", "history": "added in API level 1", "FullName": "protected void performFiltering (CharSequence text, int keyCode)"}, "MultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public MultiAutoCompleteTextView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "replaceText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the selected suggestion in the drop down list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the text completion by replacing the range from @B_android#widget#MultiAutoCompleteTextView#Tokenizer#findTokenStart_E@ to @B_android#widget#TextView#getSelectionEnd_E@ by the the result of passing text through @B_android#widget#MultiAutoCompleteTextView#Tokenizer#terminateToken_E@. In addition, the replaced region will be marked as an AutoText substition so that if the user immediately presses DEL, the completion will be undone. Subclasses may override this method to do some different insertion of the content into the edit box.", "history": "Added in API level 1", "FullName": "protected void replaceText (CharSequence text)"}, "performFiltering(java.lang.CharSequence,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the filtering pattern"], ["int", "int: the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Instead of filtering on the entire contents of the edit box, this subclass method filters on the range from @B_android#widget#MultiAutoCompleteTextView#Tokenizer#findTokenStart_E@ to @B_android#widget#TextView#getSelectionEnd_E@ if the length of that range meets or exceeds @B_android#widget#AutoCompleteTextView#getThreshold_E@.", "history": "Added in API level 1", "FullName": "protected void performFiltering (CharSequence text, int keyCode)"}, "MultiAutoCompleteTextView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MultiAutoCompleteTextView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setTokenizer(android.widget.MultiAutoCompleteTextView.Tokenizer)": {"Returns": [], "Parameters": [["@B_android#widget#MultiAutoCompleteTextView#Tokenizer_E@", "MultiAutoCompleteTextView.Tokenizer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Tokenizer that will be used to determine the relevant range of the text where the user is typing.", "history": "Added in API level 1", "FullName": "public void setTokenizer (MultiAutoCompleteTextView.Tokenizer t)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@", "@B_android#widget#EditText_E@", "@B_android#widget#AutoCompleteTextView_E@"], "ClassName": "android.widget.MultiAutoCompleteTextView", "ClassDesc": "An editable text view, extending @B_android#widget#AutoCompleteTextView_E@, that can show completion suggestions for the substring of the text where the user is typing instead of necessarily for the entire thing. You must provide a @B_android#widget#MultiAutoCompleteTextView#Tokenizer_E@ to distinguish the various substrings. The following code snippet shows how to create a text view which suggests various countries names while the user is typing:"}