{"Functions": {"discoverPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Initiate peer discovery. A discovery process involves scanning for available Wi-Fi peers for the purpose of establishing a connection. The function call immediately returns after sending a discovery request to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. The discovery remains active until a connection is initiated or a p2p group is formed. Register for @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_PEERS_CHANGED_ACTION_E@ intent to determine when the framework notifies of a change as peers are discovered. Upon receiving a @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_PEERS_CHANGED_ACTION_E@ intent, an application can request for the list of peers using @B_android#net#wifi#p2p#WifiP2pManager#requestPeers_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 14", "FullName": "public void discoverPeers (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "clearServiceRequests(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear all registered service discovery requests. The function call immediately returns after sending a request to clear all service discovery requests to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 16", "FullName": "public void clearServiceRequests (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "removeGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the current p2p group. The function call immediately returns after sending a group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 14", "FullName": "public void removeGroup (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "requestPeers(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.PeerListListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#PeerListListener_E@", "WifiP2pManager.PeerListListener: for callback when peer list is available. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Request the current list of peers. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 14", "FullName": "public void requestPeers (WifiP2pManager.Channel c, WifiP2pManager.PeerListListener listener)"}, "addLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#nsd#WifiP2pServiceInfo_E@", "WifiP2pServiceInfo: is a local service information."], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Register a local service for service discovery. If a local service is registered, the framework automatically responds to a service discovery request from a peer. The function call immediately returns after sending a request to add a local service to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. The service information is set through @B_android#net#wifi#p2p#nsd#WifiP2pServiceInfo_E@. or its subclass calls @B_android#net#wifi#p2p#nsd#WifiP2pUpnpServiceInfo#newInstance_E@ or @B_android#net#wifi#p2p#nsd#WifiP2pDnsSdServiceInfo#newInstance_E@ for a Upnp or Bonjour service respectively The service information can be cleared with calls to @B_android#net#wifi#p2p#WifiP2pManager#removeLocalService_E@ or @B_android#net#wifi#p2p#WifiP2pManager#clearLocalServices_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 16", "FullName": "public void addLocalService (WifiP2pManager.Channel c, WifiP2pServiceInfo servInfo, WifiP2pManager.ActionListener listener)"}, "setUpnpServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.UpnpServiceResponseListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#UpnpServiceResponseListener_E@", "WifiP2pManager.UpnpServiceResponseListener: for callbacks on receiving service discovery response."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked on receiving upnp service discovery response. see @B_android#net#wifi#p2p#WifiP2pManager#discoverServices_E@ for the detail.", "history": "Added in API level 16", "FullName": "public void setUpnpServiceResponseListener (WifiP2pManager.Channel c, WifiP2pManager.UpnpServiceResponseListener listener)"}, "requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ConnectionInfoListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ConnectionInfoListener_E@", "WifiP2pManager.ConnectionInfoListener: for callback when connection info is available. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request device connection info.", "history": "Added in API level 14", "FullName": "public void requestConnectionInfo (WifiP2pManager.Channel c, WifiP2pManager.ConnectionInfoListener listener)"}, "createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Create a p2p group with the current device as the group owner. This essentially creates an access point that can accept connections from legacy clients as well as other p2p devices. The function call immediately returns after sending a group creation request to the framework. The application is notified of a success or failure to initiate group creation through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. Application can request for the group details with @B_android#net#wifi#p2p#WifiP2pManager#requestGroupInfo_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 14", "FullName": "public void createGroup (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "requestP2pState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.P2pStateListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@. This value must never be null."], ["@B_android#net#wifi#p2p#WifiP2pManager#P2pStateListener_E@", "WifiP2pManager.P2pStateListener: for callback when p2p state is available.. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request p2p enabled state. This state indicates whether Wi-Fi p2p is enabled or disabled. The valid value is one of @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_STATE_DISABLED_E@ or @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_STATE_ENABLED_E@. The state is returned using the @B_android#net#wifi#p2p#WifiP2pManager#P2pStateListener_E@ listener. This state is also included in the @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_STATE_CHANGED_ACTION_E@ broadcast event with extra @B_android#net#wifi#p2p#WifiP2pManager#EXTRA_WIFI_STATE_E@.", "history": "Added in API level 29", "FullName": "public void requestP2pState (WifiP2pManager.Channel c, WifiP2pManager.P2pStateListener listener)"}, "discoverServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Initiate service discovery. A discovery process involves scanning for requested services for the purpose of establishing a connection to a peer that supports an available service. The function call immediately returns after sending a request to start service discovery to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. The services to be discovered are specified with calls to @B_android#net#wifi#p2p#WifiP2pManager#addServiceRequest_E@. The application is notified of the response against the service discovery request through listener callbacks registered by @B_android#net#wifi#p2p#WifiP2pManager#setServiceResponseListener_E@ or @B_android#net#wifi#p2p#WifiP2pManager#setDnsSdResponseListeners_E@, or @B_android#net#wifi#p2p#WifiP2pManager#setUpnpServiceResponseListener_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 16", "FullName": "public void discoverServices (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "createGroup(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@. This value must never be null."], ["@B_android#net#wifi#p2p#WifiP2pConfig_E@", "WifiP2pConfig: the configuration of a p2p group. This value may be null."], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Create a p2p group with the current device as the group owner. This essentially creates an access point that can accept connections from legacy clients as well as other p2p devices. An app should use @B_android#net#wifi#p2p#WifiP2pConfig#Builder_E@ to build the configuration for a group. The function call immediately returns after sending a group creation request to the framework. The application is notified of a success or failure to initiate group creation through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. Application can request for the group details with @B_android#net#wifi#p2p#WifiP2pManager#requestGroupInfo_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 29", "FullName": "public void createGroup (WifiP2pManager.Channel c, WifiP2pConfig config, WifiP2pManager.ActionListener listener)"}, "requestDeviceInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DeviceInfoListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@. This value must never be null."], ["@B_android#net#wifi#p2p#WifiP2pManager#DeviceInfoListener_E@", "WifiP2pManager.DeviceInfoListener: for callback when network info is available. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Request Device Info This method provides the device info in the form of a @B_android#net#wifi#p2p#WifiP2pDevice_E@. Valid @B_android#net#wifi#p2p#WifiP2pDevice_E@ is returned when p2p is enabled. To get information notifications on P2P getting enabled refers @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_STATE_ENABLED_E@. This @B_android#net#wifi#p2p#WifiP2pDevice_E@ is returned using the @B_android#net#wifi#p2p#WifiP2pManager#DeviceInfoListener_E@ listener. @B_android#net#wifi#p2p#WifiP2pDevice#deviceAddress_E@ is only available if the caller holds the android.Manifest.permission#LOCAL_MAC_ADDRESS permission, and holds the anonymized MAC address (02:00:00:00:00:00) otherwise. This information is also included in the @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_THIS_DEVICE_CHANGED_ACTION_E@ broadcast event with extra @B_android#net#wifi#p2p#WifiP2pManager#EXTRA_WIFI_P2P_DEVICE_E@. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 29", "FullName": "public void requestDeviceInfo (WifiP2pManager.Channel c, WifiP2pManager.DeviceInfoListener listener)"}, "setServiceResponseListener(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ServiceResponseListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ServiceResponseListener_E@", "WifiP2pManager.ServiceResponseListener: for callbacks on receiving service discovery response."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked on receiving service discovery response. Used only for vendor specific protocol right now. For Bonjour or Upnp, use @B_android#net#wifi#p2p#WifiP2pManager#setDnsSdResponseListeners_E@ or @B_android#net#wifi#p2p#WifiP2pManager#setUpnpServiceResponseListener_E@ respectively. see @B_android#net#wifi#p2p#WifiP2pManager#discoverServices_E@ for the detail.", "history": "Added in API level 16", "FullName": "public void setServiceResponseListener (WifiP2pManager.Channel c, WifiP2pManager.ServiceResponseListener listener)"}, "removeServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#nsd#WifiP2pServiceRequest_E@", "WifiP2pServiceRequest: is the service discovery request."], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a specified service discovery request added with @B_android#net#wifi#p2p#WifiP2pManager#addServiceRequest_E@ The function call immediately returns after sending a request to remove service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 16", "FullName": "public void removeServiceRequest (WifiP2pManager.Channel c, WifiP2pServiceRequest req, WifiP2pManager.ActionListener listener)"}, "connect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pConfig,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pConfig_E@", "WifiP2pConfig: options as described in @B_android#net#wifi#p2p#WifiP2pConfig_E@ class"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Start a p2p connection to a device with the specified configuration. The function call immediately returns after sending a connection request to the framework. The application is notified of a success or failure to initiate connect through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. Register for @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_CONNECTION_CHANGED_ACTION_E@ intent to determine when the framework notifies of a change in connectivity. If the current device is not part of a p2p group, a connect request initiates a group negotiation with the peer. If the current device is part of an existing p2p group or has created a p2p group with @B_android#net#wifi#p2p#WifiP2pManager#createGroup_E@, an invitation to join the group is sent to the peer device. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 14", "FullName": "public void connect (WifiP2pManager.Channel c, WifiP2pConfig config, WifiP2pManager.ActionListener listener)"}, "requestGroupInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.GroupInfoListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#GroupInfoListener_E@", "WifiP2pManager.GroupInfoListener: for callback when group info is available. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Request p2p group info. Requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@", "history": "Added in API level 14", "FullName": "public void requestGroupInfo (WifiP2pManager.Channel c, WifiP2pManager.GroupInfoListener listener)"}, "stopPeerDiscovery(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop an ongoing peer discovery The function call immediately returns after sending a stop request to the framework. The application is notified of a success or failure to initiate stop through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 16", "FullName": "public void stopPeerDiscovery (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "requestDiscoveryState(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DiscoveryStateListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@. This value must never be null."], ["@B_android#net#wifi#p2p#WifiP2pManager#DiscoveryStateListener_E@", "WifiP2pManager.DiscoveryStateListener: for callback when discovery state is available.. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request p2p discovery state. This state indicates whether p2p discovery has started or stopped. The valid value is one of @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_DISCOVERY_STARTED_E@ or @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_DISCOVERY_STOPPED_E@. The state is returned using the @B_android#net#wifi#p2p#WifiP2pManager#DiscoveryStateListener_E@ listener. This state is also included in the @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_DISCOVERY_CHANGED_ACTION_E@ broadcast event with extra @B_android#net#wifi#p2p#WifiP2pManager#EXTRA_DISCOVERY_STATE_E@.", "history": "Added in API level 29", "FullName": "public void requestDiscoveryState (WifiP2pManager.Channel c, WifiP2pManager.DiscoveryStateListener listener)"}, "requestNetworkInfo(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.NetworkInfoListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@. This value must never be null."], ["@B_android#net#wifi#p2p#WifiP2pManager#NetworkInfoListener_E@", "WifiP2pManager.NetworkInfoListener: for callback when network info is available.. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request network info. This method provides the network info in the form of a @B_android#net#NetworkInfo_E@. @B_android#net#NetworkInfo#isAvailable_E@ indicates the p2p availability and @B_android#net#NetworkInfo#getDetailedState_E@ reports the current fine-grained state of the network. This @B_android#net#NetworkInfo_E@ is returned using the @B_android#net#wifi#p2p#WifiP2pManager#NetworkInfoListener_E@ listener. This information is also included in the @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_CONNECTION_CHANGED_ACTION_E@ broadcast event with extra @B_android#net#wifi#p2p#WifiP2pManager#EXTRA_NETWORK_INFO_E@.", "history": "Added in API level 29", "FullName": "public void requestNetworkInfo (WifiP2pManager.Channel c, WifiP2pManager.NetworkInfoListener listener)"}, "removeLocalService(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceInfo,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#nsd#WifiP2pServiceInfo_E@", "WifiP2pServiceInfo: is the local service information."], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a registered local service added with @B_android#net#wifi#p2p#WifiP2pManager#addLocalService_E@ The function call immediately returns after sending a request to remove a local service to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 16", "FullName": "public void removeLocalService (WifiP2pManager.Channel c, WifiP2pServiceInfo servInfo, WifiP2pManager.ActionListener listener)"}, "initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager.ChannelListener)": {"Returns": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "Channel instance that is necessary for performing any further p2p operations"]], "Parameters": [["@B_android#content#Context_E@", "Context: is the context of the source"], ["@B_android#os#Looper_E@", "Looper: is the Looper on which the callbacks are receivied"], ["@B_android#net#wifi#p2p#WifiP2pManager#ChannelListener_E@", "WifiP2pManager.ChannelListener: for callback at loss of framework communication. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the application with the Wi-Fi framework. This function must be the first to be called before any p2p operations are performed.", "history": "Added in API level 14", "FullName": "public WifiP2pManager.Channel initialize (Context srcContext, Looper srcLooper, WifiP2pManager.ChannelListener listener)"}, "cancelConnect(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel any ongoing p2p group negotiation The function call immediately returns after sending a connection cancellation request to the framework. The application is notified of a success or failure to initiate cancellation through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 14", "FullName": "public void cancelConnect (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "clearLocalServices(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear all registered local services of service discovery. The function call immediately returns after sending a request to clear all local services to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@.", "history": "Added in API level 16", "FullName": "public void clearLocalServices (WifiP2pManager.Channel c, WifiP2pManager.ActionListener listener)"}, "setDnsSdResponseListeners(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.WifiP2pManager.DnsSdServiceResponseListener,android.net.wifi.p2p.WifiP2pManager.DnsSdTxtRecordListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#DnsSdServiceResponseListener_E@", "WifiP2pManager.DnsSdServiceResponseListener: is for listening to a Bonjour service response"], ["@B_android#net#wifi#p2p#WifiP2pManager#DnsSdTxtRecordListener_E@", "WifiP2pManager.DnsSdTxtRecordListener: is for listening to a Bonjour TXT record response"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked on receiving Bonjour service discovery response. see @B_android#net#wifi#p2p#WifiP2pManager#discoverServices_E@ for the detail.", "history": "Added in API level 16", "FullName": "public void setDnsSdResponseListeners (WifiP2pManager.Channel c, WifiP2pManager.DnsSdServiceResponseListener servListener, WifiP2pManager.DnsSdTxtRecordListener txtListener)"}, "addServiceRequest(android.net.wifi.p2p.WifiP2pManager.Channel,android.net.wifi.p2p.nsd.WifiP2pServiceRequest,android.net.wifi.p2p.WifiP2pManager.ActionListener)": {"Returns": [], "Parameters": [["@B_android#net#wifi#p2p#WifiP2pManager#Channel_E@", "WifiP2pManager.Channel: is the channel created at @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@"], ["@B_android#net#wifi#p2p#nsd#WifiP2pServiceRequest_E@", "WifiP2pServiceRequest: is the service discovery request."], ["@B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@", "WifiP2pManager.ActionListener: for callbacks on success or failure. Can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a service discovery request. The function call immediately returns after sending a request to add service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. After service discovery request is added, you can initiate service discovery by @B_android#net#wifi#p2p#WifiP2pManager#discoverServices_E@. The added service requests can be cleared with calls to @B_android#net#wifi#p2p#WifiP2pManager#removeServiceRequest_E@ or @B_android#net#wifi#p2p#WifiP2pManager#clearServiceRequests_E@.", "history": "Added in API level 16", "FullName": "public void addServiceRequest (WifiP2pManager.Channel c, WifiP2pServiceRequest req, WifiP2pManager.ActionListener listener)"}}, "Inheritance": [], "ClassName": "android.net.wifi.p2p.WifiP2pManager", "ClassDesc": "This class provides the API for managing Wi-Fi peer-to-peer connectivity. This lets an application discover available peers, setup connection to peers and query for the list of peers. When a p2p connection is formed over wifi, the device continues to maintain the uplink connection over mobile or any other available network for internet connectivity on the device. The API is asynchronous and responses to requests from an application are on listener callbacks provided by the application. The application needs to do an initialization with @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@ before doing any p2p operation. Most application calls need a @B_android#net#wifi#p2p#WifiP2pManager#ActionListener_E@ instance for receiving callbacks @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onSuccess_E@ or @B_android#net#wifi#p2p#WifiP2pManager#ActionListener#onFailure_E@. Action callbacks indicate whether the initiation of the action was a success or a failure. Upon failure, the reason of failure can be one of @B_android#net#wifi#p2p#WifiP2pManager#ERROR_E@, @B_android#net#wifi#p2p#WifiP2pManager#P2P_UNSUPPORTED_E@ or @B_android#net#wifi#p2p#WifiP2pManager#BUSY_E@. An application can initiate discovery of peers with @B_android#net#wifi#p2p#WifiP2pManager#discoverPeers_E@. An initiated discovery request from an application stays active until the device starts connecting to a peer ,forms a p2p group or there is an explicit @B_android#net#wifi#p2p#WifiP2pManager#stopPeerDiscovery_E@. Applications can listen to @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_DISCOVERY_CHANGED_ACTION_E@ to know if a peer-to-peer discovery is running or stopped. Additionally, @B_android#net#wifi#p2p#WifiP2pManager#WIFI_P2P_PEERS_CHANGED_ACTION_E@ indicates if the peer list has changed. When an application needs to fetch the current list of peers, it can request the list of peers with @B_android#net#wifi#p2p#WifiP2pManager#requestPeers_E@. When the peer list is available @B_android#net#wifi#p2p#WifiP2pManager#PeerListListener#onPeersAvailable_E@ is called with the device list. An application can initiate a connection request to a peer through @B_android#net#wifi#p2p#WifiP2pManager#connect_E@. See @B_android#net#wifi#p2p#WifiP2pConfig_E@ for details on setting up the configuration. For communication with legacy Wi-Fi devices that do not support p2p, an app can create a group using @B_android#net#wifi#p2p#WifiP2pManager#createGroup_E@ which creates an access point whose details can be fetched with @B_android#net#wifi#p2p#WifiP2pManager#requestGroupInfo_E@. After a successful group formation through @B_android#net#wifi#p2p#WifiP2pManager#createGroup_E@ or through @B_android#net#wifi#p2p#WifiP2pManager#connect_E@, use @B_android#net#wifi#p2p#WifiP2pManager#requestConnectionInfo_E@ to fetch the connection details. The connection info @B_android#net#wifi#p2p#WifiP2pInfo_E@ contains the address of the group owner @B_android#net#wifi#p2p#WifiP2pInfo#groupOwnerAddress_E@ and a flag @B_android#net#wifi#p2p#WifiP2pInfo#isGroupOwner_E@ to indicate if the current device is a p2p group owner. A p2p client can thus communicate with the p2p group owner through a socket connection. If the current device is the p2p group owner, @B_android#net#wifi#p2p#WifiP2pInfo#groupOwnerAddress_E@ is anonymized unless the caller holds the android.Manifest.permission#LOCAL_MAC_ADDRESS permission. With peer discovery using @B_android#net#wifi#p2p#WifiP2pManager#discoverPeers_E@, an application discovers the neighboring peers, but has no good way to figure out which peer to establish a connection with. For example, if a game application is interested in finding all the neighboring peers that are also running the same game, it has no way to find out until after the connection is setup. Pre-association service discovery is meant to address this issue of filtering the peers based on the running services. With pre-association service discovery, an application can advertise a service for a application on a peer device prior to a connection setup between the devices. Currently, DNS based service discovery (Bonjour) and Upnp are the higher layer protocols supported. Get Bonjour resources at dns-sd.org and Upnp resources at upnp.org As an example, a video application can discover a Upnp capable media renderer prior to setting up a Wi-fi p2p connection with the device. An application can advertise a Upnp or a Bonjour service with a call to @B_android#net#wifi#p2p#WifiP2pManager#addLocalService_E@. After a local service is added, the framework automatically responds to a peer application discovering the service prior to establishing a p2p connection. A call to @B_android#net#wifi#p2p#WifiP2pManager#removeLocalService_E@ removes a local service and @B_android#net#wifi#p2p#WifiP2pManager#clearLocalServices_E@ can be used to clear all local services. An application that is looking for peer devices that support certain services can do so with a call to @B_android#net#wifi#p2p#WifiP2pManager#discoverServices_E@. Prior to initiating the discovery, application can add service discovery request with a call to @B_android#net#wifi#p2p#WifiP2pManager#addServiceRequest_E@, remove a service discovery request with a call to @B_android#net#wifi#p2p#WifiP2pManager#removeServiceRequest_E@ or clear all requests with a call to @B_android#net#wifi#p2p#WifiP2pManager#clearServiceRequests_E@. When no service requests remain, a previously running service discovery will stop. The application is notified of a result of service discovery request through listener callbacks set through @B_android#net#wifi#p2p#WifiP2pManager#setDnsSdResponseListeners_E@ for Bonjour or @B_android#net#wifi#p2p#WifiP2pManager#setUpnpServiceResponseListener_E@ for Upnp. @B_android#net#wifi#p2p#WifiP2pManager#initialize_E@ requires the permissions @B_android#Manifest#permission#ACCESS_WIFI_STATE_E@ and @B_android#Manifest#permission#CHANGE_WIFI_STATE_E@ to perform any further peer-to-peer operations."}