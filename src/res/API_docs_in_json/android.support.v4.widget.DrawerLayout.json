{"Functions": {"requestDisallowInterceptTouchEvent(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the child does not want the parent to intercept touch events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child does not want this parent and its ancestors to intercept touch events with @B_android#view#ViewGroup#onInterceptTouchEvent_E@. This parent should pass this call onto its parents. This parent must obey this request for the duration of the touch (that is, only clear the flag after this parent has received an up or a cancel.", "history": "", "FullName": "void requestDisallowInterceptTouchEvent (boolean disallowIntercept)"}, "setChildInsets(java.lang.Object, boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void setChildInsets (Object insets, boolean drawStatusBar)"}, "isDrawerVisible(android.view.View)": {"Returns": [["boolean", "true if the given drawer is visible on-screen"]], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to check"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#DrawerLayout#isDrawerOpen_E@"], "Permissions": [], "Description": "Check if a given drawer view is currently visible on-screen. The drawer may be only peeking onto the screen, fully extended, or anywhere inbetween.", "history": "added in version 22.0.0", "FullName": "boolean isDrawerVisible (View drawer)"}, "isDrawerOpen(int)": {"Returns": [["boolean", "true if the given drawer view is in an open state"]], "Parameters": [["int", "int: Gravity of the drawer to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the given drawer view is currently in an open state. To be considered \"open\" the drawer must have settled into its fully visible state. If there is no drawer with the given gravity this method will return false.", "history": "added in version 22.0.0", "FullName": "boolean isDrawerOpen (int drawerGravity)"}, "isDrawerOpen(android.view.View)": {"Returns": [["boolean", "true if the given drawer view is in an open state"]], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to check"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#DrawerLayout#isDrawerVisible_E@"], "Permissions": [], "Description": "Check if the given drawer view is currently in an open state. To be considered \"open\" the drawer must have settled into its fully visible state. To check for partial visibility use @B_android#support#v4#widget#DrawerLayout#isDrawerVisible_E@.", "history": "added in version 22.0.0", "FullName": "boolean isDrawerOpen (View drawer)"}, "isDrawerVisible(int)": {"Returns": [["boolean", "true if the given drawer is visible on-screen"]], "Parameters": [["int", "int: Gravity of the drawer to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if a given drawer view is currently visible on-screen. The drawer may be only peeking onto the screen, fully extended, or anywhere in between. If there is no drawer with the given gravity this method will return false.", "history": "added in version 22.0.0", "FullName": "boolean isDrawerVisible (int drawerGravity)"}, "DrawerLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "DrawerLayout (Context context)"}, "setDrawerShadow(int, int)": {"Returns": [], "Parameters": [["int", "int: Resource id of a shadow drawable to use at the edge of a drawer"], ["int", "int: Which drawer the shadow should apply to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a simple drawable used for the left or right shadow. The drawable provided must have a nonzero intrinsic width. For API 21 and above, an elevation will be set on the drawer instead of using the provided shadow drawable. Note that for better support for both left-to-right and right-to-left layout directions, a drawable for RTL layout (in additional to the one in LTR layout) can be defined with a resource qualifier \"ldrtl\" for API 17 and above with the gravity @B_android#support#v4#view#GravityCompat#START_E@. Alternatively, for API 23 and above, the drawable can auto-mirrored such that the drawable will be mirrored in RTL layout.", "history": "added in version 22.0.0", "FullName": "void setDrawerShadow (int resId, int gravity)"}, "getDrawerLockMode(int)": {"Returns": [["int", "one of @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_UNLOCKED_E@, @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_CLOSED_E@ or @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_OPEN_E@."]], "Parameters": [["int", "int: Gravity of the drawer to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check the lock mode of the drawer with the given gravity.", "history": "added in version 22.0.0", "FullName": "int getDrawerLockMode (int edgeGravity)"}, "setStatusBarBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int: Color to use as a background drawable to draw behind the status bar in 0xAARRGGBB format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a drawable to draw in the insets area for the status bar. Note that this will only be activated if this DrawerLayout fitsSystemWindows.", "history": "added in version 22.0.0", "FullName": "void setStatusBarBackgroundColor (int color)"}, "closeDrawer(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to close"], ["boolean", "boolean: Whether closing of the drawer should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the specified drawer view.", "history": "added in version 24.0.0", "FullName": "void closeDrawer (View drawerView, boolean animate)"}, "setDrawerLockMode(int)": {"Returns": [], "Parameters": [["int", "int: The new lock mode for the given drawer. One of @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_UNLOCKED_E@, @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_CLOSED_E@ or @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_OPEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable or disable interaction with all drawers. This allows the application to restrict the user's ability to open or close any drawer within this layout. DrawerLayout will still respond to calls to @B_android#support#v4#widget#DrawerLayout#openDrawer_E@, @B_android#support#v4#widget#DrawerLayout#closeDrawer_E@ and friends if a drawer is locked. Locking drawers open or closed will implicitly open or close any drawers as appropriate.", "history": "added in version 22.0.0", "FullName": "void setDrawerLockMode (int lockMode)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "", "FullName": "void computeScroll ()"}, "setDrawerLockMode(int, int)": {"Returns": [], "Parameters": [["int", "int: The new lock mode for the given drawer. One of @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_UNLOCKED_E@, @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_CLOSED_E@ or @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_OPEN_E@."], ["int", "int: Gravity.LEFT, RIGHT, START or END. Expresses which drawer to change the mode for."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#DrawerLayout_E@"], "Permissions": [], "Description": "Enable or disable interaction with the given drawer. This allows the application to restrict the user's ability to open or close the given drawer. DrawerLayout will still respond to calls to @B_android#support#v4#widget#DrawerLayout#openDrawer_E@, @B_android#support#v4#widget#DrawerLayout#closeDrawer_E@ and friends if a drawer is locked. Locking a drawer open or closed will implicitly open or close that drawer as appropriate.", "history": "added in version 22.0.0", "FullName": "void setDrawerLockMode (int lockMode, int edgeGravity)"}, "setScrimColor(int)": {"Returns": [], "Parameters": [["int", "int: Color to use in 0xAARRGGBB format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a color to use for the scrim that obscures primary content while a drawer is open.", "history": "added in version 22.0.0", "FullName": "void setScrimColor (int color)"}, "openDrawer(int, boolean)": {"Returns": [], "Parameters": [["int", "int: Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right. GravityCompat.START or GravityCompat.END may also be used."], ["boolean", "boolean: Whether opening of the drawer should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the specified drawer.", "history": "added in version 24.0.0", "FullName": "void openDrawer (int gravity, boolean animate)"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly.", "history": "", "FullName": "void requestLayout ()"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "ViewGroup.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getStatusBarBackgroundDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The status bar background drawable, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the drawable used to draw in the insets area for the status bar.", "history": "added in version 22.0.0", "FullName": "Drawable getStatusBarBackgroundDrawable ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 22.0.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "getDrawerElevation()": {"Returns": [["float", "The base depth position of the view, in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The base elevation of the drawer(s) relative to the parent, in pixels. Note that the elevation change is only supported in API 21 and above. For unsupported API levels, 0 will be returned as the elevation.", "history": "added in version 23.0.0", "FullName": "float getDrawerElevation ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "openDrawer(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to open"], ["boolean", "boolean: Whether opening of the drawer should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the specified drawer view.", "history": "added in version 24.0.0", "FullName": "void openDrawer (View drawerView, boolean animate)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "getDrawerLockMode(android.view.View)": {"Returns": [["int", "one of @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_UNLOCKED_E@, @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_CLOSED_E@ or @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_OPEN_E@."]], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to check lock mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check the lock mode of the given drawer view.", "history": "added in version 22.0.0", "FullName": "int getDrawerLockMode (View drawerView)"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "", "FullName": "void onRtlPropertiesChanged (int layoutDirection)"}, "closeDrawer(int)": {"Returns": [], "Parameters": [["int", "int: Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right. GravityCompat.START or GravityCompat.END may also be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the specified drawer by animating it out of view.", "history": "added in version 22.0.0", "FullName": "void closeDrawer (int gravity)"}, "setStatusBarBackground(int)": {"Returns": [], "Parameters": [["int", "int: Resource id of a background drawable to draw behind the status bar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a drawable to draw in the insets area for the status bar. Note that this will only be activated if this DrawerLayout fitsSystemWindows.", "history": "added in version 22.0.0", "FullName": "void setStatusBarBackground (int resId)"}, "closeDrawer(int, boolean)": {"Returns": [], "Parameters": [["int", "int: Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right. GravityCompat.START or GravityCompat.END may also be used."], ["boolean", "boolean: Whether closing of the drawer should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the specified drawer.", "history": "added in version 24.0.0", "FullName": "void closeDrawer (int gravity, boolean animate)"}, "getDrawerTitle(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "The title of the drawer, or null if none set."]], "Parameters": [["int", "int: Gravity.LEFT, RIGHT, START or END. Expresses which drawer to return the title for."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#DrawerLayout#setDrawerTitle_E@"], "Permissions": [], "Description": "Returns the title of the drawer with the given gravity.", "history": "added in version 22.0.0", "FullName": "CharSequence getDrawerTitle (int edgeGravity)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#v4#widget#DrawerLayout#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "", "FullName": "boolean onKeyDown (int keyCode, KeyEvent event)"}, "openDrawer(int)": {"Returns": [], "Parameters": [["int", "int: Gravity.LEFT to move the left drawer or Gravity.RIGHT for the right. GravityCompat.START or GravityCompat.END may also be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the specified drawer by animating it out of view.", "history": "added in version 22.0.0", "FullName": "void openDrawer (int gravity)"}, "openDrawer(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to open"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the specified drawer view by animating it into view.", "history": "added in version 22.0.0", "FullName": "void openDrawer (View drawerView)"}, "closeDrawers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close all currently open drawer views by animating them out of view.", "history": "added in version 22.0.0", "FullName": "void closeDrawers ()"}, "setDrawerTitle(int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["int", "int: Gravity.LEFT, RIGHT, START or END. Expresses which drawer to set the title for."], ["@B_java#lang#CharSequence_E@", "CharSequence: The title for the drawer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the title of the drawer with the given gravity. When accessibility is turned on, this is the title that will be used to identify the drawer to the active accessibility service.", "history": "added in version 22.0.0", "FullName": "void setDrawerTitle (int edgeGravity, CharSequence title)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "setDrawerElevation(float)": {"Returns": [], "Parameters": [["float", "float: The base depth position of the view, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the base elevation of the drawer(s) relative to the parent, in pixels. Note that the elevation change is only supported in API 21 and above.", "history": "added in version 23.0.0", "FullName": "void setDrawerElevation (float elevation)"}, "closeDrawer(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Drawer view to close"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the specified drawer view by animating it into view.", "history": "added in version 22.0.0", "FullName": "void closeDrawer (View drawerView)"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "", "FullName": "ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "", "FullName": "boolean onKeyUp (int keyCode, KeyEvent event)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "added in version 22.0.0", "FullName": "void onDraw (Canvas c)"}, "setDrawerLockMode(int, android.view.View)": {"Returns": [], "Parameters": [["int", "int: The new lock mode for the given drawer. One of @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_UNLOCKED_E@, @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_CLOSED_E@ or @B_android#support#v4#widget#DrawerLayout#LOCK_MODE_LOCKED_OPEN_E@."], ["@B_android#view#View_E@", "View: The drawer view to change the lock mode for"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#DrawerLayout_E@"], "Permissions": [], "Description": "Enable or disable interaction with the given drawer. This allows the application to restrict the user's ability to open or close the given drawer. DrawerLayout will still respond to calls to @B_android#support#v4#widget#DrawerLayout#openDrawer_E@, @B_android#support#v4#widget#DrawerLayout#closeDrawer_E@ and friends if a drawer is locked. Locking a drawer open or closed will implicitly open or close that drawer as appropriate.", "history": "added in version 22.0.0", "FullName": "void setDrawerLockMode (int lockMode, View drawerView)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v4.widget.DrawerLayout", "ClassDesc": "DrawerLayout acts as a top-level container for window content that allows for interactive \"drawer\" views to be pulled out from one or both vertical edges of the window. Drawer positioning and layout is controlled using the android:layout_gravity attribute on child views corresponding to which side of the view you want the drawer to emerge from: left or right (or start/end on platform versions that support layout direction.) Note that you can only have one drawer view for each vertical edge of the window. If your layout configures more than one drawer view per vertical edge of the window, an exception will be thrown at runtime. To use a DrawerLayout, position your primary content view as the first child with width and height of match_parent and no layout_gravity>. Add drawers as child views after the main content view and set the layout_gravity appropriately. Drawers commonly use match_parent for height with a fixed width. @B_android#support#v4#widget#DrawerLayout#DrawerListener_E@ can be used to monitor the state and motion of drawer views. Avoid performing expensive operations such as layout during animation as it can cause stuttering; try to perform expensive operations during the @B_android#support#v4#widget#DrawerLayout#STATE_IDLE_E@ state. @B_android#support#v4#widget#DrawerLayout#SimpleDrawerListener_E@ offers default/no-op implementations of each callback method. As per the For more information about how to use DrawerLayout, read"}