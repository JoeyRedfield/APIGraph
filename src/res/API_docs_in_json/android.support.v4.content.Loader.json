{"Functions": {"deliverResult(D)": {"Returns": [], "Parameters": [["D", "D: the result of the load"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends the result of the load to the registered listener. Should only be called by subclasses. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void deliverResult (D data)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when @B_android#support#v4#content#Loader#ForceLoadContentObserver_E@ detects a change. The default implementation checks to see if the loader is currently started; if so, it simply calls @B_android#support#v4#content#Loader#forceLoad_E@; otherwise, it sets a flag so that @B_android#support#v4#content#Loader#takeContentChanged_E@ returns true. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void onContentChanged ()"}, "deliverCancellation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs the registered @B_android#support#v4#content#Loader#OnLoadCanceledListener_E@ that the load has been canceled. Should only be called by subclasses. Must be called from the process's main thread.", "history": "added in version 23.0.0", "FullName": "void deliverCancellation ()"}, "cancelLoad()": {"Returns": [["boolean", "Returns false if the task could not be canceled, typically because it has already completed normally, or because @B_android#support#v4#content#Loader#startLoading_E@ hasn't been called; returns true otherwise. When true is returned, the task is still running and the @B_android#support#v4#content#Loader#OnLoadCanceledListener_E@ will be called when the task completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to cancel the current load task. Must be called on the main thread of the process. Cancellation is not an immediate operation, since the load is performed in a background thread. If there is currently a load in progress, this method requests that the load be canceled, and notes this is the case; once the background thread has completed its work its remaining state will be cleared. If another load request comes in during this time, it will be held until the canceled load is complete.", "history": "added in version 22.0.0", "FullName": "boolean cancelLoad ()"}, "stopLoading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function will normally be called for you automatically by @B_android#support#v4#app#LoaderManager_E@ when the associated fragment/activity is being stopped. When using a Loader with @B_android#support#v4#app#LoaderManager_E@, you must not call this method yourself, or you will conflict with its management of the Loader. Stops delivery of updates until the next time @B_android#support#v4#content#Loader#startLoading_E@ is called. Implementations should not invalidate their data at this point -- clients are still free to use the last data the loader reported. They will, however, typically stop reporting new data if the data changes; they can still monitor for changes, but must not report them to the client until and if @B_android#support#v4#content#Loader#startLoading_E@ is later called. This updates the Loader's internal state so that @B_android#support#v4#content#Loader#isStarted_E@ will return the correct value, and then calls the implementation's @B_android#support#v4#content#Loader#onStopLoading_E@. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void stopLoading ()"}, "isAbandoned()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this loader has been abandoned. In this state, the loader must not report any new data, and must keep its last reported data valid until it is finally reset.", "history": "added in version 22.0.0", "FullName": "boolean isAbandoned ()"}, "forceLoad()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force an asynchronous load. Unlike @B_android#support#v4#content#Loader#startLoading_E@ this will ignore a previously loaded data set and load a new one. This simply calls through to the implementation's @B_android#support#v4#content#Loader#onForceLoad_E@. You generally should only call this when the loader is started -- that is, @B_android#support#v4#content#Loader#isStarted_E@ returns true. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void forceLoad ()"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "an application context retrieved from the Context passed to the constructor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "Context getContext ()"}, "getId()": {"Returns": [["int", "the ID of this loader"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getId ()"}, "commitContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Commit that you have actually fully processed a content change that was returned by @B_android#support#v4#content#Loader#takeContentChanged_E@. This is for use with @B_android#support#v4#content#Loader#rollbackContentChanged_E@ to handle situations where a load is cancelled. Call this when you have completely processed a load without it being cancelled.", "history": "added in version 22.0.0", "FullName": "void commitContentChanged ()"}, "onAbandon()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses implement this to take care of being abandoned. This is an optional intermediate state prior to @B_android#support#v4#content#Loader#onReset_E@ -- it means that the client is no longer interested in any new data from the loader, so the loader must not report any further updates. However, the loader must keep its last reported data valid until the final @B_android#support#v4#content#Loader#onReset_E@ happens. You can retrieve the current abandoned state with @B_android#support#v4#content#Loader#isAbandoned_E@.", "history": "added in version 22.0.0", "FullName": "void onAbandon ()"}, "isStarted()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this load has been started. That is, its @B_android#support#v4#content#Loader#startLoading_E@ has been called and no calls to @B_android#support#v4#content#Loader#stopLoading_E@ or @B_android#support#v4#content#Loader#reset_E@ have yet been made.", "history": "added in version 22.0.0", "FullName": "boolean isStarted ()"}, "dataToString(D)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["D", "D no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For debugging, converts an instance of the Loader's data class to a string that can be printed. Must handle a null data.", "history": "added in version 22.0.0", "FullName": "String dataToString (D data)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function will normally be called for you automatically by @B_android#support#v4#app#LoaderManager_E@ when destroying a Loader. When using a Loader with @B_android#support#v4#app#LoaderManager_E@, you must not call this method yourself, or you will conflict with its management of the Loader. Resets the state of the Loader. The Loader should at this point free all of its resources, since it may never be called again; however, its @B_android#support#v4#content#Loader#startLoading_E@ may later be called at which point it must be able to start running again. This updates the Loader's internal state so that @B_android#support#v4#content#Loader#isStarted_E@ and @B_android#support#v4#content#Loader#isReset_E@ will return the correct values, and then calls the implementation's @B_android#support#v4#content#Loader#onReset_E@. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void reset ()"}, "onReset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of resetting their loader, as per @B_android#support#v4#content#Loader#reset_E@. This is not called by clients directly, but as a result of a call to @B_android#support#v4#content#Loader#reset_E@. This will always be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void onReset ()"}, "rollbackContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that you have abandoned the processing of a content change that was returned by @B_android#support#v4#content#Loader#takeContentChanged_E@ and would like to rollback to the state where there is again a pending content change. This is to handle the case where a data load due to a content change has been canceled before its data was delivered back to the loader.", "history": "added in version 22.0.0", "FullName": "void rollbackContentChanged ()"}, "onStartLoading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of loading their data, as per @B_android#support#v4#content#Loader#startLoading_E@. This is not called by clients directly, but as a result of a call to @B_android#support#v4#content#Loader#startLoading_E@.", "history": "added in version 22.0.0", "FullName": "void onStartLoading ()"}, "onCancelLoad()": {"Returns": [["boolean", "Returns false if the task could not be canceled, typically because it has already completed normally, or because @B_android#support#v4#content#Loader#startLoading_E@ hasn't been called; returns true otherwise. When true is returned, the task is still running and the @B_android#support#v4#content#Loader#OnLoadCanceledListener_E@ will be called when the task completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#support#v4#content#Loader#cancelLoad_E@. This will always be called from the process's main thread.", "history": "added in version 23.0.0", "FullName": "boolean onCancelLoad ()"}, "onStopLoading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of stopping their loader, as per @B_android#support#v4#content#Loader#stopLoading_E@. This is not called by clients directly, but as a result of a call to @B_android#support#v4#content#Loader#stopLoading_E@. This will always be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void onStopLoading ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "isReset()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether this load has been reset. That is, either the loader has not yet been started for the first time, or its @B_android#support#v4#content#Loader#reset_E@ has been called.", "history": "added in version 22.0.0", "FullName": "boolean isReset ()"}, "abandon()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function will normally be called for you automatically by @B_android#support#v4#app#LoaderManager_E@ when restarting a Loader. When using a Loader with @B_android#support#v4#app#LoaderManager_E@, you must not call this method yourself, or you will conflict with its management of the Loader. Tell the Loader that it is being abandoned. This is called prior to @B_android#support#v4#content#Loader#reset_E@ to have it retain its current data but not report any new data.", "history": "added in version 22.0.0", "FullName": "void abandon ()"}, "takeContentChanged()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take the current flag indicating whether the loader's content had changed while it was stopped. If it had, true is returned and the flag is cleared.", "history": "added in version 22.0.0", "FullName": "boolean takeContentChanged ()"}, "onForceLoad()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#support#v4#content#Loader#forceLoad_E@. This will always be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void onForceLoad ()"}, "startLoading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function will normally be called for you automatically by @B_android#support#v4#app#LoaderManager_E@ when the associated fragment/activity is being started. When using a Loader with @B_android#support#v4#app#LoaderManager_E@, you must not call this method yourself, or you will conflict with its management of the Loader. Starts an asynchronous load of the Loader's data. When the result is ready the callbacks will be called on the process's main thread. If a previous load has been completed and is still valid the result may be passed to the callbacks immediately. The loader will monitor the source of the data set and may deliver future callbacks if the source changes. Calling @B_android#support#v4#content#Loader#stopLoading_E@ will stop the delivery of callbacks. This updates the Loader's internal state so that @B_android#support#v4#content#Loader#isStarted_E@ and @B_android#support#v4#content#Loader#isReset_E@ will return the correct values, and then calls the implementation's @B_android#support#v4#content#Loader#onStartLoading_E@. Must be called from the process's main thread.", "history": "added in version 22.0.0", "FullName": "void startLoading ()"}, "Loader(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: used to retrieve the application context."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stores away the application context associated with context. Since Loaders can be used across multiple activities it's dangerous to store the context directly; always use @B_android#support#v4#content#Loader#getContext_E@ to retrieve the Loader's Context, don't use the constructor argument directly. The Context returned by @B_android#support#v4#content#Loader#getContext_E@ is safe to use across Activity instances.", "history": "added in version 22.0.0", "FullName": "Loader (Context context)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.content.Loader<D>", "ClassDesc": "Static library support version of the framework's https:##developer#android#com@B_android#content#Loader_E@. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview."}