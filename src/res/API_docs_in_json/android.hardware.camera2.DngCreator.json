{"Functions": {"setThumbnail(android.graphics.Bitmap)": {"Returns": [["@B_android#hardware#camera2#DngCreator_E@", "this @B_android#hardware#camera2#DngCreator#DngCreator_E@ object. This value will never be null."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: a @B_android#graphics#Bitmap_E@ of pixel data. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given thumbnail image has a dimension larger than @B_android#hardware#camera2#DngCreator#MAX_THUMBNAIL_DIMENSION_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Set the thumbnail image. Pixel data will be converted to a Baseline TIFF RGB image, with 8 bits per color channel. The alpha channel will be discarded. Thumbnail images with a dimension larger than @B_android#hardware#camera2#DngCreator#MAX_THUMBNAIL_DIMENSION_E@ will be rejected.", "history": "Added in API level 21", "FullName": "public DngCreator setThumbnail (Bitmap pixels)"}, "DngCreator(android.hardware.camera2.CameraCharacteristics,android.hardware.camera2.CaptureResult)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraCharacteristics_E@", "CameraCharacteristics: an object containing the static @B_android#hardware#camera2#CameraCharacteristics_E@. This value must never be null."], ["@B_android#hardware#camera2#CaptureResult_E@", "CaptureResult: a metadata object to generate tags from. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new DNG object. It is not necessary to call any set methods to write a well-formatted DNG file. DNG metadata tags will be generated from the corresponding parameters in the @B_android#hardware#camera2#CaptureResult_E@ object. For best quality DNG files, it is strongly recommended that lens shading map output is enabled if supported. See @B_android#hardware#camera2#CaptureRequest#STATISTICS_LENS_SHADING_MAP_MODE_E@.", "history": "Added in API level 21", "FullName": "public DngCreator (CameraCharacteristics characteristics, CaptureResult metadata)"}, "writeByteBuffer(java.io.OutputStream,android.util.Size,java.nio.ByteBuffer,long)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an @B_java#io#OutputStream_E@ to write the DNG file to. This value must never be null."], ["@B_android#util#Size_E@", "Size: the @B_android#util#Size_E@ of the image to write, in pixels. This value must never be null."], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: an @B_java#nio#ByteBuffer_E@ of pixel data to write. This value must never be null."], ["long", "long: the offset of the raw image in bytes. This indicates how many bytes will be skipped in the input before any pixel data is read. Value is 0 or greater"]], "Throws": [["@B_java#io#IOException_E@", "if an error was encountered in the input or output stream."], ["@B_java#lang#IllegalStateException_E@", "if not enough metadata information has been set to write a well-formatted DNG file."]], "SeeAlso": [], "Permissions": [], "Description": "Write the @B_android#graphics#ImageFormat#RAW_SENSOR_E@ pixel data to a DNG file with the currently configured metadata. Raw pixel data must have 16 bits per pixel, and the input must contain at least offset + 2 * width * height) bytes. The width and height of the input are taken from the width and height set in the @B_android#hardware#camera2#DngCreator_E@ metadata tags, and will typically be equal to the width and height of @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_E@. Prior to API level 23, this was always the same as @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE_E@. The pixel layout in the input is determined from the reported color filter arrangement (CFA) set in @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_E@. If insufficient metadata is available to write a well-formatted DNG file, an @B_java#lang#IllegalStateException_E@ will be thrown. Any mark or limit set on this @B_java#nio#ByteBuffer_E@ is ignored, and will be cleared by this method.", "history": "Added in API level 21", "FullName": "public void writeByteBuffer (OutputStream dngOutput, Size size, ByteBuffer pixels, long offset)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 21", "FullName": "protected void finalize ()"}, "setThumbnail(android.media.Image)": {"Returns": [["@B_android#hardware#camera2#DngCreator_E@", "this @B_android#hardware#camera2#DngCreator#DngCreator_E@ object. This value will never be null."]], "Parameters": [["@B_android#media#Image_E@", "Image: an @B_android#media#Image_E@ object with the format @B_android#graphics#ImageFormat#YUV_420_888_E@. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given thumbnail image has a dimension larger than @B_android#hardware#camera2#DngCreator#MAX_THUMBNAIL_DIMENSION_E@."]], "SeeAlso": [], "Permissions": [], "Description": "Set the thumbnail image. Pixel data is interpreted as a @B_android#graphics#ImageFormat#YUV_420_888_E@ image. Thumbnail images with a dimension larger than @B_android#hardware#camera2#DngCreator#MAX_THUMBNAIL_DIMENSION_E@ will be rejected.", "history": "Added in API level 21", "FullName": "public DngCreator setThumbnail (Image pixels)"}, "writeInputStream(java.io.OutputStream,android.util.Size,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an @B_java#io#OutputStream_E@ to write the DNG file to. This value must never be null."], ["@B_android#util#Size_E@", "Size: the @B_android#util#Size_E@ of the image to write, in pixels. This value must never be null."], ["@B_java#io#InputStream_E@", "InputStream: an @B_java#io#InputStream_E@ of pixel data to write. This value must never be null."], ["long", "long: the offset of the raw image in bytes. This indicates how many bytes will be skipped in the input before any pixel data is read. Value is 0 or greater"]], "Throws": [["@B_java#io#IOException_E@", "if an error was encountered in the input or output stream."], ["@B_java#lang#IllegalStateException_E@", "if not enough metadata information has been set to write a well-formatted DNG file."], ["@B_java#lang#IllegalArgumentException_E@", "if the size passed in does not match the"]], "SeeAlso": [], "Permissions": [], "Description": "Write the @B_android#graphics#ImageFormat#RAW_SENSOR_E@ pixel data to a DNG file with the currently configured metadata. Raw pixel data must have 16 bits per pixel, and the input must contain at least offset + 2 * width * height) bytes. The width and height of the input are taken from the width and height set in the @B_android#hardware#camera2#DngCreator_E@ metadata tags, and will typically be equal to the width and height of @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_PRE_CORRECTION_ACTIVE_ARRAY_SIZE_E@. Prior to API level 23, this was always the same as @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE_E@. The pixel layout in the input is determined from the reported color filter arrangement (CFA) set in @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_E@. If insufficient metadata is available to write a well-formatted DNG file, an @B_java#lang#IllegalStateException_E@ will be thrown.", "history": "Added in API level 21", "FullName": "public void writeInputStream (OutputStream dngOutput, Size size, InputStream pixels, long offset)"}, "setLocation(android.location.Location)": {"Returns": [["@B_android#hardware#camera2#DngCreator_E@", "this @B_android#hardware#camera2#DngCreator#DngCreator_E@ object. This value will never be null."]], "Parameters": [["@B_android#location#Location_E@", "Location: an @B_android#location#Location_E@ object to set. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given location object doesn't contain enough information to set location metadata."]], "SeeAlso": [], "Permissions": [], "Description": "Set image location metadata. The given location object must contain at least a valid time, latitude, and longitude (equivalent to the values returned by @B_android#location#Location#getTime_E@, @B_android#location#Location#getLatitude_E@, and @B_android#location#Location#getLongitude_E@ methods).", "history": "Added in API level 21", "FullName": "public DngCreator setLocation (Location location)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this resource, relinquishing any underlying resources. This method is invoked automatically on objects managed by the try-with-resources statement. While this interface method is declared to throw Exception, implementers are strongly encouraged to declare concrete implementations of the close method to throw more specific exceptions, or to throw no exception at all if the close operation cannot fail. Cases where the close operation may fail require careful attention by implementers. It is strongly advised to relinquish the underlying resources and to internally mark the resource as closed, prior to throwing the exception. The close method is unlikely to be invoked more than once and so this ensures that the resources are released in a timely manner. Furthermore it reduces problems that could arise when the resource wraps, or is wrapped, by another resource. Implementers of this interface are also strongly advised to not have the close method throw @B_java#lang#InterruptedException_E@. This exception interacts with a thread's interrupted status, and runtime misbehavior is likely to occur if an InterruptedException is AutoCloseable.close method should not throw it. Note that unlike the @B_java#io#Closeable#close_E@ method of @B_java#io#Closeable_E@, this close method is not required to be idempotent. In other words, calling this close method more than once may have some visible side effect, unlike Closeable.close which is required to have no effect if called more than once. However, implementers of this interface are strongly encouraged to make their close methods idempotent.", "history": "Added in API level 21", "FullName": "public void close ()"}, "setDescription(java.lang.String)": {"Returns": [["@B_android#hardware#camera2#DngCreator_E@", "this @B_android#hardware#camera2#DngCreator#DngCreator_E@ object. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: the user description string. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the user description string to write. This is equivalent to setting the TIFF \"ImageDescription\" tag (0x010E).", "history": "Added in API level 21", "FullName": "public DngCreator setDescription (String description)"}, "writeImage(java.io.OutputStream,android.media.Image)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: an @B_java#io#OutputStream_E@ to write the DNG file to. This value must never be null."], ["@B_android#media#Image_E@", "Image: an @B_android#media#Image_E@ to write. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if an error was encountered in the output stream."], ["@B_java#lang#IllegalArgumentException_E@", "if an image with an unsupported format was used."], ["@B_java#lang#IllegalStateException_E@", "if not enough metadata information has been set to write a well-formatted DNG file."]], "SeeAlso": [], "Permissions": [], "Description": "Write the pixel data to a DNG file with the currently configured metadata. For this method to succeed, the @B_android#media#Image_E@ input must contain @B_android#graphics#ImageFormat#RAW_SENSOR_E@ pixel data, otherwise an @B_java#lang#IllegalArgumentException_E@ will be thrown.", "history": "Added in API level 21", "FullName": "public void writeImage (OutputStream dngOutput, Image pixels)"}, "setOrientation(int)": {"Returns": [["@B_android#hardware#camera2#DngCreator_E@", "this @B_android#hardware#camera2#DngCreator#DngCreator_E@ object. This value will never be null."]], "Parameters": [["int", "int: the orientation value to set, one of: ExifInterface.ORIENTATION_NORMAL ExifInterface.ORIENTATION_FLIP_HORIZONTAL ExifInterface.ORIENTATION_ROTATE_180 ExifInterface.ORIENTATION_FLIP_VERTICAL ExifInterface.ORIENTATION_TRANSPOSE ExifInterface.ORIENTATION_ROTATE_90 ExifInterface.ORIENTATION_TRANSVERSE ExifInterface.ORIENTATION_ROTATE_270"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the orientation value to write. This will be written as the TIFF \"Orientation\" tag (0x0112). Calling this will override any prior settings for this tag.", "history": "Added in API level 21", "FullName": "public DngCreator setOrientation (int orientation)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.DngCreator", "ClassDesc": "The @B_android#hardware#camera2#DngCreator_E@ class provides functions to write raw pixel data as a DNG file. This class is designed to be used with the @B_android#graphics#ImageFormat#RAW_SENSOR_E@ buffers available from @B_android#hardware#camera2#CameraDevice_E@, or with Bayer-type raw pixel data that is otherwise generated by an application. The DNG metadata tags will be generated from a @B_android#hardware#camera2#CaptureResult_E@ object or set directly. The DNG file format is a cross-platform file format that is used to store pixel data from camera sensors with minimal pre-processing applied. DNG files allow for pixel data to be defined in a user-defined colorspace, and have associated metadata that allow for this pixel data to be converted to the standard CIE XYZ colorspace during post-processing. For more information on the DNG file format and associated metadata, please refer to the"}