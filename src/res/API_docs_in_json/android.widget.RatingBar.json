{"Functions": {"getRating()": {"Returns": [["float", "The current rating."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current rating (number of stars filled).", "history": "Added in API level 1", "FullName": "public float getRating ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "RatingBar(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public RatingBar (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "RatingBar(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RatingBar (Context context)"}, "setMax(int)": {"Returns": [], "Parameters": [["int", "int: the upper range of this progress bar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the upper range of the progress bar", "history": "Added in API level 1", "FullName": "public void setMax (int max)"}, "isIndicator()": {"Returns": [["boolean", "Whether this rating bar is only an indicator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean isIndicator ()"}, "setRating(float)": {"Returns": [], "Parameters": [["float", "float: The rating to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the rating (the number of stars filled).", "history": "Added in API level 1", "FullName": "public void setRating (float rating)"}, "setStepSize(float)": {"Returns": [], "Parameters": [["float", "float: The step size of this rating bar. For example, if half-star granularity is wanted, this would be 0.5."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the step size (granularity) of this rating bar.", "history": "Added in API level 1", "FullName": "public void setStepSize (float stepSize)"}, "getOnRatingBarChangeListener()": {"Returns": [["@B_android#widget#RatingBar#OnRatingBarChangeListener_E@", "The listener (may be null) that is listening for rating change events."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RatingBar.OnRatingBarChangeListener getOnRatingBarChangeListener ()"}, "getStepSize()": {"Returns": [["float", "The step size."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the step size of this rating bar.", "history": "Added in API level 1", "FullName": "public float getStepSize ()"}, "getNumStars()": {"Returns": [["int", "The number of stars shown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of stars shown.", "history": "Added in API level 1", "FullName": "public int getNumStars ()"}, "setIsIndicator(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether it should be an indicator."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether this rating bar should only be an indicator (thus non-changeable by the user).", "history": "Added in API level 1", "FullName": "public void setIsIndicator (boolean isIndicator)"}, "setOnRatingBarChangeListener(android.widget.RatingBar.OnRatingBarChangeListener)": {"Returns": [], "Parameters": [["@B_android#widget#RatingBar#OnRatingBarChangeListener_E@", "RatingBar.OnRatingBarChangeListener: The listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called when the rating changes.", "history": "Added in API level 1", "FullName": "public void setOnRatingBarChangeListener (RatingBar.OnRatingBarChangeListener listener)"}, "RatingBar(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RatingBar (Context context, AttributeSet attrs)"}, "setNumStars(int)": {"Returns": [], "Parameters": [["int", "int: The number of stars."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of stars to show. In order for these to be shown properly, it is recommended the layout width of this widget be wrap content.", "history": "Added in API level 1", "FullName": "public void setNumStars (int numStars)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "RatingBar(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RatingBar (Context context, AttributeSet attrs, int defStyleAttr)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#ProgressBar_E@", "@B_android#widget#AbsSeekBar_E@"], "ClassName": "android.widget.RatingBar", "ClassDesc": "A RatingBar is an extension of SeekBar and ProgressBar that shows a rating in stars. The user can touch/drag or use arrow keys to set the rating when using the default size RatingBar. The smaller RatingBar style ( @B_android#R#attr#ratingBarStyleSmall_E@) and the larger indicator-only style (@B_android#R#attr#ratingBarStyleIndicator_E@) do not support user interaction and should only be used as indicators. When using a RatingBar that supports user interaction, placing widgets to the left or right of the RatingBar is discouraged. The number of stars set (via @B_android#widget#RatingBar#setNumStars_E@ or in an XML layout) will be shown when the layout width is set to wrap content (if another layout width is set, the results may be unpredictable). The secondary progress should not be modified by the client as it is used internally as the background for a fractionally filled star."}