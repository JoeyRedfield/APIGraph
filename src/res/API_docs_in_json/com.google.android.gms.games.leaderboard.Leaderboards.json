{"Functions": {"submitScoreImmediate(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, long)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API will attempt to submit the score to the server immediately, and will return a GamesPendingResult with information about the submission. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.SubmitScoreResult> submitScoreImmediate (GoogleApiClient apiClient, String leaderboardId, long score)"}, "loadLeaderboardMetadata(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, boolean)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard to load metadata for."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load a specific leaderboard's metadata for this game. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LeaderboardMetadataResult> loadLeaderboardMetadata (GoogleApiClient apiClient, String leaderboardId, boolean forceReload)"}, "submitScoreImmediate(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, long, java.lang.String)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."], ["String", "Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API will attempt to submit the score to the server immediately, and will return a GamesPendingResult with information about the submission. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.SubmitScoreResult> submitScoreImmediate (GoogleApiClient apiClient, String leaderboardId, long score, String scoreTag)"}, "getLeaderboardIntent(com.google.android.gms.common.api.GoogleApiClient, java.lang.String)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the specified leaderboard."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The ID of the leaderboard to view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show a leaderboard for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GoogleApiClient ends up in an inconsistent state. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getLeaderboardIntent (GoogleApiClient apiClient, String leaderboardId)"}, "loadLeaderboardMetadata(com.google.android.gms.common.api.GoogleApiClient, boolean)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the list of leaderboard metadata for this game. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LeaderboardMetadataResult> loadLeaderboardMetadata (GoogleApiClient apiClient, boolean forceReload)"}, "loadPlayerCenteredScores(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int, int, int, boolean)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the player-centered page of scores for a given leaderboard. If the player does not have a score on this leaderboard, this call will return the top page instead. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadScoresResult> loadPlayerCenteredScores (GoogleApiClient apiClient, String leaderboardId, int span, int leaderboardCollection, int maxResults, boolean forceReload)"}, "loadTopScores(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int, int, int, boolean)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the top page of scores for a given leaderboard. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadScoresResult> loadTopScores (GoogleApiClient apiClient, String leaderboardId, int span, int leaderboardCollection, int maxResults, boolean forceReload)"}, "loadMoreScores(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.leaderboard.LeaderboardScoreBuffer, int, int)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#leaderboard#LeaderboardScoreBuffer_E@", "The existing buffer that will be expanded. The buffer is allowed to be closed prior to being passed in to this method."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25. Note that the number of scores returned here may be greater than this value, depending on how much data is cached on the device."], ["int", "The direction to expand the buffer. Values are defined in @B_com#google#android#gms#games#PageDirection_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously loads an additional page of score data for the given score buffer. A new score buffer will be delivered that replaces the given buffer. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadScoresResult> loadMoreScores (GoogleApiClient apiClient, LeaderboardScoreBuffer buffer, int maxResults, int pageDirection)"}, "getLeaderboardIntent(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the specified leaderboard."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The ID of the leaderboard to view."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show a leaderboard for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GoogleApiClient ends up in an inconsistent state. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getLeaderboardIntent (GoogleApiClient apiClient, String leaderboardId, int timeSpan)"}, "getAllLeaderboardsIntent(com.google.android.gms.common.api.GoogleApiClient)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the list of leaderboards for a game."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show the list of leaderboards for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GoogleApiClient ends up in an inconsistent state. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getAllLeaderboardsIntent (GoogleApiClient apiClient)"}, "loadCurrentPlayerLeaderboardScore(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int, int)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard to load the score from."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the currently signed in player's score for a given leaderboard. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadPlayerScoreResult> loadCurrentPlayerLeaderboardScore (GoogleApiClient apiClient, String leaderboardId, int span, int leaderboardCollection)"}, "submitScore(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, long, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."], ["String", "Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API is a fire-and-forget form. Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void submitScore (GoogleApiClient apiClient, String leaderboardId, long score, String scoreTag)"}, "loadPlayerCenteredScores(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int, int, int)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the player-centered page of scores for a given leaderboard. If the player does not have a score on this leaderboard, this call will return the top page instead. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadScoresResult> loadPlayerCenteredScores (GoogleApiClient apiClient, String leaderboardId, int span, int leaderboardCollection, int maxResults)"}, "submitScore(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, long)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API is a fire-and-forget form. Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void submitScore (GoogleApiClient apiClient, String leaderboardId, long score)"}, "loadTopScores(com.google.android.gms.common.api.GoogleApiClient, java.lang.String, int, int, int)": {"Returns": [["", "@B_com#google#android#gms#common#api#PendingResult_E@ to access the data when available."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the top page of scores for a given leaderboard. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract PendingResult<Leaderboards.LoadScoresResult> loadTopScores (GoogleApiClient apiClient, String leaderboardId, int span, int leaderboardCollection, int maxResults)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.games.leaderboard.Leaderboards", "ClassDesc": "Entry point for leaderboard functionality."}