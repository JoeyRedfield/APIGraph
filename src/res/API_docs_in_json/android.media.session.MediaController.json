{"Functions": {"MediaController(android.content.Context,android.media.session.MediaSession.Token)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The caller's context. This value must never be null."], ["@B_android#media#session#MediaSession#Token_E@", "MediaSession.Token: The token for the session. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new MediaController from a session's token.", "history": "Added in API level 21", "FullName": "public MediaController (Context context, MediaSession.Token token)"}, "getFlags()": {"Returns": [["long", "The current set of flags for the session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the flags for this session. Flags are defined in @B_android#media#session#MediaSession_E@.", "history": "Added in API level 21", "FullName": "public long getFlags ()"}, "adjustVolume(int,int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume in."], ["int", "int: Any flags to pass with the command."]], "Throws": [], "SeeAlso": ["@B_android#media#session#MediaController#getPlaybackInfo_E@"], "Permissions": [], "Description": "Adjust the volume of the output this session is playing on. The direction must be one of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, or @B_android#media#AudioManager#ADJUST_SAME_E@. The command will be ignored if the session does not support @B_android#media#VolumeProvider#VOLUME_CONTROL_RELATIVE_E@ or @B_android#media#VolumeProvider#VOLUME_CONTROL_ABSOLUTE_E@. The flags in @B_android#media#AudioManager_E@ may be used to affect the handling.", "history": "Added in API level 21", "FullName": "public void adjustVolume (int direction, int flags)"}, "unregisterCallback(android.media.session.MediaController.Callback)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaController#Callback_E@", "MediaController.Callback: The callback to remove. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters the specified callback. If an update has already been posted you may still receive it after calling this method.", "history": "Added in API level 21", "FullName": "public void unregisterCallback (MediaController.Callback callback)"}, "sendCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The command to send This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Any parameters to include with the command This value may be null."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: The callback to receive the result on This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a generic command to the session. It is up to the session creator to decide what commands and parameters they will support. As such, commands should only be sent to sessions that the controller owns.", "history": "Added in API level 21", "FullName": "public void sendCommand (String command, Bundle args, ResultReceiver cb)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the extras for this session.", "history": "Added in API level 21", "FullName": "public Bundle getExtras ()"}, "getSessionInfo()": {"Returns": [["@B_android#os#Bundle_E@", "The additional session information, or an empty @B_android#os#Bundle_E@ if not set. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the additional session information which was set when the session was created.", "history": "Added in API level 29", "FullName": "public Bundle getSessionInfo ()"}, "getPlaybackInfo()": {"Returns": [["@B_android#media#session#MediaController#PlaybackInfo_E@", "The current playback info or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current playback info for this session.", "history": "Added in API level 21", "FullName": "public MediaController.PlaybackInfo getPlaybackInfo ()"}, "getTransportControls()": {"Returns": [["@B_android#media#session#MediaController#TransportControls_E@", "A transport controls instance. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a @B_android#media#session#MediaController#TransportControls_E@ instance to send transport actions to the associated session.", "history": "Added in API level 21", "FullName": "public MediaController.TransportControls getTransportControls ()"}, "getQueue()": {"Returns": [["@B_java#util#List_E@", "The current play queue or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current play queue for this session if one is set. If you only care about the current item @B_android#media#session#MediaController#getMetadata_E@ should be used.", "history": "Added in API level 21", "FullName": "public List<MediaSession.QueueItem> getQueue ()"}, "getPlaybackState()": {"Returns": [["@B_android#media#session#PlaybackState_E@", "The current PlaybackState or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current playback state for this session.", "history": "Added in API level 21", "FullName": "public PlaybackState getPlaybackState ()"}, "setVolumeTo(int,int)": {"Returns": [], "Parameters": [["int", "int: The value to set it to, between 0 and the reported max."], ["int", "int: Flags from @B_android#media#AudioManager_E@ to include with the volume request."]], "Throws": [], "SeeAlso": ["@B_android#media#session#MediaController#getPlaybackInfo_E@"], "Permissions": [], "Description": "Set the volume of the output this session is playing on. The command will be ignored if it does not support @B_android#media#VolumeProvider#VOLUME_CONTROL_ABSOLUTE_E@. The flags in @B_android#media#AudioManager_E@ may be used to affect the handling.", "history": "Added in API level 21", "FullName": "public void setVolumeTo (int value, int flags)"}, "adjustVolume(int, int)": {"Returns": [], "Parameters": [["int", "int: The direction to adjust the volume in."], ["int", "int: Any flags to pass with the command."]], "Throws": [], "SeeAlso": ["@B_android#media#session#MediaController#getPlaybackInfo_E@"], "Permissions": [], "Description": "Adjust the volume of the output this session is playing on. The direction must be one of @B_android#media#AudioManager#ADJUST_LOWER_E@, @B_android#media#AudioManager#ADJUST_RAISE_E@, or @B_android#media#AudioManager#ADJUST_SAME_E@. The command will be ignored if the session does not support @B_android#media#VolumeProvider#VOLUME_CONTROL_RELATIVE_E@ or @B_android#media#VolumeProvider#VOLUME_CONTROL_ABSOLUTE_E@. The flags in @B_android#media#AudioManager_E@ may be used to affect the handling.", "history": "added in API level 21", "FullName": "public void adjustVolume (int direction, int flags)"}, "getMetadata()": {"Returns": [["@B_android#media#MediaMetadata_E@", "The current MediaMetadata or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current metadata for this session.", "history": "Added in API level 21", "FullName": "public MediaMetadata getMetadata ()"}, "getQueueTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the queue title for this session.", "history": "Added in API level 21", "FullName": "public CharSequence getQueueTitle ()"}, "getSessionToken()": {"Returns": [["@B_android#media#session#MediaSession#Token_E@", "The token for the connected session. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the token for the session this is connected to.", "history": "Added in API level 21", "FullName": "public MediaSession.Token getSessionToken ()"}, "registerCallback(android.media.session.MediaController.Callback)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaController#Callback_E@", "MediaController.Callback: The callback object, must not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to receive updates from the Session. Updates will be posted on the caller's thread.", "history": "Added in API level 21", "FullName": "public void registerCallback (MediaController.Callback callback)"}, "setVolumeTo(int, int)": {"Returns": [], "Parameters": [["int", "int: The value to set it to, between 0 and the reported max."], ["int", "int: Flags from @B_android#media#AudioManager_E@ to include with the volume request."]], "Throws": [], "SeeAlso": ["@B_android#media#session#MediaController#getPlaybackInfo_E@"], "Permissions": [], "Description": "Set the volume of the output this session is playing on. The command will be ignored if it does not support @B_android#media#VolumeProvider#VOLUME_CONTROL_ABSOLUTE_E@. The flags in @B_android#media#AudioManager_E@ may be used to affect the handling.", "history": "added in API level 21", "FullName": "public void setVolumeTo (int value, int flags)"}, "getPackageName()": {"Returns": [["@B_java#lang#String_E@", "The package name of of the session owner."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the session owner's package name.", "history": "Added in API level 21", "FullName": "public String getPackageName ()"}, "getRatingType()": {"Returns": [["int", "The supported rating type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the rating type supported by the session. One of: @B_android#media#Rating#RATING_NONE_E@ @B_android#media#Rating#RATING_HEART_E@ @B_android#media#Rating#RATING_THUMB_UP_DOWN_E@ @B_android#media#Rating#RATING_3_STARS_E@ @B_android#media#Rating#RATING_4_STARS_E@ @B_android#media#Rating#RATING_5_STARS_E@ @B_android#media#Rating#RATING_PERCENTAGE_E@", "history": "Added in API level 21", "FullName": "public int getRatingType ()"}, "dispatchMediaButtonEvent(android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was sent to the session, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The media button event to dispatch. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send the specified media button event to the session. Only media keys can be sent by this method, other keys will be ignored.", "history": "Added in API level 21", "FullName": "public boolean dispatchMediaButtonEvent (KeyEvent keyEvent)"}, "registerCallback(android.media.session.MediaController.Callback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#session#MediaController#Callback_E@", "MediaController.Callback: The callback object, must not be null. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler to post updates on. If null the callers thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to receive updates from the session. Updates will be posted on the specified handler's thread.", "history": "Added in API level 21", "FullName": "public void registerCallback (MediaController.Callback callback, Handler handler)"}, "getSessionActivity()": {"Returns": [["@B_android#app#PendingIntent_E@", "A @B_android#app#PendingIntent_E@ to launch UI or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an intent for launching UI associated with this session if one exists.", "history": "Added in API level 21", "FullName": "public PendingIntent getSessionActivity ()"}}, "Inheritance": [], "ClassName": "android.media.session.MediaController", "ClassDesc": "Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. A MediaController can be created through @B_android#media#session#MediaSessionManager_E@ if you hold the \"android.permission.MEDIA_CONTENT_CONTROL\" permission or are an enabled notification listener or by getting a @B_android#media#session#MediaSession#Token_E@ directly from the session owner. MediaController objects are thread-safe."}