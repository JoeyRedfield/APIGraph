{"Functions": {"unregister(E)": {"Returns": [["boolean", "Returns true if the callback was found and unregistered. Returns false if the given callback was not found on the list."]], "Parameters": [["E", "E: The callback to be removed from the list. Passing null here will cause a NullPointerException, so you will generally want to check for null before calling."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#register_E@"], "Permissions": [], "Description": "Remove from the list a callback that was previously added with @B_android#os#RemoteCallbackList#register_E@. This uses the @B_android#os#IInterface#asBinder_E@ object to correctly find the previous registration. Registrations are not counted; a single unregister call will remove a callback after any number calls to @B_android#os#RemoteCallbackList#register_E@ for it.", "history": "Added in API level 1", "FullName": "public boolean unregister (E callback)"}, "RemoteCallbackList()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public RemoteCallbackList ()"}, "finishBroadcast()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#beginBroadcast_E@"], "Permissions": [], "Description": "Clean up the state of a broadcast previously initiated by calling @B_android#os#RemoteCallbackList#beginBroadcast_E@. This must always be called when you are done with a broadcast.", "history": "Added in API level 1", "FullName": "public void finishBroadcast ()"}, "onCallbackDied(E,java.lang.Object)": {"Returns": [], "Parameters": [["E", "E: The callback whose process has died. Note that, since its process has died, you can not make any calls on to this interface. You can, however, retrieve its IBinder and compare it with another IBinder to see if it is the same object."], ["@B_java#lang#Object_E@", "Object: The cookie object original provided to @B_android#os#RemoteCallbackList#register_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#register_E@"], "Permissions": [], "Description": "Called when the process hosting a callback in the list has gone away. The default implementation calls @B_android#os#RemoteCallbackList#onCallbackDied_E@ for backwards compatibility.", "history": "Added in API level 4", "FullName": "public void onCallbackDied (E callback, Object cookie)"}, "register(E)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simple version of @B_android#os#RemoteCallbackList#register_E@ that does not take a cookie object.", "history": "Added in API level 1", "FullName": "public boolean register (E callback)"}, "beginBroadcast()": {"Returns": [["int", "Returns the number of callbacks in the broadcast, to be used with @B_android#os#RemoteCallbackList#getBroadcastItem_E@ to determine the range of indices you can supply."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#getBroadcastItem_E@", "@B_android#os#RemoteCallbackList#finishBroadcast_E@"], "Permissions": [], "Description": "Prepare to start making calls to the currently registered callbacks. This creates a copy of the callback list, which you can retrieve items from using @B_android#os#RemoteCallbackList#getBroadcastItem_E@. Note that only one broadcast can be active at a time, so you must be sure to always call this from the same thread (usually by scheduling with @B_android#os#Handler_E@) or do your own synchronization. You must call @B_android#os#RemoteCallbackList#finishBroadcast_E@ when done. A typical loop delivering a broadcast looks like this:", "history": "Added in API level 1", "FullName": "public int beginBroadcast ()"}, "getBroadcastCookie(int)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#getBroadcastItem_E@"], "Permissions": [], "Description": "Retrieve the cookie associated with the item returned by @B_android#os#RemoteCallbackList#getBroadcastItem_E@.", "history": "Added in API level 4", "FullName": "public Object getBroadcastCookie (int index)"}, "getRegisteredCallbackItem(int)": {"Returns": [["E", "Returns whatever callback is associated with this index, or null if @B_android#os#RemoteCallbackList#kill_E@ has been called."]], "Parameters": [["int", "int: Index of which callback registration to return, from 0 to @B_android#os#RemoteCallbackList#getRegisteredCallbackCount_E@ - 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a currently registered callback. Note that this is not the same as @B_android#os#RemoteCallbackList#getBroadcastItem_E@ and should not be used interchangeably with it. This method returns the registered callback at the given index, not the current broadcast state. This means that it is not itself thread-safe: any call to @B_android#os#RemoteCallbackList#register_E@ or @B_android#os#RemoteCallbackList#unregister_E@ will change these indices, so you must do your own thread safety between these to protect from such changes.", "history": "Added in API level 26", "FullName": "public E getRegisteredCallbackItem (int index)"}, "getRegisteredCallbackCookie(int)": {"Returns": [["@B_java#lang#Object_E@", "Returns whatever cookie object is associated with this index, or null if @B_android#os#RemoteCallbackList#kill_E@ has been called."]], "Parameters": [["int", "int: Index of which registration cookie to return, from 0 to @B_android#os#RemoteCallbackList#getRegisteredCallbackCount_E@ - 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return any cookie associated with a currently registered callback. Note that this is not the same as @B_android#os#RemoteCallbackList#getBroadcastCookie_E@ and should not be used interchangeably with it. This method returns the current cookie registered at the given index, not the current broadcast state. This means that it is not itself thread-safe: any call to @B_android#os#RemoteCallbackList#register_E@ or @B_android#os#RemoteCallbackList#unregister_E@ will change these indices, so you must do your own thread safety between these to protect from such changes.", "history": "Added in API level 26", "FullName": "public Object getRegisteredCallbackCookie (int index)"}, "register(E,java.lang.Object)": {"Returns": [["boolean", "Returns true if the callback was successfully added to the list. Returns false if it was not added, either because @B_android#os#RemoteCallbackList#kill_E@ had previously been called or the callback's process has gone away."]], "Parameters": [["E", "E: The callback interface to be added to the list. Must not be null -- passing null here will cause a NullPointerException. Most services will want to check for null before calling this with an object given from a client, so that clients can't crash the service with bad data."], ["@B_java#lang#Object_E@", "Object: Optional additional data to be associated with this callback."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#unregister_E@", "@B_android#os#RemoteCallbackList#kill_E@", "@B_android#os#RemoteCallbackList#onCallbackDied_E@"], "Permissions": [], "Description": "Add a new callback to the list. This callback will remain in the list until a corresponding call to @B_android#os#RemoteCallbackList#unregister_E@ or its hosting process goes away. If the callback was already registered (determined by checking to see if the @B_android#os#IInterface#asBinder_E@ object is already in the list), then it will be left as-is. Registrations are not counted; a single call to @B_android#os#RemoteCallbackList#unregister_E@ will remove a callback after any number calls to register it.", "history": "Added in API level 4", "FullName": "public boolean register (E callback, Object cookie)"}, "kill()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#register_E@"], "Permissions": [], "Description": "Disable this callback list. All registered callbacks are unregistered, and the list is disabled so that future calls to @B_android#os#RemoteCallbackList#register_E@ will fail. This should be used when a Service is stopping, to prevent clients from registering callbacks after it is stopped.", "history": "Added in API level 1", "FullName": "public void kill ()"}, "getRegisteredCallbackCount()": {"Returns": [["int", "The size."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of registered callbacks. Note that the number of registered callbacks may differ from the value returned by @B_android#os#RemoteCallbackList#beginBroadcast_E@ since the former returns the number of callbacks registered at the time of the call and the second the number of callback to which the broadcast will be delivered. This function is useful to decide whether to schedule a broadcast if this requires doing some work which otherwise would not be performed.", "history": "Added in API level 17", "FullName": "public int getRegisteredCallbackCount ()"}, "register(E, java.lang.Object)": {"Returns": [["boolean", "Returns true if the callback was successfully added to the list. Returns false if it was not added, either because @B_android#os#RemoteCallbackList#kill_E@ had previously been called or the callback's process has gone away."]], "Parameters": [["E", "E: The callback interface to be added to the list. Must not be null -- passing null here will cause a NullPointerException. Most services will want to check for null before calling this with an object given from a client, so that clients can't crash the service with bad data."], ["@B_java#lang#Object_E@", "Object: Optional additional data to be associated with this callback."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#unregister_E@", "@B_android#os#RemoteCallbackList#kill_E@", "@B_android#os#RemoteCallbackList#onCallbackDied_E@"], "Permissions": [], "Description": "Add a new callback to the list. This callback will remain in the list until a corresponding call to @B_android#os#RemoteCallbackList#unregister_E@ or its hosting process goes away. If the callback was already registered (determined by checking to see if the @B_android#os#IInterface#asBinder_E@ object is already in the list), then it will be left as-is. Registrations are not counted; a single call to @B_android#os#RemoteCallbackList#unregister_E@ will remove a callback after any number calls to register it.", "history": "added in API level 4", "FullName": "public boolean register (E callback, Object cookie)"}, "onCallbackDied(E, java.lang.Object)": {"Returns": [], "Parameters": [["E", "E: The callback whose process has died. Note that, since its process has died, you can not make any calls on to this interface. You can, however, retrieve its IBinder and compare it with another IBinder to see if it is the same object."], ["@B_java#lang#Object_E@", "Object: The cookie object original provided to @B_android#os#RemoteCallbackList#register_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#register_E@"], "Permissions": [], "Description": "Called when the process hosting a callback in the list has gone away. The default implementation calls @B_android#os#RemoteCallbackList#onCallbackDied_E@ for backwards compatibility.", "history": "added in API level 4", "FullName": "public void onCallbackDied (E callback, Object cookie)"}, "onCallbackDied(E)": {"Returns": [], "Parameters": [["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Old version of @B_android#os#RemoteCallbackList#onCallbackDied_E@ that does not provide a cookie.", "history": "Added in API level 1", "FullName": "public void onCallbackDied (E callback)"}, "getBroadcastItem(int)": {"Returns": [["E", "Returns the callback interface that you can call. This will always be non-null."]], "Parameters": [["int", "int: Which of the registered callbacks you would like to retrieve. Ranges from 0 to 1-@B_android#os#RemoteCallbackList#beginBroadcast_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#RemoteCallbackList#beginBroadcast_E@"], "Permissions": [], "Description": "Retrieve an item in the active broadcast that was previously started with @B_android#os#RemoteCallbackList#beginBroadcast_E@. This can only be called after the broadcast is started, and its data is no longer valid after calling @B_android#os#RemoteCallbackList#finishBroadcast_E@. Note that it is possible for the process of one of the returned callbacks to go away before you call it, so you will need to catch @B_android#os#RemoteException_E@ when calling on to the returned object. The callback list itself, however, will take care of unregistering these objects once it detects that it is no longer valid, so you can handle such an exception by simply ignoring it.", "history": "Added in API level 1", "FullName": "public E getBroadcastItem (int index)"}}, "Inheritance": [], "ClassName": "@B_android#os#IInterface_E@", "ClassDesc": "Takes care of the grunt work of maintaining a list of remote interfaces, typically for the use of performing callbacks from a @B_android#app#Service_E@ to its clients. In particular, this: Keeps track of a set of registered @B_android#os#IInterface_E@ callbacks, taking care to identify them through their underlying unique @B_android#os#IBinder_E@ (by calling @B_android#os#IInterface#asBinder_E@. Attaches a @B_android#os#IBinder#DeathRecipient_E@ to each registered interface, so that it can be cleaned out of the list if its process goes away. Performs locking of the underlying list of interfaces to deal with multithreaded incoming calls, and a thread-safe way to iterate over a snapshot of the list without holding its lock. To use this class, simply create a single instance along with your service, and call its @B_android#os#RemoteCallbackList#register_E@ and @B_android#os#RemoteCallbackList#unregister_E@ methods as client register and unregister with your service. To call back on to the registered clients, use @B_android#os#RemoteCallbackList#beginBroadcast_E@, @B_android#os#RemoteCallbackList#getBroadcastItem_E@, and @B_android#os#RemoteCallbackList#finishBroadcast_E@. If a registered callback's process goes away, this class will take care of automatically removing it from the list. If you want to do additional work in this situation, you can create a subclass that implements the @B_android#os#RemoteCallbackList#onCallbackDied_E@ method."}