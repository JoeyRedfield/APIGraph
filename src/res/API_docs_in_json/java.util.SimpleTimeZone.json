{"Functions": {"SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The given base time zone offset from GMT."], ["@B_java#lang#String_E@", "String: The time zone ID which is given to this object."], ["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case."], ["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time ending day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving ending time in local wall clock time, which is local daylight time in this case."], ["int", "int: The amount of time in milliseconds saved during daylight saving time."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the month, day, dayOfWeek, or time parameters are out of range for the start or end rule"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are assumed to be represented in the wall clock time. This constructor is equivalent to:", "history": "Added in API level 1", "FullName": "public SimpleTimeZone (int rawOffset, String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime, int dstSavings)"}, "getOffset(int, int, int, int, int, int)": {"Returns": [["int", "The milliseconds to add to UTC to get local time."]], "Parameters": [["int", "int: The era of the given date."], ["int", "int: The year in the given date."], ["int", "int: The month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: The day-in-month of the given date."], ["int", "int: The day-of-week of the given date."], ["int", "int: The milliseconds in day in standard local time."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the era, month, day, dayOfWeek, or millis parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time. This method assumes that the start and end month are distinct. It also uses a default @B_java#util#GregorianCalendar_E@ object as its underlying calendar, such as for determining leap years. Do not use the result of this method with a calendar other than a default GregorianCalendar. Note: In general, clients should use Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET) instead of calling this method.", "history": "added in API level 1", "FullName": "public int getOffset (int era, int year, int month, int day, int dayOfWeek, int millis)"}, "setEndRule(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the endMonth, endDay, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule to a fixed date within a month. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endTime)"}, "setStartRule(int,int,int,int,boolean)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts."], ["int", "int: The daylight saving time starting day-of-week."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case."], ["boolean", "boolean: If true, this rule selects the first dayOfWeek on or after dayOfMonth. If false, this rule selects the last dayOfWeek on or before dayOfMonth."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.", "history": "Added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)"}, "SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The given base time zone offset from GMT."], ["@B_java#lang#String_E@", "String: The time zone ID which is given to this object."], ["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting time in local wall clock time (in milliseconds within the day), which is local standard time in this case."], ["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time ending day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the month, day, dayOfWeek, or time parameters are out of range for the start or end rule"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. Both startTime and endTime are specified to be represented in the wall clock time. The amount of daylight saving is assumed to be 3600000 milliseconds (i.e., one hour). This constructor is equivalent to:", "history": "Added in API level 1", "FullName": "public SimpleTimeZone (int rawOffset, String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int endMonth, int endDay, int endDayOfWeek, int endTime)"}, "getRawOffset()": {"Returns": [["int", "the GMT offset value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#SimpleTimeZone#setRawOffset_E@"], "Permissions": [], "Description": "Gets the GMT offset for this time zone.", "history": "Added in API level 1", "FullName": "public int getRawOffset ()"}, "useDaylightTime()": {"Returns": [["boolean", "true if this time zone uses daylight saving time; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this time zone uses daylight saving time.", "history": "Added in API level 1", "FullName": "public boolean useDaylightTime ()"}, "setEndRule(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the endMonth, endDay, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule to a fixed date within a month. This method is equivalent to:", "history": "added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endTime)"}, "setEndRule(int,int,int,int,boolean)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends."], ["int", "int: The daylight saving time ending day-of-week."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."], ["boolean", "boolean: If true, this rule selects the first endDayOfWeek on or after endDay. If false, this rule selects the last endDayOfWeek on or before endDay of the month."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.", "history": "Added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)"}, "setStartRule(int, int, int, int, boolean)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts."], ["int", "int: The daylight saving time starting day-of-week."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case."], ["boolean", "boolean: If true, this rule selects the first dayOfWeek on or after dayOfMonth. If false, this rule selects the last dayOfWeek on or before dayOfMonth."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.", "history": "added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startDayOfWeek, int startTime, boolean after)"}, "setRawOffset(int)": {"Returns": [], "Parameters": [["int", "int: the given base time zone offset to GMT."]], "Throws": [], "SeeAlso": ["@B_java#util#SimpleTimeZone#getRawOffset_E@"], "Permissions": [], "Description": "Sets the base time zone offset to GMT. This is the offset to add to UTC to get local time.", "history": "Added in API level 1", "FullName": "public void setRawOffset (int offsetMillis)"}, "setEndRule(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time ending day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule. For example, if daylight saving time ends on the last Sunday in October at 2 am in wall clock time, you can set the end rule by calling: setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);", "history": "Added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endDayOfWeek, int endTime)"}, "setStartRule(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case. See the class description for the special cases of this parameter."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDayOfMonth, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule to a fixed date within a month. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startTime)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "True if the given obj is the same as this SimpleTimeZone object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The SimpleTimeZone object to be compared with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the equality of two SimpleTimeZone objects.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "setStartRule(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case. See the class description for the special cases of this parameter."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDayOfMonth, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule to a fixed date within a month. This method is equivalent to:", "history": "added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startTime)"}, "setStartRule(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule. For example, if daylight saving time starts on the first Sunday in April at 2 am in local wall clock time, you can set the start rule by calling:", "history": "Added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startDayOfWeek, int startTime)"}, "SimpleTimeZone(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The base time zone offset in milliseconds to GMT."], ["@B_java#lang#String_E@", "String: The time zone name that is given to this instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule.", "history": "added in API level 1", "FullName": "public SimpleTimeZone (int rawOffset, String ID)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone of this SimpleTimeZone instance.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["int", "the hash code for this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the hash code for the SimpleDateFormat object.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "setStartRule(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting time in local wall clock time, which is local standard time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the startMonth, startDay, startDayOfWeek, or startTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time start rule. For example, if daylight saving time starts on the first Sunday in April at 2 am in local wall clock time, you can set the start rule by calling:", "history": "added in API level 1", "FullName": "public void setStartRule (int startMonth, int startDay, int startDayOfWeek, int startTime)"}, "getDSTSavings()": {"Returns": [["int", "the number of milliseconds the time is advanced with respect to standard time when the daylight saving rules are in effect, or 0 (zero) if this time zone doesn't observe daylight saving time."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#SimpleTimeZone#setDSTSavings_E@"], "Permissions": [], "Description": "Returns the amount of time in milliseconds that the clock is advanced during daylight saving time.", "history": "Added in API level 1", "FullName": "public int getDSTSavings ()"}, "getOffset(long)": {"Returns": [["int", "the amount of time in milliseconds to add to UTC to get local time."]], "Parameters": [["long", "long: the time at which the time zone offset is found"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset of this time zone from UTC at the given time. If daylight saving time is in effect at the given time, the offset value is adjusted with the amount of daylight saving.", "history": "Added in API level 1", "FullName": "public int getOffset (long date)"}, "hasSameRules(java.util.TimeZone)": {"Returns": [["boolean", "true if the given zone is a SimpleTimeZone and has the same rules and offset as this one"]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the TimeZone object to be compared with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this zone has the same rules and offset as another zone.", "history": "Added in API level 1", "FullName": "public boolean hasSameRules (TimeZone other)"}, "setStartYear(int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving starting year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time starting year.", "history": "Added in API level 1", "FullName": "public void setStartYear (int year)"}, "setDSTSavings(int)": {"Returns": [], "Parameters": [["int", "int: the number of milliseconds the time is advanced with respect to standard time when the daylight saving time rules are in effect. A positive number, typically one hour (3600000)."]], "Throws": [], "SeeAlso": ["@B_java#util#SimpleTimeZone#getDSTSavings_E@"], "Permissions": [], "Description": "Sets the amount of time in milliseconds that the clock is advanced during daylight saving time.", "history": "Added in API level 1", "FullName": "public void setDSTSavings (int millisSavedDuringDST)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this time zone."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this time zone.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "SimpleTimeZone(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The base time zone offset in milliseconds to GMT."], ["@B_java#lang#String_E@", "String: The time zone name that is given to this instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT and time zone ID with no daylight saving time schedule.", "history": "Added in API level 1", "FullName": "public SimpleTimeZone (int rawOffset, String ID)"}, "observesDaylightTime()": {"Returns": [["boolean", "true if this SimpleTimeZone observes Daylight Saving Time; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this SimpleTimeZone observes Daylight Saving Time. This method is equivalent to @B_java#util#SimpleTimeZone#useDaylightTime_E@.", "history": "Added in API level 24", "FullName": "public boolean observesDaylightTime ()"}, "setEndRule(int, int, int, int, boolean)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends."], ["int", "int: The daylight saving time ending day-of-week."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."], ["boolean", "boolean: If true, this rule selects the first endDayOfWeek on or after endDay. If false, this rule selects the last endDayOfWeek on or before endDay of the month."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule to a weekday before or after the given date within a month, e.g., the first Monday on or after the 8th.", "history": "added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endDayOfWeek, int endTime, boolean after)"}, "setEndRule(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time ending day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving ending time in local wall clock time, (in milliseconds within the day) which is local daylight time in this case."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the endMonth, endDay, endDayOfWeek, or endTime parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the daylight saving time end rule. For example, if daylight saving time ends on the last Sunday in October at 2 am in wall clock time, you can set the end rule by calling: setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);", "history": "added in API level 1", "FullName": "public void setEndRule (int endMonth, int endDay, int endDayOfWeek, int endTime)"}, "SimpleTimeZone(int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The given base time zone offset from GMT."], ["@B_java#lang#String_E@", "String: The time zone ID which is given to this object."], ["int", "int: The daylight saving time starting month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 0 for January)."], ["int", "int: The day of the month on which the daylight saving time starts. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time starting time in the time mode specified by startTimeMode."], ["int", "int: The mode of the start time specified by startTime."], ["int", "int: The daylight saving time ending month. Month is a @B_java#util#Calendar#MONTH_E@ field value (0-based. e.g., 9 for October)."], ["int", "int: The day of the month on which the daylight saving time ends. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving time ending day-of-week. See the class description for the special cases of this parameter."], ["int", "int: The daylight saving ending time in time time mode specified by endTimeMode."], ["int", "int: The mode of the end time specified by endTime"], ["int", "int: The amount of time in milliseconds saved during daylight saving time."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the month, day, dayOfWeek, time more, or time parameters are out of range for the start or end rule, or if a time mode value is invalid."]], "SeeAlso": ["@B_java#util#SimpleTimeZone_E@"], "Permissions": [], "Description": "Constructs a SimpleTimeZone with the given base time zone offset from GMT, time zone ID, and rules for starting and ending the daylight time. This constructor takes the full set of the start and end rules parameters, including modes of startTime and endTime. The mode specifies either @B_java#util#SimpleTimeZone#WALL_TIME_E@ or @B_java#util#SimpleTimeZone#STANDARD_TIME_E@ or @B_java#util#SimpleTimeZone#UTC_TIME_E@.", "history": "Added in API level 1", "FullName": "public SimpleTimeZone (int rawOffset, String ID, int startMonth, int startDay, int startDayOfWeek, int startTime, int startTimeMode, int endMonth, int endDay, int endDayOfWeek, int endTime, int endTimeMode, int dstSavings)"}, "inDaylightTime(java.util.Date)": {"Returns": [["boolean", "true if daylight saving time is in effective at the given date; false otherwise."]], "Parameters": [["@B_java#util#Date_E@", "Date: the given Date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if the given date is in daylight saving time.", "history": "Added in API level 1", "FullName": "public boolean inDaylightTime (Date date)"}, "getOffset(int,int,int,int,int,int)": {"Returns": [["int", "The milliseconds to add to UTC to get local time."]], "Parameters": [["int", "int: The era of the given date."], ["int", "int: The year in the given date."], ["int", "int: The month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: The day-in-month of the given date."], ["int", "int: The day-of-week of the given date."], ["int", "int: The milliseconds in day in standard local time."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "the era, month, day, dayOfWeek, or millis parameters are out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the difference in milliseconds between local time and UTC, taking into account both the raw offset and the effect of daylight saving, for the specified date and time. This method assumes that the start and end month are distinct. It also uses a default @B_java#util#GregorianCalendar_E@ object as its underlying calendar, such as for determining leap years. Do not use the result of this method with a calendar other than a default GregorianCalendar. Note: In general, clients should use Calendar.get(ZONE_OFFSET) + Calendar.get(DST_OFFSET) instead of calling this method.", "history": "Added in API level 1", "FullName": "public int getOffset (int era, int year, int month, int day, int dayOfWeek, int millis)"}}, "Inheritance": ["@B_java#util#TimeZone_E@"], "ClassName": "java.util.SimpleTimeZone", "ClassDesc": "SimpleTimeZone is a concrete subclass of TimeZone that represents a time zone for use with a Gregorian calendar. The class holds an offset from GMT, called raw offset, and start and end rules for a daylight saving time schedule. Since it only holds single values for each, it cannot handle historical changes in the offset from GMT and the daylight saving schedule, except that the @B_java#util#SimpleTimeZone#setStartYear_E@ method can specify the year when the daylight saving time schedule starts in effect. To construct a SimpleTimeZone with a daylight saving time schedule, the schedule can be described with a set of rules, start-rule and end-rule. A day when daylight saving time starts or ends is specified by a combination of month, day-of-month, and day-of-week values. The month value is represented by a Calendar @B_java#util#Calendar#MONTH_E@ field value, such as @B_java#util#Calendar#MARCH_E@. The day-of-week value is represented by a Calendar @B_java#util#Calendar#DAY_OF_WEEK_E@ value, such as @B_java#util#Calendar#SUNDAY_E@. The meanings of value combinations are as follows. To specify an exact day of month, set the month and day-of-month to an exact value, and day-of-week to zero. For example, to specify March 1, set the month to @B_java#util#Calendar#MARCH_E@, day-of-month to 1, and day-of-week to 0. To specify a day of week on or after an exact day of month, set the month to an exact month value, day-of-month to the day on or after which the rule is applied, and day-of-week to a negative @B_java#util#Calendar#DAY_OF_WEEK_E@ field value. For example, to specify the second Sunday of April, set month to @B_java#util#Calendar#APRIL_E@, day-of-month to 8, and day-of-week to -@B_java#util#Calendar#SUNDAY_E@. To specify a day of the week on or before an exact day of the month, set day-of-month and day-of-week to a negative value. For example, to specify the last Wednesday on or before the 21st of March, set month to @B_java#util#Calendar#MARCH_E@, day-of-month is -21 and day-of-week is -@B_java#util#Calendar#WEDNESDAY_E@. To specify, the last day-of-week of the month, set day-of-week to a @B_java#util#Calendar#DAY_OF_WEEK_E@ value and day-of-month to -1. For example, to specify the last Sunday of October, set month to @B_java#util#Calendar#OCTOBER_E@, day-of-week to @B_java#util#Calendar#SUNDAY_E@ and day-of-month to -1. The time of the day at which daylight saving time starts or ends is specified by a millisecond value within the day. There are three kinds of modes to specify the time: @B_java#util#SimpleTimeZone#WALL_TIME_E@, @B_java#util#SimpleTimeZone#STANDARD_TIME_E@ and @B_java#util#SimpleTimeZone#UTC_TIME_E@. For example, if daylight saving time ends at 2:00 am in the wall clock time, it can be specified by 7200000 milliseconds in the @B_java#util#SimpleTimeZone#WALL_TIME_E@ mode. In this case, the wall clock time for an end-rule means the same thing as the daylight time. The following are examples of parameters for constructing time zone objects. setStartRule."}