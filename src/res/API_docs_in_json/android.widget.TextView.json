{"Functions": {"getShowSoftInputOnFocus()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the soft input method will be made visible when this TextView gets focused. The default is true.", "history": "Added in API level 21", "FullName": "public final boolean getShowSoftInputOnFocus ()"}, "setText(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: char array to be displayed"], ["int", "int: start index in the char array"], ["int", "int: length of char count after start"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the TextView to display the specified slice of the specified char array. You must promise that you will not change the contents of the array except for right before another call to setText(), since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.", "history": "Added in API level 1", "FullName": "public final void setText (char[] text, int start, int len)"}, "isInputMethodTarget()": {"Returns": [["boolean", "True if the TextView is a current input method target; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this text view is a current input method target. The default implementation just checks with @B_android#view#inputmethod#InputMethodManager_E@.", "history": "Added in API level 3", "FullName": "public boolean isInputMethodTarget ()"}, "setError(java.lang.CharSequence,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the right-hand compound drawable of the TextView to the specified icon and sets an error message that will be displayed in a popup when the TextView has focus. The icon and error message will be reset to null when any key events cause changes to the TextView's text. The drawable must already have had @B_android#graphics#drawable#Drawable#setBounds_E@ set on it. If the error is null, the error message will be cleared (and you should provide a null icon as well).", "history": "Added in API level 1", "FullName": "public void setError (CharSequence error, Drawable icon)"}, "getFontFeatureSettings()": {"Returns": [["@B_java#lang#String_E@", "the currently set font feature settings. Default is null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFontFeatureSettings_E@", "@B_android#graphics#Paint#setFontFeatureSettings_E@"], "Permissions": [], "Description": "Returns the font feature settings. The format is the same as the CSS font-feature-settings attribute:", "history": "Added in API level 21", "FullName": "public String getFontFeatureSettings ()"}, "setCompoundDrawablesWithIntrinsicBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Resource identifier of the left Drawable."], ["int", "int: Resource identifier of the top Drawable."], ["int", "int: Resource identifier of the right Drawable."], ["int", "int: Resource identifier of the bottom Drawable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawablesRelative_E@ or related methods.", "history": "Added in API level 3", "FullName": "public void setCompoundDrawablesWithIntrinsicBounds (int left, int top, int right, int bottom)"}, "setText(int, android.widget.TextView.BufferType)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the string resource to be displayed"], ["@B_android#widget#TextView#BufferType_E@", "TextView.BufferType: a @B_android#widget#TextView#BufferType_E@ which defines whether the text is stored as a static text, styleable/spannable text, or editable text"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@", "@B_android#widget#TextView#BufferType_E@", "@B_android#widget#TextView#setSpannableFactory_E@", "@B_android#widget#TextView#setEditableFactory_E@"], "Permissions": [], "Description": "Sets the text to be displayed using a string resource identifier and the @B_android#widget#TextView#BufferType_E@. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@.", "history": "added in API level 1", "FullName": "public final void setText (int resid, TextView.BufferType type)"}, "setMaxEms(int)": {"Returns": [], "Parameters": [["int", "int: the maximum width of TextView in terms of ems"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMaxEms_E@", "@B_android#widget#TextView#setEms_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be at most maxEms wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous maximum width configurations such as @B_android#widget#TextView#setMaxWidth_E@ or @B_android#widget#TextView#setWidth_E@.", "history": "Added in API level 1", "FullName": "public void setMaxEms (int maxEms)"}, "setFreezesText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Controls whether a frozen icicle should include the entire text data: true to include it, false to not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether this text view saves its entire text contents when freezing to an icicle, in addition to dynamic state such as cursor position. By default this is false, not saving the text. Set to true if the text in the text view is not being saved somewhere else in persistent storage (such as in a content provider) so that if the view is later thawed the user will not lose their data. For @B_android#widget#EditText_E@ it is always enabled, regardless of the value of the attribute.", "history": "Added in API level 1", "FullName": "public void setFreezesText (boolean freezesText)"}, "setMaxHeight(int)": {"Returns": [], "Parameters": [["int", "int: the maximum height of TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMaxHeight_E@", "@B_android#widget#TextView#setHeight_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be at most maxPixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous maximum height configurations such as @B_android#widget#TextView#setMaxLines_E@ or @B_android#widget#TextView#setLines_E@.", "history": "Added in API level 1", "FullName": "public void setMaxHeight (int maxPixels)"}, "setMinEms(int)": {"Returns": [], "Parameters": [["int", "int: the minimum width of TextView in terms of ems"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMinEms_E@", "@B_android#widget#TextView#setEms_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be at least minEms wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum width configurations such as @B_android#widget#TextView#setMinWidth_E@ or @B_android#widget#TextView#setWidth_E@.", "history": "Added in API level 1", "FullName": "public void setMinEms (int minEms)"}, "setElegantTextHeight(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set the paint's elegant metrics flag."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#isElegantTextHeight_E@", "@B_android#graphics#Paint#isElegantTextHeight_E@"], "Permissions": [], "Description": "Set the TextView's elegant height metrics flag. This setting selects font variants that have not been compacted to fit Latin-based vertical metrics, and also increases top and bottom bounds to provide more space.", "history": "Added in API level 21", "FullName": "public void setElegantTextHeight (boolean elegant)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setLines(int)": {"Returns": [], "Parameters": [["int", "int: the exact height of the TextView in terms of lines"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHeight_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be exactly lines tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum/maximum height configurations such as @B_android#widget#TextView#setMinLines_E@ or @B_android#widget#TextView#setMaxLines_E@. @B_android#widget#TextView#setSingleLine_E@ will set this value to 1.", "history": "Added in API level 1", "FullName": "public void setLines (int lines)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setTextSelectHandleLeft(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleLeft_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the left handle used for selecting text. The Drawable defaults to the value of the textSelectHandleLeft attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandleLeft (Drawable textSelectHandleLeft)"}, "setPadding(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the left padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the right padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setLastBaselineToBottomHeight_E@"], "Permissions": [], "Description": "Sets the padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingLeft_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingRight_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "Added in API level 1", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "getTextLocale()": {"Returns": [["@B_java#util#Locale_E@", "the default primary @B_java#util#Locale_E@ of the text in this TextView. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the default primary @B_java#util#Locale_E@ of the text in this TextView. This will always be the first member of @B_android#widget#TextView#getTextLocales_E@.", "history": "Added in API level 17", "FullName": "public Locale getTextLocale ()"}, "getImeOptions()": {"Returns": [["int", "the type of the IME"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeOptions_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Get the type of the Input Method Editor (IME).", "history": "Added in API level 3", "FullName": "public int getImeOptions ()"}, "setTextCursorDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextCursorDrawable_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the text cursor. The Drawable defaults to the value of the textCursorDrawable attribute. Note that any change applied to the cursor Drawable will not be visible until the cursor is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextCursorDrawable (Drawable textCursorDrawable)"}, "showContextMenu()": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view.", "history": "Added in API level 1", "FullName": "public boolean showContextMenu ()"}, "isHorizontallyScrollable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHorizontallyScrolling_E@"], "Permissions": [], "Description": "Returns whether the text is allowed to be wider than the View. If false, the text will be wrapped to the width of the View.", "history": "Added in API level 29", "FullName": "public final boolean isHorizontallyScrollable ()"}, "getAutoSizeMaxTextSize()": {"Returns": [["int", "the current auto-size maximum text size in pixels (the default is 112sp). Note that if auto-size has not been configured this function returns -1."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithPresetSizes_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int getAutoSizeMaxTextSize ()"}, "setLastBaselineToBottomHeight(int)": {"Returns": [], "Parameters": [["int", "int: distance between last baseline to bottom of the container in pixels This units of this value are pixels. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getLastBaselineToBottomHeight_E@", "@B_android#widget#TextView#setFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setPadding_E@", "@B_android#widget#TextView#setPaddingRelative_E@"], "Permissions": [], "Description": "Updates the bottom padding of the TextView so that lastBaselineToBottomHeight is the distance between the bottom of the TextView and the last line's baseline. FontMetrics.bottom or FontMetrics.descent was already greater than lastBaselineToBottomHeight, the bottom padding is not updated. Moreover since this function sets the bottom padding, if the height of the TextView is less than the sum of top padding, line height and bottom padding, bottom of the text will be clipped.", "history": "Added in API level 28", "FullName": "public void setLastBaselineToBottomHeight (int lastBaselineToBottomHeight)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle trackball motion events. The relative movement of the trackball since the last event can be retrieve with @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@. These are normalized so that a movement of 1 corresponds to the user pressing one DPAD key (so they will often be fractional values, representing the more fine-grained movement information available from a trackball).", "history": "Added in API level 1", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "setTypeface(android.graphics.Typeface,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: This value may be null."], ["int", "int: Value is @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@, or @B_android#graphics#Typeface#BOLD_ITALIC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.", "history": "Added in API level 1", "FullName": "public void setTypeface (Typeface tf, int style)"}, "getCompoundPaddingBottom()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bottom padding of the view, plus space for the bottom Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingBottom ()"}, "getInputExtras(boolean)": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: If true, the extras will be created if they don't already exist. Otherwise, null will be returned if none have been created."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setInputExtras_E@", "@B_android#view#inputmethod#EditorInfo#extras_E@"], "Permissions": [], "Description": "Retrieve the input extras currently associated with the text view, which can be viewed as well as modified.", "history": "Added in API level 3", "FullName": "public Bundle getInputExtras (boolean create)"}, "setTextAppearance(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the style to apply"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text appearance from the specified style resource. Use a framework-defined TextAppearance style like @B_android#R#style#TextAppearance_Material_Body1_E@ or see @B_android#R#styleable#TextAppearance_E@ for the set of attributes that can be used in a custom style.", "history": "Added in API level 23", "FullName": "public void setTextAppearance (int resId)"}, "getShadowDx()": {"Returns": [["float", "the horizontal offset of the shadow layer"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setShadowLayer_E@"], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public float getShadowDx ()"}, "getMaxWidth()": {"Returns": [["int", "the maximum width of TextView in terms of pixels. -1 if the maximum width is not defined in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMaxWidth_E@", "@B_android#widget#TextView#setWidth_E@"], "Permissions": [], "Description": "Returns the maximum width of TextView in terms of pixels or -1 if the maximum width was set using @B_android#widget#TextView#setMaxEms_E@ or @B_android#widget#TextView#setEms_E@.", "history": "Added in API level 16", "FullName": "public int getMaxWidth ()"}, "getMaxHeight()": {"Returns": [["int", "the maximum height of TextView in terms of pixels or -1 if the maximum height is not defined in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMaxHeight_E@", "@B_android#widget#TextView#setHeight_E@"], "Permissions": [], "Description": "Returns the maximum height of TextView in terms of pixels or -1 if the maximum height was set using @B_android#widget#TextView#setMaxLines_E@ or @B_android#widget#TextView#setLines_E@.", "history": "Added in API level 16", "FullName": "public int getMaxHeight ()"}, "getLinksClickable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the movement method will automatically be set to @B_android#text#method#LinkMovementMethod_E@ if @B_android#widget#TextView#setAutoLinkMask_E@ has been set to nonzero and links are detected in @B_android#widget#TextView#setText_E@. The default is true.", "history": "Added in API level 1", "FullName": "public final boolean getLinksClickable ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "getMaxLines()": {"Returns": [["int", "the maximum height of TextView in terms of number of lines. -1 if the maximum height is not defined in lines."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMaxLines_E@", "@B_android#widget#TextView#setLines_E@"], "Permissions": [], "Description": "Returns the maximum height of TextView in terms of number of lines or -1 if the maximum height was set using @B_android#widget#TextView#setMaxHeight_E@ or @B_android#widget#TextView#setHeight_E@.", "history": "Added in API level 16", "FullName": "public int getMaxLines ()"}, "TextView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TextView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text displayed by the text view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the text that TextView is displaying. If @B_android#widget#TextView#setText_E@ was called with an argument of @B_android#widget#TextView#BufferType#SPANNABLE_E@ or @B_android#widget#TextView#BufferType#EDITABLE_E@, you can cast the return value from this method to Spannable or Editable, respectively. The content of the return value should not be modified. If you want a modifiable one, you should make your own copy first.", "history": "Added in API level 1", "FullName": "public CharSequence getText ()"}, "removeTextChangedListener(android.text.TextWatcher)": {"Returns": [], "Parameters": [["@B_android#text#TextWatcher_E@", "TextWatcher no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified TextWatcher from the list of those whose methods are called whenever this TextView's text changes.", "history": "Added in API level 1", "FullName": "public void removeTextChangedListener (TextWatcher watcher)"}, "getMinHeight()": {"Returns": [["int", "the minimum height of TextView in terms of pixels or -1 if the minimum height is not defined in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMinHeight_E@", "@B_android#widget#TextView#setHeight_E@"], "Permissions": [], "Description": "Returns the minimum height of TextView in terms of pixels or -1 if the minimum height was set using @B_android#widget#TextView#setMinLines_E@ or @B_android#widget#TextView#setLines_E@.", "history": "Added in API level 16", "FullName": "public int getMinHeight ()"}, "setLineSpacing(float,float)": {"Returns": [], "Parameters": [["float", "float: The value in pixels that should be added to each line other than the last line. This will be applied after the multiplier"], ["float", "float: The value by which each line height other than the last line will be multiplied by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets line spacing for this TextView. Each line other than the last line will have its height multiplied by mult and have add added to it.", "history": "Added in API level 1", "FullName": "public void setLineSpacing (float add, float mult)"}, "clearComposingText()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#inputmethod#BaseInputConnection#removeComposingSpans_E@ to remove any IME composing state from this text view.", "history": "Added in API level 3", "FullName": "public void clearComposingText ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setCustomSelectionActionModeCallback(android.view.ActionMode.Callback)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If provided, this ActionMode.Callback will be used to create the ActionMode when text selection is initiated in this View. The standard implementation populates the menu with a subset of Select All, Cut, Copy, Paste, Replace and Share actions, depending on what this View supports. A custom implementation can add new entries in the default menu in its @B_android#view#ActionMode#Callback#onPrepareActionMode_E@ method. The default actions can also be removed from the menu using @B_android#view#Menu#removeItem_E@ and passing @B_android#R#id#selectAll_E@, @B_android#R#id#cut_E@, @B_android#R#id#copy_E@, @B_android#R#id#paste_E@, @B_android#R#id#replaceText_E@ or @B_android#R#id#shareText_E@ ids as parameters. Returning false from @B_android#view#ActionMode#Callback#onCreateActionMode_E@ will prevent the action mode from being started. Action click events should be handled by the custom implementation of @B_android#view#ActionMode#Callback#onActionItemClicked_E@. Note that text selection mode is not started when a TextView receives focus and the @B_android#R#attr#selectAllOnFocus_E@ flag has been set. The content is highlighted in that case, to allow for quick replacement.", "history": "Added in API level 11", "FullName": "public void setCustomSelectionActionModeCallback (ActionMode.Callback actionModeCallback)"}, "getLeftFadingEdgeStrength()": {"Returns": [["float", "the intensity of the left fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the left faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 1", "FullName": "protected float getLeftFadingEdgeStrength ()"}, "onKeyPreIme(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle a key event before it is processed by any input method associated with the view hierarchy. This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.", "history": "added in API level 3", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "setPaddingRelative(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the start padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the end padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setLastBaselineToBottomHeight_E@"], "Permissions": [], "Description": "Sets the relative padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingStart_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingEnd_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "Added in API level 16", "FullName": "public void setPaddingRelative (int start, int top, int end, int bottom)"}, "cancelLongPress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels a pending long press. Your subclass can use this if you want the context menu to come up if the user presses and holds at the same place, but you don't want it to come up if they press and then move around enough to cause scrolling.", "history": "Added in API level 1", "FullName": "public void cancelLongPress ()"}, "setLineHeight(int)": {"Returns": [], "Parameters": [["int", "int: the line height in pixels This units of this value are pixels. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@", "@B_android#widget#TextView#getLineSpacingExtra_E@"], "Permissions": [], "Description": "Sets an explicit line height for this TextView. This is equivalent to the vertical distance between subsequent baselines in the TextView.", "history": "Added in API level 28", "FullName": "public void setLineHeight (int lineHeight)"}, "setTextSelectHandleRight(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleRight_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the right handle used for selecting text. The Drawable defaults to the value of the textSelectHandleRight attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandleRight (int textSelectHandleRight)"}, "beginBatchEdit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void beginBatchEdit ()"}, "setTypeface(android.graphics.Typeface, int)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface no parameter comment This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed, and turns on the fake bold and italic bits in the Paint if the Typeface that you provided does not have all the bits in the style that you specified.", "history": "added in API level 1", "FullName": "public void setTypeface (Typeface tf, int style)"}, "setImeActionLabel(java.lang.CharSequence,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getImeActionLabel_E@", "@B_android#widget#TextView#getImeActionId_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Change the custom IME action associated with the text view, which will be reported to an IME with @B_android#view#inputmethod#EditorInfo#actionLabel_E@ and @B_android#view#inputmethod#EditorInfo#actionId_E@ when it has focus.", "history": "Added in API level 3", "FullName": "public void setImeActionLabel (CharSequence label, int actionId)"}, "computeVerticalScrollRange()": {"Returns": [["int", "the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollExtent_E@ and @B_android#view#View#computeVerticalScrollOffset_E@.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollRange ()"}, "setSingleLine(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If true, sets the properties of this field (number of lines, horizontally scrolling, transformation method) to be for a single-line input; if false, restores these to the default conditions. Note that the default conditions are not necessarily those that were in effect prior this method, and you may want to reset these properties to your custom values.", "history": "Added in API level 1", "FullName": "public void setSingleLine (boolean singleLine)"}, "getTransformationMethod()": {"Returns": [["@B_android#text#method#TransformationMethod_E@", "the current transformation method for this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current @B_android#text#method#TransformationMethod_E@ for the TextView. This is frequently null, except for single-line and password fields.", "history": "Added in API level 1", "FullName": "public final TransformationMethod getTransformationMethod ()"}, "hasSelection()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true iff there is a selection of nonzero length inside this text view.", "history": "Added in API level 1", "FullName": "public boolean hasSelection ()"}, "setImeHintLocales(android.os.LocaleList)": {"Returns": [], "Parameters": [["@B_android#os#LocaleList_E@", "LocaleList: List of the languages that the user is supposed to switch to no matter what input method subtype is currently used. Set null to clear the current \"hint\". This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getImeHintLocales_E@", "@B_android#view#inputmethod#EditorInfo#hintLocales_E@"], "Permissions": [], "Description": "Change \"hint\" locales associated with the text view, which will be reported to an IME with @B_android#view#inputmethod#EditorInfo#hintLocales_E@ when it has focus. Starting with Android O, this also causes internationalized listeners to be created (or change locale) based on the first locale in the input locale list. @B_android#view#inputmethod#InputMethodManager#restartInput_E@.", "history": "Added in API level 24", "FullName": "public void setImeHintLocales (LocaleList hintLocales)"}, "endBatchEdit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void endBatchEdit ()"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "Added in API level 1", "FullName": "protected int[] onCreateDrawableState (int extraSpace)"}, "onCommitCompletion(android.view.inputmethod.CompletionInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo: The auto complete text the user has selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a text completion from the current input method, provided by it calling @B_android#view#inputmethod#InputConnection#commitCompletion_E@. The default implementation does nothing; text views that are supporting auto-completion should override this to do their desired behavior.", "history": "Added in API level 3", "FullName": "public void onCommitCompletion (CompletionInfo text)"}, "getAutofillValue()": {"Returns": [["@B_android#view#autofill#AutofillValue_E@", "current text, null if the text is not editable"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getAutofillValue_E@"], "Permissions": [], "Description": "Gets the @B_android#widget#TextView_E@'s current text for AutoFill. The value is trimmed to 100K chars if longer.", "history": "Added in API level 26", "FullName": "public AutofillValue getAutofillValue ()"}, "onScrollChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current horizontal scroll origin."], ["int", "int: Current vertical scroll origin."], ["int", "int: Previous horizontal scroll origin."], ["int", "int: Previous vertical scroll origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). This is typically as a result of @B_android#view#View#scrollBy_E@ or @B_android#view#View#scrollTo_E@ having been called.", "history": "added in API level 1", "FullName": "protected void onScrollChanged (int horiz, int vert, int oldHoriz, int oldVert)"}, "setCompoundDrawableTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: the tint to apply, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getCompoundDrawableTintList_E@", "@B_android#graphics#drawable#Drawable#setTintList_E@"], "Permissions": [], "Description": "Applies a tint to the compound drawables. Does not modify the current tint mode, which is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@ by default. Subsequent calls to @B_android#widget#TextView#setCompoundDrawables_E@ and related methods will automatically mutate the drawables and apply the specified tint and tint mode using @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 23", "FullName": "public void setCompoundDrawableTintList (ColorStateList tint)"}, "didTouchFocusSelect()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true, only while processing a touch gesture, if the initial touch down event caused focus to move to the text view and as a result its selection changed. Only valid while processing the touch gesture of interest, in an editable text view.", "history": "Added in API level 3", "FullName": "public boolean didTouchFocusSelect ()"}, "getEllipsize()": {"Returns": [["@B_android#text#TextUtils#TruncateAt_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns where, if anywhere, words that are longer than the view is wide should be ellipsized.", "history": "Added in API level 1", "FullName": "public TextUtils.TruncateAt getEllipsize ()"}, "onProvideStructure(android.view.ViewStructure)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure: Fill in with structured view data. The default implementation fills in all data that can be inferred from the view itself."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when assist structure is being retrieved from a view as part of @B_android#app#Activity#onProvideAssistData_E@.", "history": "added in API level 23", "FullName": "public void onProvideStructure (ViewStructure structure)"}, "setCursorVisible(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#isCursorVisible_E@"], "Permissions": [], "Description": "Set whether the cursor is visible. The default is true. Note that this property only makes sense for editable TextView.", "history": "Added in API level 1", "FullName": "public void setCursorVisible (boolean visible)"}, "setFontFeatureSettings(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: font feature settings represented as CSS compatible string This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getFontFeatureSettings_E@", "@B_android#graphics#Paint#getFontFeatureSettings_E@"], "Permissions": [], "Description": "Sets font feature settings. The format is the same as the CSS font-feature-settings attribute:", "history": "Added in API level 21", "FullName": "public void setFontFeatureSettings (String fontFeatureSettings)"}, "setShowSoftInputOnFocus(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the soft input method will be made visible when this TextView gets focused. The default is true.", "history": "Added in API level 21", "FullName": "public final void setShowSoftInputOnFocus (boolean show)"}, "isSingleLine()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the text is constrained to a single horizontally scrolling line ignoring new line characters instead of letting it wrap onto multiple lines.", "history": "Added in API level 29", "FullName": "public boolean isSingleLine ()"}, "getLetterSpacing()": {"Returns": [["float", "The text letter-space value in ems."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLetterSpacing_E@", "@B_android#graphics#Paint#setLetterSpacing_E@"], "Permissions": [], "Description": "Gets the text letter-space value, which determines the spacing between characters. The value returned is in ems. Normally, this value is 0.0.", "history": "Added in API level 21", "FullName": "public float getLetterSpacing ()"}, "getCompoundDrawablePadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the padding between the compound drawables and the text.", "history": "Added in API level 1", "FullName": "public int getCompoundDrawablePadding ()"}, "getFirstBaselineToTopHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFirstBaselineToTopHeight_E@"], "Permissions": [], "Description": "Returns the distance between the first text baseline and the top of this TextView.", "history": "Added in API level 28", "FullName": "public int getFirstBaselineToTopHeight ()"}, "getMinEms()": {"Returns": [["int", "the minimum width of TextView in terms of ems. -1 if the minimum width is not defined in ems"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMinEms_E@", "@B_android#widget#TextView#setEms_E@"], "Permissions": [], "Description": "Returns the minimum width of TextView in terms of ems or -1 if the minimum width was set using @B_android#widget#TextView#setMinWidth_E@ or @B_android#widget#TextView#setWidth_E@.", "history": "Added in API level 16", "FullName": "public int getMinEms ()"}, "invalidateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidates the specified Drawable.", "history": "Added in API level 1", "FullName": "public void invalidateDrawable (Drawable drawable)"}, "autofill(android.view.autofill.AutofillValue)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: value to be autofilled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically fills the content of this view with the value. Views support the Autofill Framework mainly by: Providing the metadata defining what the view means and how it can be autofilled. Implementing the methods that autofill the view. @B_android#view#View#onProvideAutofillStructure_E@ is responsible for the former, this method is responsible for latter. This method does nothing by default, but when overridden it typically: For example, a text-field view could implement the method this way: If the value is updated asynchronously, the next call to @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ must happen @B_android#view#View#getAutofillValue_E@ must be equal to the value passed to it, otherwise the view will not be highlighted as autofilled.", "history": "Added in API level 26", "FullName": "public void autofill (AutofillValue value)"}, "getExtendedPaddingBottom()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extended bottom padding of the view, including both the bottom Drawable if any and any extra space to keep more than maxLines of text from showing. It is only valid to call this after measuring.", "history": "Added in API level 1", "FullName": "public int getExtendedPaddingBottom ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "setTextMetricsParams(android.text.PrecomputedText.Params)": {"Returns": [], "Parameters": [["@B_android#text#PrecomputedText#Params_E@", "PrecomputedText.Params: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#text#PrecomputedText_E@"], "Permissions": [], "Description": "Apply the text layout parameter. Update the TextView parameters to be compatible with @B_android#text#PrecomputedText#Params_E@.", "history": "Added in API level 28", "FullName": "public void setTextMetricsParams (PrecomputedText.Params params)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onCheckIsTextEditor()": {"Returns": [["boolean", "Returns true if this view is a text editor, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether the called view is a text editor, in which case it would make sense to automatically display a soft input window for it. Subclasses should override this if they implement @B_android#view#View#onCreateInputConnection_E@ to return true if a call on that method would return a non-null InputConnection, and they are really a first-class editor that the user would normally start typing on when the go into a window containing your view. The default implementation always returns false. This does not mean that its @B_android#view#View#onCreateInputConnection_E@ will not be called or the user can not otherwise perform edits on your view; it is just a hint to the system that this is not the primary purpose of this view.", "history": "Added in API level 3", "FullName": "public boolean onCheckIsTextEditor ()"}, "isSuggestionsEnabled()": {"Returns": [["boolean", "true if the suggestions popup window is enabled, based on the inputType."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether or not suggestions are enabled on this TextView. The suggestions are generated by the IME or by the spell checker as the user types. This is done by adding @B_android#text#style#SuggestionSpan_E@s to the text. When suggestions are enabled (default), this list of suggestions will be displayed when the user asks for them on these parts of the text. This value depends on the inputType of this TextView. The class of the input type must be @B_android#text#InputType#TYPE_CLASS_TEXT_E@. In addition, the type variation must be one of @B_android#text#InputType#TYPE_TEXT_VARIATION_NORMAL_E@, @B_android#text#InputType#TYPE_TEXT_VARIATION_EMAIL_SUBJECT_E@, @B_android#text#InputType#TYPE_TEXT_VARIATION_LONG_MESSAGE_E@, @B_android#text#InputType#TYPE_TEXT_VARIATION_SHORT_MESSAGE_E@ or @B_android#text#InputType#TYPE_TEXT_VARIATION_WEB_EDIT_TEXT_E@. And finally, the @B_android#text#InputType#TYPE_TEXT_FLAG_NO_SUGGESTIONS_E@ flag must", "history": "Added in API level 14", "FullName": "public boolean isSuggestionsEnabled ()"}, "setText(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the string resource to be displayed"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@"], "Permissions": [], "Description": "Sets the text to be displayed using a string resource identifier.", "history": "Added in API level 1", "FullName": "public final void setText (int resid)"}, "getFontVariationSettings()": {"Returns": [["@B_java#lang#String_E@", "the currently set font variation settings. Returns null if no variation is specified."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFontVariationSettings_E@", "@B_android#graphics#Paint#setFontVariationSettings_E@"], "Permissions": [], "Description": "Returns the font variation settings.", "history": "Added in API level 26", "FullName": "public String getFontVariationSettings ()"}, "setTextAppearance(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#TextView#setTextAppearance_E@ instead. Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public void setTextAppearance (Context context, int resId)"}, "bringPointIntoView(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the point, specified by the offset, into the view if it is needed. This has to be called after layout. Returns true if anything changed.", "history": "Added in API level 3", "FullName": "public boolean bringPointIntoView (int offset)"}, "getFreezesText()": {"Returns": [["boolean", "Returns true if text is included, false if it isn't."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFreezesText_E@"], "Permissions": [], "Description": "Return whether this text view is including its entire text contents in frozen icicles. For @B_android#widget#EditText_E@ it always returns true.", "history": "Added in API level 1", "FullName": "public boolean getFreezesText ()"}, "onEndBatchEdit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a request to end a batch of edit operations through a call to link @B_android#widget#TextView#endBatchEdit_E@.", "history": "Added in API level 3", "FullName": "public void onEndBatchEdit ()"}, "setFrame(int,int,int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onCreateInputConnection(android.view.inputmethod.EditorInfo)": {"Returns": [["@B_android#view#inputmethod#InputConnection_E@", "no returns description in source"]], "Parameters": [["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Fill in with attribute information about the connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new InputConnection for an InputMethod to interact with the view. The default implementation returns null, since it doesn't support input methods. You can override this to implement such support. This is only needed for views that take focus and text input. When implementing this, you probably also want to implement @B_android#view#View#onCheckIsTextEditor_E@ to indicate you will return a non-null InputConnection. Also, take good care to fill in the @B_android#view#inputmethod#EditorInfo_E@ object correctly and in its entirety, so that the connected IME can rely on its values. For example, @B_android#view#inputmethod#EditorInfo#initialSelStart_E@ and @B_android#view#inputmethod#EditorInfo#initialSelEnd_E@ members must be filled in with the correct cursor position for IMEs to work correctly with your application.", "history": "Added in API level 3", "FullName": "public InputConnection onCreateInputConnection (EditorInfo outAttrs)"}, "setAutoSizeTextTypeUniformWithPresetSizes(int[],int)": {"Returns": [], "Parameters": [["int[]", "int: an int array of sizes in pixels This value must never be null."], ["int", "int: the desired dimension unit for the preset sizes above. See @B_android#util#TypedValue_E@ for the possible dimension units"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if all of the presetSizes are invalid."]], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeWithDefaults_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@", "@B_android#widget#TextView#getAutoSizeMinTextSize_E@", "@B_android#widget#TextView#getAutoSizeMaxTextSize_E@", "@B_android#widget#TextView#getAutoSizeTextAvailableSizes_E@"], "Permissions": [], "Description": "Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. If at least one value from the presetSizes is valid then the type of auto-size is set to @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@.", "history": "Added in API level 26", "FullName": "public void setAutoSizeTextTypeUniformWithPresetSizes (int[] presetSizes, int unit)"}, "getMinWidth()": {"Returns": [["int", "the minimum width of TextView in terms of pixels or -1 if the minimum width is not defined in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMinWidth_E@", "@B_android#widget#TextView#setWidth_E@"], "Permissions": [], "Description": "Returns the minimum width of TextView in terms of pixels or -1 if the minimum width was set using @B_android#widget#TextView#setMinEms_E@ or @B_android#widget#TextView#setEms_E@.", "history": "Added in API level 16", "FullName": "public int getMinWidth ()"}, "setKeyListener(android.text.method.KeyListener)": {"Returns": [], "Parameters": [["@B_android#text#method#KeyListener_E@", "KeyListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the key listener to be used with this TextView. This can be null to disallow user input. Note that this method has significant and subtle interactions with soft keyboards and other input method: see @B_android#text#method#KeyListener#getInputType_E@ for important details. Calling this method will replace the current content type of the text view with the content type returned by the key listener. Be warned that if you want a TextView with a key listener or movement method not to be focusable, or if you want a TextView without a key listener or movement method to be focusable, you must call @B_android#view#View#setFocusable_E@ again after calling this to get the focusability back the way you want it.", "history": "Added in API level 1", "FullName": "public void setKeyListener (KeyListener input)"}, "setText(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: char array to be displayed"], ["int", "int: start index in the char array"], ["int", "int: length of char count after start"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the TextView to display the specified slice of the specified char array. You must promise that you will not change the contents of the array except for right before another call to setText(), since the TextView has no way to know that the text has changed and that it needs to invalidate and re-layout.", "history": "added in API level 1", "FullName": "public final void setText (char[] text, int start, int len)"}, "setMinHeight(int)": {"Returns": [], "Parameters": [["int", "int: the minimum height of TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMinHeight_E@", "@B_android#widget#TextView#setHeight_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be at least minPixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum height configurations such as @B_android#widget#TextView#setMinLines_E@ or @B_android#widget#TextView#setLines_E@. The value given here is different than @B_android#view#View#setMinimumHeight_E@. Between minHeight and the value set in @B_android#view#View#setMinimumHeight_E@, the greater one is used to decide the final height.", "history": "Added in API level 1", "FullName": "public void setMinHeight (int minPixels)"}, "setCompoundDrawablesRelativeWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawables_E@ or related methods.", "history": "Added in API level 17", "FullName": "public void setCompoundDrawablesRelativeWithIntrinsicBounds (Drawable start, Drawable top, Drawable end, Drawable bottom)"}, "setTextScaleX(float)": {"Returns": [], "Parameters": [["float", "float: The horizontal scale factor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the horizontal scale factor for text. The default value is 1.0. Values greater than 1.0 stretch the text wider. Values less than 1.0 make the text narrower. By default, this value is 1.0.", "history": "Added in API level 1", "FullName": "public void setTextScaleX (float size)"}, "getLineSpacingExtra()": {"Returns": [["float", "the extra space that is added to the height of each lines of this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@", "@B_android#widget#TextView#getLineSpacingMultiplier_E@"], "Permissions": [], "Description": "Gets the line spacing extra space", "history": "Added in API level 16", "FullName": "public float getLineSpacingExtra ()"}, "setSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the view must be selected, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selection state of this view. A view can be selected or not. Note that selection is not the same as focus. Views are typically selected in the context of an AdapterView like ListView or GridView; the selected view is the view that is highlighted.", "history": "Added in API level 1", "FullName": "public void setSelected (boolean selected)"}, "getIncludeFontPadding()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setIncludeFontPadding_E@"], "Permissions": [], "Description": "Gets whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent.", "history": "Added in API level 16", "FullName": "public boolean getIncludeFontPadding ()"}, "resolveDrawables()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses will need to override this method to implement their own way of resolving drawables depending on the layout direction. A call to the super method will be required from the subclasses implementation.", "history": "Since: API Level 14", "FullName": "protected void resolveDrawables ()"}, "getRightFadingEdgeStrength()": {"Returns": [["float", "the intensity of the right fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the right faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 1", "FullName": "protected float getRightFadingEdgeStrength ()"}, "setMaxLines(int)": {"Returns": [], "Parameters": [["int", "int: the maximum height of TextView in terms of number of lines"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMaxLines_E@", "@B_android#widget#TextView#setLines_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be at most maxLines tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous maximum height configurations such as @B_android#widget#TextView#setMaxHeight_E@ or @B_android#widget#TextView#setLines_E@.", "history": "Added in API level 1", "FullName": "public void setMaxLines (int maxLines)"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "onCommitCorrection(android.view.inputmethod.CorrectionInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CorrectionInfo_E@", "CorrectionInfo: The auto correct info about the text that was corrected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a text auto-correction (such as fixing a typo using a dictionary) from the current input method, provided by it calling @B_android#view#inputmethod#InputConnection#commitCorrection_E@. The default implementation flashes the background of the corrected word to provide feedback to the user.", "history": "Added in API level 11", "FullName": "public void onCommitCorrection (CorrectionInfo info)"}, "isPaddingOffsetRequired()": {"Returns": [["boolean", "True if padding offset must be applied, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the View draws content inside its padding and enables fading edges, it needs to support padding offsets. Padding offsets are added to the fading edges to extend the length of the fade so that it covers pixels drawn inside the padding. Subclasses of this class should override this method if they need to draw content inside the padding.", "history": "Added in API level 2", "FullName": "protected boolean isPaddingOffsetRequired ()"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@"], "Permissions": [], "Description": "Sets the horizontal alignment of the text and the vertical gravity that will be used when there is extra space in the TextView beyond what is required for the text itself.", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity)"}, "getFocusedRect(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle to fill in, in this view's coordinates."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When a view has focus and the user navigates away from it, the next view is searched for starting from the rectangle filled in by this method. By default, the rectangle is the @B_android#view#View#getDrawingRect_E@) of the view. However, if your view maintains some idea of internal selection, such as a cursor, or a selected row or column, you should override this method and fill in a more specific rectangle.", "history": "Added in API level 1", "FullName": "public void getFocusedRect (Rect r)"}, "length()": {"Returns": [["int", "The length of the text managed by the TextView in characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length, in characters, of the text managed by this TextView", "history": "Added in API level 1", "FullName": "public int length ()"}, "onEditorAction(int)": {"Returns": [], "Parameters": [["int", "int: The code of the action being performed."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setOnEditorActionListener_E@"], "Permissions": [], "Description": "Called when an attached input method calls @B_android#view#inputmethod#InputConnection#performEditorAction_E@ for this text view. The default implementation will call your action listener supplied to @B_android#widget#TextView#setOnEditorActionListener_E@, or perform a standard operation for @B_android#view#inputmethod#EditorInfo#IME_ACTION_NEXT_E@, @B_android#view#inputmethod#EditorInfo#IME_ACTION_PREVIOUS_E@, or @B_android#view#inputmethod#EditorInfo#IME_ACTION_DONE_E@. For backwards compatibility, if no IME options have been set and the text view would not normally advance focus on enter, then the NEXT and DONE actions received here will be turned into an enter key down/up pair to go through the normal key handling.", "history": "Added in API level 3", "FullName": "public void onEditorAction (int actionCode)"}, "setSelectAllOnFocus(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the TextView so that when it takes focus, all the text is selected.", "history": "Added in API level 1", "FullName": "public void setSelectAllOnFocus (boolean selectAllOnFocus)"}, "getHyphenationFrequency()": {"Returns": [["int", "the current frequency of automatic hyphenation to be used when determining word breaks. Value is @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@, or @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHyphenationFrequency_E@"], "Permissions": [], "Description": "Gets the current frequency of automatic hyphenation to be used when determining word breaks.", "history": "Added in API level 23", "FullName": "public int getHyphenationFrequency ()"}, "getTotalPaddingLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total left padding of the view, including the left Drawable if any.", "history": "Added in API level 1", "FullName": "public int getTotalPaddingLeft ()"}, "getTextSelectHandle()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the text select handle drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandle_E@"], "Permissions": [], "Description": "Returns the Drawable corresponding to the selection handle used for positioning the cursor within text. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public Drawable getTextSelectHandle ()"}, "getTopPaddingOffset()": {"Returns": [["int", "The top padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the top fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getTopPaddingOffset ()"}, "moveCursorToVisibleOffset()": {"Returns": [["boolean", "True if the cursor was actually moved, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the cursor, if needed, so that it is at an offset that is visible to the user. This will not move the cursor if it represents more than one character (a selection range). This will only work if the TextView contains spannable text; otherwise it will do nothing.", "history": "Added in API level 3", "FullName": "public boolean moveCursorToVisibleOffset ()"}, "onScreenStateChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new state of the screen. Can be either @B_android#view#View#SCREEN_STATE_ON_E@ or @B_android#view#View#SCREEN_STATE_OFF_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called whenever the state of the screen this view is attached to changes. A state change will usually occurs when the screen turns on or off (whether it happens automatically or the user does it manually.)", "history": "Added in API level 16", "FullName": "public void onScreenStateChanged (int screenState)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getExtendedPaddingTop()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extended top padding of the view, including both the top Drawable if any and any extra space to keep more than maxLines of text from showing. It is only valid to call this after measuring.", "history": "Added in API level 1", "FullName": "public int getExtendedPaddingTop ()"}, "getCompoundPaddingStart()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start padding of the view, plus space for the start Drawable if any.", "history": "Added in API level 17", "FullName": "public int getCompoundPaddingStart ()"}, "showContextMenu(float,float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "Added in API level 24", "FullName": "public boolean showContextMenu (float x, float y)"}, "onScrollChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current horizontal scroll origin."], ["int", "int: Current vertical scroll origin."], ["int", "int: Previous horizontal scroll origin."], ["int", "int: Previous vertical scroll origin."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called in response to an internal scroll in this view (i.e., the view scrolled its own contents). This is typically as a result of @B_android#view#View#scrollBy_E@ or @B_android#view#View#scrollTo_E@ having been called.", "history": "Added in API level 1", "FullName": "protected void onScrollChanged (int horiz, int vert, int oldHoriz, int oldVert)"}, "setCompoundDrawablesWithIntrinsicBounds(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. Use null if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawablesRelative_E@ or related methods.", "history": "Added in API level 1", "FullName": "public void setCompoundDrawablesWithIntrinsicBounds (Drawable left, Drawable top, Drawable right, Drawable bottom)"}, "setTextSize(int,float)": {"Returns": [], "Parameters": [["int", "int: The desired dimension unit."], ["float", "float: The desired size in the given units."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default text size to a given unit and value. See @B_android#util#TypedValue_E@ for the possible dimension units. Note: if this TextView has the auto-size feature enabled than this function is no-op.", "history": "Added in API level 1", "FullName": "public void setTextSize (int unit, float size)"}, "setScroller(android.widget.Scroller)": {"Returns": [], "Parameters": [["@B_android#widget#Scroller_E@", "Scroller: A Scroller instance"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Scroller used for producing a scrolling animation", "history": "Added in API level 1", "FullName": "public void setScroller (Scroller s)"}, "setText(java.lang.CharSequence,android.widget.TextView.BufferType)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be displayed"], ["@B_android#widget#TextView#BufferType_E@", "TextView.BufferType: a @B_android#widget#TextView#BufferType_E@ which defines whether the text is stored as a static text, styleable/spannable text, or editable text"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@", "@B_android#widget#TextView#BufferType_E@", "@B_android#widget#TextView#setSpannableFactory_E@", "@B_android#widget#TextView#setEditableFactory_E@"], "Permissions": [], "Description": "Sets the text to be displayed and the @B_android#widget#TextView#BufferType_E@. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@. Subclasses overriding this method should ensure that the following post condition holds, in order to guarantee the safety of the view's measurement and layout operations: regardless of the input, after calling #setText both mText and mTransformed will be different from null.", "history": "Added in API level 1", "FullName": "public void setText (CharSequence text, TextView.BufferType type)"}, "getTextClassifier()": {"Returns": [["@B_android#view#textclassifier#TextClassifier_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#view#textclassifier#TextClassifier_E@ used by this TextView. If no TextClassifier has been set, this TextView uses the default set by the @B_android#view#textclassifier#TextClassificationManager_E@.", "history": "Added in API level 26", "FullName": "public TextClassifier getTextClassifier ()"}, "performLongClick()": {"Returns": [["boolean", "true if one of the above receivers consumed the event, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls this view's OnLongClickListener, if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event.", "history": "Added in API level 1", "FullName": "public boolean performLongClick ()"}, "setMaxWidth(int)": {"Returns": [], "Parameters": [["int", "int: the maximum width of TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMaxWidth_E@", "@B_android#widget#TextView#setWidth_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be at most maxPixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous maximum width configurations such as @B_android#widget#TextView#setMaxEms_E@ or @B_android#widget#TextView#setEms_E@.", "history": "Added in API level 1", "FullName": "public void setMaxWidth (int maxPixels)"}, "getMovementMethod()": {"Returns": [["@B_android#text#method#MovementMethod_E@", "the movement method being used for this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#method#MovementMethod_E@"], "Permissions": [], "Description": "Gets the @B_android#text#method#MovementMethod_E@ being used for this TextView, which provides positioning, scrolling, and text selection functionality. This will frequently be null for non-EditText TextViews.", "history": "Added in API level 1", "FullName": "public final MovementMethod getMovementMethod ()"}, "getShadowDy()": {"Returns": [["float", "The vertical offset of the shadow layer."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setShadowLayer_E@"], "Permissions": [], "Description": "Gets the vertical offset of the shadow layer.", "history": "Added in API level 16", "FullName": "public float getShadowDy ()"}, "getImeHintLocales()": {"Returns": [["@B_android#os#LocaleList_E@", "The current languages list \"hint\". null when no \"hint\" is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeHintLocales_E@", "@B_android#view#inputmethod#EditorInfo#hintLocales_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public LocaleList getImeHintLocales ()"}, "setTextSelectHandle(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandle_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the selection handle used for positioning the cursor within text. The Drawable defaults to the value of the textSelectHandle attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandle (int textSelectHandle)"}, "addExtraDataToAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: The info to which to add the extra data. Never null. This value must never be null."], ["@B_java#lang#String_E@", "String: A key specifying the type of extra data to add to the info. The extra data should be added to the @B_android#os#Bundle_E@ returned by the info's @B_android#view#accessibility#AccessibilityNodeInfo#getExtras_E@ method. Never null. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: A @B_android#os#Bundle_E@ holding any arguments relevant for this request. May be null if the service provided no arguments. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds extra data to an @B_android#view#accessibility#AccessibilityNodeInfo_E@ based on an explicit request for the additional data. This method only needs overloading if the node is marked as having extra data available.", "history": "Added in API level 26", "FullName": "public void addExtraDataToAccessibilityNodeInfo (AccessibilityNodeInfo info, String extraDataKey, Bundle arguments)"}, "getMarqueeRepeatLimit()": {"Returns": [["int", "the number of times the marquee animation is repeated. -1 if the animation repeats indefinitely"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMarqueeRepeatLimit_E@"], "Permissions": [], "Description": "Gets the number of times the marquee animation is repeated. Only meaningful if the TextView has marquee enabled.", "history": "Added in API level 16", "FullName": "public int getMarqueeRepeatLimit ()"}, "setInputType(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getInputType_E@", "@B_android#widget#TextView#setRawInputType_E@", "@B_android#text#InputType_E@"], "Permissions": [], "Description": "Set the type of the content with a constant as defined for @B_android#view#inputmethod#EditorInfo#inputType_E@. This will take care of changing the key listener, by calling @B_android#widget#TextView#setKeyListener_E@, to match the given content type. If the given content type is @B_android#text#InputType#TYPE_NULL_E@ then a soft keyboard will not be displayed for this text view. Note that the maximum number of displayed lines (see @B_android#widget#TextView#setMaxLines_E@) will be modified if you change the @B_android#text#InputType#TYPE_TEXT_FLAG_MULTI_LINE_E@ flag of the input type.", "history": "Added in API level 3", "FullName": "public void setInputType (int type)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "showContextMenu(float, float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "added in API level 24", "FullName": "public boolean showContextMenu (float x, float y)"}, "getEditableText()": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getText_E@"], "Permissions": [], "Description": "Return the text that TextView is displaying as an Editable object. If the text is not editable, null is returned.", "history": "Added in API level 3", "FullName": "public Editable getEditableText ()"}, "onFinishTemporaryDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after @B_android#view#View#onStartTemporaryDetach_E@ when the container is done changing the view.", "history": "Added in API level 3", "FullName": "public void onFinishTemporaryDetach ()"}, "resolveTextDirection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolve the text direction.", "history": "Since: API Level 14", "FullName": "protected void resolveTextDirection ()"}, "setTextLocales(android.os.LocaleList)": {"Returns": [], "Parameters": [["@B_android#os#LocaleList_E@", "LocaleList: the @B_android#os#LocaleList_E@ for drawing text, must not be null or empty. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setTextLocales_E@"], "Permissions": [], "Description": "Set the default @B_android#os#LocaleList_E@ of the text in this TextView to the given value. This value is used to choose appropriate typefaces for ambiguous characters (typically used for CJK locales to disambiguate Hanzi/Kanji/Hanja characters). It also affects other aspects of text display, including line breaking.", "history": "Added in API level 24", "FullName": "public void setTextLocales (LocaleList locales)"}, "setHorizontallyScrolling(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the text should be allowed to be wider than the View is. If false, it will be wrapped to the width of the View.", "history": "Added in API level 1", "FullName": "public void setHorizontallyScrolling (boolean whether)"}, "setPrivateImeOptions(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getPrivateImeOptions_E@", "@B_android#view#inputmethod#EditorInfo#privateImeOptions_E@"], "Permissions": [], "Description": "Set the private content type of the text, which is the @B_android#view#inputmethod#EditorInfo#privateImeOptions_E@ field that will be filled in when creating an input connection.", "history": "Added in API level 3", "FullName": "public void setPrivateImeOptions (String type)"}, "setMovementMethod(android.text.method.MovementMethod)": {"Returns": [], "Parameters": [["@B_android#text#method#MovementMethod_E@", "MovementMethod no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#text#method#MovementMethod_E@ for handling arrow key movement for this TextView. This can be null to disallow using the arrow keys to move the cursor or scroll the view. Be warned that if you want a TextView with a key listener or movement method not to be focusable, or if you want a TextView without a key listener or movement method to be focusable, you must call @B_android#view#View#setFocusable_E@ again after calling this to get the focusability back the way you want it.", "history": "Added in API level 1", "FullName": "public final void setMovementMethod (MovementMethod movement)"}, "getCompoundDrawableTintMode()": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "the blending mode used to apply the tint to the compound drawables"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCompoundDrawableTintMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the compound drawables, if specified.", "history": "Added in API level 23", "FullName": "public PorterDuff.Mode getCompoundDrawableTintMode ()"}, "onResolvePointerIcon(android.view.MotionEvent,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent from a mouse"], ["int", "int: The index of the pointer for which to retrieve the @B_android#view#PointerIcon_E@. This will be between 0 and @B_android#view#MotionEvent#getPointerCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews).", "history": "Added in API level 24", "FullName": "public PointerIcon onResolvePointerIcon (MotionEvent event, int pointerIndex)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "setExtractedText(android.view.inputmethod.ExtractedText)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#ExtractedText_E@", "ExtractedText no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply to this text view the given extracted text, as previously returned by @B_android#widget#TextView#extractText_E@.", "history": "Added in API level 3", "FullName": "public void setExtractedText (ExtractedText text)"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 1", "FullName": "public void setEnabled (boolean enabled)"}, "getCompoundDrawableTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the tint applied to the compound drawables"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCompoundDrawableTintList_E@"], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public ColorStateList getCompoundDrawableTintList ()"}, "getSelectionStart()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#getSelectionStart_E@.", "history": "Added in API level 1", "FullName": "public int getSelectionStart ()"}, "setMinLines(int)": {"Returns": [], "Parameters": [["int", "int: the minimum height of TextView in terms of number of lines"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMinLines_E@", "@B_android#widget#TextView#setLines_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be at least minLines tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides other previous minimum height configurations such as @B_android#widget#TextView#setMinHeight_E@ or @B_android#widget#TextView#setHeight_E@. @B_android#widget#TextView#setSingleLine_E@ will set this value to 1.", "history": "Added in API level 1", "FullName": "public void setMinLines (int minLines)"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "setBreakStrategy(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_SIMPLE_E@, @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_HIGH_QUALITY_E@, or @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_BALANCED_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getBreakStrategy_E@", "@B_android#widget#TextView#setHyphenationFrequency_E@"], "Permissions": [], "Description": "Sets the break strategy for breaking paragraphs into lines. The default value for TextView is @B_android#text#Layout#BREAK_STRATEGY_HIGH_QUALITY_E@, and the default value for EditText is @B_android#text#Layout#BREAK_STRATEGY_SIMPLE_E@, the latter to avoid the text \"dancing\" when being edited. Enabling hyphenation with either using @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@ or @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@ while line breaking is set to one of @B_android#text#Layout#BREAK_STRATEGY_BALANCED_E@, @B_android#text#Layout#BREAK_STRATEGY_HIGH_QUALITY_E@ improves the structure of text layout however has performance impact and requires more time to do the text layout.", "history": "Added in API level 23", "FullName": "public void setBreakStrategy (int breakStrategy)"}, "setImeActionLabel(java.lang.CharSequence, int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getImeActionLabel_E@", "@B_android#widget#TextView#getImeActionId_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Change the custom IME action associated with the text view, which will be reported to an IME with @B_android#view#inputmethod#EditorInfo#actionLabel_E@ and @B_android#view#inputmethod#EditorInfo#actionId_E@ when it has focus.", "history": "added in API level 3", "FullName": "public void setImeActionLabel (CharSequence label, int actionId)"}, "getFilters()": {"Returns": [["@B_android#text#InputFilter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current list of input filters.", "history": "Added in API level 1", "FullName": "public InputFilter[] getFilters ()"}, "getLayout()": {"Returns": [["@B_android#text#Layout_E@", "The Layout that is currently being used to display the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#text#Layout_E@ that is currently being used to display the text. This value can be null if the text or width has recently changed.", "history": "Added in API level 1", "FullName": "public final Layout getLayout ()"}, "getOffsetForPosition(float,float)": {"Returns": [["int", "the character offset for the character whose position is closest to the specified position. Returns -1 if there is no layout."]], "Parameters": [["float", "float: The horizontal absolute position of a point on screen"], ["float", "float: The vertical absolute position of a point on screen"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character offset closest to the specified absolute position. A typical use case is to pass the result of @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@ to this method.", "history": "Added in API level 14", "FullName": "public int getOffsetForPosition (float x, float y)"}, "setHint(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text to be displayed when the text of the TextView is empty. Null means to use the normal empty text. The hint does not currently participate in determining the size of the view.", "history": "Added in API level 1", "FullName": "public final void setHint (CharSequence hint)"}, "onKeyShortcut(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called on the focused view when a key shortcut event is not handled. Override this method to implement local key shortcuts for the View. Key shortcuts can also be implemented by setting the @B_android#view#MenuItem#setShortcut_E@ property of menu items.", "history": "added in API level 1", "FullName": "public boolean onKeyShortcut (int keyCode, KeyEvent event)"}, "getPaintFlags()": {"Returns": [["int", "The flags on the Paint being used to display the text."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#getFlags_E@"], "Permissions": [], "Description": "Gets the flags on the Paint being used to display the text.", "history": "Added in API level 1", "FullName": "public int getPaintFlags ()"}, "setFirstBaselineToTopHeight(int)": {"Returns": [], "Parameters": [["int", "int: distance between first baseline to top of the container in pixels This units of this value are pixels. Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setLastBaselineToBottomHeight_E@", "@B_android#widget#TextView#setPadding_E@", "@B_android#widget#TextView#setPaddingRelative_E@"], "Permissions": [], "Description": "Updates the top padding of the TextView so that firstBaselineToTopHeight is the distance between the top of the TextView and first line's baseline. FontMetrics.top or FontMetrics.ascent was already greater than firstBaselineToTopHeight, the top padding is not updated. Moreover since this function sets the top padding, if the height of the TextView is less than the sum of top padding, line height and bottom padding, top of the line will be pushed down and bottom will be clipped.", "history": "Added in API level 28", "FullName": "public void setFirstBaselineToTopHeight (int firstBaselineToTopHeight)"}, "setHeight(int)": {"Returns": [], "Parameters": [["int", "int: the exact height of the TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLines_E@"], "Permissions": [], "Description": "Sets the height of the TextView to be exactly pixels tall. This value is used for height calculation if LayoutParams does not force TextView to have an exact height. Setting this value overrides previous minimum/maximum height configurations such as @B_android#widget#TextView#setMinHeight_E@ or @B_android#widget#TextView#setMaxHeight_E@.", "history": "Added in API level 1", "FullName": "public void setHeight (int pixels)"}, "setFallbackLineSpacing(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to expand linespacing based on fallback fonts, true by default"]], "Throws": [], "SeeAlso": ["@B_android#text#StaticLayout#Builder#setUseLineSpacingFromFallbacks_E@"], "Permissions": [], "Description": "Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). If set, fallback fonts that end up getting used can increase the ascent and descent of the lines that they are used on. It is required to be true if text could be in languages like Burmese or Tibetan where text is typically much taller or deeper than Latin text.", "history": "Added in API level 28", "FullName": "public void setFallbackLineSpacing (boolean enabled)"}, "getLineBounds(int, android.graphics.Rect)": {"Returns": [["int", "the Y-coordinate of the baseline"]], "Parameters": [["int", "int: which line to examine (0..getLineCount() - 1)"], ["@B_android#graphics#Rect_E@", "Rect: Optional. If not null, it returns the extent of the line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. If the internal Layout has not been built, return 0 and set bounds to (0, 0, 0, 0)", "history": "added in API level 1", "FullName": "public int getLineBounds (int line, Rect bounds)"}, "onDragEvent(android.view.DragEvent)": {"Returns": [["boolean", "true if the method was successful, otherwise false. The method should return true in response to an action type of DragEvent.ACTION_DRAG_STARTED to receive drag events for the current operation. The method should also return true in response to an action type of DragEvent.ACTION_DROP if it consumed the drop, or false if it didn't. For all other events, the return value is ignored."]], "Parameters": [["@B_android#view#DragEvent_E@", "DragEvent: The @B_android#view#DragEvent_E@ sent by the system. The @B_android#view#DragEvent#getAction_E@ method returns an action type constant defined in DragEvent, indicating the type of drag event represented by this object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles drag events sent by the system following a call to @B_android#view#View#startDragAndDrop_E@. When the system calls this method, it passes a @B_android#view#DragEvent_E@ object. A call to @B_android#view#DragEvent#getAction_E@ returns one of the action type constants defined in DragEvent. The method uses these to determine what is happening in the drag and drop operation.", "history": "Added in API level 11", "FullName": "public boolean onDragEvent (DragEvent event)"}, "getCompoundDrawables()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns drawables for the left, top, right, and bottom borders.", "history": "Added in API level 1", "FullName": "public Drawable[] getCompoundDrawables ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setTextColor(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextColor_E@", "@B_android#widget#TextView#getTextColors_E@", "@B_android#widget#TextView#setHintTextColor_E@", "@B_android#widget#TextView#setLinkTextColor_E@"], "Permissions": [], "Description": "Sets the text color.", "history": "Added in API level 1", "FullName": "public void setTextColor (ColorStateList colors)"}, "getTextMetricsParams()": {"Returns": [["@B_android#text#PrecomputedText#Params_E@", "a current @B_android#text#PrecomputedText#Params_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#PrecomputedText_E@"], "Permissions": [], "Description": "Gets the parameters for text layout precomputation, for use with @B_android#text#PrecomputedText_E@.", "history": "Added in API level 28", "FullName": "public PrecomputedText.Params getTextMetricsParams ()"}, "setHintTextColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHintTextColor_E@", "@B_android#widget#TextView#getHintTextColors_E@", "@B_android#widget#TextView#setTextColor_E@"], "Permissions": [], "Description": "Sets the color of the hint text for all the states (disabled, focussed, selected...) of this TextView.", "history": "Added in API level 1", "FullName": "public final void setHintTextColor (int color)"}, "setLinkTextColor(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLinkTextColor_E@", "@B_android#widget#TextView#getLinkTextColors_E@", "@B_android#widget#TextView#setTextColor_E@", "@B_android#widget#TextView#setHintTextColor_E@"], "Permissions": [], "Description": "Sets the color of links in the text.", "history": "Added in API level 1", "FullName": "public final void setLinkTextColor (ColorStateList colors)"}, "getTotalPaddingBottom()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total bottom padding of the view, including the bottom Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.", "history": "Added in API level 1", "FullName": "public int getTotalPaddingBottom ()"}, "getLinkTextColors()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the list of colors used to paint the links in the text, for the different states of this TextView"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLinkTextColor_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final ColorStateList getLinkTextColors ()"}, "setFilters(android.text.InputFilter[])": {"Returns": [], "Parameters": [["@B_android#text#InputFilter_E@", "InputFilter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the list of input filters that will be used if the buffer is Editable. Has no effect otherwise.", "history": "Added in API level 1", "FullName": "public void setFilters (InputFilter[] filters)"}, "setTextKeepState(java.lang.CharSequence,android.widget.TextView.BufferType)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be displayed"], ["@B_android#widget#TextView#BufferType_E@", "TextView.BufferType: a @B_android#widget#TextView#BufferType_E@ which defines whether the text is stored as a static text, styleable/spannable text, or editable text"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@"], "Permissions": [], "Description": "Sets the text to be displayed and the @B_android#widget#TextView#BufferType_E@ but retains the cursor position. Same as @B_android#widget#TextView#setText_E@ except that the cursor position (if any) is retained in the new text. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@.", "history": "Added in API level 1", "FullName": "public final void setTextKeepState (CharSequence text, TextView.BufferType type)"}, "getAutofillType()": {"Returns": [["int", "Value is @B_android#view#View#AUTOFILL_TYPE_NONE_E@, @B_android#view#View#AUTOFILL_TYPE_TEXT_E@, @B_android#view#View#AUTOFILL_TYPE_TOGGLE_E@, @B_android#view#View#AUTOFILL_TYPE_LIST_E@, or @B_android#view#View#AUTOFILL_TYPE_DATE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the autofill type of this view, so an @B_android#service#autofill#AutofillService_E@ can create the proper @B_android#view#autofill#AutofillValue_E@ when autofilling the view. By default returns @B_android#view#View#AUTOFILL_TYPE_NONE_E@, but views should override it to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public int getAutofillType ()"}, "getBreakStrategy()": {"Returns": [["int", "the current strategy for breaking paragraphs into lines. Value is @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_SIMPLE_E@, @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_HIGH_QUALITY_E@, or @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_BALANCED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setBreakStrategy_E@"], "Permissions": [], "Description": "Gets the current strategy for breaking paragraphs into lines.", "history": "Added in API level 23", "FullName": "public int getBreakStrategy ()"}, "setFontVariationSettings(java.lang.String)": {"Returns": [["boolean", "true if the given settings is effective to at least one font file underlying this TextView. This function also returns true for empty settings string. Otherwise returns false."]], "Parameters": [["@B_java#lang#String_E@", "String: font variation settings. You can pass null or empty string as no variation settings. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If given string is not a valid font variation settings format."]], "SeeAlso": ["@B_android#widget#TextView#getFontVariationSettings_E@", "@B_android#graphics#fonts#FontVariationAxis_E@"], "Permissions": [], "Description": "Sets TrueType or OpenType font variation settings. The settings string is constructed from multiple pairs of axis tag and style values. The axis tag must contain four ASCII characters and must be wrapped with single quotes (U+0027) or double quotes (U+0022). Axis strings that are longer or shorter than four characters, or contain characters outside of U+0020..U+007E are invalid. If a specified axis name is not defined in the font, the settings will be ignored. Examples, Set font width to 150. Set the font slant to 20 degrees and ask for italic style.", "history": "Added in API level 26", "FullName": "public boolean setFontVariationSettings (String fontVariationSettings)"}, "setCustomInsertionActionModeCallback(android.view.ActionMode.Callback)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If provided, this ActionMode.Callback will be used to create the ActionMode when text insertion is initiated in this View. The standard implementation populates the menu with a subset of Select All, Paste and Replace actions, depending on what this View supports. A custom implementation can add new entries in the default menu in its @B_android#view#ActionMode#Callback#onPrepareActionMode_E@ method. The default actions can also be removed from the menu using @B_android#view#Menu#removeItem_E@ and passing @B_android#R#id#selectAll_E@, @B_android#R#id#paste_E@ or @B_android#R#id#replaceText_E@ ids as parameters. Returning false from @B_android#view#ActionMode#Callback#onCreateActionMode_E@ will prevent the action mode from being started. Action click events should be handled by the custom implementation of @B_android#view#ActionMode#Callback#onActionItemClicked_E@. Note that text insertion mode is not started when a TextView receives focus and the @B_android#R#attr#selectAllOnFocus_E@ flag has been set.", "history": "Added in API level 23", "FullName": "public void setCustomInsertionActionModeCallback (ActionMode.Callback actionModeCallback)"}, "isTextSelectable()": {"Returns": [["boolean", "True if the text displayed in this TextView can be selected by the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the state of the textIsSelectable flag (See @B_android#widget#TextView#setTextIsSelectable_E@). Although you have to set this flag to allow users to select and copy text in a non-editable TextView, the content of an @B_android#widget#EditText_E@ can always be selected, independently of the value of this flag.", "history": "Added in API level 11", "FullName": "public boolean isTextSelectable ()"}, "getTextCursorDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the text cursor drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextCursorDrawable_E@"], "Permissions": [], "Description": "Returns the Drawable corresponding to the text cursor. Note that any change applied to the cursor Drawable will not be visible until the cursor is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public Drawable getTextCursorDrawable ()"}, "getAutoSizeTextType()": {"Returns": [["int", "an int corresponding to one of the auto-size types: @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_NONE_E@ or @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@ Value is @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_NONE_E@, or @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeWithDefaults_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithPresetSizes_E@"], "Permissions": [], "Description": "Returns the type of auto-size set for this widget.", "history": "Added in API level 26", "FullName": "public int getAutoSizeTextType ()"}, "getAutoSizeTextAvailableSizes()": {"Returns": [["int[]", "the current auto-size int sizes array (in pixels)."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithPresetSizes_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int[] getAutoSizeTextAvailableSizes ()"}, "onPrivateIMECommand(java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "Return true if you handled the command, else false."]], "Parameters": [["@B_java#lang#String_E@", "String: The action name of the command."], ["@B_android#os#Bundle_E@", "Bundle: Any additional data for the command. This may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a private command from the current method, provided by it calling @B_android#view#inputmethod#InputConnection#performPrivateCommand_E@.", "history": "Added in API level 3", "FullName": "public boolean onPrivateIMECommand (String action, Bundle data)"}, "append(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be appended to the already displayed text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to append the specified text to the TextView's display buffer, upgrading it to @B_android#widget#TextView#BufferType#EDITABLE_E@ if it was not already editable.", "history": "Added in API level 1", "FullName": "public final void append (CharSequence text)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new resource configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the current configuration of the resources being used by the application have changed. You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics. You only need to use this if you are not relying on the normal @B_android#app#Activity_E@ mechanism of recreating the activity instance upon a configuration change.", "history": "Added in API level 8", "FullName": "protected void onConfigurationChanged (Configuration newConfig)"}, "setCompoundDrawableTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCompoundDrawableTintList_E@", "@B_android#graphics#drawable#Drawable#setTintMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#TextView#setCompoundDrawableTintList_E@ to the compound drawables. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 23", "FullName": "public void setCompoundDrawableTintMode (PorterDuff.Mode tintMode)"}, "onTextContextMenuItem(int)": {"Returns": [["boolean", "true if the context menu item action was performed."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a context menu option for the text view is selected. Currently this will be one of @B_android#R#id#selectAll_E@, @B_android#R#id#cut_E@, @B_android#R#id#copy_E@, @B_android#R#id#paste_E@ or @B_android#R#id#shareText_E@.", "history": "Added in API level 3", "FullName": "public boolean onTextContextMenuItem (int id)"}, "resetResolvedLayoutDirection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the resolved layout direction. Subclasses need to override this method to clear cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. Overrides must also call the superclass implementation at the start of their implementation.", "history": "Since: API Level 14", "FullName": "protected void resetResolvedLayoutDirection ()"}, "TextView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TextView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onBeginBatchEdit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a request to begin a batch of edit operations through a call to link @B_android#widget#TextView#beginBatchEdit_E@.", "history": "Added in API level 3", "FullName": "public void onBeginBatchEdit ()"}, "setTextSize(int, float)": {"Returns": [], "Parameters": [["int", "int: The desired dimension unit."], ["float", "float: The desired size in the given units."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default text size to a given unit and value. See @B_android#util#TypedValue_E@ for the possible dimension units. Note: if this TextView has the auto-size feature enabled than this function is no-op.", "history": "added in API level 1", "FullName": "public void setTextSize (int unit, float size)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "computeHorizontalScrollRange()": {"Returns": [["int", "the total horizontal range represented by the horizontal scrollbar"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal range that the horizontal scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollExtent_E@ and @B_android#view#View#computeHorizontalScrollOffset_E@. The default range is the drawing width of this view.", "history": "Added in API level 1", "FullName": "protected int computeHorizontalScrollRange ()"}, "getSelectionEnd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#text#Selection#getSelectionEnd_E@.", "history": "Added in API level 1", "FullName": "public int getSelectionEnd ()"}, "setAutoSizeTextTypeWithDefaults(int)": {"Returns": [], "Parameters": [["int", "int: the type of auto-size. Must be one of @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_NONE_E@ or @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@ Value is @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_NONE_E@, or @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if autoSizeTextType is none of the types above."]], "SeeAlso": ["@B_android#widget#TextView#getAutoSizeTextType_E@"], "Permissions": [], "Description": "Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds by using the default auto-size configuration.", "history": "Added in API level 26", "FullName": "public void setAutoSizeTextTypeWithDefaults (int autoSizeTextType)"}, "setTextKeepState(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be displayed"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@"], "Permissions": [], "Description": "Sets the text to be displayed but retains the cursor position. Same as @B_android#widget#TextView#setText_E@ except that the cursor position (if any) is retained in the new text. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@.", "history": "Added in API level 1", "FullName": "public final void setTextKeepState (CharSequence text)"}, "setAllCaps(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTransformationMethod_E@"], "Permissions": [], "Description": "Sets the properties of this field to transform input to ALL CAPS display. This may use a \"small caps\" formatting if available. This setting will be ignored if this field is editable or selectable. This call replaces the current transformation method. Disabling this will not necessarily restore the previous behavior from before this was enabled.", "history": "Added in API level 14", "FullName": "public void setAllCaps (boolean allCaps)"}, "getLineHeight()": {"Returns": [["int", "The height of one standard line in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vertical distance between lines of text, in pixels. Note that markup within the text can cause individual lines to be taller or shorter than this height, and the layout may contain additional first-or last-line padding.", "history": "Added in API level 1", "FullName": "public int getLineHeight ()"}, "setSingleLine()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the properties of this field (lines, horizontally scrolling, transformation method) to be for a single-line input.", "history": "Added in API level 1", "FullName": "public void setSingleLine ()"}, "setTypeface(android.graphics.Typeface)": {"Returns": [], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getTypeface_E@"], "Permissions": [], "Description": "Sets the typeface and style in which the text should be displayed. Note that not all Typeface families actually have bold and italic variants, so you may need to use @B_android#widget#TextView#setTypeface_E@ to get the appearance that you actually want.", "history": "Added in API level 1", "FullName": "public void setTypeface (Typeface tf)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "getCompoundDrawableTintBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "the blending mode used to apply the tint to the compound drawables This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCompoundDrawableTintBlendMode_E@"], "Permissions": [], "Description": "Returns the blending mode used to apply the tint to the compound drawables, if specified.", "history": "Added in API level 29", "FullName": "public BlendMode getCompoundDrawableTintBlendMode ()"}, "setEllipsize(android.text.TextUtils.TruncateAt)": {"Returns": [], "Parameters": [["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes words in the text that are longer than the view's width to be ellipsized instead of broken in the middle. You may also want to @B_android#widget#TextView#setSingleLine_E@ or @B_android#widget#TextView#setHorizontallyScrolling_E@ to constrain the text to a single line. Use null to turn off ellipsizing. If @B_android#widget#TextView#setMaxLines_E@ has been used to set two or more lines, only @B_android#text#TextUtils#TruncateAt#END_E@ and @B_android#text#TextUtils#TruncateAt#MARQUEE_E@ are supported (other ellipsizing types will not do anything).", "history": "Added in API level 1", "FullName": "public void setEllipsize (TextUtils.TruncateAt where)"}, "setCompoundDrawablesRelativeWithIntrinsicBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Resource identifier of the start Drawable."], ["int", "int: Resource identifier of the top Drawable."], ["int", "int: Resource identifier of the end Drawable."], ["int", "int: Resource identifier of the bottom Drawable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. Use 0 if you do not want a Drawable there. The Drawables' bounds will be set to their intrinsic bounds. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawables_E@ or related methods.", "history": "Added in API level 17", "FullName": "public void setCompoundDrawablesRelativeWithIntrinsicBounds (int start, int top, int end, int bottom)"}, "getCompoundPaddingTop()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the top padding of the view, plus space for the top Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingTop ()"}, "isElegantTextHeight()": {"Returns": [["boolean", "true if the elegant height metrics flag is set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setElegantTextHeight_E@", "@B_android#graphics#Paint#setElegantTextHeight_E@"], "Permissions": [], "Description": "Get the value of the TextView's elegant height metrics flag. This setting selects font variants that have not been compacted to fit Latin-based vertical metrics, and also increases top and bottom bounds to provide more space.", "history": "Added in API level 28", "FullName": "public boolean isElegantTextHeight ()"}, "setPaddingRelative(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the start padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the end padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setLastBaselineToBottomHeight_E@"], "Permissions": [], "Description": "Sets the relative padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingStart_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingEnd_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "added in API level 16", "FullName": "public void setPaddingRelative (int start, int top, int end, int bottom)"}, "setLinkTextColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLinkTextColor_E@", "@B_android#widget#TextView#getLinkTextColors_E@"], "Permissions": [], "Description": "Sets the color of links in the text.", "history": "Added in API level 1", "FullName": "public final void setLinkTextColor (int color)"}, "getMaxEms()": {"Returns": [["int", "the maximum width of TextView in terms of ems or -1 if the maximum width is not defined in ems"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMaxEms_E@", "@B_android#widget#TextView#setEms_E@"], "Permissions": [], "Description": "Returns the maximum width of TextView in terms of ems or -1 if the maximum width was set using @B_android#widget#TextView#setMaxWidth_E@ or @B_android#widget#TextView#setWidth_E@.", "history": "Added in API level 16", "FullName": "public int getMaxEms ()"}, "setHighlightColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the color used to display the selection highlight.", "history": "Added in API level 1", "FullName": "public void setHighlightColor (int color)"}, "getCurrentHintTextColor()": {"Returns": [["int", "Returns the current hint text color."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current color selected to paint the hint text.", "history": "Added in API level 1", "FullName": "public final int getCurrentHintTextColor ()"}, "getAutoSizeMinTextSize()": {"Returns": [["int", "the current auto-size minimum text size in pixels (the default is 12sp). Note that if auto-size has not been configured this function returns -1."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithPresetSizes_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int getAutoSizeMinTextSize ()"}, "getTotalPaddingRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total right padding of the view, including the right Drawable if any.", "history": "Added in API level 1", "FullName": "public int getTotalPaddingRight ()"}, "getError()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the error message that was set to be displayed with @B_android#widget#TextView#setError_E@, or null if no error was set or if it the error was cleared by the widget after user input.", "history": "Added in API level 1", "FullName": "public CharSequence getError ()"}, "sendAccessibilityEvent(int)": {"Returns": [], "Parameters": [["int", "The type of the event to send, as defined by several types from @B_android#view#accessibility#AccessibilityEvent_E@, such as @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_CLICKED_E@ or @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessibility is not enabled this method has no effect. The default implementation calls @B_android#view#View#onInitializeAccessibilityEvent_E@ first to populate information about the event source (this View), then calls @B_android#view#View#dispatchPopulateAccessibilityEvent_E@ to populate the text content of the event source including its descendants, and last calls @B_android#view#ViewParent#requestSendAccessibilityEvent_E@ on its parent to resuest sending of the event to interested parties. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#sendAccessibilityEvent_E@ is responsible for handling this call.", "history": "Added in API level 4", "FullName": "public void sendAccessibilityEvent (int eventType)"}, "getInputType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setInputType_E@", "@B_android#text#InputType_E@"], "Permissions": [], "Description": "Get the type of the editable content.", "history": "Added in API level 3", "FullName": "public int getInputType ()"}, "getTextLocales()": {"Returns": [["@B_android#os#LocaleList_E@", "the default @B_android#os#LocaleList_E@ of the text in this TextView. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the default @B_android#os#LocaleList_E@ of the text in this TextView.", "history": "Added in API level 24", "FullName": "public LocaleList getTextLocales ()"}, "onTextChanged(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text the TextView is displaying"], ["int", "int: The offset of the start of the range of the text that was modified"], ["int", "int: The length of the former text that has been replaced"], ["int", "int: The length of the replacement modified text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the text is changed, in case any subclasses would like to know. Within text, the lengthAfter characters beginning at start have just replaced old text that had length lengthBefore. It is an error to attempt to make changes to text from this callback.", "history": "Added in API level 1", "FullName": "protected void onTextChanged (CharSequence text, int start, int lengthBefore, int lengthAfter)"}, "getOffsetForPosition(float, float)": {"Returns": [["int", "the character offset for the character whose position is closest to the specified position. Returns -1 if there is no layout."]], "Parameters": [["float", "float: The horizontal absolute position of a point on screen"], ["float", "float: The vertical absolute position of a point on screen"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character offset closest to the specified absolute position. A typical use case is to pass the result of @B_android#view#MotionEvent#getX_E@ and @B_android#view#MotionEvent#getY_E@ to this method.", "history": "added in API level 14", "FullName": "public int getOffsetForPosition (float x, float y)"}, "setMinWidth(int)": {"Returns": [], "Parameters": [["int", "int: the minimum width of TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMinWidth_E@", "@B_android#widget#TextView#setWidth_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be at least minPixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum width configurations such as @B_android#widget#TextView#setMinEms_E@ or @B_android#widget#TextView#setEms_E@. The value given here is different than @B_android#view#View#setMinimumWidth_E@. Between minWidth and the value set in @B_android#view#View#setMinimumWidth_E@, the greater one is used to decide the final width.", "history": "Added in API level 1", "FullName": "public void setMinWidth (int minPixels)"}, "setTextSelectHandle(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandle_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the selection handle used for positioning the cursor within text. The Drawable defaults to the value of the textSelectHandle attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandle (Drawable textSelectHandle)"}, "onSelectionChanged(int,int)": {"Returns": [], "Parameters": [["int", "int: The new selection start location."], ["int", "int: The new selection end location."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the selection has changed, in case any subclasses would like to know.", "history": "Added in API level 3", "FullName": "protected void onSelectionChanged (int selStart, int selEnd)"}, "getTextColors()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextColor_E@"], "Permissions": [], "Description": "Gets the text colors for the different states (normal, selected, focused) of the TextView.", "history": "Added in API level 1", "FullName": "public final ColorStateList getTextColors ()"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "setTextLocale(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the @B_java#util#Locale_E@ for drawing text, must not be null. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextLocales_E@"], "Permissions": [], "Description": "Set the default @B_java#util#Locale_E@ of the text in this TextView to a one-member @B_android#os#LocaleList_E@ containing just the given Locale.", "history": "Added in API level 17", "FullName": "public void setTextLocale (Locale locale)"}, "setTransformationMethod(android.text.method.TransformationMethod)": {"Returns": [], "Parameters": [["@B_android#text#method#TransformationMethod_E@", "TransformationMethod no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the transformation that is applied to the text that this TextView is displaying.", "history": "Added in API level 1", "FullName": "public final void setTransformationMethod (TransformationMethod method)"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getBaseline ()"}, "onVisibilityChanged(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view. This value must never be null."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "setFrame(int, int, int, int)": {"Returns": [["boolean", "true if the new size and position are different than the previous ones"]], "Parameters": [["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a size and position to this view. This is called from layout.", "history": "added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean focused, int direction, Rect previouslyFocusedRect)"}, "setEditableFactory(android.text.Editable.Factory)": {"Returns": [], "Parameters": [["@B_android#text#Editable#Factory_E@", "Editable.Factory: @B_android#text#Editable#Factory_E@ to be used"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#Factory_E@", "@B_android#widget#TextView#BufferType_E@"], "Permissions": [], "Description": "Sets the Factory used to create new @B_android#text#Editable_E@.", "history": "Added in API level 1", "FullName": "public final void setEditableFactory (Editable.Factory factory)"}, "getTotalPaddingTop()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total top padding of the view, including the top Drawable if any, the extra space to keep more than maxLines from showing, and the vertical offset for gravity, if any.", "history": "Added in API level 1", "FullName": "public int getTotalPaddingTop ()"}, "TextView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TextView (Context context)"}, "getTotalPaddingStart()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total start padding of the view, including the start Drawable if any.", "history": "Added in API level 17", "FullName": "public int getTotalPaddingStart ()"}, "getUrls()": {"Returns": [["@B_android#text#style#URLSpan_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of @B_android#text#style#URLSpan_E@ attached to the text (by @B_android#text#util#Linkify_E@ or otherwise) if any. You can call @B_android#text#style#URLSpan#getURL_E@ on them to find where they link to or use @B_android#text#Spanned#getSpanStart_E@ and @B_android#text#Spanned#getSpanEnd_E@ to find the region of the text they are attached to.", "history": "Added in API level 1", "FullName": "public URLSpan[] getUrls ()"}, "setImeOptions(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getImeOptions_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Change the editor type integer associated with the text view, which is reported to an Input Method Editor (IME) with @B_android#view#inputmethod#EditorInfo#imeOptions_E@ when it has focus.", "history": "Added in API level 3", "FullName": "public void setImeOptions (int imeOptions)"}, "setLetterSpacing(float)": {"Returns": [], "Parameters": [["float", "float: A text letter-space value in ems."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getLetterSpacing_E@", "@B_android#graphics#Paint#getLetterSpacing_E@"], "Permissions": [], "Description": "Sets text letter-spacing in em units. Typical values for slight expansion will be around 0.05. Negative values tighten text.", "history": "Added in API level 21", "FullName": "public void setLetterSpacing (float letterSpacing)"}, "setJustificationMode(int)": {"Returns": [["void", "Value is @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_NONE_E@, or @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_INTER_WORD_E@"]], "Parameters": [["int", "int: Value is @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_NONE_E@, or @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_INTER_WORD_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getJustificationMode_E@"], "Permissions": [], "Description": "Set justification mode. The default value is @B_android#text#Layout#JUSTIFICATION_MODE_NONE_E@. If the last line is too short for justification, the last line will be displayed with the alignment set by @B_android#view#View#setTextAlignment_E@.", "history": "Added in API level 26", "FullName": "public void setJustificationMode (int justificationMode)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be appended to the already displayed text"], ["int", "int: the index of the first character in the text"], ["int", "int: the index of the character following the last character in the text"]], "Throws": [], "SeeAlso": ["@B_java#lang#Appendable#append_E@"], "Permissions": [], "Description": "Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to @B_android#widget#TextView#BufferType#EDITABLE_E@ if it was not already editable.", "history": "Added in API level 1", "FullName": "public void append (CharSequence text, int start, int end)"}, "getHint()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hint that is displayed when the text of the TextView is empty.", "history": "Added in API level 1", "FullName": "public CharSequence getHint ()"}, "getCustomInsertionActionModeCallback()": {"Returns": [["@B_android#view#ActionMode#Callback_E@", "The current custom insertion callback."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value set in @B_android#widget#TextView#setCustomInsertionActionModeCallback_E@. Default is null.", "history": "Added in API level 23", "FullName": "public ActionMode.Callback getCustomInsertionActionModeCallback ()"}, "setMarqueeRepeatLimit(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getMarqueeRepeatLimit_E@"], "Permissions": [], "Description": "Sets how many times to repeat the marquee animation. Only applied if the TextView has marquee enabled. Set to -1 to repeat indefinitely.", "history": "Added in API level 2", "FullName": "public void setMarqueeRepeatLimit (int marqueeLimit)"}, "getLastBaselineToBottomHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLastBaselineToBottomHeight_E@"], "Permissions": [], "Description": "Returns the distance between the last text baseline and the bottom of this TextView.", "history": "Added in API level 28", "FullName": "public int getLastBaselineToBottomHeight ()"}, "getPrivateImeOptions()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setPrivateImeOptions_E@", "@B_android#view#inputmethod#EditorInfo#privateImeOptions_E@"], "Permissions": [], "Description": "Get the private type of the content.", "history": "Added in API level 3", "FullName": "public String getPrivateImeOptions ()"}, "verifyDrawable(android.graphics.drawable.Drawable)": {"Returns": [["boolean", "boolean If true than the Drawable is being displayed in the view; else false and it is not allowed to animate."]], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If your view subclass is displaying its own Drawable objects, it should override this function and return true for any Drawable it is displaying. This allows animations for those drawables to be scheduled. Be sure to call through to the super class when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected boolean verifyDrawable (Drawable who)"}, "getCompoundPaddingRight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right padding of the view, plus space for the right Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingRight ()"}, "getLeftPaddingOffset()": {"Returns": [["int", "The left padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the left fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getLeftPaddingOffset ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#TextView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void onRestoreInstanceState (Parcelable state)"}, "setCompoundDrawables(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the left of, above, to the right of, and below the text. Use null if you do not want a Drawable there. The Drawables must already have had @B_android#graphics#drawable#Drawable#setBounds_E@ called. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawablesRelative_E@ or related methods.", "history": "Added in API level 1", "FullName": "public void setCompoundDrawables (Drawable left, Drawable top, Drawable right, Drawable bottom)"}, "isAllCaps()": {"Returns": [["boolean", "Whether the current transformation method is for ALL CAPS."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAllCaps_E@", "@B_android#widget#TextView#setTransformationMethod_E@"], "Permissions": [], "Description": "Checks whether the transformation method applied to this TextView is set to ALL CAPS.", "history": "Added in API level 28", "FullName": "public boolean isAllCaps ()"}, "setTextSelectHandleLeft(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleLeft_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the left handle used for selecting text. The Drawable defaults to the value of the textSelectHandleLeft attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandleLeft (int textSelectHandleLeft)"}, "onKeyShortcut(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called on the focused view when a key shortcut event is not handled. Override this method to implement local key shortcuts for the View. Key shortcuts can also be implemented by setting the @B_android#view#MenuItem#setShortcut_E@ property of menu items.", "history": "Added in API level 1", "FullName": "public boolean onKeyShortcut (int keyCode, KeyEvent event)"}, "findViewsWithText(java.util.ArrayList<android.view.View>,java.lang.CharSequence,int)": {"Returns": [], "Parameters": [["@B_java#util#ArrayList_E@", "ArrayList: The output list of matching Views."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to match against."], ["int", "int: Value is either 0 or a combination of @B_android#view#View#FIND_VIEWS_WITH_TEXT_E@, and @B_android#view#View#FIND_VIEWS_WITH_CONTENT_DESCRIPTION_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds the Views that contain given text. The containment is case insensitive. The search is performed by either the text that the View renders or the content description that describes the view for accessibility purposes and the view does not render or both. Clients can specify how the search is to be performed via passing the @B_android#view#View#FIND_VIEWS_WITH_TEXT_E@ and @B_android#view#View#FIND_VIEWS_WITH_CONTENT_DESCRIPTION_E@ flags.", "history": "Added in API level 14", "FullName": "public void findViewsWithText (ArrayList<View> outViews, CharSequence searched, int flags)"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "getDefaultEditable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses override this to specify that they have a KeyListener by default even if not specifically called for in the XML options.", "history": "Added in API level 1", "FullName": "protected boolean getDefaultEditable ()"}, "addTextChangedListener(android.text.TextWatcher)": {"Returns": [], "Parameters": [["@B_android#text#TextWatcher_E@", "TextWatcher no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a TextWatcher to the list of those whose methods are called whenever this TextView's text changes. In 1.0, the @B_android#text#TextWatcher#afterTextChanged_E@ method was erroneously not called after @B_android#widget#TextView#setText_E@ calls. Now, doing @B_android#widget#TextView#setText_E@ if there are any text changed listeners forces the buffer type to Editable if it would not otherwise be and does call this method.", "history": "Added in API level 1", "FullName": "public void addTextChangedListener (TextWatcher watcher)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "Added in API level 1", "FullName": "public void computeScroll ()"}, "setCompoundDrawablePadding(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the size of the padding between the compound drawables and the text.", "history": "Added in API level 1", "FullName": "public void setCompoundDrawablePadding (int pad)"}, "setInputExtras(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_android#widget#TextView#getInputExtras_E@", "@B_android#view#inputmethod#EditorInfo#extras_E@"], "Permissions": [], "Description": "Set the extra input data of the text, which is the @B_android#view#inputmethod#EditorInfo#extras_E@ Bundle that will be filled in when creating an input connection. The given integer is the resource identifier of an XML resource holding an @B_android#R#styleable#InputExtras_E@ XML tree.", "history": "Added in API level 3", "FullName": "public void setInputExtras (int xmlResId)"}, "getDefaultMovementMethod()": {"Returns": [["@B_android#text#method#MovementMethod_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses override this to specify a default movement method.", "history": "Added in API level 1", "FullName": "protected MovementMethod getDefaultMovementMethod ()"}, "getCustomSelectionActionModeCallback()": {"Returns": [["@B_android#view#ActionMode#Callback_E@", "The current custom selection callback."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value set in @B_android#widget#TextView#setCustomSelectionActionModeCallback_E@. Default is null.", "history": "Added in API level 11", "FullName": "public ActionMode.Callback getCustomSelectionActionModeCallback ()"}, "setText(int,android.widget.TextView.BufferType)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the string resource to be displayed"], ["@B_android#widget#TextView#BufferType_E@", "TextView.BufferType: a @B_android#widget#TextView#BufferType_E@ which defines whether the text is stored as a static text, styleable/spannable text, or editable text"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setText_E@", "@B_android#widget#TextView#BufferType_E@", "@B_android#widget#TextView#setSpannableFactory_E@", "@B_android#widget#TextView#setEditableFactory_E@"], "Permissions": [], "Description": "Sets the text to be displayed using a string resource identifier and the @B_android#widget#TextView#BufferType_E@. When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@.", "history": "Added in API level 1", "FullName": "public final void setText (int resid, TextView.BufferType type)"}, "onPreDraw()": {"Returns": [["boolean", "Return true to proceed with the current drawing pass, or false to cancel."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback method to be invoked when the view tree is about to be drawn. At this point, all views in the tree have been measured and given a frame. Clients can use this to adjust their scroll bounds or even to request a new layout before drawing occurs.", "history": "Added in API level 1", "FullName": "public boolean onPreDraw ()"}, "setPaintFlags(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setFlags_E@"], "Permissions": [], "Description": "Sets flags on the Paint being used to display the text and reflows the text if they are different from the old flags.", "history": "Added in API level 1", "FullName": "public void setPaintFlags (int flags)"}, "setText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be displayed"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the passed text is a @B_android#text#PrecomputedText_E@ but the parameters used to create the PrecomputedText mismatches with this TextView."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text to be displayed. TextView does not accept HTML-like formatting, which you can do with text strings in XML resource files. To style your strings, attach android.text.style.* objects to a @B_android#text#SpannableString_E@, or see the When required, TextView will use @B_android#text#Spannable#Factory_E@ to create final or intermediate @B_android#text#Spannable_E@. Likewise it will use @B_android#text#Editable#Factory_E@ to create final or intermediate @B_android#text#Editable_E@. If the passed text is a @B_android#text#PrecomputedText_E@ but the parameters used to create the PrecomputedText mismatches with this TextView, IllegalArgumentException is thrown. To ensure the parameters match, you can call @B_android#widget#TextView#setTextMetricsParams_E@ before calling this.", "history": "Added in API level 1", "FullName": "public final void setText (CharSequence text)"}, "setHint(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text to be displayed when the text of the TextView is empty, from a resource.", "history": "Added in API level 1", "FullName": "public final void setHint (int resid)"}, "getCompoundDrawablesRelative()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns drawables for the start, top, end, and bottom borders.", "history": "Added in API level 17", "FullName": "public Drawable[] getCompoundDrawablesRelative ()"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "setHintTextColor(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getHintTextColors_E@", "@B_android#widget#TextView#setHintTextColor_E@", "@B_android#widget#TextView#setTextColor_E@", "@B_android#widget#TextView#setLinkTextColor_E@"], "Permissions": [], "Description": "Sets the color of the hint text.", "history": "Added in API level 1", "FullName": "public final void setHintTextColor (ColorStateList colors)"}, "setTextAppearance(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#TextView#setTextAppearance_E@ instead. Sets the text color, size, style, hint color, and highlight color from the specified TextAppearance resource.", "history": "added in API level 1", "FullName": "public void setTextAppearance (Context context, int resId)"}, "onCreateContextMenu(android.view.ContextMenu)": {"Returns": [], "Parameters": [["@B_android#view#ContextMenu_E@", "ContextMenu: the context menu to populate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Views should implement this if the view itself is going to add items to the context menu.", "history": "Added in API level 1", "FullName": "protected void onCreateContextMenu (ContextMenu menu)"}, "setAutoSizeTextTypeUniformWithConfiguration(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the minimum text size available for auto-size"], ["int", "int: the maximum text size available for auto-size"], ["int", "int: the auto-size step granularity. It is used in conjunction with the minimum and maximum text size in order to build the set of text sizes the system uses to choose from when auto-sizing"], ["int", "int: the desired dimension unit for all sizes above. See @B_android#util#TypedValue_E@ for the possible dimension units"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the configuration params are invalid."]], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeWithDefaults_E@", "@B_android#widget#TextView#setAutoSizeTextTypeUniformWithPresetSizes_E@", "@B_android#widget#TextView#getAutoSizeMinTextSize_E@", "@B_android#widget#TextView#getAutoSizeMaxTextSize_E@", "@B_android#widget#TextView#getAutoSizeStepGranularity_E@", "@B_android#widget#TextView#getAutoSizeTextAvailableSizes_E@"], "Permissions": [], "Description": "Specify whether this widget should automatically scale the text to try to perfectly fit within the layout bounds. If all the configuration params are valid the type of auto-size is set to @B_android#widget#TextView#AUTO_SIZE_TEXT_TYPE_UNIFORM_E@.", "history": "Added in API level 26", "FullName": "public void setAutoSizeTextTypeUniformWithConfiguration (int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)"}, "onKeyPreIme(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle a key event before it is processed by any input method associated with the view hierarchy. This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.", "history": "Added in API level 3", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "setOnEditorActionListener(android.widget.TextView.OnEditorActionListener)": {"Returns": [], "Parameters": [["@B_android#widget#TextView#OnEditorActionListener_E@", "TextView.OnEditorActionListener no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a special listener to be called when an action is performed on the text view. This will be called when the enter key is pressed, or when an action supplied to the IME is selected by the user. Setting this means that the normal hard key event will not insert a newline into the text view, even if it is multi-line; holding down the ALT modifier will, however, allow the user to insert a newline character.", "history": "Added in API level 3", "FullName": "public void setOnEditorActionListener (TextView.OnEditorActionListener l)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event being processed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle generic motion events. Generic motion events describe joystick movements, mouse hovers, track pad touches, scroll wheel movements and other input events. The @B_android#view#MotionEvent#getSource_E@ of the motion event specifies the class of input that was received. Implementations of this method must examine the bits in the source before processing the event. The following code example shows how this is done. Generic motion events with source class @B_android#view#InputDevice#SOURCE_CLASS_POINTER_E@ are delivered to the view under the pointer. All other generic motion events are delivered to the focused view.", "history": "Added in API level 12", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "getShadowColor()": {"Returns": [["int", "the color of the shadow layer"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setShadowLayer_E@"], "Permissions": [], "Description": "Gets the color of the shadow layer.", "history": "Added in API level 16", "FullName": "public int getShadowColor ()"}, "getTextScaleX()": {"Returns": [["float", "The horizontal scale factor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the extent by which text should be stretched horizontally. This will usually be 1.0.", "history": "Added in API level 1", "FullName": "public float getTextScaleX ()"}, "getTextDirectionHeuristic()": {"Returns": [["@B_android#text#TextDirectionHeuristic_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns resolved @B_android#text#TextDirectionHeuristic_E@ that will be used for text layout. The @B_android#text#TextDirectionHeuristic_E@ that is used by TextView is only available after @B_android#view#View#getTextDirection_E@ and @B_android#view#View#getLayoutDirection_E@ is resolved. Therefore the return value may not be the same as the one TextView uses if the View's layout direction is not resolved or detached from parent root view.", "history": "Added in API level 29", "FullName": "public TextDirectionHeuristic getTextDirectionHeuristic ()"}, "getLineSpacingMultiplier()": {"Returns": [["float", "the value by which each line's height is multiplied to get its actual height."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@", "@B_android#widget#TextView#getLineSpacingExtra_E@"], "Permissions": [], "Description": "Gets the line spacing multiplier", "history": "Added in API level 16", "FullName": "public float getLineSpacingMultiplier ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getRightPaddingOffset()": {"Returns": [["int", "The right padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the right fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getRightPaddingOffset ()"}, "getGravity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@"], "Permissions": [], "Description": "Returns the horizontal and vertical alignment of this TextView.", "history": "Added in API level 1", "FullName": "public int getGravity ()"}, "getTypeface()": {"Returns": [["@B_android#graphics#Typeface_E@", "The current Typeface."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTypeface_E@"], "Permissions": [], "Description": "Gets the current @B_android#graphics#Typeface_E@ that is used to style the text.", "history": "Added in API level 1", "FullName": "public Typeface getTypeface ()"}, "getLineCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of lines of text, or 0 if the internal Layout has not been built.", "history": "Added in API level 1", "FullName": "public int getLineCount ()"}, "getCompoundPaddingLeft()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left padding of the view, plus space for the left Drawable if any.", "history": "Added in API level 1", "FullName": "public int getCompoundPaddingLeft ()"}, "setTextClassifier(android.view.textclassifier.TextClassifier)": {"Returns": [], "Parameters": [["@B_android#view#textclassifier#TextClassifier_E@", "TextClassifier: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#view#textclassifier#TextClassifier_E@ for this TextView.", "history": "Added in API level 26", "FullName": "public void setTextClassifier (TextClassifier textClassifier)"}, "setRawInputType(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setInputType_E@", "@B_android#text#InputType_E@"], "Permissions": [], "Description": "Directly change the content type integer of the text view, without modifying any other state.", "history": "Added in API level 3", "FullName": "public void setRawInputType (int type)"}, "getImeActionLabel()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeActionLabel_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Get the IME action label previous set with @B_android#widget#TextView#setImeActionLabel_E@.", "history": "Added in API level 3", "FullName": "public CharSequence getImeActionLabel ()"}, "extractText(android.view.inputmethod.ExtractedTextRequest,android.view.inputmethod.ExtractedText)": {"Returns": [["boolean", "Returns true if the text was successfully extracted, else false."]], "Parameters": [["@B_android#view#inputmethod#ExtractedTextRequest_E@", "ExtractedTextRequest no parameter comment"], ["@B_android#view#inputmethod#ExtractedText_E@", "ExtractedText no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this TextView contains editable content, extract a portion of it based on the information in", "history": "Added in API level 3", "FullName": "public boolean extractText (ExtractedTextRequest request, ExtractedText outText)"}, "getImeActionId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeActionLabel_E@", "@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "Get the IME action ID previous set with @B_android#widget#TextView#setImeActionLabel_E@.", "history": "Added in API level 3", "FullName": "public int getImeActionId ()"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "Added in API level 16", "FullName": "public boolean hasOverlappingRendering ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event to send."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method behaves exactly as @B_android#view#View#sendAccessibilityEvent_E@ but takes as an argument an empty @B_android#view#accessibility#AccessibilityEvent_E@ and does not perform a check whether accessibility is enabled. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#sendAccessibilityEventUnchecked_E@ is responsible for handling this call.", "history": "Added in API level 4", "FullName": "public void sendAccessibilityEventUnchecked (AccessibilityEvent event)"}, "debug(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void debug (int depth)"}, "getAutoLinkMask()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the autolink mask of the text. See @B_android#text#util#Linkify#ALL_E@ and peers for possible values.", "history": "Added in API level 1", "FullName": "public final int getAutoLinkMask ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setTextSize(float)": {"Returns": [], "Parameters": [["float", "float: The scaled pixel size."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default text size to the given value, interpreted as \"scaled pixel\" units. This size is adjusted based on the current density and user font size preference. Note: if this TextView has the auto-size feature enabled than this function is no-op.", "history": "Added in API level 1", "FullName": "public void setTextSize (float size)"}, "setShadowLayer(float,float,float,int)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. The text shadow produced does not interact with the properties on view that are responsible for real time shadows, @B_android#view#View#getElevation_E@ and @B_android#view#View#getTranslationZ_E@.", "history": "Added in API level 1", "FullName": "public void setShadowLayer (float radius, float dx, float dy, int color)"}, "TextView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TextView (Context context, AttributeSet attrs)"}, "setLinksClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the movement method will automatically be set to @B_android#text#method#LinkMovementMethod_E@ if @B_android#widget#TextView#setAutoLinkMask_E@ has been set to nonzero and links are detected in @B_android#widget#TextView#setText_E@. The default is true.", "history": "Added in API level 1", "FullName": "public final void setLinksClickable (boolean whether)"}, "setTextCursorDrawable(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextCursorDrawable_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the text cursor. The Drawable defaults to the value of the textCursorDrawable attribute. Note that any change applied to the cursor Drawable will not be visible until the cursor is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextCursorDrawable (int textCursorDrawable)"}, "getLineBounds(int,android.graphics.Rect)": {"Returns": [["int", "the Y-coordinate of the baseline"]], "Parameters": [["int", "int: which line to examine (0..getLineCount() - 1)"], ["@B_android#graphics#Rect_E@", "Rect: Optional. If not null, it returns the extent of the line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the baseline for the specified line (0...getLineCount() - 1) If bounds is not null, return the top, left, right, bottom extents of the specified line in it. If the internal Layout has not been built, return 0 and set bounds to (0, 0, 0, 0)", "history": "Added in API level 1", "FullName": "public int getLineBounds (int line, Rect bounds)"}, "setIncludeFontPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getIncludeFontPadding_E@"], "Permissions": [], "Description": "Set whether the TextView includes extra top and bottom padding to make room for accents that go above the normal ascent and descent. The default is true.", "history": "Added in API level 1", "FullName": "public void setIncludeFontPadding (boolean includepad)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 1", "FullName": "protected void onDraw (Canvas canvas)"}, "setError(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the right-hand compound drawable of the TextView to the \"error\" icon and sets an error message that will be displayed in a popup when the TextView has focus. The icon and error message will be reset to null when any key events cause changes to the TextView's text. If the error is null, the error message and icon will be cleared.", "history": "Added in API level 1", "FullName": "public void setError (CharSequence error)"}, "getHintTextColors()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the color of the hint text, for the different states of this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHintTextColor_E@", "@B_android#widget#TextView#setTextColor_E@", "@B_android#widget#TextView#setLinkTextColor_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final ColorStateList getHintTextColors ()"}, "getAutoSizeStepGranularity()": {"Returns": [["int", "the current auto-size step granularity in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setAutoSizeTextTypeUniformWithConfiguration_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int getAutoSizeStepGranularity ()"}, "getBottomPaddingOffset()": {"Returns": [["int", "The bottom padding offset in pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Amount by which to extend the bottom fading region. Called only when @B_android#view#View#isPaddingOffsetRequired_E@ returns true.", "history": "Added in API level 2", "FullName": "protected int getBottomPaddingOffset ()"}, "setEms(int)": {"Returns": [], "Parameters": [["int", "int: the exact width of the TextView in terms of ems"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setWidth_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be exactly ems wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum/maximum configurations such as @B_android#widget#TextView#setMinEms_E@ or @B_android#widget#TextView#setMaxEms_E@.", "history": "Added in API level 1", "FullName": "public void setEms (int ems)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: text to be appended to the already displayed text"], ["int", "int: the index of the first character in the text"], ["int", "int: the index of the character following the last character in the text"]], "Throws": [], "SeeAlso": ["@B_java#lang#Appendable#append_E@"], "Permissions": [], "Description": "Convenience method to append the specified text slice to the TextView's display buffer, upgrading it to @B_android#widget#TextView#BufferType#EDITABLE_E@ if it was not already editable.", "history": "added in API level 1", "FullName": "public void append (CharSequence text, int start, int end)"}, "computeVerticalScrollExtent()": {"Returns": [["int", "the vertical extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollOffset_E@. The default extent is the drawing height of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollExtent ()"}, "setShadowLayer(float, float, float, int)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Paint#setShadowLayer_E@"], "Permissions": [], "Description": "Gives the text a shadow of the specified blur radius and color, the specified distance from its drawn position. The text shadow produced does not interact with the properties on view that are responsible for real time shadows, @B_android#view#View#getElevation_E@ and @B_android#view#View#getTranslationZ_E@.", "history": "added in API level 1", "FullName": "public void setShadowLayer (float radius, float dx, float dy, int color)"}, "getShadowRadius()": {"Returns": [["float", "the radius of the shadow layer. If 0, the shadow layer is not visible"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setShadowLayer_E@"], "Permissions": [], "Description": "Gets the radius of the shadow layer.", "history": "Added in API level 16", "FullName": "public float getShadowRadius ()"}, "onStartTemporaryDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when a container is going to temporarily detach a child, with @B_android#view#ViewGroup#detachViewFromParent_E@. It will either be followed by @B_android#view#View#onFinishTemporaryDetach_E@ or @B_android#view#View#onDetachedFromWindow_E@ when the container is done.", "history": "Added in API level 3", "FullName": "public void onStartTemporaryDetach ()"}, "setTextSelectHandleRight(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleRight_E@"], "Permissions": [], "Description": "Sets the Drawable corresponding to the right handle used for selecting text. The Drawable defaults to the value of the textSelectHandleRight attribute. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public void setTextSelectHandleRight (Drawable textSelectHandleRight)"}, "setCompoundDrawablesRelative(android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable,android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Drawables (if any) to appear to the start of, above, to the end of, and below the text. Use null if you do not want a Drawable there. The Drawables must already have had @B_android#graphics#drawable#Drawable#setBounds_E@ called. Calling this method will overwrite any Drawables previously set using @B_android#widget#TextView#setCompoundDrawables_E@ or related methods.", "history": "Added in API level 17", "FullName": "public void setCompoundDrawablesRelative (Drawable start, Drawable top, Drawable end, Drawable bottom)"}, "resetResolvedDrawables()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Since: API Level 14", "FullName": "protected void resetResolvedDrawables ()"}, "setTextColor(int)": {"Returns": [], "Parameters": [["int", "int: A color value in the form 0xAARRGGBB. Do not pass a resource ID. To get a color value from a resource ID, call https:##developer#android#com@B_android#support#v4#content#ContextCompat#getColor_E@."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextColor_E@", "@B_android#widget#TextView#getTextColors_E@"], "Permissions": [], "Description": "Sets the text color for all the states (normal, selected, focused) to be this color.", "history": "Added in API level 1", "FullName": "public void setTextColor (int color)"}, "setCompoundDrawableTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: the blending mode used to apply the tint, may be null to clear tint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCompoundDrawableTintList_E@", "@B_android#graphics#drawable#Drawable#setTintBlendMode_E@"], "Permissions": [], "Description": "Specifies the blending mode used to apply the tint specified by @B_android#widget#TextView#setCompoundDrawableTintList_E@ to the compound drawables. The default mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@.", "history": "Added in API level 29", "FullName": "public void setCompoundDrawableTintBlendMode (BlendMode blendMode)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "Added in API level 1", "FullName": "public void onWindowFocusChanged (boolean hasWindowFocus)"}, "getTotalPaddingEnd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total end padding of the view, including the end Drawable if any.", "history": "Added in API level 17", "FullName": "public int getTotalPaddingEnd ()"}, "setHyphenationFrequency(int)": {"Returns": [], "Parameters": [["int", "int: the hyphenation frequency to use, one of @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@ Value is @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@, or @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#getHyphenationFrequency_E@", "@B_android#widget#TextView#getBreakStrategy_E@"], "Permissions": [], "Description": "Sets the frequency of automatic hyphenation to use when determining word breaks. The default value for both TextView and @B_android#widget#EditText_E@ is @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@. Note that the default hyphenation frequency value is set from the theme. Enabling hyphenation with either using @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@ or @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@ while line breaking is set to one of @B_android#text#Layout#BREAK_STRATEGY_BALANCED_E@, @B_android#text#Layout#BREAK_STRATEGY_HIGH_QUALITY_E@ improves the structure of text layout however has performance impact and requires more time to do the text layout. Note: Before Android Q, in the theme hyphenation frequency is set to @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@. The default value is changed into @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@ on Q.", "history": "Added in API level 23", "FullName": "public void setHyphenationFrequency (int hyphenationFrequency)"}, "setLineSpacing(float, float)": {"Returns": [], "Parameters": [["float", "float: The value in pixels that should be added to each line other than the last line. This will be applied after the multiplier"], ["float", "float: The value by which each line height other than the last line will be multiplied by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets line spacing for this TextView. Each line other than the last line will have its height multiplied by mult and have add added to it.", "history": "added in API level 1", "FullName": "public void setLineSpacing (float add, float mult)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public Parcelable onSaveInstanceState ()"}, "getCurrentTextColor()": {"Returns": [["int", "Returns the current text color."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current color selected for normal text.", "history": "Added in API level 1", "FullName": "public final int getCurrentTextColor ()"}, "setSpannableFactory(android.text.Spannable.Factory)": {"Returns": [], "Parameters": [["@B_android#text#Spannable#Factory_E@", "Spannable.Factory: @B_android#text#Spannable#Factory_E@ to be used"]], "Throws": [], "SeeAlso": ["@B_android#text#Spannable#Factory_E@", "@B_android#widget#TextView#BufferType_E@"], "Permissions": [], "Description": "Sets the Factory used to create new @B_android#text#Spannable_E@.", "history": "Added in API level 1", "FullName": "public final void setSpannableFactory (Spannable.Factory factory)"}, "getHighlightColor()": {"Returns": [["int", "the color used to display the selection highlight"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHighlightColor_E@"], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public int getHighlightColor ()"}, "getMinLines()": {"Returns": [["int", "the minimum height of TextView in terms of number of lines or -1 if the minimum height is not defined in lines"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setMinLines_E@", "@B_android#widget#TextView#setLines_E@"], "Permissions": [], "Description": "Returns the minimum height of TextView in terms of number of lines or -1 if the minimum height was set using @B_android#widget#TextView#setMinHeight_E@ or @B_android#widget#TextView#setHeight_E@.", "history": "Added in API level 16", "FullName": "public int getMinLines ()"}, "setTextIsSelectable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the content of this TextView should be selectable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the content of this view is selectable by the user. The default is false, meaning that the content is not selectable. When you use a TextView to display a useful piece of information to the user (such as a contact's address), make it selectable, so that the user can select and copy its content. You can also use set the XML attribute @B_android#R#styleable#TextView_textIsSelectable_E@ to \"true\". When you call this method to set the value of textIsSelectable, it sets the flags focusable, focusableInTouchMode, clickable, and longClickable to the same value. These flags correspond to the attributes @B_android#R#styleable#View_focusable_E@, @B_android#R#styleable#View_focusableInTouchMode_E@, @B_android#R#styleable#View_clickable_E@, and @B_android#R#styleable#View_longClickable_E@. To restore any of these flags to a state you had set previously, call one or more of the following methods: @B_android#view#View#setFocusable_E@, @B_android#view#View#setFocusableInTouchMode_E@, @B_android#view#View#setClickable_E@ or @B_android#view#View#setLongClickable_E@.", "history": "Added in API level 11", "FullName": "public void setTextIsSelectable (boolean selectable)"}, "onSetAlpha(int)": {"Returns": [["", "true if the view can draw with the specified alpha."]], "Parameters": [["int", "The alpha (0..255) to apply to the view's drawing"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked if there is a Transform that involves alpha. Subclass that can draw themselves with the specified alpha should return true, and then respect that alpha when their onDraw() is called. If this returns false then the view may be redirected to draw into an offscreen buffer to fulfill the request, which will look fine, but may be slower than if the subclass handles it internally. The default implementation returns false.", "history": "Since: API Level 1", "FullName": "protected boolean onSetAlpha (int alpha)"}, "getKeyListener()": {"Returns": [["@B_android#text#method#KeyListener_E@", "the current key listener for this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current @B_android#text#method#KeyListener_E@ for the TextView. This will frequently be null for non-EditText TextViews.", "history": "Added in API level 1", "FullName": "public final KeyListener getKeyListener ()"}, "getTextSize()": {"Returns": [["float", "the size (in pixels) of the default text size in this TextView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public float getTextSize ()"}, "getTextSelectHandleLeft()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the left text selection handle drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleLeft_E@"], "Permissions": [], "Description": "Returns the Drawable corresponding to the left handle used for selecting text. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public Drawable getTextSelectHandleLeft ()"}, "setAutoLinkMask(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the autolink mask of the text. See @B_android#text#util#Linkify#ALL_E@ and peers for possible values. @B_android#text#util#Linkify#MAP_ADDRESSES_E@ is deprecated and should be avoided; see its documentation.", "history": "Added in API level 1", "FullName": "public final void setAutoLinkMask (int mask)"}, "getJustificationMode()": {"Returns": [["int", "true if currently paragraph justification mode. Value is @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_NONE_E@, or @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_INTER_WORD_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setJustificationMode_E@"], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public int getJustificationMode ()"}, "isCursorVisible()": {"Returns": [["boolean", "whether or not the cursor is visible (assuming this TextView is editable)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setCursorVisible_E@"], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public boolean isCursorVisible ()"}, "setPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the left padding in pixels"], ["int", "int: the top padding in pixels"], ["int", "int: the right padding in pixels"], ["int", "int: the bottom padding in pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFirstBaselineToTopHeight_E@", "@B_android#widget#TextView#setLastBaselineToBottomHeight_E@"], "Permissions": [], "Description": "Sets the padding. The view may add on the space required to display the scrollbars, depending on the style and visibility of the scrollbars. So the values returned from @B_android#view#View#getPaddingLeft_E@, @B_android#view#View#getPaddingTop_E@, @B_android#view#View#getPaddingRight_E@ and @B_android#view#View#getPaddingBottom_E@ may be different from the values set in this call.", "history": "added in API level 1", "FullName": "public void setPadding (int left, int top, int right, int bottom)"}, "setWidth(int)": {"Returns": [], "Parameters": [["int", "int: the exact width of the TextView in terms of pixels"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setEms_E@"], "Permissions": [], "Description": "Sets the width of the TextView to be exactly pixels wide. This value is used for width calculation if LayoutParams does not force TextView to have an exact width. Setting this value overrides previous minimum/maximum width configurations such as @B_android#widget#TextView#setMinWidth_E@ or @B_android#widget#TextView#setMaxWidth_E@.", "history": "Added in API level 1", "FullName": "public void setWidth (int pixels)"}, "getCompoundPaddingEnd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end padding of the view, plus space for the end Drawable if any.", "history": "Added in API level 17", "FullName": "public int getCompoundPaddingEnd ()"}, "isFallbackLineSpacing()": {"Returns": [["boolean", "whether fallback line spacing is enabled, true by default"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setFallbackLineSpacing_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public boolean isFallbackLineSpacing ()"}, "getTextSelectHandleRight()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the right text selection handle drawable This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setTextSelectHandleRight_E@"], "Permissions": [], "Description": "Returns the Drawable corresponding to the right handle used for selecting text. Note that any change applied to the handle Drawable will not be visible until the handle is hidden and then drawn again.", "history": "Added in API level 29", "FullName": "public Drawable getTextSelectHandleRight ()"}, "getPaint()": {"Returns": [["@B_android#text#TextPaint_E@", "The base paint used for the text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#text#TextPaint_E@ used for the text. Use this only to consult the Paint's properties and not to change them.", "history": "Added in API level 1", "FullName": "public TextPaint getPaint ()"}, "onSelectionChanged(int, int)": {"Returns": [], "Parameters": [["int", "int: The new selection start location."], ["int", "int: The new selection end location."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the selection has changed, in case any subclasses would like to know.", "history": "added in API level 3", "FullName": "protected void onSelectionChanged (int selStart, int selEnd)"}}, "Inheritance": ["@B_android#view#View_E@"], "ClassName": "android.widget.TextView", "ClassDesc": "A user interface element that displays text to the user. To provide user-editable text, see @B_android#widget#EditText_E@. The following code sample shows a typical use, with an XML layout and code to modify the contents of the text view: This code sample demonstrates how to modify the contents of the text view defined in the previous XML layout: To customize the appearance of TextView, see See @B_android#R#styleable#TextView_E@, @B_android#R#styleable#View_E@"}