{"Functions": {"setSessionCacheSize(int)": {"Returns": [], "Parameters": [["int", "int: the new session cache size limit; zero means there is no limit."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified size is < 0."]], "SeeAlso": ["@B_javax#net#ssl#SSLSessionContext#getSessionCacheSize_E@"], "Permissions": [], "Description": "Sets the size of the cache used for storing SSLSession objects grouped under this SSLSessionContext.", "history": "Added in API level 1", "FullName": "public abstract void setSessionCacheSize (int size)"}, "getSessionCacheSize()": {"Returns": [["int", "size of the session cache; zero means there is no size limit."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSessionContext#setSessionCacheSize_E@"], "Permissions": [], "Description": "Returns the size of the cache used for storing SSLSession objects grouped under this SSLSessionContext.", "history": "Added in API level 1", "FullName": "public abstract int getSessionCacheSize ()"}, "getSessionTimeout()": {"Returns": [["int", "the session timeout limit in seconds; zero means there is no limit."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSessionContext#setSessionTimeout_E@"], "Permissions": [], "Description": "Returns the timeout limit of SSLSession objects grouped under this SSLSessionContext. If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 't' seconds after its creation time. When the timeout limit is exceeded for a session, the SSLSession object is invalidated and future connections cannot resume or rejoin the session. A check for sessions exceeding the timeout limit is made immediately whenever the timeout limit is changed for this SSLSessionContext.", "history": "Added in API level 1", "FullName": "public abstract int getSessionTimeout ()"}, "setSessionTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the new session timeout limit in seconds; zero means there is no limit."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the timeout specified is < 0."]], "SeeAlso": ["@B_javax#net#ssl#SSLSessionContext#getSessionTimeout_E@"], "Permissions": [], "Description": "Sets the timeout limit for SSLSession objects grouped under this SSLSessionContext. If the timeout limit is set to 't' seconds, a session exceeds the timeout limit 't' seconds after its creation time. When the timeout limit is exceeded for a session, the SSLSession object is invalidated and future connections cannot resume or rejoin the session. A check for sessions exceeding the timeout is made immediately whenever the timeout limit is changed for this SSLSessionContext.", "history": "Added in API level 1", "FullName": "public abstract void setSessionTimeout (int seconds)"}, "getSession(byte[])": {"Returns": [["@B_javax#net#ssl#SSLSession_E@", "the SSLSession or null if the specified session id does not refer to a valid SSLSession."]], "Parameters": [["byte[]", "byte: the Session identifier"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if sessionId is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the SSLSession bound to the specified session id.", "history": "Added in API level 1", "FullName": "public abstract SSLSession getSession (byte[] sessionId)"}, "getIds()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of all the Session id's"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an Enumeration of all session id's grouped under this SSLSessionContext.", "history": "Added in API level 1", "FullName": "public abstract Enumeration<byte[]> getIds ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SSLSessionContext", "ClassDesc": "A SSLSessionContext represents a set of SSLSessions associated with a single entity. For example, it could be associated with a server or client who participates in many sessions concurrently. Not all environments will contain session contexts. There are SSLSessionContext parameters that affect how sessions are stored: Sessions can be set to expire after a specified time limit. The number of sessions that can be stored in context can be limited. A session can be retrieved based on its session id, and all session id's in a SSLSessionContext can be listed."}