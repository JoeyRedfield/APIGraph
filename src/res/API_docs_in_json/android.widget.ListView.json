{"Functions": {"setCacheColorHint(int)": {"Returns": [], "Parameters": [["int", "int: The background color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to a non-zero value, the cache color hint indicates that this list is always drawn on top of a solid, single-color, opaque background. Zero means that what's behind this object is translucent (non solid) or is not made of a single color. This hint will not affect any existing background drawable set on this view ( typically set via @B_android#view#View#setBackgroundDrawable_E@).", "history": "Added in API level 1", "FullName": "public void setCacheColorHint (int color)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getDivider()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the current drawable drawn between list elements This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable that will be drawn between each item in the list.", "history": "Added in API level 1", "FullName": "public Drawable getDivider ()"}, "getDividerHeight()": {"Returns": [["int", "Returns the height of the divider that will be drawn between each item in the list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getDividerHeight ()"}, "addHeaderView(android.view.View,java.lang.Object,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to add."], ["@B_java#lang#Object_E@", "Object: Data to associate with this view"], ["boolean", "boolean: whether the item is selectable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a fixed view to appear at the top of the list. If this method is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced, this method could only be called before setting the adapter with @B_android#widget#ListView#setAdapter_E@. Starting with @B_android#os#Build#VERSION_CODES#KITKAT_E@, this method may be called at any time. If the ListView's adapter does not extend @B_android#widget#HeaderViewListAdapter_E@, it will be wrapped with a supporting instance of @B_android#widget#WrapperListAdapter_E@.", "history": "Added in API level 1", "FullName": "public void addHeaderView (View v, Object data, boolean isSelectable)"}, "getCheckItemIds()": {"Returns": [["long[]", "A new array which contains the id of each checked item in the list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#AbsListView#getCheckedItemIds_E@ instead. Returns the set of checked items ids. The result is only valid if the choice mode has not been set to @B_android#widget#AbsListView#CHOICE_MODE_NONE_E@.", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public long[] getCheckItemIds ()"}, "getAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "The adapter currently used to display data in this ListView."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#setAdapter_E@"], "Permissions": [], "Description": "Returns the adapter currently in use in this ListView. The returned adapter might not be the same adapter passed to @B_android#widget#ListView#setAdapter_E@ but might be a @B_android#widget#WrapperListAdapter_E@.", "history": "Added in API level 1", "FullName": "public ListAdapter getAdapter ()"}, "getItemsCanFocus()": {"Returns": [["boolean", "Whether the views created by the ListAdapter can contain focusable items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean getItemsCanFocus ()"}, "getMaxScrollAmount()": {"Returns": [["int", "The maximum amount a list view will scroll in response to an arrow event."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getMaxScrollAmount ()"}, "getOverscrollFooter()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The drawable that will be drawn below all other list content"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public Drawable getOverscrollFooter ()"}, "onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View representing the list item."], ["int", "int: Position of the list item within the adapter."], ["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: Node info to populate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes an @B_android#view#accessibility#AccessibilityNodeInfo_E@ with information about a particular item in the list.", "history": "Added in API level 19", "FullName": "public void onInitializeAccessibilityNodeInfoForItem (View view, int position, AccessibilityNodeInfo info)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "addFooterView(android.view.View,java.lang.Object,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to add."], ["@B_java#lang#Object_E@", "Object: Data to associate with this view"], ["boolean", "boolean: true if the footer view can be selected"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced, this method could only be called before setting the adapter with @B_android#widget#ListView#setAdapter_E@. Starting with @B_android#os#Build#VERSION_CODES#KITKAT_E@, this method may be called at any time. If the ListView's adapter does not extend @B_android#widget#HeaderViewListAdapter_E@, it will be wrapped with a supporting instance of @B_android#widget#WrapperListAdapter_E@.", "history": "Added in API level 1", "FullName": "public void addFooterView (View v, Object data, boolean isSelectable)"}, "findViewWithTagTraversal(java.lang.Object)": {"Returns": [["@B_android#view#View_E@", "the view of specified tag, null if cannot be found"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the tag of the view to be found"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "View findViewWithTagTraversal (Object tag)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setFooterDividersEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to draw the footers, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#setHeaderDividersEnabled_E@", "@B_android#widget#ListView#areFooterDividersEnabled_E@", "@B_android#widget#ListView#addFooterView_E@"], "Permissions": [], "Description": "Enables or disables the drawing of the divider for footer views.", "history": "Added in API level 3", "FullName": "public void setFooterDividersEnabled (boolean footerDividersEnabled)"}, "setOverscrollFooter(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable that will be drawn below all other list content. This area can become visible when the user overscrolls the list, or when the list's content does not fully fill the container area.", "history": "Added in API level 9", "FullName": "public void setOverscrollFooter (Drawable footer)"}, "getFooterViewsCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getFooterViewsCount ()"}, "removeFooterView(android.view.View)": {"Returns": [["boolean", "true if the view was removed, false if the view was not a footer view"]], "Parameters": [["@B_android#view#View_E@", "View: The view to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously-added footer view.", "history": "Added in API level 1", "FullName": "public boolean removeFooterView (View v)"}, "ListView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ListView (Context context)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean gainFocus, int direction, Rect previouslyFocusedRect)"}, "canAnimate()": {"Returns": [["boolean", "true if the children can be animated, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the view group has the ability to animate its children after the first layout.", "history": "Added in API level 1", "FullName": "protected boolean canAnimate ()"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "smoothScrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed.", "history": "Added in API level 8", "FullName": "public void smoothScrollToPosition (int position)"}, "getHeaderViewsCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getHeaderViewsCount ()"}, "setDivider(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to use This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable that will be drawn between each item in the list. @B_android#widget#ListView#setDividerHeight_E@.", "history": "Added in API level 1", "FullName": "public void setDivider (Drawable divider)"}, "addFooterView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a fixed view to appear at the bottom of the list. If addFooterView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced, this method could only be called before setting the adapter with @B_android#widget#ListView#setAdapter_E@. Starting with @B_android#os#Build#VERSION_CODES#KITKAT_E@, this method may be called at any time. If the ListView's adapter does not extend @B_android#widget#HeaderViewListAdapter_E@, it will be wrapped with a supporting instance of @B_android#widget#WrapperListAdapter_E@.", "history": "Added in API level 1", "FullName": "public void addFooterView (View v)"}, "smoothScrollByOffset(int)": {"Returns": [], "Parameters": [["int", "int: The amount to offset from the adapter position to scroll to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position offset. The view will scroll such that the indicated position is displayed.", "history": "Added in API level 11", "FullName": "public void smoothScrollByOffset (int offset)"}, "setHeaderDividersEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to draw the headers, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#setFooterDividersEnabled_E@", "@B_android#widget#ListView#areHeaderDividersEnabled_E@", "@B_android#widget#ListView#addHeaderView_E@"], "Permissions": [], "Description": "Enables or disables the drawing of the divider for header views.", "history": "Added in API level 3", "FullName": "public void setHeaderDividersEnabled (boolean headerDividersEnabled)"}, "ListView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ListView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter: The ListAdapter which is responsible for maintaining the data backing this list and for producing a view to represent an item in that data set."]], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#getAdapter_E@"], "Permissions": [], "Description": "Sets the data behind this ListView. The adapter passed to this method may be wrapped by a @B_android#widget#WrapperListAdapter_E@, depending on the ListView features currently in use. For instance, adding headers and/or footers will cause the adapter to be wrapped.", "history": "Added in API level 1", "FullName": "public void setAdapter (ListAdapter adapter)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "layoutChildren()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must override this method to layout their children.", "history": "Added in API level 1", "FullName": "protected void layoutChildren ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "isOpaque()": {"Returns": [["boolean", "True if this View is guaranteed to be fully opaque, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this View is opaque. An opaque View guarantees that it will draw all the pixels overlapping its bounds using a fully opaque color. Subclasses of View should override this method whenever possible to indicate whether an instance is opaque. Opaque Views are treated in a special way by the View hierarchy, possibly allowing it to perform optimizations during invalidate/draw passes.", "history": "Added in API level 7", "FullName": "public boolean isOpaque ()"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)": {"Returns": [["boolean", "Whether the group scrolled to handle the operation"]], "Parameters": [["@B_android#view#View_E@", "View: The direct child making the request."], ["@B_android#graphics#Rect_E@", "Rect: The rectangle in the child's coordinates the child wishes to be on the screen."], ["boolean", "boolean: True to forbid animated or delayed scrolling, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child of this group wants a particular rectangle to be positioned onto the screen. @B_android#view#ViewGroup_E@s overriding this can trust that: child will be a direct child of this group rectangle will be in the child's content coordinates @B_android#view#ViewGroup_E@s overriding this should uphold the contract: nothing will change if the rectangle is already visible the view port will be scrolled only just enough to make the rectangle visible", "history": "Added in API level 1", "FullName": "public boolean requestChildRectangleOnScreen (View child, Rect rect, boolean immediate)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 1", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "setItemsCanFocus(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if items can get focus, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that the views created by the ListAdapter can contain focusable items.", "history": "Added in API level 1", "FullName": "public void setItemsCanFocus (boolean itemsCanFocus)"}, "ListView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ListView (Context context, AttributeSet attrs, int defStyleAttr)"}, "ListView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ListView (Context context, AttributeSet attrs)"}, "setSelectionFromTop(int, int)": {"Returns": [], "Parameters": [["int", "Index (starting at 0) of the data item to be selected."], ["int", "The distance from the top edge of the ListView (plus padding) that the item will be positioned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the selected item and positions the selection y pixels from the top edge of the ListView. (If in touch mode, the item will not be selected but it will still be positioned appropriately.)", "history": "Added in API level 1", "FullName": "public void setSelectionFromTop (int position, int y)"}, "onFinishInflate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finalize inflating a view from XML. This is called as the last phase of inflation, after all child views have been added. Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFinishInflate ()"}, "getOverscrollHeader()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The drawable that will be drawn above all other list content"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public Drawable getOverscrollHeader ()"}, "removeHeaderView(android.view.View)": {"Returns": [["boolean", "true if the view was removed, false if the view was not a header view"]], "Parameters": [["@B_android#view#View_E@", "View: The view to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously-added header view.", "history": "Added in API level 1", "FullName": "public boolean removeHeaderView (View v)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "drawChild(android.graphics.Canvas,android.view.View,long)": {"Returns": [["boolean", "True if an invalidate() was issued"]], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas on which to draw the child"], ["@B_android#view#View_E@", "View: Who to draw"], ["long", "long: The time at which draw is occurring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw one child of this View Group. This method is responsible for getting the canvas in the right state. This includes clipping, translating so that the child's scrolled origin is at 0, 0, and applying any animation transformations.", "history": "Added in API level 1", "FullName": "protected boolean drawChild (Canvas canvas, View child, long drawingTime)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setDividerHeight(int)": {"Returns": [], "Parameters": [["int", "int: The new height of the divider in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the height of the divider that will be drawn between each item in the list. Calling this will override the intrinsic height as set by @B_android#widget#ListView#setDivider_E@", "history": "Added in API level 1", "FullName": "public void setDividerHeight (int height)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "areHeaderDividersEnabled()": {"Returns": [["boolean", "Whether the drawing of the divider for header views is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#setHeaderDividersEnabled_E@"], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public boolean areHeaderDividersEnabled ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "addHeaderView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a fixed view to appear at the top of the list. If addHeaderView is called more than once, the views will appear in the order they were added. Views added using this call can take focus if they want. Note: When first introduced, this method could only be called before setting the adapter with @B_android#widget#ListView#setAdapter_E@. Starting with @B_android#os#Build#VERSION_CODES#KITKAT_E@, this method may be called at any time. If the ListView's adapter does not extend @B_android#widget#HeaderViewListAdapter_E@, it will be wrapped with a supporting instance of @B_android#widget#WrapperListAdapter_E@.", "history": "Added in API level 1", "FullName": "public void addHeaderView (View v)"}, "areFooterDividersEnabled()": {"Returns": [["boolean", "Whether the drawing of the divider for footer views is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#ListView#setFooterDividersEnabled_E@"], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public boolean areFooterDividersEnabled ()"}, "setOverscrollHeader(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable that will be drawn above all other list content. This area can become visible when the user overscrolls the list.", "history": "Added in API level 9", "FullName": "public void setOverscrollHeader (Drawable header)"}, "setSelectionAfterHeaderView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "setSelectionAfterHeaderView set the selection to be the first list item after the header views.", "history": "Added in API level 1", "FullName": "public void setSelectionAfterHeaderView ()"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently selected item. If in touch mode, the item will not be selected but it will still be positioned appropriately. If the specified selection position is less than 0, then the item at position 0 will be selected.", "history": "Added in API level 1", "FullName": "public void setSelection (int position)"}, "findViewTraversal(int)": {"Returns": [["@B_android#view#View_E@", "the view of the specified id, null if cannot be found"]], "Parameters": [["int", "int: the id of the view to be found"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "View findViewTraversal (int id)"}, "setRemoteViewsAdapter(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent used to identify the RemoteViewsService for the adapter to connect to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent.", "history": "Added in API level 11", "FullName": "public void setRemoteViewsAdapter (Intent intent)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@", "@B_android#widget#AbsListView_E@"], "ClassName": "android.widget.ListView", "ClassDesc": "Displays a vertically-scrollable collection of views, where each view is positioned immediatelybelow the previous view in the list. For a more modern, flexible, and performant approach to displaying lists, use https:##developer#android#com@B_android#support#v7#widget#RecyclerView_E@. To display a list, you can include a list view in your layout XML file: A list view is an @B_android#widget#ListAdapter_E@ as needed, such as to display new views as the user scrolls up or down. In order to display items in the list, call @B_android#widget#ListView#setAdapter_E@ to associate an adapter with the list. For a simple example, see the discussion of filling an adapter view with text in the To display a more custom view for each item in your dataset, implement a ListAdapter. For example, extend @B_android#widget#BaseAdapter_E@ and create and configure the view for each data item in getView(...): ListView attempts to reuse view objects in order to improve performance and avoid a lag in response to user scrolls. To take advantage of this feature, check if the convertView provided to getView(...) is null before creating or inflating a new view object. See To specify an action when a user clicks or taps on a single list item, see To learn how to populate a list view with a CursorAdapter, see the discussion of filling an adapter view with text in the Note, many examples use @B_android#app#ListActivity_E@ or @B_android#app#ListFragment_E@ to display a list view. Instead, favor the more flexible approach when writing your own app: use a more generic Activity subclass or Fragment subclass and add a list view to the layout or view hierarchy directly. This approach gives you more direct control of the list view and adapter."}