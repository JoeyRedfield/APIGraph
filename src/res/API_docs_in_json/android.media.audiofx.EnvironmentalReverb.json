{"Functions": {"getReflectionsDelay()": {"Returns": [["int", "the early reflections delay in milliseconds."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the reflections delay.", "history": "Added in API level 9", "FullName": "public int getReflectionsDelay ()"}, "getProperties()": {"Returns": [["@B_android#media#audiofx#EnvironmentalReverb#Settings_E@", "an EnvironmentalReverb.Settings object containing all current parameters values"]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the environmental reverb properties. This method is useful when a snapshot of current reverb settings must be saved by the application.", "history": "Added in API level 9", "FullName": "public EnvironmentalReverb.Settings getProperties ()"}, "getRoomLevel()": {"Returns": [["short", "the room level in millibels."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the master volume level of the environmental reverb effect.", "history": "Added in API level 9", "FullName": "public short getRoomLevel ()"}, "getReverbLevel()": {"Returns": [["short", "the reverb level in millibels."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the reverb level.", "history": "Added in API level 9", "FullName": "public short getReverbLevel ()"}, "getDiffusion()": {"Returns": [["short", "the diffusion level. See @B_android#media#audiofx#EnvironmentalReverb#setDiffusion_E@ for units."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets diffusion level.", "history": "Added in API level 9", "FullName": "public short getDiffusion ()"}, "setDensity(short)": {"Returns": [], "Parameters": [["short", "short: density specified using a permille scale. The valid range is [0, 1000]. A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level produce a more colored effect."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Controls the modal density of the late reverberation decay. The scale should approximately map linearly to the perceived change in reverberation. A lower density creates a hollow sound that is useful for simulating small reverberation spaces such as bathrooms.", "history": "Added in API level 9", "FullName": "public void setDensity (short density)"}, "setParameterListener(android.media.audiofx.EnvironmentalReverb.OnParameterChangeListener)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#EnvironmentalReverb#OnParameterChangeListener_E@", "EnvironmentalReverb.OnParameterChangeListener: OnParameterChangeListener interface registered"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers an OnParameterChangeListener interface.", "history": "Added in API level 9", "FullName": "public void setParameterListener (EnvironmentalReverb.OnParameterChangeListener listener)"}, "setRoomHFLevel(short)": {"Returns": [], "Parameters": [["short", "short: high frequency attenuation level in millibels. The valid range is [-9000, 0]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect. This controls a low-pass filter that will reduce the level of the high-frequency.", "history": "Added in API level 9", "FullName": "public void setRoomHFLevel (short roomHF)"}, "getReverbDelay()": {"Returns": [["int", "the reverb delay in milliseconds."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the reverb delay.", "history": "Added in API level 9", "FullName": "public int getReverbDelay ()"}, "EnvironmentalReverb(int, int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the EnvironmentalReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. If audioSession is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix. As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "added in API level 9", "FullName": "public EnvironmentalReverb (int priority, int audioSession)"}, "setReverbLevel(short)": {"Returns": [], "Parameters": [["short", "short: reverb level in millibels. The valid range is [-9000, 2000]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the volume level of the late reverberation. This level is combined with the overall room level (set using @B_android#media#audiofx#EnvironmentalReverb#setRoomLevel_E@).", "history": "Added in API level 9", "FullName": "public void setReverbLevel (short reverbLevel)"}, "setReverbDelay(int)": {"Returns": [], "Parameters": [["int", "int: reverb delay in milliseconds. The valid range is [0, 100]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the time between the first reflection and the reverberation.", "history": "Added in API level 9", "FullName": "public void setReverbDelay (int reverbDelay)"}, "getRoomHFLevel()": {"Returns": [["short", "the room HF level in millibels."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the room HF level.", "history": "Added in API level 9", "FullName": "public short getRoomHFLevel ()"}, "setDiffusion(short)": {"Returns": [], "Parameters": [["short", "short: diffusion specified using a permille scale. The diffusion valid range is [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay. Values below this level give a more grainy character."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the echo density in the late reverberation decay. The scale should approximately map linearly to the perceived change in reverberation.", "history": "Added in API level 9", "FullName": "public void setDiffusion (short diffusion)"}, "setRoomLevel(short)": {"Returns": [], "Parameters": [["short", "short: room level in millibels. The valid range is [-9000, 0]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the master volume level of the environmental reverb effect.", "history": "Added in API level 9", "FullName": "public void setRoomLevel (short room)"}, "setReflectionsDelay(int)": {"Returns": [], "Parameters": [["int", "int: reflections delay in milliseconds. The valid range is [0, 300]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the delay time for the early reflections. This method sets the time between when the direct path is heard and when the first reflection is heard.", "history": "Added in API level 9", "FullName": "public void setReflectionsDelay (int reflectionsDelay)"}, "EnvironmentalReverb(int,int)": {"Returns": [], "Parameters": [["int", "int: the priority level requested by the application for controlling the EnvironmentalReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number."], ["int", "int: system wide unique audio session identifier. If audioSession is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix. As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output."]], "Throws": [["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["", "java.lang.RuntimeException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#RuntimeException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Class constructor.", "history": "Added in API level 9", "FullName": "public EnvironmentalReverb (int priority, int audioSession)"}, "getDecayTime()": {"Returns": [["int", "the decay time in milliseconds."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the decay time.", "history": "Added in API level 9", "FullName": "public int getDecayTime ()"}, "setDecayHFRatio(short)": {"Returns": [], "Parameters": [["short", "short: high frequency decay ratio using a permille scale. The valid range is [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies.", "history": "Added in API level 9", "FullName": "public void setDecayHFRatio (short decayHFRatio)"}, "setDecayTime(int)": {"Returns": [], "Parameters": [["int", "int: decay time in milliseconds. The valid range is [100, 20000]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the time taken for the level of reverberation to decay by 60 dB.", "history": "Added in API level 9", "FullName": "public void setDecayTime (int decayTime)"}, "getReflectionsLevel()": {"Returns": [["short", "the early reflections level in millibels."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the volume level of the early reflections.", "history": "Added in API level 9", "FullName": "public short getReflectionsLevel ()"}, "setProperties(android.media.audiofx.EnvironmentalReverb.Settings)": {"Returns": [], "Parameters": [["@B_android#media#audiofx#EnvironmentalReverb#Settings_E@", "EnvironmentalReverb.Settings: a EnvironmentalReverb.Settings object containing the properties to apply"]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the environmental reverb properties. This method is useful when reverb settings have to be applied from a previous backup.", "history": "Added in API level 9", "FullName": "public void setProperties (EnvironmentalReverb.Settings settings)"}, "getDensity()": {"Returns": [["short", "the density level. See @B_android#media#audiofx#EnvironmentalReverb#setDiffusion_E@ for units."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the density level.", "history": "Added in API level 9", "FullName": "public short getDensity ()"}, "getDecayHFRatio()": {"Returns": [["short", "the decay HF ration. See @B_android#media#audiofx#EnvironmentalReverb#setDecayHFRatio_E@ for units."]], "Parameters": [], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies.", "history": "Added in API level 9", "FullName": "public short getDecayHFRatio ()"}, "setReflectionsLevel(short)": {"Returns": [], "Parameters": [["short", "short: reflection level in millibels. The valid range is [-9000, 1000]."]], "Throws": [["", "java.lang.IllegalStateException"], ["", "java.lang.IllegalArgumentException"], ["", "java.lang.UnsupportedOperationException"], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the volume level of the early reflections. This level is combined with the overall room level (set using @B_android#media#audiofx#EnvironmentalReverb#setRoomLevel_E@).", "history": "Added in API level 9", "FullName": "public void setReflectionsLevel (short reflectionsLevel)"}}, "Inheritance": ["@B_android#media#audiofx#AudioEffect_E@"], "ClassName": "android.media.audiofx.EnvironmentalReverb", "ClassDesc": "A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The EnvironmentalReverb class allows an application to control each reverb engine property in a global reverb environment and is more suitable for games. For basic control, more suitable for music applications, it is recommended to use the @B_android#media#audiofx#PresetReverb_E@ class. An application creates a EnvironmentalReverb object to instantiate and control a reverb engine in the audio framework. The methods, parameter types and units exposed by the EnvironmentalReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEnvironmentalReverbItf interface. Please refer to this specification for more details. The EnvironmentalReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. Creating a reverb on the output mix (audio session 0) requires permission @B_android#Manifest#permission#MODIFY_AUDIO_SETTINGS_E@ See @B_android#media#audiofx#AudioEffect_E@ class for more details on controlling audio effects."}