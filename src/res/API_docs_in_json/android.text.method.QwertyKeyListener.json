{"Functions": {"getInstance(boolean,android.text.method.TextKeyListener.Capitalize)": {"Returns": [["@B_android#text#method#QwertyKeyListener_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"], ["@B_android#text#method#TextKeyListener#Capitalize_E@", "TextKeyListener.Capitalize no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new or existing instance with the specified capitalization and correction properties.", "history": "Added in API level 1", "FullName": "public static QwertyKeyListener getInstance (boolean autoText, TextKeyListener.Capitalize cap)"}, "getInputType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getInputType ()"}, "markAsReplaced(android.text.Spannable,int,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: the Editable text where the replacement was made"], ["int", "int: the start of the replaced region"], ["int", "int: the end of the replaced region; the location of the cursor"], ["@B_java#lang#String_E@", "String: the text to be restored if the user presses DEL"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks the specified region of content as having contained original prior to AutoText replacement. Call this method when you have done or are about to do an AutoText-style replacement on a region of text and want to let the same mechanism (the user pressing DEL immediately after the change) undo the replacement.", "history": "Added in API level 1", "FullName": "public static void markAsReplaced (Spannable content, int start, int end, String original)"}, "onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (View view, Editable content, int keyCode, KeyEvent event)"}, "getInstanceForFullKeyboard()": {"Returns": [["@B_android#text#method#QwertyKeyListener_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an instance of the listener suitable for use with full keyboards. Disables auto-capitalization, auto-text and long-press initiated on-screen character pickers.", "history": "Added in API level 11", "FullName": "public static QwertyKeyListener getInstanceForFullKeyboard ()"}, "QwertyKeyListener(android.text.method.TextKeyListener.Capitalize,boolean)": {"Returns": [], "Parameters": [["@B_android#text#method#TextKeyListener#Capitalize_E@", "TextKeyListener.Capitalize no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public QwertyKeyListener (TextKeyListener.Capitalize cap, boolean autoText)"}}, "Inheritance": ["@B_android#text#method#MetaKeyKeyListener_E@", "@B_android#text#method#BaseKeyListener_E@"], "ClassName": "android.text.method.QwertyKeyListener", "ClassDesc": "This is the standard key listener for alphabetic input on qwerty keyboards. You should generally not need to instantiate this yourself; TextKeyListener will do it for you. As for all implementations of @B_android#text#method#KeyListener_E@, this class is only concerned with hardware keyboards. Software input methods have no obligation to trigger the methods in this class."}