{"Functions": {"getFadeIn()": {"Returns": [["", "true if the tiles are to fade in; false if it is not."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the tiles should fade in.", "history": "", "FullName": "public boolean getFadeIn ()"}, "clearTileCache()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the tile cache so that all tiles will be requested again from the @B_com#google#android#gms#maps#model#TileProvider_E@. The current tiles from this tile overlay will also be cleared from the map after calling this.", "history": "", "FullName": "public void clearTileCache ()"}, "setFadeIn(boolean)": {"Returns": [], "Parameters": [["boolean", "if true, then the tiles will fade in; if false, the tiles will not fade in."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the tiles should fade in.", "history": "", "FullName": "public void setFadeIn (boolean fadeIn)"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes this tile overlay from the map.", "history": "", "FullName": "public void remove ()"}, "getZIndex()": {"Returns": [["", "the zIndex of the tile overlay."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zIndex of this tile overlay.", "history": "", "FullName": "public float getZIndex ()"}, "getId()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets this tile overlay's id.", "history": "", "FullName": "public String getId ()"}, "setZIndex(float)": {"Returns": [], "Parameters": [["float", "the zIndex of this tile overlay."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the zIndex of this tile overlay. See the documentation at the top of this class for more information.", "history": "", "FullName": "public void setZIndex (float zIndex)"}, "isVisible()": {"Returns": [["", "this tile overlay's visibility."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the visibility of this tile overlay. Note that this does not return whether the tile overlay is actually within the screen's viewport, but whether it will be drawn if it is contained in the screen's viewport.", "history": "", "FullName": "public boolean isVisible ()"}, "setVisible(boolean)": {"Returns": [], "Parameters": [["boolean", "if true, then the tile overlay is visible; if false, it is not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visibility of this tile overlay. When not visible, a tile overlay is not drawn, but it keeps all its other properties.", "history": "", "FullName": "public void setVisible (boolean visible)"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object other)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.model.TileOverlay", "ClassDesc": "A Tile Overlay is a set of images which are displayed on top of the base map tiles. These tiles may be transparent, allowing you to add features to existing maps. A tile overlay has the following properties: You must only call methods in this class on the main thread. Failure to do so will result in an @B_java#lang#IllegalStateException_E@. Note that the world is projected using the Mercator projection (see At each zoom level, the map is divided into tiles and only the tiles that overlap the screen are downloaded and rendered. Each tile is square and the map is divided into tiles as follows: At zoom level 0, one tile represents the entire world. The coordinates of that tile are (x, y) = (0, 0). At zoom level 1, the world is divided into 4 tiles arranged in a 2 x 2 grid. ... At zoom level N, the world is divided into 4 Note that the minimum zoom level that the camera supports (which can depend on various factors) is @B_com#google#android#gms#maps#GoogleMap#getMinZoomLevel_E@ and the maximum zoom level is @B_com#google#android#gms#maps#GoogleMap#getMaxZoomLevel_E@. The coordinates of the tiles are measured from the top left (northwest) corner of the map. At zoom level N, the x values of the tile coordinates range from 0 to 2y values range from 0 to 2"}