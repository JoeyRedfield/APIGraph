{"Functions": {"getDeviceTemperatures(int,int)": {"Returns": [["float[]", "an array of requested float device temperatures. Temperature equals to @B_android#os#HardwarePropertiesManager#UNDEFINED_TEMPERATURE_E@ if undefined. Empty if platform doesn't provide the queried temperature. This value will never be null."]], "Parameters": [["int", "int: type of requested device temperature, one of @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_CPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_GPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_BATTERY_E@ or @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_SKIN_E@. Value is @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_CPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_GPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_BATTERY_E@, or @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_SKIN_E@"], ["int", "int: source of requested device temperature, one of @B_android#os#HardwarePropertiesManager#TEMPERATURE_CURRENT_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_BELOW_VR_MIN_E@ or @B_android#os#HardwarePropertiesManager#TEMPERATURE_SHUTDOWN_E@. Value is @B_android#os#HardwarePropertiesManager#TEMPERATURE_CURRENT_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_SHUTDOWN_E@, or @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_BELOW_VR_MIN_E@"]], "Throws": [["@B_java#lang#SecurityException_E@", "if something other than the device owner or the current VR service tries to retrieve information provided by this service."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of device temperatures in Celsius.", "history": "Added in API level 24", "FullName": "public float[] getDeviceTemperatures (int type, int source)"}, "getCpuUsages()": {"Returns": [["@B_android#os#CpuUsageInfo_E@", "an array of @B_android#os#CpuUsageInfo_E@ for each core. Return null for each unplugged core. Empty if CPU usage is not supported on this system."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if something other than the device owner or the current VR service tries to retrieve information provided by this service."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of CPU usage info for each core.", "history": "Added in API level 24", "FullName": "public CpuUsageInfo[] getCpuUsages ()"}, "getFanSpeeds()": {"Returns": [["float[]", "an array of float fan speeds in RPM. Empty if there are no fans or fan speed is not supported on this system. This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if something other than the device owner or the current VR service tries to retrieve information provided by this service."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of fan speeds in RPM.", "history": "Added in API level 24", "FullName": "public float[] getFanSpeeds ()"}, "getDeviceTemperatures(int, int)": {"Returns": [["float[]", "an array of requested float device temperatures. Temperature equals to @B_android#os#HardwarePropertiesManager#UNDEFINED_TEMPERATURE_E@ if undefined. Empty if platform doesn't provide the queried temperature.This value will never be null."]], "Parameters": [["int", "int: type of requested device temperature, one of @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_CPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_GPU_E@, @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_BATTERY_E@ or @B_android#os#HardwarePropertiesManager#DEVICE_TEMPERATURE_SKIN_E@.Value is DEVICE_TEMPERATURE_CPU, DEVICE_TEMPERATURE_GPU, DEVICE_TEMPERATURE_BATTERY or DEVICE_TEMPERATURE_SKIN."], ["int", "int: source of requested device temperature, one of @B_android#os#HardwarePropertiesManager#TEMPERATURE_CURRENT_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_E@, @B_android#os#HardwarePropertiesManager#TEMPERATURE_THROTTLING_BELOW_VR_MIN_E@ or @B_android#os#HardwarePropertiesManager#TEMPERATURE_SHUTDOWN_E@.Value is TEMPERATURE_CURRENT, TEMPERATURE_THROTTLING, TEMPERATURE_SHUTDOWN or TEMPERATURE_THROTTLING_BELOW_VR_MIN."]], "Throws": [["@B_java#lang#SecurityException_E@", "if something other than the device owner or the current VR service tries to retrieve information provided by this service."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of device temperatures in Celsius.", "history": "added in API level 24", "FullName": "public float[] getDeviceTemperatures (int type, int source)"}}, "Inheritance": [], "ClassName": "android.os.HardwarePropertiesManager", "ClassDesc": "The HardwarePropertiesManager class provides a mechanism of accessing hardware state of a device: CPU, GPU and battery temperatures, CPU usage per core, fan speed, etc."}