{"Functions": {"getItemTextColor()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#NavigationView#setItemTextColor_E@"], "Permissions": [], "Description": "Returns the tint which is applied to our menu items' icons.", "history": "added in version 22.2.0", "FullName": "ColorStateList getItemTextColor ()"}, "NavigationView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "NavigationView (Context context)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas canvas)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#design#widget#NavigationView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable savedState)"}, "inflateHeaderView(int)": {"Returns": [["@B_android#view#View_E@", "a newly inflated View."]], "Parameters": [["int", "int: The layout resource ID."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflates a View and add it as a header of the navigation menu.", "history": "added in version 22.2.0", "FullName": "View inflateHeaderView (int res)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "getHeaderView(int)": {"Returns": [["@B_android#view#View_E@", "The header view the specified position or null if the position does not exist in this NavigationView."]], "Parameters": [["int", "int: The position at which to get the view from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the header view at the specified position.", "history": "added in version 23.1.1", "FullName": "View getHeaderView (int index)"}, "getHeaderCount()": {"Returns": [["int", "A positive integer representing the number of headers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of headers in this NavigationView.", "history": "added in version 23.1.1", "FullName": "int getHeaderCount ()"}, "addHeaderView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to be added as a header of the navigation menu."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a View as a header of the navigation menu.", "history": "added in version 22.2.0", "FullName": "void addHeaderView (View view)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "setCheckedItem(int)": {"Returns": [], "Parameters": [["int", "int: The item ID of the currently checked item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently checked item in this navigation menu.", "history": "added in version 23.0.0", "FullName": "void setCheckedItem (int id)"}, "inflateMenu(int)": {"Returns": [], "Parameters": [["int", "int: ID of a menu resource to inflate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a menu resource into this navigation view. Existing items in the menu will not be modified or removed.", "history": "added in version 22.2.0", "FullName": "void inflateMenu (int resId)"}, "setItemBackgroundResource(int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the background of our menu items to the given resource.", "history": "added in version 22.2.0", "FullName": "void setItemBackgroundResource (int resId)"}, "getItemBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#NavigationView#setItemBackgroundResource_E@"], "Permissions": [], "Description": "Returns the background drawable for our menu items.", "history": "added in version 22.2.0", "FullName": "Drawable getItemBackground ()"}, "removeHeaderView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously-added header view.", "history": "added in version 22.2.0", "FullName": "void removeHeaderView (View view)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthSpec, int heightSpec)"}, "onInsetsChanged(android.graphics.Rect)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void onInsetsChanged (Rect insets)"}, "getItemIconTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#NavigationView#setItemIconTintList_E@"], "Permissions": [], "Description": "Returns the tint which is applied to our menu items' icons.", "history": "added in version 22.2.0", "FullName": "ColorStateList getItemIconTintList ()"}, "setItemTextAppearance(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the text appearance of the menu items to a given resource.", "history": "added in version 23.0.0", "FullName": "void setItemTextAppearance (int resId)"}, "getMenu()": {"Returns": [["@B_android#view#Menu_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#view#Menu_E@ instance associated with this navigation view.", "history": "added in version 22.2.0", "FullName": "Menu getMenu ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.design.widget.NavigationView", "ClassDesc": "Represents a standard navigation menu for application. The menu contents can be populated by a menu resource file. NavigationView is typically placed inside a @B_android#support#v4#widget#DrawerLayout_E@."}