{"Functions": {"setMaxAge(long)": {"Returns": [], "Parameters": [["long", "long: an integer specifying the maximum age of the cookie in seconds; if zero, the cookie should be discarded immediately; otherwise, the cookie's max age is unspecified."]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getMaxAge_E@"], "Permissions": [], "Description": "Sets the maximum age of the cookie in seconds. A positive value indicates that the cookie will expire after that many seconds have passed. Note that the value is the A negative value means that the cookie is not stored persistently and will be deleted when the Web browser exits. A zero value causes the cookie to be deleted.", "history": "Added in API level 9", "FullName": "public void setMaxAge (long expiry)"}, "isHttpOnly()": {"Returns": [["boolean", "true if this cookie should be considered HTTPOnly"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setHttpOnly_E@"], "Permissions": [], "Description": "Returns true if this cookie contains the", "history": "Added in API level 24", "FullName": "public boolean isHttpOnly ()"}, "HttpCookie(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the name of the cookie"], ["@B_java#lang#String_E@", "String: a String specifying the value of the cookie"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the cookie name contains illegal characters"], ["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": ["@B_java#net#HttpCookie#setValue_E@", "@B_java#net#HttpCookie#setVersion_E@"], "Permissions": [], "Description": "Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a $ character. The cookie's name cannot be changed after creation. The value can be anything the server chooses to send. Its value is probably of interest only to the server. The cookie's value can be changed after creation with the setValue method. By default, cookies are created according to the RFC 2965 cookie specification. The version can be changed with the setVersion method.", "history": "Added in API level 9", "FullName": "public HttpCookie (String name, String value)"}, "setValue(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the new value"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getValue_E@"], "Permissions": [], "Description": "Assigns a new value to a cookie after the cookie is created. If you use a binary value, you may want to use BASE64 encoding. With Version 0 cookies, values should not contain white space, brackets, parentheses, equals signs, commas, double quotes, slashes, question marks, at signs, colons, and semicolons. Empty values may not behave the same way on all browsers.", "history": "Added in API level 9", "FullName": "public void setValue (String newValue)"}, "domainMatches(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if they domain-matches; false if not"]], "Parameters": [["@B_java#lang#String_E@", "String: the domain name to check host name with"], ["@B_java#lang#String_E@", "String: the host name in question"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The utility method to check whether a host name is in a domain or not. This concept is described in the cookie specification. To understand the concept, some terminologies need to be defined first: Host A's name domain-matches host B's if: A host isn't in a domain (RFC 2965 sec. 3.3.2) if: Examples:", "history": "added in API level 9", "FullName": "public static boolean domainMatches (String domain, String host)"}, "HttpCookie(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the name of the cookie"], ["@B_java#lang#String_E@", "String: a String specifying the value of the cookie"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the cookie name contains illegal characters"], ["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": ["@B_java#net#HttpCookie#setValue_E@", "@B_java#net#HttpCookie#setVersion_E@"], "Permissions": [], "Description": "Constructs a cookie with a specified name and value. The name must conform to RFC 2965. That means it can contain only ASCII alphanumeric characters and cannot contain commas, semicolons, or white space or begin with a $ character. The cookie's name cannot be changed after creation. The value can be anything the server chooses to send. Its value is probably of interest only to the server. The cookie's value can be changed after creation with the setValue method. By default, cookies are created according to the RFC 2965 cookie specification. The version can be changed with the setVersion method.", "history": "added in API level 9", "FullName": "public HttpCookie (String name, String value)"}, "domainMatches(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if they domain-matches; false if not"]], "Parameters": [["@B_java#lang#String_E@", "String: the domain name to check host name with"], ["@B_java#lang#String_E@", "String: the host name in question"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The utility method to check whether a host name is in a domain or not. This concept is described in the cookie specification. To understand the concept, some terminologies need to be defined first: Host A's name domain-matches host B's if: A host isn't in a domain (RFC 2965 sec. 3.3.2) if: Examples:", "history": "Added in API level 9", "FullName": "public static boolean domainMatches (String domain, String host)"}, "setPath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying a path"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getPath_E@"], "Permissions": [], "Description": "Specifies a path for the cookie to which the client should return the cookie. The cookie is visible to all the pages in the directory you specify, and all the pages in that directory's subdirectories. A cookie's path must include the servlet that set the cookie, for example, Consult RFC 2965 (available on the Internet) for more information on setting path names for cookies.", "history": "Added in API level 9", "FullName": "public void setPath (String uri)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if two HTTP cookies equal to each other; otherwise, false"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Test the equality of two HTTP cookies. The result is true only if two cookies come from same domain (case-insensitive), have same name (case-insensitive), and have same path (case-sensitive).", "history": "Added in API level 9", "FullName": "public boolean equals (Object obj)"}, "getValue()": {"Returns": [["@B_java#lang#String_E@", "a String containing the cookie's present value"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setValue_E@"], "Permissions": [], "Description": "Returns the value of the cookie.", "history": "Added in API level 9", "FullName": "public String getValue ()"}, "parse(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "a List of cookie parsed from header line string"]], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the set-cookie header. The header should start with \"set-cookie\", or \"set-cookie2\" token; or it should have no leading token at all."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if header string violates the cookie specification's syntax or the cookie name contains illegal characters."], ["@B_java#lang#NullPointerException_E@", "if the header string is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs cookies from set-cookie or set-cookie2 header string. RFC 2965 section 3.2.2 set-cookie2 syntax indicates that one header line may contain more than one cookie definitions, so this is a static utility method instead of another constructor.", "history": "Added in API level 9", "FullName": "public static List<HttpCookie> parse (String header)"}, "setPortlist(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specify the port list, which is comma separated series of digits"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getPortlist_E@"], "Permissions": [], "Description": "Specify the portlist of the cookie, which restricts the port(s) to which a cookie may be sent back in a Cookie header.", "history": "Added in API level 9", "FullName": "public void setPortlist (String ports)"}, "setVersion(int)": {"Returns": [], "Parameters": [["int", "int: 0 if the cookie should comply with the original Netscape specification; 1 if the cookie should comply with RFC 2965/2109"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if v is neither 0 nor 1"]], "SeeAlso": ["@B_java#net#HttpCookie#getVersion_E@"], "Permissions": [], "Description": "Sets the version of the cookie protocol this cookie complies with. Version 0 complies with the original Netscape cookie specification. Version 1 complies with RFC 2965/2109.", "history": "Added in API level 9", "FullName": "public void setVersion (int v)"}, "setDomain(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the domain name within which this cookie is visible; form is according to RFC 2965"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getDomain_E@"], "Permissions": [], "Description": "Specifies the domain within which this cookie should be presented. The form of the domain name is specified by RFC 2965. A domain name begins with a dot (.foo.com) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, www.foo.com, but not a.b.foo.com). By default, cookies are only returned to the server that sent them.", "history": "Added in API level 9", "FullName": "public void setDomain (String pattern)"}, "setComment(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the comment to display to the user"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getComment_E@"], "Permissions": [], "Description": "Specifies a comment that describes a cookie's purpose. The comment is useful if the browser presents the cookie to the user. Comments are not supported by Netscape Version 0 cookies.", "history": "Added in API level 9", "FullName": "public void setComment (String purpose)"}, "getCommentURL()": {"Returns": [["@B_java#lang#String_E@", "a String containing the comment URL, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setCommentURL_E@"], "Permissions": [], "Description": "Returns the comment URL describing the purpose of this cookie, or null if the cookie has no comment URL.", "history": "Added in API level 9", "FullName": "public String getCommentURL ()"}, "hashCode()": {"Returns": [["int", "this HTTP cookie's hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code of this HTTP cookie. The result is the sum of hash code value of three significant components of this cookie: name, domain, and path. That is, the hash code is the value of the expression:", "history": "Added in API level 9", "FullName": "public int hashCode ()"}, "hasExpired()": {"Returns": [["boolean", "true to indicate this HTTP cookie has expired; otherwise, false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports whether this HTTP cookie has expired or not.", "history": "Added in API level 9", "FullName": "public boolean hasExpired ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this HTTP cookie"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create and return a copy of this object.", "history": "Added in API level 9", "FullName": "public Object clone ()"}, "getComment()": {"Returns": [["@B_java#lang#String_E@", "a String containing the comment, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setComment_E@"], "Permissions": [], "Description": "Returns the comment describing the purpose of this cookie, or null if the cookie has no comment.", "history": "Added in API level 9", "FullName": "public String getComment ()"}, "getSecure()": {"Returns": [["boolean", "false if the cookie can be sent over any standard protocol; otherwise, true"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setSecure_E@"], "Permissions": [], "Description": "Returns true if sending this cookie should be restricted to a secure protocol, or false if the it can be sent using any protocol.", "history": "Added in API level 9", "FullName": "public boolean getSecure ()"}, "setSecure(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the cookie can only be sent over a secure protocol like HTTPS. If false, it can be sent over any protocol."]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getSecure_E@"], "Permissions": [], "Description": "Indicates whether the cookie should only be sent using a secure protocol, such as HTTPS or SSL. The default value is false.", "history": "Added in API level 9", "FullName": "public void setSecure (boolean flag)"}, "getVersion()": {"Returns": [["int", "0 if the cookie complies with the original Netscape specification; 1 if the cookie complies with RFC 2965/2109"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setVersion_E@"], "Permissions": [], "Description": "Returns the version of the protocol this cookie complies with. Version 1 complies with RFC 2965/2109, and version 0 complies with the original cookie specification drafted by Netscape. Cookies provided by a browser use and identify the browser's cookie version.", "history": "Added in API level 9", "FullName": "public int getVersion ()"}, "setCommentURL(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String specifying the comment URL to display to the user"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getCommentURL_E@"], "Permissions": [], "Description": "Specifies a comment URL that describes a cookie's purpose. The comment URL is useful if the browser presents the cookie to the user. Comment URL is RFC 2965 only.", "history": "Added in API level 9", "FullName": "public void setCommentURL (String purpose)"}, "setDiscard(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates to discard cookie unconditionally"]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#getDiscard_E@"], "Permissions": [], "Description": "Specify whether user agent should discard the cookie unconditionally. This is RFC 2965 only attribute.", "history": "Added in API level 9", "FullName": "public void setDiscard (boolean discard)"}, "getPortlist()": {"Returns": [["@B_java#lang#String_E@", "a String contains the port list or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setPortlist_E@"], "Permissions": [], "Description": "Returns the port list attribute of the cookie", "history": "Added in API level 9", "FullName": "public String getPortlist ()"}, "getDomain()": {"Returns": [["@B_java#lang#String_E@", "a String containing the domain name"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setDomain_E@"], "Permissions": [], "Description": "Returns the domain name set for this cookie. The form of the domain name is set by RFC 2965.", "history": "Added in API level 9", "FullName": "public String getDomain ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string form of the cookie. The string has the defined format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a cookie header string representation of this cookie, which is in the format defined by corresponding cookie specification, but without the leading \"Cookie:\" token.", "history": "Added in API level 9", "FullName": "public String toString ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "a String specifying the cookie's name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the cookie. The name cannot be changed after creation.", "history": "Added in API level 9", "FullName": "public String getName ()"}, "getMaxAge()": {"Returns": [["long", "an integer specifying the maximum age of the cookie in seconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setMaxAge_E@"], "Permissions": [], "Description": "Returns the maximum age of the cookie, specified in seconds. By default, -1 indicating the cookie will persist until browser shutdown.", "history": "Added in API level 9", "FullName": "public long getMaxAge ()"}, "getDiscard()": {"Returns": [["boolean", "a boolean to represent this cookie's discard attribute"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setDiscard_E@"], "Permissions": [], "Description": "Returns the discard attribute of the cookie", "history": "Added in API level 9", "FullName": "public boolean getDiscard ()"}, "getPath()": {"Returns": [["@B_java#lang#String_E@", "a String specifying a path that contains a servlet name, for example, /catalog"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#setPath_E@"], "Permissions": [], "Description": "Returns the path on the server to which the browser returns this cookie. The cookie is visible to all subpaths on the server.", "history": "Added in API level 9", "FullName": "public String getPath ()"}, "setHttpOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true make the cookie HTTP only, i.e. only visible as part of an HTTP request."]], "Throws": [], "SeeAlso": ["@B_java#net#HttpCookie#isHttpOnly_E@"], "Permissions": [], "Description": "Indicates whether the cookie should be considered HTTP Only. If set to true it means the cookie should not be accessible to scripting engines like javascript.", "history": "Added in API level 24", "FullName": "public void setHttpOnly (boolean httpOnly)"}}, "Inheritance": [], "ClassName": "java.net.HttpCookie", "ClassDesc": "An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent. Cookie is widely adopted to create stateful sessions. There are 3 HTTP cookie specifications: HttpCookie class can accept all these 3 forms of syntax."}