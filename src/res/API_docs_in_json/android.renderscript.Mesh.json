{"Functions": {"getPrimitiveCount()": {"Returns": [["", "number of primitives or index sets in the mesh"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getPrimitiveCount ()"}, "getVertexAllocation(int)": {"Returns": [["", "vertex data allocation at the given index"]], "Parameters": [["int", "index in the list of allocations to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public Allocation getVertexAllocation (int slot)"}, "getVertexAllocationCount()": {"Returns": [["", "number of allocations containing vertex data"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public int getVertexAllocationCount ()"}, "getPrimitive(int)": {"Returns": [["", "index set primitive type"]], "Parameters": [["int", "locaiton within the list of index set primitives"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public Mesh.Primitive getPrimitive (int slot)"}, "getIndexSetAllocation(int)": {"Returns": [["", "allocation containing primtive index data or null if the index data is not specified explicitly"]], "Parameters": [["int", "locaton within the list of index set allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public Allocation getIndexSetAllocation (int slot)"}}, "Inheritance": ["@B_android#renderscript#BaseObj_E@"], "ClassName": "android.renderscript.Mesh", "ClassDesc": "in API 16 This class is a container for geometric data displayed with Renderscript. Internally, a mesh is a collection of allocations that represent vertex data (positions, normals, texture coordinates) and index data such as triangles and lines. Vertex data could either be interleaved within one allocation that is provided separately, as multiple allocation objects, or done as a combination of both. When a vertex channel name matches an input in the vertex program, Renderscript automatically connects the two together. Parts of the mesh can be rendered with either explicit index sets or primitive types."}