{"Functions": {"setHorizontalMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the margin in pixels between two child items horizontally.", "history": "", "FullName": "void setHorizontalMargin (int margin)"}, "setWindowAlignmentOffsetPercent(float)": {"Returns": [], "Parameters": [["float", "float: Percentage to offset. E.g., 40 means 40% of the width from low edge. Use @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_OFFSET_PERCENT_DISABLED_E@ to disable. Default value is 50."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset percent for window alignment in addition to @B_android#support#v17#leanback#widget#HorizontalGridView#getWindowAlignmentOffset_E@.", "history": "", "FullName": "void setWindowAlignmentOffsetPercent (float offsetPercent)"}, "setFadingRightEdgeOffset(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the distance in pixels between fading start position and right padding edge. The fading start position is positive when start position is inside right padding area. Default value is 0, means that the fading starts from right padding edge.", "history": "added in version 22.0.0", "FullName": "void setFadingRightEdgeOffset (int fadeOffset)"}, "setFadingLeftEdgeOffset(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the distance in pixels between fading start position and left padding edge. The fading start position is positive when start position is inside left padding area. Default value is 0, means that the fading starts from left padding edge.", "history": "added in version 22.0.0", "FullName": "void setFadingLeftEdgeOffset (int fadeOffset)"}, "setSaveChildrenLimitNumber(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the limit number when @B_android#support#v17#leanback#widget#HorizontalGridView#getSaveChildrenPolicy_E@ is @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_LIMITED_CHILD_E@.", "history": "", "FullName": "void setSaveChildrenLimitNumber (int limitNumber)"}, "getSaveChildrenLimitNumber()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the limit used when when @B_android#support#v17#leanback#widget#HorizontalGridView#getSaveChildrenPolicy_E@ is @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_LIMITED_CHILD_E@", "history": "", "FullName": "int getSaveChildrenLimitNumber ()"}, "getWindowAlignmentOffsetPercent()": {"Returns": [["float", "Percentage to offset. E.g., 40 means 40% of the width from the low edge, or @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_OFFSET_PERCENT_DISABLED_E@ if disabled. Default value is 50."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset percent for window alignment in addition to @B_android#support#v17#leanback#widget#HorizontalGridView#getWindowAlignmentOffset_E@.", "history": "", "FullName": "float getWindowAlignmentOffsetPercent ()"}, "setItemAlignmentViewId(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the id of the view to align with. Use @B_android#view#View#NO_ID_E@ (default) for the item view itself. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "", "FullName": "void setItemAlignmentViewId (int viewId)"}, "getFadingRightEdgeLength()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right edge fading length in pixels.", "history": "added in version 22.0.0", "FullName": "int getFadingRightEdgeLength ()"}, "focusSearch(int)": {"Returns": [["@B_android#view#View_E@", "The nearest focusable in the specified direction, or null if none can be found."]], "Parameters": [["int", "int: One of FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, and FOCUS_RIGHT"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the nearest view in the specified direction that can take focus. This does not actually give focus to that view.", "history": "", "FullName": "View focusSearch (int direction)"}, "setNumRows(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of rows. Defaults to one.", "history": "added in version 22.0.0", "FullName": "void setNumRows (int numRows)"}, "isFocusSearchDisabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if focus search is disabled.", "history": "", "FullName": "boolean isFocusSearchDisabled ()"}, "getSelectedPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the selected item position.", "history": "", "FullName": "int getSelectedPosition ()"}, "setWindowAlignment(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_BOTH_EDGE_E@, @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_LOW_EDGE_E@, @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_HIGH_EDGE_E@ or @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_NO_EDGE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the method for focused item alignment in the view.", "history": "", "FullName": "void setWindowAlignment (int windowAlignment)"}, "setItemMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the margin in pixels between two child items.", "history": "", "FullName": "void setItemMargin (int margin)"}, "setItemAlignmentOffset(int)": {"Returns": [], "Parameters": [["int", "int: The number of pixels to offset. Can be negative for alignment from the high edge, or positive for alignment from the low edge."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the absolute offset in pixels for item alignment. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "", "FullName": "void setItemAlignmentOffset (int offset)"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass the touch screen motion event down to the target view, or this view if it is the target.", "history": "", "FullName": "boolean dispatchTouchEvent (MotionEvent event)"}, "setPruneChild(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables pruning of children. Disable is useful during transition.", "history": "", "FullName": "void setPruneChild (boolean pruneChild)"}, "getFadingLeftEdgeOffset()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the distance in pixels between fading start position and left padding edge. The fading start position is positive when start position is inside left padding area. Default value is 0, means that the fading starts from left padding edge.", "history": "added in version 22.0.0", "FullName": "int getFadingLeftEdgeOffset ()"}, "getSaveChildrenPolicy()": {"Returns": [["int", "policy, one of @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_NO_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_ON_SCREEN_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_LIMITED_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_ALL_CHILD_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the policy for saving children.", "history": "", "FullName": "int getSaveChildrenPolicy ()"}, "getFadingLeftEdge()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if left edge fading is enabled.", "history": "added in version 22.0.0", "FullName": "boolean getFadingLeftEdge ()"}, "setFocusScrollStrategy(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the strategy used to scroll in response to item focus changing: @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_ALIGNED_E@ (default) @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_ITEM_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_PAGE_E@", "history": "", "FullName": "void setFocusScrollStrategy (int scrollStrategy)"}, "isItemAlignmentOffsetWithPadding()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if include padding in calculating item align offset.", "history": "", "FullName": "boolean isItemAlignmentOffsetWithPadding ()"}, "setSelectedPositionSmoothWithSub(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item and/or subposition, runs an animation to scroll to the target position.", "history": "", "FullName": "void setSelectedPositionSmoothWithSub (int position, int subposition)"}, "setRowHeight(int)": {"Returns": [], "Parameters": [["int", "int: May be @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, or a size in pixels. If zero, row height will be fixed based on number of rows and view height."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the row height.", "history": "added in version 22.0.0", "FullName": "void setRowHeight (int height)"}, "getFadingLeftEdgeLength()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left edge fading length in pixels.", "history": "added in version 22.0.0", "FullName": "int getFadingLeftEdgeLength ()"}, "setSelectedPositionWithSub(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item and/or subposition immediately without animation.", "history": "", "FullName": "void setSelectedPositionWithSub (int position, int subposition)"}, "setFocusSearchDisabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables or enables focus search.", "history": "", "FullName": "void setFocusSearchDisabled (boolean disabled)"}, "getItemAlignmentOffsetPercent()": {"Returns": [["float", "Percentage to offset. E.g., 40 means 40% of the width from the low edge, or @B_android#support#v17#leanback#widget#HorizontalGridView#ITEM_ALIGN_OFFSET_PERCENT_DISABLED_E@ if disabled. Default value is 50."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset percent for item alignment in addition to @B_android#support#v17#leanback#widget#HorizontalGridView#getItemAlignmentOffset_E@.", "history": "", "FullName": "float getItemAlignmentOffsetPercent ()"}, "getVerticalMargin()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the margin in pixels between two child items vertically.", "history": "", "FullName": "int getVerticalMargin ()"}, "hasPreviousViewInSameRow(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: Position in adapter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the view at the given position has a same row sibling in front of it. This will return true if first item view is not created. So application should check in both @B_android#support#v17#leanback#widget#OnChildSelectedListener_E@ and @B_android#support#v17#leanback#widget#OnChildLaidOutListener_E@.", "history": "", "FullName": "boolean hasPreviousViewInSameRow (int position)"}, "setSelectedPositionSmooth(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item and run an animation to scroll to the target position.", "history": "", "FullName": "void setSelectedPositionSmooth (int position)"}, "setScrollEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables scrolling. Disable is useful during transition.", "history": "", "FullName": "void setScrollEnabled (boolean scrollEnabled)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the gravity used for child view positioning. Defaults to GRAVITY_TOP|GRAVITY_START.", "history": "", "FullName": "void setGravity (int gravity)"}, "setSelectedPosition(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item immediately without animation, scrollExtra is applied in primary scroll direction. The scrollExtra will be kept until another @B_android#support#v17#leanback#widget#HorizontalGridView#setSelectedPosition_E@ or @B_android#support#v17#leanback#widget#HorizontalGridView#setSelectedPositionSmooth_E@ call.", "history": "", "FullName": "void setSelectedPosition (int position, int scrollExtra)"}, "getWindowAlignmentOffset()": {"Returns": [["int", "The number of pixels to offset. If the offset is positive, it is distance from low edge (see @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_LOW_EDGE_E@); if the offset is negative, the absolute value is distance from high edge (see @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_HIGH_EDGE_E@). Default value is 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset in pixels for window alignment.", "history": "", "FullName": "int getWindowAlignmentOffset ()"}, "setSelectedPosition(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item immediately without animation.", "history": "", "FullName": "void setSelectedPosition (int position)"}, "getOnUnhandledKeyListener()": {"Returns": [["BaseGridView.OnUnhandledKeyListener", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unhandled key listener.", "history": "", "FullName": "BaseGridView.OnUnhandledKeyListener getOnUnhandledKeyListener ()"}, "setFadingRightEdgeLength(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the right edge fading length in pixels.", "history": "added in version 22.0.0", "FullName": "void setFadingRightEdgeLength (int fadeLength)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas canvas)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "", "FullName": "boolean dispatchKeyEvent (KeyEvent event)"}, "setFadingRightEdge(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fade out right edge to transparent. Note turn on fading edge is very expensive that you should turn off when HorizontalGridView is scrolling.", "history": "added in version 22.0.0", "FullName": "void setFadingRightEdge (boolean fading)"}, "setLayoutEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables layout. All children will be removed when layout is disabled.", "history": "", "FullName": "void setLayoutEnabled (boolean layoutEnabled)"}, "getFocusScrollStrategy()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strategy used to scroll in response to item focus changing. @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_ALIGNED_E@ (default) @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_ITEM_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#FOCUS_SCROLL_PAGE_E@", "history": "", "FullName": "int getFocusScrollStrategy ()"}, "setPrimaryOverReach(float)": {"Returns": [], "Parameters": [["float", "fraction of over reach"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the factor by which children should be laid out beyond the view bounds in the direction of orientation. 1.0 disables over reach.", "history": "", "FullName": "public final void setPrimaryOverReach (float fraction)"}, "getHorizontalMargin()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the margin in pixels between two child items horizontally.", "history": "", "FullName": "int getHorizontalMargin ()"}, "getWindowAlignment()": {"Returns": [["int", "@B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_BOTH_EDGE_E@, @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_LOW_EDGE_E@, @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_HIGH_EDGE_E@ or @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_NO_EDGE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the method for focused item alignment in the view.", "history": "", "FullName": "int getWindowAlignment ()"}, "setSaveChildrenPolicy(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_NO_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_ON_SCREEN_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_LIMITED_CHILD_E@ @B_android#support#v17#leanback#widget#HorizontalGridView#SAVE_ALL_CHILD_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the policy for saving children.", "history": "", "FullName": "void setSaveChildrenPolicy (int savePolicy)"}, "setItemAlignmentOffsetWithPadding(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: When it is true: we include left/top padding for positive item offset, include right/bottom padding for negative item offset."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set to true if include padding in calculating item align offset. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "", "FullName": "void setItemAlignmentOffsetWithPadding (boolean withPadding)"}, "setAnimateChildLayout(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether an animation should run when a child changes size or when adding or removing a child.", "history": "", "FullName": "void setAnimateChildLayout (boolean animateChildLayout)"}, "getFadingRightEdgeOffset()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the distance in pixels between fading start position and right padding edge. The fading start position is positive when start position is inside right padding area. Default value is 0, means that the fading starts from right padding edge.", "history": "added in version 22.0.0", "FullName": "int getFadingRightEdgeOffset ()"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in @B_android#graphics#Canvas_E@ necessitates that a View return true if it uses the methods internally without passing the @B_android#graphics#Canvas#CLIP_TO_LAYER_SAVE_FLAG_E@. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "", "FullName": "boolean hasOverlappingRendering ()"}, "setFadingLeftEdgeLength(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the left edge fading length in pixels.", "history": "added in version 22.0.0", "FullName": "void setFadingLeftEdgeLength (int fadeLength)"}, "setSelectedPositionWithSub(int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the selected item and/or subposition immediately without animation, scrollExtra is applied in primary scroll direction. The scrollExtra will be kept until another @B_android#support#v17#leanback#widget#HorizontalGridView#setSelectedPosition_E@ or @B_android#support#v17#leanback#widget#HorizontalGridView#setSelectedPositionSmooth_E@ call.", "history": "", "FullName": "void setSelectedPositionWithSub (int position, int subposition, int scrollExtra)"}, "getSelectedSubPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sub selected item position started from zero. An item can have multiple @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@s provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@. Zero is returned when no @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is defined.", "history": "", "FullName": "int getSelectedSubPosition ()"}, "isFocusDrawingOrderEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if default \"focus draw at last\" order rule is enabled.", "history": "", "FullName": "boolean isFocusDrawingOrderEnabled ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify layout manager that layout directionality has been updated", "history": "", "FullName": "void onRtlPropertiesChanged (int layoutDirection)"}, "getItemAlignmentViewId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the id of the view to align with, or zero for the item view itself.", "history": "", "FullName": "int getItemAlignmentViewId ()"}, "getFadingRightEdge()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if fading right edge is enabled.", "history": "added in version 22.0.0", "FullName": "boolean getFadingRightEdge ()"}, "setWindowAlignmentOffset(int)": {"Returns": [], "Parameters": [["int", "int: The number of pixels to offset. If the offset is positive, it is distance from low edge (see @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_LOW_EDGE_E@); if the offset is negative, the absolute value is distance from high edge (see @B_android#support#v17#leanback#widget#HorizontalGridView#WINDOW_ALIGN_HIGH_EDGE_E@). Default value is 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset in pixels for window alignment.", "history": "", "FullName": "void setWindowAlignmentOffset (int offset)"}, "isChildLayoutAnimated()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an animation will run when a child changes size or when adding or removing a child.", "history": "", "FullName": "boolean isChildLayoutAnimated ()"}, "isScrollEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if scrolling is enabled.", "history": "", "FullName": "boolean isScrollEnabled ()"}, "setFadingLeftEdge(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fade out left edge to transparent. Note turn on fading edge is very expensive that you should turn off when HorizontalGridView is scrolling.", "history": "added in version 22.0.0", "FullName": "void setFadingLeftEdge (boolean fading)"}, "HorizontalGridView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "HorizontalGridView (Context context)"}, "setHasOverlappingRendering(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void setHasOverlappingRendering (boolean hasOverlapping)"}, "setFocusDrawingOrderEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the default \"focus draw at last\" order rule.", "history": "", "FullName": "void setFocusDrawingOrderEnabled (boolean enabled)"}, "getChildDrawingOrder(int, int)": {"Returns": [["int", "The index of the child to draw this iteration."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: The current iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the child to draw for this iteration. Override this if you want to change the drawing order of children. By default, it returns i. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "", "FullName": "int getChildDrawingOrder (int childCount, int i)"}, "getItemAlignmentOffset()": {"Returns": [["int", "The number of pixels to offset. Will be negative for alignment from the high edge, or positive for alignment from the low edge. Default value is 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute offset in pixels for item alignment.", "history": "", "FullName": "int getItemAlignmentOffset ()"}, "getViewSelectedOffsets(android.view.View, int[])": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to get offsets."], ["int[]", "int: offsets[0] holds offset of X, offsets[1] holds offset of Y."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the x/y offsets to final position from current position if the view is selected.", "history": "", "FullName": "void getViewSelectedOffsets (View view, int[] offsets)"}, "setVerticalMargin(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the margin in pixels between two child items vertically.", "history": "", "FullName": "void setVerticalMargin (int margin)"}, "setItemAlignmentOffsetPercent(float)": {"Returns": [], "Parameters": [["float", "float: Percentage to offset. E.g., 40 means 40% of the width from the low edge. Use @B_android#support#v17#leanback#widget#HorizontalGridView#ITEM_ALIGN_OFFSET_PERCENT_DISABLED_E@ to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the offset percent for item alignment in addition to @B_android#support#v17#leanback#widget#HorizontalGridView#getItemAlignmentOffset_E@. Item alignment settings are ignored for the child if @B_android#support#v17#leanback#widget#ItemAlignmentFacet_E@ is provided by @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ or @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@.", "history": "", "FullName": "void setItemAlignmentOffsetPercent (float offsetPercent)"}, "setChildrenVisibility(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes and overrides children's visibility.", "history": "", "FullName": "void setChildrenVisibility (int visibility)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "@B_android#support#v7#widget#RecyclerView_E@", "@B_android#support#v17#leanback#widget#BaseGridView_E@"], "ClassName": "android.support.v17.leanback.widget.HorizontalGridView", "ClassDesc": "A https:##developer#android#com@B_android#view#ViewGroup_E@ that shows items in a horizontal scrolling list. The items come from the @B_android#support#v7#widget#RecyclerView#Adapter_E@ associated with this view. @B_android#support#v7#widget#RecyclerView#Adapter_E@ can optionally implement @B_android#support#v17#leanback#widget#FacetProviderAdapter_E@ which provides @B_android#support#v17#leanback#widget#FacetProvider_E@ for a given view type; @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ can also implement @B_android#support#v17#leanback#widget#FacetProvider_E@. Facet from ViewHolder has a higher priority than the one from FacetProviderAdapter associated with viewType. Supported optional facets are:"}