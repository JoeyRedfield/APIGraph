{"Functions": {"getDesiredMinimumHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#app#WallpaperManager#getDesiredMinimumHeight_E@, returning the height that the system would like this wallpaper to run in.", "history": "Added in API level 7", "FullName": "public int getDesiredMinimumHeight ()"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#io#FileDescriptor_E@", "FileDescriptor no parameter comment"], ["@B_java#io#PrintWriter_E@", "PrintWriter no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "protected void dump (String prefix, FileDescriptor fd, PrintWriter out, String[] args)"}, "WallpaperService.Engine()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor", "history": "added in API level 7", "FullName": "public WallpaperService.Engine ()"}, "isVisible()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the wallpaper is currently visible to the user, this is the last value supplied to @B_android#service#wallpaper#WallpaperService#Engine#onVisibilityChanged_E@.", "history": "Added in API level 7", "FullName": "public boolean isVisible ()"}, "onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)": {"Returns": [["@B_android#os#Bundle_E@", "If returning a result, create a Bundle and place the result data in to it. Otherwise return null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the command to perform. This tells you what to do and how to interpret the rest of the arguments."], ["int", "int: Generic integer parameter."], ["int", "int: Generic integer parameter."], ["int", "int: Generic integer parameter."], ["@B_android#os#Bundle_E@", "Bundle: Any additional parameters."], ["boolean", "boolean: If true, the caller is requesting that a result, appropriate for the command, be returned back."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process a command that was sent to the wallpaper with @B_android#app#WallpaperManager#sendWallpaperCommand_E@. The default implementation does nothing, and always returns null as the result.", "history": "Added in API level 7", "FullName": "public Bundle onCommand (String action, int x, int y, int z, Bundle extras, boolean resultRequested)"}, "setTouchEventsEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether this wallpaper will receive raw touch events from the window manager as the user interacts with the window that is currently displaying the wallpaper. By default they are turned off. If enabled, the events will be received in @B_android#service#wallpaper#WallpaperService#Engine#onTouchEvent_E@.", "history": "Added in API level 7", "FullName": "public void setTouchEventsEnabled (boolean enabled)"}, "onComputeColors()": {"Returns": [["@B_android#app#WallpaperColors_E@", "Wallpaper colors."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when it needs to know what colors the wallpaper is using. You might return null if no color information is available at the moment. In that case you might want to call @B_android#service#wallpaper#WallpaperService#Engine#notifyColorsChanged_E@ when color information becomes available. The simplest way of creating a @B_android#app#WallpaperColors_E@ object is by using @B_android#app#WallpaperColors#fromBitmap_E@ or @B_android#app#WallpaperColors#fromDrawable_E@, but you can also specify your main colors by constructing a @B_android#app#WallpaperColors_E@ object manually.", "history": "Added in API level 27", "FullName": "public WallpaperColors onComputeColors ()"}, "getSurfaceHolder()": {"Returns": [["@B_android#view#SurfaceHolder_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides access to the surface in which this wallpaper is drawn.", "history": "Added in API level 7", "FullName": "public SurfaceHolder getSurfaceHolder ()"}, "getDisplayContext()": {"Returns": [["@B_android#content#Context_E@", "A @B_android#content#Context_E@ for current display."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The @B_android#content#Context_E@ with resources that match the current display the wallpaper is on. For multiple display environment, multiple engines can be created to render on each display, but these displays may have different densities. Use this context to get the corresponding resources for currently display, avoiding the context of the service. The display context will never be null after @B_android#service#wallpaper#WallpaperService#Engine#onCreate_E@ has been called.", "history": "Added in API level 29", "FullName": "public Context getDisplayContext ()"}, "getDesiredMinimumWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#app#WallpaperManager#getDesiredMinimumWidth_E@, returning the width that the system would like this wallpaper to run in.", "history": "Added in API level 7", "FullName": "public int getDesiredMinimumWidth ()"}, "onDesiredSizeChanged(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an application has changed the desired virtual size of the wallpaper.", "history": "added in API level 7", "FullName": "public void onDesiredSizeChanged (int desiredWidth, int desiredHeight)"}, "onSurfaceDestroyed(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#view#SurfaceHolder#Callback#surfaceDestroyed_E@.", "history": "Added in API level 7", "FullName": "public void onSurfaceDestroyed (SurfaceHolder holder)"}, "onCreate(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called once to initialize the engine. After returning, the engine's surface will be created by the framework.", "history": "Added in API level 7", "FullName": "public void onCreate (SurfaceHolder surfaceHolder)"}, "onSurfaceChanged(android.view.SurfaceHolder,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#view#SurfaceHolder#Callback#surfaceChanged_E@.", "history": "Added in API level 7", "FullName": "public void onSurfaceChanged (SurfaceHolder holder, int format, int width, int height)"}, "isPreview()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this engine is running in preview mode -- that is, it is being shown to the user before they select it as the actual wallpaper.", "history": "Added in API level 7", "FullName": "public boolean isPreview ()"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called right before the engine is going away. After this the surface will be destroyed and this Engine object is no longer valid.", "history": "Added in API level 7", "FullName": "public void onDestroy ()"}, "onSurfaceRedrawNeeded(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#view#SurfaceHolder#Callback2#surfaceRedrawNeeded_E@.", "history": "Added in API level 9", "FullName": "public void onSurfaceRedrawNeeded (SurfaceHolder holder)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called as the user performs touch-screen interaction with the window that is currently showing this wallpaper. Note that the events you receive here are driven by the actual application the user is interacting with, so if it is slow you will get fewer move events.", "history": "Added in API level 7", "FullName": "public void onTouchEvent (MotionEvent event)"}, "onSurfaceCreated(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#view#SurfaceHolder#Callback#surfaceCreated_E@.", "history": "Added in API level 7", "FullName": "public void onSurfaceCreated (SurfaceHolder holder)"}, "setOffsetNotificationsEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the wallpaper wants to receive offset notifications"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether this wallpaper will receive notifications when the wallpaper has been scrolled. By default, wallpapers will receive notifications, although the default static image wallpapers do not. It is a performance optimization to set this to false.", "history": "Added in API level 15", "FullName": "public void setOffsetNotificationsEnabled (boolean enabled)"}, "onDesiredSizeChanged(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an application has changed the desired virtual size of the wallpaper.", "history": "Added in API level 7", "FullName": "public void onDesiredSizeChanged (int desiredWidth, int desiredHeight)"}, "notifyColorsChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the engine that wallpaper colors changed significantly. This will trigger a @B_android#service#wallpaper#WallpaperService#Engine#onComputeColors_E@ call.", "history": "Added in API level 27", "FullName": "public void notifyColorsChanged ()"}, "onOffsetsChanged(float,float,float,float,int,int)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to inform you of the wallpaper's offsets changing within its contain, corresponding to the container's call to @B_android#app#WallpaperManager#setWallpaperOffsets_E@.", "history": "Added in API level 7", "FullName": "public void onOffsetsChanged (float xOffset, float yOffset, float xOffsetStep, float yOffsetStep, int xPixelOffset, int yPixelOffset)"}, "onVisibilityChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to inform you of the wallpaper becoming visible or hidden. It is very important that a wallpaper only use CPU while it is visible..", "history": "Added in API level 7", "FullName": "public void onVisibilityChanged (boolean visible)"}, "onApplyWindowInsets(android.view.WindowInsets)": {"Returns": [], "Parameters": [["@B_android#view#WindowInsets_E@", "WindowInsets: Insets to apply."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called with the current insets that are in effect for the wallpaper. This gives you the part of the overall wallpaper surface that will generally be visible to the user (ignoring position offsets applied to it).", "history": "Added in API level 21", "FullName": "public void onApplyWindowInsets (WindowInsets insets)"}}, "Inheritance": [], "ClassName": "android.service.wallpaper.WallpaperService.Engine", "ClassDesc": "The actual implementation of a wallpaper. A wallpaper service may have multiple instances running (for example as a real wallpaper and as a preview), each of which is represented by its own Engine instance. You must implement @B_android#service#wallpaper#WallpaperService#onCreateEngine_E@ to return your concrete Engine implementation."}