{"Functions": {"tertiaryOrder(int)": {"Returns": [["short", "the element's tertiary component"]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the tertiary component of a collation element.", "history": "Added in API level 1", "FullName": "public static short tertiaryOrder (int order)"}, "secondaryOrder(int)": {"Returns": [["short", "the element's secondary component"]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the secondary component of a collation element.", "history": "Added in API level 1", "FullName": "public static short secondaryOrder (int order)"}, "setText(java.text.CharacterIterator)": {"Returns": [], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: the new source text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a new string over which to iterate.", "history": "Added in API level 1", "FullName": "public void setText (CharacterIterator source)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the cursor to the beginning of the string. The next call to next() will return the first collation element in the string.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setOffset(int)": {"Returns": [], "Parameters": [["int", "int: The new character offset into the original text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the iterator to point to the collation element corresponding to the specified character (the parameter is a CHARACTER offset in the original string, not an offset into its corresponding sequence of collation elements). The value returned by the next call to next() will be the collation element corresponding to the specified position in the text. If that position is in the middle of a contracting character sequence, the result of the next call to next() is the collation element for that sequence. This means that getOffset() is not guaranteed to return the same value as was passed to a preceding call to setOffset().", "history": "Added in API level 1", "FullName": "public void setOffset (int newOffset)"}, "previous()": {"Returns": [["int", "the previous collation element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the previous collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as \"return the collation element [or ordering priority] of the previous character in the string\". This function updates the iterator's internal pointer to point to the collation element preceding the one it's currently pointing to and then returns that element, while next() returns the current element and then updates the pointer. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you'll get back the same element twice.", "history": "Added in API level 1", "FullName": "public int previous ()"}, "primaryOrder(int)": {"Returns": [["int", "the element's primary component"]], "Parameters": [["int", "int: the collation element"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the primary component of a collation element.", "history": "Added in API level 1", "FullName": "public static int primaryOrder (int order)"}, "next()": {"Returns": [["int", "the next collation element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the next collation element in the string. This iterator iterates over a sequence of collation elements that were built from the string. Because there isn't necessarily a one-to-one mapping from characters to collation elements, this doesn't mean the same thing as \"return the collation element [or ordering priority] of the next character in the string\". This function returns the collation element that the iterator is currently pointing to and then updates the internal pointer to point to the next element. previous() updates the pointer first and then returns the element. This means that when you change direction while iterating (i.e., call next() and then call previous(), or call previous() and then call next()), you'll get back the same element twice.", "history": "Added in API level 1", "FullName": "public int next ()"}, "getOffset()": {"Returns": [["int", "The character offset in the original text corresponding to the collation element that will be returned by the next call to next()."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character offset in the original text corresponding to the next collation element. (That is, getOffset() returns the position in the text corresponding to the collation element that will be returned by the next call to next().) This value will always be the index of the FIRST character corresponding to the collation element (a contracting character sequence is when two or more characters all correspond to the same collation element). This means if you do setOffset(x) followed immediately by getOffset(), getOffset() won't necessarily return x.", "history": "Added in API level 1", "FullName": "public int getOffset ()"}, "setText(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new source text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a new string over which to iterate.", "history": "Added in API level 1", "FullName": "public void setText (String source)"}, "getMaxExpansion(int)": {"Returns": [["int", "the maximum length of any expansion sequences ending with the specified order."]], "Parameters": [["int", "int: a collation order returned by previous or next."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum length of any expansion sequences that end with the specified comparison order.", "history": "Added in API level 1", "FullName": "public int getMaxExpansion (int order)"}}, "Inheritance": [], "ClassName": "java.text.CollationElementIterator", "ClassDesc": "The CollationElementIterator class is used as an iterator to walk through each character of an international string. Use the iterator to return the ordering priority of the positioned character. The ordering priority of a character, which we refer to as a key, defines how a character is collated in the given collation object. For example, consider the following in Spanish: primaryOrder, secondaryOrder, and tertiaryOrder return int, short, and short respectively to ensure the correctness of the key value. Example of the iterator usage, CollationElementIterator.next returns the collation order of the next character. A collation order consists of primary order, secondary order and tertiary order. The data type of the collation order is CollationElementIterator is a part of RuleBasedCollator implementation. It is only usable with RuleBasedCollator instances."}