{"Functions": {"setFloatValues(float...)": {"Returns": [], "Parameters": [["float...", "float: One or more values that the animation will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the animated values for this object to this set of floats. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction @B_android#animation#ObjectAnimator_E@, and with a getter function derived automatically from propertyName, since otherwise PropertyValuesHolder has no way of determining what the value should be.", "history": "Added in API level 11", "FullName": "public void setFloatValues (float... values)"}, "ofFloat(android.util.Property<?,java.lang.Float>,float...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null."], ["float...", "float: The values that the property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of float values.", "history": "Added in API level 14", "FullName": "public static PropertyValuesHolder ofFloat (Property<?, Float> property, float... values)"}, "ofObject(android.util.Property<?,V>,android.animation.TypeConverter<T,V>,android.animation.TypeEvaluator<T>,T...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts the animated object to the Property type."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["T...", "T: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#PropertyValuesHolder#setConverter_E@", "@B_android#animation#TypeConverter_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of Object values. This variant also takes a TypeEvaluator because the system cannot automatically interpolate between objects of unknown type. This variant also takes a TypeConverter to convert from animated values to the type of the property. If only one value is supplied, the TypeConverter must be a @B_android#animation#BidirectionalTypeConverter_E@ to retrieve the current value.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofObject (Property<?, V> property, TypeConverter<T, V> converter, TypeEvaluator<T> evaluator, T... values)"}, "ofInt(android.util.Property<?,java.lang.Integer>,int...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null."], ["int...", "int: The values that the property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of int values.", "history": "Added in API level 14", "FullName": "public static PropertyValuesHolder ofInt (Property<?, Integer> property, int... values)"}, "ofObject(android.util.Property<?,V>,android.animation.TypeConverter<android.graphics.PointF,V>,android.graphics.Path)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts a PointF to the type associated with the setter. May be null if conversion is unnecessary."], ["@B_android#graphics#Path_E@", "Path: The Path along which the values should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and a Path along which the values should be animated. This variant supports a TypeConverter to convert from PointF to the target type. The PointF passed to converter or property, if converter is null, is reused on each animation frame and should not be stored by the setter or TypeConverter.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofObject (Property<?, V> property, TypeConverter<PointF, V> converter, Path path)"}, "ofMultiInt(java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null. The setter must take exactly two int parameters."], ["@B_android#graphics#Path_E@", "Path: The Path along which the values should be animated."]], "Throws": [], "SeeAlso": ["@B_android#animation#ObjectAnimator#ofPropertyValuesHolder_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-int setter. The values are animated along the path, with the first parameter of the setter set to the x coordinate and the second set to the y coordinate.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiInt (String propertyName, Path path)"}, "ofKeyframe(android.util.Property,android.animation.Keyframe...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "no returns description in source"]], "Parameters": [["@B_android#util#Property_E@", "Property: The property associated with this set of values. Should not be null."], ["@B_android#animation#Keyframe_E@", "Keyframe: The set of values to animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder object with the specified property and set of values. These values can be of any type, but the type should be consistent so that an appropriate @B_android#animation#TypeEvaluator_E@ can be found that matches the common type. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling the property's @B_android#util#Property#get_E@ function. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction with @B_android#animation#ObjectAnimator_E@, since otherwise PropertyValuesHolder has no way of determining what the value should be.", "history": "Added in API level 14", "FullName": "public static PropertyValuesHolder ofKeyframe (Property property, Keyframe... values)"}, "ofFloat(java.lang.String, float...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["float...", "float: The values that the named property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of float values.", "history": "added in API level 11", "FullName": "public static PropertyValuesHolder ofFloat (String propertyName, float... values)"}, "setObjectValues(java.lang.Object...)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: One or more values that the animation will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the animated values for this object to this set of Objects. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction @B_android#animation#ObjectAnimator_E@, and with a getter function derived automatically from propertyName, since otherwise PropertyValuesHolder has no way of determining what the value should be.", "history": "Added in API level 11", "FullName": "public void setObjectValues (Object... values)"}, "ofMultiFloat(java.lang.String,android.animation.TypeConverter<T,float[]>,android.animation.TypeEvaluator<T>,android.animation.Keyframe...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "A PropertyValuesHolder for a multi-float parameter setter."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property to associate with the set of values. This may also be the complete name of a setter function."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts values into float parameters for the setter. Can be null if the Keyframes have float[] values."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: Used to interpolate between values."], ["@B_android#animation#Keyframe_E@", "Keyframe: The values at specific fractional times to evaluate between"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder object with the specified property name or setter name for use in a multi-float setter function using ObjectAnimator. The values can be of any type, but the type should be consistent so that the supplied @B_android#animation#TypeEvaluator_E@ can be used to to evaluate the animated value. The converter converts the values to parameters in the setter function. At least two values must be supplied, a start and an end value.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiFloat (String propertyName, TypeConverter<T, float[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)"}, "ofInt(java.lang.String,int...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: The values that the named property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of int values.", "history": "Added in API level 11", "FullName": "public static PropertyValuesHolder ofInt (String propertyName, int... values)"}, "ofMultiInt(java.lang.String,android.animation.TypeConverter<T,int[]>,android.animation.TypeEvaluator<T>,android.animation.Keyframe...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "A PropertyValuesHolder for a multi-int parameter setter."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property to associate with the set of values. This may also be the complete name of a setter function."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts values into int parameters for the setter. Can be null if the Keyframes have int[] values."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: Used to interpolate between values."], ["@B_android#animation#Keyframe_E@", "Keyframe: The values at specific fractional times to evaluate between"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder object with the specified property name or setter name for use in a multi-int setter function using ObjectAnimator. The values can be of any type, but the type should be consistent so that the supplied @B_android#animation#TypeEvaluator_E@ can be used to to evaluate the animated value. The converter converts the values to parameters in the setter function. At least two values must be supplied, a start and an end value.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiInt (String propertyName, TypeConverter<T, int[]> converter, TypeEvaluator<T> evaluator, Keyframe... values)"}, "ofObject(java.lang.String,android.animation.TypeConverter<android.graphics.PointF,?>,android.graphics.Path)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Converts a PointF to the type associated with the setter. May be null if conversion is unnecessary."], ["@B_android#graphics#Path_E@", "Path: The Path along which the values should be animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and a Path along which the values should be animated. This variant supports a TypeConverter to convert from PointF to the target type. The PointF passed to converter or property, if converter is null, is reused on each animation frame and should not be stored by the setter or TypeConverter.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofObject (String propertyName, TypeConverter<PointF, ?> converter, Path path)"}, "setKeyframes(android.animation.Keyframe...)": {"Returns": [], "Parameters": [["@B_android#animation#Keyframe_E@", "Keyframe: One or more values that the animation will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the animated values for this object to this set of Keyframes.", "history": "Added in API level 11", "FullName": "public void setKeyframes (Keyframe... values)"}, "ofMultiInt(java.lang.String,int[][])": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null."], ["int[][]", "int: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#IntArrayEvaluator#IntArrayEvaluator_E@", "@B_android#animation#ObjectAnimator#ofMultiInt_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of int[] values. At least two int[] values must be supplied, a start and end value. If more values are supplied, the values will be animated from the start, through all intermediate values to the end value. When used with ObjectAnimator, the elements of the array represent the parameters of the setter function.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiInt (String propertyName, int[][] values)"}, "setProperty(android.util.Property)": {"Returns": [], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the property that will be animated. Note that if this PropertyValuesHolder object is used with ObjectAnimator, the property must exist on the target object specified in that ObjectAnimator.", "history": "Added in API level 14", "FullName": "public void setProperty (Property property)"}, "ofMultiFloat(java.lang.String,android.animation.TypeConverter<V,float[]>,android.animation.TypeEvaluator<V>,V...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The property being animated or complete name of the setter. Should not be null."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Used to convert the animated value to setter parameters."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["V...", "V: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#ObjectAnimator#ofMultiFloat_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of Object values for use with ObjectAnimator multi-value setters. The Object values are converted to float[] using the converter.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiFloat (String propertyName, TypeConverter<V, float[]> converter, TypeEvaluator<V> evaluator, V... values)"}, "setIntValues(int...)": {"Returns": [], "Parameters": [["int...", "int: One or more values that the animation will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the animated values for this object to this set of ints. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction @B_android#animation#ObjectAnimator_E@, and with a getter function derived automatically from propertyName, since otherwise PropertyValuesHolder has no way of determining what the value should be.", "history": "Added in API level 11", "FullName": "public void setIntValues (int... values)"}, "ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["@B_java#lang#Object_E@", "Object: The values that the named property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of Object values. This variant also takes a TypeEvaluator because the system cannot automatically interpolate between objects of unknown type.", "history": "Added in API level 11", "FullName": "public static PropertyValuesHolder ofObject (String propertyName, TypeEvaluator evaluator, Object... values)"}, "setEvaluator(android.animation.TypeEvaluator)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The TypeEvaluator will be automatically determined based on the type of values supplied to PropertyValuesHolder. The evaluator can be manually set, however, if so desired. This may be important in cases where either the type of the values supplied do not match the way that they should be interpolated between, or if the values are of a custom type or one not currently understood by the animation system. Currently, only values of type float and int (and their Object equivalents: Float and Integer) are correctly interpolated; all other types require setting a TypeEvaluator.", "history": "Added in API level 11", "FullName": "public void setEvaluator (TypeEvaluator evaluator)"}, "ofFloat(java.lang.String,float...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["float...", "float: The values that the named property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of float values.", "history": "Added in API level 11", "FullName": "public static PropertyValuesHolder ofFloat (String propertyName, float... values)"}, "ofMultiFloat(java.lang.String,float[][])": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null."], ["float[][]", "float: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#FloatArrayEvaluator#FloatArrayEvaluator_E@", "@B_android#animation#ObjectAnimator#ofMultiFloat_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of float[] values. At least two float[] values must be supplied, a start and end value. If more values are supplied, the values will be animated from the start, through all intermediate values to the end value. When used with ObjectAnimator, the elements of the array represent the parameters of the setter function.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiFloat (String propertyName, float[][] values)"}, "setConverter(android.animation.TypeConverter)": {"Returns": [], "Parameters": [["@B_android#animation#TypeConverter_E@", "TypeConverter: The converter to use to convert values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the converter to convert from the values type to the setter's parameter type. If only one value is supplied, @B_android#animation#BidirectionalTypeConverter_E@.", "history": "Added in API level 21", "FullName": "public void setConverter (TypeConverter converter)"}, "ofMultiFloat(java.lang.String, float[][])": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null."], ["float[][]", "float: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#FloatArrayEvaluator#FloatArrayEvaluator_E@", "@B_android#animation#ObjectAnimator#ofMultiFloat_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of float[] values. At least two float[] values must be supplied, a start and end value. If more values are supplied, the values will be animated from the start, through all intermediate values to the end value. When used with ObjectAnimator, the elements of the array represent the parameters of the setter function.", "history": "added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiFloat (String propertyName, float[][] values)"}, "setPropertyName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the property that will be animated. This name is used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called. Note that the setter function derived from this property name must take the same parameter type as the valueFrom and valueTo properties, otherwise the call to the setter function will fail.", "history": "Added in API level 11", "FullName": "public void setPropertyName (String propertyName)"}, "ofMultiInt(java.lang.String, int[][])": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null."], ["int[][]", "int: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#IntArrayEvaluator#IntArrayEvaluator_E@", "@B_android#animation#ObjectAnimator#ofMultiInt_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of int[] values. At least two int[] values must be supplied, a start and end value. If more values are supplied, the values will be animated from the start, through all intermediate values to the end value. When used with ObjectAnimator, the elements of the array represent the parameters of the setter function.", "history": "added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiInt (String propertyName, int[][] values)"}, "clone()": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public PropertyValuesHolder clone ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "ofKeyframe(java.lang.String,android.animation.Keyframe...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property associated with this set of values. This can be the actual property name to be used when using a ObjectAnimator object, or just a name used to get animated values, such as if this object is used with an ValueAnimator object."], ["@B_android#animation#Keyframe_E@", "Keyframe: The set of values to animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder object with the specified property name and set of values. These values can be of any type, but the type should be consistent so that an appropriate @B_android#animation#TypeEvaluator_E@ can be found that matches the common type. If there is only one value, it is assumed to be the end value of an animation, and an initial value will be derived, if possible, by calling a getter function on the object. Also, if any value is null, the value will be filled in when the animation starts in the same way. This mechanism of automatically getting null values only works if the PropertyValuesHolder object is used in conjunction @B_android#animation#ObjectAnimator_E@, and with a getter function derived automatically from propertyName, since otherwise PropertyValuesHolder has no way of determining what the value should be.", "history": "Added in API level 11", "FullName": "public static PropertyValuesHolder ofKeyframe (String propertyName, Keyframe... values)"}, "getPropertyName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the property that will be animated. This name will be used to derive a setter function that will be called to set animated values. For example, a property name of foo will result in a call to the function setFoo() on the target object. If either valueFrom or valueTo is null, then a getter function will also be derived and called.", "history": "Added in API level 11", "FullName": "public String getPropertyName ()"}, "ofMultiFloat(java.lang.String,android.graphics.Path)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated. Can also be the case-sensitive name of the entire setter method. Should not be null. The setter must take exactly two float parameters."], ["@B_android#graphics#Path_E@", "Path: The Path along which the values should be animated."]], "Throws": [], "SeeAlso": ["@B_android#animation#ObjectAnimator#ofPropertyValuesHolder_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name to use as a multi-float setter. The values are animated along the path, with the first parameter of the setter set to the x coordinate and the second set to the y coordinate.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiFloat (String propertyName, Path path)"}, "ofInt(java.lang.String, int...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being animated."], ["int...", "int: The values that the named property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property name and set of int values.", "history": "added in API level 11", "FullName": "public static PropertyValuesHolder ofInt (String propertyName, int... values)"}, "ofObject(android.util.Property,android.animation.TypeEvaluator<V>,V...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_android#util#Property_E@", "Property: The property being animated. Should not be null."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["V...", "V: The values that the property will animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of Object values. This variant also takes a TypeEvaluator because the system cannot automatically interpolate between objects of unknown type.", "history": "Added in API level 14", "FullName": "public static PropertyValuesHolder ofObject (Property property, TypeEvaluator<V> evaluator, V... values)"}, "ofMultiInt(java.lang.String,android.animation.TypeConverter<V,int[]>,android.animation.TypeEvaluator<V>,V...)": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder The constructed PropertyValuesHolder object."]], "Parameters": [["@B_java#lang#String_E@", "String: The property being animated or complete name of the setter. Should not be null."], ["@B_android#animation#TypeConverter_E@", "TypeConverter: Used to convert the animated value to setter parameters."], ["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the necessary interpolation between the Object values to derive the animated value."], ["V...", "V: The values that the property will animate between."]], "Throws": [], "SeeAlso": ["@B_android#animation#ObjectAnimator#ofMultiInt_E@", "@B_android#animation#ObjectAnimator#ofPropertyValuesHolder_E@"], "Permissions": [], "Description": "Constructs and returns a PropertyValuesHolder with a given property and set of Object values for use with ObjectAnimator multi-value setters. The Object values are converted to int[] using the converter.", "history": "Added in API level 21", "FullName": "public static PropertyValuesHolder ofMultiInt (String propertyName, TypeConverter<V, int[]> converter, TypeEvaluator<V> evaluator, V... values)"}}, "Inheritance": [], "ClassName": "android.animation.PropertyValuesHolder", "ClassDesc": "This class holds information about a property and the values that that property should take on during an animation. PropertyValuesHolder objects can be used to create animations with ValueAnimator or ObjectAnimator that operate on several different properties in parallel."}