{"Functions": {"SimpleFormatter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public SimpleFormatter ()"}, "format(java.util.logging.LogRecord)": {"Returns": [["@B_java#lang#String_E@", "a formatted log record"]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: the log record to be formatted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format the given LogRecord. The formatting can be customized by specifying the LogRecord will be formatted as if by calling: Some example formats: java.util.logging.SimpleFormatter.format=\"%4$s: %5$s [%1$tc]%n\" This prints 1 line with the log level (4$), the log message (5$) and the timestamp (1$) in a square bracket. java.util.logging.SimpleFormatter.format=\"%1$tc %2$s%n%4$s: %5$s%6$s%n\" This prints 2 lines where the first line includes the timestamp (1$) and the source (2$); the second line includes the log level (4$) and the log message (5$) followed with the throwable and its backtrace (6$), if any: java.util.logging.SimpleFormatter.format=\"%1$tb %1$td, %1$tY %1$tl:%1$tM:%1$tS %1$Tp %2$s%n%4$s: %5$s%n\" This prints 2 lines similar to the example above with a different date/time formatting and does not print the throwable and its backtrace: This method can also be overridden in a subclass. It is recommended to use the @B_java#util#logging#Formatter#formatMessage_E@ convenience method to localize and format the message field.", "history": "Added in API level 1", "FullName": "public String format (LogRecord record)"}}, "Inheritance": ["@B_java#util#logging#Formatter_E@"], "ClassName": "java.util.logging.SimpleFormatter", "ClassDesc": "Print a brief summary of the LogRecord in a human readable format. The summary will typically be 1 or 2 lines. SimpleFormatter is initialized with the java.util.logging.SimpleFormatter.format property to"}