{"Functions": {"getCondition()": {"Returns": [["", "the condition on which to wait, never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the condition.", "history": "Added in API level 1", "FullName": "public final Condition getCondition ()"}, "await(java.util.Date)": {"Returns": [["", "true if the condition was satisfied, false in case of a timeout. Typically, a call to @B_org#apache#http#impl#conn#tsccm#WaitingThread#wakeup_E@ is used to indicate that the condition was satisfied. Since the condition is accessible outside, this cannot be guaranteed though."]], "Parameters": [["@B_java#util#Date_E@", "when to time out, or null for no timeout"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the waiting thread was interrupted"]], "SeeAlso": ["@B_org#apache#http#impl#conn#tsccm#WaitingThread#wakeup_E@"], "Permissions": [], "Description": "Blocks the calling thread. This method returns when the thread is notified or interrupted, if a timeout occurrs, or if there is a spurious wakeup. This method assumes external synchronization.", "history": "Added in API level 1", "FullName": "public boolean await (Date deadline)"}, "wakeup()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wakes up the waiting thread. This method assumes external synchronization.", "history": "Added in API level 1", "FullName": "public void wakeup ()"}, "WaitingThread(java.util.concurrent.locks.Condition, org.apache.http.impl.conn.tsccm.RouteSpecificPool)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#locks#Condition_E@", "the condition for which to wait"], ["@B_org#apache#http#impl#conn#tsccm#RouteSpecificPool_E@", "the pool on which the thread will be waiting, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new entry for a waiting thread.", "history": "Added in API level 1", "FullName": "public WaitingThread (Condition cond, RouteSpecificPool pool)"}, "interrupt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void interrupt ()"}, "getPool()": {"Returns": [["", "the pool on which a thread is or was waiting, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the pool, if there is one.", "history": "Added in API level 1", "FullName": "public final RouteSpecificPool getPool ()"}, "getThread()": {"Returns": [["", "the thread which is waiting, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the thread, if there is one.", "history": "Added in API level 1", "FullName": "public final Thread getThread ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.tsccm.WaitingThread", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Represents a thread waiting for a connection. This class implements throwaway objects. It is instantiated whenever a thread needs to wait. Instances are not re-used, except if the waiting thread experiences a spurious wakeup and continues to wait. All methods assume external synchronization on the condition passed to the constructor. Instances of this class do"}