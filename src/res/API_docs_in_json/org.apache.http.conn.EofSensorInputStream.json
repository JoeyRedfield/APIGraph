{"Functions": {"checkEOF(int)": {"Returns": [], "Parameters": [["int", "the result of the calling read operation. A negative value indicates that EOF is reached."]], "Throws": [["@B_java#io#IOException_E@", "in case of an IO problem on closing the underlying stream"]], "SeeAlso": [], "Permissions": [], "Description": "Detects EOF and notifies the watcher. This method should only be called while the underlying stream is still accessible. Use @B_org#apache#http#conn#EofSensorInputStream#isReadAllowed_E@ to check that condition. If EOF is detected, the watcher will be notified and this stream is detached from the underlying stream. This prevents multiple notifications from this stream.", "history": "Added in API level 1", "FullName": "protected void checkEOF (int eof)"}, "read(byte[], int, int)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to byteCount bytes from this stream and stores them in the byte array buffer starting at byteOffset. Returns the number of bytes actually read or -1 if the end of the stream has been reached.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this stream. Concrete implementations of this class should free any resources during close. This implementation does nothing.", "history": "Added in API level 1", "FullName": "public void close ()"}, "releaseConnection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Same as @B_org#apache#http#conn#EofSensorInputStream#close_E@.", "history": "Added in API level 1", "FullName": "public void releaseConnection ()"}, "available()": {"Returns": [["", "the estimated number of bytes available"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimated number of bytes that can be read or skipped without blocking for more input. Note that this method provides such a weak guarantee that it is not very useful in practice. Firstly, the guarantee is \"without blocking for more input\" rather than \"without blocking\": a read may still block waiting for I/O to complete \u2014 the guarantee is merely that it won't have to wait indefinitely for data to be written. The result of this method should not be used as a license to do I/O on a thread that shouldn't be blocked. Secondly, the result is a conservative estimate and may be significantly smaller than the actual number of bytes available. In particular, an implementation that always returns 0 would be correct. In general, callers should only use this method if they'd be satisfied with treating the result as a boolean yes or no answer to the question \"is there definitely data ready?\". Thirdly, the fact that a given number of bytes is \"available\" does not guarantee that a read or skip will actually read or skip that many bytes: they may read or skip fewer. It is particularly important to realize that you @B_java#io#ByteArrayOutputStream_E@ and convert that to a byte array. Alternatively, if you're reading from a file, @B_java#io#File#length_E@ returns the current length of the file (though assuming the file's length can't change may be incorrect, reading a file is inherently racy). The default implementation of this method in InputStream always returns 0. Subclasses should override this method if they are able to indicate the number of bytes available.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[])": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to read(buffer, 0, buffer.length).", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "isReadAllowed()": {"Returns": [["", "true if the underlying stream is accessible, false if this stream is in EOF mode and detached from the underlying stream"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the underlying stream can be read from.", "history": "Added in API level 1", "FullName": "protected boolean isReadAllowed ()"}, "checkClose()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "in case of an IO problem on closing the underlying stream"]], "SeeAlso": [], "Permissions": [], "Description": "Detects stream close and notifies the watcher. There's not much to detect since this is called by @B_org#apache#http#conn#EofSensorInputStream#close_E@. The watcher will only be notified if this stream is closed for the first time and before EOF has been detected. This stream will be detached from the underlying stream to prevent multiple notifications to the watcher.", "history": "Added in API level 1", "FullName": "protected void checkClose ()"}, "checkAbort()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "in case of an IO problem on closing the underlying stream"]], "SeeAlso": [], "Permissions": [], "Description": "Detects stream abort and notifies the watcher. There's not much to detect since this is called by @B_org#apache#http#conn#EofSensorInputStream#abortConnection_E@. The watcher will only be notified if this stream is aborted for the first time and before EOF has been detected or the stream has been @B_org#apache#http#conn#EofSensorInputStream#close_E@ gracefully. This stream will be detached from the underlying stream to prevent multiple notifications to the watcher.", "history": "Added in API level 1", "FullName": "protected void checkAbort ()"}, "abortConnection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Aborts this stream. This is a special version of @B_org#apache#http#conn#EofSensorInputStream#close_E@ which prevents re-use of the underlying connection, if any. Calling this method indicates that there should be no attempt to read until the end of the stream.", "history": "Added in API level 1", "FullName": "public void abortConnection ()"}, "read()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single byte from this stream and returns it as an integer in the range from 0 to 255. Returns -1 if the end of the stream has been reached. Blocks until one byte has been read, the end of the source stream is detected or an exception is thrown.", "history": "Added in API level 1", "FullName": "public int read ()"}, "EofSensorInputStream(java.io.InputStream, org.apache.http.conn.EofSensorWatcher)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "the wrapped stream"], ["@B_org#apache#http#conn#EofSensorWatcher_E@", "the watcher for events, or null for auto-close behavior without notification"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new EOF sensor. If no watcher is passed, the underlying stream will simply be closed when EOF is detected or @B_org#apache#http#conn#EofSensorInputStream#close_E@ is called. Otherwise, the watcher decides whether the underlying stream should be closed before detaching from it.", "history": "Added in API level 1", "FullName": "public EofSensorInputStream (InputStream in, EofSensorWatcher watcher)"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "org.apache.http.conn.EofSensorInputStream", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A stream wrapper that triggers actions on @B_org#apache#http#conn#EofSensorInputStream#close_E@ and EOF. Primarily used to auto-release an underlying @B_org#apache#http#conn#ManagedClientConnection_E@ when the response body is consumed or no longer needed. This class is based on AutoCloseInputStream in HttpClient 3.1, but has notable differences. It does not allow mark/reset, distinguishes different kinds of event, and does not always close the underlying stream on EOF. That decision is left to the @B_org#apache#http#conn#EofSensorWatcher_E@."}