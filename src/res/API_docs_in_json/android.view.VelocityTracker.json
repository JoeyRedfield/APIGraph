{"Functions": {"setNextPoolable(T)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void setNextPoolable (T element)"}, "getXVelocity()": {"Returns": [["float", "The previously computed X velocity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the last computed X velocity. You must first call @B_android#view#VelocityTracker#computeCurrentVelocity_E@ before calling this function.", "history": "Added in API level 1", "FullName": "public float getXVelocity ()"}, "getYVelocity(int)": {"Returns": [["float", "The previously computed Y velocity."]], "Parameters": [["int", "int: Which pointer's velocity to return."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the last computed Y velocity. You must first call @B_android#view#VelocityTracker#computeCurrentVelocity_E@ before calling this function.", "history": "Added in API level 8", "FullName": "public float getYVelocity (int id)"}, "getYVelocity()": {"Returns": [["float", "The previously computed Y velocity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the last computed Y velocity. You must first call @B_android#view#VelocityTracker#computeCurrentVelocity_E@ before calling this function.", "history": "Added in API level 1", "FullName": "public float getYVelocity ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "computeCurrentVelocity(int,float)": {"Returns": [], "Parameters": [["int", "int: The units you would like the velocity in. A value of 1 provides pixels per millisecond, 1000 provides pixels per second, etc."], ["float", "float: The maximum velocity that can be computed by this method. This value must be declared in the same unit as the units parameter. This value must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the current velocity based on the points that have been collected. Only call this when you actually want to retrieve velocity information, as it is relatively expensive. You can then retrieve the velocity with @B_android#view#VelocityTracker#getXVelocity_E@ and @B_android#view#VelocityTracker#getYVelocity_E@.", "history": "Added in API level 4", "FullName": "public void computeCurrentVelocity (int units, float maxVelocity)"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a VelocityTracker object back to be re-used by others. You must not touch the object after calling this function.", "history": "Added in API level 1", "FullName": "public void recycle ()"}, "setPooled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract void setPooled (boolean isPooled)"}, "isPooled()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract boolean isPooled ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the velocity tracker back to its initial state.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "getXVelocity(int)": {"Returns": [["float", "The previously computed X velocity."]], "Parameters": [["int", "int: Which pointer's velocity to return."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the last computed X velocity. You must first call @B_android#view#VelocityTracker#computeCurrentVelocity_E@ before calling this function.", "history": "Added in API level 8", "FullName": "public float getXVelocity (int id)"}, "addMovement(android.view.MotionEvent)": {"Returns": [], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent you received and would like to track."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a user's movement to the tracker. You should call this for the initial @B_android#view#MotionEvent#ACTION_DOWN_E@, the following @B_android#view#MotionEvent#ACTION_MOVE_E@ events that you receive, and the final @B_android#view#MotionEvent#ACTION_UP_E@. You can, however, call this for whichever events you desire.", "history": "Added in API level 1", "FullName": "public void addMovement (MotionEvent event)"}, "computeCurrentVelocity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#view#VelocityTracker#computeCurrentVelocity_E@"], "Permissions": [], "Description": "Equivalent to invoking @B_android#view#VelocityTracker#computeCurrentVelocity_E@ with a maximum velocity of Float.MAX_VALUE.", "history": "Added in API level 1", "FullName": "public void computeCurrentVelocity (int units)"}, "obtain()": {"Returns": [["@B_android#view#VelocityTracker_E@", "Returns a new VelocityTracker."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a new VelocityTracker object to watch the velocity of a motion. Be sure to call @B_android#view#VelocityTracker#recycle_E@ when done. You should generally only maintain an active object while tracking a movement, so that the VelocityTracker can be re-used elsewhere.", "history": "Added in API level 1", "FullName": "public static VelocityTracker obtain ()"}, "getNextPoolable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract T getNextPoolable ()"}, "computeCurrentVelocity(int, float)": {"Returns": [], "Parameters": [["int", "int: The units you would like the velocity in. A value of 1 provides pixels per millisecond, 1000 provides pixels per second, etc."], ["float", "float: The maximum velocity that can be computed by this method. This value must be declared in the same unit as the units parameter. This value must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the current velocity based on the points that have been collected. Only call this when you actually want to retrieve velocity information, as it is relatively expensive. You can then retrieve the velocity with @B_android#view#VelocityTracker#getXVelocity_E@ and @B_android#view#VelocityTracker#getYVelocity_E@.", "history": "added in API level 4", "FullName": "public void computeCurrentVelocity (int units, float maxVelocity)"}}, "Inheritance": [], "ClassName": "android.view.VelocityTracker", "ClassDesc": "Helper for tracking the velocity of touch events, for implementing flinging and other such gestures. Use @B_android#view#VelocityTracker#obtain_E@ to retrieve a new instance of the class when you are going to begin tracking. Put the motion events you receive into it with @B_android#view#VelocityTracker#addMovement_E@. When you want to determine the velocity call @B_android#view#VelocityTracker#computeCurrentVelocity_E@ and then call @B_android#view#VelocityTracker#getXVelocity_E@ and @B_android#view#VelocityTracker#getYVelocity_E@ to retrieve the velocity for each pointer id."}