{"Functions": {"ImageButton(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageButton (Context context, AttributeSet attrs)"}, "onSetAlpha(int)": {"Returns": [["boolean", "true if the view can draw with the specified alpha."]], "Parameters": [["int", "int: The alpha (0..255) to apply to the view's drawing"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked if there is a Transform that involves alpha. Subclass that can draw themselves with the specified alpha should return true, and then respect that alpha when their onDraw() is called. If this returns false then the view may be redirected to draw into an offscreen buffer to fulfill the request, which will look fine, but may be slower than if the subclass handles it internally. The default implementation returns false.", "history": "Added in API level 1", "FullName": "protected boolean onSetAlpha (int alpha)"}, "ImageButton(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageButton (Context context)"}, "onResolvePointerIcon(android.view.MotionEvent,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent from a mouse"], ["int", "int: The index of the pointer for which to retrieve the @B_android#view#PointerIcon_E@. This will be between 0 and @B_android#view#MotionEvent#getPointerCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews).", "history": "Added in API level 24", "FullName": "public PointerIcon onResolvePointerIcon (MotionEvent event, int pointerIndex)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "ImageButton(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ImageButton (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "ImageButton(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ImageButton (Context context, AttributeSet attrs, int defStyleAttr)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#ImageView_E@"], "ClassName": "android.widget.ImageButton", "ClassDesc": "Displays a button with an image (instead of text) that can be pressed or clicked by the user. By default, an ImageButton looks like a regular @B_android#widget#Button_E@, with the standard button background that changes color during different button states. The image on the surface of the button is defined either by the android:src attribute in the <ImageButton> XML element or by the @B_android#widget#ImageView#setImageResource_E@ method. To remove the standard button background image, define your own background image or set the background color to be transparent. To indicate the different button states (focused, selected, etc.), you can define a different image for each state. E.g., a blue image by default, an orange one for when focused, and a yellow one for when pressed. An easy way to do this is with an XML drawable \"selector.\" For example: Save the XML file in your project res/drawable/ folder and then reference it as a drawable for the source of your ImageButton (in the android:src attribute). Android will automatically change the image based on the state of the button and the corresponding images defined in the XML. The order of the <item> elements is important because they are evaluated in order. This is why the \"normal\" button image comes last, because it will only be applied after android:state_pressed and android:state_focused have both evaluated false. See the See @B_android#R#styleable#ImageView_E@, @B_android#R#styleable#View_E@"}