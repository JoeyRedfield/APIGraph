{"Functions": {"getParameterClassName(int)": {"Returns": [["@B_java#lang#String_E@", "the fully-qualified name of the class in the Java programming language that would be used by the method PreparedStatement.setObject to set the value in the specified parameter. This is the class name used for custom mapping."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the fully-qualified name of the Java class whose instances should be passed to the method PreparedStatement.setObject.", "history": "Added in API level 1", "FullName": "public abstract String getParameterClassName (int param)"}, "isSigned(int)": {"Returns": [["boolean", "true if so; false otherwise"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether values for the designated parameter can be signed numbers.", "history": "Added in API level 1", "FullName": "public abstract boolean isSigned (int param)"}, "getScale(int)": {"Returns": [["int", "scale"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the designated parameter's number of digits to right of the decimal point. 0 is returned for data types where the scale is not applicable.", "history": "Added in API level 1", "FullName": "public abstract int getScale (int param)"}, "getParameterCount()": {"Returns": [["int", "the number of parameters"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number of parameters in the PreparedStatement object for which this ParameterMetaData object contains information.", "history": "Added in API level 1", "FullName": "public abstract int getParameterCount ()"}, "getParameterTypeName(int)": {"Returns": [["@B_java#lang#String_E@", "type the name used by the database. If the parameter type is a user-defined type, then a fully-qualified type name is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the designated parameter's database-specific type name.", "history": "Added in API level 1", "FullName": "public abstract String getParameterTypeName (int param)"}, "getPrecision(int)": {"Returns": [["int", "precision"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the designated parameter's specified column size. The returned value represents the maximum column size for the given parameter. For numeric data, this is the maximum precision. For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes. For the ROWID datatype, this is the length in bytes. 0 is returned for data types where the column size is not applicable.", "history": "Added in API level 1", "FullName": "public abstract int getPrecision (int param)"}, "getParameterType(int)": {"Returns": [["int", "SQL type from java.sql.Types"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Retrieves the designated parameter's SQL type.", "history": "Added in API level 1", "FullName": "public abstract int getParameterType (int param)"}, "getParameterMode(int)": {"Returns": [["int", "mode of the parameter; one of ParameterMetaData.parameterModeIn, ParameterMetaData.parameterModeOut, or ParameterMetaData.parameterModeInOut ParameterMetaData.parameterModeUnknown."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the designated parameter's mode.", "history": "Added in API level 1", "FullName": "public abstract int getParameterMode (int param)"}, "isNullable(int)": {"Returns": [["int", "the nullability status of the given parameter; one of ParameterMetaData.parameterNoNulls, ParameterMetaData.parameterNullable, or ParameterMetaData.parameterNullableUnknown"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether null values are allowed in the designated parameter.", "history": "Added in API level 1", "FullName": "public abstract int isNullable (int param)"}}, "Inheritance": [], "ClassName": "java.sql.ParameterMetaData", "ClassDesc": "An object that can be used to get information about the types and properties for each parameter marker in a PreparedStatement object. For some queries and driver implementations, the data that would be returned by a ParameterMetaData object may not be available until the PreparedStatement has been executed. Some driver implementations may not be able to provide information about the types and properties for each parameter marker in a CallableStatement object."}