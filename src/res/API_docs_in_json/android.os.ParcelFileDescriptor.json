{"Functions": {"parseMode(java.lang.String)": {"Returns": [["int", "A bitmask representing the given file mode."]], "Parameters": [["@B_java#lang#String_E@", "String: The string representation of the file mode. Can be \"r\", \"w\", \"wt\", \"wa\", \"rw\" or \"rwt\"."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given string does not match a known file mode."]], "SeeAlso": [], "Permissions": [], "Description": "Converts a string representing a file mode, such as \"rw\", into a bitmask suitable for use with @B_android#os#ParcelFileDescriptor#open_E@.", "history": "Added in API level 19", "FullName": "public static int parseMode (String mode)"}, "open(java.io.File,int,android.os.Handler,android.os.ParcelFileDescriptor.OnCloseListener)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "a new ParcelFileDescriptor pointing to the given file."]], "Parameters": [["@B_java#io#File_E@", "File: The file to be opened."], ["int", "int: The desired access mode, must be one of @B_android#os#ParcelFileDescriptor#MODE_READ_ONLY_E@, @B_android#os#ParcelFileDescriptor#MODE_WRITE_ONLY_E@, or @B_android#os#ParcelFileDescriptor#MODE_READ_WRITE_E@; may also be any combination of @B_android#os#ParcelFileDescriptor#MODE_CREATE_E@, @B_android#os#ParcelFileDescriptor#MODE_TRUNCATE_E@, @B_android#os#ParcelFileDescriptor#MODE_WORLD_READABLE_E@, and @B_android#os#ParcelFileDescriptor#MODE_WORLD_WRITEABLE_E@."], ["@B_android#os#Handler_E@", "Handler: to call listener from; must not be null."], ["@B_android#os#ParcelFileDescriptor#OnCloseListener_E@", "ParcelFileDescriptor.OnCloseListener: to be invoked when the returned descriptor has been closed; must not be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the given file does not exist or can not be opened with the requested mode."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#parseMode_E@"], "Permissions": [], "Description": "Create a new ParcelFileDescriptor accessing a given file.", "history": "Added in API level 19", "FullName": "public static ParcelFileDescriptor open (File file, int mode, Handler handler, ParcelFileDescriptor.OnCloseListener listener)"}, "canDetectErrors()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#checkError_E@"], "Permissions": [], "Description": "Indicates if this ParcelFileDescriptor can communicate and detect remote errors/crashes.", "history": "Added in API level 19", "FullName": "public boolean canDetectErrors ()"}, "fromFd(int)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor holding a FileDescriptor for a dup of the given fd."]], "Parameters": [["int", "int: The native fd that the ParcelFileDescriptor should dup."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor from a raw native fd. The new ParcelFileDescriptor holds a dup of the original fd passed in here, so you must still close that fd as well as the new ParcelFileDescriptor.", "history": "Added in API level 13", "FullName": "public static ParcelFileDescriptor fromFd (int fd)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "closeWithError(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: describing the error; must not be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Close the ParcelFileDescriptor, informing any peer that an error occurred while processing. If the creator of this descriptor is not observing errors, it will close normally.", "history": "Added in API level 19", "FullName": "public void closeWithError (String msg)"}, "createReliableSocketPair()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create two ParcelFileDescriptors structured as a pair of sockets connected to each other. The two sockets are indistinguishable. Both ends have the ability to deliver an error message through @B_android#os#ParcelFileDescriptor#closeWithError_E@ which can be detected by the other end calling @B_android#os#ParcelFileDescriptor#checkError_E@, usually after detecting an EOF. This can also be used to detect remote crashes.", "history": "Added in API level 19", "FullName": "public static ParcelFileDescriptor[] createReliableSocketPair ()"}, "dup(java.io.FileDescriptor)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor that is a dup of an existing FileDescriptor. This obeys standard POSIX semantics, where the new file descriptor shared state such as file position with the original file descriptor.", "history": "Added in API level 13", "FullName": "public static ParcelFileDescriptor dup (FileDescriptor orig)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel. If @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@ is set in flags, the file descriptor will be closed after a copy is written to the Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "createPipe()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create two ParcelFileDescriptors structured as a data pipe. The first ParcelFileDescriptor in the returned array is the read side; the second is the write side.", "history": "Added in API level 9", "FullName": "public static ParcelFileDescriptor[] createPipe ()"}, "getFd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the native fd int for this ParcelFileDescriptor. The ParcelFileDescriptor still owns the fd, and it still must be closed through this API.", "history": "Added in API level 12", "FullName": "public int getFd ()"}, "open(java.io.File, int)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "a new ParcelFileDescriptor pointing to the given file."]], "Parameters": [["@B_java#io#File_E@", "File: The file to be opened."], ["int", "int: The desired access mode, must be one of @B_android#os#ParcelFileDescriptor#MODE_READ_ONLY_E@, @B_android#os#ParcelFileDescriptor#MODE_WRITE_ONLY_E@, or @B_android#os#ParcelFileDescriptor#MODE_READ_WRITE_E@; may also be any combination of @B_android#os#ParcelFileDescriptor#MODE_CREATE_E@, @B_android#os#ParcelFileDescriptor#MODE_TRUNCATE_E@, @B_android#os#ParcelFileDescriptor#MODE_WORLD_READABLE_E@, and @B_android#os#ParcelFileDescriptor#MODE_WORLD_WRITEABLE_E@."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the given file does not exist or can not be opened with the requested mode."]], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#parseMode_E@"], "Permissions": [], "Description": "Create a new ParcelFileDescriptor accessing a given file.", "history": "added in API level 1", "FullName": "public static ParcelFileDescriptor open (File file, int mode)"}, "fromSocket(java.net.Socket)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "A new ParcelFileDescriptor with a duped copy of the FileDescriptor of the specified Socket."]], "Parameters": [["@B_java#net#Socket_E@", "Socket: The Socket whose FileDescriptor is used to create a new ParcelFileDescriptor."]], "Throws": [["@B_java#io#UncheckedIOException_E@", "if @B_android#os#ParcelFileDescriptor#dup_E@ throws IOException."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor from the specified Socket. The new ParcelFileDescriptor holds a dup of the original FileDescriptor in the Socket, so you must still close the Socket as well as the new ParcelFileDescriptor.", "history": "Added in API level 1", "FullName": "public static ParcelFileDescriptor fromSocket (Socket socket)"}, "open(java.io.File,int)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "a new ParcelFileDescriptor pointing to the given file."]], "Parameters": [["@B_java#io#File_E@", "File: The file to be opened."], ["int", "int: The desired access mode, must be one of @B_android#os#ParcelFileDescriptor#MODE_READ_ONLY_E@, @B_android#os#ParcelFileDescriptor#MODE_WRITE_ONLY_E@, or @B_android#os#ParcelFileDescriptor#MODE_READ_WRITE_E@; may also be any combination of @B_android#os#ParcelFileDescriptor#MODE_CREATE_E@, @B_android#os#ParcelFileDescriptor#MODE_TRUNCATE_E@, @B_android#os#ParcelFileDescriptor#MODE_WORLD_READABLE_E@, and @B_android#os#ParcelFileDescriptor#MODE_WORLD_WRITEABLE_E@."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the given file does not exist or can not be opened with the requested mode."]], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#parseMode_E@"], "Permissions": [], "Description": "Create a new ParcelFileDescriptor accessing a given file.", "history": "Added in API level 1", "FullName": "public static ParcelFileDescriptor open (File file, int mode)"}, "dup()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor that is a dup of the existing FileDescriptor. This obeys standard POSIX semantics, where the new file descriptor shared state such as file position with the original file descriptor.", "history": "Added in API level 14", "FullName": "public ParcelFileDescriptor dup ()"}, "ParcelFileDescriptor(android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor wrapped around another descriptor. By default all method calls are delegated to the wrapped descriptor.", "history": "Added in API level 1", "FullName": "public ParcelFileDescriptor (ParcelFileDescriptor wrapped)"}, "fromDatagramSocket(java.net.DatagramSocket)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "A new ParcelFileDescriptor with a duped copy of the FileDescriptor of the specified Socket."]], "Parameters": [["@B_java#net#DatagramSocket_E@", "DatagramSocket: The DatagramSocket whose FileDescriptor is used to create a new ParcelFileDescriptor."]], "Throws": [["@B_java#io#UncheckedIOException_E@", "if @B_android#os#ParcelFileDescriptor#dup_E@ throws IOException."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new ParcelFileDescriptor from the specified DatagramSocket. The new ParcelFileDescriptor holds a dup of the original FileDescriptor in the DatagramSocket, so you must still close the DatagramSocket as well as the new ParcelFileDescriptor.", "history": "Added in API level 14", "FullName": "public static ParcelFileDescriptor fromDatagramSocket (DatagramSocket datagramSocket)"}, "checkError()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "for normal errors."], ["@B_android#os#ParcelFileDescriptor#FileDescriptorDetachedException_E@", "if the remote side called @B_android#os#ParcelFileDescriptor#detachFd_E@. Once detached, the remote side is unable to communicate any errors through @B_android#os#ParcelFileDescriptor#closeWithError_E@."]], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#canDetectErrors_E@"], "Permissions": [], "Description": "Detect and throw if the other end of a pipe or socket pair encountered an error or crashed. This allows a reader to distinguish between a valid EOF and an error/crash. If this ParcelFileDescriptor is unable to detect remote errors, it will return silently.", "history": "Added in API level 19", "FullName": "public void checkError ()"}, "getStatSize()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the total size of the file representing this fd, as determined by stat(). Returns -1 if the fd is not a file.", "history": "Added in API level 3", "FullName": "public long getStatSize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an error occurs attempting to close this ParcelFileDescriptor."]], "SeeAlso": [], "Permissions": [], "Description": "Close the ParcelFileDescriptor. This implementation closes the underlying OS resources allocated to represent this stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "createReliablePipe()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create two ParcelFileDescriptors structured as a data pipe. The first ParcelFileDescriptor in the returned array is the read side; the second is the write side. The write end has the ability to deliver an error message through @B_android#os#ParcelFileDescriptor#closeWithError_E@ which can be handled by the read end calling @B_android#os#ParcelFileDescriptor#checkError_E@, usually after detecting an EOF. This can also be used to detect remote crashes.", "history": "Added in API level 19", "FullName": "public static ParcelFileDescriptor[] createReliablePipe ()"}, "adoptFd(int)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "Returns a new ParcelFileDescriptor holding a FileDescriptor for the given fd."]], "Parameters": [["int", "int: The native fd that the ParcelFileDescriptor should adopt."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take ownership of a raw native fd in to a new ParcelFileDescriptor. The returned ParcelFileDescriptor now owns the given fd, and will be responsible for closing it.", "history": "Added in API level 13", "FullName": "public static ParcelFileDescriptor adoptFd (int fd)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "detachFd()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#ParcelFileDescriptor#canDetectErrors_E@"], "Permissions": [], "Description": "Return the native fd int for this ParcelFileDescriptor and detach it from the object here. You are now responsible for closing the fd in native code. You should not detach when the original creator of the descriptor is expecting a reliable signal through @B_android#os#ParcelFileDescriptor#close_E@ or @B_android#os#ParcelFileDescriptor#closeWithError_E@.", "history": "Added in API level 12", "FullName": "public int detachFd ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "getFileDescriptor()": {"Returns": [["@B_java#io#FileDescriptor_E@", "Returns the FileDescriptor associated with this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the actual FileDescriptor associated with this object.", "history": "Added in API level 1", "FullName": "public FileDescriptor getFileDescriptor ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel. If @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@ is set in flags, the file descriptor will be closed after a copy is written to the Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "createSocketPair()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Create two ParcelFileDescriptors structured as a pair of sockets connected to each other. The two sockets are indistinguishable.", "history": "Added in API level 19", "FullName": "public static ParcelFileDescriptor[] createSocketPair ()"}}, "Inheritance": [], "ClassName": "android.os.ParcelFileDescriptor", "ClassDesc": "The FileDescriptor returned by @B_android#os#Parcel#readFileDescriptor_E@, allowing you to close it when done with it."}