{"Functions": {"setDirection(int)": {"Returns": [], "Parameters": [["int", "int: the direction of the animation"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#getDirection_E@", "@B_android#view#animation#GridLayoutAnimationController_E@"], "Permissions": [], "Description": "Sets the direction of the animation. The direction is expressed as an integer containing a horizontal and vertical component. For instance, DIRECTION_BOTTOM_TO_TOP | DIRECTION_RIGHT_TO_LEFT.", "history": "Added in API level 1", "FullName": "public void setDirection (int direction)"}, "GridLayoutAnimationController(android.view.animation.Animation,float,float)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: the animation to use on each child of the view group"], ["float", "float: the delay by which each column animation must be offset"], ["float", "float: the delay by which each row animation must be offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new layout animation controller with the specified delays and the specified animation.", "history": "Added in API level 1", "FullName": "public GridLayoutAnimationController (Animation animation, float columnDelay, float rowDelay)"}, "getColumnDelay()": {"Returns": [["float", "a fraction of the animation duration"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#setColumnDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#getRowDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#setRowDelay_E@"], "Permissions": [], "Description": "Returns the delay by which the children's animation are offset from one column to the other. The delay is expressed as a fraction of the animation duration.", "history": "Added in API level 1", "FullName": "public float getColumnDelay ()"}, "getRowDelay()": {"Returns": [["float", "a fraction of the animation duration"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#setRowDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#getColumnDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#setColumnDelay_E@"], "Permissions": [], "Description": "Returns the delay by which the children's animation are offset from one row to the other. The delay is expressed as a fraction of the animation duration.", "history": "Added in API level 1", "FullName": "public float getRowDelay ()"}, "setRowDelay(float)": {"Returns": [], "Parameters": [["float", "float: a fraction of the animation duration"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#getRowDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#getColumnDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#setColumnDelay_E@"], "Permissions": [], "Description": "Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one row to the other.", "history": "Added in API level 1", "FullName": "public void setRowDelay (float rowDelay)"}, "setColumnDelay(float)": {"Returns": [], "Parameters": [["float", "float: a fraction of the animation duration"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#getColumnDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#getRowDelay_E@", "@B_android#view#animation#GridLayoutAnimationController#setRowDelay_E@"], "Permissions": [], "Description": "Sets the delay, as a fraction of the animation duration, by which the children's animations are offset from one column to the other.", "history": "Added in API level 1", "FullName": "public void setColumnDelay (float columnDelay)"}, "willOverlap()": {"Returns": [["boolean", "true if animations will overlap, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether two children's animations will overlap. Animations overlap when the delay is lower than 100% (or 1.0).", "history": "Added in API level 1", "FullName": "public boolean willOverlap ()"}, "getDirectionPriority()": {"Returns": [["int", "the priority of the animation direction"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#setDirectionPriority_E@", "@B_android#view#animation#GridLayoutAnimationController_E@"], "Permissions": [], "Description": "Returns the direction priority for the animation. The priority can be either @B_android#view#animation#GridLayoutAnimationController#PRIORITY_NONE_E@, @B_android#view#animation#GridLayoutAnimationController#PRIORITY_COLUMN_E@ or @B_android#view#animation#GridLayoutAnimationController#PRIORITY_ROW_E@.", "history": "Added in API level 1", "FullName": "public int getDirectionPriority ()"}, "getDirection()": {"Returns": [["int", "the direction of the animation"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#setDirection_E@", "@B_android#view#animation#GridLayoutAnimationController_E@"], "Permissions": [], "Description": "Returns the direction of the animation. @B_android#view#animation#GridLayoutAnimationController#DIRECTION_HORIZONTAL_MASK_E@ and @B_android#view#animation#GridLayoutAnimationController#DIRECTION_VERTICAL_MASK_E@ can be used to retrieve the horizontal and vertical components of the direction.", "history": "Added in API level 1", "FullName": "public int getDirection ()"}, "setDirectionPriority(int)": {"Returns": [], "Parameters": [["int", "int: the direction priority of the animation"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#GridLayoutAnimationController#getDirectionPriority_E@", "@B_android#view#animation#GridLayoutAnimationController_E@"], "Permissions": [], "Description": "Specifies the direction priority of the animation. For instance, @B_android#view#animation#GridLayoutAnimationController#PRIORITY_COLUMN_E@ will give priority to columns: the animation will first play on the column, then on the rows.Z", "history": "Added in API level 1", "FullName": "public void setDirectionPriority (int directionPriority)"}, "GridLayoutAnimationController(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the Context the view group is running in, through which it can access the resources"], ["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes of the XML tag that is inflating the layout animation controller"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new grid layout animation controller from external resources.", "history": "Added in API level 1", "FullName": "public GridLayoutAnimationController (Context context, AttributeSet attrs)"}, "GridLayoutAnimationController(android.view.animation.Animation)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: the animation to use on each child of the view group"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new layout animation controller with a delay of 50% for both rows and columns and the specified animation.", "history": "Added in API level 1", "FullName": "public GridLayoutAnimationController (Animation animation)"}, "getDelayForView(android.view.View)": {"Returns": [["long", "a delay in milliseconds"]], "Parameters": [["@B_android#view#View_E@", "View: the view for which to obtain the animation's delay"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of milliseconds by which the specified view's animation must be delayed or offset. Subclasses should override this method to return a suitable value. This implementation returns child animation delay milliseconds where: @B_android#view#animation#LayoutAnimationController#AnimationParameters_E@ found in the view's @B_android#view#ViewGroup#LayoutParams_E@.", "history": "Added in API level 1", "FullName": "protected long getDelayForView (View view)"}}, "Inheritance": ["@B_android#view#animation#LayoutAnimationController_E@"], "ClassName": "android.view.animation.GridLayoutAnimationController", "ClassDesc": "A layout animation controller is used to animated a grid layout's children. While @B_android#view#animation#LayoutAnimationController_E@ relies only on the index of the child in the view group to compute the animation delay, this class uses both the X and Y coordinates of the child within a grid. In addition, the animation direction can be controlled. The default direction is DIRECTION_LEFT_TO_RIGHT | DIRECTION_TOP_TO_BOTTOM. You can also set the animation priority to columns or rows. The default priority is none. Information used to compute the animation delay of each child are stored in an instance of @B_android#view#animation#GridLayoutAnimationController#AnimationParameters_E@, itself stored in the @B_android#view#ViewGroup#LayoutParams_E@ of the view."}