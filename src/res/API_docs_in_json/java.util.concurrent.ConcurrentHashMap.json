{"Functions": {"containsKey(java.lang.Object)": {"Returns": [["boolean", "true if and only if the specified object is a key in this table, as determined by the equals method; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: possible key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Tests if the specified object is a key in this table.", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "searchKeys(long,java.util.function.Function<?superK,?extendsU>)": {"Returns": [["U", "a non-null result from applying the given search function on each key, or null if none"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning a non-null result on success, else null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a non-null result from applying the given search function on each key, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.", "history": "Added in API level 24", "FullName": "public U searchKeys (long parallelismThreshold, Function<? super K, ? extends U> searchFunction)"}, "reduceEntriesToDouble(long,java.util.function.ToDoubleFunction<java.util.Map.Entry<K,V>>,double,java.util.function.DoubleBinaryOperator)": {"Returns": [["double", "the result of accumulating the given transformation of all entries"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a function returning the transformation for an element"], ["double", "double: the identity (initial default value) for the reduction"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public double reduceEntriesToDouble (long parallelismThreshold, ToDoubleFunction<Entry<K, V>> transformer, double basis, DoubleBinaryOperator reducer)"}, "forEachValue(long,java.util.function.Consumer<?superV>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each value.", "history": "Added in API level 24", "FullName": "public void forEachValue (long parallelismThreshold, Consumer<? super V> action)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which a value may be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or remappingFunction is null"], ["@B_java#lang#IllegalStateException_E@", "if the computation detectably attempts a recursive update to this map that would otherwise never complete"], ["@B_java#lang#RuntimeException_E@", "or Error if the remappingFunction does so, in which case the mapping is unchanged"]], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public V putIfAbsent (K key, V value)"}, "reduceEntriesToLong(long,java.util.function.ToLongFunction<java.util.Map.Entry<K,V>>,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the result of accumulating the given transformation of all entries"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a function returning the transformation for an element"], ["long", "long: the identity (initial default value) for the reduction"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public long reduceEntriesToLong (long parallelismThreshold, ToLongFunction<Entry<K, V>> transformer, long basis, LongBinaryOperator reducer)"}, "ConcurrentHashMap(int)": {"Returns": [], "Parameters": [["int", "int: The implementation performs internal sizing to accommodate this many elements."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity of elements is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with an initial table size accommodating the specified number of elements without the need to dynamically resize.", "history": "Added in API level 1", "FullName": "public ConcurrentHashMap (int initialCapacity)"}, "reduceToInt(long,java.util.function.ToIntBiFunction<?superK,?superV>,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of accumulating the given transformation of all (key, value) pairs"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToIntBiFunction_E@", "ToIntBiFunction: a function returning the transformation for an element"], ["int", "int: the identity (initial default value) for the reduction"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public int reduceToInt (long parallelismThreshold, ToIntBiFunction<? super K, ? super V> transformer, int basis, IntBinaryOperator reducer)"}, "reduceKeys(long,java.util.function.Function<?superK,?extendsU>,java.util.function.BiFunction<?superU,?superU,?extendsU>)": {"Returns": [["U", "the result of accumulating the given transformation of all keys"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public U reduceKeys (long parallelismThreshold, Function<? super K, ? extends U> transformer, BiFunction<? super U, ? super U, ? extends U> reducer)"}, "reduceToLong(long,java.util.function.ToLongBiFunction<?superK,?superV>,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the result of accumulating the given transformation of all (key, value) pairs"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToLongBiFunction_E@", "ToLongBiFunction: a function returning the transformation for an element"], ["long", "long: the identity (initial default value) for the reduction"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public long reduceToLong (long parallelismThreshold, ToLongBiFunction<? super K, ? super V> transformer, long basis, LongBinaryOperator reducer)"}, "forEachKey(long,java.util.function.Consumer<?superK>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each key.", "history": "Added in API level 24", "FullName": "public void forEachKey (long parallelismThreshold, Consumer<? super K> action)"}, "forEach(long,java.util.function.BiFunction<?superK,?superV,?extendsU>,java.util.function.Consumer<?superU>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each non-null transformation of each (key, value).", "history": "Added in API level 24", "FullName": "public void forEach (long parallelismThreshold, BiFunction<? super K, ? super V, ? extends U> transformer, Consumer<? super U> action)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this map for equality. Returns true if the given object is a map with the same mappings as this map. This operation may return misleading results if either map is concurrently modified during execution of this method.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "ConcurrentHashMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with the default initial table size (16).", "history": "Added in API level 1", "FullName": "public ConcurrentHashMap ()"}, "elements()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the values in this table"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ConcurrentHashMap#values_E@"], "Permissions": [], "Description": "Returns an enumeration of the values in this table.", "history": "Added in API level 1", "FullName": "public Enumeration<V> elements ()"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "the set view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The set returned by this method is guaranteed to an instance of @B_java#util#concurrent#ConcurrentHashMap#KeySetView_E@. The view's iterators and spliterators are The view's spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#DISTINCT_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any of the arguments are null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "forEachValue(long,java.util.function.Function<?superV,?extendsU>,java.util.function.Consumer<?superU>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each non-null transformation of each value.", "history": "Added in API level 24", "FullName": "public void forEachValue (long parallelismThreshold, Function<? super V, ? extends U> transformer, Consumer<? super U> action)"}, "hashCode()": {"Returns": [["int", "the hash code value for this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hash code value for this @B_java#util#Map_E@, i.e., the sum of, for each key-value pair in the map, key.hashCode() ^ value.hashCode().", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that key.equals(k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.)", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "keySet(V)": {"Returns": [["@B_java#util#concurrent#ConcurrentHashMap#KeySetView_E@", "the set view"]], "Parameters": [["V", "V: the mapped value to use for any additions"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the mappedValue is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys in this map, using the given common mapped value for any additions (i.e., @B_java#util#Collection#add_E@ and @B_java#util#Collection#addAll_E@). This is of course only appropriate if it is acceptable to use the same value for all additions from this view.", "history": "Added in API level 24", "FullName": "public KeySetView<K, V> keySet (V mappedValue)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.", "history": "Added in API level 1", "FullName": "public int size ()"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: the value to use if absent"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to recompute a value if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or the remappingFunction is null"], ["@B_java#lang#RuntimeException_E@", "or Error if the remappingFunction does so, in which case the mapping is unchanged"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a (non-null) value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if null. The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public boolean remove (Object key, Object value)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "the collection view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from this map, via the Iterator.remove, Collection.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are The view's spliterator reports @B_java#util#Spliterator#CONCURRENT_E@ and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "reduceValuesToDouble(long,java.util.function.ToDoubleFunction<?superV>,double,java.util.function.DoubleBinaryOperator)": {"Returns": [["double", "the result of accumulating the given transformation of all values"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a function returning the transformation for an element"], ["double", "double: the identity (initial default value) for the reduction"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public double reduceValuesToDouble (long parallelismThreshold, ToDoubleFunction<? super V> transformer, double basis, DoubleBinaryOperator reducer)"}, "newKeySet(int)": {"Returns": [["@B_java#util#concurrent#ConcurrentHashMap#KeySetView_E@", "the new set"]], "Parameters": [["int", "int: The implementation performs internal sizing to accommodate this many elements."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity of elements is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_java#util#Set_E@ backed by a ConcurrentHashMap from the given type to Boolean.TRUE.", "history": "Added in API level 24", "FullName": "public static KeySetView<K, Boolean> newKeySet (int initialCapacity)"}, "mappingCount()": {"Returns": [["long", "the number of mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of mappings. This method should be used instead of @B_java#util#concurrent#ConcurrentHashMap#size_E@ because a ConcurrentHashMap may contain more mappings than can be represented as an int. The value returned is an estimate; the actual count may differ if there are concurrent insertions or removals.", "history": "Added in API level 24", "FullName": "public long mappingCount ()"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key that needs to be removed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the key (and its corresponding value) from this map. This method does nothing if the key is not in the map.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "reduceEntriesToInt(long,java.util.function.ToIntFunction<java.util.Map.Entry<K,V>>,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of accumulating the given transformation of all entries"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a function returning the transformation for an element"], ["int", "int: the identity (initial default value) for the reduction"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public int reduceEntriesToInt (long parallelismThreshold, ToIntFunction<Entry<K, V>> transformer, int basis, IntBinaryOperator reducer)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this map. The string representation consists of a list of key-value mappings (in no particular order) enclosed in braces (\"{}\"). Adjacent mappings are separated by the characters \", \" (comma and space). Each key-value mapping is rendered as the key followed by an equals sign (\"=\") followed by the associated value.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "reduceKeys(long,java.util.function.BiFunction<?superK,?superK,?extendsK>)": {"Returns": [["K", "the result of accumulating all keys using the given reducer to combine values, or null if none"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating all keys using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public K reduceKeys (long parallelismThreshold, BiFunction<? super K, ? super K, ? extends K> reducer)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "the set view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. The view's iterators and spliterators are The view's spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#DISTINCT_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public boolean remove (Object key, Object value)"}, "reduceValues(long,java.util.function.Function<?superV,?extendsU>,java.util.function.BiFunction<?superU,?superU,?extendsU>)": {"Returns": [["U", "the result of accumulating the given transformation of all values"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public U reduceValues (long parallelismThreshold, Function<? super V, ? extends U> transformer, BiFunction<? super U, ? super U, ? extends U> reducer)"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "Added in API level 1", "FullName": "public V replace (K key, V value)"}, "forEachEntry(long,java.util.function.Consumer<?superjava.util.Map.Entry<K,V>>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry.", "history": "Added in API level 24", "FullName": "public void forEachEntry (long parallelismThreshold, Consumer<? super Entry<K, V>> action)"}, "ConcurrentHashMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new map with the same mappings as the given map.", "history": "Added in API level 1", "FullName": "public ConcurrentHashMap (Map<? extends K, ? extends V> m)"}, "reduceValuesToInt(long,java.util.function.ToIntFunction<?superV>,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of accumulating the given transformation of all values"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a function returning the transformation for an element"], ["int", "int: the identity (initial default value) for the reduction"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public int reduceValuesToInt (long parallelismThreshold, ToIntFunction<? super V> transformer, int basis, IntBinaryOperator reducer)"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Maps the specified key to the specified value in this table. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}, "reduceEntries(long,java.util.function.BiFunction<java.util.Map.Entry<K,V>,java.util.Map.Entry<K,V>,?extendsjava.util.Map.Entry<K,V>>)": {"Returns": [["@B_java#util#Map#Entry_E@", "the result of accumulating all entries"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating all entries using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public Entry<K, V> reduceEntries (long parallelismThreshold, BiFunction<Entry<K, V>, Entry<K, V>, ? extends Entry<K, V>> reducer)"}, "reduceKeysToLong(long,java.util.function.ToLongFunction<?superK>,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the result of accumulating the given transformation of all keys"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a function returning the transformation for an element"], ["long", "long: the identity (initial default value) for the reduction"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public long reduceKeysToLong (long parallelismThreshold, ToLongFunction<? super K> transformer, long basis, LongBinaryOperator reducer)"}, "ConcurrentHashMap(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor."], ["float", "float: the load factor (table density) for establishing the initial table size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity of elements is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor).", "history": "Added in API level 9", "FullName": "public ConcurrentHashMap (int initialCapacity, float loadFactor)"}, "ConcurrentHashMap(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor."], ["float", "float: the load factor (table density) for establishing the initial table size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity of elements is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity) and initial table density (loadFactor).", "history": "added in API level 9", "FullName": "public ConcurrentHashMap (int initialCapacity, float loadFactor)"}, "reduceKeysToInt(long,java.util.function.ToIntFunction<?superK>,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the result of accumulating the given transformation of all keys"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: a function returning the transformation for an element"], ["int", "int: the identity (initial default value) for the reduction"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public int reduceKeysToInt (long parallelismThreshold, ToIntFunction<? super K> transformer, int basis, IntBinaryOperator reducer)"}, "ConcurrentHashMap(int, float, int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor."], ["float", "float: the load factor (table density) for establishing the initial table size"], ["int", "int: the estimated number of concurrently updating threads. The implementation may use this value as a sizing hint."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), table density (loadFactor), and number of concurrently updating threads (concurrencyLevel).", "history": "added in API level 1", "FullName": "public ConcurrentHashMap (int initialCapacity, float loadFactor, int concurrencyLevel)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Maps the specified key to the specified value in this table. Neither the key nor the value can be null. The value can be retrieved by calling the get method with a key that is equal to the original key.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any of the arguments are null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "newKeySet()": {"Returns": [["@B_java#util#concurrent#ConcurrentHashMap#KeySetView_E@", "the new set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_java#util#Set_E@ backed by a ConcurrentHashMap from the given type to Boolean.TRUE.", "history": "Added in API level 24", "FullName": "public static KeySetView<K, Boolean> newKeySet ()"}, "forEachKey(long,java.util.function.Function<?superK,?extendsU>,java.util.function.Consumer<?superU>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each non-null transformation of each key.", "history": "Added in API level 24", "FullName": "public void forEachKey (long parallelismThreshold, Function<? super K, ? extends U> transformer, Consumer<? super U> action)"}, "keys()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the keys in this table"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#ConcurrentHashMap#keySet_E@"], "Permissions": [], "Description": "Returns an enumeration of the keys in this table.", "history": "Added in API level 1", "FullName": "public Enumeration<K> keys ()"}, "reduceValuesToLong(long,java.util.function.ToLongFunction<?superV>,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the result of accumulating the given transformation of all values"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: a function returning the transformation for an element"], ["long", "long: the identity (initial default value) for the reduction"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all values using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public long reduceValuesToLong (long parallelismThreshold, ToLongFunction<? super V> transformer, long basis, LongBinaryOperator reducer)"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or remappingFunction is null"], ["@B_java#lang#IllegalStateException_E@", "if the computation detectably attempts a recursive update to this map that would otherwise never complete"], ["@B_java#lang#RuntimeException_E@", "or Error if the remappingFunction does so, in which case the mapping is unchanged"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The entire method invocation is performed atomically. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this Map.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "reduceValues(long,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the result of accumulating all values"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating all values using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public V reduceValues (long parallelismThreshold, BiFunction<? super V, ? super V, ? extends V> reducer)"}, "search(long,java.util.function.BiFunction<?superK,?superV,?extendsU>)": {"Returns": [["U", "a non-null result from applying the given search function on each (key, value), or null if none"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a function returning a non-null result on success, else null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a non-null result from applying the given search function on each (key, value), or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.", "history": "Added in API level 24", "FullName": "public U search (long parallelismThreshold, BiFunction<? super K, ? super V, ? extends U> searchFunction)"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "forEach(long,java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each (key, value).", "history": "Added in API level 24", "FullName": "public void forEach (long parallelismThreshold, BiConsumer<? super K, ? super V> action)"}, "ConcurrentHashMap(int,float,int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity. The implementation performs internal sizing to accommodate this many elements, given the specified load factor."], ["float", "float: the load factor (table density) for establishing the initial table size"], ["int", "int: the estimated number of concurrently updating threads. The implementation may use this value as a sizing hint."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor or concurrencyLevel are nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, empty map with an initial table size based on the given number of elements (initialCapacity), table density (loadFactor), and number of concurrently updating threads (concurrencyLevel).", "history": "Added in API level 1", "FullName": "public ConcurrentHashMap (int initialCapacity, float loadFactor, int concurrencyLevel)"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this one. These mappings replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the mapping for the key, if present; else the default value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the value to return if this map contains no mapping for the given key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains no key-value mappings.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "reduce(long,java.util.function.BiFunction<?superK,?superV,?extendsU>,java.util.function.BiFunction<?superU,?superU,?extendsU>)": {"Returns": [["U", "the result of accumulating the given transformation of all (key, value) pairs"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public U reduce (long parallelismThreshold, BiFunction<? super K, ? super V, ? extends U> transformer, BiFunction<? super U, ? super U, ? extends U> reducer)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public V replace (K key, V value)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map maps one or more keys to the specified value. Note: This method may require a full traversal of the map, and is much slower than method containsKey.", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "reduceToDouble(long,java.util.function.ToDoubleBiFunction<?superK,?superV>,double,java.util.function.DoubleBinaryOperator)": {"Returns": [["double", "the result of accumulating the given transformation of all (key, value) pairs"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToDoubleBiFunction_E@", "ToDoubleBiFunction: a function returning the transformation for an element"], ["double", "double: the identity (initial default value) for the reduction"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all (key, value) pairs using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public double reduceToDouble (long parallelismThreshold, ToDoubleBiFunction<? super K, ? super V> transformer, double basis, DoubleBinaryOperator reducer)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "added in API level 1", "FullName": "public V putIfAbsent (K key, V value)"}, "reduceEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,?extendsU>,java.util.function.BiFunction<?superU,?superU,?extendsU>)": {"Returns": [["U", "the result of accumulating the given transformation of all entries"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case it is not combined)"], ["@B_java#util#function#BiFunction_E@", "BiFunction: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all entries using the given reducer to combine values, or null if none.", "history": "Added in API level 24", "FullName": "public U reduceEntries (long parallelismThreshold, Function<Entry<K, V>, ? extends U> transformer, BiFunction<? super U, ? super U, ? extends U> reducer)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or mappingFunction is null"], ["@B_java#lang#IllegalStateException_E@", "if the computation detectably attempts a recursive update to this map that would otherwise never complete"], ["@B_java#lang#RuntimeException_E@", "or Error if the mappingFunction does so, in which case the mapping is left unestablished"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null. The entire method invocation is performed atomically, so the function is applied at most once per key. Some attempted update operations on this map by other threads may be blocked while computation is in progress, so the computation should be short and simple, and must not attempt to update any other mappings of this map.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "searchValues(long,java.util.function.Function<?superV,?extendsU>)": {"Returns": [["U", "a non-null result from applying the given search function on each value, or null if none"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning a non-null result on success, else null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a non-null result from applying the given search function on each value, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.", "history": "Added in API level 24", "FullName": "public U searchValues (long parallelismThreshold, Function<? super V, ? extends U> searchFunction)"}, "reduceKeysToDouble(long,java.util.function.ToDoubleFunction<?superK>,double,java.util.function.DoubleBinaryOperator)": {"Returns": [["double", "the result of accumulating the given transformation of all keys"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: a function returning the transformation for an element"], ["double", "double: the identity (initial default value) for the reduction"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a commutative associative combining function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the result of accumulating the given transformation of all keys using the given reducer to combine values, and the given basis as an identity value.", "history": "Added in API level 24", "FullName": "public double reduceKeysToDouble (long parallelismThreshold, ToDoubleFunction<? super K> transformer, double basis, DoubleBinaryOperator reducer)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the mapping for the key, if present; else the default value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the value to return if this map contains no mapping for the given key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or the given default value if this map contains no mapping for the key.", "history": "added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "forEachEntry(long,java.util.function.Function<java.util.Map.Entry<K,V>,?extendsU>,java.util.function.Consumer<?superU>)": {"Returns": [], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning the transformation for an element, or null if there is no transformation (in which case the action is not applied)"], ["@B_java#util#function#Consumer_E@", "Consumer: the action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each non-null transformation of each entry.", "history": "Added in API level 24", "FullName": "public void forEachEntry (long parallelismThreshold, Function<Entry<K, V>, ? extends U> transformer, Consumer<? super U> action)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if and only if some key maps to the value argument in this table as determined by the equals method; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: a value to search for"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Tests if some key maps into the specified value in this table. Note that this method is identical in functionality to @B_java#util#concurrent#ConcurrentHashMap#containsValue_E@, and exists solely to ensure full compatibility with class @B_java#util#Hashtable_E@, which supported this method prior to introduction of the Java Collections Framework.", "history": "Added in API level 1", "FullName": "public boolean contains (Object value)"}, "searchEntries(long,java.util.function.Function<java.util.Map.Entry<K,V>,?extendsU>)": {"Returns": [["U", "a non-null result from applying the given search function on each entry, or null if none"]], "Parameters": [["long", "long: the (estimated) number of elements needed for this operation to be executed in parallel"], ["@B_java#util#function#Function_E@", "Function: a function returning a non-null result on success, else null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a non-null result from applying the given search function on each entry, or null if none. Upon success, further element processing is suppressed and the results of any other parallel invocations of the search function are ignored.", "history": "Added in API level 24", "FullName": "public U searchEntries (long parallelismThreshold, Function<Entry<K, V>, ? extends U> searchFunction)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.concurrent.ConcurrentHashMap<K, V>", "ClassDesc": "A hash table supporting full concurrency of retrievals and high expected concurrency for updates. This class obeys the same functional specification as @B_java#util#Hashtable_E@, and includes versions of methods corresponding to each method of Hashtable. However, even though all operations are thread-safe, retrieval operations do not entail locking, and there is not any support for locking the entire table in a way that prevents all access. This class is fully interoperable with Hashtable in programs that rely on its thread safety but not on its synchronization details. Retrieval operations (including get) generally do not block, so may overlap with update operations (including put and remove). Retrievals reflect the results of the most recently completed update operations holding upon their onset. (More formally, an update operation for a given key bears a happens-before relation with any (non-null) retrieval for that key reporting the updated value.) For aggregate operations such as putAll and clear, concurrent retrievals may reflect insertion or removal of only some entries. Similarly, Iterators, Spliterators and Enumerations return elements reflecting the state of the hash table at some point at or since the creation of the iterator/enumeration. They do not throw @B_java#util#ConcurrentModificationException_E@. However, iterators are designed to be used by only one thread at a time. Bear in mind that the results of aggregate status methods including size, isEmpty, and containsValue are typically useful only when a map is not undergoing concurrent updates in other threads. Otherwise the results of these methods reflect transient states that may be adequate for monitoring or estimation purposes, but not for program control. The table is dynamically expanded when there are too many collisions (i.e., keys that have distinct hash codes but fall into the same slot modulo the table size), with the expected average effect of maintaining roughly two bins per mapping (corresponding to a 0.75 load factor threshold for resizing). There may be much variance around this average as mappings are added and removed, but overall, this maintains a commonly accepted time/space tradeoff for hash tables. However, resizing this or any other kind of hash table may be a relatively slow operation. When possible, it is a good idea to provide a size estimate as an optional initialCapacity constructor argument. An additional optional loadFactor constructor argument provides a further means of customizing initial table capacity by specifying the table density to be used in calculating the amount of space to allocate for the given number of elements. Also, for compatibility with previous versions of this class, constructors may optionally specify an expected concurrencyLevel as an additional hint for internal sizing. Note that using many keys with exactly the same hashCode() is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are @B_java#lang#Comparable_E@, this class may use comparison order among keys to help break ties. A @B_java#util#Set_E@ projection of a ConcurrentHashMap may be created (using @B_java#util#concurrent#ConcurrentHashMap#newKeySet_E@ or @B_java#util#concurrent#ConcurrentHashMap#newKeySet_E@), or viewed (using @B_java#util#concurrent#ConcurrentHashMap#keySet_E@ when only keys are of interest, and the mapped values are (perhaps transiently) not used or all take the same mapping value. A ConcurrentHashMap can be used as a scalable frequency map (a form of histogram or multiset) by using @B_java#util#concurrent#atomic#LongAdder_E@ values and initializing via @B_java#util#concurrent#ConcurrentHashMap#computeIfAbsent_E@. For example, to add a count to a ConcurrentHashMap<String,LongAdder> freqs, you can use freqs.computeIfAbsent(key, k -> new LongAdder()).increment(); This class and its views and iterators implement all of the optional methods of the @B_java#util#Map_E@ and @B_java#util#Iterator_E@ interfaces. Like @B_java#util#Hashtable_E@ but unlike @B_java#util#HashMap_E@, this class does not allow null to be used as a key or value. ConcurrentHashMaps support a set of sequential and parallel bulk operations that, unlike most @B_java#util#stream#Stream_E@ methods, are designed to be safely, and often sensibly, applied even with maps that are being concurrently updated by other threads; for example, when computing a snapshot summary of the values in a shared registry. There are three kinds of operation, each with four forms, accepting functions with keys, values, entries, and (key, value) pairs as arguments and/or return values. Because the elements of a ConcurrentHashMap are not ordered in any particular way, and may be processed in different orders in different parallel executions, the correctness of supplied functions should not depend on any ordering, or on any other objects or values that may transiently change while computation is in progress; and except for forEach actions, should ideally be side-effect-free. Bulk operations on @B_java#util#Map#Entry_E@ objects do not support method setValue. forEach: Performs a given action on each element. A variant form applies a given transformation on each element before performing the action. search: Returns the first available non-null result of applying a given function on each element; skipping further search when a result is found. reduce: Accumulates each element. The supplied reduction function cannot rely on ordering (more formally, it should be both associative and commutative). There are five variants: Plain reductions. (There is not a form of this method for (key, value) function arguments since there is no corresponding return type.) Mapped reductions that accumulate the results of a given function applied to each element. Reductions to scalar doubles, longs, and ints, using a given basis value. These bulk operations accept a parallelismThreshold argument. Methods proceed sequentially if the current map size is estimated to be less than the given threshold. Using a value of Long.MAX_VALUE suppresses all parallelism. Using a value of 1 results in maximal parallelism by partitioning into enough subtasks to fully utilize the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ that is used for all parallel computations. Normally, you would initially choose one of these extreme values, and then measure performance of using in-between values that trade off overhead versus throughput. The concurrency properties of bulk operations follow from those of ConcurrentHashMap: Any non-null result returned from get(key) and related access methods bears a happens-before relation with the associated insertion or update. The result of any bulk operation reflects the composition of these per-element relations (but is not necessarily atomic with respect to the map as a whole unless it is somehow known to be quiescent). Conversely, because keys and values in the map are never null, null serves as a reliable atomic indicator of the current lack of any result. To maintain this property, null serves as an implicit basis for all non-scalar reduction operations. For the double, long, and int versions, the basis should be one that, when combined with any other value, returns that other value (more formally, it should be the identity element for the reduction). Most common reductions have these properties; for example, computing a sum with basis 0 or a minimum with basis MAX_VALUE. Search and transformation functions provided as arguments should similarly return null to indicate the lack of any result (in which case it is not used). In the case of mapped reductions, this also enables transformations to serve as filters, returning null (or, in the case of primitive specializations, the identity basis) if the element should not be combined. You can create compound transformations and filterings by composing them yourself under this \"null means there is nothing there now\" rule before using them in search or reduce operations. Methods accepting and/or returning Entry arguments maintain key-value associations. They may be useful for example when finding the key for the greatest value. Note that \"plain\" Entry arguments can be supplied using new AbstractMap.SimpleEntry(k,v). Bulk operations may complete abruptly, throwing an exception encountered in the application of a supplied function. Bear in mind when handling such exceptions that other concurrently executing functions could also have thrown exceptions, or would have done so if the first exception had not occurred. Speedups for parallel compared to sequential forms are common but not guaranteed. Parallel operations involving brief functions on small maps may execute more slowly than sequential forms if the underlying work to parallelize the computation is more expensive than the computation itself. Similarly, parallelization may not lead to much actual parallelism if all processors are busy performing unrelated tasks. All arguments to all task methods must be non-null."}