{"Functions": {"getMockContext()": {"Returns": [["@B_android#test#IsolatedContext_E@", "The @B_android#test#IsolatedContext_E@ instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#test#IsolatedContext_E@ created by this class during initialization.", "history": "Added in API level 3", "FullName": "public IsolatedContext getMockContext ()"}, "getMockContentResolver()": {"Returns": [["@B_android#test#mock#MockContentResolver_E@", "A @B_android#test#mock#MockContentResolver_E@ instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#test#mock#MockContentResolver_E@ created by this class during initialization. You must use the methods of this resolver to access the provider under test.", "history": "Added in API level 3", "FullName": "public MockContentResolver getMockContentResolver ()"}, "tearDown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Tears down the environment for the test fixture. Calls @B_android#content#ContentProvider#shutdown_E@ on the @B_android#content#ContentProvider_E@ represented by mProvider.", "history": "Added in API level 3", "FullName": "protected void tearDown ()"}, "newResolverWithContentProviderFromSql(android.content.Context,java.lang.String,java.lang.Class<T>,java.lang.String,java.lang.String,int,java.lang.String)": {"Returns": [["@B_android#content#ContentResolver_E@", "ContentResolver A new @B_android#test#mock#MockContentResolver_E@ linked to the provider"]], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use as the basis of the IsolatedContext"], ["@B_java#lang#String_E@", "String: A string that is prepended to file, database, and directory names"], ["@B_java#lang#Class_E@", "Class: The type of the provider being tested"], ["@B_java#lang#String_E@", "String: The authority string to associated with the test provider"], ["@B_java#lang#String_E@", "String: The name assigned to the database"], ["int", "int: The version assigned to the database"], ["@B_java#lang#String_E@", "String: A string containing the SQL statements that are needed to create the desired database and its tables. The format is the same as that generated by the sqlite3 tool's .dump command."]], "Throws": [["", "java.lang.IllegalAccessException"], ["", "java.lang.InstantiationException"], ["@B_java#lang#IllegalAccessException_E@", ""], ["@B_java#lang#InstantiationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new content provider of the same type as that passed to the test case class, with an authority name set to the authority parameter, and using an SQLite database as the underlying data source. The SQL statement parameter is used to create the database. This method also creates a new @B_android#test#mock#MockContentResolver_E@ and adds the provider to it. Both the new provider and the new resolver are put into an @B_android#test#IsolatedContext_E@ that uses the targetContext parameter for file operations and a @B_android#test#mock#MockContext_E@ for everything else. The IsolatedContext prepends the filenamePrefix parameter to file, database, and directory names. This is a convenience method for creating a \"mock\" provider that can contain test data.", "history": "Added in API level 3", "FullName": "public static ContentResolver newResolverWithContentProviderFromSql (Context targetContext, String filenamePrefix, Class<T> providerClass, String authority, String databaseName, int databaseVersion, String sql)"}, "getProvider()": {"Returns": [["T", "T An instance of the provider class given as a parameter to the test case class."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the content provider created by this class in the @B_android#test#ProviderTestCase2#setUp_E@ method.", "history": "Added in API level 3", "FullName": "public T getProvider ()"}, "setUp()": {"Returns": [], "Parameters": [], "Throws": [["", "java.lang.Exception"], ["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets up the environment for the test fixture. Creates a new @B_android#test#mock#MockContentResolver_E@, a new IsolatedContext that isolates the provider's file operations, and a new instance of the provider under test within the isolated environment.", "history": "Added in API level 3", "FullName": "protected void setUp ()"}, "ProviderTestCase2(java.lang.Class<T>,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class: The class name of the provider under test"], ["@B_java#lang#String_E@", "String: The provider's authority string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor.", "history": "Added in API level 3", "FullName": "public ProviderTestCase2 (Class<T> providerClass, String providerAuthority)"}}, "Inheritance": ["@B_junit#framework#Assert_E@", "@B_junit#framework#TestCase_E@", "@B_android#test#AndroidTestCase_E@"], "ClassName": "@B_android#content#ContentProvider_E@", "ClassDesc": "This test case class provides a framework for testing a single @B_android#content#ContentProvider_E@ and for testing your app code with an isolated content provider. Instead of using the system map of providers that is based on the manifests of other applications, the test case creates its own internal map. It then uses this map to resolve providers given an authority. This allows you to inject test providers and to null out providers that you do not want to use. This test case also sets up the following mock objects: An @B_android#test#IsolatedContext_E@ that stubs out Context methods that might affect the rest of the running system, while allowing tests to do real file and database work. A @B_android#test#mock#MockContentResolver_E@ that provides the functionality of a regular content resolver, but uses @B_android#test#IsolatedContext_E@. It stubs out @B_android#content#ContentResolver#notifyChange_E@ to prevent the test from affecting the running system. An instance of the provider under test, running in an @B_android#test#IsolatedContext_E@. This framework is set up automatically by the base class' @B_android#test#ProviderTestCase2#setUp_E@ method. If you override this method, you must call the super method as the first statement in your override. In order for their tests to be run, concrete subclasses must provide their own constructor with no arguments. This constructor must call @B_android#test#ProviderTestCase2#ProviderTestCase2_E@ as its first operation. For more information on content provider testing, please see"}