{"Functions": {"toBigDecimal(android.icu.math.BigDecimal,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the given time scale"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale to a BigDecimal in the given time scale.", "history": "Added in API level 26", "FullName": "public static BigDecimal toBigDecimal (BigDecimal universalTime, int timeScale)"}, "getTimeScaleValue(int, int)": {"Returns": [["long", "- the value."]], "Parameters": [["int", "int: - the time scale"], ["int", "int: - a constant representing the value to get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a value associated with a particular time scale.", "history": "added in API level 26", "FullName": "public static long getTimeScaleValue (int scale, int value)"}, "from(long,int)": {"Returns": [["long", "The datetime converted to the universal time scale"]], "Parameters": [["long", "long: The long datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a long datetime from the given time scale to the universal time scale.", "history": "Added in API level 26", "FullName": "public static long from (long otherTime, int timeScale)"}, "toLong(long,int)": {"Returns": [["long", "The datetime converted to the given time scale"]], "Parameters": [["long", "long: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale stored as a BigDecimal to a long in the given time scale. Since this calculation requires a divide, we must round. The straight forward way to round by adding half of the divisor will push the sum out of range for values within have the divisor of the limits of the precision of a long. To get around this, we do the rounding like this: (universalTime - units + units/2) / units + 1 (i.e. we subtract units first to guarantee that we'll still be in range when we add units/2. We then need to add one to the quotent to make up for the extra subtraction. This simplifies to: (universalTime - units/2) / units - 1 For negative values to round away from zero, we need to flip the signs: (universalTime + units/2) / units + 1 Since we also need to subtract the epochOffset, we fold the +/- 1 into the offset value. (i.e. epochOffsetP1, epochOffsetM1.)", "history": "Added in API level 26", "FullName": "public static long toLong (long universalTime, int timeScale)"}, "toBigDecimal(long,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the given time scale"]], "Parameters": [["long", "long: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale to a BigDecimal in the given time scale.", "history": "Added in API level 26", "FullName": "public static BigDecimal toBigDecimal (long universalTime, int timeScale)"}, "toLong(long, int)": {"Returns": [["long", "The datetime converted to the given time scale"]], "Parameters": [["long", "long: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale stored as a BigDecimal to a long in the given time scale. Since this calculation requires a divide, we must round. The straight forward way to round by adding half of the divisor will push the sum out of range for values within have the divisor of the limits of the precision of a long. To get around this, we do the rounding like this: (universalTime - units + units/2) / units + 1 (i.e. we subtract units first to guarantee that we'll still be in range when we add units/2. We then need to add one to the quotent to make up for the extra subtraction. This simplifies to: (universalTime - units/2) / units - 1 For negative values to round away from zero, we need to flip the signs: (universalTime + units/2) / units + 1 Since we also need to subtract the epochOffset, we fold the +/- 1 into the offset value. (i.e. epochOffsetP1, epochOffsetM1.)", "history": "added in API level 26", "FullName": "public static long toLong (long universalTime, int timeScale)"}, "toBigDecimal(long, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the given time scale"]], "Parameters": [["long", "long: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale to a BigDecimal in the given time scale.", "history": "added in API level 26", "FullName": "public static BigDecimal toBigDecimal (long universalTime, int timeScale)"}, "toBigDecimal(android.icu.math.BigDecimal, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the given time scale"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The datetime in the universal time scale"], ["int", "int: The time scale to convert to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a datetime from the universal time scale to a BigDecimal in the given time scale.", "history": "added in API level 26", "FullName": "public static BigDecimal toBigDecimal (BigDecimal universalTime, int timeScale)"}, "bigDecimalFrom(long,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["long", "long: The long datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a long datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "Added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (long otherTime, int timeScale)"}, "getTimeScaleValue(int,int)": {"Returns": [["long", "- the value."]], "Parameters": [["int", "int: - the time scale"], ["int", "int: - a constant representing the value to get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a value associated with a particular time scale.", "history": "Added in API level 26", "FullName": "public static long getTimeScaleValue (int scale, int value)"}, "bigDecimalFrom(long, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["long", "long: The long datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a long datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (long otherTime, int timeScale)"}, "bigDecimalFrom(android.icu.math.BigDecimal,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a BigDecimal datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "Added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (BigDecimal otherTime, int timeScale)"}, "bigDecimalFrom(android.icu.math.BigDecimal, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a BigDecimal datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (BigDecimal otherTime, int timeScale)"}, "from(long, int)": {"Returns": [["long", "The datetime converted to the universal time scale"]], "Parameters": [["long", "long: The long datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a long datetime from the given time scale to the universal time scale.", "history": "added in API level 26", "FullName": "public static long from (long otherTime, int timeScale)"}, "bigDecimalFrom(double, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["double", "double: The double datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a double datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (double otherTime, int timeScale)"}, "bigDecimalFrom(double,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The datetime converted to the universal time scale"]], "Parameters": [["double", "double: The double datetime"], ["int", "int: The time scale to convert from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a double datetime from the given time scale to the universal time scale. All calculations are done using BigDecimal to guarantee that the value does not go out of range.", "history": "Added in API level 26", "FullName": "public static BigDecimal bigDecimalFrom (double otherTime, int timeScale)"}}, "Inheritance": [], "ClassName": "android.icu.util.UniversalTimeScale", "ClassDesc": "There are quite a few different conventions for binary datetime, depending on different platforms and protocols. Some of these have severe drawbacks. For example, people using Unix time (seconds since Jan 1, 1970, usually in a 32-bit integer) think that they are safe until near the year 2038. But cases can and do arise where arithmetic manipulations causes serious problems. Consider the computation of the average of two datetimes, for example: if one calculates them with averageTime = (time1 + time2)/2, there will be overflow even with dates beginning in 2004. Moreover, even if these problems don't occur, there is the issue of conversion back and forth between different systems. Binary datetimes differ in a number of ways: the datatype, the unit, and the epoch (origin). We refer to these as time scales. ICU implements a universal time scale that is similar to the .NET framework's System.DateTime. The universal time scale is a 64-bit integer that holds ticks since midnight, January 1st, 0001. (One tick is 100 nanoseconds.) Negative values are supported. This has enough range to guarantee that calculations involving dates around the present are safe. The universal time scale always measures time according to the proleptic Gregorian calendar. That is, the Gregorian calendar's leap year rules are used for all times, even before 1582 when it was introduced. (This is different from the default ICU calendar which switches from the Julian to the Gregorian calendar in 1582. See GregorianCalendar.setGregorianChange() and ucal_setGregorianChange().) ICU provides conversion functions to and from all other major time scales, allowing datetimes in any time scale to be converted to the universal time scale, safely manipulated, and converted back to any other datetime time scale. For more details and background, see the"}