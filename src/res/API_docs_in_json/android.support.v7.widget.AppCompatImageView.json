{"Functions": {"setImageResource(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#ImageView#setImageResource_E@"], "Permissions": [], "Description": "Sets a drawable as the content of this ImageView. Allows the use of vector drawables when running on older versions of the platform.", "history": "", "FullName": "void setImageResource (int resId)"}, "setImageURI(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: the Uri of an image, or null to clear the content"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the content of this ImageView to the specified Uri. Note that you use this method to load images from a local Uri only. To learn how to display images from a remote Uri see: This does Bitmap reading and decoding on the UI thread, which can cause a latency hiccup. If that's a concern, consider using @B_android#widget#ImageView#setImageDrawable_E@ or @B_android#widget#ImageView#setImageBitmap_E@ and @B_android#graphics#BitmapFactory_E@ instead. On devices running SDK < 24, this method will fail to apply correct density scaling to images loaded from @B_android#content#ContentResolver#SCHEME_CONTENT_E@ and @B_android#content#ContentResolver#SCHEME_FILE_E@ schemes. Applications running on devices with SDK >= 24 targetSdkVersion in their manifest as 24 or above for density scaling to be applied to images loaded from these schemes.", "history": "", "FullName": "void setImageURI (Uri uri)"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in @B_android#graphics#Canvas_E@ necessitates that a View return true if it uses the methods internally without passing the @B_android#graphics#Canvas#CLIP_TO_LAYER_SAVE_FLAG_E@. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "", "FullName": "boolean hasOverlappingRendering ()"}, "setBackgroundResource(int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the background to a given resource. The resource should refer to a Drawable object or 0 to remove the background.", "history": "", "FullName": "void setBackgroundResource (int resId)"}, "setImageIcon(android.graphics.drawable.Icon)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Icon_E@", "Icon: an Icon holding the desired image, or null to clear the content"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the content of this ImageView to the specified Icon. Depending on the Icon type, this may do Bitmap reading and decoding on the UI thread, which can cause UI jank. If that's a concern, consider using @B_android#graphics#drawable#Icon#loadDrawableAsync_E@ and then @B_android#widget#ImageView#setImageDrawable_E@ instead.", "history": "", "FullName": "void setImageIcon (Icon icon)"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function.", "history": "", "FullName": "void drawableStateChanged ()"}, "setImageBitmap(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a Bitmap as the content of this ImageView.", "history": "", "FullName": "void setImageBitmap (Bitmap bm)"}, "AppCompatImageView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "AppCompatImageView (Context context)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#widget#ImageView_E@"], "ClassName": "android.support.v7.widget.AppCompatImageView", "ClassDesc": "A https:##developer#android#com@B_android#widget#ImageView_E@ which supports compatible features on older versions of the platform, including: Allows dynamic tint of its background via the background tint methods in @B_android#support#v4#view#ViewCompat_E@. Allows setting of the background tint using @B_android#support#v7#appcompat#R#attr#backgroundTint_E@ and @B_android#support#v7#appcompat#R#attr#backgroundTintMode_E@. Allows dynamic tint of its image via the image tint methods in @B_android#support#v4#widget#ImageViewCompat_E@. Allows setting of the image tint using @B_android#support#v7#appcompat#R#attr#tint_E@ and @B_android#support#v7#appcompat#R#attr#tintMode_E@. This will automatically be used when you use https:##developer#android#com@B_android#widget#ImageView_E@ in your layouts and the top-level activity / dialog is provided by"}