{"Functions": {"skip(long)": {"Returns": [["long", "the actual number of bytes skipped"]], "Parameters": [["long", "long: number of bytes to be skipped"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or if this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Skips over and discards data from the input stream. This method may block until the specified number of bytes are read and skipped. Note: While n is given as a long, the maximum number of bytes which can be skipped is Integer.MAX_VALUE.", "history": "Added in API level 9", "FullName": "public long skip (long n)"}, "DeflaterInputStream(java.io.InputStream,java.util.zip.Deflater)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: input stream to read the uncompressed data to"], ["@B_java#util#zip#Deflater_E@", "Deflater: compressor (\"deflater\") for this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if in or defl is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with the specified compressor and a default buffer size.", "history": "Added in API level 9", "FullName": "public DeflaterInputStream (InputStream in, Deflater defl)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "always thrown"]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public void reset ()"}, "read()": {"Returns": [["int", "a single byte of compressed data, or -1 if the end of the uncompressed input stream is reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or if this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single byte of compressed data from the input stream. This method will block until some input can be read and compressed.", "history": "Added in API level 9", "FullName": "public int read ()"}, "DeflaterInputStream(java.io.InputStream,java.util.zip.Deflater,int)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: input stream to read the uncompressed data to"], ["@B_java#util#zip#Deflater_E@", "Deflater: compressor (\"deflater\") for this stream"], ["int", "int: compression buffer size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bufLen <= 0"], ["@B_java#lang#NullPointerException_E@", "if in or defl is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with the specified compressor and buffer size.", "history": "Added in API level 9", "FullName": "public DeflaterInputStream (InputStream in, Deflater defl, int bufLen)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this input stream and its underlying input stream, discarding any pending uncompressed data.", "history": "Added in API level 9", "FullName": "public void close ()"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: maximum bytes that can be read before invalidating the position marker"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public void mark (int limit)"}, "available()": {"Returns": [["int", "zero after the end of the underlying input stream has been reached, otherwise always returns 1"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or if this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns 0 after EOF has been reached, otherwise always return 1. Programs should not count on this method to return the actual number of bytes that could be read without blocking", "history": "Added in API level 9", "FullName": "public int available ()"}, "read(byte[],int,int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the uncompressed input stream is reached"]], "Parameters": [["byte[]", "byte: buffer into which the data is read"], ["int", "int: starting offset of the data within b"], ["int", "int: maximum number of compressed bytes to read into b"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if len > b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs or if this input stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Reads compressed data into a byte array. This method will block until some input can be read and compressed.", "history": "Added in API level 9", "FullName": "public int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the actual number of bytes read, or -1 if the end of the uncompressed input stream is reached"]], "Parameters": [["byte[]", "byte: buffer into which the data is read"], ["int", "int: starting offset of the data within b"], ["int", "int: maximum number of compressed bytes to read into b"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if len > b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs or if this input stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Reads compressed data into a byte array. This method will block until some input can be read and compressed.", "history": "added in API level 9", "FullName": "public int read (byte[] b, int off, int len)"}, "DeflaterInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: input stream to read the uncompressed data to"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if in is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new input stream with a default compressor and buffer size.", "history": "Added in API level 9", "FullName": "public DeflaterInputStream (InputStream in)"}, "markSupported()": {"Returns": [["boolean", "false, always"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns false because this input stream does not support the @B_java#util#zip#DeflaterInputStream#mark_E@ and @B_java#util#zip#DeflaterInputStream#reset_E@ methods.", "history": "Added in API level 9", "FullName": "public boolean markSupported ()"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.util.zip.DeflaterInputStream", "ClassDesc": "Implements an input stream filter for compressing data in the \"deflate\" compression format."}