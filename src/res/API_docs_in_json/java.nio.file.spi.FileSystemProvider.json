{"Functions": {"copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to copy"], ["@B_java#nio#file#Path_E@", "Path: the path to the target file"], ["@B_java#nio#file#CopyOption_E@", "CopyOption: options specifying how the copy should be done"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains a copy option that is not supported"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the target file exists but cannot be replaced because the REPLACE_EXISTING option is not specified (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "the REPLACE_EXISTING option is specified but the file cannot be replaced because it is a non-empty directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the source file, the @B_java#lang#SecurityManager#checkWrite_E@ is invoked to check write access to the target file. If a symbolic link is copied the security manager is invoked to check @B_java#nio#file#LinkPermission_E@(\"symbolic\")."]], "SeeAlso": [], "Permissions": [], "Description": "Copy a file to a target file. This method works in exactly the manner specified by the @B_java#nio#file#Files#copy_E@ method except that both the source and target paths must be associated with this provider.", "history": "Added in API level 26", "FullName": "public abstract void copy (Path source, Path target, CopyOption... options)"}, "isSameFile(java.nio.file.Path, java.nio.file.Path)": {"Returns": [["boolean", "true if, and only if, the two paths locate the same file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: one path to the file"], ["@B_java#nio#file#Path_E@", "Path: the other path"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to both files."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if two paths locate the same file. This method works in exactly the manner specified by the @B_java#nio#file#Files#isSameFile_E@ method.", "history": "added in API level 26", "FullName": "public abstract boolean isSameFile (Path path, Path path2)"}, "getPath(java.net.URI)": {"Returns": [["@B_java#nio#file#Path_E@", "The resulting Path"]], "Parameters": [["@B_java#net#URI_E@", "URI: The URI to convert"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the URI scheme does not identify this provider or other preconditions on the uri parameter do not hold"], ["@B_java#nio#file#FileSystemNotFoundException_E@", "The file system, identified by the URI, does not exist and cannot be created automatically"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission."]], "SeeAlso": [], "Permissions": [], "Description": "Return a Path object by converting the given @B_java#net#URI_E@. The resulting Path is associated with a @B_java#nio#file#FileSystem_E@ that already exists or is constructed automatically. The exact form of the URI is file system provider dependent. In the case of the default provider, the URI scheme is \"file\" and the given URI has a non-empty path component, and undefined query, and fragment components. The resulting Path is associated with the default @B_java#nio#file#FileSystems#getDefault_E@ FileSystem. If a security manager is installed then a provider implementation may require to check a permission. In the case of the @B_java#nio#file#FileSystems#getDefault_E@ file system, no permission check is required.", "history": "Added in API level 26", "FullName": "public abstract Path getPath (URI uri)"}, "newAsynchronousFileChannel(java.nio.file.Path,java.util.Set<?extendsjava.nio.file.OpenOption>,java.util.concurrent.ExecutorService,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#channels#AsynchronousFileChannel_E@", "a new asynchronous file channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path of the file to open or create"], ["@B_java#util#Set_E@", "Set: options specifying how the file is opened"], ["@B_java#util#concurrent#ExecutorService_E@", "ExecutorService: the thread pool or null to associate the channel with the default thread pool"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "If this provider that does not support creating asynchronous file channels, or an unsupported open option or file attribute is specified"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default file system, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access if the file is opened for writing"]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file for reading and/or writing, returning an asynchronous file channel to access the file. This method works in exactly the manner specified by the @B_java#nio#channels#AsynchronousFileChannel#open_E@ method. A provider that does not support all the features required to construct an asynchronous file channel throws UnsupportedOperationException. The default provider is required to support the creation of asynchronous file channels. When not overridden, the default implementation of this method throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public AsynchronousFileChannel newAsynchronousFileChannel (Path path, Set<? extends OpenOption> options, ExecutorService executor, FileAttribute...<?> attrs)"}, "newFileSystem(java.net.URI,java.util.Map<java.lang.String,?>)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "A new file system"]], "Parameters": [["@B_java#net#URI_E@", "URI: URI reference"], ["@B_java#util#Map_E@", "Map: A map of provider specific properties to configure the file system; may be empty"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the pre-conditions for the uri parameter aren't met, or the env parameter does not contain properties required by the provider, or a property value is invalid"], ["@B_java#io#IOException_E@", "An I/O error occurs creating the file system"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission required by the file system provider implementation"], ["@B_java#nio#file#FileSystemAlreadyExistsException_E@", "If the file system has already been created"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new FileSystem object identified by a URI. This method is invoked by the @B_java#nio#file#FileSystems#newFileSystem_E@ method to open a new file system identified by a URI. The uri parameter is an absolute, hierarchical URI, with a scheme equal (without regard to case) to the scheme supported by this provider. The exact form of the URI is highly provider dependent. The env parameter is a map of provider specific properties to configure the file system. This method throws @B_java#nio#file#FileSystemAlreadyExistsException_E@ if the file system already exists because it was previously created by an invocation of this method. Once a file system is @B_java#nio#file#FileSystem#close_E@ it is provider-dependent if the provider allows a new file system to be created with the same URI as a file system it previously created.", "history": "Added in API level 26", "FullName": "public abstract FileSystem newFileSystem (URI uri, Map<String, ?> env)"}, "getScheme()": {"Returns": [["@B_java#lang#String_E@", "The URI scheme"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the URI scheme that identifies this provider.", "history": "Added in API level 26", "FullName": "public abstract String getScheme ()"}, "createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the directory to create"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the directory"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a directory could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs or the parent directory does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the new directory."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new directory. This method works in exactly the manner specified by the @B_java#nio#file#Files#createDirectory_E@ method.", "history": "Added in API level 26", "FullName": "public abstract void createDirectory (Path dir, FileAttribute...<?> attrs)"}, "readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)": {"Returns": [["@B_java#util#Map_E@", "a map of the attributes returned; may be empty. The map's keys are the attribute names, its values are the attribute values"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#String_E@", "String: the attributes to read"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available"], ["@B_java#lang#IllegalArgumentException_E@", "if no attributes are specified or an unrecognized attributes is specified"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a set of file attributes as a bulk operation. This method works in exactly the manner specified by the @B_java#nio#file#Files#readAttributes_E@ method.", "history": "Added in API level 26", "FullName": "public abstract Map<String, Object> readAttributes (Path path, String attributes, LinkOption... options)"}, "checkAccess(java.nio.file.Path,java.nio.file.AccessMode...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to check"], ["@B_java#nio#file#AccessMode_E@", "AccessMode: The access modes to check; may have zero elements"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "an implementation is required to support checking for READ, WRITE, and EXECUTE access. This exception is specified to allow for the Access enum to be extended in future releases."], ["@B_java#nio#file#NoSuchFileException_E@", "if a file does not exist (optional specific exception)"], ["@B_java#nio#file#AccessDeniedException_E@", "the requested access would be denied or the access cannot be determined because the Java virtual machine has insufficient privileges or other reasons. (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ is invoked when checking read access to the file or only the existence of the file, the @B_java#lang#SecurityManager#checkWrite_E@ is invoked when checking write access to the file, and @B_java#lang#SecurityManager#checkExec_E@ is invoked when checking execute access."]], "SeeAlso": [], "Permissions": [], "Description": "Checks the existence, and optionally the accessibility, of a file. This method may be used by the @B_java#nio#file#Files#isReadable_E@, @B_java#nio#file#Files#isWritable_E@ and @B_java#nio#file#Files#isExecutable_E@ methods to check the accessibility of a file. This method checks the existence of a file and that this Java virtual machine has appropriate privileges that would allow it access the file according to all of access modes specified in the modes parameter as follows: If the modes parameter is of length zero, then the existence of the file is checked. This method follows symbolic links if the file referenced by this object is a symbolic link. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. To determine the effective access to a file may require access to several attributes and so in some implementations this method may not be atomic with respect to other file system operations.", "history": "Added in API level 26", "FullName": "public abstract void checkAccess (Path path, AccessMode... modes)"}, "newFileChannel(java.nio.file.Path,java.util.Set<?extendsjava.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "a new file channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path of the file to open or create"], ["@B_java#util#Set_E@", "Set: options specifying how the file is opened"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "If this provider that does not support creating file channels, or an unsupported open option or file attribute is specified"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default file system, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access if the file is opened for writing"]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file for reading and/or writing, returning a file channel to access the file. This method works in exactly the manner specified by the @B_java#nio#channels#FileChannel#open_E@ method. A provider that does not support all the features required to construct a file channel throws UnsupportedOperationException. The default provider is required to support the creation of file channels. When not overridden, the default implementation throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public FileChannel newFileChannel (Path path, Set<? extends OpenOption> options, FileAttribute...<?> attrs)"}, "newByteChannel(java.nio.file.Path,java.util.Set<?extendsjava.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#channels#SeekableByteChannel_E@", "a new seekable byte channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open or create"], ["@B_java#util#Set_E@", "Set: options specifying how the file is opened"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file of that name already exists and the @B_java#nio#file#StandardOpenOption#CREATE_NEW_E@ option is specified (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the path if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the path if the file is opened for writing. The @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access if the file is opened with the DELETE_ON_CLOSE option."]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file, returning a seekable byte channel to access the file. This method works in exactly the manner specified by the @B_java#nio#file#Files#newByteChannel_E@ method.", "history": "Added in API level 26", "FullName": "public abstract SeekableByteChannel newByteChannel (Path path, Set<? extends OpenOption> options, FileAttribute...<?> attrs)"}, "newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#OutputStream_E@", "a new output stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open or create"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if options contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file. The @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access if the file is opened with the DELETE_ON_CLOSE option."]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file, returning an output stream that may be used to write bytes to the file. This method works in exactly the manner specified by the @B_java#nio#file#Files#newOutputStream_E@ method. The default implementation of this method opens a channel to the file as if by invoking the @B_java#nio#file#spi#FileSystemProvider#newByteChannel_E@ method and constructs a stream that writes bytes to the channel. This method should be overridden where appropriate.", "history": "Added in API level 26", "FullName": "public OutputStream newOutputStream (Path path, OpenOption... options)"}, "installedProviders()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list of the installed file system providers. The list contains at least one element, that is the default file system provider"]], "Parameters": [], "Throws": [["@B_java#util#ServiceConfigurationError_E@", "When an error occurs while loading a service provider"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of the installed file system providers. The first invocation of this method causes the default provider to be initialized (if not already initialized) and loads any other installed providers as described by the @B_java#nio#file#FileSystems_E@ class.", "history": "Added in API level 26", "FullName": "public static List<FileSystemProvider> installedProviders ()"}, "FileSystemProvider()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"fileSystemProvider\")"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class. During construction a provider may safely access files associated with the default provider but care needs to be taken to avoid circular loading of other installed providers. If circular loading of installed providers is detected then an unspecified error is thrown.", "history": "Added in API level 26", "FullName": "protected FileSystemProvider ()"}, "deleteIfExists(java.nio.file.Path)": {"Returns": [["boolean", "true if the file was deleted by this method; false if the file could not be deleted because it did not exist"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to delete"]], "Throws": [["@B_java#nio#file#DirectoryNotEmptyException_E@", "if the file is a directory and could not otherwise be deleted because the directory is not empty (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes a file if it exists. This method works in exactly the manner specified by the @B_java#nio#file#Files#deleteIfExists_E@ method. The default implementation of this method simply invokes @B_java#nio#file#spi#FileSystemProvider#delete_E@ ignoring the NoSuchFileException when the file does not exist. It may be overridden where appropriate.", "history": "Added in API level 26", "FullName": "public boolean deleteIfExists (Path path)"}, "createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path of the symbolic link to create"], ["@B_java#nio#file#Path_E@", "Path: the target of the symbolic link"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: the array of attributes to set atomically when creating the symbolic link"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support symbolic links or the array contains an attribute that cannot be set atomically when creating the symbolic link"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file with the name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"symbolic\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the path of the symbolic link."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a symbolic link to a target. This method works in exactly the manner specified by the @B_java#nio#file#Files#createSymbolicLink_E@ method. The default implementation of this method throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public void createSymbolicLink (Path link, Path target, FileAttribute...<?> attrs)"}, "getFileStore(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#FileStore_E@", "the file store where the file is stored"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file, and in addition it checks @B_java#lang#RuntimePermission_E@ (\"getFileStoreAttributes\")"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#nio#file#FileStore_E@ representing the file store where a file is located. This method works in exactly the manner specified by the @B_java#nio#file#Files#getFileStore_E@ method.", "history": "Added in API level 26", "FullName": "public abstract FileStore getFileStore (Path path)"}, "readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)": {"Returns": [["A", "the file attributes"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Class_E@", "Class: the Class of the file attributes required to read"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if an attributes of the given type are not supported"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a file's attributes as a bulk operation. This method works in exactly the manner specified by the @B_java#nio#file#Files#readAttributes_E@ method.", "history": "Added in API level 26", "FullName": "public abstract A readAttributes (Path path, Class<A> type, LinkOption... options)"}, "newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#InputStream_E@", "a new input stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if an invalid combination of options is specified"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a file, returning an input stream to read from the file. This method works in exactly the manner specified by the @B_java#nio#file#Files#newInputStream_E@ method. The default implementation of this method opens a channel to the file as if by invoking the @B_java#nio#file#spi#FileSystemProvider#newByteChannel_E@ method and constructs a stream that reads bytes from the channel. This method should be overridden where appropriate.", "history": "Added in API level 26", "FullName": "public InputStream newInputStream (Path path, OpenOption... options)"}, "newFileSystem(java.nio.file.Path,java.util.Map<java.lang.String,?>)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "A new file system"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the file"], ["@B_java#util#Map_E@", "Map: A map of provider specific properties to configure the file system; may be empty"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this provider does not support access to the contents as a file system or it does not recognize the file type of the given file"], ["@B_java#lang#IllegalArgumentException_E@", "If the env parameter does not contain properties required by the provider, or a property value is invalid"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new FileSystem to access the contents of a file as a file system. This method is intended for specialized providers of pseudo file systems where the contents of one or more files is treated as a file system. The env parameter is a map of provider specific properties to configure the file system. If this provider does not support the creation of such file systems or if the provider does not recognize the file type of the given file then it throws UnsupportedOperationException. The default implementation of this method throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public FileSystem newFileSystem (Path path, Map<String, ?> env)"}, "getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)": {"Returns": [["V", "a file attribute view of the specified type, or null if the attribute view type is not available"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Class_E@", "Class: the Class object corresponding to the file attribute view"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a file attribute view of a given type. This method works in exactly the manner specified by the @B_java#nio#file#Files#getFileAttributeView_E@ method.", "history": "Added in API level 26", "FullName": "public abstract V getFileAttributeView (Path path, Class<V> type, LinkOption... options)"}, "move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to move"], ["@B_java#nio#file#Path_E@", "Path: the path to the target file"], ["@B_java#nio#file#CopyOption_E@", "CopyOption: options specifying how the move should be done"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains a copy option that is not supported"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the target file exists but cannot be replaced because the REPLACE_EXISTING option is not specified (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "the REPLACE_EXISTING option is specified but the file cannot be replaced because it is a non-empty directory (optional specific exception)"], ["@B_java#nio#file#AtomicMoveNotSupportedException_E@", "if the options array contains the ATOMIC_MOVE option but the file cannot be moved as an atomic file system operation."], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to both the source and target file."]], "SeeAlso": [], "Permissions": [], "Description": "Move or rename a file to a target file. This method works in exactly the manner specified by the @B_java#nio#file#Files#move_E@ method except that both the source and target paths must be associated with this provider.", "history": "Added in API level 26", "FullName": "public abstract void move (Path source, Path target, CopyOption... options)"}, "newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<?superjava.nio.file.Path>)": {"Returns": [["@B_java#nio#file#DirectoryStream_E@", "a new and open DirectoryStream object"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the directory"], ["@B_java#nio#file#DirectoryStream#Filter_E@", "Filter: the directory stream filter"]], "Throws": [["@B_java#nio#file#NotDirectoryException_E@", "if the file could not otherwise be opened because it is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a directory, returning a DirectoryStream to iterate over the entries in the directory. This method works in exactly the manner specified by the @B_java#nio#file#Files#newDirectoryStream_E@ method.", "history": "Added in API level 26", "FullName": "public abstract DirectoryStream<Path> newDirectoryStream (Path dir, Filter<? super Path> filter)"}, "createLink(java.nio.file.Path,java.nio.file.Path)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the link (directory entry) to create"], ["@B_java#nio#file#Path_E@", "Path: a path to an existing file"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support adding an existing file to a directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the entry could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"hard\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to either the link or the existing file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new link (directory entry) for an existing file. This method works in exactly the manner specified by the @B_java#nio#file#Files#createLink_E@ method. The default implementation of this method throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public void createLink (Path link, Path existing)"}, "isHidden(java.nio.file.Path)": {"Returns": [["boolean", "true if the file is considered hidden"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to test"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not a file is considered hidden. This method works in exactly the manner specified by the @B_java#nio#file#Files#isHidden_E@ method. This method is invoked by the @B_java#nio#file#Files#isHidden_E@ method.", "history": "Added in API level 26", "FullName": "public abstract boolean isHidden (Path path)"}, "delete(java.nio.file.Path)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to delete"]], "Throws": [["@B_java#nio#file#NoSuchFileException_E@", "if the file does not exist (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "if the file is a directory and could not otherwise be deleted because the directory is not empty (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes a file. This method works in exactly the manner specified by the @B_java#nio#file#Files#delete_E@ method.", "history": "Added in API level 26", "FullName": "public abstract void delete (Path path)"}, "isSameFile(java.nio.file.Path,java.nio.file.Path)": {"Returns": [["boolean", "true if, and only if, the two paths locate the same file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: one path to the file"], ["@B_java#nio#file#Path_E@", "Path: the other path"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to both files."]], "SeeAlso": [], "Permissions": [], "Description": "Tests if two paths locate the same file. This method works in exactly the manner specified by the @B_java#nio#file#Files#isSameFile_E@ method.", "history": "Added in API level 26", "FullName": "public abstract boolean isSameFile (Path path, Path path2)"}, "readSymbolicLink(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "The target of the symbolic link"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the symbolic link"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support symbolic links"], ["@B_java#nio#file#NotLinkException_E@", "if the target could otherwise not be read because the file is not a symbolic link (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it checks that FilePermission has been granted with the \"readlink\" action to read the link."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the target of a symbolic link. This method works in exactly the manner specified by the @B_java#nio#file#Files#readSymbolicLink_E@ method. The default implementation of this method throws UnsupportedOperationException.", "history": "Added in API level 26", "FullName": "public Path readSymbolicLink (Path link)"}, "createLink(java.nio.file.Path, java.nio.file.Path)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the link (directory entry) to create"], ["@B_java#nio#file#Path_E@", "Path: a path to an existing file"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support adding an existing file to a directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the entry could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"hard\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to either the link or the existing file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new link (directory entry) for an existing file. This method works in exactly the manner specified by the @B_java#nio#file#Files#createLink_E@ method. The default implementation of this method throws UnsupportedOperationException.", "history": "added in API level 26", "FullName": "public void createLink (Path link, Path existing)"}, "getFileSystem(java.net.URI)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "The file system"]], "Parameters": [["@B_java#net#URI_E@", "URI: URI reference"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the pre-conditions for the uri parameter aren't met"], ["@B_java#nio#file#FileSystemNotFoundException_E@", "If the file system does not exist"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an existing FileSystem created by this provider. This method returns a reference to a FileSystem that was created by invoking the @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method. File systems created the @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method are not returned by this method. The file system is identified by its URI. Its exact form is highly provider dependent. In the case of the default provider the URI's path component is \"/\" and the authority, query and fragment components are undefined (Undefined components are represented by null). Once a file system created by this provider is @B_java#nio#file#FileSystem#close_E@ it is provider-dependent if this method returns a reference to the closed file system or throws @B_java#nio#file#FileSystemNotFoundException_E@. If the provider allows a new file system to be created with the same URI as a file system it previously created then this method throws the exception if invoked after the file system is closed (and before a new instance is created by the @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method). If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system. In the case of the @B_java#nio#file#FileSystems#getDefault_E@ file system, no permission check is required.", "history": "Added in API level 26", "FullName": "public abstract FileSystem getFileSystem (URI uri)"}, "setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#String_E@", "String: the attribute to set"], ["@B_java#lang#Object_E@", "Object: the attribute value"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available"], ["@B_java#lang#IllegalArgumentException_E@", "if the attribute name is not specified, or is not recognized, or the attribute value is of the correct type but has an inappropriate value"], ["@B_java#lang#ClassCastException_E@", "If the attribute value is not of the expected type or is a collection containing elements that are not of the expected type"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file. If this method is invoked to set security sensitive attributes then the security manager may be invoked to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a file attribute. This method works in exactly the manner specified by the @B_java#nio#file#Files#setAttribute_E@ method.", "history": "Added in API level 26", "FullName": "public abstract void setAttribute (Path path, String attribute, Object value, LinkOption... options)"}}, "Inheritance": [], "ClassName": "java.nio.file.spi.FileSystemProvider", "ClassDesc": "Service-provider class for file systems. The methods defined by the @B_java#nio#file#Files_E@ class will typically delegate to an instance of this class. A file system provider is a concrete implementation of this class that implements the abstract methods defined by this class. A provider is identified by a URI @B_java#nio#file#spi#FileSystemProvider#getScheme_E@. The default provider is identified by the URI scheme \"file\". It creates the @B_java#nio#file#FileSystem_E@ that provides access to the file systems accessible to the Java virtual machine. The @B_java#nio#file#FileSystems_E@ class defines how file system providers are located and loaded. The default provider is typically a system-default provider but may be overridden if the system property java.nio.file.spi.DefaultFileSystemProvider is set. In that case, the provider has a one argument constructor whose formal parameter type is FileSystemProvider. All other providers have a zero argument constructor that initializes the provider. A provider is a factory for one or more @B_java#nio#file#FileSystem_E@ instances. Each file system is identified by a URI where the URI's scheme matches the provider's @B_java#nio#file#spi#FileSystemProvider#getScheme_E@. The default file system, for example, is identified by the URI \"file:///\". A memory-based file system, for example, may be identified by a URI such as \"memory:///?name=logfs\". The @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method may be used to create a file system, and the @B_java#nio#file#spi#FileSystemProvider#getFileSystem_E@ method may be used to obtain a reference to an existing file system created by the provider. Where a provider is the factory for a single file system then it is provider dependent if the file system is created when the provider is initialized, or later when the newFileSystem method is invoked. In the case of the default provider, the FileSystem is created when the provider is initialized. All of the methods in this class are safe for use by multiple concurrent threads."}