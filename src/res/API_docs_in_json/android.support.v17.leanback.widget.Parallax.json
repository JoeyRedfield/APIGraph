{"Functions": {"getProperties()": {"Returns": [["@B_java#util#List_E@", "A unmodifiable list of properties."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.3.0", "FullName": "List<PropertyT> getProperties ()"}, "getEffects()": {"Returns": [["@B_java#util#List_E@", "A list of @B_android#support#v17#leanback#widget#ParallaxEffect_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of @B_android#support#v17#leanback#widget#ParallaxEffect_E@ object which defines rules to perform mapping to multiple @B_android#support#v17#leanback#widget#ParallaxTarget_E@s.", "history": "added in version 25.3.0", "FullName": "List<ParallaxEffect> getEffects ()"}, "Parallax()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.3.0", "FullName": "Parallax ()"}, "getMaxValue()": {"Returns": [["float", "Size of parent visible area."]], "Parameters": [], "Throws": [], "SeeAlso": ["_E@"], "Permissions": [], "Description": "Return the max value which is typically size of parent visible area, e.g. RecyclerView's height if we are tracking Y position of a child. The size can be used to calculate marker value using the provided fraction of FloatPropertyMarkerValue.", "history": "added in version 25.3.0", "FullName": "float getMaxValue ()"}, "createProperty(java.lang.String, int)": {"Returns": [["PropertyT", "Newly created Property object."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int: Index of the property in this Parallax object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new Property object. App does not directly call this method. See @B_android#support#v17#leanback#widget#Parallax#addProperty_E@.", "history": "added in version 25.3.0", "FullName": "PropertyT createProperty (String name, int index)"}, "updateValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update property values and perform @B_android#support#v17#leanback#widget#ParallaxEffect_E@s. Subclass may override and call super.updateValues() after updated properties values.", "history": "added in version 25.3.0", "FullName": "void updateValues ()"}, "addProperty(java.lang.String)": {"Returns": [["PropertyT", "Newly created Property object."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the property."]], "Throws": [], "SeeAlso": ["@B_android#support#v17#leanback#widget#Parallax#createProperty_E@"], "Permissions": [], "Description": "Add a new IntProperty in the Parallax object. App may override @B_android#support#v17#leanback#widget#Parallax#createProperty_E@.", "history": "added in version 25.3.0", "FullName": "PropertyT addProperty (String name)"}, "removeAllEffects()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all @B_android#support#v17#leanback#widget#ParallaxEffect_E@ objects.", "history": "added in version 25.3.0", "FullName": "void removeAllEffects ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "https:##developer#android#com@B_android#util#Property_E@", "ClassDesc": "Parallax tracks a list of dynamic https:##developer#android#com@B_android#util#Property_E@s typically representing foreground UI element positions on screen. Parallax keeps a list of @B_android#support#v17#leanback#widget#ParallaxEffect_E@ objects which define rules to mapping property values to @B_android#support#v17#leanback#widget#ParallaxTarget_E@. Example: // when Property \"var1\" changes from 15 to max value, perform parallax effect to // change myView's translationY from 0 to 100. Parallax parallax = new Parallax() {...}; p1 = parallax.addProperty(\"var1\"); parallax.addEffect(p1.at(15), p1.atMax()) .target(myView, PropertyValuesHolder.ofFloat(\"translationY\", 0, 100)); To create a @B_android#support#v17#leanback#widget#ParallaxEffect_E@, user calls @B_android#support#v17#leanback#widget#Parallax#addEffect_E@ with a list of @B_android#support#v17#leanback#widget#Parallax#PropertyMarkerValue_E@ which defines the range of @B_android#support#v17#leanback#widget#Parallax#IntProperty_E@ or @B_android#support#v17#leanback#widget#Parallax#FloatProperty_E@. Then user adds @B_android#support#v17#leanback#widget#ParallaxTarget_E@ into @B_android#support#v17#leanback#widget#ParallaxEffect_E@. App may subclass @B_android#support#v17#leanback#widget#Parallax#IntProperty_E@ or @B_android#support#v17#leanback#widget#Parallax#FloatProperty_E@ to supply additional information about how to retrieve Property value. @B_android#support#v17#leanback#widget#RecyclerViewParallax_E@ is a great example of Parallax implementation tracking child view positions on screen. Restrictions of properties FloatProperty and IntProperty cannot be mixed in one Parallax Values must be in ascending order. If the UI element is unknown above screen, use UNKNOWN_BEFORE. if the UI element is unknown below screen, use UNKNOWN_AFTER. UNKNOWN_BEFORE and UNKNOWN_AFTER are not allowed to be next to each other. These rules will be verified at runtime. Subclass must override @B_android#support#v17#leanback#widget#Parallax#updateValues_E@ to update property values and perform @B_android#support#v17#leanback#widget#ParallaxEffect_E@s. Subclass may call @B_android#support#v17#leanback#widget#Parallax#updateValues_E@ automatically e.g. @B_android#support#v17#leanback#widget#RecyclerViewParallax_E@ calls @B_android#support#v17#leanback#widget#Parallax#updateValues_E@ in RecyclerView scrolling. App might call @B_android#support#v17#leanback#widget#Parallax#updateValues_E@ manually when Parallax is unaware of the value change. For example, when a slide transition is running, @B_android#support#v17#leanback#widget#RecyclerViewParallax_E@ is unaware of translation value changes; it's the app's responsibility to call @B_android#support#v17#leanback#widget#Parallax#updateValues_E@ in every frame of animation."}