{"Functions": {"requireAll()": {"Returns": [["boolean", "whether or not every attribute must be assigned a binding expression. The default value is true."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether every attribute must be assigned a binding expression or if some can be absent. When this is false, the BindingAdapter will be called when at least one associated attribute has a binding expression. The attributes for which there was no binding expression (even a normal XML value) will cause the associated parameter receive the Java default value. Care must be taken to ensure that a default value is not confused with a valid XML value.", "history": "", "FullName": "boolean requireAll ()"}, "value()": {"Returns": [["@B_java#lang#String_E@", "The attributes associated with this binding adapter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "String[] value ()"}}, "Inheritance": [], "ClassName": "android.databinding.BindingAdapter", "ClassDesc": "BindingAdapter is applied to methods that are used to manipulate how values with expressions are set to views. The simplest example is to have a public static method that takes the view and the value to set: It is also possible to take previously set values, if the old values are listed first: A binding adapter may optionally take a class extending DataBindingComponent as the first parameter as well. If it does, it will be passed the value passed in during binding, either directly in the inflate method or indirectly, using the value from @B_android#databinding#DataBindingUtil#getDefaultComponent_E@. If a binding adapter is an instance method, the generated DataBindingComponent will have a getter to retrieve an instance of the BindingAdapter's class to use to call the method."}