{"Functions": {"setError()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the error state of the stream to true. This method will cause subsequent invocations of @B_java#io#PrintStream#checkError_E@ to return @B_java#io#PrintStream#clearError_E@ is invoked.", "history": "Added in API level 1", "FullName": "protected void setError ()"}, "PrintStream(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "Added in API level 1", "FullName": "public PrintStream (String fileName, String csn)"}, "print(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#toString_E@"], "Permissions": [], "Description": "Prints an object. The string produced by the String.valueOf(Object) method is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (Object obj)"}, "format(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this output stream using the specified format string and arguments. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@, regardless of any previous invocations of other formatting methods on this object.", "history": "Added in API level 1", "FullName": "public PrintStream format (String format, Object... args)"}, "PrintStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to which values and objects will be printed"]], "Throws": [], "SeeAlso": ["@B_java#io#PrintWriter#PrintWriter_E@"], "Permissions": [], "Description": "Creates a new print stream. This stream will not flush automatically.", "history": "Added in API level 1", "FullName": "public PrintStream (OutputStream out)"}, "printf(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this output stream using the specified format string and arguments. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public PrintStream printf (String format, Object... args)"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: The byte to be written"]], "Throws": [], "SeeAlso": ["@B_java#io#PrintStream#print_E@", "@B_java#io#PrintStream#println_E@"], "Permissions": [], "Description": "Writes the specified byte to this stream. If the byte is a newline and automatic flushing is enabled then the flush method will be invoked. Note that the byte is written as given; to write a character that will be translated according to the platform's default character encoding, use the print(char) or println(char) methods.", "history": "Added in API level 1", "FullName": "public void write (int b)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this output stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character sequence to this output stream. An invocation of this method of the form Depending on the specification of", "history": "Added in API level 1", "FullName": "public PrintStream append (CharSequence csq)"}, "clearError()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the internal error state of this stream. This method will cause subsequent invocations of @B_java#io#PrintStream#checkError_E@ to return @B_java#io#PrintStream#setError_E@.", "history": "Added in API level 9", "FullName": "protected void clearError ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#OutputStream#flush_E@"], "Permissions": [], "Description": "Flushes the stream. This is done by writing any buffered output bytes to the underlying output stream and then flushing that stream.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "print(int)": {"Returns": [], "Parameters": [["int", "int: The int to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Prints an integer. The string produced by String.valueOf(int) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (int i)"}, "println(int)": {"Returns": [], "Parameters": [["int", "int: The int to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an integer and then terminate the line. This method behaves as though it invokes print(int) and then println().", "history": "Added in API level 1", "FullName": "public void println (int x)"}, "PrintStream(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the", "history": "Added in API level 1", "FullName": "public PrintStream (File file)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this output stream. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintStream append (CharSequence csq, int start, int end)"}, "checkError()": {"Returns": [["boolean", "true if and only if this stream has encountered an IOException other than InterruptedIOException, or the setError method has been invoked"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flushes the stream and checks its error state. The internal error state is set to true when the underlying output stream throws an IOException other than InterruptedIOException, and when the setError method is invoked. If an operation on the underlying output stream throws an InterruptedIOException, then the PrintStream converts the exception back into an interrupt by doing:", "history": "Added in API level 1", "FullName": "public boolean checkError ()"}, "print(double)": {"Returns": [], "Parameters": [["double", "double: The double to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#toString_E@"], "Permissions": [], "Description": "Prints a double-precision floating-point number. The string produced by String.valueOf(double) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (double d)"}, "print(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The String to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a string. If the argument is null then the string \"null\" is printed. Otherwise, the string's characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (String s)"}, "println(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The boolean to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a boolean and then terminate the line. This method behaves as though it invokes print(boolean) and then println().", "history": "Added in API level 1", "FullName": "public void println (boolean x)"}, "println(char)": {"Returns": [], "Parameters": [["char", "char: The char to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a character and then terminate the line. This method behaves as though it invokes print(char) and then println().", "history": "Added in API level 1", "FullName": "public void println (char x)"}, "println(double)": {"Returns": [], "Parameters": [["double", "double: The double to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a double and then terminate the line. This method behaves as though it invokes print(double) and then println().", "history": "Added in API level 1", "FullName": "public void println (double x)"}, "format(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."], ["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this output stream using the specified format string and arguments.", "history": "Added in API level 1", "FullName": "public PrintStream format (Locale l, String format, Object... args)"}, "println(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The String to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a String and then terminate the line. This method behaves as though it invokes print(java.lang.String) and then println().", "history": "Added in API level 1", "FullName": "public void println (String x)"}, "format(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this output stream using the specified format string and arguments. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@, regardless of any previous invocations of other formatting methods on this object.", "history": "added in API level 1", "FullName": "public PrintStream format (String format, Object... args)"}, "print(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The boolean to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a boolean value. The string produced by String.valueOf(boolean) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (boolean b)"}, "append(char)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["char", "char: The 16-bit character to append"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character to this output stream. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintStream append (char c)"}, "println(char[])": {"Returns": [], "Parameters": [["char[]", "char: an array of chars to print."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an array of characters and then terminate the line. This method behaves as though it invokes print(char[]) and then println().", "history": "Added in API level 1", "FullName": "public void println (char[] x)"}, "PrintStream(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the", "history": "Added in API level 1", "FullName": "public PrintStream (String fileName)"}, "print(float)": {"Returns": [], "Parameters": [["float", "float: The float to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#toString_E@"], "Permissions": [], "Description": "Prints a floating-point number. The string produced by String.valueOf(float) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (float f)"}, "PrintStream(java.io.OutputStream,boolean)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to which values and objects will be printed"], ["boolean", "boolean: A boolean; if true, the output buffer will be flushed whenever a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written"]], "Throws": [], "SeeAlso": ["@B_java#io#PrintWriter#PrintWriter_E@"], "Permissions": [], "Description": "Creates a new print stream.", "history": "Added in API level 1", "FullName": "public PrintStream (OutputStream out, boolean autoFlush)"}, "write(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: A byte array"], ["int", "int: Offset from which to start taking bytes"], ["int", "int: Number of bytes to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this stream. If automatic flushing is enabled then the flush method will be invoked. Note that the bytes will be written as given; to write characters that will be translated according to the platform's default character encoding, use the print(char) or println(char) methods.", "history": "added in API level 1", "FullName": "public void write (byte[] buf, int off, int len)"}, "printf(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this output stream using the specified format string and arguments. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintStream printf (String format, Object... args)"}, "print(long)": {"Returns": [], "Parameters": [["long", "long: The long to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toString_E@"], "Permissions": [], "Description": "Prints a long integer. The string produced by String.valueOf(long) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (long l)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this output stream. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public PrintStream append (CharSequence csq, int start, int end)"}, "PrintStream(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "added in API level 1", "FullName": "public PrintStream (File file, String csn)"}, "println(float)": {"Returns": [], "Parameters": [["float", "float: The float to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a float and then terminate the line. This method behaves as though it invokes print(float) and then println().", "history": "Added in API level 1", "FullName": "public void println (float x)"}, "print(char)": {"Returns": [], "Parameters": [["char", "char: The char to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a character. The character is translated into one or more bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (char c)"}, "PrintStream(java.io.OutputStream, boolean)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to which values and objects will be printed"], ["boolean", "boolean: A boolean; if true, the output buffer will be flushed whenever a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written"]], "Throws": [], "SeeAlso": ["@B_java#io#PrintWriter#PrintWriter_E@"], "Permissions": [], "Description": "Creates a new print stream.", "history": "added in API level 1", "FullName": "public PrintStream (OutputStream out, boolean autoFlush)"}, "write(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: A byte array"], ["int", "int: Offset from which to start taking bytes"], ["int", "int: Number of bytes to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this stream. If automatic flushing is enabled then the flush method will be invoked. Note that the bytes will be written as given; to write characters that will be translated according to the platform's default character encoding, use the print(char) or println(char) methods.", "history": "Added in API level 1", "FullName": "public void write (byte[] buf, int off, int len)"}, "print(char[])": {"Returns": [], "Parameters": [["char[]", "char: The array of chars to be printed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If s is null"]], "SeeAlso": [], "Permissions": [], "Description": "Prints an array of characters. The characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (char[] s)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#OutputStream#close_E@"], "Permissions": [], "Description": "Closes the stream. This is done by flushing the stream and then closing the underlying output stream.", "history": "Added in API level 1", "FullName": "public void close ()"}, "PrintStream(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "Added in API level 1", "FullName": "public PrintStream (File file, String csn)"}, "PrintStream(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this print stream. If the file exists, then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "added in API level 1", "FullName": "public PrintStream (String fileName, String csn)"}, "println(long)": {"Returns": [], "Parameters": [["long", "long: a The long to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a long and then terminate the line. This method behaves as though it invokes print(long) and then println().", "history": "Added in API level 1", "FullName": "public void println (long x)"}, "printf(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintStream_E@", "This output stream"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."], ["@B_java#lang#String_E@", "String: A format string as described in Format string syntax"], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this output stream using the specified format string and arguments. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintStream printf (Locale l, String format, Object... args)"}, "println(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an Object and then terminate the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes print(java.lang.String) and then println().", "history": "Added in API level 1", "FullName": "public void println (Object x)"}, "PrintStream(java.io.OutputStream,boolean,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream to which values and objects will be printed"], ["boolean", "boolean: A boolean; if true, the output buffer will be flushed whenever a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written"], ["@B_java#lang#String_E@", "String: The name of a supported character encoding"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named encoding is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new print stream.", "history": "Added in API level 1", "FullName": "public PrintStream (OutputStream out, boolean autoFlush, String encoding)"}, "println()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Terminates the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single newline character ('\\n').", "history": "Added in API level 1", "FullName": "public void println ()"}}, "Inheritance": ["@B_java#io#OutputStream_E@", "@B_java#io#FilterOutputStream_E@"], "ClassName": "java.io.PrintStream", "ClassDesc": "A PrintStream adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a PrintStream never throws an IOException; instead, exceptional situations merely set an internal flag that can be tested via the checkError method. Optionally, a PrintStream can be created so as to flush automatically; this means that the flush method is automatically invoked after a byte array is written, one of the println methods is invoked, or a newline character or byte ('\\n') is written. All characters printed by a PrintStream are converted into bytes using the platform's default character encoding. The PrintWriter class should be used in situations that require writing characters rather than bytes."}