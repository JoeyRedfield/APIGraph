{"Functions": {"setClob(java.lang.String,java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Clob x)"}, "getTimestamp(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String parameterName, Calendar cal)"}, "setTimestamp(java.lang.String,java.sql.Timestamp,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIMESTAMP value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the timestamp taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x, Calendar cal)"}, "setInt(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getInt_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setInt (String parameterName, int x)"}, "getRowId(java.lang.String)": {"Returns": [["@B_java#sql#RowId_E@", "a RowId object that represents the JDBC ROWID value is used as the designated parameter. If the parameter contains a SQL NULL, then a null value is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.", "history": "Added in API level 9", "FullName": "public abstract RowId getRowId (String parameterName)"}, "setObject(java.lang.String, java.lang.Object, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#CallableStatement#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "added in API level 1", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType)"}, "getTime(java.lang.String)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (String parameterName)"}, "setTimestamp(java.lang.String,java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x)"}, "setBlob(java.lang.String, java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setBlob (String parameterName, Blob x)"}, "setShort(java.lang.String, short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getShort_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setShort (String parameterName, short x)"}, "getSQLXML(java.lang.String)": {"Returns": [["@B_java#sql#SQLXML_E@", "a SQLXML object that maps an SQL XML value"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract SQLXML getSQLXML (String parameterName)"}, "setTime(java.lang.String,java.sql.Time,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value, using the given Calendar object. The driver uses the Calendar object to construct an SQL TIME value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the time taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setTime (String parameterName, Time x, Calendar cal)"}, "setTimestamp(java.lang.String, java.sql.Timestamp)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Timestamp_E@", "Timestamp: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTimestamp_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Timestamp value. The driver converts this to an SQL TIMESTAMP value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setTimestamp (String parameterName, Timestamp x)"}, "setNClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader)"}, "getNClob(java.lang.String)": {"Returns": [["@B_java#sql#NClob_E@", "the parameter value as a NClob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of a JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract NClob getNClob (String parameterName)"}, "getDate(int)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (int parameterIndex)"}, "setDate(java.lang.String,java.sql.Date,java.util.Calendar)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value, using the given Calendar object. The driver uses the Calendar object to construct an SQL DATE value, which the driver then sends to the database. With a a Calendar object, the driver can calculate the date taking into account a custom timezone. If no Calendar object is specified, the driver uses the default timezone, which is that of the virtual machine running the application.", "history": "Added in API level 1", "FullName": "public abstract void setDate (String parameterName, Date x, Calendar cal)"}, "getBlob(int)": {"Returns": [["@B_java#sql#Blob_E@", "the parameter value as a Blob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC BLOB parameter as a @B_java#sql#Blob_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Blob getBlob (int parameterIndex)"}, "setDouble(java.lang.String,double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getDouble_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setDouble (String parameterName, double x)"}, "getShort(int)": {"Returns": [["short", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setShort_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC SMALLINT parameter as a short in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract short getShort (int parameterIndex)"}, "getCharacterStream(int)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the parameter value; if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract Reader getCharacterStream (int parameterIndex)"}, "setNClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB setNClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader)"}, "getRowId(int)": {"Returns": [["@B_java#sql#RowId_E@", "a RowId object that represents the JDBC ROWID value is used as the designated parameter. If the parameter contains a SQL NULL, then a null value is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2,..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC ROWID parameter as a java.sql.RowId object.", "history": "Added in API level 9", "FullName": "public abstract RowId getRowId (int parameterIndex)"}, "getTimestamp(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int parameterIndex, Calendar cal)"}, "setRowId(java.lang.String,java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setRowId (String parameterName, RowId x)"}, "getRef(int)": {"Returns": [["@B_java#sql#Ref_E@", "the parameter value as a Ref object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC REF(<structured-type>) parameter as a @B_java#sql#Ref_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Ref getRef (int parameterIndex)"}, "setNString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR", "history": "Added in API level 9", "FullName": "public abstract void setNString (String parameterName, String value)"}, "getInt(int)": {"Returns": [["int", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setInt_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC INTEGER parameter as an int in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract int getInt (int parameterIndex)"}, "getByte(java.lang.String)": {"Returns": [["byte", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setByte_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TINYINT parameter as a byte in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte getByte (String parameterName)"}, "setClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the length specified is less than zero; a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader, long length)"}, "setBinaryStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached. setBinaryStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (String parameterName, InputStream x)"}, "setObject(java.lang.String,java.lang.Object,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#CallableStatement#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. This method is like the method setObject above, except that it assumes a scale of zero.", "history": "Added in API level 1", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType)"}, "setCharacterStream(java.lang.String,java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the UNICODE data used as the designated parameter"], ["int", "int: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "Added in API level 1", "FullName": "public abstract void setCharacterStream (String parameterName, Reader reader, int length)"}, "setShort(java.lang.String,short)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["short", "short: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getShort_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java short value. The driver converts this to an SQL SMALLINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setShort (String parameterName, short x)"}, "setNull(java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.", "history": "Added in API level 1", "FullName": "public abstract void setNull (String parameterName, int sqlType, String typeName)"}, "setURL(java.lang.String,java.net.URL)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#net#URL_E@", "URL: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed CallableStatement or if a URL is malformed"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getURL_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL object. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setURL (String parameterName, URL val)"}, "setCharacterStream(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the UNICODE data used as the designated parameter"], ["long", "long: the number of characters in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object, which is the given number of characters long. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (String parameterName, Reader reader, long length)"}, "getObject(int)": {"Returns": [["@B_java#lang#Object_E@", "A java.lang.Object holding the OUT parameter value"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#Types_E@", "@B_java#sql#PreparedStatement#setObject_E@"], "Permissions": [], "Description": "Retrieves the value of the designated parameter as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (int parameterIndex)"}, "getNClob(int)": {"Returns": [["@B_java#sql#NClob_E@", "the parameter value as a NClob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC NCLOB parameter as a java.sql.NClob object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract NClob getNClob (int parameterIndex)"}, "registerOutParameter(int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type NUMERIC or DECIMAL, the version of registerOutParameter that accepts a scale value should be used."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method @B_java#sql#CallableStatement#getObject_E@ retrieves the value.", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType)"}, "setBoolean(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getBoolean_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBoolean (String parameterName, boolean x)"}, "setBlob(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set the second is 2, ..."], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."], ["long", "long: the number of bytes in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the length specified is less than zero; if the number of bytes in the inputstream does not match the specfied length; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. The inputstream must contain the number of characters specified by length, otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setBinaryStream (int, InputStream, int) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be sent to the server as a LONGVARBINARY or a BLOB", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream, long length)"}, "getNCharacterStream(java.lang.String)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the parameter value; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR parameters.", "history": "Added in API level 9", "FullName": "public abstract Reader getNCharacterStream (String parameterName)"}, "getTimestamp(int)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int parameterIndex)"}, "setNClob(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader, long length)"}, "getByte(int)": {"Returns": [["byte", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setByte_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TINYINT parameter as a byte in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte getByte (int parameterIndex)"}, "registerOutParameter(int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type NUMERIC or DECIMAL, the version of registerOutParameter that accepts a scale value should be used."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the OUT parameter in ordinal position parameterIndex to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method @B_java#sql#CallableStatement#getObject_E@ retrieves the value.", "history": "added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType)"}, "setClob(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader)"}, "setFloat(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getFloat_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setFloat (String parameterName, float x)"}, "getTime(int)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (int parameterIndex)"}, "setBoolean(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["boolean", "boolean: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getBoolean_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java boolean value. The driver converts this to an SQL BIT or BOOLEAN value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBoolean (String parameterName, boolean x)"}, "getTimestamp(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (int parameterIndex, Calendar cal)"}, "getDate(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Date getDate (String parameterName, Calendar cal)"}, "getString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setString_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC CHAR, the String object returned has exactly the same value the SQL CHAR value had in the database, including any padding added by the database.", "history": "Added in API level 1", "FullName": "public abstract String getString (String parameterName)"}, "setObject(java.lang.String,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"], ["int", "int: the SQL type (as defined in java.sql.Types) to be sent to the database. The scale argument may further qualify this type."], ["int", "int: for java.sql.Types.DECIMAL or java.sql.Types.NUMERIC types, this is the number of digits after the decimal point. For all other types, this value will be ignored."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if targetSqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@", "@B_java#sql#CallableStatement#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second argument must be an object type; for integral values, the java.lang equivalent objects should be used. The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface SQLData), the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. Note that this method may be used to pass datatabase- specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract void setObject (String parameterName, Object x, int targetSqlType, int scale)"}, "setNString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given String object. The driver converts this to a SQL NCHAR or NVARCHAR or LONGNVARCHAR", "history": "added in API level 9", "FullName": "public abstract void setNString (String parameterName, String value)"}, "setAsciiStream(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format. setAsciiStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (String parameterName, InputStream x)"}, "getDouble(int)": {"Returns": [["double", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDouble_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC DOUBLE parameter as a double in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (int parameterIndex)"}, "registerOutParameter(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: SQL type code defined by java.sql.Types."], ["int", "int: the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the parameter named parameterName to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.", "history": "added in API level 1", "FullName": "public abstract void registerOutParameter (String parameterName, int sqlType, int scale)"}, "getNString(int)": {"Returns": [["@B_java#lang#String_E@", "a String object that maps an NCHAR, NVARCHAR or LONGNVARCHAR value"]], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setNString_E@"], "Permissions": [], "Description": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC NCHAR, the String object returned has exactly the same value the SQL NCHAR value had in the database, including any padding added by the database.", "history": "Added in API level 9", "FullName": "public abstract String getNString (int parameterIndex)"}, "getBigDecimal(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the parameter value in full precision. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBigDecimal_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.", "history": "Added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (int parameterIndex)"}, "setDouble(java.lang.String, double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["double", "double: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getDouble_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java double value. The driver converts this to an SQL DOUBLE value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setDouble (String parameterName, double x)"}, "setAsciiStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "Added in API level 1", "FullName": "public abstract void setAsciiStream (String parameterName, InputStream x, int length)"}, "setSQLXML(java.lang.String,java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed CallableStatement or the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setSQLXML (String parameterName, SQLXML xmlObject)"}, "getDate(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (String parameterName, Calendar cal)"}, "getArray(int)": {"Returns": [["@B_java#sql#Array_E@", "the parameter value as an Array object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC ARRAY parameter as an @B_java#sql#Array_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Array getArray (int parameterIndex)"}, "setObject(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs, this method is called on a closed CallableStatement or if the given Object parameter is ambiguous"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.setNull or the setObject(String parameterName, Object x, int sqlType) method should be used instead of setObject(String parameterName, Object x).", "history": "added in API level 1", "FullName": "public abstract void setObject (String parameterName, Object x)"}, "setURL(java.lang.String, java.net.URL)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#net#URL_E@", "URL: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed CallableStatement or if a URL is malformed"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getURL_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.net.URL object. The driver converts this to an SQL DATALINK value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setURL (String parameterName, URL val)"}, "setByte(java.lang.String, byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getByte_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setByte (String parameterName, byte x)"}, "getCharacterStream(java.lang.String)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the parameter value; if the value is SQL NULL, the value returned is null in the Java programming language"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract Reader getCharacterStream (String parameterName)"}, "getTime(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value; if the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Time getTime (String parameterName, Calendar cal)"}, "registerOutParameter(int, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2,..."], ["int", "int: a value from @B_java#sql#Types_E@"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL structured type"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-defined or REF output parameter. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-defined parameter, the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-defined and REF parameters. Although it is intended for user-defined and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the", "history": "added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType, String typeName)"}, "setNClob(java.lang.String,java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.", "history": "Added in API level 9", "FullName": "public abstract void setNClob (String parameterName, NClob value)"}, "setObject(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#Object_E@", "Object: the object containing the input parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs, this method is called on a closed CallableStatement or if the given Object parameter is ambiguous"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getObject_E@"], "Permissions": [], "Description": "Sets the value of the designated parameter with the given object. The second parameter must be of type Object; therefore, the java.lang equivalent objects should be used for built-in types. The JDBC specification specifies a standard mapping from Java Object types to SQL types. The given argument will be converted to the corresponding SQL type before being sent to the database. Note that this method may be used to pass datatabase- specific abstract data types, by using a driver-specific Java type. If the object is of a class implementing the interface SQLData, the JDBC driver should call the method SQLData.writeSQL to write it to the SQL data stream. If, on the other hand, the object is of a class implementing Ref, Blob, Clob, NClob, Struct, java.net.URL, or Array, the driver should pass it to the database as a value of the corresponding SQL type. This method throws an exception if there is an ambiguity, for example, if the object is of a class implementing more than one of the interfaces named above.setNull or the setObject(String parameterName, Object x, int sqlType) method should be used instead of setObject(String parameterName, Object x).", "history": "Added in API level 1", "FullName": "public abstract void setObject (String parameterName, Object x)"}, "setBlob(java.lang.String, java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream)"}, "setNClob(java.lang.String, java.io.Reader, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the length specified is less than zero; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a NCLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGNVARCHAR or a NCLOB", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, Reader reader, long length)"}, "setTime(java.lang.String,java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setTime (String parameterName, Time x)"}, "getBigDecimal(int,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBigDecimal_E@"], "Permissions": [], "Description": "use getBigDecimal(int parameterIndex) or getBigDecimal(String parameterName) Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public abstract BigDecimal getBigDecimal (int parameterIndex, int scale)"}, "setString(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getString_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setString (String parameterName, String x)"}, "getShort(java.lang.String)": {"Returns": [["short", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setShort_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC SMALLINT parameter as a short in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract short getShort (String parameterName)"}, "getDouble(java.lang.String)": {"Returns": [["double", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDouble_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC DOUBLE parameter as a double in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (String parameterName)"}, "setNull(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "Added in API level 1", "FullName": "public abstract void setNull (String parameterName, int sqlType)"}, "getTime(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value; if the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (int parameterIndex, Calendar cal)"}, "getBlob(java.lang.String)": {"Returns": [["@B_java#sql#Blob_E@", "the parameter value as a Blob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of a JDBC BLOB parameter as a @B_java#sql#Blob_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Blob getBlob (String parameterName)"}, "getObject(int,java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [["@B_java#lang#Object_E@", "a java.lang.Object holding the OUT parameter value"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Map_E@", "Map: the mapping from SQL type names to Java classes"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setObject_E@"], "Permissions": [], "Description": "Returns an object representing the value of OUT parameter parameterIndex and uses map for the custom mapping of the parameter value. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (int parameterIndex, Map<String, Class<?>> map)"}, "setNull(java.lang.String, int, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: a value from java.sql.Types"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL user-defined type; ignored if the parameter is not a user-defined type or SQL REF value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL. This version of the method setNull should be used for user-defined types and REF type parameters. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. Although it is intended for user-defined and Ref parameters, this method may be used to set a null parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the given typeName is ignored.", "history": "added in API level 1", "FullName": "public abstract void setNull (String parameterName, int sqlType, String typeName)"}, "getTime(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value; if the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Time getTime (int parameterIndex, Calendar cal)"}, "setBytes(java.lang.String,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getBytes_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBytes (String parameterName, byte[] x)"}, "setClob(java.lang.String, java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. This method differs from the setCharacterStream (int, Reader) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB setClob which takes a length parameter.", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader)"}, "setRowId(java.lang.String, java.sql.RowId)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#RowId_E@", "RowId: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.RowId object. The driver converts this to a SQL ROWID when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setRowId (String parameterName, RowId x)"}, "getURL(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "the parameter value as a java.net.URL object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs, this method is called on a closed CallableStatement, or if there is a problem with the URL"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setURL_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC DATALINK parameter as a java.net.URL object.", "history": "Added in API level 1", "FullName": "public abstract URL getURL (String parameterName)"}, "setNClob(java.lang.String, java.sql.NClob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#sql#NClob_E@", "NClob: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a java.sql.NClob object. The object implements the java.sql.NClob interface. This NClob object maps to a SQL NCLOB.", "history": "added in API level 9", "FullName": "public abstract void setNClob (String parameterName, NClob value)"}, "getLong(int)": {"Returns": [["long", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setLong_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC BIGINT parameter as a long in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract long getLong (int parameterIndex)"}, "registerOutParameter(int,int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2,..."], ["int", "int: a value from @B_java#sql#Types_E@"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL structured type"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-defined or REF output parameter. Examples of user-defined types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-defined parameter, the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-defined and REF parameters. Although it is intended for user-defined and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-defined or REF type, the", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType, String typeName)"}, "getDate(int, java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Date getDate (int parameterIndex, Calendar cal)"}, "getNString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a String object that maps an NCHAR, NVARCHAR or LONGNVARCHAR value"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setNString_E@"], "Permissions": [], "Description": "Retrieves the value of the designated NCHAR, NVARCHAR or LONGNVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC NCHAR, the String object returned has exactly the same value the SQL NCHAR value had in the database, including any padding added by the database.", "history": "Added in API level 9", "FullName": "public abstract String getNString (String parameterName)"}, "getObject(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "A java.lang.Object holding the OUT parameter value."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@", "@B_java#sql#PreparedStatement#setObject_E@"], "Permissions": [], "Description": "Retrieves the value of a parameter as an Object in the Java programming language. If the value is an SQL NULL, the driver returns a Java null. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (String parameterName)"}, "getBytes(int)": {"Returns": [["byte[]", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBytes_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBytes (int parameterIndex)"}, "getFloat(java.lang.String)": {"Returns": [["float", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setFloat_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC FLOAT parameter as a float in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (String parameterName)"}, "getTime(java.lang.String,java.util.Calendar)": {"Returns": [["@B_java#sql#Time_E@", "the parameter value; if the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the time"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTime_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIME parameter as a java.sql.Time object, using the given Calendar object to construct the time. With a Calendar object, the driver can calculate the time taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Time getTime (String parameterName, Calendar cal)"}, "setNCharacterStream(java.lang.String,java.io.Reader,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: the parameter value"], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (String parameterName, Reader value, long length)"}, "setBlob(java.lang.String,java.sql.Blob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Blob_E@", "Blob: a Blob object that maps an SQL BLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Blob object. The driver converts this to an SQL BLOB value when it sends it to the database.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, Blob x)"}, "getDate(int,java.util.Calendar)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the date"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC DATE parameter as a java.sql.Date object, using the given Calendar object to construct the date. With a Calendar object, the driver can calculate the date taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (int parameterIndex, Calendar cal)"}, "getInt(java.lang.String)": {"Returns": [["int", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setInt_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC INTEGER parameter as an int in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract int getInt (String parameterName)"}, "getDate(java.lang.String)": {"Returns": [["@B_java#sql#Date_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setDate_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC DATE parameter as a java.sql.Date object.", "history": "Added in API level 1", "FullName": "public abstract Date getDate (String parameterName)"}, "setDate(java.lang.String,java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setDate (String parameterName, Date x)"}, "getNCharacterStream(int)": {"Returns": [["@B_java#io#Reader_E@", "a java.io.Reader object that contains the parameter value; if the value is SQL NULL, the value returned is null in the Java programming language."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated parameter as a java.io.Reader object in the Java programming language. It is intended for use when accessing NCHAR,NVARCHAR and LONGNVARCHAR parameters.", "history": "Added in API level 9", "FullName": "public abstract Reader getNCharacterStream (int parameterIndex)"}, "setAsciiStream(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the Java input stream that contains the ASCII parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large ASCII value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.InputStream. Data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from ASCII to the database char format.", "history": "Added in API level 9", "FullName": "public abstract void setAsciiStream (String parameterName, InputStream x, long length)"}, "setNCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the driver does not support national character sets; if the driver can detect that a data conversion error could occur; if a database access error occurs; or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The Reader reads the data till end-of-file is reached. The driver does the necessary conversion from Java character format to the national character set in the database. setNCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setNCharacterStream (String parameterName, Reader value)"}, "setLong(java.lang.String,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getLong_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setLong (String parameterName, long x)"}, "getTimestamp(java.lang.String)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object.", "history": "Added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String parameterName)"}, "getBigDecimal(java.lang.String)": {"Returns": [["@B_java#math#BigDecimal_E@", "the parameter value in full precision. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["", "parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"], ["@B_java#sql#SQLException_E@", ""]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBigDecimal_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC NUMERIC parameter as a java.math.BigDecimal object with as many digits to the right of the decimal point as the value contains.", "history": "Added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (String parameterName)"}, "registerOutParameter(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type NUMERIC or DECIMAL, the version of registerOutParameter that accepts a scale value should be used."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the OUT parameter named parameterName to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method @B_java#sql#CallableStatement#getObject_E@ retrieves the value.", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (String parameterName, int sqlType)"}, "setClob(java.lang.String, java.sql.Clob)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Clob_E@", "Clob: a Clob object that maps an SQL CLOB value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Clob object. The driver converts this to an SQL CLOB value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Clob x)"}, "getSQLXML(int)": {"Returns": [["@B_java#sql#SQLXML_E@", "a SQLXML object that maps an SQL XML value"]], "Parameters": [["int", "int: index of the first parameter is 1, the second is 2, ..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated SQL XML parameter as a java.sql.SQLXML object in the Java programming language.", "history": "Added in API level 9", "FullName": "public abstract SQLXML getSQLXML (int parameterIndex)"}, "setClob(java.lang.String, java.io.Reader, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter to be set"], ["@B_java#io#Reader_E@", "Reader: An object that contains the data to set the parameter value to."], ["long", "long: the number of characters in the parameter data."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if the length specified is less than zero; a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a Reader object. The reader must contain the number of characters specified by length otherwise a SQLException will be generated when the CallableStatement is executed. This method differs from the setCharacterStream (int, Reader, int) method because it informs the driver that the parameter value should be sent to the server as a CLOB. When the setCharacterStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARCHAR or a CLOB", "history": "added in API level 9", "FullName": "public abstract void setClob (String parameterName, Reader reader, long length)"}, "setTime(java.lang.String, java.sql.Time)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Time_E@", "Time: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getTime_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Time value. The driver converts this to an SQL TIME value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setTime (String parameterName, Time x)"}, "registerOutParameter(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the SQL type code defined by java.sql.Types."], ["int", "int: the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.", "history": "added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType, int scale)"}, "setCharacterStream(java.lang.String,java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#Reader_E@", "Reader: the java.io.Reader object that contains the Unicode data"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given Reader object. When a very large UNICODE value is input to a LONGVARCHAR parameter, it may be more practical to send it via a java.io.Reader object. The data will be read from the stream as needed until end-of-file is reached. The JDBC driver will do any necessary conversion from UNICODE to the database char format. setCharacterStream which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setCharacterStream (String parameterName, Reader reader)"}, "getBoolean(int)": {"Returns": [["boolean", "the parameter value. If the value is SQL NULL, the result is false."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBoolean_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract boolean getBoolean (int parameterIndex)"}, "getArray(java.lang.String)": {"Returns": [["@B_java#sql#Array_E@", "the parameter value as an Array object in Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of a JDBC ARRAY parameter as an @B_java#sql#Array_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Array getArray (String parameterName)"}, "registerOutParameter(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the SQL type code defined by java.sql.Types."], ["int", "int: the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the parameter in ordinal position parameterIndex to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (int parameterIndex, int sqlType, int scale)"}, "setDate(java.lang.String, java.sql.Date)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#Date_E@", "Date: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getDate_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.Date value using the default time zone of the virtual machine that is running the application. The driver converts this to an SQL DATE value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setDate (String parameterName, Date x)"}, "setBinaryStream(java.lang.String,java.io.InputStream,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["int", "int: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "Added in API level 1", "FullName": "public abstract void setBinaryStream (String parameterName, InputStream x, int length)"}, "setBigDecimal(java.lang.String,java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#math#BigDecimal_E@", "BigDecimal: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getBigDecimal_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given java.math.BigDecimal value. The driver converts this to an SQL NUMERIC value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setBigDecimal (String parameterName, BigDecimal x)"}, "getBytes(java.lang.String)": {"Returns": [["byte[]", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBytes_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC BINARY or VARBINARY parameter as an array of byte values in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract byte[] getBytes (String parameterName)"}, "registerOutParameter(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: SQL type code defined by java.sql.Types."], ["int", "int: the desired number of digits to the right of the decimal point. It must be greater than or equal to zero."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the parameter named parameterName to be of JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. This version of registerOutParameter should be used when the parameter is of JDBC type NUMERIC or DECIMAL.", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (String parameterName, int sqlType, int scale)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setString_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC CHAR, VARCHAR, or LONGVARCHAR parameter as a String in the Java programming language. For the fixed-length type JDBC CHAR, the String object returned has exactly the same value the SQL CHAR value had in the database, including any padding added by the database.", "history": "Added in API level 1", "FullName": "public abstract String getString (int parameterIndex)"}, "setString(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#lang#String_E@", "String: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getString_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java String value. The driver converts this to an SQL VARCHAR or LONGVARCHAR value (depending on the argument's size relative to the driver's limits on VARCHAR values) when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setString (String parameterName, String x)"}, "getObject(java.lang.String,java.util.Map<java.lang.String,java.lang.Class<?>>)": {"Returns": [["@B_java#lang#Object_E@", "a java.lang.Object holding the OUT parameter value"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Map_E@", "Map: the mapping from SQL type names to Java classes"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setObject_E@"], "Permissions": [], "Description": "Returns an object representing the value of OUT parameter parameterName and uses map for the custom mapping of the parameter value. This method returns a Java object whose type corresponds to the JDBC type that was registered for this parameter using the method registerOutParameter. By registering the target JDBC type as java.sql.Types.OTHER, this method can be used to read database-specific abstract data types.", "history": "Added in API level 1", "FullName": "public abstract Object getObject (String parameterName, Map<String, Class<?>> map)"}, "registerOutParameter(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the JDBC type code defined by java.sql.Types. If the parameter is of JDBC type NUMERIC or DECIMAL, the version of registerOutParameter that accepts a scale value should be used."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the OUT parameter named parameterName to the JDBC type sqlType. All OUT parameters must be registered before a stored procedure is executed. The JDBC type specified by sqlType for an OUT parameter determines the Java type that must be used in the get method to read the value of that parameter. If the JDBC type expected to be returned to this output parameter is specific to this particular database, sqlType should be java.sql.Types.OTHER. The method @B_java#sql#CallableStatement#getObject_E@ retrieves the value.", "history": "added in API level 1", "FullName": "public abstract void registerOutParameter (String parameterName, int sqlType)"}, "setBytes(java.lang.String, byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte[]", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getBytes_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java array of bytes. The driver converts this to an SQL VARBINARY or LONGVARBINARY (depending on the argument's size relative to the driver's limits on VARBINARY values) when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setBytes (String parameterName, byte[] x)"}, "getLong(java.lang.String)": {"Returns": [["long", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setLong_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC BIGINT parameter as a long in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract long getLong (String parameterName)"}, "getBigDecimal(int, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"], ["int", "int: the number of digits to the right of the decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBigDecimal_E@"], "Permissions": [], "Description": "use getBigDecimal(int parameterIndex) or getBigDecimal(String parameterName) Retrieves the value of the designated JDBC NUMERIC parameter as a java.math.BigDecimal object with", "history": "added in API level 1", "FullName": "public abstract BigDecimal getBigDecimal (int parameterIndex, int scale)"}, "getClob(java.lang.String)": {"Returns": [["@B_java#sql#Clob_E@", "the parameter value as a Clob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of a JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Clob getClob (String parameterName)"}, "getFloat(int)": {"Returns": [["float", "the parameter value. If the value is SQL NULL, the result is 0."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setFloat_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC FLOAT parameter as a float in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (int parameterIndex)"}, "setBlob(java.lang.String,java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: An object that contains the data to set the parameter value to."]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to a InputStream object. This method differs from the setBinaryStream (int, InputStream) method because it informs the driver that the parameter value should be sent to the server as a BLOB. When the setBinaryStream method is used, the driver may have to do extra work to determine whether the parameter data should be send to the server as a LONGVARBINARY or a BLOB setBlob which takes a length parameter.", "history": "Added in API level 9", "FullName": "public abstract void setBlob (String parameterName, InputStream inputStream)"}, "setByte(java.lang.String,byte)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["byte", "byte: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getByte_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java byte value. The driver converts this to an SQL TINYINT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setByte (String parameterName, byte x)"}, "setInt(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getInt_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java int value. The driver converts this to an SQL INTEGER value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setInt (String parameterName, int x)"}, "setNull(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: the SQL type code defined in java.sql.Types"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to SQL NULL.", "history": "added in API level 1", "FullName": "public abstract void setNull (String parameterName, int sqlType)"}, "getRef(java.lang.String)": {"Returns": [["@B_java#sql#Ref_E@", "the parameter value as a Ref object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of a JDBC REF(<structured-type>) parameter as a @B_java#sql#Ref_E@ object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Ref getRef (String parameterName)"}, "getBoolean(java.lang.String)": {"Returns": [["boolean", "the parameter value. If the value is SQL NULL, the result is false."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setBoolean_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC BIT or BOOLEAN parameter as a boolean in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract boolean getBoolean (String parameterName)"}, "setLong(java.lang.String, long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["long", "long: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getLong_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java long value. The driver converts this to an SQL BIGINT value when it sends it to the database.", "history": "added in API level 1", "FullName": "public abstract void setLong (String parameterName, long x)"}, "setSQLXML(java.lang.String, java.sql.SQLXML)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#sql#SQLXML_E@", "SQLXML: a SQLXML object that maps an SQL XML value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs; this method is called on a closed CallableStatement or the java.xml.transform.Result, Writer or OutputStream has not been closed for the SQLXML object"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given java.sql.SQLXML object. The driver converts this to an SQL XML value when it sends it to the database.", "history": "added in API level 9", "FullName": "public abstract void setSQLXML (String parameterName, SQLXML xmlObject)"}, "setBinaryStream(java.lang.String,java.io.InputStream,long)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#io#InputStream_E@", "InputStream: the java input stream which contains the binary parameter value"], ["long", "long: the number of bytes in the stream"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated parameter to the given input stream, which will have the specified number of bytes. When a very large binary value is input to a LONGVARBINARY parameter, it may be more practical to send it via a java.io.InputStream object. The data will be read from the stream as needed until end-of-file is reached.", "history": "Added in API level 9", "FullName": "public abstract void setBinaryStream (String parameterName, InputStream x, long length)"}, "getClob(int)": {"Returns": [["@B_java#sql#Clob_E@", "the parameter value as a Clob object in the Java programming language. If the value was SQL NULL, the value null is returned."]], "Parameters": [["int", "int: the first parameter is 1, the second is 2, and so on"]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the value of the designated JDBC CLOB parameter as a java.sql.Clob object in the Java programming language.", "history": "Added in API level 1", "FullName": "public abstract Clob getClob (int parameterIndex)"}, "getURL(int)": {"Returns": [["@B_java#net#URL_E@", "a java.net.URL object that represents the JDBC DATALINK value used as the designated parameter"]], "Parameters": [["int", "int: the first parameter is 1, the second is 2,..."]], "Throws": [["@B_java#sql#SQLException_E@", "if the parameterIndex is not valid; if a database access error occurs, this method is called on a closed CallableStatement, or if the URL being returned is not a valid URL on the Java platform"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setURL_E@"], "Permissions": [], "Description": "Retrieves the value of the designated JDBC DATALINK parameter as a java.net.URL object.", "history": "Added in API level 1", "FullName": "public abstract URL getURL (int parameterIndex)"}, "registerOutParameter(java.lang.String,int,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["int", "int: a value from @B_java#sql#Types_E@"], ["@B_java#lang#String_E@", "String: the fully-qualified name of an SQL structured type"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if sqlType is a ARRAY, BLOB, CLOB, DATALINK, JAVA_OBJECT, NCHAR, NCLOB, NVARCHAR, LONGNVARCHAR, REF, ROWID, SQLXML or STRUCT data type and the JDBC driver does not support this data type or if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Registers the designated output parameter. This version of the method registerOutParameter should be used for a user-named or REF output parameter. Examples of user-named types include: STRUCT, DISTINCT, JAVA_OBJECT, and named array types. All OUT parameters must be registered before a stored procedure is executed. For a user-named parameter the fully-qualified SQL type name of the parameter should also be given, while a REF parameter requires that the fully-qualified type name of the referenced type be given. A JDBC driver that does not need the type code and type name information may ignore it. To be portable, however, applications should always provide these values for user-named and REF parameters. Although it is intended for user-named and REF parameters, this method may be used to register a parameter of any JDBC type. If the parameter does not have a user-named or REF type, the typeName parameter is ignored. getXXX method whose Java type XXX corresponds to the parameter's registered SQL type.", "history": "Added in API level 1", "FullName": "public abstract void registerOutParameter (String parameterName, int sqlType, String typeName)"}, "getTimestamp(java.lang.String, java.util.Calendar)": {"Returns": [["@B_java#sql#Timestamp_E@", "the parameter value. If the value is SQL NULL, the result is null."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["@B_java#util#Calendar_E@", "Calendar: the Calendar object the driver will use to construct the timestamp"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#PreparedStatement#setTimestamp_E@"], "Permissions": [], "Description": "Retrieves the value of a JDBC TIMESTAMP parameter as a java.sql.Timestamp object, using the given Calendar object to construct the Timestamp object. With a Calendar object, the driver can calculate the timestamp taking into account a custom timezone and locale. If no Calendar object is specified, the driver uses the default timezone and locale.", "history": "added in API level 1", "FullName": "public abstract Timestamp getTimestamp (String parameterName, Calendar cal)"}, "setFloat(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the parameter"], ["float", "float: the parameter value"]], "Throws": [["@B_java#sql#SQLException_E@", "if parameterName does not correspond to a named parameter; if a database access error occurs or this method is called on a closed CallableStatement"], ["@B_java#sql#SQLFeatureNotSupportedException_E@", "if the JDBC driver does not support this method"]], "SeeAlso": ["@B_java#sql#CallableStatement#getFloat_E@"], "Permissions": [], "Description": "Sets the designated parameter to the given Java float value. The driver converts this to an SQL FLOAT value when it sends it to the database.", "history": "Added in API level 1", "FullName": "public abstract void setFloat (String parameterName, float x)"}, "wasNull()": {"Returns": [["boolean", "true if the last parameter read was SQL NULL; false otherwise"]], "Parameters": [], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs or this method is called on a closed CallableStatement"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves whether the last OUT parameter read had the value of SQL NULL. Note that this method should be called only after calling a getter method; otherwise, there is no value to use in determining whether it is null or not.", "history": "Added in API level 1", "FullName": "public abstract boolean wasNull ()"}}, "Inheritance": [], "ClassName": "java.sql.CallableStatement", "ClassDesc": "The interface used to execute SQL stored procedures. The JDBC API provides a stored procedure SQL escape syntax that allows stored procedures to be called in a standard way for all RDBMSs. This escape syntax has one form that includes a result parameter and one that does not. If used, the result parameter must be registered as an OUT parameter. The other parameters can be used for input, output or both. Parameters are referred to sequentially, by number, with the first parameter being 1. IN parameter values are set using the set methods inherited from @B_java#sql#PreparedStatement_E@. The type of all OUT parameters must be registered prior to executing the stored procedure; their values are retrieved after execution via the get methods provided here. A CallableStatement can return one @B_java#sql#ResultSet_E@ object or multiple ResultSet objects. Multiple ResultSet objects are handled using operations inherited from @B_java#sql#Statement_E@. For maximum portability, a call's ResultSet objects and update counts should be processed prior to getting the values of output parameters."}