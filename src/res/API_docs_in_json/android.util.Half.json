{"Functions": {"toFloat(short)": {"Returns": [["float", "A normalized single-precision float value"]], "Parameters": [["short", "short: The half-precision float value to convert to single-precision"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified half-precision float value into a single-precision float value. The following special cases are handled: If the input is @B_android#util#Half#NaN_E@, the returned value is @B_java#lang#Float#NaN_E@ If the input is @B_android#util#Half#POSITIVE_INFINITY_E@ or @B_android#util#Half#NEGATIVE_INFINITY_E@, the returned value is respectively @B_java#lang#Float#POSITIVE_INFINITY_E@ or @B_java#lang#Float#NEGATIVE_INFINITY_E@ If the input is 0 (positive or negative), the returned value is +/-0.0f Otherwise, the returned value is a normalized single-precision float value", "history": "Added in API level 26", "FullName": "public static float toFloat (short h)"}, "ceil(short)": {"Returns": [["short", "The smallest half-precision float value toward negative infinity greater than or equal to the specified half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smallest half-precision float value toward negative infinity greater than or equal to the specified half-precision float value. Special values are handled in the following ways: If the specified half-precision float is NaN, the result is NaN If the specified half-precision float is infinity (negative or positive), the result is infinity (with the same sign) If the specified half-precision float is zero (negative or positive), the result is zero (with the same sign)", "history": "Added in API level 26", "FullName": "public static short ceil (short h)"}, "toHexString(short)": {"Returns": [["@B_java#lang#String_E@", "A hexadecimal string representation of the specified value This value will never be null."]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hexadecimal string representation of the specified half-precision float value. If the value is a NaN, the result is \"NaN\", otherwise the result follows this format: If the sign is positive, no sign character appears in the result If the sign is negative, the first character is '-' If the value is inifinity, the string is \"Infinity\" If the value is 0, the string is \"0x0.0p0\" If the value has a normalized representation, the exponent and significand are represented in the string in two fields. The significand starts with \"0x1.\" followed by its lowercase hexadecimal representation. Trailing zeroes are removed unless all digits are 0, then a single zero is used. The significand representation is followed by the exponent, represented by \"p\", itself followed by a decimal string of the unbiased exponent If the value has a subnormal representation, the significand starts with \"0x0.\" followed by its lowercase hexadecimal representation. Trailing zeroes are removed unless all digits are 0, then a single zero is used. The significand representation is followed by the exponent, represented by \"p-14\"", "history": "Added in API level 26", "FullName": "public static String toHexString (short h)"}, "getSignificand(short)": {"Returns": [["int", "The significand, or significand, of the specified vlaue"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the significand, or mantissa, used in the representation of the specified half-precision float value.", "history": "Added in API level 26", "FullName": "public static int getSignificand (short h)"}, "getSign(short)": {"Returns": [["int", "1 if the value is positive, -1 if the value is negative"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sign of the specified half-precision float.", "history": "Added in API level 26", "FullName": "public static int getSign (short h)"}, "floor(short)": {"Returns": [["short", "The largest half-precision float value toward positive infinity less than or equal to the specified half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the largest half-precision float value toward positive infinity less than or equal to the specified half-precision float value. Special values are handled in the following ways: If the specified half-precision float is NaN, the result is NaN If the specified half-precision float is infinity (negative or positive), the result is infinity (with the same sign) If the specified half-precision float is zero (negative or positive), the result is zero (with the same sign)", "history": "Added in API level 26", "FullName": "public static short floor (short h)"}, "toHalf(float)": {"Returns": [["short", "A half-precision float value"]], "Parameters": [["float", "float: The single-precision float value to convert to half-precision"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified single-precision float value into a half-precision float value. The following special cases are handled: If the input is NaN (see @B_java#lang#Float#isNaN_E@), the returned value is @B_android#util#Half#NaN_E@ If the input is @B_java#lang#Float#POSITIVE_INFINITY_E@ or @B_java#lang#Float#NEGATIVE_INFINITY_E@, the returned value is respectively @B_android#util#Half#POSITIVE_INFINITY_E@ or @B_android#util#Half#NEGATIVE_INFINITY_E@ If the input is 0 (positive or negative), the returned value is @B_android#util#Half#POSITIVE_ZERO_E@ or @B_android#util#Half#NEGATIVE_ZERO_E@ If the input is a less than @B_android#util#Half#MIN_VALUE_E@, the returned value is flushed to @B_android#util#Half#POSITIVE_ZERO_E@ or @B_android#util#Half#NEGATIVE_ZERO_E@ If the input is a less than @B_android#util#Half#MIN_NORMAL_E@, the returned value is a denorm half-precision float Otherwise, the returned value is rounded to the nearest representable half-precision float value", "history": "Added in API level 26", "FullName": "public static short toHalf (float f)"}, "max(short, short)": {"Returns": [["short", "The larger of the two specified half-precision values"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the larger of two half-precision float values (the value closest to positive infinity). Special values are handled in the following ways: If either value is NaN, the result is NaN @B_android#util#Half#POSITIVE_ZERO_E@ is greater than @B_android#util#Half#NEGATIVE_ZERO_E@", "history": "added in API level 26", "FullName": "public static short max (short x, short y)"}, "Half(short)": {"Returns": [], "Parameters": [["short", "short: The value to be represented by the Half"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Half object that represents the half-precision float type argument.", "history": "Added in API level 26", "FullName": "public Half (short value)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "True if the objects are the same, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to compare This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#util#Half#halfToIntBits_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and is a Half object that represents the same half-precision value as the this object. Two half-precision values are considered to be the same if and only if the method @B_android#util#Half#halfToIntBits_E@ returns an identical int value for both.", "history": "Added in API level 26", "FullName": "public boolean equals (Object o)"}, "isNaN()": {"Returns": [["boolean", "True if the value is a NaN, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Half value represents a Not-a-Number, false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isNaN ()"}, "isNormalized(short)": {"Returns": [["boolean", "True if the value is normalized, false otherwise"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified half-precision float value is normalized (does not have a subnormal representation). If the specified value is @B_android#util#Half#POSITIVE_INFINITY_E@, @B_android#util#Half#NEGATIVE_INFINITY_E@, @B_android#util#Half#POSITIVE_ZERO_E@, @B_android#util#Half#NEGATIVE_ZERO_E@, NaN or any subnormal number, this method returns false.", "history": "Added in API level 26", "FullName": "public static boolean isNormalized (short h)"}, "toString(short)": {"Returns": [["@B_java#lang#String_E@", "A string representation of the specified value This value will never be null."]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the specified half-precision float value. Calling this method is equivalent to calling Float.toString(toFloat(h)). See @B_java#lang#Float#toString_E@ for more information on the format of the string representation.", "history": "Added in API level 26", "FullName": "public static String toString (short h)"}, "Half(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A string to be converted to a Half This value must never be null."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable number"]], "SeeAlso": ["@B_java#lang#Float#valueOf_E@", "@B_android#util#Half#toHalf_E@"], "Permissions": [], "Description": "Constructs a newly allocated Half object that represents the half-precision float value represented by the string. The string is converted to a half-precision float value as if by the @B_android#util#Half#valueOf_E@ method. Calling this constructor is equivalent to calling:", "history": "Added in API level 26", "FullName": "public Half (String value)"}, "hashCode()": {"Returns": [["int", "A hash code value for this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Half object. The result is the integer bit representation, exactly as produced by the method @B_android#util#Half#halfToIntBits_E@, of the primitive half-precision float value represented by this Half object.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "copySign(short,short)": {"Returns": [["short", "A value with the magnitude of the first parameter and the sign of the second parameter"]], "Parameters": [["short", "short: A half-precision float value providing the magnitude of the result"], ["short", "short: A half-precision float value providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first parameter with the sign of the second parameter. This method treats NaNs as having a sign.", "history": "Added in API level 26", "FullName": "public static short copySign (short magnitude, short sign)"}, "hashCode(short)": {"Returns": [["int", "A hash code value for a half-precision float value"]], "Parameters": [["short", "short: The value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a half-precision float value.", "history": "Added in API level 26", "FullName": "public static int hashCode (short h)"}, "isInfinite(short)": {"Returns": [["boolean", "True if the value is positive infinity or negative infinity, false otherwise"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified half-precision float value represents infinity, false otherwise.", "history": "Added in API level 26", "FullName": "public static boolean isInfinite (short h)"}, "copySign(short, short)": {"Returns": [["short", "A value with the magnitude of the first parameter and the sign of the second parameter"]], "Parameters": [["short", "short: A half-precision float value providing the magnitude of the result"], ["short", "short: A half-precision float value providing the sign of the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the first parameter with the sign of the second parameter. This method treats NaNs as having a sign.", "history": "added in API level 26", "FullName": "public static short copySign (short magnitude, short sign)"}, "round(short)": {"Returns": [["short", "The value of the specified half-precision float rounded to the nearest half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the closest integral half-precision float value to the specified half-precision float value. Special values are handled in the following ways: If the specified half-precision float is NaN, the result is NaN If the specified half-precision float is infinity (negative or positive), the result is infinity (with the same sign) If the specified half-precision float is zero (negative or positive), the result is zero (with the same sign)", "history": "Added in API level 26", "FullName": "public static short round (short h)"}, "min(short, short)": {"Returns": [["short", "The smaller of the two specified half-precision values"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two half-precision float values (the value closest to negative infinity). Special values are handled in the following ways: If either value is NaN, the result is NaN @B_android#util#Half#NEGATIVE_ZERO_E@ is smaller than @B_android#util#Half#POSITIVE_ZERO_E@", "history": "added in API level 26", "FullName": "public static short min (short x, short y)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string representation of this Half object This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the specified half-precision float value. See @B_android#util#Half#toString_E@ for more information.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "halfToRawIntBits(short)": {"Returns": [["int", "The bits that represent the half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": ["@B_android#util#Half#halfToIntBits_E@", "@B_android#util#Half#intBitsToHalf_E@"], "Permissions": [], "Description": "Returns a representation of the specified half-precision float value according to the bit layout described in @B_android#util#Half_E@. The argument is considered to be a representation of a half-precision float value according to the bit layout described in @B_android#util#Half_E@. The 16 most significant bits of the returned value are set to 0.", "history": "Added in API level 26", "FullName": "public static int halfToRawIntBits (short h)"}, "trunc(short)": {"Returns": [["short", "The truncated half-precision float value of the specified half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the truncated half-precision float value of the specified half-precision float value. Special values are handled in the following ways: If the specified half-precision float is NaN, the result is NaN If the specified half-precision float is infinity (negative or positive), the result is infinity (with the same sign) If the specified half-precision float is zero (negative or positive), the result is zero (with the same sign)", "history": "Added in API level 26", "FullName": "public static short trunc (short h)"}, "lessEquals(short, short)": {"Returns": [["boolean", "True if x is less than or equal to y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is less (smaller toward negative infinity) than or equal to the second half-precision float value. If either of the values is NaN, the result is false.", "history": "added in API level 26", "FullName": "public static boolean lessEquals (short x, short y)"}, "Half(double)": {"Returns": [], "Parameters": [["double", "double: The value to be represented by the Half"]], "Throws": [], "SeeAlso": ["@B_android#util#Half#toHalf_E@"], "Permissions": [], "Description": "Constructs a newly allocated Half object that represents the argument converted to a half-precision float.", "history": "Added in API level 26", "FullName": "public Half (double value)"}, "valueOf(float)": {"Returns": [["@B_android#util#Half_E@", "a Half instance representing f This value will never be null."]], "Parameters": [["float", "float: A float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Half instance representing the specified float value.", "history": "Added in API level 26", "FullName": "public static Half valueOf (float f)"}, "max(short,short)": {"Returns": [["short", "The larger of the two specified half-precision values"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the larger of two half-precision float values (the value closest to positive infinity). Special values are handled in the following ways: If either value is NaN, the result is NaN @B_android#util#Half#POSITIVE_ZERO_E@ is greater than @B_android#util#Half#NEGATIVE_ZERO_E@", "history": "Added in API level 26", "FullName": "public static short max (short x, short y)"}, "shortValue()": {"Returns": [["short", "The half-precision float value represented by this object converted to type short"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a short after a narrowing primitive conversion.", "history": "Added in API level 26", "FullName": "public short shortValue ()"}, "abs(short)": {"Returns": [["short", "The absolute value of the specified half-precision float"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of the specified half-precision float. Special values are handled in the following ways: If the specified half-precision float is NaN, the result is NaN If the specified half-precision float is zero (negative or positive), the result is positive zero (see @B_android#util#Half#POSITIVE_ZERO_E@) If the specified half-precision float is infinity (negative or positive), the result is positive infinity (see @B_android#util#Half#POSITIVE_INFINITY_E@)", "history": "Added in API level 26", "FullName": "public static short abs (short h)"}, "intValue()": {"Returns": [["int", "The half-precision float value represented by this object converted to type int"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a int after a narrowing primitive conversion.", "history": "Added in API level 26", "FullName": "public int intValue ()"}, "compareTo(android.util.Half)": {"Returns": [["int", "The value 0 if x is numerically equal to y; a value less than 0 if x is numerically less than y; and a value greater than 0 if x is numerically greater than y"]], "Parameters": [["@B_android#util#Half_E@", "Half: The half-precision float value to compare to the half-precision value represented by this Half object This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified half-precision float values. The following conditions apply during the comparison: @B_android#util#Half#NaN_E@ is considered by this method to be equal to itself and greater than all other half-precision float values (including #POSITIVE_INFINITY) @B_android#util#Half#POSITIVE_ZERO_E@ is considered by this method to be greater than @B_android#util#Half#NEGATIVE_ZERO_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (Half h)"}, "longValue()": {"Returns": [["long", "The half-precision float value represented by this object converted to type long"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a long after a narrowing primitive conversion.", "history": "Added in API level 26", "FullName": "public long longValue ()"}, "intBitsToHalf(int)": {"Returns": [["short", "The half-precision float value with the same bit pattern"]], "Parameters": [["int", "int: An integer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the half-precision float value corresponding to a given bit representation. The argument is considered to be a representation of a half-precision float value according to the bit layout described in @B_android#util#Half_E@. The 16 most significant bits of the argument are ignored.", "history": "Added in API level 26", "FullName": "public static short intBitsToHalf (int bits)"}, "byteValue()": {"Returns": [["byte", "The half-precision float value represented by this object converted to type byte"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a byte after a narrowing primitive conversion.", "history": "Added in API level 26", "FullName": "public byte byteValue ()"}, "halfValue()": {"Returns": [["short", "The half-precision float value represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the half-precision value of this Half as a short containing the bit representation described in @B_android#util#Half_E@.", "history": "Added in API level 26", "FullName": "public short halfValue ()"}, "compare(short, short)": {"Returns": [["int", "The value 0 if x is numerically equal to y, a value less than 0 if x is numerically less than y, and a value greater than 0 if x is numerically greater than y"]], "Parameters": [["short", "short: The first half-precision float value to compare."], ["short", "short: The second half-precision float value to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified half-precision float values. The following conditions apply during the comparison: @B_android#util#Half#NaN_E@ is considered by this method to be equal to itself and greater than all other half-precision float values (including #POSITIVE_INFINITY) @B_android#util#Half#POSITIVE_ZERO_E@ is considered by this method to be greater than @B_android#util#Half#NEGATIVE_ZERO_E@.", "history": "added in API level 26", "FullName": "public static int compare (short x, short y)"}, "min(short,short)": {"Returns": [["short", "The smaller of the two specified half-precision values"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the smaller of two half-precision float values (the value closest to negative infinity). Special values are handled in the following ways: If either value is NaN, the result is NaN @B_android#util#Half#NEGATIVE_ZERO_E@ is smaller than @B_android#util#Half#POSITIVE_ZERO_E@", "history": "Added in API level 26", "FullName": "public static short min (short x, short y)"}, "halfToShortBits(short)": {"Returns": [["short", "The bits that represent the half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": ["@B_android#util#Half#halfToIntBits_E@"], "Permissions": [], "Description": "Returns a representation of the specified half-precision float value according to the bit layout described in @B_android#util#Half_E@. Similar to @B_android#util#Half#halfToIntBits_E@, this method collapses all possible Not-a-Number values to a single canonical Not-a-Number value defined by @B_android#util#Half#NaN_E@.", "history": "Added in API level 26", "FullName": "public static short halfToShortBits (short h)"}, "greaterEquals(short,short)": {"Returns": [["boolean", "True if x is greater than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is greater (larger toward positive infinity) than or equal to the second half-precision float value. If either of the values is NaN, the result is false.", "history": "Added in API level 26", "FullName": "public static boolean greaterEquals (short x, short y)"}, "isNaN(short)": {"Returns": [["boolean", "True if the value is a NaN, false otherwise"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified half-precision float value represents a Not-a-Number, false otherwise.", "history": "Added in API level 26", "FullName": "public static boolean isNaN (short h)"}, "doubleValue()": {"Returns": [["double", "The half-precision float value represented by this object converted to type double"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a double after a widening primitive conversion.", "history": "Added in API level 26", "FullName": "public double doubleValue ()"}, "greaterEquals(short, short)": {"Returns": [["boolean", "True if x is greater than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is greater (larger toward positive infinity) than or equal to the second half-precision float value. If either of the values is NaN, the result is false.", "history": "added in API level 26", "FullName": "public static boolean greaterEquals (short x, short y)"}, "valueOf(short)": {"Returns": [["@B_android#util#Half_E@", "a Half instance representing h This value will never be null."]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Half instance representing the specified half-precision float value.", "history": "Added in API level 26", "FullName": "public static Half valueOf (short h)"}, "equals(short, short)": {"Returns": [["boolean", "True if x is equal to y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the two half-precision float values are equal. If either of the values is NaN, the result is false. @B_android#util#Half#POSITIVE_ZERO_E@ and @B_android#util#Half#NEGATIVE_ZERO_E@ are considered equal.", "history": "added in API level 26", "FullName": "public static boolean equals (short x, short y)"}, "equals(short,short)": {"Returns": [["boolean", "True if x is equal to y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the two half-precision float values are equal. If either of the values is NaN, the result is false. @B_android#util#Half#POSITIVE_ZERO_E@ and @B_android#util#Half#NEGATIVE_ZERO_E@ are considered equal.", "history": "Added in API level 26", "FullName": "public static boolean equals (short x, short y)"}, "halfToIntBits(short)": {"Returns": [["int", "The bits that represent the half-precision float value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": ["@B_android#util#Half#halfToRawIntBits_E@", "@B_android#util#Half#halfToShortBits_E@", "@B_android#util#Half#intBitsToHalf_E@"], "Permissions": [], "Description": "Returns a representation of the specified half-precision float value according to the bit layout described in @B_android#util#Half_E@. Unlike @B_android#util#Half#halfToRawIntBits_E@, this method collapses all possible Not-a-Number values to a single canonical Not-a-Number value defined by @B_android#util#Half#NaN_E@.", "history": "Added in API level 26", "FullName": "public static int halfToIntBits (short h)"}, "getExponent(short)": {"Returns": [["int", "The unbiased exponent of the specified value"]], "Parameters": [["short", "short: A half-precision float value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unbiased exponent used in the representation of the specified half-precision float value. if the value is NaN or infinite, this* method returns @B_android#util#Half#MAX_EXPONENT_E@ + 1. If the argument is 0 or a subnormal representation, this method returns @B_android#util#Half#MIN_EXPONENT_E@ - 1.", "history": "Added in API level 26", "FullName": "public static int getExponent (short h)"}, "compare(short,short)": {"Returns": [["int", "The value 0 if x is numerically equal to y, a value less than 0 if x is numerically less than y, and a value greater than 0 if x is numerically greater than y"]], "Parameters": [["short", "short: The first half-precision float value to compare."], ["short", "short: The second half-precision float value to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the two specified half-precision float values. The following conditions apply during the comparison: @B_android#util#Half#NaN_E@ is considered by this method to be equal to itself and greater than all other half-precision float values (including #POSITIVE_INFINITY) @B_android#util#Half#POSITIVE_ZERO_E@ is considered by this method to be greater than @B_android#util#Half#NEGATIVE_ZERO_E@.", "history": "Added in API level 26", "FullName": "public static int compare (short x, short y)"}, "floatValue()": {"Returns": [["float", "The half-precision float value represented by this object converted to type float"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Half as a float after a widening primitive conversion.", "history": "Added in API level 26", "FullName": "public float floatValue ()"}, "less(short,short)": {"Returns": [["boolean", "True if x is less than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is less (smaller toward negative infinity) than the second half-precision float value. If either of the values is NaN, the result is false.", "history": "Added in API level 26", "FullName": "public static boolean less (short x, short y)"}, "valueOf(java.lang.String)": {"Returns": [["@B_android#util#Half_E@", "a Half instance representing h This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The string to be parsed This value must never be null."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable half-precision float value"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Half instance representing the specified string value. Calling this method is equivalent to calling toHalf(Float.parseString(h)). See @B_java#lang#Float#valueOf_E@ for more information on the format of the string representation.", "history": "Added in API level 26", "FullName": "public static Half valueOf (String s)"}, "lessEquals(short,short)": {"Returns": [["boolean", "True if x is less than or equal to y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is less (smaller toward negative infinity) than or equal to the second half-precision float value. If either of the values is NaN, the result is false.", "history": "Added in API level 26", "FullName": "public static boolean lessEquals (short x, short y)"}, "greater(short, short)": {"Returns": [["boolean", "True if x is greater than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is greater (larger toward positive infinity) than the second half-precision float value. If either of the values is NaN, the result is false.", "history": "added in API level 26", "FullName": "public static boolean greater (short x, short y)"}, "less(short, short)": {"Returns": [["boolean", "True if x is less than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is less (smaller toward negative infinity) than the second half-precision float value. If either of the values is NaN, the result is false.", "history": "added in API level 26", "FullName": "public static boolean less (short x, short y)"}, "parseHalf(java.lang.String)": {"Returns": [["short", "A half-precision float value represented by the string"]], "Parameters": [["@B_java#lang#String_E@", "String: The string to be parsed This value must never be null."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable half-precision float value"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the half-precision float value represented by the specified string. Calling this method is equivalent to calling toHalf(Float.parseString(h)). See @B_java#lang#Float#valueOf_E@ for more information on the format of the string representation.", "history": "Added in API level 26", "FullName": "public static short parseHalf (String s)"}, "greater(short,short)": {"Returns": [["boolean", "True if x is greater than y, false otherwise"]], "Parameters": [["short", "short: The first half-precision value"], ["short", "short: The second half-precision value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the first half-precision float value is greater (larger toward positive infinity) than the second half-precision float value. If either of the values is NaN, the result is false.", "history": "Added in API level 26", "FullName": "public static boolean greater (short x, short y)"}, "Half(float)": {"Returns": [], "Parameters": [["float", "float: The value to be represented by the Half"]], "Throws": [], "SeeAlso": ["@B_android#util#Half#toHalf_E@"], "Permissions": [], "Description": "Constructs a newly allocated Half object that represents the argument converted to a half-precision float.", "history": "Added in API level 26", "FullName": "public Half (float value)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "android.util.Half", "ClassDesc": "The Half class is a wrapper and a utility class to manipulate half-precision 16-bit @HalfFloat annotation. The IEEE 754 standard specifies an fp16 as having the following format: Sign bit: 1 bit Exponent width: 5 bits Significand: 10 bits The format is laid out as follows: Half-precision floating points can be useful to save memory and/or bandwidth at the expense of range and precision when compared to single-precision floating points (fp32). To help you decide whether fp16 is the right storage type for you need, please refer to the table below that shows the available precision throughout the range of possible values. The precision column indicates the step size between two consecutive numbers in a specific part of the range. This table shows that numbers higher than 1024 lose all fractional precision."}