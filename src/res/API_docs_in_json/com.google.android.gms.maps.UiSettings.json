{"Functions": {"isTiltGesturesEnabled()": {"Returns": [["", "true if tilt gestures are enabled; false if tilt gestures are disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether tilt gestures are enabled/disabled.", "history": "", "FullName": "public boolean isTiltGesturesEnabled ()"}, "isScrollGesturesEnabled()": {"Returns": [["", "true if scroll gestures are enabled; false if scroll gestures are disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether scroll gestures are enabled/disabled.", "history": "", "FullName": "public boolean isScrollGesturesEnabled ()"}, "isRotateGesturesEnabled()": {"Returns": [["", "true if rotate gestures are enabled; false if rotate gestures are disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether rotate gestures are enabled/disabled.", "history": "", "FullName": "public boolean isRotateGesturesEnabled ()"}, "setZoomGesturesEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable zoom gestures; false to disable zoom gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether zoom gestures should be enabled or disabled. If enabled, users can either double tap/two-finger tap or pinch to zoom the camera. If disabled, these gestures have no effect. This setting doesn't affect the zoom buttons, nor does it restrict programmatic movement and animation of the camera. By default, zoom gestures are enabled.", "history": "", "FullName": "public void setZoomGesturesEnabled (boolean enabled)"}, "setZoomControlsEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the zoom controls; false to disable the zoom controls."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the zoom controls. If enabled, the zoom controls are a pair of buttons (one for zooming in, one for zooming out) that appear on the screen. When pressed, they cause the camera to zoom in (or out) by one zoom level. If disabled, the zoom controls are not shown. By default, the zoom controls are enabled.", "history": "", "FullName": "public void setZoomControlsEnabled (boolean enabled)"}, "setMapToolbarEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the Map Toolbar; false to disable the Map Toolbar."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether the Map Toolbar should be enabled or disabled. If enabled, users will see a bar with various context-dependent actions, including 'open this map in the Google Maps app' and 'find directions to the highlighted marker in the Google Maps app'. By default, the Map Toolbar is enabled.", "history": "", "FullName": "public void setMapToolbarEnabled (boolean enabled)"}, "isIndoorLevelPickerEnabled()": {"Returns": [["", "true if the level picker is enabled; false if the level picker is disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the indoor level picker is enabled/disabled. That is, whether the level picker will appear when a building with indoor maps is focused.", "history": "", "FullName": "public boolean isIndoorLevelPickerEnabled ()"}, "isCompassEnabled()": {"Returns": [["", "true if the compass is enabled; false if the compass is disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the compass is enabled/disabled.", "history": "", "FullName": "public boolean isCompassEnabled ()"}, "isMyLocationButtonEnabled()": {"Returns": [["", "true if the my-location button is enabled; false if the my-location button is disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the my-location button is enabled/disabled.", "history": "", "FullName": "public boolean isMyLocationButtonEnabled ()"}, "isMapToolbarEnabled()": {"Returns": [["", "true if the Map Toolbar is enabled; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the Map Toolbar is enabled/disabled.", "history": "", "FullName": "public boolean isMapToolbarEnabled ()"}, "setTiltGesturesEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable tilt gestures; false to disable tilt gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether tilt gestures should be enabled or disabled. If enabled, users can use a two-finger vertical down swipe to tilt the camera. If disabled, users cannot tilt the camera via gestures. This setting doesn't restrict users from tapping the compass icon to reset the camera orientation, nor does it restrict programmatic movement and animation of the camera. By default, tilt gestures are enabled.", "history": "", "FullName": "public void setTiltGesturesEnabled (boolean enabled)"}, "setAllGesturesEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable all gestures; false to disable all gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether all gestures should be enabled or disabled. If enabled, all gestures are available; otherwise, all gestures are disabled. This doesn't restrict users from tapping any on screen buttons to move the camera (e.g., compass or zoom controls), nor does it restrict programmatic movements and animation.", "history": "", "FullName": "public void setAllGesturesEnabled (boolean enabled)"}, "setIndoorLevelPickerEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to show or false to hide the level picker."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the indoor level picker is enabled when indoor mode is enabled. If true, the level picker will appear when a building with indoor maps is focused. If false, no level picker will appear - an application will need to provide its own way of selecting levels. The default behaviour is to show the level picker.", "history": "", "FullName": "public void setIndoorLevelPickerEnabled (boolean enabled)"}, "setMyLocationButtonEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the my-location button; false to disable the my-location button."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the my-location button. The my-location button causes the camera to move such that the user's location is in the center of the map. If the button is enabled, it is only shown when the my-location layer is enabled. By default, the my-location button is enabled (and hence shown when the my-location layer is enabled).", "history": "", "FullName": "public void setMyLocationButtonEnabled (boolean enabled)"}, "setScrollGesturesEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable scroll gestures; false to disable scroll gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether scroll gestures should be enabled or disabled. If enabled, users can swipe to pan the camera. If disabled, swiping has no effect. This setting doesn't restrict programmatic movement and animation of the camera. By default, scroll gestures are enabled.", "history": "", "FullName": "public void setScrollGesturesEnabled (boolean enabled)"}, "setRotateGesturesEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable rotate gestures; false to disable rotate gestures."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the preference for whether rotate gestures should be enabled or disabled. If enabled, users can use a two-finger rotate gesture to rotate the camera. If disabled, users cannot rotate the camera via gestures. This setting doesn't restrict the user from tapping the compass icon to reset the camera orientation, nor does it restrict programmatic movements and animation of the camera. By default, rotate gestures are enabled.", "history": "", "FullName": "public void setRotateGesturesEnabled (boolean enabled)"}, "setCompassEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the compass; false to disable the compass."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the compass. The compass is an icon on the map that indicates the direction of north on the map. If enabled, it is only shown when the camera is tilted or rotated away from its default orientation (tilt of 0 and a bearing of 0). When a user clicks the compass, the camera orients itself to its default orientation and fades away shortly after. If disabled, the compass will never be displayed. By default, the compass is enabled (and hence shown when the camera is not in the default orientation).", "history": "", "FullName": "public void setCompassEnabled (boolean enabled)"}, "isZoomControlsEnabled()": {"Returns": [["", "true if the zoom controls are enabled; false if the zoom controls are disabled;"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the zoom controls are enabled/disabled.", "history": "", "FullName": "public boolean isZoomControlsEnabled ()"}, "isZoomGesturesEnabled()": {"Returns": [["", "true if zoom gestures are enabled; false if zoom gestures are disabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether zoom gestures are enabled/disabled.", "history": "", "FullName": "public boolean isZoomGesturesEnabled ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.UiSettings", "ClassDesc": "Settings for the user interface of a GoogleMap. To obtain this interface, call @B_com#google#android#gms#maps#GoogleMap#getUiSettings_E@."}