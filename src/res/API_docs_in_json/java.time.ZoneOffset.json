{"Functions": {"getRules()": {"Returns": [["@B_java#time#zone#ZoneRules_E@", "the rules, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the associated time-zone rules. The rules will always return this offset when queried. The implementation class is immutable, thread-safe and serializable.", "history": "Added in API level 26", "FullName": "public ZoneRules getRules ()"}, "of(java.lang.String)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the offset ID, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset ID is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using the ID. This method parses the string ID of a ZoneOffset to return an instance. The parsing accepts all the formats generated by @B_java#time#ZoneOffset#getId_E@, plus some additional formats: Z - for UTC +h +hh +hh:mm -hh:mm +hhmm -hhmm +hh:mm:ss -hh:mm:ss +hhmmss -hhmmss Note that \u00b1 means either the plus or minus symbol. The ID of the returned offset will be normalized to one of the formats described by @B_java#time#ZoneOffset#getId_E@. The maximum supported range is from +18:00 to -18:00 inclusive.", "history": "Added in API level 26", "FullName": "public static ZoneOffset of (String offsetId)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this offset using the specified query. This queries this offset using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "ofHoursMinutesSeconds(int,int,int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["int", "int: the time-zone offset in hours, from -18 to +18"], ["int", "int: the time-zone offset in minutes, from 0 to \u00b159, sign matches hours and seconds"], ["int", "int: the time-zone offset in seconds, from 0 to \u00b159, sign matches hours and minutes"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds. The sign of the hours, minutes and seconds components must match. Thus, if the hours is negative, the minutes and seconds must be negative or zero.", "history": "Added in API level 26", "FullName": "public static ZoneOffset ofHoursMinutesSeconds (int hours, int minutes, int seconds)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this offset, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this offset can be queried for the specified field. If false, then calling the @B_java#time#ZoneOffset#range_E@ and @B_java#time#ZoneOffset#get_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The OFFSET_SECONDS field returns true. All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "ofHoursMinutes(int, int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["int", "int: the time-zone offset in hours, from -18 to +18"], ["int", "int: the time-zone offset in minutes, from 0 to \u00b159, sign matches hours"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using an offset in hours and minutes. The sign of the hours and minutes components must match. Thus, if the hours is negative, the minutes must be negative or zero. If the hours is zero, the minutes may be positive, negative or zero.", "history": "added in API level 26", "FullName": "public static ZoneOffset ofHoursMinutes (int hours, int minutes)"}, "compareTo(java.time.ZoneOffset)": {"Returns": [["int", "the comparator value, negative if less, postive if greater"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the other date to compare to, not null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if other is null"]], "SeeAlso": [], "Permissions": [], "Description": "Compares this offset to another offset in descending order. The offsets are compared in the order that they occur for the same time of day around the world. Thus, an offset of +10:00 comes before an offset of +09:00 and so on down to -18:00. The comparison is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (ZoneOffset other)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same offset as this object. This returns a temporal object of the same observable type as the input with the offset changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#OFFSET_SECONDS_E@ as the field. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "ofHoursMinutesSeconds(int, int, int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["int", "int: the time-zone offset in hours, from -18 to +18"], ["int", "int: the time-zone offset in minutes, from 0 to \u00b159, sign matches hours and seconds"], ["int", "int: the time-zone offset in seconds, from 0 to \u00b159, sign matches hours and minutes"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using an offset in hours, minutes and seconds. The sign of the hours, minutes and seconds components must match. Thus, if the hours is negative, the minutes and seconds must be negative or zero.", "history": "added in API level 26", "FullName": "public static ZoneOffset ofHoursMinutesSeconds (int hours, int minutes, int seconds)"}, "ofTotalSeconds(int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the ZoneOffset, not null"]], "Parameters": [["int", "int: the total time-zone offset in seconds, from -64800 to +64800"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset specifying the total offset in seconds The offset must be in the range -18:00 to +18:00, which corresponds to -64800 to +64800.", "history": "Added in API level 26", "FullName": "public static ZoneOffset ofTotalSeconds (int totalSeconds)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this offset, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this offset as a String, using the normalized ID.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to an ZoneOffset"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset from a temporal object. This obtains an offset based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ZoneOffset. A TemporalAccessor represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of ZoneOffset. The conversion uses the @B_java#time#temporal#TemporalQueries#offset_E@ query, which relies on extracting the @B_java#time#temporal#ChronoField#OFFSET_SECONDS_E@ field. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ZoneOffset::from.", "history": "Added in API level 26", "FullName": "public static ZoneOffset from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this offset as an int. This queries this offset for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The OFFSET_SECONDS field returns the value of the offset. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "getTotalSeconds()": {"Returns": [["int", "the total zone offset amount in seconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total zone offset in seconds. This is the primary way to access the offset amount. It returns the total of the hours, minutes and seconds fields as a single offset that can be added to a time.", "history": "Added in API level 26", "FullName": "public int getTotalSeconds ()"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this offset as a long. This queries this offset for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The OFFSET_SECONDS field returns the value of the offset. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "ofHours(int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["int", "int: the time-zone offset in hours, from -18 to +18"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using an offset in hours.", "history": "Added in API level 26", "FullName": "public static ZoneOffset ofHours (int hours)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other offset"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this offset is equal to another offset. The comparison is based on the amount of the offset in seconds. This is equivalent to a comparison by ID.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "the zone offset ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the normalized zone offset ID. The ID is minor variation to the standard ISO-8601 formatted string for the offset. There are three formats: Z - for UTC (ISO-8601) +hh:mm or -hh:mm - if the seconds are zero (ISO-8601) +hh:mm:ss or -hh:mm:ss - if the seconds are non-zero (not ISO-8601)", "history": "Added in API level 26", "FullName": "public String getId ()"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This offset is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#ZoneOffset#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "ofHoursMinutes(int,int)": {"Returns": [["@B_java#time#ZoneOffset_E@", "the zone-offset, not null"]], "Parameters": [["int", "int: the time-zone offset in hours, from -18 to +18"], ["int", "int: the time-zone offset in minutes, from 0 to \u00b159, sign matches hours"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the offset is not in the required range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneOffset using an offset in hours and minutes. The sign of the hours and minutes components must match. Thus, if the hours is negative, the minutes must be negative or zero. If the hours is zero, the minutes may be positive, negative or zero.", "history": "Added in API level 26", "FullName": "public static ZoneOffset ofHoursMinutes (int hours, int minutes)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this offset.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#time#ZoneId_E@"], "ClassName": "java.time.ZoneOffset", "ClassDesc": "A time-zone offset from Greenwich/UTC, such as +02:00. A time-zone offset is the amount of time that a time-zone differs from Greenwich/UTC. This is usually a fixed number of hours and minutes. Different parts of the world have different time-zone offsets. The rules for how offsets vary by place and time of year are captured in the @B_java#time#ZoneId_E@ class. For example, Paris is one hour ahead of Greenwich/UTC in winter and two hours ahead in summer. The ZoneId instance for Paris will reference two ZoneOffset instances - a +01:00 instance for winter, and a +02:00 instance for summer. In 2008, time-zone offsets around the world extended from -12:00 to +14:00. To prevent any problems with that range being extended, yet still provide validation, the range of offsets is restricted to -18:00 to 18:00 inclusive. This class is designed for use with the ISO calendar system. The fields of hours, minutes and seconds make assumptions that are valid for the standard ISO definitions of those fields. This class may be used with other calendar systems providing the definition of the time fields matches those of the ISO calendar system. Instances of ZoneOffset must be compared using @B_java#time#ZoneOffset#equals_E@. Implementations may choose to cache certain common offsets, however applications must not rely on such caching."}