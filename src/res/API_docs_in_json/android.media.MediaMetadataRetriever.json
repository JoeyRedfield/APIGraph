{"Functions": {"getFrameAtTime(long, int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [["long", "long: The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."], ["int", "int: a hint on how the frame is found. Use @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ often has larger performance overhead compared to the other options if there is no sync frame located at timeUs.Value is either 0 or combination of OPTION_PREVIOUS_SYNC, OPTION_NEXT_SYNC, OPTION_CLOSEST_SYNC or OPTION_CLOSEST."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. If you don't need a full-resolution frame (for example, because you need a thumbnail image), use @B_android#media#MediaMetadataRetriever#getScaledFrameAtTime_E@ instead of this method.", "history": "added in API level 10", "FullName": "public Bitmap getFrameAtTime (long timeUs, int option)"}, "MediaMetadataRetriever()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 10", "FullName": "public MediaMetadataRetriever ()"}, "getFrameAtTime(long)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap of size dst_widthxdst_height containing a representative video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [["long", "long: The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."]], "Throws": [], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtTime_E@"], "Permissions": [], "Description": "Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call @B_android#media#MediaMetadataRetriever#getFrameAtTime_E@. If you don't need a full-resolution frame (for example, because you need a thumbnail image), use @B_android#media#MediaMetadataRetriever#getScaledFrameAtTime_E@ instead of this method.", "history": "Added in API level 10", "FullName": "public Bitmap getFrameAtTime (long timeUs)"}, "getImageAtIndex(int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the requested still image, or null if the image cannot be retrieved."]], "Parameters": [["int", "int: 0-based index of the image."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain still images."], ["@B_java#lang#IllegalArgumentException_E@", "if the requested image does not exist."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getImageAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getPrimaryImage_E@"], "Permissions": [], "Description": "This method is similar to @B_android#media#MediaMetadataRetriever#getImageAtIndex_E@ except that the default for @B_android#media#MediaMetadataRetriever#BitmapParams_E@ will be used.", "history": "Added in API level 28", "FullName": "public Bitmap getImageAtIndex (int imageIndex)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 10", "FullName": "protected void finalize ()"}, "getEmbeddedPicture()": {"Returns": [["byte[]", "null if no such graphic is found."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after setDataSource(). This method finds the optional graphic or album/cover art associated associated with the data source. If there are more than one pictures, (any) one of them is returned.", "history": "Added in API level 10", "FullName": "public byte[] getEmbeddedPicture ()"}, "getImageAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the requested still image, or null if the image cannot be retrieved."]], "Parameters": [["int", "int: 0-based index of the image."], ["@B_android#media#MediaMetadataRetriever#BitmapParams_E@", "MediaMetadataRetriever.BitmapParams: BitmapParams that controls the returned bitmap config (such as pixel formats). This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain still images."], ["@B_java#lang#IllegalArgumentException_E@", "if the requested image does not exist."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getImageAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getPrimaryImage_E@"], "Permissions": [], "Description": "This method retrieves a still image by its index. It should only be called after @B_android#media#MediaMetadataRetriever#setDataSource_E@. After the bitmap is returned, you can query the actual parameters that were used to create the bitmap from the BitmapParams argument, for instance to query the bitmap config used for the bitmap with @B_android#media#MediaMetadataRetriever#BitmapParams#getActualConfig_E@.", "history": "Added in API level 28", "FullName": "public Bitmap getImageAtIndex (int imageIndex, MediaMetadataRetriever.BitmapParams params)"}, "getScaledFrameAtTime(long,int,int,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap of size not larger than dstWidth by dstHeight containing a scaled video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [["long", "long: The time position in microseconds where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."], ["int", "int: a hint on how the frame is found. Use @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Value is either 0 or a combination of @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@, @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@, @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@, and @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@"], ["int", "int: expected output bitmap width"], ["int", "int: expected output bitmap height"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if passed in invalid option or width by height is less than or equal to 0."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a video frame near a given timestamp scaled to a desired size. Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap with same aspect ratio as the source while scaling it so that it fits into the desired size of dst_width by dst_height. This is useful for generating a thumbnail for an input data source or just to obtain a scaled frame at the given time position.", "history": "Added in API level 27", "FullName": "public Bitmap getScaledFrameAtTime (long timeUs, int option, int dstWidth, int dstHeight)"}, "setDataSource(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to play"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the FileDescriptor is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "Added in API level 10", "FullName": "public void setDataSource (FileDescriptor fd)"}, "getFrameAtTime()": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtTime_E@"], "Permissions": [], "Description": "Call this method after setDataSource(). This method finds a representative frame at any time position if possible, and returns it as a bitmap. Call this method if one does not care about where the frame is located; otherwise, please call @B_android#media#MediaMetadataRetriever#getFrameAtTime_E@ or @B_android#media#MediaMetadataRetriever#getFrameAtTime_E@ If you don't need a full-resolution frame (for example, because you need a thumbnail image), use @B_android#media#MediaMetadataRetriever#getScaledFrameAtTime_E@ instead of this method.", "history": "Added in API level 10", "FullName": "public Bitmap getFrameAtTime ()"}, "getPrimaryImage()": {"Returns": [["@B_android#graphics#Bitmap_E@", "the primary image, or null if it cannot be retrieved."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain still images."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getImageAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getPrimaryImage_E@"], "Permissions": [], "Description": "This method is similar to @B_android#media#MediaMetadataRetriever#getPrimaryImage_E@ except that the default for @B_android#media#MediaMetadataRetriever#BitmapParams_E@ will be used.", "history": "Added in API level 28", "FullName": "public Bitmap getPrimaryImage ()"}, "getFramesAtIndex(int,int,android.media.MediaMetadataRetriever.BitmapParams)": {"Returns": [["@B_java#util#List_E@", "An list of Bitmaps containing the requested video frames. The returned array could contain less frames than requested if the retrieval fails. This value will never be null."]], "Parameters": [["int", "int: 0-based index of the first video frame to retrieve. The frame index must be that of a valid frame. The total number of frames available for retrieval can be queried via the @B_android#media#MediaMetadataRetriever#METADATA_KEY_VIDEO_FRAME_COUNT_E@ key."], ["int", "int: number of consecutive video frames to retrieve. Must be a positive value. The stream must contain at least numFrames frames starting at frameIndex."], ["@B_android#media#MediaMetadataRetriever#BitmapParams_E@", "MediaMetadataRetriever.BitmapParams: BitmapParams that controls the returned bitmap config (such as pixel formats). This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain video or image sequences."], ["@B_java#lang#IllegalArgumentException_E@", "if the frameIndex or numFrames is invalid, or the stream doesn't contain at least numFrames starting at frameIndex."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@"], "Permissions": [], "Description": "This method retrieves a consecutive set of video frames starting at the specified index. It should only be called after @B_android#media#MediaMetadataRetriever#setDataSource_E@. If the caller intends to retrieve more than one consecutive video frames, this method is preferred over @B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@ for efficiency. After the bitmaps are returned, you can query the actual parameters that were used to create the bitmaps from the BitmapParams argument, for instance to query the bitmap config used for the bitmaps with @B_android#media#MediaMetadataRetriever#BitmapParams#getActualConfig_E@.", "history": "Added in API level 28", "FullName": "public List<Bitmap> getFramesAtIndex (int frameIndex, int numFrames, MediaMetadataRetriever.BitmapParams params)"}, "getFramesAtIndex(int,int)": {"Returns": [["@B_java#util#List_E@", "An list of Bitmaps containing the requested video frames. The returned array could contain less frames than requested if the retrieval fails. This value will never be null."]], "Parameters": [["int", "int: 0-based index of the first video frame to retrieve. The frame index must be that of a valid frame. The total number of frames available for retrieval can be queried via the @B_android#media#MediaMetadataRetriever#METADATA_KEY_VIDEO_FRAME_COUNT_E@ key."], ["int", "int: number of consecutive video frames to retrieve. Must be a positive value. The stream must contain at least numFrames frames starting at frameIndex."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain video or image sequences."], ["@B_java#lang#IllegalArgumentException_E@", "if the frameIndex or numFrames is invalid, or the stream doesn't contain at least numFrames starting at frameIndex."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@"], "Permissions": [], "Description": "This method is similar to @B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@ except that the default for @B_android#media#MediaMetadataRetriever#BitmapParams_E@ will be used.", "history": "Added in API level 28", "FullName": "public List<Bitmap> getFramesAtIndex (int frameIndex, int numFrames)"}, "getPrimaryImage(android.media.MediaMetadataRetriever.BitmapParams)": {"Returns": [["@B_android#graphics#Bitmap_E@", "the primary image, or null if it cannot be retrieved."]], "Parameters": [["@B_android#media#MediaMetadataRetriever#BitmapParams_E@", "MediaMetadataRetriever.BitmapParams: BitmapParams that controls the returned bitmap config (such as pixel formats). This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain still images."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getImageAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getPrimaryImage_E@"], "Permissions": [], "Description": "This method retrieves the primary image of the media content. It should only be called after @B_android#media#MediaMetadataRetriever#setDataSource_E@. After the bitmap is returned, you can query the actual parameters that were used to create the bitmap from the BitmapParams argument, for instance to query the bitmap config used for the bitmap with @B_android#media#MediaMetadataRetriever#BitmapParams#getActualConfig_E@.", "history": "Added in API level 28", "FullName": "public Bitmap getPrimaryImage (MediaMetadataRetriever.BitmapParams params)"}, "getScaledFrameAtTime(long, int, int, int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap of size not larger than dstWidth by dstHeight containing a scaled video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [["long", "long: The time position in microseconds where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."], ["int", "int: a hint on how the frame is found. Use @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ often has larger performance overhead compared to the other options if there is no sync frame located at timeUs.Value is either 0 or combination of OPTION_PREVIOUS_SYNC, OPTION_NEXT_SYNC, OPTION_CLOSEST_SYNC or OPTION_CLOSEST."], ["int", "int: expected output bitmap width"], ["int", "int: expected output bitmap height"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if passed in invalid option or width by height is less than or equal to 0."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a video frame near a given timestamp scaled to a desired size. Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap with same aspect ratio as the source while scaling it so that it fits into the desired size of dst_width by dst_height. This is useful for generating a thumbnail for an input data source or just to obtain a scaled frame at the given time position.", "history": "added in API level 27", "FullName": "public Bitmap getScaledFrameAtTime (long timeUs, int option, int dstWidth, int dstHeight)"}, "getFrameAtIndex(int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap containing the requested video frame, or null if the retrieval fails."]], "Parameters": [["int", "int: 0-based index of the video frame. The frame index must be that of a valid frame. The total number of frames available for retrieval can be queried via the @B_android#media#MediaMetadataRetriever#METADATA_KEY_VIDEO_FRAME_COUNT_E@ key."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain video or image sequences."], ["@B_java#lang#IllegalArgumentException_E@", "if the requested frame index does not exist."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@"], "Permissions": [], "Description": "This method is similar to @B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@ except that the default for @B_android#media#MediaMetadataRetriever#BitmapParams_E@ will be used.", "history": "Added in API level 28", "FullName": "public Bitmap getFrameAtIndex (int frameIndex)"}, "setDataSource(java.io.FileDescriptor, long, long)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to play"], ["long", "long: the offset into the file where the data to be played starts, in bytes. It must be non-negative"], ["long", "long: the length in bytes of the data to be played. It must be non-negative."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the arguments are invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "added in API level 10", "FullName": "public void setDataSource (FileDescriptor fd, long offset, long length)"}, "extractMetadata(int)": {"Returns": [["@B_java#lang#String_E@", "The meta data value associate with the given keyCode on success; null on failure."]], "Parameters": [["int", "int: One of the constants listed below at the end of the class."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after setDataSource(). This method retrieves the meta data value associated with the keyCode. The keyCode currently supported is listed below as METADATA_XXX constants. With any other value, it returns a null pointer.", "history": "Added in API level 10", "FullName": "public String extractMetadata (int keyCode)"}, "setDataSource(java.io.FileDescriptor,long,long)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to play"], ["long", "long: the offset into the file where the data to be played starts, in bytes. It must be non-negative"], ["long", "long: the length in bytes of the data to be played. It must be non-negative."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the arguments are invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "Added in API level 10", "FullName": "public void setDataSource (FileDescriptor fd, long offset, long length)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this resource, relinquishing any underlying resources. This method is invoked automatically on objects managed by the try-with-resources statement. While this interface method is declared to throw Exception, implementers are strongly encouraged to declare concrete implementations of the close method to throw more specific exceptions, or to throw no exception at all if the close operation cannot fail. Cases where the close operation may fail require careful attention by implementers. It is strongly advised to relinquish the underlying resources and to internally mark the resource as closed, prior to throwing the exception. The close method is unlikely to be invoked more than once and so this ensures that the resources are released in a timely manner. Furthermore it reduces problems that could arise when the resource wraps, or is wrapped, by another resource. Implementers of this interface are also strongly advised to not have the close method throw @B_java#lang#InterruptedException_E@. This exception interacts with a thread's interrupted status, and runtime misbehavior is likely to occur if an InterruptedException is AutoCloseable.close method should not throw it. Note that unlike the @B_java#io#Closeable#close_E@ method of @B_java#io#Closeable_E@, this close method is not required to be idempotent. In other words, calling this close method more than once may have some visible side effect, unlike Closeable.close which is required to have no effect if called more than once. However, implementers of this interface are strongly encouraged to make their close methods idempotent.", "history": "Added in API level 29", "FullName": "public void close ()"}, "setDataSource(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The URI of the input media."], ["@B_java#util#Map_E@", "Map: the headers to be sent together with the request for the data"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the URI is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (URI) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "Added in API level 14", "FullName": "public void setDataSource (String uri, Map<String, String> headers)"}, "setDataSource(android.media.MediaDataSource)": {"Returns": [], "Parameters": [["@B_android#media#MediaDataSource_E@", "MediaDataSource: the MediaDataSource for the media you want to play"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (MediaDataSource) to use.", "history": "Added in API level 23", "FullName": "public void setDataSource (MediaDataSource dataSource)"}, "getFramesAtIndex(int, int)": {"Returns": [["@B_java#util#List_E@", "An list of Bitmaps containing the requested video frames. The returned array could contain less frames than requested if the retrieval fails.This value will never be null."]], "Parameters": [["int", "int: 0-based index of the first video frame to retrieve. The frame index must be that of a valid frame. The total number of frames available for retrieval can be queried via the @B_android#media#MediaMetadataRetriever#METADATA_KEY_VIDEO_FRAME_COUNT_E@ key."], ["int", "int: number of consecutive video frames to retrieve. Must be a positive value. The stream must contain at least numFrames frames starting at frameIndex."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain video or image sequences."], ["@B_java#lang#IllegalArgumentException_E@", "if the frameIndex or numFrames is invalid, or the stream doesn't contain at least numFrames starting at frameIndex."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@"], "Permissions": [], "Description": "This method is similar to @B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@ except that the default for @B_android#media#MediaMetadataRetriever#BitmapParams_E@ will be used.", "history": "added in API level 28", "FullName": "public List<Bitmap> getFramesAtIndex (int frameIndex, int numFrames)"}, "setDataSource(android.content.Context,android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the Context to use when resolving the Uri"], ["@B_android#net#Uri_E@", "Uri: the Content URI of the data you want to play"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the Uri is invalid"], ["@B_java#lang#SecurityException_E@", "if the Uri cannot be used due to lack of permission."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source as a content Uri. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "Added in API level 10", "FullName": "public void setDataSource (Context context, Uri uri)"}, "getFrameAtIndex(int,android.media.MediaMetadataRetriever.BitmapParams)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap containing the requested video frame, or null if the retrieval fails."]], "Parameters": [["int", "int: 0-based index of the video frame. The frame index must be that of a valid frame. The total number of frames available for retrieval can be queried via the @B_android#media#MediaMetadataRetriever#METADATA_KEY_VIDEO_FRAME_COUNT_E@ key."], ["@B_android#media#MediaMetadataRetriever#BitmapParams_E@", "MediaMetadataRetriever.BitmapParams: BitmapParams that controls the returned bitmap config (such as pixel formats). This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the container doesn't contain video or image sequences."], ["@B_java#lang#IllegalArgumentException_E@", "if the requested frame index does not exist."]], "SeeAlso": ["@B_android#media#MediaMetadataRetriever#getFrameAtIndex_E@", "@B_android#media#MediaMetadataRetriever#getFramesAtIndex_E@"], "Permissions": [], "Description": "This method retrieves a video frame by its index. It should only be called after @B_android#media#MediaMetadataRetriever#setDataSource_E@. After the bitmap is returned, you can query the actual parameters that were used to create the bitmap from the BitmapParams argument, for instance to query the bitmap config used for the bitmap with @B_android#media#MediaMetadataRetriever#BitmapParams#getActualConfig_E@.", "history": "Added in API level 28", "FullName": "public Bitmap getFrameAtIndex (int frameIndex, MediaMetadataRetriever.BitmapParams params)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call it when one is done with the object. This method releases the memory allocated internally.", "history": "Added in API level 10", "FullName": "public void release ()"}, "setDataSource(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The path of the input media file."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the path is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (file pathname) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.", "history": "Added in API level 10", "FullName": "public void setDataSource (String path)"}, "getFrameAtTime(long,int)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved."]], "Parameters": [["long", "long: The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned."], ["int", "int: a hint on how the frame is found. Use @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@ if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@ often has larger performance overhead compared to the other options if there is no sync frame located at timeUs. Value is either 0 or a combination of @B_android#media#MediaMetadataRetriever#OPTION_PREVIOUS_SYNC_E@, @B_android#media#MediaMetadataRetriever#OPTION_NEXT_SYNC_E@, @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_SYNC_E@, and @B_android#media#MediaMetadataRetriever#OPTION_CLOSEST_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. If you don't need a full-resolution frame (for example, because you need a thumbnail image), use @B_android#media#MediaMetadataRetriever#getScaledFrameAtTime_E@ instead of this method.", "history": "Added in API level 10", "FullName": "public Bitmap getFrameAtTime (long timeUs, int option)"}}, "Inheritance": [], "ClassName": "android.media.MediaMetadataRetriever", "ClassDesc": "MediaMetadataRetriever class provides a unified interface for retrieving frame and meta data from an input media file."}