{"Functions": {"hasMetaData()": {"Returns": [["boolean", "true if this object contains metadata"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "R Returns true if this object contains metadata. If a Replaceable object has metadata, calls to the Replaceable API must be made so as to preserve metadata. If it does not, calls to the Replaceable API may be optimized to improve performance.", "history": "Added in API level 24", "FullName": "public abstract boolean hasMetaData ()"}, "getChars(int, int, char[], int)": {"Returns": [], "Parameters": [["int", "int: the beginning index to copy, inclusive; 0 <= start <= limit."], ["int", "int: the ending index to copy, exclusive; start <= limit <= length()."], ["char[]", "char: the destination array."], ["int", "int: the start offset in the destination array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies characters from this object into the destination character array. The first character to be copied is at index srcStart; the last character to be copied is at index srcLimit-1 (thus the total number of characters to be copied is srcLimit-srcStart). The characters are copied into the subarray of dst starting at index dstStart and ending at index dstStart + (srcLimit-srcStart) - 1.", "history": "added in API level 24", "FullName": "public abstract void getChars (int srcStart, int srcLimit, char[] dst, int dstStart)"}, "getChars(int,int,char[],int)": {"Returns": [], "Parameters": [["int", "int: the beginning index to copy, inclusive; 0 <= start <= limit."], ["int", "int: the ending index to copy, exclusive; start <= limit <= length()."], ["char[]", "char: the destination array."], ["int", "int: the start offset in the destination array."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies characters from this object into the destination character array. The first character to be copied is at index srcStart; the last character to be copied is at index srcLimit-1 (thus the total number of characters to be copied is srcLimit-srcStart). The characters are copied into the subarray of dst starting at index dstStart and ending at index dstStart + (srcLimit-srcStart) - 1.", "history": "Added in API level 24", "FullName": "public abstract void getChars (int srcStart, int srcLimit, char[] dst, int dstStart)"}, "copy(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["int", "int: the destination index. The characters from start..limit-1 will be copied to dest. Implementations of this method may assume that dest <= start || dest >= limit."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a substring of this object, retaining metadata. This method is used to duplicate or reorder substrings. The destination index must not overlap the source range. If hasMetaData() returns false, subclasses may use the naive implementation:", "history": "Added in API level 24", "FullName": "public abstract void copy (int start, int limit, int dest)"}, "charAt(int)": {"Returns": [["char", "16-bit code unit of text at given offset"]], "Parameters": [["int", "int: an integer between 0 and length()-1 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the 16-bit code unit at the given offset into the text.", "history": "Added in API level 24", "FullName": "public abstract char charAt (int offset)"}, "replace(int,int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["@B_java#lang#String_E@", "String: the text to replace characters start to limit - 1"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces a substring of this object with the given text. Subclasses must ensure that if the text between start and limit is equal to the replacement text, that replace has no effect. That is, any metadata should be unaffected. In addition, subclasses are encouraged to check for initial and trailing identical characters, and make a smaller replacement if possible. This will preserve as much metadata as possible.", "history": "Added in API level 24", "FullName": "public abstract void replace (int start, int limit, String text)"}, "copy(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["int", "int: the destination index. The characters from start..limit-1 will be copied to dest. Implementations of this method may assume that dest <= start || dest >= limit."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies a substring of this object, retaining metadata. This method is used to duplicate or reorder substrings. The destination index must not overlap the source range. If hasMetaData() returns false, subclasses may use the naive implementation:", "history": "added in API level 24", "FullName": "public abstract void copy (int start, int limit, int dest)"}, "length()": {"Returns": [["int", "number of 16-bit code units in text"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of 16-bit code units in the text.", "history": "Added in API level 24", "FullName": "public abstract int length ()"}, "replace(int, int, char[], int, int)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["char[]", "char: the text to replace characters start to limit - 1"], ["int", "int: the beginning index into chars, inclusive; 0 <= start <= limit."], ["int", "int: the number of characters of chars."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces a substring of this object with the given text. Subclasses must ensure that if the text between start and limit is equal to the replacement text, that replace has no effect. That is, any metadata should be unaffected. In addition, subclasses are encouraged to check for initial and trailing identical characters, and make a smaller replacement if possible. This will preserve as much metadata as possible.", "history": "added in API level 24", "FullName": "public abstract void replace (int start, int limit, char[] chars, int charsStart, int charsLen)"}, "replace(int, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["@B_java#lang#String_E@", "String: the text to replace characters start to limit - 1"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces a substring of this object with the given text. Subclasses must ensure that if the text between start and limit is equal to the replacement text, that replace has no effect. That is, any metadata should be unaffected. In addition, subclasses are encouraged to check for initial and trailing identical characters, and make a smaller replacement if possible. This will preserve as much metadata as possible.", "history": "added in API level 24", "FullName": "public abstract void replace (int start, int limit, String text)"}, "char32At(int)": {"Returns": [["int", "32-bit code point of text at given offset"]], "Parameters": [["int", "int: an integer between 0 and length()-1 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the 32-bit code point at the given 16-bit offset into the text. This assumes the text is stored as 16-bit code units with surrogate pairs intermixed. If the offset of a leading or trailing code unit of a surrogate pair is given, return the code point of the surrogate pair. Most subclasses can return android.icu.text.UTF16.charAt(this, offset).", "history": "Added in API level 24", "FullName": "public abstract int char32At (int offset)"}, "replace(int,int,char[],int,int)": {"Returns": [], "Parameters": [["int", "int: the beginning index, inclusive; 0 <= start <= limit."], ["int", "int: the ending index, exclusive; start <= limit <= length()."], ["char[]", "char: the text to replace characters start to limit - 1"], ["int", "int: the beginning index into chars, inclusive; 0 <= start <= limit."], ["int", "int: the number of characters of chars."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces a substring of this object with the given text. Subclasses must ensure that if the text between start and limit is equal to the replacement text, that replace has no effect. That is, any metadata should be unaffected. In addition, subclasses are encouraged to check for initial and trailing identical characters, and make a smaller replacement if possible. This will preserve as much metadata as possible.", "history": "Added in API level 24", "FullName": "public abstract void replace (int start, int limit, char[] chars, int charsStart, int charsLen)"}}, "Inheritance": [], "ClassName": "android.icu.text.Replaceable", "ClassDesc": "Replaceable is an interface representing a string of characters that supports the replacement of a range of itself with a new string of characters. It is used by APIs that change a piece of text while retaining metadata. Metadata is data other than the Unicode characters returned by char32At(). One example of metadata is style attributes; another is an edit history, marking each character with an author and revision number. An implicit aspect of the Replaceable API is that during a replace operation, new characters take on the metadata of the old characters. For example, if the string \"the Replaceable specifies ranges using a start offset and a limit offset. The range of characters thus specified includes the characters at offset start..limit-1. That is, the start offset is inclusive, and the limit offset is exclusive. Replaceable also includes API to access characters in the string: length(), charAt(), char32At(), and extractBetween(). For a subclass to support metadata, typical behavior of replace() is the following: Set the metadata of the new text to the metadata of the first character replaced If no characters are replaced, use the metadata of the previous character If there is no previous character (i.e. start == 0), use the following character If there is no following character (i.e. the replaceable was empty), use default metadata If the code point U+FFFF is seen, it should be interpreted as a special marker having no metadata If this is not the behavior, the subclass should document any differences."}