{"Functions": {"KeyFactorySpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public KeyFactorySpi ()"}, "engineTranslateKey(java.security.Key)": {"Returns": [["@B_java#security#Key_E@", "the translated key."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key whose provider is unknown or untrusted."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key cannot be processed by this key factory."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this key factory.", "history": "Added in API level 1", "FullName": "protected abstract Key engineTranslateKey (Key key)"}, "engineGeneratePublic(java.security.spec.KeySpec)": {"Returns": [["@B_java#security#PublicKey_E@", "the public key."]], "Parameters": [["@B_java#security#spec#KeySpec_E@", "KeySpec: the specification (key material) of the public key."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the given key specification is inappropriate for this key factory to produce a public key."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a public key object from the provided key specification (key material).", "history": "Added in API level 1", "FullName": "protected abstract PublicKey engineGeneratePublic (KeySpec keySpec)"}, "engineGetKeySpec(java.security.Key,java.lang.Class<T>)": {"Returns": [["T", "the underlying key specification (key material) in an instance of the requested specification class."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key."], ["@B_java#lang#Class_E@", "Class: the specification class in which the key material should be returned."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the requested key specification is inappropriate for the given key, or the given key cannot be dealt with (e.g., the given key has an unrecognized format)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specification (key material) of the given key object. keySpec identifies the specification class in which the key material should be returned. It could, for example, be DSAPublicKeySpec.class, to indicate that the key material should be returned in an instance of the DSAPublicKeySpec class.", "history": "Added in API level 1", "FullName": "protected abstract T engineGetKeySpec (Key key, Class<T> keySpec)"}, "engineGeneratePrivate(java.security.spec.KeySpec)": {"Returns": [["@B_java#security#PrivateKey_E@", "the private key."]], "Parameters": [["@B_java#security#spec#KeySpec_E@", "KeySpec: the specification (key material) of the private key."]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the given key specification is inappropriate for this key factory to produce a private key."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a private key object from the provided key specification (key material).", "history": "Added in API level 1", "FullName": "protected abstract PrivateKey engineGeneratePrivate (KeySpec keySpec)"}}, "Inheritance": [], "ClassName": "java.security.KeyFactorySpi", "ClassDesc": "This class defines the KeyFactory class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a key factory for a particular algorithm. Key factories are used to convert Key) into Key factories are bi-directional. That is, they allow you to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. Multiple compatible key specifications may exist for the same key. For example, a DSA public key may be specified using DSAPublicKeySpec or X509EncodedKeySpec. A key factory can be used to translate between compatible key specifications. A provider should document all the key specifications supported by its key factory."}