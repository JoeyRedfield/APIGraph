{"Functions": {"PluralFormat(android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the PluralFormat will be configured with rules for this locale. This locale will also be used for standard number formatting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale)"}, "format(double)": {"Returns": [["@B_java#lang#String_E@", "the string containing the formatted plural message."]], "Parameters": [["double", "double: a number for which the plural message should be formatted. If no pattern has been applied to this PluralFormat object yet, the formatted number will be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a plural message for a given number.", "history": "Added in API level 24", "FullName": "public final String format (double number)"}, "PluralFormat(android.icu.util.ULocale,android.icu.text.PluralRules,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the PluralFormat will be configured with rules for this locale. This locale will also be used for standard number formatting."], ["@B_android#icu#text#PluralRules_E@", "PluralRules: defines the behavior of the PluralFormat object."], ["@B_java#lang#String_E@", "String: the pattern for this PluralFormat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given set of rules, a pattern and a locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale, PluralRules rules, String pattern)"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "nothing because this method is not yet implemented."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: defines the position where parsing is to begin, and upon return, the position where parsing left off. If the position has not changed upon return, then parsing failed."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "will always be thrown by this method."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not yet supported by PluralFormat.", "history": "added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}, "setNumberFormat(android.icu.text.NumberFormat)": {"Returns": [], "Parameters": [["@B_android#icu#text#NumberFormat_E@", "NumberFormat: the number format to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the number format used by this formatter. You only need to call this if you want a different number format than the default formatter for the locale.", "history": "Added in API level 24", "FullName": "public void setNumberFormat (NumberFormat format)"}, "PluralFormat(android.icu.text.PluralRules,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#icu#text#PluralRules_E@", "PluralRules: defines the behavior of the PluralFormat object."], ["@B_java#lang#String_E@", "String: the pattern for this PluralFormat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given set of rules and a pattern. The standard number formatting will be done using the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (PluralRules rules, String pattern)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the string buffer passed in as toAppendTo, with formatted text appended."]], "Parameters": [["@B_java#lang#Object_E@", "Object: a number object (instance of Number for which the plural message should be formatted. If no pattern has been applied to this PluralFormat object yet, the formatted number will be returned. Note: If this object is not an instance of Number, the toAppendTo will not be modified."], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the formatted message will be appended to this StringBuffer."], ["@B_java#text#FieldPosition_E@", "FieldPosition: will be ignored by this method."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if number is not an instance of Number"]], "SeeAlso": [], "Permissions": [], "Description": "Formats a plural message for a given number and appends the formatted message to the given StringBuffer.", "history": "Added in API level 24", "FullName": "public StringBuffer format (Object number, StringBuffer toAppendTo, FieldPosition pos)"}, "PluralFormat(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the default number formatting will be done using this locale."], ["@B_android#icu#text#PluralRules#PluralType_E@", "PluralRules.PluralType: The plural type (e.g., cardinal or ordinal)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PluralFormat for the plural type. The standard number formatting will be done using the given locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale, PluralRules.PluralType type)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object rhs)"}, "PluralFormat(java.util.Locale,android.icu.text.PluralRules)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the default number formatting will be done using this locale."], ["@B_android#icu#text#PluralRules_E@", "PluralRules: defines the behavior of the PluralFormat object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given set of rules. The standard number formatting will be done using the given locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (Locale locale, PluralRules rules)"}, "applyPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for this plural format."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the pattern used by this plural format. The method parses the pattern and creates a map of format strings for the plural rules. Patterns and their interpretation are specified in the class description.", "history": "Added in API level 24", "FullName": "public void applyPattern (String pattern)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "PluralFormat(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the PluralFormat will be configured with rules for this locale. This locale will also be used for standard number formatting."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given @B_java#util#Locale_E@.", "history": "Added in API level 24", "FullName": "public PluralFormat (Locale locale)"}, "PluralFormat(android.icu.util.ULocale,android.icu.text.PluralRules.PluralType,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the PluralFormat will be configured with rules for this locale. This locale will also be used for standard number formatting."], ["@B_android#icu#text#PluralRules#PluralType_E@", "PluralRules.PluralType: The plural type (e.g., cardinal or ordinal)."], ["@B_java#lang#String_E@", "String: the pattern for this PluralFormat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PluralFormat for a plural type, a pattern and a locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale, PluralRules.PluralType type, String pattern)"}, "PluralFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for the default FORMAT locale. This locale will be used to get the set of plural rules and for standard number formatting.", "history": "Added in API level 24", "FullName": "public PluralFormat ()"}, "PluralFormat(java.util.Locale,android.icu.text.PluralRules.PluralType)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the default number formatting will be done using this locale."], ["@B_android#icu#text#PluralRules#PluralType_E@", "PluralRules.PluralType: The plural type (e.g., cardinal or ordinal)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PluralFormat for the plural type. The standard number formatting will be done using the given @B_java#util#Locale_E@.", "history": "Added in API level 24", "FullName": "public PluralFormat (Locale locale, PluralRules.PluralType type)"}, "PluralFormat(android.icu.util.ULocale,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the PluralFormat will be configured with rules for this locale. This locale will also be used for standard number formatting."], ["@B_java#lang#String_E@", "String: the pattern for this PluralFormat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given pattern string and locale. The locale will be used to get the set of plural rules and for standard number formatting. Example code:", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale, String pattern)"}, "PluralFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for this PluralFormat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pattern is invalid."]], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given pattern string. The default FORMAT locale will be used to get the set of plural rules and for standard number formatting.", "history": "Added in API level 24", "FullName": "public PluralFormat (String pattern)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "equals(android.icu.text.PluralFormat)": {"Returns": [["boolean", "true if this equals rhs"]], "Parameters": [["@B_android#icu#text#PluralFormat_E@", "PluralFormat: the PluralFormat to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this equals the provided PluralFormat.", "history": "Added in API level 24", "FullName": "public boolean equals (PluralFormat rhs)"}, "PluralFormat(android.icu.util.ULocale,android.icu.text.PluralRules)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the default number formatting will be done using this locale."], ["@B_android#icu#text#PluralRules_E@", "PluralRules: defines the behavior of the PluralFormat object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given set of rules. The standard number formatting will be done using the given locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (ULocale ulocale, PluralRules rules)"}, "parseObject(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Object_E@", "nothing because this method is not yet implemented."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: defines the position where parsing is to begin, and upon return, the position where parsing left off. If the position has not changed upon return, then parsing failed."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "will always be thrown by this method."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not yet supported by PluralFormat.", "history": "Added in API level 24", "FullName": "public Object parseObject (String source, ParsePosition pos)"}, "toPattern()": {"Returns": [["@B_java#lang#String_E@", "the pattern string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern for this PluralFormat.", "history": "Added in API level 24", "FullName": "public String toPattern ()"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "nothing because this method is not yet implemented."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: defines the position where parsing is to begin, and upon return, the position where parsing left off. If the position has not changed upon return, then parsing failed."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "will always be thrown by this method."]], "SeeAlso": [], "Permissions": [], "Description": "This method is not yet supported by PluralFormat.", "history": "Added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}, "PluralFormat(android.icu.text.PluralRules)": {"Returns": [], "Parameters": [["@B_android#icu#text#PluralRules_E@", "PluralRules: defines the behavior of the PluralFormat object."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a new cardinal-number PluralFormat for a given set of rules. The standard number formatting will be done using the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public PluralFormat (PluralRules rules)"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@"], "ClassName": "android.icu.text.PluralFormat", "ClassDesc": "PluralFormat supports the creation of internationalized messages with plural inflection. It is based on PluralFormat selects the appropriate message based on the number. Different languages have different ways to inflect plurals. Creating internationalized messages that include plural forms is only feasible when the framework is able to handle plural forms of ChoiceFormat doesn't handle this well, because it attaches a number interval to each message and selects the message whose interval contains a given number. This can only handle a finite number of intervals. But in some languages, like Polish, one plural case applies to infinitely many intervals (e.g., the paucal case applies to numbers ending with 2, 3, or 4 except those ending with 12, 13, or 14). Thus ChoiceFormat is not adequate. PluralFormat deals with this by breaking the problem into two parts: It uses PluralRules that can define more complex conditions for a plural case than just a single interval. These plural rules define both what plural cases exist in a language, and to which numbers these cases apply. It provides predefined plural rules for many languages. Thus, the programmer need not worry about the plural cases of a language and does not have to define the plural cases; they can simply use the predefined keywords. The whole plural formatting of messages can be done using localized patterns from resource bundles. For predefined plural rules, see the CLDR Note: Typically, plural formatting is done via MessageFormat with a plural argument type, rather than using a stand-alone PluralFormat. This discussion assumes that you use PluralFormat with a predefined set of plural rules. You can create one using one of the constructors that takes a ULocale object. To specify the message pattern, you can either pass it to the constructor or set it explicitly using the applyPattern() method. The format() method takes a number object and selects the message of the matching plural case. This message will be returned. The pattern text defines the message output for each plural case of the specified locale. Syntax: There are 6 predefined case keywords in CLDR/ICU - 'zero', 'one', 'two', 'few', 'many' and 'other'. You always have to define a message text for the default plural case \"other\" which is contained in every rule set. If you do not specify a message text for a particular plural case, the message text of the plural case \"other\" gets assigned to this plural case. When formatting, the input number is first matched against the explicitValue clauses. If there is no exact-number match, then a keyword is selected by calling the PluralRules with the input number minus the offset. (The offset defaults to 0 if it is omitted from the pattern string.) If there is no clause with that keyword, then the \"other\" clauses is returned. An unquoted pound sign (#) in the selected sub-message itself (i.e., outside of arguments nested in the sub-message) is replaced by the input number minus the offset. The number-minus-offset value is formatted using a NumberFormat for the PluralFormat's locale. If you need special number formatting, you have to use a MessageFormat and explicitly specify a NumberFormat argument. For a usage example, see the @B_android#icu#text#MessageFormat_E@ class documentation. If you need to use PluralFormat with custom rules, you can create a PluralRules object and pass it to PluralFormat's constructor. If you also specify a locale in this constructor, this locale will be used to format the number in the message texts. For more information about PluralRules, see @B_android#icu#text#PluralRules_E@."}