{"Functions": {"shouldRunOnUiThread(org.junit.runner.Description)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["Description", "Description no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean shouldRunOnUiThread (Description description)"}, "UiThreadTestRule()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "UiThreadTestRule ()"}, "runOnUiThread(java.lang.Runnable)": {"Returns": [], "Parameters": [["Runnable", "Runnable: runnable containing test code in the @B_java#lang#Runnable#run_E@ method"]], "Throws": [["Throwable", ""]], "SeeAlso": ["@B_android#support#test#annotation#UiThreadTest_E@"], "Permissions": [], "Description": "Helper for running portions of a test on the UI thread. Note, in most cases it is simpler to annotate the test method with @B_android#support#test#annotation#UiThreadTest_E@, which will run the entire test method including methods annotated with Use this method if you need to switch in and out of the UI thread to perform your test.", "history": "", "FullName": "void runOnUiThread (Runnable runnable)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.rule.UiThreadTestRule", "ClassDesc": "use @B_android#support#test#annotation#UiThreadTest_E@ directly without this rule. @B_android#support#test#annotation#UiThreadTest_E@ is now supported as part of the core Android test runner to provide the ability to run methods annotated with @Before and @After on the UI thread regardless of what @Test is annotated with. This rule allows the test method annotated with @B_android#support#test#annotation#UiThreadTest_E@ to execute on the application's main thread (or UI thread). Note, methods annotated with"}