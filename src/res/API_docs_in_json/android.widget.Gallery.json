{"Functions": {"showContextMenu(float, float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "added in API level 24", "FullName": "public boolean showContextMenu (float x, float y)"}, "onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)": {"Returns": [["boolean", "true if the event is consumed, else false"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The first down motion event that started the fling."], ["@B_android#view#MotionEvent_E@", "MotionEvent: The move motion event that triggered the current onFling."], ["float", "float: The velocity of this fling measured in pixels per second along the x axis."], ["float", "float: The velocity of this fling measured in pixels per second along the y axis."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notified of a fling event when it occurs with the initial on down @B_android#view#MotionEvent_E@ and the matching up @B_android#view#MotionEvent_E@. The calculated velocity is supplied along the x and y axis in pixels per second.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onFling (MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)"}, "onLongPress(android.view.MotionEvent)": {"Returns": [], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notified when a long press occurs with the initial on down @B_android#view#MotionEvent_E@ that trigged it.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void onLongPress (MotionEvent e)"}, "Gallery(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Gallery (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onShowPress(android.view.MotionEvent)": {"Returns": [], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The down motion event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The user has performed a down @B_android#view#MotionEvent_E@ and not performed a move or up yet. This event is commonly used to provide visual feedback to the user to let them know that their action has been recognized i.e. highlight an element.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void onShowPress (MotionEvent e)"}, "getContextMenuInfo()": {"Returns": [["@B_android#view#ContextMenu#ContextMenuInfo_E@", "Extra information about the item for which the context menu should be shown. This information will vary across different subclasses of View."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Views should implement this if they have extra information to associate with the context menu. The return result is supplied as a parameter to the @B_android#view#View#OnCreateContextMenuListener#onCreateContextMenu_E@ callback.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected ContextMenu.ContextMenuInfo getContextMenuInfo ()"}, "dispatchSetSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The new selected state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch setSelected to all of this View's children.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void dispatchSetSelected (boolean selected)"}, "showContextMenuForChild(android.view.View)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: the source view where the context menu was first invoked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for the specified view or its ancestors. In most cases, a subclass does not need to override this. However, if the subclass is added directly to the window manager (for example, @B_android#view#ViewManager#addView_E@) then it should override this and show the context menu.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean showContextMenuForChild (View originalView)"}, "Gallery(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Gallery (Context context)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "showContextMenuForChild(android.view.View,float,float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: the source view where the context menu was first invoked"], ["float", "float: the X coordinate in pixels relative to the original view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the original view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for the specified view or its ancestors anchored to the specified view-relative coordinate. In most cases, a subclass does not need to override this. However, if the subclass is added directly to the window manager (for example, @B_android#view#ViewManager#addView_E@) then it should override this and show the context menu. If a subclass overrides this method it should also override @B_android#view#ViewParent#showContextMenuForChild_E@.", "history": "Added in API level 24 Deprecated in API level 16", "FullName": "public boolean showContextMenuForChild (View originalView, float x, float y)"}, "Gallery(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Gallery (Context context, AttributeSet attrs)"}, "computeHorizontalScrollRange()": {"Returns": [["int", "the total horizontal range represented by the horizontal scrollbar"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal range that the horizontal scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollExtent_E@ and @B_android#view#View#computeHorizontalScrollOffset_E@. The default range is the drawing width of this view.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected int computeHorizontalScrollRange ()"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": ["@B_android#view#View#onKeyDown_E@"], "Permissions": [], "Description": "Handles left, right, and clicking", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "computeHorizontalScrollExtent()": {"Returns": [["int", "the horizontal extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal extent of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollRange_E@ and @B_android#view#View#computeHorizontalScrollOffset_E@. The default extent is the drawing width of this view.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected int computeHorizontalScrollExtent ()"}, "getChildDrawingOrder(int,int)": {"Returns": [["int", "the container position of a child for this drawing order position."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: the drawing order position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts drawing order position to container position. Override this if you want to change the drawing order of children. By default, it returns drawingPosition. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected int getChildDrawingOrder (int childCount, int i)"}, "Gallery(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Gallery (Context context, AttributeSet attrs, int defStyleAttr)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected void onFocusChanged (boolean gainFocus, int direction, Rect previouslyFocusedRect)"}, "getChildDrawingOrder(int, int)": {"Returns": [["int", "The index of the child to draw this iteration."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: The current iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the child to draw for this iteration. Override this if you want to change the drawing order of children. By default, it returns i. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "added in API level 1", "FullName": "protected int getChildDrawingOrder (int childCount, int i)"}, "onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)": {"Returns": [["boolean", "true if the event is consumed, else false"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The first down motion event that started the scrolling."], ["@B_android#view#MotionEvent_E@", "MotionEvent: The move motion event that triggered the current onScroll."], ["float", "float: The distance along the X axis that has been scrolled since the last call to onScroll. This is NOT the distance between e1 and e2."], ["float", "float: The distance along the Y axis that has been scrolled since the last call to onScroll. This is NOT the distance between e1 and e2."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notified when a scroll occurs with the initial on down @B_android#view#MotionEvent_E@ and the current move @B_android#view#MotionEvent_E@. The distance in x and y is also supplied for convenience.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onScroll (MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)"}, "setGravity(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes how the child views are aligned.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setGravity (int gravity)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected ViewGroup.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)"}, "getChildStaticTransformation(android.view.View,android.view.animation.Transformation)": {"Returns": [["boolean", "true if the transformation was set, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: The child view whose static transform is being requested"], ["@B_android#view#animation#Transformation_E@", "Transformation: The Transformation which will hold the result"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets t to be the static transformation of the child, if set, returning a boolean to indicate whether a static transform was set. The default implementation simply returns false; subclasses may override this method for different behavior. @B_android#view#ViewGroup#setStaticTransformationsEnabled_E@ must be set to true for this method to be called.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected boolean getChildStaticTransformation (View child, Transformation t)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "showContextMenu()": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean showContextMenu ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public ViewGroup.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "setSpacing(int)": {"Returns": [], "Parameters": [["int", "int: The spacing in pixels between items in the Gallery"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the spacing between items in a Gallery", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setSpacing (int spacing)"}, "computeHorizontalScrollOffset()": {"Returns": [["int", "the horizontal offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the horizontal offset of the horizontal scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeHorizontalScrollRange_E@ and @B_android#view#View#computeHorizontalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected int computeHorizontalScrollOffset ()"}, "setCallbackDuringFling(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether or not to callback on the listener while the items are being flinged."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether or not to callback on any @B_android#widget#AdapterView#getOnItemSelectedListener_E@ while the items are being flinged. If false, only the final selected item will cause the callback. If true, all items between the first and the final will cause callbacks.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setCallbackDuringFling (boolean shouldCallback)"}, "dispatchSetPressed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The new pressed state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch setPressed to all of this View's children.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected void dispatchSetPressed (boolean pressed)"}, "setUnselectedAlpha(float)": {"Returns": [], "Parameters": [["float", "float: the alpha for the items that are not selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the alpha of items that are not selected in the Gallery.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setUnselectedAlpha (float unselectedAlpha)"}, "showContextMenu(float,float)": {"Returns": [["boolean", "true if the context menu was shown, false otherwise"]], "Parameters": [["float", "float: the X coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"], ["float", "float: the Y coordinate in pixels relative to the view to which the menu should be anchored, or @B_java#lang#Float#NaN_E@ to disable anchoring"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shows the context menu for this view anchored to the specified view-relative coordinate.", "history": "Added in API level 24 Deprecated in API level 16", "FullName": "public boolean showContextMenu (float x, float y)"}, "onSingleTapUp(android.view.MotionEvent)": {"Returns": [["boolean", "true if the event is consumed, else false"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The up motion event that completed the first tap"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notified when a tap occurs with the up @B_android#view#MotionEvent_E@ that triggered it.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onSingleTapUp (MotionEvent e)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": ["@B_android#view#View#onKeyDown_E@"], "Permissions": [], "Description": "Handles left, right, and clicking", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setAnimationDuration(int)": {"Returns": [], "Parameters": [["int", "int: The duration of the transition, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets how long the transition animation should run when a child view changes position. Only relevant if animation is turned on.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public void setAnimationDuration (int animationDurationMillis)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "performAccessibilityAction(int, android.os.Bundle)": {"Returns": [["", "Whether the action was performed."]], "Parameters": [["int", "The action to perform."], ["@B_android#os#Bundle_E@", "Optional action arguments."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the specified accessibility action on the view. For possible accessibility actions look at @B_android#view#accessibility#AccessibilityNodeInfo_E@. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#performAccessibilityAction_E@ is responsible for handling this call. The default implementation will delegate @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_BACKWARD_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_SCROLL_FORWARD_E@ to nested scrolling parents if @B_android#view#View#isNestedScrollingEnabled_E@ on this view.", "history": "Added in API level 16", "FullName": "public boolean performAccessibilityAction (int action, Bundle arguments)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected void onAttachedToWindow ()"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "protected ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "onDown(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The down motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notified when a tap occurs with the down @B_android#view#MotionEvent_E@ that triggered it. This will be triggered immediately for every down event. All other events should be preceded by this.", "history": "Added in API level 1 Deprecated in API level 16", "FullName": "public boolean onDown (MotionEvent e)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23 Deprecated in API level 16", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@", "@B_android#widget#AbsSpinner_E@"], "ClassName": "android.widget.Gallery", "ClassDesc": "This widget is no longer supported. Other horizontally scrolling widgets include @B_android#widget#HorizontalScrollView_E@ and https:##developer#android#com@B_android#support#v4#view#ViewPager_E@ from the support library. A view that shows items in a center-locked, horizontally scrolling list. The default values for the Gallery assume you will be using @B_android#R#styleable#Theme_galleryItemBackground_E@ as the background for each View given to the Gallery from the Adapter. If you are not doing this, you may need to adjust some Gallery properties, such as the spacing. Views given to the Gallery should use @B_android#widget#Gallery#LayoutParams_E@ as their layout parameters type."}