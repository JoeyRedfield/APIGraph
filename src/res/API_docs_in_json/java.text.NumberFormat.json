{"Functions": {"getCurrencyInstance(java.util.Locale)": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for currency formatting"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a currency format for the specified locale.", "history": "Added in API level 1", "FullName": "public static NumberFormat getCurrencyInstance (Locale inLocale)"}, "setMaximumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getMaximumFractionDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the fraction portion of a number. maximumFractionDigits must be \u2265 minimumFractionDigits. If the new value for maximumFractionDigits is less than the current value of minimumFractionDigits, then minimumFractionDigits will also be set to the new value.", "history": "Added in API level 1", "FullName": "public void setMaximumFractionDigits (int newValue)"}, "setMinimumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the integer portion of a number. minimumIntegerDigits must be \u2264 maximumIntegerDigits. If the new value for minimumIntegerDigits exceeds the current value of maximumIntegerDigits, then maximumIntegerDigits will also be set to the new value", "history": "Added in API level 1", "FullName": "public void setMinimumIntegerDigits (int newValue)"}, "format(double,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted StringBuffer"]], "Parameters": [["double", "double: the double number to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the StringBuffer to which the formatted text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: the field position"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 1", "FullName": "public abstract StringBuffer format (double number, StringBuffer toAppendTo, FieldPosition pos)"}, "setMinimumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getMinimumFractionDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the fraction portion of a number. minimumFractionDigits must be \u2264 maximumFractionDigits. If the new value for minimumFractionDigits exceeds the current value of maximumFractionDigits, then maximumIntegerDigits will also be set to the new value", "history": "Added in API level 1", "FullName": "public void setMinimumFractionDigits (int newValue)"}, "getMinimumFractionDigits()": {"Returns": [["int", "the minimum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMinimumFractionDigits_E@"], "Permissions": [], "Description": "Returns the minimum number of digits allowed in the fraction portion of a number.", "history": "Added in API level 1", "FullName": "public int getMinimumFractionDigits ()"}, "getMaximumFractionDigits()": {"Returns": [["int", "the maximum number of digits."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMaximumFractionDigits_E@"], "Permissions": [], "Description": "Returns the maximum number of digits allowed in the fraction portion of a number.", "history": "Added in API level 1", "FullName": "public int getMaximumFractionDigits ()"}, "getNumberInstance(java.util.Locale)": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for general-purpose number formatting"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a general-purpose number format for the specified locale.", "history": "Added in API level 1", "FullName": "public static NumberFormat getNumberInstance (Locale inLocale)"}, "format(double)": {"Returns": [["@B_java#lang#String_E@", "the formatted String"]], "Parameters": [["double", "double: the double number to format"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 1", "FullName": "public final String format (double number)"}, "getMinimumIntegerDigits()": {"Returns": [["int", "the minimum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the minimum number of digits allowed in the integer portion of a number.", "history": "Added in API level 1", "FullName": "public int getMinimumIntegerDigits ()"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "the parsed value"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: the parse position"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#isParseIntegerOnly_E@", "@B_java#text#Format#parseObject_E@"], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged!", "history": "added in API level 1", "FullName": "public abstract Number parse (String source, ParsePosition parsePosition)"}, "parse(java.lang.String)": {"Returns": [["@B_java#lang#Number_E@", "A Number parsed from the string."]], "Parameters": [["@B_java#lang#String_E@", "String: A String whose beginning should be parsed."]], "Throws": [["@B_java#text#ParseException_E@", "if the beginning of the specified string cannot be parsed."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from the beginning of the given string to produce a number. The method may not use the entire text of the given string. See the @B_java#text#NumberFormat#parse_E@ method for more information on number parsing.", "history": "Added in API level 1", "FullName": "public Number parse (String source)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the value passed in as toAppendTo"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the number to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the StringBuffer to which the formatted text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if number is null or not an instance of Number."], ["@B_java#lang#NullPointerException_E@", "if toAppendTo or pos is null"], ["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#FieldPosition_E@"], "Permissions": [], "Description": "Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of @B_java#lang#Number_E@. This implementation extracts the number's value using @B_java#lang#Number#longValue_E@ for all integral type values that can be converted to long without loss of information, including BigInteger values with a @B_java#math#BigInteger#bitLength_E@ of less than 64, and @B_java#lang#Number#doubleValue_E@ for all other types. It then calls @B_java#text#NumberFormat#format_E@ or @B_java#text#NumberFormat#format_E@. This may result in loss of magnitude information and precision for BigInteger and BigDecimal values.", "history": "Added in API level 1", "FullName": "public StringBuffer format (Object number, StringBuffer toAppendTo, FieldPosition pos)"}, "getMaximumIntegerDigits()": {"Returns": [["int", "the maximum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the maximum number of digits allowed in the integer portion of a number.", "history": "Added in API level 1", "FullName": "public int getMaximumIntegerDigits ()"}, "getRoundingMode()": {"Returns": [["@B_java#math#RoundingMode_E@", "The RoundingMode used for this NumberFormat."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "The default implementation always throws this exception"]], "SeeAlso": ["@B_java#text#NumberFormat#setRoundingMode_E@"], "Permissions": [], "Description": "Gets the @B_java#math#RoundingMode_E@ used in this NumberFormat. The default implementation of this method in NumberFormat always throws @B_java#lang#UnsupportedOperationException_E@. Subclasses which handle different rounding modes should override this method.", "history": "Added in API level 9", "FullName": "public RoundingMode getRoundingMode ()"}, "getPercentInstance(java.util.Locale)": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for percentage formatting"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a percentage format for the specified locale.", "history": "Added in API level 1", "FullName": "public static NumberFormat getPercentInstance (Locale inLocale)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "isParseIntegerOnly()": {"Returns": [["boolean", "true if numbers should be parsed as integers only; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string \"1234.\" would be parsed as the integer value 1234 and parsing would stop at the \".\" character. Of course, the exact format accepted by the parse operation is locale dependant and determined by sub-classes of NumberFormat.", "history": "Added in API level 1", "FullName": "public boolean isParseIntegerOnly ()"}, "setRoundingMode(java.math.RoundingMode)": {"Returns": [], "Parameters": [["@B_java#math#RoundingMode_E@", "RoundingMode: The RoundingMode to be used"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "The default implementation always throws this exception"], ["@B_java#lang#NullPointerException_E@", "if roundingMode is null"]], "SeeAlso": ["@B_java#text#NumberFormat#getRoundingMode_E@"], "Permissions": [], "Description": "Sets the @B_java#math#RoundingMode_E@ used in this NumberFormat. The default implementation of this method in NumberFormat always throws @B_java#lang#UnsupportedOperationException_E@. Subclasses which handle different rounding modes should override this method.", "history": "Added in API level 9", "FullName": "public void setRoundingMode (RoundingMode roundingMode)"}, "setMaximumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the integer portion of a number. maximumIntegerDigits must be \u2265 minimumIntegerDigits. If the new value for maximumIntegerDigits is less than the current value of minimumIntegerDigits, then minimumIntegerDigits will also be set to the new value.", "history": "Added in API level 1", "FullName": "public void setMaximumIntegerDigits (int newValue)"}, "getCurrencyInstance()": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for currency formatting"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Returns a currency format for the current default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#NumberFormat#getCurrencyInstance_E@.", "history": "Added in API level 1", "FullName": "public static final NumberFormat getCurrencyInstance ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides hashCode.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getCurrency()": {"Returns": [["@B_java#util#Currency_E@", "the currency used by this number format, or null"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the number format class doesn't implement currency formatting"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the currency used by this number format when formatting currency values. The initial value is derived in a locale dependent way. The returned value may be null if no valid currency could be determined and no currency has been set using @B_java#text#NumberFormat#setCurrency_E@. The default implementation throws UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public Currency getCurrency ()"}, "getInstance()": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for general-purpose number formatting"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a general-purpose number format for the current default @B_java#util#Locale#Category#FORMAT_E@ locale. This is the same as calling @B_java#text#NumberFormat#getNumberInstance_E@.", "history": "Added in API level 1", "FullName": "public static final NumberFormat getInstance ()"}, "format(long,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the formatted StringBuffer"]], "Parameters": [["long", "long: the long number to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the StringBuffer to which the formatted text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: the field position"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 1", "FullName": "public abstract StringBuffer format (long number, StringBuffer toAppendTo, FieldPosition pos)"}, "NumberFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "protected NumberFormat ()"}, "parseObject(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Object_E@", "A Number parsed from the string. In case of error, returns null."]], "Parameters": [["@B_java#lang#String_E@", "String: A String, part of which should be parsed."], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. See the @B_java#text#NumberFormat#parse_E@ method for more information on number parsing.", "history": "Added in API level 1", "FullName": "public final Object parseObject (String source, ParsePosition pos)"}, "setGroupingUsed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if grouping is used; false otherwise"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#isGroupingUsed_E@"], "Permissions": [], "Description": "Set whether or not grouping will be used in this format.", "history": "Added in API level 1", "FullName": "public void setGroupingUsed (boolean newValue)"}, "getNumberInstance()": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for general-purpose number formatting"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Returns a general-purpose number format for the current default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#NumberFormat#getNumberInstance_E@.", "history": "Added in API level 1", "FullName": "public static final NumberFormat getNumberInstance ()"}, "getIntegerInstance()": {"Returns": [["@B_java#text#NumberFormat_E@", "a number format for integer values"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getRoundingMode_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Returns an integer number format for the current default @B_java#util#Locale#Category#FORMAT_E@ locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see @B_java#math#RoundingMode#HALF_EVEN_E@) for formatting, and to parse only the integer part of an input string (see @B_java#text#NumberFormat#isParseIntegerOnly_E@). This is equivalent to calling @B_java#text#NumberFormat#getIntegerInstance_E@.", "history": "Added in API level 1", "FullName": "public static final NumberFormat getIntegerInstance ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for general-purpose number formatting"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a general-purpose number format for the specified locale. This is the same as calling @B_java#text#NumberFormat#getNumberInstance_E@.", "history": "Added in API level 1", "FullName": "public static NumberFormat getInstance (Locale inLocale)"}, "getPercentInstance()": {"Returns": [["@B_java#text#NumberFormat_E@", "the NumberFormat instance for percentage formatting"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Returns a percentage format for the current default @B_java#util#Locale#Category#FORMAT_E@ locale. This is equivalent to calling @B_java#text#NumberFormat#getPercentInstance_E@.", "history": "Added in API level 1", "FullName": "public static final NumberFormat getPercentInstance ()"}, "getIntegerInstance(java.util.Locale)": {"Returns": [["@B_java#text#NumberFormat_E@", "a number format for integer values"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getRoundingMode_E@"], "Permissions": [], "Description": "Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using half-even rounding (see @B_java#math#RoundingMode#HALF_EVEN_E@) for formatting, and to parse only the integer part of an input string (see @B_java#text#NumberFormat#isParseIntegerOnly_E@).", "history": "Added in API level 1", "FullName": "public static NumberFormat getIntegerInstance (Locale inLocale)"}, "setParseIntegerOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if numbers should be parsed as integers only; false otherwise"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#isParseIntegerOnly_E@"], "Permissions": [], "Description": "Sets whether or not numbers should be parsed as integers only.", "history": "Added in API level 1", "FullName": "public void setParseIntegerOnly (boolean value)"}, "setCurrency(java.util.Currency)": {"Returns": [], "Parameters": [["@B_java#util#Currency_E@", "Currency: the new currency to be used by this number format"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the number format class doesn't implement currency formatting"], ["@B_java#lang#NullPointerException_E@", "if currency is null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. The default implementation throws UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public void setCurrency (Currency currency)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "the parsed value"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: the parse position"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#isParseIntegerOnly_E@", "@B_java#text#Format#parseObject_E@"], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals), otherwise a Double. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged!", "history": "Added in API level 1", "FullName": "public abstract Number parse (String source, ParsePosition parsePosition)"}, "format(long)": {"Returns": [["@B_java#lang#String_E@", "the formatted String"]], "Parameters": [["long", "long: the long number to format"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 1", "FullName": "public final String format (long number)"}, "isGroupingUsed()": {"Returns": [["boolean", "true if grouping is used; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setGroupingUsed_E@"], "Permissions": [], "Description": "Returns true if grouping is used in this format. For example, in the English locale, with grouping on, the number 1234567 might be formatted as \"1,234,567\". The grouping separator as well as the size of each group is locale dependant and is determined by sub-classes of NumberFormat.", "history": "Added in API level 1", "FullName": "public boolean isGroupingUsed ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of locales for which localized NumberFormat instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the get*Instance methods of this class can return localized instances.", "history": "Added in API level 1", "FullName": "public static Locale[] getAvailableLocales ()"}}, "Inheritance": ["@B_java#text#Format_E@"], "ClassName": "java.text.NumberFormat", "ClassDesc": "NumberFormat is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. NumberFormat also provides methods for determining which locales have number formats, and what their names are. NumberFormat helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. To format a number for the current Locale, use one of the factory class methods: getInstance. NumberFormat to parse numbers: getInstance or getNumberInstance to get the normal number format. Use getIntegerInstance to get an integer number format. Use getCurrencyInstance to get the currency number format. And use getPercentInstance to get a format for displaying percentages. With this format, a fraction like 0.53 is displayed as 53%. You can also control the display of numbers with such methods as setMinimumFractionDigits. If you want even more control over the format or parsing, or want to give your users more control, you can try casting the NumberFormat you get from the factory methods to a DecimalFormat. This will work for the vast majority of locales; just remember to put it in a try block in case you encounter an unusual one. NumberFormat and DecimalFormat are designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, setParseIntegerOnly : only affects parsing, e.g. if true, \"3456.78\" \u2192 3456 (and leaves the parse position just after index 6) if false, \"3456.78\" \u2192 3456.78 (and leaves the parse position just after index 8) This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown. setDecimalSeparatorAlwaysShown : only affects formatting, and only where there might be no digits after the decimal point, such as with a pattern like \"#,##0.##\", e.g., if true, 3456.00 \u2192 \"3,456.\" if false, 3456.00 \u2192 \"3456\" This is independent of parsing. If you want parsing to stop at the decimal point, use setParseIntegerOnly. You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to: progressively parse through pieces of a string align the decimal point and other areas For example, you can align numbers in two ways: Number formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally."}