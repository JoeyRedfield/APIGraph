{"Functions": {"longStream(java.util.function.Supplier<?extendsjava.util.Spliterator.OfLong>,int,boolean)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a new sequential or parallel LongStream"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a Supplier of a Spliterator.OfLong"], ["int", "int: Spliterator characteristics of the supplied Spliterator.OfLong. The characteristics must be equal to supplier.get().characteristics(), otherwise undefined behavior may occur when terminal operation commences."], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": ["@B_java#util#stream#StreamSupport#longStream_E@"], "Permissions": [], "Description": "Creates a new sequential or parallel LongStream from a Supplier of Spliterator.OfLong. The @B_java#util#function#Supplier#get_E@ method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are @B_java#util#stream#StreamSupport#longStream_E@ instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See", "history": "Added in API level 24", "FullName": "public static LongStream longStream (Supplier<? extends Spliterator.OfLong> supplier, int characteristics, boolean parallel)"}, "intStream(java.util.Spliterator.OfInt, boolean)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a new sequential or parallel IntStream"]], "Parameters": [["@B_java#util#Spliterator#OfInt_E@", "Spliterator.OfInt: a Spliterator.OfInt describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel IntStream from a Spliterator.OfInt. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#intStream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "added in API level 24", "FullName": "public static IntStream intStream (Spliterator.OfInt spliterator, boolean parallel)"}, "doubleStream(java.util.function.Supplier<?extendsjava.util.Spliterator.OfDouble>,int,boolean)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a new sequential or parallel DoubleStream"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: A Supplier of a Spliterator.OfDouble"], ["int", "int: Spliterator characteristics of the supplied Spliterator.OfDouble. The characteristics must be equal to supplier.get().characteristics(), otherwise undefined behavior may occur when terminal operation commences."], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": ["@B_java#util#stream#StreamSupport#doubleStream_E@"], "Permissions": [], "Description": "Creates a new sequential or parallel DoubleStream from a Supplier of Spliterator.OfDouble. The @B_java#util#function#Supplier#get_E@ method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are @B_java#util#stream#StreamSupport#doubleStream_E@ instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See", "history": "Added in API level 24", "FullName": "public static DoubleStream doubleStream (Supplier<? extends Spliterator.OfDouble> supplier, int characteristics, boolean parallel)"}, "stream(java.util.function.Supplier<?extendsjava.util.Spliterator<T>>,int,boolean)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new sequential or parallel Stream"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a Supplier of a Spliterator"], ["int", "int: Spliterator characteristics of the supplied Spliterator. The characteristics must be equal to supplier.get().characteristics(), otherwise undefined behavior may occur when terminal operation commences."], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": ["@B_java#util#stream#StreamSupport#stream_E@"], "Permissions": [], "Description": "Creates a new sequential or parallel Stream from a Supplier of Spliterator. The @B_java#util#function#Supplier#get_E@ method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are @B_java#util#stream#StreamSupport#stream_E@ instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See", "history": "Added in API level 24", "FullName": "public static Stream<T> stream (Supplier<? extends Spliterator<T>> supplier, int characteristics, boolean parallel)"}, "intStream(java.util.function.Supplier<?extendsjava.util.Spliterator.OfInt>,int,boolean)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a new sequential or parallel IntStream"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a Supplier of a Spliterator.OfInt"], ["int", "int: Spliterator characteristics of the supplied Spliterator.OfInt. The characteristics must be equal to supplier.get().characteristics(), otherwise undefined behavior may occur when terminal operation commences."], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": ["@B_java#util#stream#StreamSupport#intStream_E@"], "Permissions": [], "Description": "Creates a new sequential or parallel IntStream from a Supplier of Spliterator.OfInt. The @B_java#util#function#Supplier#get_E@ method will be invoked on the supplier no more than once, and only after the terminal operation of the stream pipeline commences. For spliterators that report a characteristic of IMMUTABLE or CONCURRENT, or that are @B_java#util#stream#StreamSupport#intStream_E@ instead. The use of a Supplier in this form provides a level of indirection that reduces the scope of potential interference with the source. Since the supplier is only invoked after the terminal operation commences, any modifications to the source up to the start of the terminal operation are reflected in the stream result. See", "history": "Added in API level 24", "FullName": "public static IntStream intStream (Supplier<? extends Spliterator.OfInt> supplier, int characteristics, boolean parallel)"}, "stream(java.util.Spliterator<T>, boolean)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new sequential or parallel Stream"]], "Parameters": [["@B_java#util#Spliterator_E@", "Spliterator: a Spliterator describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel Stream from a Spliterator. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#stream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "added in API level 24", "FullName": "public static Stream<T> stream (Spliterator<T> spliterator, boolean parallel)"}, "doubleStream(java.util.Spliterator.OfDouble,boolean)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a new sequential or parallel DoubleStream"]], "Parameters": [["@B_java#util#Spliterator#OfDouble_E@", "Spliterator.OfDouble: A Spliterator.OfDouble describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel DoubleStream from a Spliterator.OfDouble. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#doubleStream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "Added in API level 24", "FullName": "public static DoubleStream doubleStream (Spliterator.OfDouble spliterator, boolean parallel)"}, "stream(java.util.Spliterator<T>,boolean)": {"Returns": [["@B_java#util#stream#Stream_E@", "a new sequential or parallel Stream"]], "Parameters": [["@B_java#util#Spliterator_E@", "Spliterator: a Spliterator describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel Stream from a Spliterator. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#stream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "Added in API level 24", "FullName": "public static Stream<T> stream (Spliterator<T> spliterator, boolean parallel)"}, "longStream(java.util.Spliterator.OfLong, boolean)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a new sequential or parallel LongStream"]], "Parameters": [["@B_java#util#Spliterator#OfLong_E@", "Spliterator.OfLong: a Spliterator.OfLong describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel LongStream from a Spliterator.OfLong. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#longStream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "added in API level 24", "FullName": "public static LongStream longStream (Spliterator.OfLong spliterator, boolean parallel)"}, "longStream(java.util.Spliterator.OfLong,boolean)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a new sequential or parallel LongStream"]], "Parameters": [["@B_java#util#Spliterator#OfLong_E@", "Spliterator.OfLong: a Spliterator.OfLong describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel LongStream from a Spliterator.OfLong. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#longStream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "Added in API level 24", "FullName": "public static LongStream longStream (Spliterator.OfLong spliterator, boolean parallel)"}, "intStream(java.util.Spliterator.OfInt,boolean)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a new sequential or parallel IntStream"]], "Parameters": [["@B_java#util#Spliterator#OfInt_E@", "Spliterator.OfInt: a Spliterator.OfInt describing the stream elements"], ["boolean", "boolean: if true then the returned stream is a parallel stream; if false the returned stream is a sequential stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new sequential or parallel IntStream from a Spliterator.OfInt. The spliterator is only traversed, split, or queried for estimated size after the terminal operation of the stream pipeline commences. It is strongly recommended the spliterator report a characteristic of IMMUTABLE or CONCURRENT, or be @B_java#util#stream#StreamSupport#intStream_E@ should be used to reduce the scope of potential interference with the source. See", "history": "Added in API level 24", "FullName": "public static IntStream intStream (Spliterator.OfInt spliterator, boolean parallel)"}}, "Inheritance": [], "ClassName": "java.util.stream.StreamSupport", "ClassDesc": "Low-level utility methods for creating and manipulating streams. This class is mostly for library writers presenting stream views of data structures; most static stream methods intended for end users are in the various Stream classes."}