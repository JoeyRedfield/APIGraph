{"Functions": {"createCaptureSessionByOutputConfigurations(java.util.List<android.hardware.camera2.params.OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List no parameter comment"], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback no parameter comment"], ["@B_android#os#Handler_E@", "Handler: This value may be null."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", ""]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#params#OutputConfiguration_E@"], "Permissions": [], "Description": "Create a new camera capture session by providing the target output set of Surfaces and its corresponding surface configuration to the camera device.", "history": "Added in API level 24", "FullName": "public abstract void createCaptureSessionByOutputConfigurations (List<OutputConfiguration> outputConfigurations, CameraCaptureSession.StateCallback callback, Handler handler)"}, "createCaptureSession(java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The new set of Surfaces that should be made available as targets for captured image data. This value must never be null."], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback: The callback to notify about the status of the new capture session. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set of output Surfaces do not meet the requirements, the callback is null, or the handler is null but the current thread has no looper."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CameraCaptureSession_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@"], "Permissions": [], "Description": "Create a new camera capture session by providing the target output set of Surfaces to the camera device. The active capture session determines the set of potential output Surfaces for the camera device for each capture request. A given request may use all or only some of the outputs. Once the CameraCaptureSession is created, requests can be submitted with @B_android#hardware#camera2#CameraCaptureSession#capture_E@, @B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@, @B_android#hardware#camera2#CameraCaptureSession#setRepeatingRequest_E@, or @B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@. Surfaces suitable for inclusion as a camera output can be created for various use cases and targets: For drawing to a @B_android#view#SurfaceView_E@: Once the SurfaceView's Surface is @B_android#view#SurfaceHolder#Callback#surfaceCreated_E@, set the size of the Surface with @B_android#view#SurfaceHolder#setFixedSize_E@ to be one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ and then obtain the Surface by calling @B_android#view#SurfaceHolder#getSurface_E@. If the size is not set by the application, it will be rounded to the nearest supported size less than 1080p, by the camera device. For accessing through an OpenGL texture via a @B_android#graphics#SurfaceTexture_E@: Set the size of the SurfaceTexture with @B_android#graphics#SurfaceTexture#setDefaultBufferSize_E@ to be one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ before creating a Surface from the SurfaceTexture with @B_android#view#Surface#Surface_E@. If the size is not set by the application, it will be set to be the smallest supported size less than 1080p, by the camera device. For recording with @B_android#media#MediaCodec_E@: Call @B_android#media#MediaCodec#createInputSurface_E@ after configuring the media codec to use one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ For recording with @B_android#media#MediaRecorder_E@: Call @B_android#media#MediaRecorder#getSurface_E@ after configuring the media recorder to use one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@, or configuring it to use one of the supported @B_android#media#CamcorderProfile_E@. For efficient YUV processing with @B_android#renderscript#package-summary_E@: Create a RenderScript @B_android#renderscript#Allocation_E@ with a supported YUV type, the IO_INPUT flag, and one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@, Then obtain the Surface with @B_android#renderscript#Allocation#getSurface_E@. For access to RAW, uncompressed YUV, or compressed JPEG data in the application: Create an @B_android#media#ImageReader_E@ object with one of the supported output formats given by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@, setting its size to one of the corresponding supported sizes by passing the chosen output format into @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. Then obtain a @B_android#view#Surface_E@ from it with @B_android#media#ImageReader#getSurface_E@. If the ImageReader size is not set to a supported size, it will be rounded to a supported size less than 1080p by the camera device. The camera device will query each Surface's size and formats upon this call, so they must be set to a valid setting at this time. It can take several hundred milliseconds for the session's configuration to complete, since camera hardware may need to be powered on or reconfigured. Once the configuration is complete and the session is ready to actually capture data, the provided @B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@'s @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigured_E@ callback will be called. If a prior CameraCaptureSession already exists when this method is called, the previous session will no longer be able to accept new capture requests and will be closed. Any in-progress capture requests made on the prior session will be completed before it's closed. @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigured_E@ for the new session may be invoked before @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onClosed_E@ is invoked for the prior session. Once the new session is @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigured_E@, it is able to start capturing its own requests. To minimize the transition time, the @B_android#hardware#camera2#CameraCaptureSession#abortCaptures_E@ call can be used to discard the remaining requests for the prior capture session before a new one is created. Note that once the new session is created, the old one can no longer have its captures aborted. Using larger resolution outputs, or more outputs, can result in slower output rate from the device. Configuring a session with an empty or null list will close the current session, if any. This can be used to release the current session's target surfaces for another use. While any of the sizes from @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ can be used when a single output stream is configured, a given camera device may not be able to support all combination of sizes, formats, and targets when multiple outputs are configured at once. The tables below list the maximum guaranteed resolutions for combinations of streams and targets, given the capabilities of the camera device. If an application tries to create a session using a set of targets that exceed the limits described in the below tables, one of three possibilities may occur. First, the session may be successfully created and work normally. Second, the session may be successfully created, but the camera device won't meet the frame rate guarantees as described in @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputMinFrameDuration_E@. Or third, if the output set cannot be used at all, session creation will fail entirely, with @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigureFailed_E@ being invoked. For the type column, PRIV refers to any target whose available sizes are found using @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ with no direct application-visible format, YUV refers to a target Surface using the @B_android#graphics#ImageFormat#YUV_420_888_E@ format, JPEG refers to the @B_android#graphics#ImageFormat#JPEG_E@ format, and RAW refers to the @B_android#graphics#ImageFormat#RAW_SENSOR_E@ format. For the maximum size column, PREVIEW refers to the best size match to the device's screen resolution, or to 1080p (1920x1080), whichever is smaller. RECORD refers to the camera device's maximum supported recording resolution, as determined by @B_android#media#CamcorderProfile_E@. And MAXIMUM refers to the camera device's maximum output resolution for that format or target from @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. To use these tables, determine the number and the formats/targets of outputs needed, and find the row(s) of the table with those targets. The sizes indicate the maximum set of sizes that can be used; it is guaranteed that for those targets, the listed sizes and anything smaller from the list given by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ can be successfully used to create a session. For example, if a row indicates that a 8 megapixel (MP) YUV_420_888 output can be used together with a 2 MP PRIV output, then a session can be created with targets [8 MP YUV, 2 MP PRIV] or targets [2 MP YUV, 2 MP PRIV]; but a session with targets [8 MP YUV, 4 MP PRIV], targets [4 MP YUV, 4 MP PRIV], or targets [8 MP PRIV, 2 MP YUV] would not be guaranteed to work, unless some other row of the table lists such a combination. Legacy devices (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY_E@) support at least the following stream combinations: Limited-level (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@) devices support at least the following stream combinations in addition to those for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY_E@ devices: FULL-level (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@) devices support at least the following stream combinations in addition to those for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices: RAW-capability (@B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ includes @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW_E@) devices additionally support at least the following stream combinations on both @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@ and @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices: BURST-capability (@B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ includes @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE_E@) devices support at least the below stream combinations in addition to those for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices. Note that all FULL-level devices support the BURST capability, and the below list is a strict subset of the list for FULL-level devices, so this table is only relevant for LIMITED-level devices that support the BURST_CAPTURE capability. LEVEL-3 (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3_E@) support at least the following stream combinations in addition to the combinations for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@ and for RAW capability (@B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ includes @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW_E@): MONOCHROME-capability (@B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ includes @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME_E@) devices supporting @B_android#graphics#ImageFormat#Y8_E@ support substituting YUV streams with Y8 in all guaranteed stream combinations for the device's hardware level and capabilities. Devices capable of outputting HEIC formats (@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@ contains @B_android#graphics#ImageFormat#HEIC_E@) will support substituting JPEG streams with HEIC in all guaranteed stream combinations for the device's hardware level and capabilities. Calling createCaptureSession with both JPEG and HEIC outputs is not supported. Clients can access the above mandatory stream combination tables via @B_android#hardware#camera2#params#MandatoryStreamCombination_E@. Since the capabilities of camera devices vary greatly, a given camera device may support target combinations with sizes outside of these guarantees, but this can only be tested for by calling @B_android#hardware#camera2#CameraDevice#isSessionConfigurationSupported_E@ or attempting to create a session with such targets. Exception on 176x144 (QCIF) resolution: Camera devices usually have a fixed capability for downscaling from larger resolution to smaller, and the QCIF resolution sometimes is not fully supported due to this limitation on devices with high-resolution image sensors. Therefore, trying to configure a QCIF resolution stream together with any other stream larger than 1920x1080 resolution (either width or height) might not be supported, and capture session creation will fail if it is not.", "history": "Added in API level 21", "FullName": "public abstract void createCaptureSession (List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler)"}, "isSessionConfigurationSupported(android.hardware.camera2.params.SessionConfiguration)": {"Returns": [["boolean", "true if the given session configuration is supported by the camera device false otherwise."]], "Parameters": [["@B_android#hardware#camera2#params#SessionConfiguration_E@", "SessionConfiguration: This value must never be null."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the query operation is not supported by the camera device"], ["@B_java#lang#IllegalArgumentException_E@", "if the session configuration is invalid"], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a particular @B_android#hardware#camera2#params#SessionConfiguration_E@ is supported by the camera device. This method performs a runtime check of a given @B_android#hardware#camera2#params#SessionConfiguration_E@. The result confirms whether or not the passed session configuration can be successfully used to create a camera capture session using @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. The method can be called at any point before, during and after active capture session. It must not impact normal camera behavior in any way and must complete significantly faster than creating a regular or constrained capture session. Although this method is faster than creating a new capture session, it is not intended to be used for exploring the entire space of supported stream combinations. The available mandatory stream combinations @B_android#hardware#camera2#params#MandatoryStreamCombination_E@ are better suited for this purpose. Note that session parameters will be ignored and calls to @B_android#hardware#camera2#params#SessionConfiguration#setSessionParameters_E@ are not required.", "history": "Added in API level 29", "FullName": "public boolean isSessionConfigurationSupported (SessionConfiguration sessionConfig)"}, "createReprocessCaptureRequest(android.hardware.camera2.TotalCaptureResult)": {"Returns": [["@B_android#hardware#camera2#CaptureRequest#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#hardware#camera2#TotalCaptureResult_E@", "TotalCaptureResult: The capture result of the output image or one of the output images used to generate the reprocess input image for this capture request. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if inputResult is null."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest#Builder_E@", "@B_android#hardware#camera2#TotalCaptureResult_E@", "@B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSession_E@", "@B_android#media#ImageWriter_E@"], "Permissions": [], "Description": "Create a @B_android#hardware#camera2#CaptureRequest#Builder_E@ for a new reprocess @B_android#hardware#camera2#CaptureRequest_E@ from a @B_android#hardware#camera2#TotalCaptureResult_E@. Each reprocess @B_android#hardware#camera2#CaptureRequest_E@ processes one buffer from @B_android#hardware#camera2#CameraCaptureSession_E@'s input @B_android#view#Surface_E@ to all output @B_android#view#Surface_E@ included in the reprocess capture request. The reprocess input images must be generated from one or multiple output images captured from the same camera device. The application can provide input images to camera device via @B_android#media#ImageWriter#queueInputImage_E@. The application must use the capture result of one of those output images to create a reprocess capture request so that the camera device can use the information to achieve optimal reprocess image quality. For camera devices that support only 1 output @B_android#view#Surface_E@, submitting a reprocess @B_android#hardware#camera2#CaptureRequest_E@ with multiple output targets will result in a @B_android#hardware#camera2#CaptureFailure_E@.", "history": "Added in API level 23", "FullName": "public abstract CaptureRequest.Builder createReprocessCaptureRequest (TotalCaptureResult inputResult)"}, "createCaptureRequest(int,java.util.Set<java.lang.String>)": {"Returns": [["@B_android#hardware#camera2#CaptureRequest#Builder_E@", "a builder for a capture request, initialized with default settings for that template, and no output streams This value will never be null."]], "Parameters": [["int", "int: An enumeration selecting the use case for this request. Not all template types are supported on every device. See the documentation for each template type for details. Value is @B_android#hardware#camera2#CameraDevice#TEMPLATE_PREVIEW_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_STILL_CAPTURE_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_RECORD_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_VIDEO_SNAPSHOT_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_ZERO_SHUTTER_LAG_E@, or @B_android#hardware#camera2#CameraDevice#TEMPLATE_MANUAL_E@"], ["@B_java#util#Set_E@", "Set: A set of physical camera ids that can be used to customize the request for a specific physical camera."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the templateType is not supported by this device, or one of the physical id arguments matches with logical camera id."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice_E@", "@B_android#hardware#camera2#CaptureRequest#Builder#setPhysicalCameraKey_E@", "@B_android#hardware#camera2#CaptureRequest#Builder#getPhysicalCameraKey_E@"], "Permissions": [], "Description": "Create a @B_android#hardware#camera2#CaptureRequest#Builder_E@ for new capture requests, initialized with template for a target use case. This methods allows clients to pass physical camera ids which can be used to customize the request for a specific physical camera. The settings are chosen to be the best options for the specific logical camera device. If additional physical camera ids are passed, then they will also use the same settings template. Clients can further modify individual camera settings by calling @B_android#hardware#camera2#CaptureRequest#Builder#setPhysicalCameraKey_E@. Individual physical camera settings will only be honored for camera session that was initialiazed with corresponding physical camera id output configuration @B_android#hardware#camera2#params#OutputConfiguration#setPhysicalCameraId_E@ and the same output targets are also attached in the request by @B_android#hardware#camera2#CaptureRequest#Builder#addTarget_E@. The output is undefined for any logical camera streams in case valid physical camera settings are attached.", "history": "Added in API level 28", "FullName": "public CaptureRequest.Builder createCaptureRequest (int templateType, Set<String> physicalCameraIdSet)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the connection to this camera device as quickly as possible. Immediately after this call, all calls to the camera device or active session interface will throw a @B_java#lang#IllegalStateException_E@, except for calls to close(). Once the device has fully shut down, the @B_android#hardware#camera2#CameraDevice#StateCallback#onClosed_E@ callback will be called, and the camera is free to be re-opened. Immediately after this call, besides the final @B_android#hardware#camera2#CameraDevice#StateCallback#onClosed_E@ calls, no further callbacks from the device or the active session will occur, and any remaining submitted capture requests will be discarded, as if @B_android#hardware#camera2#CameraCaptureSession#abortCaptures_E@ had been called, except that no success or failure callbacks will be invoked.", "history": "Added in API level 21", "FullName": "public abstract void close ()"}, "createConstrainedHighSpeedCaptureSession(java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The new set of Surfaces that should be made available as targets for captured high speed image data. This value must never be null."], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback: The callback to notify about the status of the new capture session. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set of output Surfaces do not meet the requirements, the callback is null, or the handler is null but the current thread has no looper, or the camera device doesn't support high speed video capability."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@", "@B_android#hardware#camera2#CameraCharacteristics_E@", "@B_android#hardware#camera2#CameraMetadata_E@", "@B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@", "@B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@", "@B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@"], "Permissions": [], "Description": "Create a new constrained high speed capture session. The application can use normal capture session (created via @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@) for high speed capture if the desired high speed FPS ranges are advertised by @B_android#hardware#camera2#CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_E@, in which case all API semantics associated with normal capture sessions applies. The method creates a specialized capture session that is only targeted at high speed video recording (>=120fps) use case if the camera device supports high speed video capability (i.e., @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ contains @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO_E@). Therefore, it has special characteristics compared with a normal capture session: In addition to the output target Surface requirements specified by the @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ method, an active high speed capture session will support up to 2 output Surfaces, though the application might choose to configure just one Surface (e.g., preview only). All Surfaces must be either video encoder surfaces (acquired by @B_android#media#MediaRecorder#getSurface_E@ or @B_android#media#MediaCodec#createInputSurface_E@) or preview surfaces (obtained from @B_android#view#SurfaceView_E@, @B_android#graphics#SurfaceTexture_E@ via @B_android#view#Surface#Surface_E@). The Surface sizes must be one of the sizes reported by @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@. When multiple Surfaces are configured, their size must be same. An active high speed capture session only accepts request lists created via @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@, and the request list can only be submitted to this session via @B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@, or @B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@. The FPS ranges being requested to this session must be selected from @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@. The application can still use @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ to control the desired FPS range. Switching to an FPS range that has different @B_android#util#Range#getUpper_E@ may trigger some camera device reconfigurations, which may introduce extra latency. It is recommended that the application avoids unnecessary maximum target FPS changes as much as possible during high speed streaming. For the request lists submitted to this session, the camera device will override the @B_android#hardware#camera2#CaptureRequest#CONTROL_MODE_E@, auto-exposure (AE), auto-white balance (AWB) and auto-focus (AF) to @B_android#hardware#camera2#CameraMetadata#CONTROL_MODE_AUTO_E@, @B_android#hardware#camera2#CameraMetadata#CONTROL_AE_MODE_ON_E@, @B_android#hardware#camera2#CameraMetadata#CONTROL_AWB_MODE_AUTO_E@ and @B_android#hardware#camera2#CameraMetadata#CONTROL_AF_MODE_CONTINUOUS_VIDEO_E@, respectively. All post-processing block mode controls will be overridden to be FAST. Therefore, no manual control of capture and post-processing parameters is possible. Beside these, only a subset of controls will work, see @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO_E@ for more details.", "history": "Added in API level 23", "FullName": "public abstract void createConstrainedHighSpeedCaptureSession (List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler)"}, "createReprocessableCaptureSessionByConfigurations(android.hardware.camera2.params.InputConfiguration,java.util.List<android.hardware.camera2.params.OutputConfiguration>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#params#InputConfiguration_E@", "InputConfiguration: This value must never be null."], ["@B_java#util#List_E@", "List: This value must never be null."], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback: This value must never be null."], ["@B_android#os#Handler_E@", "Handler: This value may be null."]], "Throws": [["@B_android#hardware#camera2#CameraAccessException_E@", ""]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSession_E@", "@B_android#hardware#camera2#params#OutputConfiguration_E@"], "Permissions": [], "Description": "Create a new reprocessable camera capture session by providing the desired reprocessing input configuration and output @B_android#hardware#camera2#params#OutputConfiguration_E@ to the camera device.", "history": "Added in API level 24", "FullName": "public abstract void createReprocessableCaptureSessionByConfigurations (InputConfiguration inputConfig, List<OutputConfiguration> outputs, CameraCaptureSession.StateCallback callback, Handler handler)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "the ID for this camera device This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@", "@B_android#hardware#camera2#CameraManager#getCameraIdList_E@"], "Permissions": [], "Description": "Get the ID of this camera device. This matches the ID given to @B_android#hardware#camera2#CameraManager#openCamera_E@ to instantiate this this camera device. This ID can be used to query the camera device's @B_android#hardware#camera2#CameraCharacteristics_E@ with @B_android#hardware#camera2#CameraManager#getCameraCharacteristics_E@. This method can be called even if the device has been closed or has encountered a serious error.", "history": "Added in API level 21", "FullName": "public abstract String getId ()"}, "createReprocessableCaptureSession(android.hardware.camera2.params.InputConfiguration,java.util.List<android.view.Surface>,android.hardware.camera2.CameraCaptureSession.StateCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#params#InputConfiguration_E@", "InputConfiguration: The configuration for the input @B_android#view#Surface_E@ This value must never be null."], ["@B_java#util#List_E@", "List: The new set of Surfaces that should be made available as targets for captured image data. This value must never be null."], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback: The callback to notify about the status of the new capture session. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null to use the current thread's @B_android#os#Looper_E@. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the input configuration is null or not supported, the set of output Surfaces do not meet the requirements, the callback is null, or the handler is null but the current thread has no looper."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#CameraCaptureSession_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getInputFormats_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getInputSizes_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getValidOutputFormatsForInput_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@", "@B_android#media#ImageWriter_E@", "@B_android#media#ImageReader_E@"], "Permissions": [], "Description": "Create a new reprocessable camera capture session by providing the desired reprocessing input Surface configuration and the target output set of Surfaces to the camera device. If a camera device supports YUV reprocessing (@B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_YUV_REPROCESSING_E@) or PRIVATE reprocessing (@B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_PRIVATE_REPROCESSING_E@), besides the capture session created via @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@, the application can also create a reprocessable capture session to submit reprocess capture requests in addition to regular capture requests. A reprocess capture request takes the next available buffer from the session's input Surface, and sends it through the camera device's processing pipeline again, to produce buffers for the request's target output Surfaces. No new image data is captured for a reprocess request. However the input buffer provided by the application must be captured previously by the same camera device in the same session directly (e.g. for Zero-Shutter-Lag use case) or indirectly (e.g. combining multiple output images). The active reprocessable capture session determines an input @B_android#view#Surface_E@ and the set of potential output Surfaces for the camera devices for each capture request. The application can use @B_android#hardware#camera2#CameraDevice#createCaptureRequest_E@ to create regular capture requests to capture new images from the camera device, and use @B_android#hardware#camera2#CameraDevice#createReprocessCaptureRequest_E@ to create reprocess capture requests to process buffers from the input @B_android#view#Surface_E@. Some combinations of output Surfaces in a session may not be used in a request simultaneously. The guaranteed combinations of output Surfaces that can be used in a request simultaneously are listed in the tables under @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. All the output Surfaces in one capture request will come from the same source, either from a new capture by the camera device, or from the input Surface depending on if the request is a reprocess capture request. Input formats and sizes supported by the camera device can be queried via @B_android#hardware#camera2#params#StreamConfigurationMap#getInputFormats_E@ and @B_android#hardware#camera2#params#StreamConfigurationMap#getInputSizes_E@. For each supported input format, the camera device supports a set of output formats and sizes for reprocessing that can be queried via @B_android#hardware#camera2#params#StreamConfigurationMap#getValidOutputFormatsForInput_E@ and @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. While output Surfaces with formats that aren't valid reprocess output targets for the input configuration can be part of a session, they cannot be used as targets for a reprocessing request. Since the application cannot access @B_android#graphics#ImageFormat#PRIVATE_E@ images directly, an output Surface created by @B_android#media#ImageReader#newInstance_E@ with @B_android#graphics#ImageFormat#PRIVATE_E@ as the format will be considered as intended to be used for reprocessing input and thus the @B_android#media#ImageReader_E@ size must match one of the supported input sizes for @B_android#graphics#ImageFormat#PRIVATE_E@ format. Otherwise, creating a reprocessable capture session will fail. The guaranteed stream configurations listed in @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ are also guaranteed to work for @B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSession_E@. In addition, the configurations in the tables below are also guaranteed for creating a reprocessable capture session if the camera device supports YUV reprocessing or PRIVATE reprocessing. However, not all output targets used to create a reprocessable session may be used in a @B_android#hardware#camera2#CaptureRequest_E@ simultaneously. For devices that support only 1 output target in a reprocess @B_android#hardware#camera2#CaptureRequest_E@, submitting a reprocess @B_android#hardware#camera2#CaptureRequest_E@ with multiple output targets will result in a @B_android#hardware#camera2#CaptureFailure_E@. For devices that support multiple output targets in a reprocess @B_android#hardware#camera2#CaptureRequest_E@, the guaranteed output targets that can be included in a @B_android#hardware#camera2#CaptureRequest_E@ simultaneously are listed in the tables under @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. For example, with a FULL-capability (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@) device that supports PRIVATE reprocessing, an application can create a reprocessable capture session with 1 input, (PRIV, MAXIMUM), and 3 outputs, (PRIV, MAXIMUM), (PRIV, PREVIEW), and (YUV, MAXIMUM). However, it's not guaranteed that an application can submit a regular or reprocess capture with (PRIV, MAXIMUM) and (YUV, MAXIMUM) outputs based on the table listed under @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. In other words, use the tables below to determine the guaranteed stream configurations for creating a reprocessable capture session, and use the tables under @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ to determine the guaranteed output targets that can be submitted in a regular or reprocess @B_android#hardware#camera2#CaptureRequest_E@ simultaneously. LIMITED-level (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@) devices support at least the following stream combinations for creating a reprocessable capture session in addition to those listed in @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices: FULL-level (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@) devices support at least the following stream combinations for creating a reprocessable capture session in addition to those for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices: RAW-capability (@B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ includes @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_RAW_E@) devices additionally support at least the following stream combinations for creating a reprocessable capture session on both @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@ and @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ devices LEVEL-3 (@B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@ == @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3_E@) devices support at least the following stream combinations for creating a reprocessable capture session in addition to those for @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@ devices. Note that while the second configuration allows for configuring MAXIMUM YUV and JPEG outputs at the same time, that configuration is not listed for regular capture sessions, and therefore simultaneous output to both targets is not allowed. Clients can access the above mandatory stream combination tables via @B_android#hardware#camera2#params#MandatoryStreamCombination_E@.", "history": "Added in API level 23", "FullName": "public abstract void createReprocessableCaptureSession (InputConfiguration inputConfig, List<Surface> outputs, CameraCaptureSession.StateCallback callback, Handler handler)"}, "createCaptureRequest(int)": {"Returns": [["@B_android#hardware#camera2#CaptureRequest#Builder_E@", "a builder for a capture request, initialized with default settings for that template, and no output streams This value will never be null."]], "Parameters": [["int", "int: An enumeration selecting the use case for this request. Not all template types are supported on every device. See the documentation for each template type for details. Value is @B_android#hardware#camera2#CameraDevice#TEMPLATE_PREVIEW_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_STILL_CAPTURE_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_RECORD_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_VIDEO_SNAPSHOT_E@, @B_android#hardware#camera2#CameraDevice#TEMPLATE_ZERO_SHUTTER_LAG_E@, or @B_android#hardware#camera2#CameraDevice#TEMPLATE_MANUAL_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the templateType is not supported by this device."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#hardware#camera2#CaptureRequest#Builder_E@ for new capture requests, initialized with template for a target use case. The settings are chosen to be the best options for the specific camera device, so it is not recommended to reuse the same request for a different camera device; create a builder specific for that device and template and override the settings as desired, instead.", "history": "Added in API level 21", "FullName": "public abstract CaptureRequest.Builder createCaptureRequest (int templateType)"}, "createCaptureSession(android.hardware.camera2.params.SessionConfiguration)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#params#SessionConfiguration_E@", "SessionConfiguration: A session configuration (see @B_android#hardware#camera2#params#SessionConfiguration_E@)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "In case the session configuration is invalid; or the output configurations are empty; or the session configuration executor is invalid."], ["@B_android#hardware#camera2#CameraAccessException_E@", "In case the camera device is no longer connected or has encountered a fatal error."]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@", "@B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSession_E@", "@B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@"], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#CameraCaptureSession_E@ using a @B_android#hardware#camera2#params#SessionConfiguration_E@ helper object that aggregates all supported parameters.", "history": "Added in API level 28", "FullName": "public void createCaptureSession (SessionConfiguration config)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.CameraDevice", "ClassDesc": "The CameraDevice class is a representation of a single camera connected to an Android device, allowing for fine-grain control of image capture and post-processing at high frame rates. Your application must declare the @B_android#Manifest#permission#CAMERA_E@ permission in its manifest in order to access camera devices. A given camera device may provide support at one of several levels defined in @B_android#hardware#camera2#CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_E@. If a device supports @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY_E@ level, the camera device is running in backward compatibility mode and has minimum camera2 API support. If a device supports the @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ level, then Camera2 exposes a feature set that is roughly equivalent to the older @B_android#hardware#Camera_E@ API, although with a cleaner and more efficient interface. If a device supports the @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_EXTERNAL_E@ level, then the device is a removable camera that provides similar but slightly less features as the @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED_E@ level. Devices that implement the @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL_E@ or @B_android#hardware#camera2#CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_3_E@ level of support provide substantially improved capabilities over the older camera API. If your application requires a full-level device for proper operation, declare the \"android.hardware.camera.level.full\" feature in your manifest."}