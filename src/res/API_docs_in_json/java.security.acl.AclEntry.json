{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the contents."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of this ACL entry.", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}, "checkPermission(java.security.acl.Permission)": {"Returns": [["boolean", "true if the permission is part of the permission set in this entry, false otherwise."]], "Parameters": [["@B_java#security#acl#Permission_E@", "Permission: the permission to be checked for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified permission is part of the permission set in this entry.", "history": "Added in API level 1", "FullName": "public abstract boolean checkPermission (Permission permission)"}, "isNegative()": {"Returns": [["boolean", "true if this is a negative ACL entry, false if it's not."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this is a negative ACL entry (one denying the associated principal the set of permissions in the entry), false otherwise.", "history": "Added in API level 1", "FullName": "public abstract boolean isNegative ()"}, "setNegativePermissions()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this ACL entry to be a negative one. That is, the associated principal (e.g., a user or a group) will be denied the permission set specified in the entry. Note: ACL entries are by default positive. An entry becomes a negative entry only if this setNegativePermissions method is called on it.", "history": "Added in API level 1", "FullName": "public abstract void setNegativePermissions ()"}, "setPrincipal(java.security.Principal)": {"Returns": [["boolean", "true if the principal is set, false if there was already a principal set for this entry."]], "Parameters": [["@B_java#security#Principal_E@", "Principal: the principal to be set for this entry."]], "Throws": [], "SeeAlso": ["@B_java#security#acl#AclEntry#getPrincipal_E@"], "Permissions": [], "Description": "Specifies the principal for which permissions are granted or denied by this ACL entry. If a principal was already set for this ACL entry, false is returned, otherwise true is returned.", "history": "Added in API level 1", "FullName": "public abstract boolean setPrincipal (Principal user)"}, "permissions()": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration of the permissions in this ACL entry."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an enumeration of the permissions in this ACL entry.", "history": "Added in API level 1", "FullName": "public abstract Enumeration<Permission> permissions ()"}, "addPermission(java.security.acl.Permission)": {"Returns": [["boolean", "true if the permission was added, false if the permission was already part of this entry's permission set."]], "Parameters": [["@B_java#security#acl#Permission_E@", "Permission: the permission to be associated with the principal in this entry."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified permission to this ACL entry. Note: An entry can have multiple permissions.", "history": "Added in API level 1", "FullName": "public abstract boolean addPermission (Permission permission)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this ACL entry."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clones this ACL entry.", "history": "Added in API level 1", "FullName": "public abstract Object clone ()"}, "getPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the principal associated with this entry."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#acl#AclEntry#setPrincipal_E@"], "Permissions": [], "Description": "Returns the principal for which permissions are granted or denied by this ACL entry. Returns null if there is no principal set for this entry yet.", "history": "Added in API level 1", "FullName": "public abstract Principal getPrincipal ()"}, "removePermission(java.security.acl.Permission)": {"Returns": [["boolean", "true if the permission is removed, false if the permission was not part of this entry's permission set."]], "Parameters": [["@B_java#security#acl#Permission_E@", "Permission: the permission to be removed from this entry."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified permission from this ACL entry.", "history": "Added in API level 1", "FullName": "public abstract boolean removePermission (Permission permission)"}}, "Inheritance": [], "ClassName": "java.security.acl.AclEntry", "ClassDesc": "This is the interface used for representing one entry in an Access Control List (ACL). An ACL can be thought of as a data structure with multiple ACL entry objects. Each ACL entry object contains a set of permissions associated with a particular principal. (A principal represents an entity such as an individual user or a group). Additionally, each ACL entry is specified as being either positive or negative. If positive, the permissions are to be granted to the associated principal. If negative, the permissions are to be denied. Each principal can have at most one positive ACL entry and one negative entry; that is, multiple positive or negative ACL entries are not allowed for any principal. Note: ACL entries are by default positive. An entry becomes a negative entry only if the @B_java#security#acl#AclEntry#setNegativePermissions_E@ method is called on it."}