{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this latch, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this latch, as well as its state. The state, in brackets, includes the String \"Count =\" followed by the current count.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "await(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the count reached zero and false if the waiting time elapsed before the count reached zero"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is If the current count is zero then this method returns immediately with the value true. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: The count reaches zero due to invocations of the @B_java#util#concurrent#CountDownLatch#countDown_E@ method; or Some other thread The specified waiting time elapses. If the count reaches zero then the method returns with the value true. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.", "history": "Added in API level 1", "FullName": "public boolean await (long timeout, TimeUnit unit)"}, "countDown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decrements the count of the latch, releasing all waiting threads if the count reaches zero. If the current count is greater than zero then it is decremented. If the new count is zero then all waiting threads are re-enabled for thread scheduling purposes. If the current count equals zero then nothing happens.", "history": "Added in API level 1", "FullName": "public void countDown ()"}, "await(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the count reached zero and false if the waiting time elapsed before the count reached zero"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is If the current count is zero then this method returns immediately with the value true. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happen: The count reaches zero due to invocations of the @B_java#util#concurrent#CountDownLatch#countDown_E@ method; or Some other thread The specified waiting time elapses. If the count reaches zero then the method returns with the value true. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all.", "history": "added in API level 1", "FullName": "public boolean await (long timeout, TimeUnit unit)"}, "CountDownLatch(int)": {"Returns": [], "Parameters": [["int", "int: the number of times @B_java#util#concurrent#CountDownLatch#countDown_E@ must be invoked before threads can pass through @B_java#util#concurrent#CountDownLatch#await_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if count is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a CountDownLatch initialized with the given count.", "history": "Added in API level 1", "FullName": "public CountDownLatch (int count)"}, "await()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait until the latch has counted down to zero, unless the thread is If the current count is zero then this method returns immediately. If the current count is greater than zero then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happen: The count reaches zero due to invocations of the @B_java#util#concurrent#CountDownLatch#countDown_E@ method; or Some other thread If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared.", "history": "Added in API level 1", "FullName": "public void await ()"}, "getCount()": {"Returns": [["long", "the current count"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current count. This method is typically used for debugging and testing purposes.", "history": "Added in API level 1", "FullName": "public long getCount ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.CountDownLatch", "ClassDesc": "A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes. A CountDownLatch is initialized with a given count. The @B_java#util#concurrent#CountDownLatch#await_E@ methods block until the current count reaches zero due to invocations of the @B_java#util#concurrent#CountDownLatch#countDown_E@ method, after which all waiting threads are released and any subsequent invocations of @B_java#util#concurrent#CountDownLatch#await_E@ return immediately. This is a one-shot phenomenon -- the count cannot be reset. If you need a version that resets the count, consider using a @B_java#util#concurrent#CyclicBarrier_E@. A CountDownLatch is a versatile synchronization tool and can be used for a number of purposes. A CountDownLatch initialized with a count of one serves as a simple on/off latch, or gate: all threads invoking @B_java#util#concurrent#CountDownLatch#await_E@ wait at the gate until it is opened by a thread invoking @B_java#util#concurrent#CountDownLatch#countDown_E@. A CountDownLatch initialized to N can be used to make one thread wait until N threads have completed some action, or some action has been completed N times. A useful property of a CountDownLatch is that it doesn't require that threads calling countDown wait for the count to reach zero before proceeding, it simply prevents any thread from proceeding past an @B_java#util#concurrent#CountDownLatch#await_E@ until all threads could pass. The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed; The second is a completion signal that allows the driver to wait until all workers have completed. Another typical usage would be to divide a problem into N parts, describe each part with a Runnable that executes that portion and counts down on the latch, and queue all the Runnables to an Executor. When all sub-parts are complete, the coordinating thread will be able to pass through await. (When threads must repeatedly count down in this way, instead use a @B_java#util#concurrent#CyclicBarrier_E@.) Memory consistency effects: Until the count reaches zero, actions in a thread prior to calling countDown() await() in another thread."}