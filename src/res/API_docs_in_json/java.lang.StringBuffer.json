{"Functions": {"subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence."]], "Parameters": [["int", "int: the start index, inclusive."], ["int", "int: the end index, exclusive."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new character sequence that is a subsequence of this sequence. An invocation of this method of the form @B_java#lang#CharSequence_E@ interface.", "history": "added in API level 1", "FullName": "public CharSequence subSequence (int start, int end)"}, "append(boolean)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["boolean", "boolean: a boolean."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the boolean argument to the sequence. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (boolean b)"}, "insert(int, float)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["float", "float: a float."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the float argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, float f)"}, "reverse()": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes this character sequence to be replaced by the reverse of the sequence. If there are any surrogate pairs included in the sequence, these are treated as single characters for the reverse operation. Thus, the order of the high-low surrogates is never reversed. Let char values) just prior to execution of the reverse method. Then the character at index Note that the reverse operation may result in producing surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation. For example, reversing \"\\uDC00\\uD800\" produces \"\\uD800\\uDC00\" which is a valid surrogate pair.", "history": "added in API level 1", "FullName": "public StringBuffer reverse ()"}, "charAt(int)": {"Returns": [["char", "the char value at the specified index."]], "Parameters": [["int", "int: the index of the desired char value."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": ["@B_java#lang#StringBuffer#length_E@"], "Permissions": [], "Description": "Returns the char value in this sequence at the specified index. The first char value is at index 0, the next at index 1, and so on, as in array indexing. The index argument must be greater than or equal to 0, and less than the length of this sequence. If the char value specified by the index is a", "history": "added in API level 1", "FullName": "public char charAt (int index)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the sequence to append."], ["int", "int: the starting index of the subsequence to be appended."], ["int", "int: the end index of the subsequence to be appended."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified CharSequence to this sequence. Characters of the argument s, starting at index start, are appended, in order, to the contents of this sequence up to the (exclusive) index end. The length of this sequence is increased by the value of end - start. Let append method. Then the character at index s. If s is null, then this method appends characters as if the s parameter was a sequence containing the four characters \"null\".", "history": "added in API level 1", "FullName": "public StringBuffer append (CharSequence s, int start, int end)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the CharSequence to append."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified CharSequence to this sequence. The characters of the CharSequence argument are appended, in order, increasing the length of this sequence by the length of the argument. The result of this method is exactly the same as if it were an invocation of this.append(s, 0, s.length()); This method synchronizes on this, the destination object, but does not synchronize on the source (s). If s is null, then the four characters \"null\" are appended.", "history": "added in API level 1", "FullName": "public StringBuffer append (CharSequence s)"}, "insert(int, char[])": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["char[]", "char: a character array."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the char array argument into this sequence. The characters of the array argument are inserted into the contents of this sequence at the position indicated by offset. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, char[] str)"}, "indexOf(java.lang.String, int)": {"Returns": [["int", "the index within this string of the first occurrence of the specified substring, starting at the specified index."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring for which to search."], ["int", "int: the index from which to start the search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified substring, starting at the specified index. The integer returned is the smallest value k for which:", "history": "added in API level 1", "FullName": "public int indexOf (String str, int fromIndex)"}, "insert(int, double)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["double", "double: a double."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the double argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, double d)"}, "insert(int, java.lang.Object)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["@B_java#lang#Object_E@", "Object: an Object."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the Object argument into this character sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, Object obj)"}, "append(int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: an int."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the int argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (int i)"}, "append(char)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["char", "char: a char."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the char argument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by 1. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the character in that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (char c)"}, "getChars(int, int, char[], int)": {"Returns": [], "Parameters": [["int", "int: start copying at this offset."], ["int", "int: stop copying at this offset."], ["char[]", "char: the array to copy the data into."], ["int", "int: offset into dst."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Characters are copied from this sequence into the destination character array dst. The first character to be copied is at index srcBegin; the last character to be copied is at index srcEnd-1. The total number of characters to be copied is srcEnd-srcBegin. The characters are copied into the subarray of dst starting at index dstBegin and ending at index:", "history": "added in API level 1", "FullName": "public void getChars (int srcBegin, int srcEnd, char[] dst, int dstBegin)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this sequence of characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representing the data in this sequence. A new String object is allocated and initialized to contain the character sequence currently represented by this object. This String is then returned. Subsequent changes to this sequence do not affect the contents of the String.", "history": "added in API level 1", "FullName": "public String toString ()"}, "insert(int, java.lang.CharSequence)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["@B_java#lang#CharSequence_E@", "CharSequence: the sequence to be inserted"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified CharSequence into this sequence. The characters of the CharSequence argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument s. The result of this method is exactly the same as if it were an invocation of this object's #_E@(dstOffset, s, 0, s.length()) method. If s is null, then the four characters \"null\" are inserted into this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int dstOffset, CharSequence s)"}, "replace(int, int, java.lang.String)": {"Returns": [["@B_java#lang#StringBuffer_E@", "This object."]], "Parameters": [["int", "int: The beginning index, inclusive."], ["int", "int: The ending index, exclusive."], ["@B_java#lang#String_E@", "String: String that will replace previous contents."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the characters in a substring of this sequence with characters in the specified String. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. First the characters in the substring are removed and then the specified String is inserted at start. (This sequence will be lengthened to accommodate the specified String if necessary.)", "history": "added in API level 1", "FullName": "public StringBuffer replace (int start, int end, String str)"}, "insert(int, char[], int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "This object"]], "Parameters": [["int", "int: position at which to insert subarray."], ["char[]", "char: A char array."], ["int", "int: the index of the first char in subarray to be inserted."], ["int", "int: the number of chars in the subarray to be inserted."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of a subarray of the str array argument into this sequence. The subarray begins at the specified offset and extends len chars. The characters of the subarray are inserted into this sequence at the position indicated by index. The length of this sequence increases by len chars.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int index, char[] str, int offset, int len)"}, "append(java.lang.StringBuffer)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["@B_java#lang#StringBuffer_E@", "StringBuffer: the StringBuffer to append."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified StringBuffer to this sequence. The characters of the StringBuffer argument are appended, in order, to the contents of this StringBuffer, increasing the length of this StringBuffer by the length of the argument. If sb is null, then the four characters \"null\" are appended to this StringBuffer. Let StringBuffer just prior to execution of the append method. Then the character at index sb. This method synchronizes on this, the destination object, but does not synchronize on the source (sb).", "history": "added in API level 1", "FullName": "public StringBuffer append (StringBuffer sb)"}, "appendCodePoint(int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: a Unicode code point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the codePoint argument to this sequence. The argument is appended to the contents of this sequence. The length of this sequence increases by @B_java#lang#Character#charCount_E@. The overall effect is exactly as if the argument were converted to a char array by the method @B_java#lang#Character#toChars_E@ and the character in that array were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer appendCodePoint (int codePoint)"}, "append(float)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["float", "float: a float."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the float argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (float f)"}, "setLength(int)": {"Returns": [], "Parameters": [["int", "int: the new length"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": ["@B_java#lang#StringBuffer#length_E@"], "Permissions": [], "Description": "Sets the length of the character sequence. The sequence is changed to a new character sequence whose length is specified by the argument. For every nonnegative index newLength, the character at index '\\u0000'. In other words, if the newLength argument is less than the current length, the length is changed to the specified length. If the newLength argument is greater than or equal to the current length, sufficient null characters ('\\u0000') are appended so that length becomes the newLength argument. The newLength argument must be greater than or equal to 0.", "history": "added in API level 1", "FullName": "public void setLength (int newLength)"}, "substring(int, int)": {"Returns": [["@B_java#lang#String_E@", "The new string."]], "Parameters": [["int", "int: The beginning index, inclusive."], ["int", "int: The ending index, exclusive."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new String that contains a subsequence of characters currently contained in this sequence. The substring begins at the specified start and extends to the character at index end - 1.", "history": "added in API level 1", "FullName": "public String substring (int start, int end)"}, "append(char[], int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["char[]", "char: the characters to be appended."], ["int", "int: the index of the first char to append."], ["int", "int: the number of chars to append."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of a subarray of the char array argument to this sequence. Characters of the char array str, starting at index offset, are appended, in order, to the contents of this sequence. The length of this sequence increases by the value of len. The overall effect is exactly as if the arguments were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (char[] str, int offset, int len)"}, "length()": {"Returns": [["int", "the length of the sequence of characters currently represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length (character count).", "history": "added in API level 1", "FullName": "public int length ()"}, "deleteCharAt(int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "This object."]], "Parameters": [["int", "int: Index of char to remove"]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the char at the specified position in this sequence. This sequence is shortened by one char. Note: If the character at the given index is a supplementary character, this method does not remove the entire character. If correct handling of supplementary characters is required, determine the number of chars to remove by calling Character.charCount(thisSequence.codePointAt(index)), where thisSequence is this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer deleteCharAt (int index)"}, "codePointAt(int)": {"Returns": [["int", "the code point value of the character at the index"]], "Parameters": [["int", "int: the index to the char values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character (Unicode code point) at the specified index. The index refers to char values (Unicode code units) and ranges from 0 to length()- 1. If the char value specified at the given index is in the high-surrogate range, the following index is less than the length of this sequence, and the char value at the following index is in the low-surrogate range, then the supplementary code point corresponding to this surrogate pair is returned. Otherwise, the char value at the given index is returned.", "history": "added in API level 1", "FullName": "public int codePointAt (int index)"}, "insert(int, java.lang.String)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["@B_java#lang#String_E@", "String: a string."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string into this character sequence. The characters of the String argument are inserted, in order, into this sequence at the indicated offset, moving up any characters originally above that position and increasing the length of this sequence by the length of the argument. If str is null, then the four characters \"null\" are inserted into this sequence. The character at index the character at index offset the character at index -offset in the argument str, if offset but is less than offset+str.length() the character at index -str.length() in the old character sequence, if offset+str.length() The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, String str)"}, "insert(int, java.lang.CharSequence, int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset in this sequence."], ["@B_java#lang#CharSequence_E@", "CharSequence: the sequence to be inserted."], ["int", "int: the starting index of the subsequence to be inserted."], ["int", "int: the end index of the subsequence to be inserted."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts a subsequence of the specified CharSequence into this sequence. The subsequence of the argument s specified by start and end are inserted, in order, into this sequence at the specified destination offset, moving up any characters originally above that position. The length of this sequence is increased by end - start. The character at index the character at index dstOffset the character at index +start-dstOffset in the argument s, if dstOffset but is less than dstOffset+end-start the character at index -(end-start) in this sequence, if dstOffset+end-start The dstOffset argument must be greater than or equal to 0, and less than or equal to the length of this sequence. The start argument must be nonnegative, and not greater than end. The end argument must be greater than or equal to start, and less than or equal to the length of s. If s is null, then this method inserts characters as if the s parameter was a sequence containing the four characters \"null\".", "history": "added in API level 1", "FullName": "public StringBuffer insert (int dstOffset, CharSequence s, int start, int end)"}, "append(double)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["double", "double: a double."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the double argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (double d)"}, "append(java.lang.String)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["@B_java#lang#String_E@", "String: a string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified string to this character sequence. The characters of the String argument are appended, in order, increasing the length of this sequence by the length of the argument. If str is null, then the four characters \"null\" are appended. Let append method. Then the character at index str.", "history": "added in API level 1", "FullName": "public StringBuffer append (String str)"}, "insert(int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["int", "int: an int."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the second int argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, int i)"}, "codePointCount(int, int)": {"Returns": [["int", "the number of Unicode code points in the specified text range"]], "Parameters": [["int", "int: the index to the first char of the text range."], ["int", "int: the index after the last char of the text range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of Unicode code points in the specified text range of this sequence. The text range begins at the specified beginIndex and extends to the char at index endIndex - 1. Thus the length (in chars) of the text range is endIndex-beginIndex. Unpaired surrogates within this sequence count as one code point each.", "history": "added in API level 1", "FullName": "public int codePointCount (int beginIndex, int endIndex)"}, "append(long)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["long", "long: a long."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the long argument to this sequence. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (long lng)"}, "append(java.lang.Object)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["@B_java#lang#Object_E@", "Object: an Object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the Object argument. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (Object obj)"}, "substring(int)": {"Returns": [["@B_java#lang#String_E@", "The new string."]], "Parameters": [["int", "int: The beginning index, inclusive."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new String that contains a subsequence of characters currently contained in this character sequence. The substring begins at the specified index and extends to the end of this sequence.", "history": "added in API level 1", "FullName": "public String substring (int start)"}, "StringBuffer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the initial contents of the buffer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string buffer initialized to the contents of the specified string. The initial capacity of the string buffer is 16 plus the length of the string argument.", "history": "added in API level 1", "FullName": "public StringBuffer (String str)"}, "insert(int, long)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["long", "long: a long."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the long argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, long l)"}, "codePointBefore(int)": {"Returns": [["int", "the Unicode code point value before the given index."]], "Parameters": [["int", "int: the index following the code point that should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character (Unicode code point) before the specified index. The index refers to char values (Unicode code units) and ranges from 1 to length(). If the char value at (index - 1) is in the low-surrogate range, (index - 2) is not negative, and the char value at (index - 2) is in the high-surrogate range, then the supplementary code point value of the surrogate pair is returned. If the char value at index - 1 is an unpaired low-surrogate or a high-surrogate, the surrogate value is returned.", "history": "added in API level 1", "FullName": "public int codePointBefore (int index)"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int: the minimum desired capacity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures that the capacity is at least equal to the specified minimum. If the current capacity is less than the argument, then a new internal array is allocated with greater capacity. The new capacity is the larger of: The minimumCapacity argument. Twice the old capacity, plus 2. If the minimumCapacity argument is nonpositive, this method takes no action and simply returns. Note that subsequent operations on this object can reduce the actual capacity below that requested here.", "history": "added in API level 1", "FullName": "public void ensureCapacity (int minimumCapacity)"}, "indexOf(java.lang.String)": {"Returns": [["int", "if the string argument occurs as a substring within this object, then the index of the first character of the first such substring is returned; if it does not occur as a substring, -1 is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: any string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the first occurrence of the specified substring. The integer returned is the smallest value true.", "history": "added in API level 1", "FullName": "public int indexOf (String str)"}, "StringBuffer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string buffer with no characters in it and an initial capacity of 16 characters.", "history": "added in API level 1", "FullName": "public StringBuffer ()"}, "capacity()": {"Returns": [["int", "the current capacity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current capacity. The capacity is the amount of storage available for newly inserted characters, beyond which an allocation will occur.", "history": "added in API level 1", "FullName": "public int capacity ()"}, "append(char[])": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["char[]", "char: the characters to be appended."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the string representation of the char array argument to this sequence. The characters of the array argument are appended, in order, to the contents of this sequence. The length of this sequence increases by the length of the argument. The overall effect is exactly as if the argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ to this character sequence.", "history": "added in API level 1", "FullName": "public StringBuffer append (char[] str)"}, "trimToSize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to reduce storage used for the character sequence. If the buffer is larger than necessary to hold its current sequence of characters, then it may be resized to become more space efficient. Calling this method may, but is not required to, affect the value returned by a subsequent call to the capacity() method.", "history": "added in API level 1", "FullName": "public void trimToSize ()"}, "insert(int, char)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["char", "char: a char."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the char argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the character in that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, char c)"}, "lastIndexOf(java.lang.String, int)": {"Returns": [["int", "the index within this sequence of the last occurrence of the specified substring."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."], ["int", "int: the index to start the search from."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the last occurrence of the specified substring. The integer returned is the largest value", "history": "added in API level 1", "FullName": "public int lastIndexOf (String str, int fromIndex)"}, "insert(int, boolean)": {"Returns": [["@B_java#lang#StringBuffer_E@", "a reference to this object."]], "Parameters": [["int", "int: the offset."], ["boolean", "boolean: a boolean."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the string representation of the boolean argument into this sequence. The overall effect is exactly as if the second argument were converted to a string by the method @B_java#lang#String#valueOf_E@, and the characters of that string were then #_E@ into this character sequence at the indicated offset. The offset argument must be greater than or equal to 0, and less than or equal to the length of this sequence.", "history": "added in API level 1", "FullName": "public StringBuffer insert (int offset, boolean b)"}, "setCharAt(int, char)": {"Returns": [], "Parameters": [["int", "int: the index of the character to modify."], ["char", "char: the new character."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", ""]], "SeeAlso": ["@B_java#lang#StringBuffer#length_E@"], "Permissions": [], "Description": "The character at the specified index is set to ch. This sequence is altered to represent a new character sequence that is identical to the old character sequence, except that it contains the character ch at position index. The index argument must be greater than or equal to 0, and less than the length of this sequence.", "history": "added in API level 1", "FullName": "public void setCharAt (int index, char ch)"}, "delete(int, int)": {"Returns": [["@B_java#lang#StringBuffer_E@", "This object."]], "Parameters": [["int", "int: The beginning index, inclusive."], ["int", "int: The ending index, exclusive."]], "Throws": [["@B_java#lang#StringIndexOutOfBoundsException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes the characters in a substring of this sequence. The substring begins at the specified start and extends to the character at index end - 1 or to the end of the sequence if no such character exists. If start is equal to end, no changes are made.", "history": "added in API level 1", "FullName": "public StringBuffer delete (int start, int end)"}, "offsetByCodePoints(int, int)": {"Returns": [["int", "the index within this sequence"]], "Parameters": [["int", "int: the index to be offset"], ["int", "int: the offset in code points"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this sequence that is offset from the given index by codePointOffset code points. Unpaired surrogates within the text range given by index and codePointOffset count as one code point each.", "history": "added in API level 1", "FullName": "public int offsetByCodePoints (int index, int codePointOffset)"}, "StringBuffer(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the sequence to copy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string buffer that contains the same characters as the specified CharSequence. The initial capacity of the string buffer is 16 plus the length of the CharSequence argument. If the length of the specified CharSequence is less than or equal to zero, then an empty buffer of capacity 16 is returned.", "history": "added in API level 1", "FullName": "public StringBuffer (CharSequence seq)"}, "StringBuffer(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity."]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if the capacity argument is less than 0."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string buffer with no characters in it and the specified initial capacity.", "history": "added in API level 1", "FullName": "public StringBuffer (int capacity)"}, "lastIndexOf(java.lang.String)": {"Returns": [["int", "if the string argument occurs one or more times as a substring within this object, then the index of the first character of the last such substring is returned. If it does not occur as a substring, -1 is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the substring to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index within this string of the rightmost occurrence of the specified substring. The rightmost empty string \"\" is considered to occur at the index value this.length(). The returned index is the largest value", "history": "added in API level 1", "FullName": "public int lastIndexOf (String str)"}}, "Inheritance": [], "ClassName": "java.lang.StringBuffer", "ClassDesc": "A thread-safe, mutable sequence of characters. A string buffer is like a @B_java#lang#String_E@, but can be modified. At any point in time it contains some particular sequence of characters, but the length and content of the sequence can be changed through certain method calls. String buffers are safe for use by multiple threads. The methods are synchronized where necessary so that all the operations on any particular instance behave as if they occur in some serial order that is consistent with the order of the method calls made by each of the individual threads involved. The principal operations on a StringBuffer are the append and insert methods, which are overloaded so as to accept data of any type. Each effectively converts a given datum to a string and then appends or inserts the characters of that string to the string buffer. The append method always adds these characters at the end of the buffer; the insert method adds the characters at a specified point. For example, if z refers to a string buffer object whose current contents are \"start\", then the method call z.append(\"le\") would cause the string buffer to contain \"startle\", whereas z.insert(4, \"le\") would alter the string buffer to contain \"starlet\". In general, if sb refers to an instance of a StringBuffer, then sb.append(x) has the same effect as sb.insert(sb.length(), x). Whenever an operation occurs involving a source sequence (such as appending or inserting from a source sequence), this class synchronizes only on the string buffer performing the operation, not on the source. Note that while StringBuffer is designed to be safe to use concurrently from multiple threads, if the constructor or the append or insert operation is passed a source sequence that is shared across threads, the calling code must ensure that the operation has a consistent and unchanging view of the source sequence for the duration of the operation. This could be satisfied by the caller holding a lock during the operation's call, by using an immutable source sequence, or by not sharing the source sequence across threads. Every string buffer has a capacity. As long as the length of the character sequence contained in the string buffer does not exceed the capacity, it is not necessary to allocate a new internal buffer array. If the internal buffer overflows, it is automatically made larger. Unless otherwise noted, passing a null argument to a constructor or method in this class will cause a @B_java#lang#NullPointerException_E@ to be thrown. As of release JDK 5, this class has been supplemented with an equivalent class designed for use by a single thread, @B_java#lang#StringBuilder_E@. The StringBuilder class should generally be used in preference to this one, as it supports all of the same operations but it is faster, as it performs no synchronization."}