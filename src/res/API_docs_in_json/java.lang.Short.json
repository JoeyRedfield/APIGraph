{"Functions": {"shortValue()": {"Returns": [["short", "the numeric value represented by this object after conversion to type short."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as a short.", "history": "Added in API level 1", "FullName": "public short shortValue ()"}, "reverseBytes(short)": {"Returns": [["short", "the value obtained by reversing (or, equivalently, swapping) the bytes in the specified short value."]], "Parameters": [["short", "short: the value whose bytes are to be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified short value.", "history": "Added in API level 1", "FullName": "public static short reverseBytes (short i)"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as an int after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as a long after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "parseShort(java.lang.String)": {"Returns": [["short", "the short value represented by the argument in decimal."]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the short representation to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the string does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed decimal short. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting short value is returned, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Short#parseShort_E@ method.", "history": "Added in API level 1", "FullName": "public static short parseShort (String s)"}, "compare(short, short)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["short", "short: the first short to compare"], ["short", "short: the second short to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two short values numerically. The value returned is identical to what would be returned by:", "history": "added in API level 19", "FullName": "public static int compare (short x, short y)"}, "parseShort(java.lang.String, int)": {"Returns": [["short", "the short represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the short representation to be parsed"], ["int", "int: the radix to be used while parsing s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed short in the radix specified by the second argument. The characters in the string must all be digits, of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value) except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting short value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002D') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type short.", "history": "added in API level 1", "FullName": "public static short parseShort (String s, int radix)"}, "toUnsignedInt(short)": {"Returns": [["int", "the argument converted to int by an unsigned conversion"]], "Parameters": [["short", "short: the value to convert to an unsigned int"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the argument to an int by an unsigned conversion. In an unsigned conversion to an int, the high-order 16 bits of the int are zero and the low-order 16 bits are equal to the bits of the short argument. Consequently, zero and positive short values are mapped to a numerically equal int value and negative short values are mapped to an int value equal to the input plus 2", "history": "Added in API level 26", "FullName": "public static int toUnsignedInt (short x)"}, "compareTo(java.lang.Short)": {"Returns": [["int", "the value 0 if this Short is equal to the argument Short; a value less than 0 if this Short is numerically less than the argument Short; and a value greater than 0 if this Short is numerically greater than the argument Short (signed comparison)."]], "Parameters": [["@B_java#lang#Short_E@", "Short: the Short to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two Short objects numerically.", "history": "Added in API level 1", "FullName": "public int compareTo (Short anotherShort)"}, "valueOf(java.lang.String, int)": {"Returns": [["@B_java#lang#Short_E@", "a Short object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed short in the radix specified by the second argument, exactly as if the argument were given to the @B_java#lang#Short#parseShort_E@ method. The result is a Short object that represents the short value specified by the string. In other words, this method returns a Short object equal to the value of:", "history": "added in API level 1", "FullName": "public static Short valueOf (String s, int radix)"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object to the specified object. The result is true if and only if the argument is not null and is a Short object that contains the same short value as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "valueOf(short)": {"Returns": [["@B_java#lang#Short_E@", "a Short instance representing s."]], "Parameters": [["short", "short: a short value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Short instance representing the specified short value. If a new Short instance is not required, this method should generally be used in preference to the constructor @B_java#lang#Short#Short_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values. This method will always cache values in the range -128 to 127, inclusive, and may cache other values outside of this range.", "history": "Added in API level 1", "FullName": "public static Short valueOf (short s)"}, "toString(short)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the specified short"]], "Parameters": [["short", "short: the short to be converted"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Returns a new String object representing the specified short. The radix is assumed to be 10.", "history": "Added in API level 1", "FullName": "public static String toString (short s)"}, "hashCode()": {"Returns": [["int", "a hash code value for this Short"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Short; equal to the result of invoking intValue().", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "byteValue()": {"Returns": [["byte", "the numeric value represented by this object after conversion to type byte."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as a byte after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public byte byteValue ()"}, "compare(short,short)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["short", "short: the first short to compare"], ["short", "short: the second short to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two short values numerically. The value returned is identical to what would be returned by:", "history": "Added in API level 19", "FullName": "public static int compare (short x, short y)"}, "hashCode(short)": {"Returns": [["int", "a hash code value for a short value."]], "Parameters": [["short", "short: the value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a short value; compatible with Short.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (short value)"}, "decode(java.lang.String)": {"Returns": [["@B_java#lang#Short_E@", "a Short object holding the short value represented by nm"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to decode."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable short."]], "SeeAlso": ["@B_java#lang#Short#parseShort_E@"], "Permissions": [], "Description": "Decodes a String into a Short. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: The sequence of characters following an optional sign and/or radix specifier (\"0x\", \"0X\", \"#\", or leading zero) is parsed as by the Short.parseShort method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a @B_java#lang#NumberFormatException_E@ will be thrown. The result is negated if first character of the specified String is the minus sign. No whitespace characters are permitted in the String.", "history": "Added in API level 1", "FullName": "public static Short decode (String nm)"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Short as a float after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "parseShort(java.lang.String,int)": {"Returns": [["short", "the short represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the short representation to be parsed"], ["int", "int: the radix to be used while parsing s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed short in the radix specified by the second argument. The characters in the string must all be digits, of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value) except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting short value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002D') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type short.", "history": "Added in API level 1", "FullName": "public static short parseShort (String s, int radix)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the value of this object in base 10."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing this Short's value. The value is converted to signed decimal representation and returned as a string, exactly as if the short value were given as an argument to the @B_java#lang#Short#toString_E@ method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Short(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the String to be converted to a Short"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": ["@B_java#lang#Short#parseShort_E@"], "Permissions": [], "Description": "Constructs a newly allocated Short object that represents the short value indicated by the String parameter. The string is converted to a short value in exactly the manner used by the parseShort method for radix 10.", "history": "Added in API level 1", "FullName": "public Short (String s)"}, "Short(short)": {"Returns": [], "Parameters": [["short", "short: the value to be represented by the Short."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Short object that represents the specified short value.", "history": "Added in API level 1", "FullName": "public Short (short value)"}, "valueOf(java.lang.String,int)": {"Returns": [["@B_java#lang#Short_E@", "a Short object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Short object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed short in the radix specified by the second argument, exactly as if the argument were given to the @B_java#lang#Short#parseShort_E@ method. The result is a Short object that represents the short value specified by the string. In other words, this method returns a Short object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Short valueOf (String s, int radix)"}, "toUnsignedLong(short)": {"Returns": [["long", "the argument converted to long by an unsigned conversion"]], "Parameters": [["short", "short: the value to convert to an unsigned long"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the argument to a long by an unsigned conversion. In an unsigned conversion to a long, the high-order 48 bits of the long are zero and the low-order 16 bits are equal to the bits of the short argument. Consequently, zero and positive short values are mapped to a numerically equal long value and negative short values are mapped to a long value equal to the input plus 2", "history": "Added in API level 26", "FullName": "public static long toUnsignedLong (short x)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#lang#Short_E@", "a Short object holding the value represented by the string argument"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable short."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Short object holding the value given by the specified String. The argument is interpreted as representing a signed decimal short, exactly as if the argument were given to the @B_java#lang#Short#parseShort_E@ method. The result is a Short object that represents the short value specified by the string. In other words, this method returns a Short object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Short valueOf (String s)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.lang.Short", "ClassDesc": "The Short class wraps a value of primitive type short in an object. An object of type Short contains a single field whose type is short. In addition, this class provides several methods for converting a short to a String and a String to a short, as well as other constants and methods useful when dealing with a short."}