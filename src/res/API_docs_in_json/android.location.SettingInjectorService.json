{"Functions": {"onStartCommand(android.content.Intent, int, int)": {"Returns": [["int", "The return value indicates what semantics the system should use for the service's current started state. It may be one of the constants associated with the @B_android#app#Service#START_CONTINUATION_MASK_E@ bits."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent supplied to @B_android#content#Context#startService_E@, as given. This may be null if the service is being restarted after its process has gone away, and it had previously returned anything except @B_android#app#Service#START_STICKY_COMPATIBILITY_E@."], ["int", "int: Additional data about this start request."], ["int", "int: A unique integer representing this specific request to start. Use with @B_android#app#Service#stopSelfResult_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system every time a client explicitly starts the service by calling @B_android#content#Context#startService_E@, providing the arguments it supplied and a unique integer token representing the start request. Do not call this method directly. For backwards compatibility, the default implementation calls @B_android#app#Service#onStart_E@ and returns either @B_android#app#Service#START_STICKY_E@ or @B_android#app#Service#START_STICKY_COMPATIBILITY_E@. Note that the system calls this on your service's main thread. A service's main thread is the same thread where UI operations take place for Activities running in the same process. You should always avoid stalling the main thread's event loop. When doing long-running operations, network calls, or heavy disk I/O, you should kick off a new thread, or use @B_android#os#AsyncTask_E@.", "history": "added in API level 19", "FullName": "public final int onStartCommand (Intent intent, int flags, int startId)"}, "onStartCommand(android.content.Intent,int,int)": {"Returns": [["int", "The return value indicates what semantics the system should use for the service's current started state. It may be one of the constants associated with the @B_android#app#Service#START_CONTINUATION_MASK_E@ bits. Value is @B_android#app#Service#START_STICKY_COMPATIBILITY_E@, @B_android#app#Service#START_STICKY_E@, @B_android#app#Service#START_NOT_STICKY_E@, or @B_android#app#Service#START_REDELIVER_INTENT_E@"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent supplied to @B_android#content#Context#startService_E@, as given. This may be null if the service is being restarted after its process has gone away, and it had previously returned anything except @B_android#app#Service#START_STICKY_COMPATIBILITY_E@."], ["int", "int: Additional data about this start request. Value is either 0 or a combination of @B_android#app#Service#START_FLAG_REDELIVERY_E@, and @B_android#app#Service#START_FLAG_RETRY_E@"], ["int", "int: A unique integer representing this specific request to start. Use with @B_android#app#Service#stopSelfResult_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system every time a client explicitly starts the service by calling @B_android#content#Context#startService_E@, providing the arguments it supplied and a unique integer token representing the start request. Do not call this method directly. For backwards compatibility, the default implementation calls @B_android#app#Service#onStart_E@ and returns either @B_android#app#Service#START_STICKY_E@ or @B_android#app#Service#START_STICKY_COMPATIBILITY_E@. Note that the system calls this on your service's main thread. A service's main thread is the same thread where UI operations take place for Activities running in the same process. You should always avoid stalling the main thread's event loop. When doing long-running operations, network calls, or heavy disk I/O, you should kick off a new thread, or use @B_android#os#AsyncTask_E@.", "history": "Added in API level 19", "FullName": "public final int onStartCommand (Intent intent, int flags, int startId)"}, "onStart(android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement @B_android#app#Service#onStartCommand_E@ instead.", "history": "Added in API level 19", "FullName": "public final void onStart (Intent intent, int startId)"}, "refreshSettings(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a broadcast to refresh the injected settings on location settings page.", "history": "Added in API level 29", "FullName": "public static final void refreshSettings (Context context)"}, "onStart(android.content.Intent, int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement @B_android#app#Service#onStartCommand_E@ instead.", "history": "added in API level 19", "FullName": "public final void onStart (Intent intent, int startId)"}, "onGetEnabled()": {"Returns": [["boolean", "the @B_android#preference#Preference#isEnabled_E@ value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#preference#Preference#isEnabled_E@ value. Should not perform unpredictably-long operations such as network access--see the running-time comments in the class-level javadoc. Note that to prevent churn in the settings list, there is no support for dynamically choosing to hide a setting. Instead you should have this method return false, which will disable the setting and its link to your setting activity. One reason why you might choose to do this is if @B_android#provider#Settings#Secure#LOCATION_MODE_E@ is @B_android#provider#Settings#Secure#LOCATION_MODE_OFF_E@. It is possible that the user may click on the setting before this method returns, so your settings activity must handle the case where it is invoked even though the setting is disabled. The simplest approach may be to simply call @B_android#app#Activity#finish_E@ when disabled.", "history": "Added in API level 19", "FullName": "protected abstract boolean onGetEnabled ()"}, "onGetSummary()": {"Returns": [["@B_java#lang#String_E@", "the @B_android#preference#Preference#getSummary_E@ value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#preference#Preference#getSummary_E@ value (allowed to be null or empty). Should not perform unpredictably-long operations such as network access--see the running-time comments in the class-level javadoc. This method is called on KitKat, and Q+ devices.", "history": "Added in API level 19 Deprecated in API level 21", "FullName": "protected abstract String onGetSummary ()"}, "SettingInjectorService(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: used to identify your subclass in log messages"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor.", "history": "Added in API level 19", "FullName": "public SettingInjectorService (String name)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 19", "FullName": "public final IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.location.SettingInjectorService", "ClassDesc": "Dynamically specifies the summary (subtitle) and enabled status of a preference injected into the list of app settings displayed by the system settings app For use only by apps that are included in the system image, for preferences that affect multiple apps. Location settings that apply only to one app should be shown within that app, rather than in the system settings. To add a preference to the list, a subclass of @B_android#location#SettingInjectorService_E@ must be declared in the manifest as so: title: The @B_android#preference#Preference#getTitle_E@ value. The title should make it clear which apps are affected by the setting, typically by including the name of the developer. For example, \"Acme Corp. ads preferences.\" icon: The @B_android#preference#Preference#getIcon_E@ value. Typically this will be a generic icon for the developer rather than the icon for an individual app. settingsActivity: the activity which is launched to allow the user to modify the setting value. The activity must be in the same package as the subclass of @B_android#location#SettingInjectorService_E@. The activity should use your own branding to help emphasize to the user that it is not part of the system settings. To ensure a good user experience, your @B_android#app#Application#onCreate_E@, @B_android#location#SettingInjectorService#onGetSummary_E@, and @B_android#location#SettingInjectorService#onGetEnabled_E@ methods must all be fast. If any are slow, it can delay the display of settings values for other apps as well. Note further that all are called on your app's UI thread. For compactness, only one copy of a given setting should be injected. If each account has a distinct value for the setting, then the @B_android#location#SettingInjectorService#onGetSummary_E@ value should represent a summary of the state across all of the accounts and settingsActivity should display the value for each account."}