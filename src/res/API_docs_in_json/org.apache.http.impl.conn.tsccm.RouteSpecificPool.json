{"Functions": {"removeThread(org.apache.http.impl.conn.tsccm.WaitingThread)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#WaitingThread_E@", "the waiting thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a waiting thread, if it is queued.", "history": "Added in API level 1", "FullName": "public void removeThread (WaitingThread wt)"}, "getMaxEntries()": {"Returns": [["", "the max entry number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the maximum number of entries allowed for this pool.", "history": "Added in API level 1", "FullName": "public final int getMaxEntries ()"}, "getEntryCount()": {"Returns": [["", "the number of entries for the route of this pool"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the number of entries. This includes not only the free entries, but also those that have been created and are currently issued to an application.", "history": "Added in API level 1", "FullName": "public final int getEntryCount ()"}, "queueThread(org.apache.http.impl.conn.tsccm.WaitingThread)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#WaitingThread_E@", "the waiting thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a waiting thread. This pool makes no attempt to match waiting threads with pool entries. It is the caller's responsibility to check that there is no entry before adding a waiting thread.", "history": "Added in API level 1", "FullName": "public void queueThread (WaitingThread wt)"}, "nextThread()": {"Returns": [["", "a waiting thread, or null if there is none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the next thread in the queue.", "history": "Added in API level 1", "FullName": "public WaitingThread nextThread ()"}, "RouteSpecificPool(org.apache.http.conn.routing.HttpRoute, int)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route for which to pool"], ["int", "the maximum number of entries allowed for this pool"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new route-specific pool.", "history": "Added in API level 1", "FullName": "public RouteSpecificPool (HttpRoute route, int maxEntries)"}, "getRoute()": {"Returns": [["", "the route"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the route for which this pool is specific.", "history": "Added in API level 1", "FullName": "public final HttpRoute getRoute ()"}, "isUnused()": {"Returns": [["", "true if this pool is unused, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this pool is unused. A pool is unused if there is neither an entry nor a waiting thread. All entries count, not only the free but also the allocated ones.", "history": "Added in API level 1", "FullName": "public boolean isUnused ()"}, "deleteEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)": {"Returns": [["", "true if the entry was found and deleted, or false if the entry was not found"]], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the entry to delete from this pool"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes an entry from this pool. Only entries that are currently free in this pool can be deleted. Allocated entries can not be deleted.", "history": "Added in API level 1", "FullName": "public boolean deleteEntry (BasicPoolEntry entry)"}, "getCapacity()": {"Returns": [["", "capacity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return remaining capacity of this pool", "history": "Added in API level 1", "FullName": "public int getCapacity ()"}, "allocEntry(java.lang.Object)": {"Returns": [["", "an available pool entry, or null if there is none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a free entry from this pool, if one is available.", "history": "Added in API level 1", "FullName": "public BasicPoolEntry allocEntry (Object state)"}, "freeEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the entry obtained from @B_org#apache#http#impl#conn#tsccm#RouteSpecificPool#allocEntry_E@ or presented to @B_org#apache#http#impl#conn#tsccm#RouteSpecificPool#createdEntry_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an allocated entry to this pool.", "history": "Added in API level 1", "FullName": "public void freeEntry (BasicPoolEntry entry)"}, "dropEntry()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forgets about an entry from this pool. This method is used to indicate that an entry @B_org#apache#http#impl#conn#tsccm#RouteSpecificPool#allocEntry_E@ from this pool has been lost and will not be returned.", "history": "Added in API level 1", "FullName": "public void dropEntry ()"}, "hasThread()": {"Returns": [["", "true if there is a waiting thread, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether there is a waiting thread in this pool.", "history": "Added in API level 1", "FullName": "public boolean hasThread ()"}, "createdEntry(org.apache.http.impl.conn.tsccm.BasicPoolEntry)": {"Returns": [], "Parameters": [["@B_org#apache#http#impl#conn#tsccm#BasicPoolEntry_E@", "the entry that was created for this pool"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates creation of an entry for this pool. The entry will @B_org#apache#http#impl#conn#tsccm#RouteSpecificPool#freeEntry_E@.", "history": "Added in API level 1", "FullName": "public void createdEntry (BasicPoolEntry entry)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.tsccm.RouteSpecificPool", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A connection sub-pool for a specific route, used by @B_org#apache#http#impl#conn#tsccm#ConnPoolByRoute_E@. The methods in this class are unsynchronized. It is expected that the containing pool takes care of synchronization."}