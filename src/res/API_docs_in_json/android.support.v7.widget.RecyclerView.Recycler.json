{"Functions": {"getScrapList()": {"Returns": [["@B_java#util#List_E@", "List of ViewHolders in the scrap list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable list of ViewHolders that are currently in the scrap list.", "history": "added in version 22.0.0", "FullName": "List<RecyclerView.ViewHolder> getScrapList ()"}, "getViewForPosition(int)": {"Returns": [["@B_android#view#View_E@", "A view representing the data at position from adapter"]], "Parameters": [["int", "int: Position to obtain a view for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a view initialized for the given position. This method should be used by @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ implementations to obtain views to represent data from an @B_android#support#v7#widget#RecyclerView#Adapter_E@. The Recycler may reuse a scrap or detached view from a shared pool if one is available for the correct view type. If the adapter has not indicated that the data at the given position has changed, the Recycler will attempt to hand back a scrap view that was previously initialized for that data without rebinding.", "history": "added in version 22.0.0", "FullName": "View getViewForPosition (int position)"}, "recycleView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Removed view for recycling"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#removeAndRecycleView_E@"], "Permissions": [], "Description": "Recycle a detached view. The specified view will be added to a pool of views for later rebinding and reuse. A view must be fully detached (removed from parent) before it may be recycled. If the View is scrapped, it will be removed from scrap list.", "history": "added in version 22.0.0", "FullName": "void recycleView (View view)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear scrap views out of this recycler. Detached views contained within a recycled view pool will remain.", "history": "added in version 22.0.0", "FullName": "void clear ()"}, "convertPreLayoutPositionToPostLayout(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: The pre-layout position to convert. Must be greater or equal to 0 and less than @B_android#support#v7#widget#RecyclerView#State#getItemCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "RecyclerView provides artificial position range (item count) in pre-layout state and automatically maps these positions to @B_android#support#v7#widget#RecyclerView#Adapter_E@ positions when @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@ or @B_android#support#v7#widget#RecyclerView#Recycler#bindViewToPosition_E@ is called. Usually, LayoutManager does not need to worry about this. However, in some cases, your LayoutManager may need to call some custom component with item positions in which case you need the actual adapter position instead of the pre layout position. You can use this method to convert a pre-layout position to adapter (post layout) position. Note that if the provided position belongs to a deleted ViewHolder, this method will return -1. Calling this method in post-layout state returns the same value back.", "history": "added in version 22.0.0", "FullName": "int convertPreLayoutPositionToPostLayout (int position)"}, "RecyclerView.Recycler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "RecyclerView.Recycler ()"}, "bindViewToPosition(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to update."], ["int", "int: The position of the item to bind to this View."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Binds the given View to the position. The View can be a View previously retrieved via @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@ or created by @B_android#support#v7#widget#RecyclerView#Adapter#onCreateViewHolder_E@. Generally, a LayoutManager should acquire its views via @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@ and let the RecyclerView handle caching. This is a helper method for LayoutManager who wants to handle its own recycling logic. Note that, @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@ already binds the View to the position so you don't need to call this method unless you want to bind this View to another position.", "history": "added in version 22.0.0", "FullName": "void bindViewToPosition (View view, int position)"}, "setViewCacheSize(int)": {"Returns": [], "Parameters": [["int", "int: Number of views to keep before sending views to the shared pool"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the maximum number of detached, valid views we should retain for later use.", "history": "added in version 22.0.0", "FullName": "void setViewCacheSize (int viewCount)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.widget.RecyclerView.Recycler", "ClassDesc": "A Recycler is responsible for managing scrapped or detached item views for reuse. A \"scrapped\" view is a view that is still attached to its parent RecyclerView but that has been marked for removal or reuse. Typical use of a Recycler by a @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ will be to obtain views for an adapter's data set representing the data at a given position or item ID. If the view to be reused is considered \"dirty\" the adapter will be asked to rebind it. If not, the view can be quickly reused by the LayoutManager with no further work. Clean views that have not https:##developer#android#com@B_android#view#View#isLayoutRequested_E@ may be repositioned by a LayoutManager without remeasurement."}