{"Functions": {"setNotificationPolicy(android.app.NotificationManager.Policy)": {"Returns": [], "Parameters": [["@B_android#app#NotificationManager#Policy_E@", "NotificationManager.Policy: The new desired policy. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current notification policy. Only available if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 23", "FullName": "public void setNotificationPolicy (NotificationManager.Policy policy)"}, "cancel(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel a previously shown notification. If it's transient, the view will be hidden. If it's persistent, it will be removed from the status bar.", "history": "added in API level 5", "FullName": "public void cancel (String tag, int id)"}, "createNotificationChannelGroups(java.util.List<android.app.NotificationChannelGroup>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list of groups to create This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates multiple notification channel groups.", "history": "Added in API level 26", "FullName": "public void createNotificationChannelGroups (List<NotificationChannelGroup> groups)"}, "getAutomaticZenRule(java.lang.String)": {"Returns": [["@B_android#app#AutomaticZenRule_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the AutomaticZenRule with the given id, if it exists and the caller has access. Throws a SecurityException if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@. Returns null if there are no zen rules that match the given id, or if the calling package doesn't own the matching rule. See @B_android#app#AutomaticZenRule#getOwner_E@.", "history": "Added in API level 24", "FullName": "public AutomaticZenRule getAutomaticZenRule (String id)"}, "cancelAll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel all previously shown notifications. See @B_android#app#NotificationManager#cancel_E@ for the detailed behavior.", "history": "Added in API level 1", "FullName": "public void cancelAll ()"}, "isNotificationPolicyAccessGranted()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks the ability to modify notification do not disturb policy for the calling package. Returns true if the calling package can modify notification policy. Apps can request policy access by sending the user to the activity that matches the system intent action @B_android#provider#Settings#ACTION_NOTIFICATION_POLICY_ACCESS_SETTINGS_E@. Use @B_android#app#NotificationManager#ACTION_NOTIFICATION_POLICY_ACCESS_GRANTED_CHANGED_E@ to listen for user grant or denial of this access.", "history": "Added in API level 23", "FullName": "public boolean isNotificationPolicyAccessGranted ()"}, "getNotificationChannels()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all notification channels belonging to the calling package. Approved notification delegates (see @B_android#app#NotificationManager#canNotifyAsPackage_E@) can query notification channels belonging to packages they are the delegate for. To do so, call this method from a context created for that package (see @B_android#content#Context#createPackageContext_E@).", "history": "Added in API level 26", "FullName": "public List<NotificationChannel> getNotificationChannels ()"}, "getNotificationChannelGroups()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all notification channel groups belonging to the calling app.", "history": "Added in API level 26", "FullName": "public List<NotificationChannelGroup> getNotificationChannelGroups ()"}, "areBubblesAllowed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Notification#getBubbleMetadata_E@"], "Permissions": [], "Description": "Sets whether notifications posted by this app can appear outside of the notification shade, floating over other apps' content. This value will be ignored for notifications that are posted to channels that do not allow bubbles (@B_android#app#NotificationChannel#canBubble_E@.", "history": "Added in API level 29", "FullName": "public boolean areBubblesAllowed ()"}, "getNotificationChannel(java.lang.String)": {"Returns": [["@B_android#app#NotificationChannel_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the notification channel settings for a given channel id. The channel must belong to your package, or to a package you are an approved notification delegate for (see @B_android#app#NotificationManager#canNotifyAsPackage_E@), or it will not be returned. To query a channel as a notification delegate, call this method from a context created for that package (see @B_android#content#Context#createPackageContext_E@).", "history": "Added in API level 26", "FullName": "public NotificationChannel getNotificationChannel (String channelId)"}, "createNotificationChannelGroup(android.app.NotificationChannelGroup)": {"Returns": [], "Parameters": [["@B_android#app#NotificationChannelGroup_E@", "NotificationChannelGroup: The group to create This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a group container for @B_android#app#NotificationChannel_E@ objects. This can be used to rename an existing group. Group information is only used for presentation, not for behavior. Groups are optional for channels, and you can have a mix of channels that belong to groups and channels that do not. For example, if your application supports multiple accounts, and those accounts will have similar channels, you can create a group for each account with account specific labels instead of appending account information to each channel's label.", "history": "Added in API level 26", "FullName": "public void createNotificationChannelGroup (NotificationChannelGroup group)"}, "setAutomaticZenRuleState(java.lang.String,android.service.notification.Condition)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id of the rule whose state should change This value must never be null."], ["@B_android#service#notification#Condition_E@", "Condition: The new state of this rule This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs the notification manager that the state of an @B_android#app#AutomaticZenRule_E@ has changed. Use this method to put the system into Do Not Disturb mode or request that it exits Do Not Disturb mode. The calling app must own the provided @B_android#app#AutomaticZenRule_E@. This method can be used in conjunction with or as a replacement to @B_android#service#notification#ConditionProviderService#notifyCondition_E@.", "history": "Added in API level 29", "FullName": "public void setAutomaticZenRuleState (String id, Condition condition)"}, "isNotificationListenerAccessGranted(android.content.ComponentName)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the user has approved a given @B_android#service#notification#NotificationListenerService_E@. The listener service must belong to the calling app. Apps can request notification listener access by sending the user to the activity that matches the system intent action @B_android#provider#Settings#ACTION_NOTIFICATION_LISTENER_SETTINGS_E@.", "history": "Added in API level 27", "FullName": "public boolean isNotificationListenerAccessGranted (ComponentName listener)"}, "getNotificationDelegate()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#app#NotificationManager#setNotificationDelegate_E@ that can post notifications on your behalf, if there currently is one.", "history": "Added in API level 29", "FullName": "public String getNotificationDelegate ()"}, "notify(int,android.app.Notification)": {"Returns": [], "Parameters": [["int", "int: An identifier for this notification unique within your application."], ["@B_android#app#Notification_E@", "Notification: A @B_android#app#Notification_E@ object describing what to show the user. Must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information.", "history": "Added in API level 1", "FullName": "public void notify (int id, Notification notification)"}, "deleteNotificationChannelGroup(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes the given notification channel group, and all notification channels that belong to it.", "history": "Added in API level 26", "FullName": "public void deleteNotificationChannelGroup (String groupId)"}, "getCurrentInterruptionFilter()": {"Returns": [["int", "Value is @B_android#app#NotificationManager#INTERRUPTION_FILTER_NONE_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_PRIORITY_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_ALARMS_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_ALL_E@, or @B_android#app#NotificationManager#INTERRUPTION_FILTER_UNKNOWN_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current notification interruption filter. The interruption filter defines which notifications are allowed to interrupt the user (e.g. via sound & vibration) and is applied globally.", "history": "Added in API level 23", "FullName": "public final int getCurrentInterruptionFilter ()"}, "updateAutomaticZenRule(java.lang.String,android.app.AutomaticZenRule)": {"Returns": [["boolean", "Whether the rule was successfully updated."]], "Parameters": [["@B_java#lang#String_E@", "String: The id of the rule to update"], ["@B_android#app#AutomaticZenRule_E@", "AutomaticZenRule: the rule to update."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the given zen rule. Throws a SecurityException if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@. Callers can only update rules that they own. See @B_android#app#AutomaticZenRule#getOwner_E@.", "history": "Added in API level 24", "FullName": "public boolean updateAutomaticZenRule (String id, AutomaticZenRule automaticZenRule)"}, "removeAutomaticZenRule(java.lang.String)": {"Returns": [["boolean", "Whether the rule was successfully deleted."]], "Parameters": [["@B_java#lang#String_E@", "String: the id of the rule to delete."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes the automatic zen rule with the given id. Throws a SecurityException if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@. Callers can only delete rules that they own. See @B_android#app#AutomaticZenRule#getOwner_E@.", "history": "Added in API level 24", "FullName": "public boolean removeAutomaticZenRule (String id)"}, "notify(java.lang.String,int,android.app.Notification)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A string identifier for this notification. May be null."], ["int", "int: An identifier for this notification. The pair (tag, id) must be unique within your application."], ["@B_android#app#Notification_E@", "Notification: A @B_android#app#Notification_E@ object describing what to show the user. Must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Posts a notification to be shown in the status bar. If a notification with the same tag and id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information. All @B_android#service#notification#NotificationListenerService_E@ will be granted @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ access to any @B_android#net#Uri_E@ provided on this notification or the @B_android#app#NotificationChannel_E@ this notification is posted to using @B_android#content#Context#grantUriPermission_E@. Permission will be revoked when the notification is canceled, or you can revoke permissions with @B_android#content#Context#revokeUriPermission_E@.", "history": "Added in API level 5", "FullName": "public void notify (String tag, int id, Notification notification)"}, "areNotificationsPaused()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether notifications from this package are temporarily hidden. This could be done because the package was marked as distracting to the user via PackageManager#setDistractingPackageRestrictions(String[], int) or because the package is PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle, SuspendDialogInfo) suspended.", "history": "Added in API level 29", "FullName": "public boolean areNotificationsPaused ()"}, "createNotificationChannels(java.util.List<android.app.NotificationChannel>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list of channels to attempt to create. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates multiple notification channels that different notifications can be posted to. See @B_android#app#NotificationManager#createNotificationChannel_E@.", "history": "Added in API level 26", "FullName": "public void createNotificationChannels (List<NotificationChannel> channels)"}, "getNotificationChannelGroup(java.lang.String)": {"Returns": [["@B_android#app#NotificationChannelGroup_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the notification channel group settings for a given channel group id. The channel group must belong to your package, or null will be returned.", "history": "Added in API level 28", "FullName": "public NotificationChannelGroup getNotificationChannelGroup (String channelGroupId)"}, "getImportance()": {"Returns": [["int", "Value is @B_android#app#NotificationManager#IMPORTANCE_UNSPECIFIED_E@, @B_android#app#NotificationManager#IMPORTANCE_NONE_E@, @B_android#app#NotificationManager#IMPORTANCE_MIN_E@, @B_android#app#NotificationManager#IMPORTANCE_LOW_E@, @B_android#app#NotificationManager#IMPORTANCE_DEFAULT_E@, or @B_android#app#NotificationManager#IMPORTANCE_HIGH_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the user specified importance for notifications from the calling package.", "history": "Added in API level 24", "FullName": "public int getImportance ()"}, "areNotificationsEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether notifications from the calling package are blocked.", "history": "Added in API level 24", "FullName": "public boolean areNotificationsEnabled ()"}, "getAutomaticZenRules()": {"Returns": [["@B_java#util#Map_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns AutomaticZenRules owned by the caller. Throws a SecurityException if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 24", "FullName": "public Map<String, AutomaticZenRule> getAutomaticZenRules ()"}, "getActiveNotifications()": {"Returns": [["@B_android#service#notification#StatusBarNotification_E@", "An array of @B_android#service#notification#StatusBarNotification_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Recover a list of active notifications: ones that have been posted by the calling app that have not yet been dismissed by the user or @B_android#app#NotificationManager#cancel_E@ed by the app. From @B_android#os#Build#VERSION_CODES#Q_E@, will also return notifications you've posted as an app's notification delegate via @B_android#app#NotificationManager#notifyAsPackage_E@.", "history": "Added in API level 23", "FullName": "public StatusBarNotification[] getActiveNotifications ()"}, "shouldHideSilentStatusBarIcons()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the user wants silent notifications (see @B_android#app#NotificationManager#IMPORTANCE_LOW_E@ to appear in the status bar. Only available for @B_android#app#NotificationManager#isNotificationListenerAccessGranted_E@.", "history": "Added in API level 29", "FullName": "public boolean shouldHideSilentStatusBarIcons ()"}, "getNotificationPolicy()": {"Returns": [["@B_android#app#NotificationManager#Policy_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current user-specified default notification policy.", "history": "Added in API level 23", "FullName": "public NotificationManager.Policy getNotificationPolicy ()"}, "canNotifyAsPackage(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether you are allowed to post notifications on behalf of a given package, with @B_android#app#NotificationManager#notifyAsPackage_E@. See @B_android#app#NotificationManager#setNotificationDelegate_E@.", "history": "Added in API level 29", "FullName": "public boolean canNotifyAsPackage (String pkg)"}, "setNotificationDelegate(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Package name of the app which can send notifications on your behalf. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows a package to post notifications on your behalf using @B_android#app#NotificationManager#notifyAsPackage_E@. This can be used to allow persistent processes to post notifications based on messages received on your behalf from the cloud, without your process having to wake up. You can check if you have an allowed delegate with @B_android#app#NotificationManager#getNotificationDelegate_E@ and revoke your delegate by passing null to this method.", "history": "Added in API level 29", "FullName": "public void setNotificationDelegate (String delegate)"}, "notify(int, android.app.Notification)": {"Returns": [], "Parameters": [["int", "int: An identifier for this notification unique within your application."], ["@B_android#app#Notification_E@", "Notification: A @B_android#app#Notification_E@ object describing what to show the user. Must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Post a notification to be shown in the status bar. If a notification with the same id has already been posted by your application and has not yet been canceled, it will be replaced by the updated information.", "history": "added in API level 1", "FullName": "public void notify (int id, Notification notification)"}, "cancel(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel a previously shown notification. If it's transient, the view will be hidden. If it's persistent, it will be removed from the status bar.", "history": "Added in API level 5", "FullName": "public void cancel (String tag, int id)"}, "addAutomaticZenRule(android.app.AutomaticZenRule)": {"Returns": [["@B_java#lang#String_E@", "The id of the newly created rule; null if the rule could not be created."]], "Parameters": [["@B_android#app#AutomaticZenRule_E@", "AutomaticZenRule: the rule to create."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the given zen rule. Throws a SecurityException if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 24", "FullName": "public String addAutomaticZenRule (AutomaticZenRule automaticZenRule)"}, "setInterruptionFilter(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#app#NotificationManager#INTERRUPTION_FILTER_NONE_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_PRIORITY_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_ALARMS_E@, @B_android#app#NotificationManager#INTERRUPTION_FILTER_ALL_E@, or @B_android#app#NotificationManager#INTERRUPTION_FILTER_UNKNOWN_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current notification interruption filter. The interruption filter defines which notifications are allowed to interrupt the user (e.g. via sound & vibration) and is applied globally. Only available if policy access is granted to this package. See @B_android#app#NotificationManager#isNotificationPolicyAccessGranted_E@.", "history": "Added in API level 23", "FullName": "public final void setInterruptionFilter (int interruptionFilter)"}, "createNotificationChannel(android.app.NotificationChannel)": {"Returns": [], "Parameters": [["@B_android#app#NotificationChannel_E@", "NotificationChannel: the channel to create. Note that the created channel may differ from this value. If the provided channel is malformed, a RemoteException will be thrown. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a notification channel that notifications can be posted to. This can also be used to restore a deleted channel and to update an existing channel's name, description, group, and/or importance. The name and description should only be changed if the locale changes or in response to the user renaming this channel. For example, if a user has a channel named 'John Doe' that represents messages from a 'John Doe', and 'John Doe' changes his name to 'John Smith,' the channel can be renamed to match. The importance of an existing channel will only be changed if the new importance is lower than the current value and the user has not altered any settings on this channel. The group an existing channel will only be changed if the channel does not already belong to a group. All other fields are ignored for channels that already exist.", "history": "Added in API level 26", "FullName": "public void createNotificationChannel (NotificationChannel channel)"}, "deleteNotificationChannel(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes the given notification channel. If you @B_android#app#NotificationManager#createNotificationChannel_E@ a new channel with this same id, the deleted channel will be un-deleted with all of the same settings it had before it was deleted.", "history": "Added in API level 26", "FullName": "public void deleteNotificationChannel (String channelId)"}, "notifyAsPackage(java.lang.String,java.lang.String,int,android.app.Notification)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package to post the notification as. The package must have granted you access to post notifications on their behalf with @B_android#app#NotificationManager#setNotificationDelegate_E@. This value must never be null."], ["@B_java#lang#String_E@", "String: A string identifier for this notification. May be null. This value must never be null."], ["int", "int: An identifier for this notification. The pair (tag, id) must be unique within your application."], ["@B_android#app#Notification_E@", "Notification: A @B_android#app#Notification_E@ object describing what to show the user. Must not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Posts a notification as a specified package to be shown in the status bar. If a notification with the same tag and id has already been posted for that package and has not yet been canceled, it will be replaced by the updated information. All @B_android#service#notification#NotificationListenerService_E@ will be granted @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@ access to any @B_android#net#Uri_E@ provided on this notification or the @B_android#app#NotificationChannel_E@ this notification is posted to using @B_android#content#Context#grantUriPermission_E@. Permission will be revoked when the notification is canceled, or you can revoke permissions with @B_android#content#Context#revokeUriPermission_E@.", "history": "Added in API level 29", "FullName": "public void notifyAsPackage (String targetPackage, String tag, int id, Notification notification)"}, "cancel(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel a previously shown notification. If it's transient, the view will be hidden. If it's persistent, it will be removed from the status bar.", "history": "Added in API level 1", "FullName": "public void cancel (int id)"}}, "Inheritance": [], "ClassName": "android.app.NotificationManager", "ClassDesc": "Class to notify the user of events that happen. This is how you tell the user that something has happened in the background. Notifications can take different forms: A persistent icon that goes in the status bar and is accessible through the launcher, (when the user selects it, a designated Intent can be launched), Turning on or flashing LEDs on the device, or Alerting the user by flashing the backlight, playing a sound, or vibrating. Each of the notify methods takes an int id parameter and optionally a @B_java#lang#String_E@ tag parameter, which may be null. These parameters are used to form a pair (tag, id), or (null, id) if tag is unspecified. This pair identifies this notification from your app to the system, so that pair should be unique within your app. If you call one of the notify methods with a (tag, id) pair that is currently active and a new set of notification parameters, it will be updated. For example, if you pass a new status bar icon, the old icon in the status bar will be replaced with the new one. This is also the same tag and id you pass to the @B_android#app#NotificationManager#cancel_E@ or @B_android#app#NotificationManager#cancel_E@ method to clear this notification."}