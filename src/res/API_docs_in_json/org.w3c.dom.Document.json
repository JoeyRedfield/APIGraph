{"Functions": {"getStrictErrorChecking()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying whether error checking is enforced or not. When set to false, the implementation is free to not test every possible error case normally defined on DOM operations, and not raise any DOMException on DOM operations or report errors while using Document.normalizeDocument(). In case of error, the behavior is undefined. This attribute is true by default.", "history": "Added in API level 8", "FullName": "public abstract boolean getStrictErrorChecking ()"}, "getElementById(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Element_E@", "The matching element or null if there is none."]], "Parameters": [["@B_java#lang#String_E@", "String: The unique id value for an element."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Element that has an ID attribute with the given value. If no such element exists, this returns null . If more than one element has an ID attribute with that value, what is returned is undefined. The DOM implementation is expected to use the attribute Attr.isId to determine if an attribute is of type ID.", "history": "Added in API level 1", "FullName": "public abstract Element getElementById (String elementId)"}, "getXmlVersion()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying, as part of the \"1.0\". If this document does not support the \"XML\" feature, the value is always null. Changing this attribute will affect methods that check for invalid characters in XML names. Application should invoke Document.normalizeDocument() in order to check for invalid characters in the Nodes that are already part of this Document. DOM applications may use the DOMImplementation.hasFeature(feature, version) method with parameter values \"XMLVersion\" and \"1.0\" (respectively) to determine if an implementation supports [Document objects supporting a version of the \"XMLVersion\" feature must not raise a NOT_SUPPORTED_ERR exception for the same version number when using Document.xmlVersion.", "history": "Added in API level 8", "FullName": "public abstract String getXmlVersion ()"}, "adoptNode(org.w3c.dom.Node)": {"Returns": [["@B_org#w3c#dom#Node_E@", "The adopted node, or null if this operation fails, such as when the source node comes from a different implementation."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to move into this document."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the source node is of type DOCUMENT, DOCUMENT_TYPE. NO_MODIFICATION_ALLOWED_ERR: Raised when the source node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to adopt a node from another document to this document. If supported, it changes the ownerDocument of the source node, its children, as well as the attached attribute nodes if there are any. If the source node has a parent it is first removed from the child list of its parent. This effectively allows moving a subtree from one document to another (unlike importNode() which create a copy of the source node instead of moving it). When it fails, applications should use Document.importNode() instead. Note that if the adopted node is already part of this document (i.e. the source and target document are the same), this method still has the effect of removing the source node from the child list of its parent, if any. The following list describes the specifics for each type of node. Document.importNode() method, this method does not raise an INVALID_CHARACTER_ERR exception, and applications should use the Document.normalizeDocument() method to check if an imported name is not an XML name according to the XML version in use.", "history": "Added in API level 8", "FullName": "public abstract Node adoptNode (Node source)"}, "setXmlVersion(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the version is set to a value that is not supported by this Document or if this document does not support the \"XML\" feature."]], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying, as part of the \"1.0\". If this document does not support the \"XML\" feature, the value is always null. Changing this attribute will affect methods that check for invalid characters in XML names. Application should invoke Document.normalizeDocument() in order to check for invalid characters in the Nodes that are already part of this Document. DOM applications may use the DOMImplementation.hasFeature(feature, version) method with parameter values \"XMLVersion\" and \"1.0\" (respectively) to determine if an implementation supports [Document objects supporting a version of the \"XMLVersion\" feature must not raise a NOT_SUPPORTED_ERR exception for the same version number when using Document.xmlVersion.", "history": "Added in API level 8", "FullName": "public abstract void setXmlVersion (String xmlVersion)"}, "getDoctype()": {"Returns": [["@B_org#w3c#dom#DocumentType_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The Document Type Declaration (see DocumentType) associated with this document. For XML documents without a document type declaration this returns null. For HTML documents, a DocumentType object may be returned, independently of the presence or absence of document type declaration in the HTML document. This provides direct access to the DocumentType node, child node of this Document. This node can be set at document creation time and later changed through the use of child nodes manipulation methods, such as Node.insertBefore, or Node.replaceChild. Note, however, that while some implementations may instantiate different types of Document objects supporting additional features than the \"Core\", such as \"HTML\" [DocumentType specified at creation time, changing it afterwards is very unlikely to result in a change of the features supported.", "history": "Added in API level 1", "FullName": "public abstract DocumentType getDoctype ()"}, "setDocumentURI(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument. No lexical checking is performed when setting this attribute; this could result in a null value returned when using Node.baseURI . Beware that when the Document supports the feature \"HTML\" [Node.baseURI.", "history": "Added in API level 8", "FullName": "public abstract void setDocumentURI (String documentURI)"}, "getElementsByTagNameNS(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#NodeList_E@", "A new NodeList object containing all the matched Elements."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the elements to match on. The special value \"*\" matches all namespaces."], ["@B_java#lang#String_E@", "String: The local name of the elements to match on. The special value \"*\" matches all local names."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a NodeList of all the Elements with a given local name and namespace URI in document order.", "history": "Added in API level 1", "FullName": "public abstract NodeList getElementsByTagNameNS (String namespaceURI, String localName)"}, "getDocumentElement()": {"Returns": [["@B_org#w3c#dom#Element_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is a convenience attribute that allows direct access to the child node that is the document element of the document.", "history": "Added in API level 1", "FullName": "public abstract Element getDocumentElement ()"}, "createAttribute(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "A new Attr object with the nodeName attribute set to name, and localName, prefix, and namespaceURI set to null. The value of the attribute is the empty string."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an Attr of the given name. Note that the Attr instance can then be set on an Element using the setAttributeNode method. To create an attribute with a qualified name and namespace URI, use the createAttributeNS method.", "history": "Added in API level 1", "FullName": "public abstract Attr createAttribute (String name)"}, "normalizeDocument()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method acts as if the document was going through a save and load cycle, putting the document in a \"normal\" form. As a consequence, this method updates the replacement tree of EntityReference nodes and normalizes Text nodes, as defined in the method Node.normalize(). Otherwise, the actual result depends on the features being set on the Document.domConfig object and governing what operations actually take place. Noticeably this method could also make the document namespace well-formed according to the algorithm described in , check the character normalization, remove the CDATASection nodes, etc. See DOMConfiguration for details. Mutation events, when supported, are generated to reflect the changes occurring on the document. If errors occur during the invocation of this method, such as an attempt to update a read-only node or a Node.nodeName contains an invalid character according to the XML version in use, errors or warnings (DOMError.SEVERITY_ERROR or DOMError.SEVERITY_WARNING) will be reported using the DOMErrorHandler object associated with the \"error-handler \" parameter. Note this method might also report fatal errors ( DOMError.SEVERITY_FATAL_ERROR) if an implementation cannot recover from an error.", "history": "Added in API level 8", "FullName": "public abstract void normalizeDocument ()"}, "getXmlEncoding()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying, as part of the null when unspecified or when it is not known, such as when the Document was created in memory.", "history": "Added in API level 8", "FullName": "public abstract String getXmlEncoding ()"}, "setStrictErrorChecking(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying whether error checking is enforced or not. When set to false, the implementation is free to not test every possible error case normally defined on DOM operations, and not raise any DOMException on DOM operations or report errors while using Document.normalizeDocument(). In case of error, the behavior is undefined. This attribute is true by default.", "history": "Added in API level 8", "FullName": "public abstract void setStrictErrorChecking (boolean strictErrorChecking)"}, "importNode(org.w3c.dom.Node, boolean)": {"Returns": [["@B_org#w3c#dom#Node_E@", "The imported node that belongs to this Document."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to import."], ["boolean", "boolean: If true, recursively import the subtree under the specified node; if false, import only the node itself, as explained above. This has no effect on nodes that cannot have any children, and on Attr, and EntityReference nodes."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported. INVALID_CHARACTER_ERR: Raised if one of the imported names is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. This may happen when importing an XML 1.1 [XML 1.1] element into an XML 1.0 document, for instance."]], "SeeAlso": [], "Permissions": [], "Description": "Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node. The returned node has no parent; (parentNode is null). For all nodes, importing a node creates a node object owned by the importing document, with attribute values identical to the source node's nodeName and nodeType, plus the attributes related to namespaces (prefix, localName, and namespaceURI). As in the cloneNode operation, the source node is not altered. User data associated to the imported node is not carried over. However, if any UserDataHandlers has been specified along with the associated data these handlers will be called with the appropriate parameters before this method returns. Additional information is copied as appropriate to the nodeType, attempting to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another, recognizing that the two documents may have different DTDs in the XML case. The following list describes the specifics for each type of node.", "history": "added in API level 1", "FullName": "public abstract Node importNode (Node importedNode, boolean deep)"}, "getDomConfig()": {"Returns": [["@B_org#w3c#dom#DOMConfiguration_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The configuration used when Document.normalizeDocument() is invoked.", "history": "Added in API level 8", "FullName": "public abstract DOMConfiguration getDomConfig ()"}, "getElementsByTagName(java.lang.String)": {"Returns": [["@B_org#w3c#dom#NodeList_E@", "A new NodeList object containing all the matched Elements."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the tag to match on. The special value \"*\" matches all tags. For XML, the tagname parameter is case-sensitive, otherwise it depends on the case-sensitivity of the markup language in use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a NodeList of all the Elements in document order with a given tag name and are contained in the document.", "history": "Added in API level 1", "FullName": "public abstract NodeList getElementsByTagName (String tagname)"}, "getInputEncoding()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying the encoding used for this document at the time of the parsing. This is null when it is not known, such as when the Document was created in memory.", "history": "Added in API level 8", "FullName": "public abstract String getInputEncoding ()"}, "createEntityReference(java.lang.String)": {"Returns": [["@B_org#w3c#dom#EntityReference_E@", "The new EntityReference object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the entity to reference.Unlike Document.createElementNS or Document.createAttributeNS, no namespace well-formed checking is done on the entity name. Applications should invoke Document.normalizeDocument() with the parameter \" namespaces\" set to true in order to ensure that the entity name is namespace well-formed."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NOT_SUPPORTED_ERR: Raised if this document is an HTML document."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an EntityReference object. In addition, if the referenced entity is known, the child list of the EntityReference node is made the same as that of the corresponding Entity node. Entity node has an unbound namespace prefix, the corresponding descendant of the created EntityReference node is also unbound; (its namespaceURI is null). The DOM Level 2 and 3 do not support any mechanism to resolve namespace prefixes in this case.", "history": "Added in API level 1", "FullName": "public abstract EntityReference createEntityReference (String name)"}, "setXmlStandalone(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if this document does not support the \"XML\" feature."]], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying, as part of the false when unspecified. Document.normalizeDocument() with the \"validate\" parameter to verify if the value matches the", "history": "Added in API level 8", "FullName": "public abstract void setXmlStandalone (boolean xmlStandalone)"}, "createComment(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Comment_E@", "The new Comment object."]], "Parameters": [["@B_java#lang#String_E@", "String: The data for the node."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Comment node given the specified string.", "history": "Added in API level 1", "FullName": "public abstract Comment createComment (String data)"}, "getImplementation()": {"Returns": [["@B_org#w3c#dom#DOMImplementation_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The DOMImplementation object that handles this document. A DOM application may use objects from multiple implementations.", "history": "Added in API level 1", "FullName": "public abstract DOMImplementation getImplementation ()"}, "createAttributeNS(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "A new Attr object with the following attributes: Attribute Value Node.nodeName qualifiedName Node.namespaceURI namespaceURI Node.prefix prefix, extracted from qualifiedName, or null if there is no prefix Node.localName local name, extracted from qualifiedName Attr.name qualifiedName Node.nodeValue the empty string", "Node.nodeName", "qualifiedName", "Node.namespaceURI", "namespaceURI", "Node.prefix", "prefix, extracted from qualifiedName, or null if there is no prefix", "Node.localName", "local name, extracted from qualifiedName", "Attr.name", "qualifiedName", "Node.nodeValue", "the empty string"], ["Node.nodeName", "qualifiedName"], ["Node.namespaceURI", "namespaceURI"], ["Node.prefix", "prefix, extracted from qualifiedName, or null if there is no prefix"], ["Node.localName", "local name, extracted from qualifiedName"], ["Attr.name", "qualifiedName"], ["Node.nodeValue", "the empty string"]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to create."], ["@B_java#lang#String_E@", "String: The qualified name of the attribute to instantiate."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified qualifiedName is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NAMESPACE_ERR: Raised if the qualifiedName is a malformed qualified name, if the qualifiedName has a prefix and the namespaceURI is null, if the qualifiedName has a prefix that is \"xml\" and the namespaceURI is different from \" http://www.w3.org/XML/1998/namespace\", if the qualifiedName or its prefix is \"xmlns\" and the namespaceURI is different from \"http://www.w3.org/2000/xmlns/\", or if the namespaceURI is \"http://www.w3.org/2000/xmlns/\" and neither the qualifiedName nor its prefix is \"xmlns\". NOT_SUPPORTED_ERR: Always thrown if the current document does not support the \"XML\" feature, since namespaces were defined by XML."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an attribute of the given qualified name and namespace URI. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract Attr createAttributeNS (String namespaceURI, String qualifiedName)"}, "createDocumentFragment()": {"Returns": [["@B_org#w3c#dom#DocumentFragment_E@", "A new DocumentFragment."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty DocumentFragment object.", "history": "Added in API level 1", "FullName": "public abstract DocumentFragment createDocumentFragment ()"}, "createTextNode(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Text_E@", "The new Text object."]], "Parameters": [["@B_java#lang#String_E@", "String: The data for the node."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Text node given the specified string.", "history": "Added in API level 1", "FullName": "public abstract Text createTextNode (String data)"}, "importNode(org.w3c.dom.Node,boolean)": {"Returns": [["@B_org#w3c#dom#Node_E@", "The imported node that belongs to this Document."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to import."], ["boolean", "boolean: If true, recursively import the subtree under the specified node; if false, import only the node itself, as explained above. This has no effect on nodes that cannot have any children, and on Attr, and EntityReference nodes."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the type of node being imported is not supported. INVALID_CHARACTER_ERR: Raised if one of the imported names is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. This may happen when importing an XML 1.1 [XML 1.1] element into an XML 1.0 document, for instance."]], "SeeAlso": [], "Permissions": [], "Description": "Imports a node from another document to this document, without altering or removing the source node from the original document; this method creates a new copy of the source node. The returned node has no parent; (parentNode is null). For all nodes, importing a node creates a node object owned by the importing document, with attribute values identical to the source node's nodeName and nodeType, plus the attributes related to namespaces (prefix, localName, and namespaceURI). As in the cloneNode operation, the source node is not altered. User data associated to the imported node is not carried over. However, if any UserDataHandlers has been specified along with the associated data these handlers will be called with the appropriate parameters before this method returns. Additional information is copied as appropriate to the nodeType, attempting to mirror the behavior expected if a fragment of XML or HTML source was copied from one document to another, recognizing that the two documents may have different DTDs in the XML case. The following list describes the specifics for each type of node.", "history": "Added in API level 1", "FullName": "public abstract Node importNode (Node importedNode, boolean deep)"}, "createCDATASection(java.lang.String)": {"Returns": [["@B_org#w3c#dom#CDATASection_E@", "The new CDATASection object."]], "Parameters": [["@B_java#lang#String_E@", "String: The data for the CDATASection contents."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if this document is an HTML document."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a CDATASection node whose value is the specified string.", "history": "Added in API level 1", "FullName": "public abstract CDATASection createCDATASection (String data)"}, "renameNode(org.w3c.dom.Node,java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#Node_E@", "The renamed node. This is either the specified node or the new node that was created to replace the specified node."]], "Parameters": [["@B_org#w3c#dom#Node_E@", "Node: The node to rename."], ["@B_java#lang#String_E@", "String: The new namespace URI."], ["@B_java#lang#String_E@", "String: The new qualified name."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised when the type of the specified node is neither ELEMENT_NODE nor ATTRIBUTE_NODE, or if the implementation does not support the renaming of the document element. INVALID_CHARACTER_ERR: Raised if the new qualified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. WRONG_DOCUMENT_ERR: Raised when the specified node was created from a different document than this document. NAMESPACE_ERR: Raised if the qualifiedName is a malformed qualified name, if the qualifiedName has a prefix and the namespaceURI is null, or if the qualifiedName has a prefix that is \"xml\" and the namespaceURI is different from \" http://www.w3.org/XML/1998/namespace\" [XML Namespaces] . Also raised, when the node being renamed is an attribute, if the qualifiedName, or its prefix, is \"xmlns\" and the namespaceURI is different from \"http://www.w3.org/2000/xmlns/\"."]], "SeeAlso": [], "Permissions": [], "Description": "Rename an existing node of type ELEMENT_NODE or ATTRIBUTE_NODE. When possible this simply changes the name of the given node, otherwise this creates a new node with the specified name and replaces the existing node with the new node as described below. If simply changing the name of the given node is not possible, the following operations are performed: a new node is created, any registered event listener is registered on the new node, any user data attached to the old node is removed from that node, the old node is removed from its parent if it has one, the children are moved to the new node, if the renamed node is an Element its attributes are moved to the new node, the new node is inserted at the position the old node used to have in its parent's child nodes list if it has one, the user data that was attached to the old node is attached to the new node. When the node being renamed is an Element only the specified attributes are moved, default attributes originated from the DTD are updated according to the new element name. In addition, the implementation may update default attributes from other schemas. Applications should use Document.normalizeDocument() to guarantee these attributes are up-to-date. When the node being renamed is an Attr that is attached to an Element, the node is first removed from the Element attributes map. Then, once renamed, either by modifying the existing node or creating a new one as described above, it is put back. In addition, a user data event NODE_RENAMED is fired, when the implementation supports the feature \"MutationNameEvents\", each mutation operation involved in this method fires the appropriate event, and in the end the event { http://www.w3.org/2001/xml-events, DOMElementNameChanged} or { http://www.w3.org/2001/xml-events, DOMAttributeNameChanged} is fired.", "history": "Added in API level 8", "FullName": "public abstract Node renameNode (Node n, String namespaceURI, String qualifiedName)"}, "createElement(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Element_E@", "A new Element object with the nodeName attribute set to tagName, and localName, prefix, and namespaceURI set to null."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the element type to instantiate. For XML, this is case-sensitive, otherwise it depends on the case-sensitivity of the markup language in use. In that case, the name is mapped to the canonical form of that markup by the DOM implementation."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an element of the type specified. Note that the instance returned implements the Element interface, so attributes can be specified directly on the returned object. In addition, if there are known attributes with default values, Attr nodes representing them are automatically created and attached to the element. To create an element with a qualified name and namespace URI, use the createElementNS method.", "history": "Added in API level 1", "FullName": "public abstract Element createElement (String tagName)"}, "createElementNS(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#Element_E@", "A new Element object with the following attributes: Attribute Value Node.nodeName qualifiedName Node.namespaceURI namespaceURI Node.prefix prefix, extracted from qualifiedName, or null if there is no prefix Node.localName local name, extracted from qualifiedName Element.tagName qualifiedName", "Node.nodeName", "qualifiedName", "Node.namespaceURI", "namespaceURI", "Node.prefix", "prefix, extracted from qualifiedName, or null if there is no prefix", "Node.localName", "local name, extracted from qualifiedName", "Element.tagName", "qualifiedName"], ["Node.nodeName", "qualifiedName"], ["Node.namespaceURI", "namespaceURI"], ["Node.prefix", "prefix, extracted from qualifiedName, or null if there is no prefix"], ["Node.localName", "local name, extracted from qualifiedName"], ["Element.tagName", "qualifiedName"]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the element to create."], ["@B_java#lang#String_E@", "String: The qualified name of the element type to instantiate."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified qualifiedName is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NAMESPACE_ERR: Raised if the qualifiedName is a malformed qualified name, if the qualifiedName has a prefix and the namespaceURI is null, or if the qualifiedName has a prefix that is \"xml\" and the namespaceURI is different from \" http://www.w3.org/XML/1998/namespace\" [XML Namespaces] , or if the qualifiedName or its prefix is \"xmlns\" and the namespaceURI is different from \"http://www.w3.org/2000/xmlns/\", or if the namespaceURI is \"http://www.w3.org/2000/xmlns/\" and neither the qualifiedName nor its prefix is \"xmlns\". NOT_SUPPORTED_ERR: Always thrown if the current document does not support the \"XML\" feature, since namespaces were defined by XML."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an element of the given qualified name and namespace URI. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract Element createElementNS (String namespaceURI, String qualifiedName)"}, "getDocumentURI()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The location of the document or null if undefined or if the Document was created using DOMImplementation.createDocument. No lexical checking is performed when setting this attribute; this could result in a null value returned when using Node.baseURI . Beware that when the Document supports the feature \"HTML\" [Node.baseURI.", "history": "Added in API level 8", "FullName": "public abstract String getDocumentURI ()"}, "getXmlStandalone()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An attribute specifying, as part of the false when unspecified. Document.normalizeDocument() with the \"validate\" parameter to verify if the value matches the", "history": "Added in API level 8", "FullName": "public abstract boolean getXmlStandalone ()"}, "createProcessingInstruction(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#ProcessingInstruction_E@", "The new ProcessingInstruction object."]], "Parameters": [["@B_java#lang#String_E@", "String: The target part of the processing instruction.Unlike Document.createElementNS or Document.createAttributeNS, no namespace well-formed checking is done on the target name. Applications should invoke Document.normalizeDocument() with the parameter \" namespaces\" set to true in order to ensure that the target name is namespace well-formed."], ["@B_java#lang#String_E@", "String: The data for the node."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified target is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NOT_SUPPORTED_ERR: Raised if this document is an HTML document."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ProcessingInstruction node given the specified name and data strings.", "history": "Added in API level 1", "FullName": "public abstract ProcessingInstruction createProcessingInstruction (String target, String data)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.Document", "ClassDesc": "The Document interface represents the entire HTML or XML document. Conceptually, it is the root of the document tree, and provides the primary access to the document's data. Since elements, text nodes, comments, processing instructions, etc. cannot exist outside the context of a Document, the Document interface also contains the factory methods needed to create these objects. The Node objects created have a ownerDocument attribute which associates them with the Document within whose context they were created. See also the"}