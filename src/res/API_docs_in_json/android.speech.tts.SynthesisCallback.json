{"Functions": {"error()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this method if the speech synthesis fails. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "Added in API level 14", "FullName": "public abstract void error ()"}, "getMaxBufferSize()": {"Returns": [["int", "the maximum number of bytes that the TTS engine can pass in a single call of @B_android#speech#tts#SynthesisCallback#audioAvailable_E@. Calls to @B_android#speech#tts#SynthesisCallback#audioAvailable_E@ with data lengths larger than this value will not succeed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public abstract int getMaxBufferSize ()"}, "audioAvailable(byte[], int, int)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#SUCCESS_E@, @B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#STOPPED_E@."]], "Parameters": [["byte[]", "byte: The generated audio data. This method will not hold on to buffer, so the caller is free to modify it after this method returns."], ["int", "int: The offset into buffer where the audio data starts."], ["int", "int: The number of bytes of audio data in buffer. This must be less than or equal to the return value of @B_android#speech#tts#SynthesisCallback#getMaxBufferSize_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this method when synthesized audio is ready for consumption. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "added in API level 14", "FullName": "public abstract int audioAvailable (byte[] buffer, int offset, int length)"}, "done()": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#SUCCESS_E@, @B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#STOPPED_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this method when all the synthesized audio for a request has been passed to @B_android#speech#tts#SynthesisCallback#audioAvailable_E@. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@. This method has to be called if @B_android#speech#tts#SynthesisCallback#start_E@ and/or @B_android#speech#tts#SynthesisCallback#error_E@ was called.", "history": "Added in API level 14", "FullName": "public abstract int done ()"}, "error(int)": {"Returns": [], "Parameters": [["int", "int: Error code to pass to the client. One of the ERROR_ values from @B_android#speech#tts#TextToSpeech_E@ Value is @B_android#speech#tts#TextToSpeech#ERROR_SYNTHESIS_E@, @B_android#speech#tts#TextToSpeech#ERROR_SERVICE_E@, @B_android#speech#tts#TextToSpeech#ERROR_OUTPUT_E@, @B_android#speech#tts#TextToSpeech#ERROR_NETWORK_E@, @B_android#speech#tts#TextToSpeech#ERROR_NETWORK_TIMEOUT_E@, @B_android#speech#tts#TextToSpeech#ERROR_INVALID_REQUEST_E@, or @B_android#speech#tts#TextToSpeech#ERROR_NOT_INSTALLED_YET_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this method if the speech synthesis fails. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "Added in API level 21", "FullName": "public abstract void error (int errorCode)"}, "hasStarted()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if @B_android#speech#tts#SynthesisCallback#start_E@ was called or not. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@. Useful for checking if a fallback from network request is possible.", "history": "Added in API level 21", "FullName": "public abstract boolean hasStarted ()"}, "hasFinished()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if @B_android#speech#tts#SynthesisCallback#done_E@ was called or not. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@. Useful for checking if a fallback from network request is possible.", "history": "Added in API level 21", "FullName": "public abstract boolean hasFinished ()"}, "rangeStart(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The position in frames in the audio where this range is spoken."], ["int", "int: The start index of the range in the input text."], ["int", "int: The end index (exclusive) of the range in the input text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service may call this method to provide timing information about the spoken text. Calling this method means that at the given audio frame, the given range of the input is about to be spoken. If this method is called the client will receive a callback on the listener (@B_android#speech#tts#UtteranceProgressListener#onRangeStart_E@) at the moment that frame has been reached by the playback head. This information can be used by the client, for example, to highlight ranges of the text while it is spoken. The markerInFrames is a frame index into the audio for this synthesis request, i.e. into the concatenation of the audio bytes sent to audioAvailable for this synthesis request. The definition of a frame depends on the format given by @B_android#speech#tts#SynthesisCallback#start_E@. See @B_android#media#AudioFormat_E@ for more information. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "added in API level 26", "FullName": "public void rangeStart (int markerInFrames, int start, int end)"}, "start(int,int,int)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#SUCCESS_E@, @B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#STOPPED_E@."]], "Parameters": [["int", "int: Sample rate in HZ of the generated audio."], ["int", "int: Audio format of the generated audio. Must be one of @B_android#media#AudioFormat#ENCODING_PCM_8BIT_E@ or @B_android#media#AudioFormat#ENCODING_PCM_16BIT_E@. Can also be @B_android#media#AudioFormat#ENCODING_PCM_FLOAT_E@ when targetting Android N and above. Value is @B_android#media#AudioFormat#ENCODING_PCM_8BIT_E@, @B_android#media#AudioFormat#ENCODING_PCM_16BIT_E@, or @B_android#media#AudioFormat#ENCODING_PCM_FLOAT_E@"], ["int", "int: The number of channels. Must be 1 or 2. Value is between 1 and 2 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this when it starts to synthesize audio for this request. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "Added in API level 14", "FullName": "public abstract int start (int sampleRateInHz, int audioFormat, int channelCount)"}, "audioAvailable(byte[],int,int)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#SUCCESS_E@, @B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#STOPPED_E@."]], "Parameters": [["byte[]", "byte: The generated audio data. This method will not hold on to buffer, so the caller is free to modify it after this method returns."], ["int", "int: The offset into buffer where the audio data starts."], ["int", "int: The number of bytes of audio data in buffer. This must be less than or equal to the return value of @B_android#speech#tts#SynthesisCallback#getMaxBufferSize_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this method when synthesized audio is ready for consumption. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "Added in API level 14", "FullName": "public abstract int audioAvailable (byte[] buffer, int offset, int length)"}, "rangeStart(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The position in frames in the audio where this range is spoken."], ["int", "int: The start index of the range in the input text."], ["int", "int: The end index (exclusive) of the range in the input text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service may call this method to provide timing information about the spoken text. Calling this method means that at the given audio frame, the given range of the input is about to be spoken. If this method is called the client will receive a callback on the listener (@B_android#speech#tts#UtteranceProgressListener#onRangeStart_E@) at the moment that frame has been reached by the playback head. This information can be used by the client, for example, to highlight ranges of the text while it is spoken. The markerInFrames is a frame index into the audio for this synthesis request, i.e. into the concatenation of the audio bytes sent to audioAvailable for this synthesis request. The definition of a frame depends on the format given by @B_android#speech#tts#SynthesisCallback#start_E@. See @B_android#media#AudioFormat_E@ for more information. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "Added in API level 26", "FullName": "public void rangeStart (int markerInFrames, int start, int end)"}, "start(int, int, int)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#SUCCESS_E@, @B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#STOPPED_E@."]], "Parameters": [["int", "int: Sample rate in HZ of the generated audio."], ["int", "int: Audio format of the generated audio. Must be one of @B_android#media#AudioFormat#ENCODING_PCM_8BIT_E@ or @B_android#media#AudioFormat#ENCODING_PCM_16BIT_E@. Can also be @B_android#media#AudioFormat#ENCODING_PCM_FLOAT_E@ when targetting Android N and above."], ["int", "int: The number of channels. Must be 1 or 2.Value is between 1 and 2 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The service should call this when it starts to synthesize audio for this request. This method should only be called on the synthesis thread, while in @B_android#speech#tts#TextToSpeechService#onSynthesizeText_E@.", "history": "added in API level 14", "FullName": "public abstract int start (int sampleRateInHz, int audioFormat, int channelCount)"}}, "Inheritance": [], "ClassName": "android.speech.tts.SynthesisCallback", "ClassDesc": "A callback to return speech data synthesized by a text to speech engine. The engine can provide streaming audio by calling @B_android#speech#tts#SynthesisCallback#start_E@, then @B_android#speech#tts#SynthesisCallback#audioAvailable_E@ until all audio has been provided, then finally @B_android#speech#tts#SynthesisCallback#done_E@. @B_android#speech#tts#SynthesisCallback#error_E@ can be called at any stage in the synthesis process to indicate that an error has occurred, but if the call is made after a call to @B_android#speech#tts#SynthesisCallback#done_E@, it might be discarded. @B_android#speech#tts#SynthesisCallback#done_E@ must be called at the end of synthesis, regardless of errors. All methods can be only called on the synthesis thread."}