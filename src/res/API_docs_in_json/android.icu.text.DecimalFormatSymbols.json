{"Functions": {"setGroupingSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the thousands character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for grouping separator. Different for French, etc.", "history": "Added in API level 24", "FullName": "public void setGroupingSeparator (char groupingSeparator)"}, "setInternationalCurrencySymbol(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the international string denoting the local currency."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the international string denoting the local currency.", "history": "Added in API level 24", "FullName": "public void setInternationalCurrencySymbol (String currency)"}, "setPadEscape(char)": {"Returns": [], "Parameters": [["char", "char no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPadEscape_E@", "@B_android#icu#text#DecimalFormat#setFormatWidth_E@", "@B_android#icu#text#DecimalFormat#setPadPosition_E@", "@B_android#icu#text#DecimalFormat#setPadCharacter_E@"], "Permissions": [], "Description": "preceding the pad character. In the pattern \"*_#,##0\", '*' is the pad escape, and '_' is the pad character.", "history": "Added in API level 24", "FullName": "public void setPadEscape (char c)"}, "getPatternForCurrencySpacing(int,boolean)": {"Returns": [["@B_java#lang#String_E@", "the value, or null."]], "Parameters": [["int", "int: one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH or CURRENCY_SPC_INSERT"], ["boolean", "boolean: true to get the beforeCurrency values, false to get the afterCurrency values."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPatternForCurrencySpacing_E@"], "Permissions": [], "Description": "For more information, see", "history": "Added in API level 24", "FullName": "public String getPatternForCurrencySpacing (int itemType, boolean beforeCurrency)"}, "setExponentMultiplicationSign(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the multiplication sign", "history": "Added in API level 24", "FullName": "public void setExponentMultiplicationSign (String exponentMultiplicationSign)"}, "setSignificantDigit(char)": {"Returns": [], "Parameters": [["char", "char: the significant digit pattern character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used to represent a significant digit in a pattern.", "history": "Added in API level 24", "FullName": "public void setSignificantDigit (char sigDigit)"}, "getCurrency()": {"Returns": [["@B_android#icu#util#Currency_E@", "the currency used, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the currency symbol, for @B_android#icu#text#DecimalFormatSymbols#getCurrency_E@ API compatibility only. ICU clients should use the Currency API directly.", "history": "Added in API level 24", "FullName": "public Currency getCurrency ()"}, "setMinusSign(char)": {"Returns": [], "Parameters": [["char", "char: the minus sign character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.", "history": "Added in API level 24", "FullName": "public void setMinusSign (char minusSign)"}, "getPlusSignString()": {"Returns": [["@B_java#lang#String_E@", "the plus sign string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getPlusSignString ()"}, "getMinusSignString()": {"Returns": [["@B_java#lang#String_E@", "the minus sign string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setMinusSignString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getMinusSignString ()"}, "getMonetaryDecimalSeparator()": {"Returns": [["char", "the monetary decimal separator character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the monetary decimal separator.", "history": "Added in API level 24", "FullName": "public char getMonetaryDecimalSeparator ()"}, "getPercentString()": {"Returns": [["@B_java#lang#String_E@", "the percent string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPercentString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getPercentString ()"}, "setDecimalSeparatorString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the decimal sign string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if decimalSeparatorString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getDecimalSeparatorString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getDecimalSeparator_E@ will return the default decimal separator character ('.').", "history": "Added in API level 28", "FullName": "public void setDecimalSeparatorString (String decimalSeparatorString)"}, "getPerMillString()": {"Returns": [["@B_java#lang#String_E@", "the permille string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPerMillString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getPerMillString ()"}, "setPercent(char)": {"Returns": [], "Parameters": [["char", "char: the percent character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for percent sign. Different for Arabic, etc.", "history": "Added in API level 24", "FullName": "public void setPercent (char percent)"}, "setExponentSeparator(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the localized exponent symbol, used in localized patterns and formatted strings"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getExponentSeparator_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setExponentSeparator (String exp)"}, "getPatternForCurrencySpacing(int, boolean)": {"Returns": [["@B_java#lang#String_E@", "the value, or null."]], "Parameters": [["int", "int: one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH or CURRENCY_SPC_INSERT"], ["boolean", "boolean: true to get the beforeCurrency values, false to get the afterCurrency values."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPatternForCurrencySpacing_E@"], "Permissions": [], "Description": "For more information, see", "history": "added in API level 24", "FullName": "public String getPatternForCurrencySpacing (int itemType, boolean beforeCurrency)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "getDigits()": {"Returns": [["char[]", "The array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the array of characters used as digits, in order from 0 through 9", "history": "Added in API level 24", "FullName": "public char[] getDigits ()"}, "getMinusSign()": {"Returns": [["char", "the minus sign character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.", "history": "Added in API level 24", "FullName": "public char getMinusSign ()"}, "getDigit()": {"Returns": [["char", "the digit pattern character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for a digit in a pattern.", "history": "Added in API level 24", "FullName": "public char getDigit ()"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "A DecimalFormatSymbols instance."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DecimalFormatSymbols instance for the given locale. java.text.DecimalFormatSymbols#getInstance, this method simply returns new android.icu.text.DecimalFormatSymbols(locale). ICU currently does not support DecimalFormatSymbolsProvider, which was introduced in Java 6.", "history": "Added in API level 24", "FullName": "public static DecimalFormatSymbols getInstance (ULocale locale)"}, "setInfinity(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the Infinity String"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the String used to represent infinity. Almost always left unchanged.", "history": "Added in API level 24", "FullName": "public void setInfinity (String infinity)"}, "getPadEscape()": {"Returns": [["char", "the character"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPadEscape_E@", "@B_android#icu#text#DecimalFormat#getFormatWidth_E@", "@B_android#icu#text#DecimalFormat#getPadPosition_E@", "@B_android#icu#text#DecimalFormat#getPadCharacter_E@"], "Permissions": [], "Description": "preceding the pad character. In the pattern \"*_#,##0\", '*' is the pad escape, and '_' is the pad character.", "history": "Added in API level 24", "FullName": "public char getPadEscape ()"}, "setCurrency(android.icu.util.Currency)": {"Returns": [], "Parameters": [["@B_android#icu#util#Currency_E@", "Currency: the new currency to be used"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if currency is null"]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setCurrencySymbol_E@", "@B_android#icu#text#DecimalFormatSymbols#setInternationalCurrencySymbol_E@"], "Permissions": [], "Description": "Sets the currency. This also sets the currency symbol attribute to the currency's symbol in the DecimalFormatSymbols' locale, and the international currency symbol attribute to the currency's ISO 4217 currency code.", "history": "Added in API level 24", "FullName": "public void setCurrency (Currency currency)"}, "setPlusSignString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the plus sign string, used in localized patterns and formatted strings"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if plusSignString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPlusSignString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getPlusSign_E@ will return the default plus sign character ('+').", "history": "Added in API level 28", "FullName": "public void setPlusSignString (String plusSignString)"}, "DecimalFormatSymbols(android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public DecimalFormatSymbols (ULocale locale)"}, "getDecimalSeparator()": {"Returns": [["char", "the decimal character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for decimal sign. Different for French, etc.", "history": "Added in API level 24", "FullName": "public char getDecimalSeparator ()"}, "getMonetaryGroupingSeparator()": {"Returns": [["char", "the monetary grouping separator character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public char getMonetaryGroupingSeparator ()"}, "setMonetaryGroupingSeparatorString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the monetary grouping separator string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if sep is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getMonetaryGroupingSeparatorString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getMonetaryGroupingSeparator_E@ will return the default monetary grouping separator character (',').", "history": "Added in API level 28", "FullName": "public void setMonetaryGroupingSeparatorString (String sep)"}, "setPlusSign(char)": {"Returns": [], "Parameters": [["char", "char: the plus sign, used in localized patterns and formatted strings"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPlusSign_E@", "@B_android#icu#text#DecimalFormatSymbols#setMinusSign_E@", "@B_android#icu#text#DecimalFormatSymbols#getMinusSign_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setPlusSign (char plus)"}, "setMinusSignString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the minus sign string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if minusSignString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getGroupingSeparatorString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getMinusSign_E@ will return the default minus sign character ('-').", "history": "Added in API level 28", "FullName": "public void setMinusSignString (String minusSignString)"}, "getSignificantDigit()": {"Returns": [["char", "the significant digit pattern character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used to represent a significant digit in a pattern.", "history": "Added in API level 24", "FullName": "public char getSignificantDigit ()"}, "setMonetaryDecimalSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the monetary decimal separator character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the monetary decimal separator.", "history": "Added in API level 24", "FullName": "public void setMonetaryDecimalSeparator (char sep)"}, "getNaN()": {"Returns": [["@B_java#lang#String_E@", "the NaN String"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String used to represent NaN. Almost always left unchanged.", "history": "Added in API level 24", "FullName": "public String getNaN ()"}, "setDecimalSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the decimal character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for decimal sign. Different for French, etc.", "history": "Added in API level 24", "FullName": "public void setDecimalSeparator (char decimalSeparator)"}, "forNumberingSystem(android.icu.util.ULocale,android.icu.text.NumberingSystem)": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "A DecimalFormatSymbols instance."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale."], ["@B_android#icu#text#NumberingSystem_E@", "NumberingSystem: the numbering system."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#NumberingSystem_E@. This method behaves equivalently to @B_android#icu#text#DecimalFormatSymbols#getInstance_E@ called with a locale having a \"numbers=xxxx\" keyword specifying the numbering system by name. In this method, the NumberingSystem argument will be used even if the locale has its own \"numbers=xxxx\" keyword.", "history": "Added in API level 29", "FullName": "public static DecimalFormatSymbols forNumberingSystem (ULocale locale, NumberingSystem ns)"}, "DecimalFormatSymbols()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a DecimalFormatSymbols object for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public DecimalFormatSymbols ()"}, "getExponentSeparator()": {"Returns": [["@B_java#lang#String_E@", "the localized exponent symbol, used in localized patterns and formatted strings"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setExponentSeparator_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getExponentSeparator ()"}, "DecimalFormatSymbols(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DecimalFormatSymbols object for the given locale.", "history": "Added in API level 24", "FullName": "public DecimalFormatSymbols (Locale locale)"}, "setMonetaryDecimalSeparatorString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the monetary decimal separator string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if sep is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getMonetaryDecimalSeparatorString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getMonetaryDecimalSeparatorString_E@ will return the default monetary decimal separator character ('.').", "history": "Added in API level 28", "FullName": "public void setMonetaryDecimalSeparatorString (String sep)"}, "getInfinity()": {"Returns": [["@B_java#lang#String_E@", "the Infinity string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String used to represent infinity. Almost always left unchanged.", "history": "Added in API level 24", "FullName": "public String getInfinity ()"}, "setNaN(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the NaN String"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the String used to represent NaN. Almost always left unchanged.", "history": "Added in API level 24", "FullName": "public void setNaN (String NaN)"}, "setMonetaryGroupingSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the monetary grouping separator character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setMonetaryGroupingSeparator (char sep)"}, "setPerMillString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the permille string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if perMillString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPerMillString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getPerMill_E@ will return the default permille character ('\u2030').", "history": "Added in API level 28", "FullName": "public void setPerMillString (String perMillString)"}, "setDigitStrings(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The array of digit strings. The length of the array must be exactly 10."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the digitStrings is null."], ["@B_java#lang#IllegalArgumentException_E@", "if the length of the array is not 10."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getDigitStrings_E@"], "Permissions": [], "Description": "When the input array of digit strings contains any strings represented by multiple Java chars, then @B_android#icu#text#DecimalFormatSymbols#getDigits_E@ will return the default digits ('0' - '9') and @B_android#icu#text#DecimalFormatSymbols#getZeroDigit_E@ will return the default zero digit ('0').", "history": "Added in API level 28", "FullName": "public void setDigitStrings (String[] digitStrings)"}, "getDecimalSeparatorString()": {"Returns": [["@B_java#lang#String_E@", "the decimal sign string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setDecimalSeparatorString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getDecimalSeparatorString ()"}, "getZeroDigit()": {"Returns": [["char", "the character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for zero. Different for Arabic, etc.", "history": "Added in API level 24", "FullName": "public char getZeroDigit ()"}, "setPercentString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the percent string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if percentString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPercentString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getPercent_E@ will return the default percent sign character ('%').", "history": "Added in API level 28", "FullName": "public void setPercentString (String percentString)"}, "getGroupingSeparator()": {"Returns": [["char", "the thousands character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for grouping separator. Different for French, etc.", "history": "Added in API level 24", "FullName": "public char getGroupingSeparator ()"}, "setPatternForCurrencySpacing(int,boolean,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: one of CURRENCY_SPC_CURRENCY_MATCH, CURRENCY_SPC_SURROUNDING_MATCH or CURRENCY_SPC_INSERT"], ["boolean", "boolean: true if the pattern is for before the currency symbol. false if the pattern is for after it."], ["@B_java#lang#String_E@", "String: string to override current setting; can be null."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getPatternForCurrencySpacing_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getPatternForCurrencySpacing_E@ for more information. Values for currency match and surrounding match must be @B_android#icu#text#UnicodeSet_E@ patterns. Values for insert can be any string.", "history": "Added in API level 24", "FullName": "public void setPatternForCurrencySpacing (int itemType, boolean beforeCurrency, String pattern)"}, "getMonetaryDecimalSeparatorString()": {"Returns": [["@B_java#lang#String_E@", "the monetary decimal separator string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setMonetaryDecimalSeparatorString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getMonetaryDecimalSeparatorString ()"}, "getInstance()": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "A DecimalFormatSymbols instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DecimalFormatSymbols instance for the default locale. java.text.DecimalFormatSymbols#getInstance, this method simply returns new android.icu.text.DecimalFormatSymbols(). ICU currently does not support DecimalFormatSymbolsProvider, which was introduced in Java 6.", "history": "Added in API level 24", "FullName": "public static DecimalFormatSymbols getInstance ()"}, "getPatternSeparator()": {"Returns": [["char", "the pattern separator character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used to separate positive and negative subpatterns in a pattern.", "history": "Added in API level 24", "FullName": "public char getPatternSeparator ()"}, "getULocale()": {"Returns": [["@B_android#icu#util#ULocale_E@", "the locale for which this object was constructed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the locale for which this object was constructed.", "history": "Added in API level 24", "FullName": "public ULocale getULocale ()"}, "getPercent()": {"Returns": [["char", "the percent character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for percent sign. Different for Arabic, etc.", "history": "Added in API level 24", "FullName": "public char getPercent ()"}, "forNumberingSystem(java.util.Locale,android.icu.text.NumberingSystem)": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "A DecimalFormatSymbols instance."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale."], ["@B_android#icu#text#NumberingSystem_E@", "NumberingSystem: the numbering system."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#text#NumberingSystem_E@. This method behaves equivalently to @B_android#icu#text#DecimalFormatSymbols#getInstance_E@ called with a locale having a \"numbers=xxxx\" keyword specifying the numbering system by name. In this method, the NumberingSystem argument will be used even if the locale has its own \"numbers=xxxx\" keyword.", "history": "Added in API level 29", "FullName": "public static DecimalFormatSymbols forNumberingSystem (Locale locale, NumberingSystem ns)"}, "getExponentMultiplicationSign()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the multiplication sign", "history": "Added in API level 24", "FullName": "public String getExponentMultiplicationSign ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "getDigitStrings()": {"Returns": [["@B_java#lang#String_E@", "The array of ten digit strings"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setDigitStrings_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String[] getDigitStrings ()"}, "setCurrencySymbol(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the local currency String."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the string denoting the local currency.", "history": "Added in API level 24", "FullName": "public void setCurrencySymbol (String currency)"}, "setPatternSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the pattern separator character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used to separate positive and negative subpatterns in a pattern.", "history": "Added in API level 24", "FullName": "public void setPatternSeparator (char patternSeparator)"}, "getPlusSign()": {"Returns": [["char", "the plus sign, used in localized patterns and formatted strings"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setPlusSign_E@", "@B_android#icu#text#DecimalFormatSymbols#setMinusSign_E@", "@B_android#icu#text#DecimalFormatSymbols#getMinusSign_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public char getPlusSign ()"}, "setPerMill(char)": {"Returns": [], "Parameters": [["char", "char: the mille percent character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for mille percent sign. Different for Arabic, etc.", "history": "Added in API level 24", "FullName": "public void setPerMill (char perMill)"}, "getCurrencySymbol()": {"Returns": [["@B_java#lang#String_E@", "the local currency String."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string denoting the local currency.", "history": "Added in API level 24", "FullName": "public String getCurrencySymbol ()"}, "setDigit(char)": {"Returns": [], "Parameters": [["char", "char: the digit pattern character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for a digit in a pattern.", "history": "Added in API level 24", "FullName": "public void setDigit (char digit)"}, "setGroupingSeparatorString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the grouping separator string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if groupingSeparatorString is null."]], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#getGroupingSeparatorString_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormatSymbols#getGroupingSeparator_E@ will return the default grouping separator character (',').", "history": "Added in API level 28", "FullName": "public void setGroupingSeparatorString (String groupingSeparatorString)"}, "getGroupingSeparatorString()": {"Returns": [["@B_java#lang#String_E@", "the grouping separator string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setGroupingSeparatorString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getGroupingSeparatorString ()"}, "getPerMill()": {"Returns": [["char", "the mille percent character"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the character used for mille percent sign. Different for Arabic, etc.", "history": "Added in API level 24", "FullName": "public char getPerMill ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "A DecimalFormatSymbols instance."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DecimalFormatSymbols instance for the given locale. java.text.DecimalFormatSymbols#getInstance, this method simply returns new android.icu.text.DecimalFormatSymbols(locale). ICU currently does not support DecimalFormatSymbolsProvider, which was introduced in Java 6.", "history": "Added in API level 24", "FullName": "public static DecimalFormatSymbols getInstance (Locale locale)"}, "getInternationalCurrencySymbol()": {"Returns": [["@B_java#lang#String_E@", "the international string denoting the local currency"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the international string denoting the local currency.", "history": "Added in API level 24", "FullName": "public String getInternationalCurrencySymbol ()"}, "getMonetaryGroupingSeparatorString()": {"Returns": [["@B_java#lang#String_E@", "the monetary grouping separator string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols#setMonetaryGroupingSeparatorString_E@"], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public String getMonetaryGroupingSeparatorString ()"}, "getLocale()": {"Returns": [["@B_java#util#Locale_E@", "the locale for which this object was constructed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the locale for which this object was constructed.", "history": "Added in API level 24", "FullName": "public Locale getLocale ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of Locales for which localized DecimalFormatSymbols instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. java.text.DecimalFormatSymbols#getAvailableLocales, this method simply returns the array of Locales available for this class. ICU currently does not support DecimalFormatSymbolsProvider, which was introduced in Java 6.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}, "setZeroDigit(char)": {"Returns": [], "Parameters": [["char", "char: the zero character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for zero.", "history": "Added in API level 24", "FullName": "public void setZeroDigit (char zeroDigit)"}}, "Inheritance": [], "ClassName": "android.icu.text.DecimalFormatSymbols", "ClassDesc": "@B_java#text#DecimalFormatSymbols_E@. Methods, fields, and other functionality specific to ICU are labeled 'DecimalFormat to format numbers. DecimalFormat creates for itself an instance of DecimalFormatSymbols from its locale data. If you need to change any of these symbols, you can get the DecimalFormatSymbols object from your DecimalFormat and modify it."}