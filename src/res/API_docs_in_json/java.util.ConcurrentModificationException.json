{"Functions": {"ConcurrentModificationException(java.lang.String,java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message (which is saved for later retrieval by the @B_java#lang#Throwable#getMessage_E@ method)."], ["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new exception with the specified detail message and cause. Note that the detail message associated with cause is", "history": "Added in API level 19", "FullName": "public ConcurrentModificationException (String message, Throwable cause)"}, "ConcurrentModificationException(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the cause (which is saved for later retrieval by the @B_java#lang#Throwable#getCause_E@ method). (A null value is permitted, and indicates that the cause is nonexistent or unknown.)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new exception with the specified cause and a detail message of (cause==null ? null : cause.toString()) (which typically contains the class and detail message of cause.", "history": "Added in API level 19", "FullName": "public ConcurrentModificationException (Throwable cause)"}, "ConcurrentModificationException(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the detail message pertaining to this exception."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a ConcurrentModificationException with the specified detail message.", "history": "Added in API level 1", "FullName": "public ConcurrentModificationException (String message)"}, "ConcurrentModificationException()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a ConcurrentModificationException with no detail message.", "history": "Added in API level 1", "FullName": "public ConcurrentModificationException ()"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@", "@B_java#lang#RuntimeException_E@"], "ClassName": "java.util.ConcurrentModificationException", "ClassDesc": "This exception may be thrown by methods that have detected concurrent modification of an object when such modification is not permissible. For example, it is not generally permissible for one thread to modify a Collection while another thread is iterating over it. In general, the results of the iteration are undefined under these circumstances. Some Iterator implementations (including those of all the general purpose collection implementations provided by the JRE) may choose to throw this exception if this behavior is detected. Iterators that do this are known as Note that this exception does not always indicate that an object has been concurrently modified by a Note that fail-fast behavior cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast operations throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness:"}