{"Functions": {"transfer(E)": {"Returns": [], "Parameters": [["E", "E: the element to transfer"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a consumer, waiting if necessary to do so. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#LinkedTransferQueue#take_E@ or timed @B_java#util#concurrent#LinkedTransferQueue#poll_E@), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer.", "history": "Added in API level 21", "FullName": "public void transfer (E e)"}, "drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 21", "FullName": "public int drainTo (Collection<? super E> c)"}, "getWaitingConsumerCount()": {"Returns": [["int", "the number of consumers waiting to receive elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of consumers waiting to receive elements via @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@. The return value is an approximation of a momentary state of affairs, that may be inaccurate if consumers have completed or given up waiting. The value may be useful for monitoring and heuristics, but not for synchronization control. Implementations of this method are likely to be noticeably slower than those for @B_java#util#concurrent#TransferQueue#hasWaitingConsumer_E@.", "history": "Added in API level 21", "FullName": "public int getWaitingConsumerCount ()"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block.", "history": "Added in API level 21", "FullName": "public void put (E e)"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 21", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never return false.", "history": "Added in API level 21", "FullName": "public boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "Integer.MAX_VALUE (as specified by @B_java#util#concurrent#BlockingQueue#remainingCapacity_E@)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns Integer.MAX_VALUE because a LinkedTransferQueue is not capacity constrained.", "history": "Added in API level 21", "FullName": "public int remainingCapacity ()"}, "hasWaitingConsumer()": {"Returns": [["boolean", "true if there is at least one waiting consumer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if there is at least one consumer waiting to receive an element via @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@. The return value represents a momentary state of affairs.", "history": "Added in API level 21", "FullName": "public boolean hasWaitingConsumer ()"}, "tryTransfer(E)": {"Returns": [["boolean", "true if the element was transferred, else false"]], "Parameters": [["E", "E: the element to transfer"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a waiting consumer immediately, if possible. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#LinkedTransferQueue#take_E@ or timed @B_java#util#concurrent#LinkedTransferQueue#poll_E@), otherwise returning false without enqueuing the element.", "history": "Added in API level 21", "FullName": "public boolean tryTransfer (E e)"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 21", "FullName": "public int drainTo (Collection<? super E> c, int maxElements)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this queue. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this queue in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this queue in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is", "history": "Added in API level 21", "FullName": "public Iterator<E> iterator ()"}, "poll()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 21", "FullName": "public E poll ()"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 21", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this queue"]], "Parameters": [["T[]", "T: the array into which the elements of the queue are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence; the runtime type of the returned array is that of the specified array. If the queue fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this queue. If this queue fits in the specified array with room to spare (i.e., the array has more elements than this queue), the element in the array immediately following the end of the queue is set to null. Like the @B_java#util#concurrent#LinkedTransferQueue#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a queue known to contain only strings. The following code can be used to dump the queue into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 21", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "the number of elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this queue. If this queue contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires an O(n) traversal.", "history": "Added in API level 21", "FullName": "public int size ()"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 21", "FullName": "public int drainTo (Collection<? super E> c)"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 21", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).", "history": "Added in API level 21", "FullName": "public boolean remove (Object o)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true (as specified by @B_java#util#concurrent#BlockingQueue#offer_E@)"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block or return false.", "history": "added in API level 21", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "tryTransfer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before completion, in which case the element is not left enqueued"]], "Parameters": [["E", "E: the element to transfer"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a consumer if it is possible to do so before the timeout elapses. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#LinkedTransferQueue#take_E@ or timed @B_java#util#concurrent#LinkedTransferQueue#poll_E@), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer, returning false if the specified wait time elapses before the element can be transferred.", "history": "Added in API level 21", "FullName": "public boolean tryTransfer (E e, long timeout, TimeUnit unit)"}, "LinkedTransferQueue(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a LinkedTransferQueue initially containing the elements of the given collection, added in traversal order of the collection's iterator.", "history": "Added in API level 21", "FullName": "public LinkedTransferQueue (Collection<? extends E> c)"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.", "history": "Added in API level 21", "FullName": "public E take ()"}, "isEmpty()": {"Returns": [["boolean", "true if this queue contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains no elements.", "history": "Added in API level 21", "FullName": "public boolean isEmpty ()"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 21", "FullName": "public E poll (long timeout, TimeUnit unit)"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true (as specified by @B_java#util#concurrent#BlockingQueue#offer_E@)"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never block or return false.", "history": "Added in API level 21", "FullName": "public boolean offer (E e, long timeout, TimeUnit unit)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this queue"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this queue, in proper sequence. The returned array will be \"safe\" in that no references to it are maintained by this queue. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 21", "FullName": "public Object[] toArray ()"}, "LinkedTransferQueue()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an initially empty LinkedTransferQueue.", "history": "Added in API level 21", "FullName": "public LinkedTransferQueue ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 21", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this queue. As the queue is unbounded, this method will never throw @B_java#lang#IllegalStateException_E@ or return false.", "history": "Added in API level 21", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractQueue_E@"], "ClassName": "java.util.concurrent.LinkedTransferQueue<E>", "ClassDesc": "An unbounded @B_java#util#concurrent#TransferQueue_E@ based on linked nodes. This queue orders elements FIFO (first-in-first-out) with respect to any given producer. The head of the queue is that element that has been on the queue the longest time for some producer. The tail of the queue is that element that has been on the queue the shortest time for some producer. Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these queues, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the added elements. This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a LinkedTransferQueue LinkedTransferQueue in another thread."}