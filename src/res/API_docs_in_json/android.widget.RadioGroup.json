{"Functions": {"check(int)": {"Returns": [], "Parameters": [["int", "int: the unique id of the radio button to select in this group"]], "Throws": [], "SeeAlso": ["@B_android#widget#RadioGroup#getCheckedRadioButtonId_E@", "@B_android#widget#RadioGroup#clearCheck_E@"], "Permissions": [], "Description": "Sets the selection to the radio button whose identifier is passed in parameter. Using -1 as the selection identifier clears the selection; such an operation is equivalent to invoking @B_android#widget#RadioGroup#clearCheck_E@.", "history": "Added in API level 1", "FullName": "public void check (int id)"}, "autofill(android.view.autofill.AutofillValue)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: value to be autofilled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically fills the content of this view with the value. Views support the Autofill Framework mainly by: Providing the metadata defining what the view means and how it can be autofilled. Implementing the methods that autofill the view. @B_android#view#View#onProvideAutofillStructure_E@ is responsible for the former, this method is responsible for latter. This method does nothing by default, but when overridden it typically: For example, a text-field view could implement the method this way: If the value is updated asynchronously, the next call to @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ must happen @B_android#view#View#getAutofillValue_E@ must be equal to the value passed to it, otherwise the view will not be highlighted as autofilled.", "history": "Added in API level 26", "FullName": "public void autofill (AutofillValue value)"}, "RadioGroup(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RadioGroup (Context context, AttributeSet attrs)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#RadioGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public RadioGroup.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getAutofillValue()": {"Returns": [["@B_android#view#autofill#AutofillValue_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#view#View_E@'s current autofill value. By default returns null, but subclasses should override it and return an appropriate value to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public AutofillValue getAutofillValue ()"}, "setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#OnHierarchyChangeListener_E@", "ViewGroup.OnHierarchyChangeListener: the callback to invoke on hierarchy change"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when a child is added to or removed from this view.", "history": "Added in API level 1", "FullName": "public void setOnHierarchyChangeListener (ViewGroup.OnHierarchyChangeListener listener)"}, "addView(android.view.View,int,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["int", "int: the position at which to add the child or -1 to add last"], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: the layout parameters to set on the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view with the specified layout parameters. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child, int index, ViewGroup.LayoutParams params)"}, "getCheckedRadioButtonId()": {"Returns": [["int", "the unique id of the selected radio button in this group"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#RadioGroup#check_E@", "@B_android#widget#RadioGroup#clearCheck_E@"], "Permissions": [], "Description": "Returns the identifier of the selected radio button in this group. Upon empty selection, the returned value is -1.", "history": "Added in API level 1", "FullName": "public int getCheckedRadioButtonId ()"}, "RadioGroup(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RadioGroup (Context context)"}, "onFinishInflate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finalize inflating a view from XML. This is called as the last phase of inflation, after all child views have been added. Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFinishInflate ()"}, "clearCheck()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#RadioGroup#check_E@", "@B_android#widget#RadioGroup#getCheckedRadioButtonId_E@"], "Permissions": [], "Description": "Clears the selection. When the selection is cleared, no radio button in this group is selected and @B_android#widget#RadioGroup#getCheckedRadioButtonId_E@ returns null.", "history": "Added in API level 1", "FullName": "public void clearCheck ()"}, "getAutofillType()": {"Returns": [["int", "Value is @B_android#view#View#AUTOFILL_TYPE_NONE_E@, @B_android#view#View#AUTOFILL_TYPE_TEXT_E@, @B_android#view#View#AUTOFILL_TYPE_TOGGLE_E@, @B_android#view#View#AUTOFILL_TYPE_LIST_E@, or @B_android#view#View#AUTOFILL_TYPE_DATE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the autofill type of this view, so an @B_android#service#autofill#AutofillService_E@ can create the proper @B_android#view#autofill#AutofillValue_E@ when autofilling the view. By default returns @B_android#view#View#AUTOFILL_TYPE_NONE_E@, but views should override it to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public int getAutofillType ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ when the layout's orientation is @B_android#widget#LinearLayout#VERTICAL_E@. When the orientation is @B_android#widget#LinearLayout#HORIZONTAL_E@, the width is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and the height to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "Added in API level 1", "FullName": "protected LinearLayout.LayoutParams generateDefaultLayoutParams ()"}, "setOnCheckedChangeListener(android.widget.RadioGroup.OnCheckedChangeListener)": {"Returns": [], "Parameters": [["@B_android#widget#RadioGroup#OnCheckedChangeListener_E@", "RadioGroup.OnCheckedChangeListener: the callback to call on checked state change"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when the checked radio button changes in this group.", "history": "Added in API level 1", "FullName": "public void setOnCheckedChangeListener (RadioGroup.OnCheckedChangeListener listener)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.RadioGroup", "ClassDesc": "This class is used to create a multiple-exclusion scope for a set of radio buttons. Checking one radio button that belongs to a radio group unchecks any previously checked radio button within the same group. Intially, all of the radio buttons are unchecked. While it is not possible to uncheck a particular radio button, the radio group can be cleared to remove the checked state. The selection is identified by the unique id of the radio button as defined in the XML layout file. See @B_android#R#styleable#RadioGroup_E@, @B_android#R#styleable#LinearLayout_E@, @B_android#R#styleable#ViewGroup_E@, @B_android#R#styleable#View_E@ Also see @B_android#widget#LinearLayout#LayoutParams_E@ for layout attributes."}