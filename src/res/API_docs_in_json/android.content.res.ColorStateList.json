{"Functions": {"isStateful()": {"Returns": [["boolean", "True if this color state list changes color based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#res#ColorStateList#getColorForState_E@"], "Permissions": [], "Description": "Indicates whether this color state list contains at least one state spec and the first spec is not empty (e.g. match-all).", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "ColorStateList(int[][], int[])": {"Returns": [], "Parameters": [["int[][]", "int no parameter comment"], ["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ColorStateList that returns the specified mapping from states to colors.", "history": "added in API level 1", "FullName": "public ColorStateList (int[][] states, int[] colors)"}, "isOpaque()": {"Returns": [["boolean", "True if this color state list is opaque."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this color state list is opaque, which means that every color returned from @B_android#content#res#ColorStateList#getColorForState_E@ has an alpha value of 255.", "history": "Added in API level 21", "FullName": "public boolean isOpaque ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.content.res.Resources.Theme)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A new color state list."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources against which the ColorStateList should be inflated. This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: Parser for the XML document defining the ColorStateList. This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Optional theme to apply to the color state list, may be null. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ColorStateList from an XML document using given a set of @B_android#content#res#Resources_E@ and a @B_android#content#res#Resources#Theme_E@.", "history": "Added in API level 23", "FullName": "public static ColorStateList createFromXml (Resources r, XmlPullParser parser, Resources.Theme theme)"}, "getColorForState(int[],int)": {"Returns": [["int", "the color associated with that set of states in this @B_android#content#res#ColorStateList_E@."]], "Parameters": [["int[]", "int: an array of @B_android#view#View_E@ states This value may be null."], ["int", "int: the color to return if there's no matching state spec in this @B_android#content#res#ColorStateList_E@ that matches the stateSet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the color associated with the given set of @B_android#view#View_E@ states.", "history": "Added in API level 1", "FullName": "public int getColorForState (int[] stateSet, int defaultColor)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getColorForState(int[], int)": {"Returns": [["int", "the color associated with that set of states in this @B_android#content#res#ColorStateList_E@."]], "Parameters": [["int[]", "int: an array of @B_android#view#View_E@ statesThis value may be null."], ["int", "int: the color to return if there's no matching state spec in this @B_android#content#res#ColorStateList_E@ that matches the stateSet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the color associated with the given set of @B_android#view#View_E@ states.", "history": "added in API level 1", "FullName": "public int getColorForState (int[] stateSet, int defaultColor)"}, "createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A new color state list. This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources against which the ColorStateList should be inflated."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: Parser for the XML document defining the ColorStateList."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Use #createFromXml(Resources, XmlPullParser parser, Theme) Creates a ColorStateList from an XML document.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public static ColorStateList createFromXml (Resources r, XmlPullParser parser)"}, "withAlpha(int)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A new color state list. This value will never be null."]], "Parameters": [["int", "int: The new alpha channel value (0-255)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ColorStateList that has the same states and colors as this one but where each color has the specified alpha value (0-255).", "history": "Added in API level 1", "FullName": "public ColorStateList withAlpha (int alpha)"}, "getDefaultColor()": {"Returns": [["int", "the default color in this @B_android#content#res#ColorStateList_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the default color in this @B_android#content#res#ColorStateList_E@.", "history": "Added in API level 1", "FullName": "public int getDefaultColor ()"}, "getChangingConfigurations()": {"Returns": [["int", "a mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@ Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ActivityInfo_E@"], "Permissions": [], "Description": "Returns a mask of the configuration parameters for which this color state list may change, requiring that it be re-created.", "history": "Added in API level 23", "FullName": "public int getChangingConfigurations ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "valueOf(int)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A ColorStateList containing a single color. This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static ColorStateList valueOf (int color)"}, "ColorStateList(int[][],int[])": {"Returns": [], "Parameters": [["int[][]", "int no parameter comment"], ["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ColorStateList that returns the specified mapping from states to colors.", "history": "Added in API level 1", "FullName": "public ColorStateList (int[][] states, int[] colors)"}}, "Inheritance": [], "ClassName": "android.content.res.ColorStateList", "ClassDesc": "Lets you map @B_android#view#View_E@ state sets to colors. @B_android#content#res#ColorStateList_E@s are created from XML resource files defined in the \"color\" subdirectory directory of an application's resource directory. The XML file contains a single \"selector\" element with a number of \"item\" elements inside. For example: Each item defines a set of state spec and color pairs, where the state spec is a series of attributes set to either true or false to represent inclusion or exclusion. If an attribute is not specified for an item, it may be any value. For example, the following item will be matched whenever the focused state is set; any other states may be set or unset: Typically, a color state list will reference framework-defined state attributes such as @B_android#R#attr#state_focused_E@ or @B_android#R#attr#state_enabled_E@; however, app-defined attributes may also be used. If an item with no state spec is placed before other items, those items will be ignored. Each item must define an @B_android#R#attr#color_E@ attribute, which may be an HTML-style hex color, a reference to a color resource, or -- in API 23 and above -- a theme attribute that resolves to a color. Starting with API 23, items may optionally define an @B_android#R#attr#alpha_E@ attribute to modify the base color's opacity. This attribute takes a either floating-point value between 0 and 1 or a theme attribute that resolves as such. The item's overall color is calculated by multiplying by the base color's alpha channel by the alpha value. For example, the following item represents the theme's accent color at 50% opacity: For more information, see the guide to"}