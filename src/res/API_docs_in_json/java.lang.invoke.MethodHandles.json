{"Functions": {"constant(java.lang.Class<?>, java.lang.Object)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle of the given return type and no arguments, which always returns the given value"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type of the desired method handle"], ["@B_java#lang#Object_E@", "Object: the value to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the type argument is null"], ["@B_java#lang#ClassCastException_E@", "if the value cannot be converted to the required return type"], ["@B_java#lang#IllegalArgumentException_E@", "if the given type is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle of the requested return type which returns the given constant value every time it is invoked. Before the method handle is returned, the passed-in value is converted to the requested type. If the requested type is primitive, widening primitive conversions are attempted, else reference conversions are attempted. The returned method handle is equivalent to identity(type).bindTo(value).", "history": "added in API level 26", "FullName": "public static MethodHandle constant (Class<?> type, Object value)"}, "filterArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle...)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified argument filtering logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after arguments are filtered"], ["int", "int: the position of the first argument to filter"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handles to call initially on filtered arguments"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null or if the filters array is null"], ["@B_java#lang#IllegalArgumentException_E@", "if a non-null element of filters does not match a corresponding argument type of target as described above, or if the pos+filters.length is greater than target.type().parameterCount(), or if the resulting method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Adapts a target method handle by pre-processing one or more of its arguments, each with its own unary filter function, and then calling the target with each pre-processed argument replaced by the result of its corresponding filter function. The pre-processing is performed by one or more method handles, specified in the elements of the filters array. The first element of the filter array corresponds to the pos argument of the target, and so on in sequence. Null arguments in the array are treated as identity functions, and the corresponding arguments left unchanged. (If there are no non-null elements in the array, the original target is returned.) Each filter is applied to the corresponding argument of the adapter. If a filter F applies to the Nth argument of the target, then F must be a method handle which takes exactly one argument. The type of F's sole argument replaces the corresponding argument type of the target in the resulting adapted method handle. The return type of F must be identical to the corresponding parameter type of the target. It is an error if there are elements of filters (null or not) which do not correspond to argument positions in the target. Here is pseudocode for the resulting adapter:", "history": "Added in API level 26", "FullName": "public static MethodHandle filterArguments (MethodHandle target, int pos, MethodHandle... filters)"}, "lookup()": {"Returns": [["@B_java#lang#invoke#MethodHandles#Lookup_E@", "a lookup object for the caller of this method, with private access"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#lang#invoke#MethodHandles#Lookup_E@ with full capabilities to emulate all supported bytecode behaviors of the caller. These capabilities include capability which may be delegated to trusted agents. Do not store it in place where untrusted code can access it. This method is caller sensitive, which means that it may return different values to different callers. For any given caller class C, the lookup object returned by this call has equivalent capabilities to any lookup object supplied by the JVM to the bootstrap method of an C.", "history": "Added in API level 26", "FullName": "public static MethodHandles.Lookup lookup ()"}, "catchException(java.lang.invoke.MethodHandle,java.lang.Class<?extendsjava.lang.Throwable>,java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified try/catch logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call"], ["@B_java#lang#Class_E@", "Class: the type of exception which the handler will catch"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call if a matching exception is thrown"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if handler does not accept the given exception type, or if the method handle types do not match in their return types and their corresponding parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Makes a method handle which adapts a target method handle, by running it inside an exception handler. If the target returns normally, the adapter returns that value. If an exception matching the specified type is thrown, the fallback handle is called instead on the exception, plus the original arguments. The target and handler must have the same corresponding argument and return types, except that handler may omit trailing arguments (similarly to the predicate in @B_java#lang#invoke#MethodHandles#guardWithTest_E@). Also, the handler must have an extra leading parameter of exType or a supertype. Here is pseudocode for the resulting adapter: a... in the pseudocode) cannot be modified by execution of the target, and so are passed unchanged from the caller to the handler, if the handler is invoked. The target and handler must return the same type, even if the handler always throws. (This might happen, for instance, because the handler is simulating a finally clause). To create such a throwing handler, compose the handler creation logic with @B_java#lang#invoke#MethodHandles#throwException_E@, in order to create a method handle of the correct return type.", "history": "Added in API level 26", "FullName": "public static MethodHandle catchException (MethodHandle target, Class<? extends Throwable> exType, MethodHandle handler)"}, "arrayElementGetter(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can load values from the given array type"]], "Parameters": [["@B_java#lang#Class_E@", "Class: an array type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if arrayClass is not an array type"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving read access to elements of an array. The type of the method handle will have a return type of the array's element type. Its first argument will be the array type, and the second will be int.", "history": "Added in API level 26", "FullName": "public static MethodHandle arrayElementGetter (Class<?> arrayClass)"}, "spreadInvoker(java.lang.invoke.MethodType,int)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle suitable for invoking any method handle of the given type"]], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the desired target type"], ["int", "int: number of fixed arguments, to be passed unchanged to the target"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type is null"], ["@B_java#lang#IllegalArgumentException_E@", "if leadingArgCount is not in the range from 0 to type.parameterCount() inclusive, or if the resulting method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array. The resulting invoker will be a method handle with the following arguments: a single MethodHandle target zero or more leading values (counted by leadingArgCount) an Object[] array containing trailing arguments The invoker will invoke its target like a call to @B_java#lang#invoke#MethodHandle#invoke_E@ with the indicated type. That is, if the target is exactly of the given type, it will behave like invokeExact; otherwise it behave as if @B_java#lang#invoke#MethodHandle#asType_E@ is used to convert the target to the required type. The type of the returned invoker will not be the given type, but rather will have all parameters except the first leadingArgCount replaced by a single array of type Object[], which will be the final parameter. Before invoking its target, the invoker will spread the final array, apply reference casts as necessary, and unbox and widen primitive arguments. If, when the invoker is called, the supplied array argument does not have the correct number of elements, the invoker will throw an @B_java#lang#IllegalArgumentException_E@ instead of invoking the target. This method is equivalent to the following code (though it may be more efficient):", "history": "Added in API level 26", "FullName": "public static MethodHandle spreadInvoker (MethodType type, int leadingArgCount)"}, "explicitCastArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which delegates to the target after performing any necessary argument conversions, and arranges for any necessary return value conversions"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after arguments are retyped"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the expected type of the new method handle"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#invoke#WrongMethodTypeException_E@", "if the conversion cannot be made"]], "SeeAlso": ["@B_java#lang#invoke#MethodHandle#asType_E@"], "Permissions": [], "Description": "Produces a method handle which adapts the type of the given method handle to a new type by pairwise argument and return type conversion. The original type and new type must have the same number of arguments. The resulting method handle is guaranteed to report a type which is equal to the desired new type. If the original type and new type are equal, returns target. The same conversions are allowed as for @B_java#lang#invoke#MethodHandle#asType_E@, and some additional conversions are also applied if those conversions fail. Given types T0, T1, one of the following conversions is applied if possible, before or instead of any conversions done by asType: If T0 and T1 are references, and T1 is an interface type, then the value of type T0 is passed as a T1 without a cast. (This treatment of interfaces follows the usage of the bytecode verifier.) If T0 is boolean and T1 is another primitive, the boolean is converted to a byte value, 1 for true, 0 for false. (This treatment follows the usage of the bytecode verifier.) If T1 is boolean and T0 is another primitive, T0 is converted to byte via Java casting conversion (JLS 5.5), and the low order bit of the result is tested, as if by (x & 1) != 0. If T0 and T1 are primitives other than boolean, then a Java casting conversion (JLS 5.5) is applied. (Specifically, T0 will convert to T1 by widening and/or narrowing.) If T0 is a reference and T1 a primitive, an unboxing conversion will be applied at runtime, possibly followed by a Java casting conversion (JLS 5.5) on the primitive value, possibly followed by a conversion from byte to boolean by testing the low-order bit. If T0 is a reference and T1 a primitive, and if the reference is null at runtime, a zero value is introduced.", "history": "Added in API level 26", "FullName": "public static MethodHandle explicitCastArguments (MethodHandle target, MethodType newType)"}, "collectArguments(java.lang.invoke.MethodHandle,int,java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified argument subsequence filtering logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after filtering the subsequence of arguments"], ["int", "int: the position of the first adapter argument to pass to the filter, and/or the target argument which receives the result of the filter"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call on the subsequence of arguments"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the return type of filter is non-void and is not the same as the pos argument of the target, or if pos is not between 0 and the target's arity, inclusive, or if the resulting method handle's type would have too many parameters"]], "SeeAlso": ["@B_java#lang#invoke#MethodHandles#foldArguments_E@", "@B_java#lang#invoke#MethodHandles#filterArguments_E@", "@B_java#lang#invoke#MethodHandles#filterReturnValue_E@"], "Permissions": [], "Description": "Adapts a target method handle by pre-processing a sub-sequence of its arguments with a filter (another method handle). The pre-processed arguments are replaced by the result (if any) of the filter function. The target is then called on the modified (usually shortened) argument list. If the filter returns a value, the target must accept that value as its argument in position pos, preceded and/or followed by any arguments not passed to the filter. If the filter returns void, the target must accept all arguments not passed to the filter. No arguments are reordered, and a result returned from the filter replaces (in order) the whole subsequence of arguments originally passed to the adapter. The argument types (if any) of the filter replace zero or one argument types of the target, at position pos, in the resulting adapted method handle. The return type of the filter (if any) must be identical to the argument type of the target at position pos, and that target argument is supplied by the return value of the filter. In all cases, pos must be greater than or equal to zero, and pos must also be less than or equal to the target's arity. Here is pseudocode for the resulting adapter: A collection adapter collectArguments(mh, 0, coll) is equivalent to one which first \"folds\" the affected arguments, and then drops them, in separate steps as follows: coll, then collectArguments(mh, 0, coll) is equivalent to filterReturnValue(coll, mh). If the filter method handle coll consumes one argument and produces a non-void result, then collectArguments(mh, N, coll) is equivalent to filterArguments(mh, N, coll). Other equivalences are possible but would require argument permutation.", "history": "Added in API level 26", "FullName": "public static MethodHandle collectArguments (MethodHandle target, int pos, MethodHandle filter)"}, "arrayElementSetter(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can store values into the array type"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class of an array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if arrayClass is not an array type"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving write access to elements of an array. The type of the method handle will have a void return type. Its last argument will be the array's element type. The first and second arguments will be the array type and int.", "history": "Added in API level 26", "FullName": "public static MethodHandle arrayElementSetter (Class<?> arrayClass)"}, "exactInvoker(java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle suitable for invoking any method handle of the given type"]], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the desired target type"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the resulting method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a special invoker method handle which can be used to invoke any method handle of the given type, as if by @B_java#lang#invoke#MethodHandle#invokeExact_E@. The resulting invoker will have a type which is exactly equal to the desired type, except that it will accept an additional leading argument of type MethodHandle. This method is equivalent to the following code (though it may be more efficient): publicLookup().findVirtual(MethodHandle.class, \"invokeExact\", type) Discussion: Invoker method handles can be useful when working with variable method handles of unknown types. For example, to emulate an invokeExact call to a variable method handle M, extract its type T, look up the invoker method X for T, and call the invoker method, as X.invoke(T, A...). (It would not work to call X.invokeExact, since the type T is unknown.) If spreading, collecting, or other argument transformations are required, they can be applied once to the invoker X and reused on many M method handle values, as long as they are compatible with the type of X. (Note: The invoker method is not available via the Core Reflection API. An attempt to call invokeExact or invoke method will raise an @B_java#lang#UnsupportedOperationException_E@.) This method throws no reflective or security exceptions.", "history": "Added in API level 26", "FullName": "public static MethodHandle exactInvoker (MethodType type)"}, "throwException(java.lang.Class<?>,java.lang.Class<?extendsjava.lang.Throwable>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which can throw the given exceptions"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type of the desired method handle"], ["@B_java#lang#Class_E@", "Class: the parameter type of the desired method handle"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which will throw exceptions of the given exType. The method handle will accept a single argument of exType, and immediately throw it as an exception. The method type will nominally specify a return of returnType. The return type may be anything convenient: It doesn't matter to the method handle's behavior, since it will never return normally.", "history": "Added in API level 26", "FullName": "public static MethodHandle throwException (Class<?> returnType, Class<? extends Throwable> exType)"}, "publicLookup()": {"Returns": [["@B_java#lang#invoke#MethodHandles#Lookup_E@", "a lookup object which is trusted minimally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#lang#invoke#MethodHandles#Lookup_E@ which is trusted minimally. It can only be used to create method handles to publicly accessible fields and methods. As a matter of pure convention, the @B_java#lang#Object_E@. Discussion: The lookup class can be changed to any other class C using an expression of the form @B_java#lang#invoke#MethodHandles#Lookup#in_E@. Since all classes have equal access to public names, such a change would confer no new access rights. A public lookup object is always subject to", "history": "Added in API level 26", "FullName": "public static MethodHandles.Lookup publicLookup ()"}, "guardWithTest(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified if/then/else logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle used for test, must return boolean"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call if test passes"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call if test fails"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if test does not return boolean, or if all three method types do not match (with the return type of test changed to match that of the target)."]], "SeeAlso": [], "Permissions": [], "Description": "Makes a method handle which adapts a target method handle, by guarding it with a test, a boolean-valued method handle. If the guard fails, a fallback handle is called instead. All three method handles must have the same corresponding argument and return types, except that the return type of the test must be boolean, and the test is allowed to have fewer arguments than the other two method handles. Here is pseudocode for the resulting adapter: a... in the pseudocode) cannot be modified by execution of the test, and so are passed unchanged from the caller to the target or fallback as appropriate.", "history": "Added in API level 26", "FullName": "public static MethodHandle guardWithTest (MethodHandle test, MethodHandle target, MethodHandle fallback)"}, "spreadInvoker(java.lang.invoke.MethodType, int)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle suitable for invoking any method handle of the given type"]], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the desired target type"], ["int", "int: number of fixed arguments, to be passed unchanged to the target"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type is null"], ["@B_java#lang#IllegalArgumentException_E@", "if leadingArgCount is not in the range from 0 to type.parameterCount() inclusive, or if the resulting method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which will invoke any method handle of the given type, with a given number of trailing arguments replaced by a single trailing Object[] array. The resulting invoker will be a method handle with the following arguments: a single MethodHandle target zero or more leading values (counted by leadingArgCount) an Object[] array containing trailing arguments The invoker will invoke its target like a call to @B_java#lang#invoke#MethodHandle#invoke_E@ with the indicated type. That is, if the target is exactly of the given type, it will behave like invokeExact; otherwise it behave as if @B_java#lang#invoke#MethodHandle#asType_E@ is used to convert the target to the required type. The type of the returned invoker will not be the given type, but rather will have all parameters except the first leadingArgCount replaced by a single array of type Object[], which will be the final parameter. Before invoking its target, the invoker will spread the final array, apply reference casts as necessary, and unbox and widen primitive arguments. If, when the invoker is called, the supplied array argument does not have the correct number of elements, the invoker will throw an @B_java#lang#IllegalArgumentException_E@ instead of invoking the target. This method is equivalent to the following code (though it may be more efficient):", "history": "added in API level 26", "FullName": "public static MethodHandle spreadInvoker (MethodType type, int leadingArgCount)"}, "reflectAs(java.lang.Class<T>,java.lang.invoke.MethodHandle)": {"Returns": [["T", "a reference to the method, constructor, or field object"]], "Parameters": [["@B_java#lang#Class_E@", "Class: a class object representing the desired result type T"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: a direct method handle to crack into symbolic reference components"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller is not privileged to call setAccessible"], ["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the target is not a direct method handle"], ["@B_java#lang#ClassCastException_E@", "if the member is not of the expected type"]], "SeeAlso": [], "Permissions": [], "Description": "Performs an unchecked \"crack\" of a @B_java#lang#invoke#MethodHandles#Lookup#revealDirect_E@ on the target to obtain its symbolic reference, and then called @B_java#lang#invoke#MethodHandleInfo#reflectAs_E@ to resolve the symbolic reference to a member. If there is a security manager, its checkPermission method is called with a ReflectPermission(\"suppressAccessChecks\") permission.", "history": "Added in API level 26", "FullName": "public static T reflectAs (Class<T> expected, MethodHandle target)"}, "identity(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a unary method handle which accepts and returns the given type"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the type of the sole parameter and return value of the desired method handle"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given type is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which returns its sole argument when invoked.", "history": "Added in API level 26", "FullName": "public static MethodHandle identity (Class<?> type)"}, "dropArguments(java.lang.invoke.MethodHandle,int,java.lang.Class<?>...)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which drops arguments of the given types, before calling the original method handle"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after the arguments are dropped"], ["int", "int: position of first argument to drop (zero for the leftmost)"], ["@B_java#lang#Class_E@", "Class: the type(s) of the argument(s) to drop"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null, or if the valueTypes array or any of its elements is null"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of valueTypes is void.class, or if pos is negative or greater than the arity of the target, or if the new method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which will discard some dummy arguments before calling some other specified The pos argument may range between zero and pos is zero, the dummy arguments will precede the target's real arguments; if pos is This method is also equivalent to the following code:", "history": "Added in API level 26", "FullName": "public static MethodHandle dropArguments (MethodHandle target, int pos, Class...<?> valueTypes)"}, "permuteArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodType,int...)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which delegates to the target after it drops unused arguments and moves and/or duplicates the other arguments"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after arguments are reordered"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the expected type of the new method handle"], ["int...", "int: an index array which controls the reordering"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the index array length is not equal to the arity of the target, or if any index array element not a valid index for a parameter of newType, or if two corresponding parameter types in target.type() and newType are not identical,"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which adapts the calling sequence of the given method handle to a new type, by reordering the arguments. The resulting method handle is guaranteed to report a type which is equal to the desired new type. The given array controls the reordering. Call #I the number of incoming parameters (the value newType.parameterCount(), and call #O the number of outgoing parameters (the value target.type().parameterCount()). Then the length of the reordering array must be #O, and each element must be a non-negative number less than #I. For every N less than #O, the N-th outgoing argument will be taken from the I-th incoming argument, where I is reorder[N]. No argument or return value conversions are applied. The type of each incoming argument, as determined by newType, must be identical to the type of the corresponding outgoing parameter or parameters in the target method handle. The return type of newType must be identical to the return type of the original target. The reordering array need not specify an actual permutation. An incoming argument will be duplicated if its index appears more than once in the array, and an incoming argument will be dropped if its index does not appear in the array. As in the case of @B_java#lang#invoke#MethodHandles#dropArguments_E@, incoming arguments which are not mentioned in the reordering array are may be any type, as determined only by newType.", "history": "Added in API level 26", "FullName": "public static MethodHandle permuteArguments (MethodHandle target, MethodType newType, int... reorder)"}, "insertArguments(java.lang.invoke.MethodHandle,int,java.lang.Object...)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which inserts an additional argument, before calling the original method handle"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after the argument is inserted"], ["int", "int: where to insert the argument (zero for the first)"], ["@B_java#lang#Object_E@", "Object: the series of arguments to insert"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target or the values array is null"]], "SeeAlso": ["@B_java#lang#invoke#MethodHandle#bindTo_E@"], "Permissions": [], "Description": "Provides a target method handle with one or more bound arguments in advance of the method handle's invocation. The formal parameters to the target corresponding to the bound arguments are called bound parameters. Returns a new method handle which saves away the bound arguments. When it is invoked, it receives arguments for any non-bound parameters, binds the saved arguments to their corresponding parameters, and calls the original target. The type of the new method handle will drop the types for the bound parameters from the original target type, since the new method handle will no longer require those arguments to be supplied by its callers. Each given argument object must match the corresponding bound parameter type. If a bound parameter type is a primitive, the argument object must be a wrapper, and will be unboxed to produce the primitive value. The pos argument selects which parameters are to be bound. It may range between zero and", "history": "Added in API level 26", "FullName": "public static MethodHandle insertArguments (MethodHandle target, int pos, Object... values)"}, "foldArguments(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified argument folding logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after arguments are combined"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call initially on the incoming arguments"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if combiner's return type is non-void and not the same as the first argument type of the target, or if the initial N argument types of the target (skipping one matching the combiner's return type) are not identical with the argument types of combiner"]], "SeeAlso": [], "Permissions": [], "Description": "Adapts a target method handle by pre-processing some of its arguments, and then calling the target with the result of the pre-processing, inserted into the original sequence of arguments. The pre-processing is performed by combiner, a second method handle. Of the arguments passed to the adapter, the first N arguments are copied to the combiner, which is then called. (Here, N is defined as the parameter count of the combiner.) After this, control passes to the target, with any result from the combiner inserted before the original N incoming arguments. If the combiner returns a value, the first parameter type of the target must be identical with the return type of the combiner, and the next N parameter types of the target must exactly match the parameters of the combiner. If the combiner has a void return, no result will be inserted, and the first N parameter types of the target must exactly match the parameters of the combiner. The resulting adapter is the same type as the target, except that the first parameter type is dropped, if it corresponds to the result of the combiner. (Note that @B_java#lang#invoke#MethodHandles#dropArguments_E@ can be used to remove any arguments that either the combiner or the target does not wish to receive. If some of the incoming arguments are destined only for the combiner, consider using @B_java#lang#invoke#MethodHandle#asCollector_E@ instead, since those arguments will not need to be live on the stack on entry to the target.) Here is pseudocode for the resulting adapter:", "history": "Added in API level 26", "FullName": "public static MethodHandle foldArguments (MethodHandle target, MethodHandle combiner)"}, "filterReturnValue(java.lang.invoke.MethodHandle,java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "method handle which incorporates the specified return value filtering logic"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke before filtering the return value"], ["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: method handle to call on the return value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the argument list of filter does not match the return type of target as described above"]], "SeeAlso": [], "Permissions": [], "Description": "Adapts a target method handle by post-processing its return value (if any) with a filter (another method handle). The result of the filter is returned from the adapter. If the target returns a value, the filter must accept that value as its only argument. If the target returns void, the filter must accept no arguments. The return type of the filter replaces the return type of the target in the resulting adapted method handle. The argument type of the filter (if any) must be identical to the return type of the target. Here is pseudocode for the resulting adapter:", "history": "Added in API level 26", "FullName": "public static MethodHandle filterReturnValue (MethodHandle target, MethodHandle filter)"}, "dropArguments(java.lang.invoke.MethodHandle,int,java.util.List<java.lang.Class<?>>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which drops arguments of the given types, before calling the original method handle"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle to invoke after the arguments are dropped"], ["int", "int: position of first argument to drop (zero for the leftmost)"], ["@B_java#util#List_E@", "List: the type(s) of the argument(s) to drop"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null, or if the valueTypes list or any of its elements is null"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of valueTypes is void.class, or if pos is negative or greater than the arity of the target, or if the new method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which will discard some dummy arguments before calling some other specified The pos argument may range between zero and pos is zero, the dummy arguments will precede the target's real arguments; if pos is This method is also equivalent to the following code:", "history": "Added in API level 26", "FullName": "public static MethodHandle dropArguments (MethodHandle target, int pos, List<Class<?>> valueTypes)"}, "invoker(java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle suitable for invoking any method handle convertible to the given type"]], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the desired target type"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the resulting method handle's type would have too many parameters"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a special invoker method handle which can be used to invoke any method handle compatible with the given type, as if by @B_java#lang#invoke#MethodHandle#invoke_E@. The resulting invoker will have a type which is exactly equal to the desired type, except that it will accept an additional leading argument of type MethodHandle. Before invoking its target, if the target differs from the expected type, the invoker will apply reference casts as necessary and box, unbox, or widen primitive values, as if by @B_java#lang#invoke#MethodHandle#asType_E@. Similarly, the return value will be converted as necessary. If the target is a @B_java#lang#invoke#MethodHandle#asType_E@. This method is equivalent to the following code (though it may be more efficient): publicLookup().findVirtual(MethodHandle.class, \"invoke\", type) Discussion: A Object arguments and return values. An invoker for such a type is capable of calling any method handle of the same arity as the general type. (Note: The invoker method is not available via the Core Reflection API. An attempt to call invokeExact or invoke method will raise an @B_java#lang#UnsupportedOperationException_E@.) This method throws no reflective or security exceptions.", "history": "Added in API level 26", "FullName": "public static MethodHandle invoker (MethodType type)"}, "constant(java.lang.Class<?>,java.lang.Object)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle of the given return type and no arguments, which always returns the given value"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type of the desired method handle"], ["@B_java#lang#Object_E@", "Object: the value to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the type argument is null"], ["@B_java#lang#ClassCastException_E@", "if the value cannot be converted to the required return type"], ["@B_java#lang#IllegalArgumentException_E@", "if the given type is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle of the requested return type which returns the given constant value every time it is invoked. Before the method handle is returned, the passed-in value is converted to the requested type. If the requested type is primitive, widening primitive conversions are attempted, else reference conversions are attempted. The returned method handle is equivalent to identity(type).bindTo(value).", "history": "Added in API level 26", "FullName": "public static MethodHandle constant (Class<?> type, Object value)"}}, "Inheritance": [], "ClassName": "java.lang.invoke.MethodHandles", "ClassDesc": "This class consists exclusively of static methods that operate on or return method handles. They fall into several categories: Lookup methods which help create method handles for methods and fields. Combinator methods, which combine or transform pre-existing method handles into new ones. Other factory methods to create method handles that emulate other common JVM operations or control flow patterns."}