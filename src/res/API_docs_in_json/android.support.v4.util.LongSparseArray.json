{"Functions": {"append(long, E)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Puts a key/value pair into the array, optimizing for the case where the key is greater than all existing keys in the array.", "history": "added in version 22.0.0", "FullName": "void append (long key, E value)"}, "LongSparseArray()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new LongSparseArray containing no mappings.", "history": "added in version 22.0.0", "FullName": "LongSparseArray ()"}, "size()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings that this LongSparseArray currently stores.", "history": "added in version 22.0.0", "FullName": "int size ()"}, "idealByteArraySize(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public static int idealByteArraySize (int need)"}, "delete(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping from the specified key, if there was any.", "history": "added in version 22.0.0", "FullName": "void delete (long key)"}, "keyAt(int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given an index in the range 0...size()-1, returns the key from the indexth key-value mapping that this LongSparseArray stores.", "history": "added in version 22.0.0", "FullName": "long keyAt (int index)"}, "remove(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Alias for @B_android#support#v4#util#LongSparseArray#delete_E@.", "history": "added in version 22.0.0", "FullName": "void remove (long key)"}, "idealLongArraySize(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public static int idealLongArraySize (int need)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: This implementation composes a string by iterating over its mappings. If this map contains itself as a value, the string \"(this Map)\" will appear in its place.", "history": "", "FullName": "String toString ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all key-value mappings from this LongSparseArray.", "history": "added in version 22.0.0", "FullName": "void clear ()"}, "removeAt(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping at the specified index.", "history": "added in version 22.0.0", "FullName": "void removeAt (int index)"}, "valueAt(int)": {"Returns": [["E", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given an index in the range 0...size()-1, returns the value from the indexth key-value mapping that this LongSparseArray stores.", "history": "added in version 22.0.0", "FullName": "E valueAt (int index)"}, "setValueAt(int, E)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given an index in the range 0...size()-1, sets a new value for the indexth key-value mapping that this LongSparseArray stores.", "history": "added in version 22.0.0", "FullName": "void setValueAt (int index, E value)"}, "put(long, E)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping from the specified key to the specified value, replacing the previous mapping from the specified key if there was one.", "history": "added in version 22.0.0", "FullName": "void put (long key, E value)"}, "get(long)": {"Returns": [["E", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Object mapped from the specified key, or null if no such mapping has been made.", "history": "added in version 22.0.0", "FullName": "E get (long key)"}, "get(long, E)": {"Returns": [["E", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Object mapped from the specified key, or the specified Object if no such mapping has been made.", "history": "added in version 22.0.0", "FullName": "E get (long key, E valueIfKeyNotFound)"}, "indexOfKey(long)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index for which @B_android#support#v4#util#LongSparseArray#keyAt_E@ would return the specified key, or a negative number if the specified key is not mapped.", "history": "added in version 22.0.0", "FullName": "int indexOfKey (long key)"}, "clone()": {"Returns": [["@B_android#support#v4#util#LongSparseArray_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "added in version 22.0.0", "FullName": "LongSparseArray<E> clone ()"}, "indexOfValue(E)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an index for which @B_android#support#v4#util#LongSparseArray#valueAt_E@ would return the specified key, or a negative number if no keys map to the specified value. Beware that this is a linear search, unlike lookups by key, and that multiple keys can map to the same value and this will find only one of them.", "history": "added in version 22.0.0", "FullName": "int indexOfValue (E value)"}, "LongSparseArray(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new LongSparseArray containing no mappings that will not require any additional memory allocation to store the specified number of mappings. If you supply an initial capacity of 0, the sparse array will be initialized with a light-weight representation not requiring any additional array allocations.", "history": "added in version 22.0.0", "FullName": "LongSparseArray (int initialCapacity)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.util.LongSparseArray<E>", "ClassDesc": "SparseArray mapping longs to Objects, a version of the platform's android.util.LongSparseArray that can be used on older versions of the platform. Unlike a normal array of Objects, there can be gaps in the indices. It is intended to be more memory efficient than using a HashMap to map Longs to Objects, both because it avoids auto-boxing keys and its data structure doesn't rely on an extra entry object for each mapping. Note that this container keeps its mappings in an array data structure, using a binary search to find keys. The implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. To help with performance, the container includes an optimization when removing keys: instead of compacting its array immediately, it leaves the removed entry marked as deleted. The entry can then be re-used for the same key, or compacted later in a single garbage collection step of all removed entries. This garbage collection will need to be performed at any time the array needs to be grown or the the map size or entry values are retrieved."}