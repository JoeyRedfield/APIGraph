{"Functions": {"FileHandler(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the output file"], ["boolean", "boolean: specifies append mode"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The There is no limit on the amount of data that may be written, so use this with care.", "history": "Added in API level 1", "FullName": "public FileHandler (String pattern, boolean append)"}, "FileHandler(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the output file"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The There is no limit on the amount of data that may be written, so use this with care.", "history": "Added in API level 1", "FullName": "public FileHandler (String pattern)"}, "FileHandler(java.lang.String, int, int, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for naming the output file"], ["int", "int: the maximum number of bytes to write to any one file"], ["int", "int: the number of files to use"], ["boolean", "boolean: specifies append mode"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if limit < 0, or count < 1."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The The count must be at least 1.", "history": "added in API level 1", "FullName": "public FileHandler (String pattern, int limit, int count, boolean append)"}, "FileHandler(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the output file"], ["boolean", "boolean: specifies append mode"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The There is no limit on the amount of data that may be written, so use this with care.", "history": "added in API level 1", "FullName": "public FileHandler (String pattern, boolean append)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Close all the files.", "history": "Added in API level 1", "FullName": "public void close ()"}, "FileHandler(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for naming the output file"], ["int", "int: the maximum number of bytes to write to any one file"], ["int", "int: the number of files to use"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if limit < 0, or count < 1."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The The count must be at least 1.", "history": "added in API level 1", "FullName": "public FileHandler (String pattern, int limit, int count)"}, "FileHandler(java.lang.String,int,int,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for naming the output file"], ["int", "int: the maximum number of bytes to write to any one file"], ["int", "int: the number of files to use"], ["boolean", "boolean: specifies append mode"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if limit < 0, or count < 1."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The The count must be at least 1.", "history": "Added in API level 1", "FullName": "public FileHandler (String pattern, int limit, int count, boolean append)"}, "FileHandler()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\"))."], ["@B_java#lang#NullPointerException_E@", "if pattern property is an empty String."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a default", "history": "Added in API level 1", "FullName": "public FileHandler ()"}, "FileHandler(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the pattern for naming the output file"], ["int", "int: the maximum number of bytes to write to any one file"], ["int", "int: the number of files to use"]], "Throws": [["@B_java#io#IOException_E@", "if there are IO problems opening the files."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#lang#IllegalArgumentException_E@", "if limit < 0, or count < 1."], ["@B_java#lang#IllegalArgumentException_E@", "if pattern is an empty string"]], "SeeAlso": [], "Permissions": [], "Description": "Initialize a The The count must be at least 1.", "history": "Added in API level 1", "FullName": "public FileHandler (String pattern, int limit, int count)"}, "publish(java.util.logging.LogRecord)": {"Returns": [], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: description of the log event. A null record is silently ignored and is not published"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format and publish a", "history": "Added in API level 1", "FullName": "public void publish (LogRecord record)"}}, "Inheritance": ["@B_java#util#logging#Handler_E@", "@B_java#util#logging#StreamHandler_E@"], "ClassName": "java.util.logging.FileHandler", "ClassDesc": "Simple file logging The For a rotating set of files, as each file reaches a given size limit, it is closed, rotated out, and a new file opened. Successively older files are named by adding \"0\", \"1\", \"2\", etc. into the base filename. By default buffering is enabled in the IO libraries but each log record is flushed out when it is complete. By default the <handler-name>.level specifies the default level for the <handler-name>.filter specifies the name of a <handler-name>.formatter specifies the name of a <handler-name>.encoding the name of the character set encoding to use (defaults to the default platform encoding). <handler-name>.limit specifies an approximate maximum amount to write (in bytes) to any one file. If this is zero, then there is no limit. (Defaults to no limit). <handler-name>.count specifies how many output files to cycle through (defaults to 1). <handler-name>.pattern specifies a pattern for generating the output file name. See below for details. (Defaults to \"%h/java%u.log\"). <handler-name>.append specifies whether the FileHandler should append onto any existing files (defaults to false). For example, the properties for FileHandler would be: java.util.logging.FileHandler.level=INFO java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter For a custom handler, e.g. com.foo.MyHandler, the properties would be: com.foo.MyHandler.level=INFO com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter A pattern consists of a string that includes the following special components that will be replaced at runtime: \"/\" the local pathname separator \"%t\" the system temporary directory \"%h\" the value of the \"user.home\" system property \"%g\" the generation number to distinguish rotated logs \"%u\" a unique number to resolve conflicts \"%%\" translates to a single percent sign \"%\" If no \"%g\" field has been specified and the file count is greater than one, then the generation number will be added to the end of the generated filename, after a dot. Thus for example a pattern of \"%t/java%g.log\" with a count of 2 would typically cause log files to be written on Solaris to /var/tmp/java0.log and /var/tmp/java1.log whereas on Windows 95 they would be typically written to C:\\TEMP\\java0.log and C:\\TEMP\\java1.log Generation numbers follow the sequence 0, 1, 2, etc. Normally the \"%u\" unique field is set to 0. However, if the Thus if three processes were all trying to log to fred%u.%g.txt then they might end up using fred0.0.txt, fred1.0.txt, fred2.0.txt as the first file in their rotating sequences. Note that the use of unique ids to avoid conflicts is only guaranteed to work reliably when using a local disk file system."}