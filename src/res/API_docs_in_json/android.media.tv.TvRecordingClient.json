{"Functions": {"TvRecordingClient(android.content.Context,java.lang.String,android.media.tv.TvRecordingClient.RecordingCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application context to create a TvRecordingClient with."], ["@B_java#lang#String_E@", "String: A short name for debugging purposes."], ["@B_android#media#tv#TvRecordingClient#RecordingCallback_E@", "TvRecordingClient.RecordingCallback: The callback to receive recording status changes. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The handler to invoke the callback on."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TvRecordingClient object.", "history": "Added in API level 24", "FullName": "public TvRecordingClient (Context context, String tag, TvRecordingClient.RecordingCallback callback, Handler handler)"}, "stopRecording()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops TV program recording in the current recording session. Recording is expected to stop immediately when this method is called. If recording has not yet started in the current recording session, this method does nothing. The recording session is expected to create a new data entry in the @B_android#media#tv#TvContract#RecordedPrograms_E@ table that describes the newly recorded program and pass the URI to that entry through to @B_android#media#tv#TvRecordingClient#RecordingCallback#onRecordingStopped_E@. If the stop request cannot be fulfilled, the recording session will respond by calling @B_android#media#tv#TvRecordingClient#RecordingCallback#onError_E@.", "history": "Added in API level 24", "FullName": "public void stopRecording ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the resources in the current recording session immediately. This may be called at any time, however if the session is already released, it does nothing.", "history": "Added in API level 24", "FullName": "public void release ()"}, "sendAppPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the private command to send. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: An optional bundle to send with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a private command to the underlying TV input. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.", "history": "Added in API level 24", "FullName": "public void sendAppPrivateCommand (String action, Bundle data)"}, "tune(java.lang.String, android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input for the given channel."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If recording is already started."]], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception. The application may call this method before starting or after stopping recording, but not during recording. The recording session will respond by calling @B_android#media#tv#TvRecordingClient#RecordingCallback#onTuned_E@ if the tune request was fulfilled, or @B_android#media#tv#TvRecordingClient#RecordingCallback#onError_E@ otherwise.", "history": "added in API level 24", "FullName": "public void tune (String inputId, Uri channelUri)"}, "startRecording(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI for the TV program to record, built by @B_android#media#tv#TvContract#buildProgramUri_E@. Can be null. This value may be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#media#tv#TvRecordingClient#tune_E@ request hasn't been handled yet."]], "SeeAlso": [], "Permissions": [], "Description": "Starts TV program recording in the current recording session. Recording is expected to start immediately when this method is called. If the current recording session has not yet tuned to any channel, this method throws an exception. The application may supply the URI for a TV program for filling in program specific data fields in the @B_android#media#tv#TvContract#RecordedPrograms_E@ table. A non-null programUri implies the started recording should be of that specific program, whereas null programUri does not impose such a requirement and the recording can span across multiple TV programs. In either case, the application must call @B_android#media#tv#TvRecordingClient#stopRecording_E@ to stop the recording. The recording session will respond by calling @B_android#media#tv#TvRecordingClient#RecordingCallback#onError_E@ if the start request cannot be fulfilled.", "history": "Added in API level 24", "FullName": "public void startRecording (Uri programUri)"}, "tune(java.lang.String,android.net.Uri)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input for the given channel."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If recording is already started."]], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception. The application may call this method before starting or after stopping recording, but not during recording. The recording session will respond by calling @B_android#media#tv#TvRecordingClient#RecordingCallback#onTuned_E@ if the tune request was fulfilled, or @B_android#media#tv#TvRecordingClient#RecordingCallback#onError_E@ otherwise.", "history": "Added in API level 24", "FullName": "public void tune (String inputId, Uri channelUri)"}, "tune(java.lang.String,android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The ID of the TV input for the given channel."], ["@B_android#net#Uri_E@", "Uri: The URI of a channel."], ["@B_android#os#Bundle_E@", "Bundle: Domain-specific data for this tune request. Keys must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If recording is already started."]], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception. This can be used to provide domain-specific features that are only known between certain client and their TV inputs. The application may call this method before starting or after stopping recording, but not during recording. The recording session will respond by calling @B_android#media#tv#TvRecordingClient#RecordingCallback#onTuned_E@ if the tune request was fulfilled, or @B_android#media#tv#TvRecordingClient#RecordingCallback#onError_E@ otherwise.", "history": "Added in API level 24", "FullName": "public void tune (String inputId, Uri channelUri, Bundle params)"}}, "Inheritance": [], "ClassName": "android.media.tv.TvRecordingClient", "ClassDesc": "The public interface object used to interact with a specific TV input service for TV program recording."}