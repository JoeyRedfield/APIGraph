{"Functions": {"compareUnsigned(long,long)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y as unsigned values; and a value greater than 0 if x > y as unsigned values"]], "Parameters": [["long", "long: the first long to compare"], ["long", "long: the second long to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two long values numerically treating the values as unsigned.", "history": "Added in API level 26", "FullName": "public static int compareUnsigned (long x, long y)"}, "compareTo(java.lang.Long)": {"Returns": [["int", "the value 0 if this Long is equal to the argument Long; a value less than 0 if this Long is numerically less than the argument Long; and a value greater than 0 if this Long is numerically greater than the argument Long (signed comparison)."]], "Parameters": [["@B_java#lang#Long_E@", "Long: the Long to be compared."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two Long objects numerically.", "history": "Added in API level 1", "FullName": "public int compareTo (Long anotherLong)"}, "numberOfLeadingZeros(long)": {"Returns": [["int", "the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified long value, or 64 if the value is equal to zero."]], "Parameters": [["long", "long: the value whose number of leading zeros is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of zero bits preceding the highest-order (\"leftmost\") one-bit in the two's complement binary representation of the specified long value. Returns 64 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero. Note that this method is closely related to the logarithm base 2. For all positive long values x: floor(log63 - numberOfLeadingZeros(x) ceil(log64 - numberOfLeadingZeros(x - 1)", "history": "Added in API level 1", "FullName": "public static int numberOfLeadingZeros (long i)"}, "sum(long, long)": {"Returns": [["long", "the sum of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two long values together as per the + operator.", "history": "added in API level 24", "FullName": "public static long sum (long a, long b)"}, "Long(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the String to be converted to a Long."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable long."]], "SeeAlso": ["@B_java#lang#Long#parseLong_E@"], "Permissions": [], "Description": "Constructs a newly allocated Long object that represents the long value indicated by the String parameter. The string is converted to a long value in exactly the manner used by the parseLong method for radix 10.", "history": "Added in API level 1", "FullName": "public Long (String s)"}, "parseLong(java.lang.String,int)": {"Returns": [["long", "the long represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the long representation to be parsed."], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed long in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting long value is returned. Note that neither the character L ('\\u004C') nor l ('\\u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code - except that either L or l may appear as a digit for a radix greater than or equal to 22. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002d') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type long. Examples:", "history": "Added in API level 1", "FullName": "public static long parseLong (String s, int radix)"}, "hashCode(long)": {"Returns": [["int", "a hash code value for a long value."]], "Parameters": [["long", "long: the value to hash"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for a long value; compatible with Long.hashCode().", "history": "Added in API level 24", "FullName": "public static int hashCode (long value)"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as an int after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "toString(long, int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in the specified radix."]], "Parameters": [["long", "long: a long to be converted to a string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus sign '-' ('\\u002d'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u007a'. If radix is 0123456789abcdef. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "added in API level 1", "FullName": "public static String toString (long i, int radix)"}, "max(long, long)": {"Returns": [["long", "the greater of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two long values as if by calling @B_java#lang#Math#max_E@.", "history": "added in API level 24", "FullName": "public static long max (long a, long b)"}, "toString(long)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in base 10."]], "Parameters": [["long", "long: a long to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing the specified long. The argument is converted to signed decimal representation and returned as a string, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Long#toString_E@ method.", "history": "Added in API level 1", "FullName": "public static String toString (long i)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this object to the specified object. The result is true if and only if the argument is not null and is a Long object that contains the same long value as this object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "remainderUnsigned(long, long)": {"Returns": [["long", "the unsigned remainder of the first argument divided by the second argument"]], "Parameters": [["long", "long: the value to be divided"], ["long", "long: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#divideUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.", "history": "added in API level 26", "FullName": "public static long remainderUnsigned (long dividend, long divisor)"}, "toUnsignedString(long, int)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument in the specified radix."]], "Parameters": [["long", "long: an integer to be converted to an unsigned string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toString_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as @B_java#lang#Long#toString_E@.", "history": "added in API level 26", "FullName": "public static String toUnsignedString (long i, int radix)"}, "highestOneBit(long)": {"Returns": [["long", "a long value with a single one-bit, in the position of the highest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."]], "Parameters": [["long", "long: the value whose highest one bit is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a long value with at most a single one-bit, in the position of the highest-order (\"leftmost\") one-bit in the specified long value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static long highestOneBit (long i)"}, "rotateLeft(long, int)": {"Returns": [["long", "the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits."]], "Parameters": [["long", "long: the value whose bits are to be rotated left"], ["int", "int: the number of bit positions to rotate left"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x3F).", "history": "added in API level 1", "FullName": "public static long rotateLeft (long i, int distance)"}, "remainderUnsigned(long,long)": {"Returns": [["long", "the unsigned remainder of the first argument divided by the second argument"]], "Parameters": [["long", "long: the value to be divided"], ["long", "long: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#divideUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned remainder from dividing the first argument by the second where each argument and the result is interpreted as an unsigned value.", "history": "Added in API level 26", "FullName": "public static long remainderUnsigned (long dividend, long divisor)"}, "parseUnsignedLong(java.lang.String)": {"Returns": [["long", "the unsigned long value represented by the decimal string argument"]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the unsigned long representation to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable unsigned integer."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned decimal long. The characters in the string must all be decimal digits, except that the first character may be an an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Long#parseUnsignedLong_E@ method.", "history": "Added in API level 26", "FullName": "public static long parseUnsignedLong (String s)"}, "rotateRight(long,int)": {"Returns": [["long", "the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits."]], "Parameters": [["long", "long: the value whose bits are to be rotated right"], ["int", "int: the number of bit positions to rotate right"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x3F).", "history": "Added in API level 1", "FullName": "public static long rotateRight (long i, int distance)"}, "valueOf(long)": {"Returns": [["@B_java#lang#Long_E@", "a Long instance representing l."]], "Parameters": [["long", "long: a long value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long instance representing the specified long value. If a new Long instance is not required, this method should generally be used in preference to the constructor @B_java#lang#Long#Long_E@, as this method is likely to yield significantly better space and time performance by caching frequently requested values. Note that unlike the Integer class, this method is not required to cache values within a particular range.", "history": "Added in API level 1", "FullName": "public static Long valueOf (long l)"}, "rotateLeft(long,int)": {"Returns": [["long", "the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits."]], "Parameters": [["long", "long: the value whose bits are to be rotated left"], ["int", "int: the number of bit positions to rotate left"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified long value left by the specified number of bits. (Bits shifted out of the left hand, or high-order, side reenter on the right, or low-order.) Note that left rotation with a negative distance is equivalent to right rotation: rotateLeft(val, -distance) == rotateRight(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateLeft(val, distance) == rotateLeft(val, distance & 0x3F).", "history": "Added in API level 1", "FullName": "public static long rotateLeft (long i, int distance)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the value of this object in base 10."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a String object representing this Long's value. The value is converted to signed decimal representation and returned as a string, exactly as if the long value were given as an argument to the @B_java#lang#Long#toString_E@ method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "compareUnsigned(long, long)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y as unsigned values; and a value greater than 0 if x > y as unsigned values"]], "Parameters": [["long", "long: the first long to compare"], ["long", "long: the second long to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two long values numerically treating the values as unsigned.", "history": "added in API level 26", "FullName": "public static int compareUnsigned (long x, long y)"}, "bitCount(long)": {"Returns": [["int", "the number of one-bits in the two's complement binary representation of the specified long value."]], "Parameters": [["long", "long: the value whose bits are to be counted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of one-bits in the two's complement binary representation of the specified long value. This function is sometimes referred to as the", "history": "Added in API level 1", "FullName": "public static int bitCount (long i)"}, "divideUnsigned(long,long)": {"Returns": [["long", "the unsigned quotient of the first argument divided by the second argument"]], "Parameters": [["long", "long: the value to be divided"], ["long", "long: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#remainderUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value. Note that in two's complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate addUnsigned, etc. methods are not provided.", "history": "Added in API level 26", "FullName": "public static long divideUnsigned (long dividend, long divisor)"}, "signum(long)": {"Returns": [["int", "the signum function of the specified long value."]], "Parameters": [["long", "long: the value whose signum is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the signum function of the specified long value. (The return value is -1 if the specified value is negative; 0 if the specified value is zero; and 1 if the specified value is positive.)", "history": "Added in API level 1", "FullName": "public static int signum (long i)"}, "valueOf(java.lang.String,int)": {"Returns": [["@B_java#lang#Long_E@", "a Long object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed long in the radix specified by the second argument, exactly as if the arguments were given to the @B_java#lang#Long#parseLong_E@ method. The result is a Long object that represents the long value specified by the string. In other words, this method returns a Long object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Long valueOf (String s, int radix)"}, "compare(long,long)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["long", "long: the first long to compare"], ["long", "long: the second long to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two long values numerically. The value returned is identical to what would be returned by:", "history": "Added in API level 19", "FullName": "public static int compare (long x, long y)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this Long. The result is the exclusive OR of the two halves of the primitive long value held by this Long object. That is, the hashcode is the value of the expression:", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "parseLong(java.lang.String)": {"Returns": [["long", "the long represented by the argument in decimal."]], "Parameters": [["@B_java#lang#String_E@", "String: a String containing the long representation to be parsed"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed decimal long. The characters in the string must all be decimal digits, except that the first character may be an ASCII minus sign '-' (\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting long value is returned, exactly as if the argument and the radix 10 were given as arguments to the @B_java#lang#Long#parseLong_E@ method. Note that neither the character L ('\\u004C') nor l ('\\u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code.", "history": "Added in API level 1", "FullName": "public static long parseLong (String s)"}, "shortValue()": {"Returns": [["short", "the numeric value represented by this object after conversion to type short."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as a short after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public short shortValue ()"}, "toOctalString(long)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned long value represented by the argument in octal (base 8)."]], "Parameters": [["long", "long: a long to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#parseUnsignedLong_E@", "@B_java#lang#Long#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the long argument as an unsigned integer in base 8. The unsigned long value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Long#parseUnsignedLong_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as octal digits: '\\u0030' through '\\u0037'.", "history": "Added in API level 1", "FullName": "public static String toOctalString (long i)"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as a long value.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "reverseBytes(long)": {"Returns": [["long", "the value obtained by reversing the bytes in the specified long value."]], "Parameters": [["long", "long: the value whose bytes are to be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bytes in the two's complement representation of the specified long value.", "history": "Added in API level 1", "FullName": "public static long reverseBytes (long i)"}, "toBinaryString(long)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned long value represented by the argument in binary (base 2)."]], "Parameters": [["long", "long: a long to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#parseUnsignedLong_E@", "@B_java#lang#Long#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the long argument as an unsigned integer in base 2. The unsigned long value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Long#parseUnsignedLong_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The characters '0' ('\\u0030') and '1' ('\\u0031') are used as binary digits.", "history": "Added in API level 1", "FullName": "public static String toBinaryString (long i)"}, "divideUnsigned(long, long)": {"Returns": [["long", "the unsigned quotient of the first argument divided by the second argument"]], "Parameters": [["long", "long: the value to be divided"], ["long", "long: the value doing the dividing"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#remainderUnsigned_E@"], "Permissions": [], "Description": "Returns the unsigned quotient of dividing the first argument by the second where each argument and the result is interpreted as an unsigned value. Note that in two's complement arithmetic, the three other basic arithmetic operations of add, subtract, and multiply are bit-wise identical if the two operands are regarded as both being signed or both being unsigned. Therefore separate addUnsigned, etc. methods are not provided.", "history": "added in API level 26", "FullName": "public static long divideUnsigned (long dividend, long divisor)"}, "sum(long,long)": {"Returns": [["long", "the sum of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Adds two long values together as per the + operator.", "history": "Added in API level 24", "FullName": "public static long sum (long a, long b)"}, "numberOfTrailingZeros(long)": {"Returns": [["int", "the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified long value, or 64 if the value is equal to zero."]], "Parameters": [["long", "long: the value whose number of trailing zeros is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of zero bits following the lowest-order (\"rightmost\") one-bit in the two's complement binary representation of the specified long value. Returns 64 if the specified value has no one-bits in its two's complement representation, in other words if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static int numberOfTrailingZeros (long i)"}, "Long(long)": {"Returns": [], "Parameters": [["long", "long: the value to be represented by the Long object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a newly allocated Long object that represents the specified long argument.", "history": "Added in API level 1", "FullName": "public Long (long value)"}, "toString(long,int)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the argument in the specified radix."]], "Parameters": [["long", "long: a long to be converted to a string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Character_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. If the first argument is negative, the first element of the result is the ASCII minus sign '-' ('\\u002d'). If the first argument is not negative, no sign character appears in the result. The remaining characters of the result represent the magnitude of the first argument. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The following ASCII characters are used as digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u007a'. If radix is 0123456789abcdef. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "Added in API level 1", "FullName": "public static String toString (long i, int radix)"}, "getLong(java.lang.String,long)": {"Returns": [["@B_java#lang#Long_E@", "the Long value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["long", "long: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as a long value using the grammar supported by @B_java#lang#Long#decode_E@ and a Long object representing this value is returned. The second argument is the default value. A Long object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns a Long object equal to the value of: Long object when the default value is not needed.", "history": "Added in API level 1", "FullName": "public static Long getLong (String nm, long val)"}, "parseUnsignedLong(java.lang.String,int)": {"Returns": [["long", "the unsigned long represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the unsigned integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned long in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than MAX_VALUE. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is larger than the largest unsigned long, 2", "history": "Added in API level 26", "FullName": "public static long parseUnsignedLong (String s, int radix)"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "parseUnsignedLong(java.lang.String, int)": {"Returns": [["long", "the unsigned long represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the unsigned integer representation to be parsed"], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as an unsigned long in the radix specified by the second argument. An unsigned integer maps the values usually associated with negative numbers to positive numbers larger than MAX_VALUE. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII plus sign '+' ('\\u002B'). The resulting integer value is returned. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is larger than the largest unsigned long, 2", "history": "added in API level 26", "FullName": "public static long parseUnsignedLong (String s, int radix)"}, "compare(long, long)": {"Returns": [["int", "the value 0 if x == y; a value less than 0 if x < y; and a value greater than 0 if x > y"]], "Parameters": [["long", "long: the first long to compare"], ["long", "long: the second long to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares two long values numerically. The value returned is identical to what would be returned by:", "history": "added in API level 19", "FullName": "public static int compare (long x, long y)"}, "byteValue()": {"Returns": [["byte", "the numeric value represented by this object after conversion to type byte."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as a byte after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public byte byteValue ()"}, "max(long,long)": {"Returns": [["long", "the greater of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the greater of two long values as if by calling @B_java#lang#Math#max_E@.", "history": "Added in API level 24", "FullName": "public static long max (long a, long b)"}, "getLong(java.lang.String,java.lang.Long)": {"Returns": [["@B_java#lang#Long_E@", "the Long value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["@B_java#lang#Long_E@", "Long: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Returns the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as a long value, as per the @B_java#lang#Long#decode_E@ method, and a Long object representing this value is returned; in summary: If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method @B_java#lang#Long#valueOf_E@ with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method @B_java#lang#Long#valueOf_E@ with radix 8. Otherwise the property value is parsed as a decimal integer exactly as by the method @B_java#lang#Long#valueOf_E@ with radix 10. Note that, in every case, neither L ('\\u004C') nor l ('\\u006C') is permitted to appear at the end of the property value as a type indicator, as would be permitted in Java programming language source code. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null.", "history": "Added in API level 1", "FullName": "public static Long getLong (String nm, Long val)"}, "toUnsignedString(long)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument."]], "Parameters": [["long", "long: an integer to be converted to an unsigned string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the argument as an unsigned decimal value. The argument is converted to unsigned decimal representation and returned as a string exactly as if the argument and radix 10 were given as arguments to the @B_java#lang#Long#toUnsignedString_E@ method.", "history": "Added in API level 26", "FullName": "public static String toUnsignedString (long i)"}, "getLong(java.lang.String)": {"Returns": [["@B_java#lang#Long_E@", "the Long value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as a long value using the grammar supported by @B_java#lang#Long#decode_E@ and a Long object representing this value is returned. If there is no property with the specified name, if the specified name is empty or null, or if the property does not have the correct numeric format, then null is returned. In other words, this method returns a Long object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Long getLong (String nm)"}, "min(long, long)": {"Returns": [["long", "the smaller of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two long values as if by calling @B_java#lang#Math#min_E@.", "history": "added in API level 24", "FullName": "public static long min (long a, long b)"}, "decode(java.lang.String)": {"Returns": [["@B_java#lang#Long_E@", "a Long object holding the long value represented by nm"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to decode."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the String does not contain a parsable long."]], "SeeAlso": ["@B_java#lang#Long#parseLong_E@"], "Permissions": [], "Description": "Decodes a String into a Long. Accepts decimal, hexadecimal, and octal numbers given by the following grammar: The sequence of characters following an optional sign and/or radix specifier (\"0x\", \"0X\", \"#\", or leading zero) is parsed as by the Long.parseLong method with the indicated radix (10, 16, or 8). This sequence of characters must represent a positive value or a @B_java#lang#NumberFormatException_E@ will be thrown. The result is negated if first character of the specified String is the minus sign. No whitespace characters are permitted in the String.", "history": "Added in API level 1", "FullName": "public static Long decode (String nm)"}, "rotateRight(long, int)": {"Returns": [["long", "the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits."]], "Parameters": [["long", "long: the value whose bits are to be rotated right"], ["int", "int: the number of bit positions to rotate right"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by rotating the two's complement binary representation of the specified long value right by the specified number of bits. (Bits shifted out of the right hand, or low-order, side reenter on the left, or high-order.) Note that right rotation with a negative distance is equivalent to left rotation: rotateRight(val, -distance) == rotateLeft(val, distance). Note also that rotation by any multiple of 64 is a no-op, so all but the last six bits of the rotation distance can be ignored, even if the distance is negative: rotateRight(val, distance) == rotateRight(val, distance & 0x3F).", "history": "added in API level 1", "FullName": "public static long rotateRight (long i, int distance)"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this Long as a float after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "reverse(long)": {"Returns": [["long", "the value obtained by reversing order of the bits in the specified long value."]], "Parameters": [["long", "long: the value to be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value obtained by reversing the order of the bits in the two's complement binary representation of the specified long value.", "history": "Added in API level 1", "FullName": "public static long reverse (long i)"}, "getLong(java.lang.String, java.lang.Long)": {"Returns": [["@B_java#lang#Long_E@", "the Long value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["@B_java#lang#Long_E@", "Long: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Returns the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as a long value, as per the @B_java#lang#Long#decode_E@ method, and a Long object representing this value is returned; in summary: If the property value begins with the two ASCII characters 0x or the ASCII character #, not followed by a minus sign, then the rest of it is parsed as a hexadecimal integer exactly as for the method @B_java#lang#Long#valueOf_E@ with radix 16. If the property value begins with the ASCII character 0 followed by another character, it is parsed as an octal integer exactly as by the method @B_java#lang#Long#valueOf_E@ with radix 8. Otherwise the property value is parsed as a decimal integer exactly as by the method @B_java#lang#Long#valueOf_E@ with radix 10. Note that, in every case, neither L ('\\u004C') nor l ('\\u006C') is permitted to appear at the end of the property value as a type indicator, as would be permitted in Java programming language source code. The second argument is the default value. The default value is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null.", "history": "added in API level 1", "FullName": "public static Long getLong (String nm, Long val)"}, "parseLong(java.lang.String, int)": {"Returns": [["long", "the long represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the String containing the long representation to be parsed."], ["int", "int: the radix to be used while parsing s."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the string does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the string argument as a signed long in the radix specified by the second argument. The characters in the string must all be digits of the specified radix (as determined by whether @B_java#lang#Character#digit_E@ returns a nonnegative value), except that the first character may be an ASCII minus sign '-' ('\\u002D') to indicate a negative value or an ASCII plus sign '+' ('\\u002B') to indicate a positive value. The resulting long value is returned. Note that neither the character L ('\\u004C') nor l ('\\u006C') is permitted to appear at the end of the string as a type indicator, as would be permitted in Java programming language source code - except that either L or l may appear as a digit for a radix greater than or equal to 22. An exception of type NumberFormatException is thrown if any of the following situations occurs: The first argument is null or is a string of length zero. The radix is either smaller than @B_java#lang#Character#MIN_RADIX_E@ or larger than @B_java#lang#Character#MAX_RADIX_E@. Any character of the string is not a digit of the specified radix, except that the first character may be a minus sign '-' ('\\u002d') or plus sign '+' ('\\u002B') provided that the string is longer than length 1. The value represented by the string is not a value of type long. Examples:", "history": "added in API level 1", "FullName": "public static long parseLong (String s, int radix)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#lang#Long_E@", "a Long object holding the value represented by the string argument."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the string cannot be parsed as a long."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long object holding the value of the specified String. The argument is interpreted as representing a signed decimal long, exactly as if the argument were given to the @B_java#lang#Long#parseLong_E@ method. The result is a Long object that represents the integer value specified by the string. In other words, this method returns a Long object equal to the value of:", "history": "Added in API level 1", "FullName": "public static Long valueOf (String s)"}, "getLong(java.lang.String, long)": {"Returns": [["@B_java#lang#Long_E@", "the Long value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: property name."], ["long", "long: default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "for the same reasons as @B_java#lang#System#getProperty_E@"]], "SeeAlso": ["@B_java#lang#System#getProperty_E@"], "Permissions": [], "Description": "Determines the long value of the system property with the specified name. The first argument is treated as the name of a system property. System properties are accessible through the @B_java#lang#System#getProperty_E@ method. The string value of this property is then interpreted as a long value using the grammar supported by @B_java#lang#Long#decode_E@ and a Long object representing this value is returned. The second argument is the default value. A Long object that represents the value of the second argument is returned if there is no property of the specified name, if the property does not have the correct numeric format, or if the specified name is empty or null. In other words, this method returns a Long object equal to the value of: Long object when the default value is not needed.", "history": "added in API level 1", "FullName": "public static Long getLong (String nm, long val)"}, "valueOf(java.lang.String, int)": {"Returns": [["@B_java#lang#Long_E@", "a Long object holding the value represented by the string argument in the specified radix."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["int", "int: the radix to be used in interpreting s"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the String does not contain a parsable long."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long object holding the value extracted from the specified String when parsed with the radix given by the second argument. The first argument is interpreted as representing a signed long in the radix specified by the second argument, exactly as if the arguments were given to the @B_java#lang#Long#parseLong_E@ method. The result is a Long object that represents the long value specified by the string. In other words, this method returns a Long object equal to the value of:", "history": "added in API level 1", "FullName": "public static Long valueOf (String s, int radix)"}, "lowestOneBit(long)": {"Returns": [["long", "a long value with a single one-bit, in the position of the lowest-order one-bit in the specified value, or zero if the specified value is itself equal to zero."]], "Parameters": [["long", "long: the value whose lowest one bit is to be computed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a long value with at most a single one-bit, in the position of the lowest-order (\"rightmost\") one-bit in the specified long value. Returns zero if the specified value has no one-bits in its two's complement binary representation, that is, if it is equal to zero.", "history": "Added in API level 1", "FullName": "public static long lowestOneBit (long i)"}, "min(long,long)": {"Returns": [["long", "the smaller of a and b"]], "Parameters": [["long", "long: the first operand"], ["long", "long: the second operand"]], "Throws": [], "SeeAlso": ["@B_java#util#function#BinaryOperator_E@"], "Permissions": [], "Description": "Returns the smaller of two long values as if by calling @B_java#lang#Math#min_E@.", "history": "Added in API level 24", "FullName": "public static long min (long a, long b)"}, "toHexString(long)": {"Returns": [["@B_java#lang#String_E@", "the string representation of the unsigned long value represented by the argument in hexadecimal (base 16)."]], "Parameters": [["long", "long: a long to be converted to a string."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#parseUnsignedLong_E@", "@B_java#lang#Long#toUnsignedString_E@"], "Permissions": [], "Description": "Returns a string representation of the long argument as an unsigned integer in base 16. The unsigned long value is the argument plus 20s. The value of the argument can be recovered from the returned string s by calling @B_java#lang#Long#parseUnsignedLong_E@. If the unsigned magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the unsigned magnitude will not be the zero character. The following characters are used as hexadecimal digits: '\\u0030' through '\\u0039' and '\\u0061' through '\\u0066'. If uppercase letters are desired, the @B_java#lang#String#toUpperCase_E@ method may be called on the result:", "history": "Added in API level 1", "FullName": "public static String toHexString (long i)"}, "toUnsignedString(long,int)": {"Returns": [["@B_java#lang#String_E@", "an unsigned string representation of the argument in the specified radix."]], "Parameters": [["long", "long: an integer to be converted to an unsigned string."], ["int", "int: the radix to use in the string representation."]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toString_E@"], "Permissions": [], "Description": "Returns a string representation of the first argument as an unsigned integer value in the radix specified by the second argument. If the radix is smaller than Character.MIN_RADIX or larger than Character.MAX_RADIX, then the radix 10 is used instead. Note that since the first argument is treated as an unsigned value, no leading sign character is printed. If the magnitude is zero, it is represented by a single zero character '0' ('\\u0030'); otherwise, the first character of the representation of the magnitude will not be the zero character. The behavior of radixes and the characters used as digits are the same as @B_java#lang#Long#toString_E@.", "history": "Added in API level 26", "FullName": "public static String toUnsignedString (long i, int radix)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.lang.Long", "ClassDesc": "The Long class wraps a value of the primitive type long in an object. An object of type Long contains a single field whose type is long. In addition, this class provides several methods for converting a long to a String and a String to a long, as well as other constants and methods useful when dealing with a long. Implementation note: The implementations of the \"bit twiddling\" methods (such as @B_java#lang#Long#highestOneBit_E@ and @B_java#lang#Long#numberOfTrailingZeros_E@) are based on material from Henry S. Warren, Jr.'s"}