{"Functions": {"readFully(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to read."]], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readFully method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final void readFully (byte[] b, int off, int len)"}, "readChar()": {"Returns": [["char", "the next two bytes of this input stream, interpreted as a char."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readChar method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final char readChar ()"}, "DataInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the specified input stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DataInputStream that uses the specified underlying InputStream.", "history": "Added in API level 1", "FullName": "public DataInputStream (InputStream in)"}, "skipBytes(int)": {"Returns": [["int", "the actual number of bytes skipped."]], "Parameters": [["int", "int: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if the contained input stream does not support seek, or the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "See the general contract of the skipBytes method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final int skipBytes (int n)"}, "readFully(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readFully method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final void readFully (byte[] b)"}, "readDouble()": {"Returns": [["double", "the next eight bytes of this input stream, interpreted as a double."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading eight bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#DataInputStream#readLong_E@", "@B_java#lang#Double#longBitsToDouble_E@"], "Permissions": [], "Description": "See the general contract of the readDouble method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final double readDouble ()"}, "readInt()": {"Returns": [["int", "the next four bytes of this input stream, interpreted as an int."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading four bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readInt method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final int readInt ()"}, "readShort()": {"Returns": [["short", "the next two bytes of this input stream, interpreted as a signed 16-bit number."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readShort method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final short readShort ()"}, "readUnsignedShort()": {"Returns": [["int", "the next two bytes of this input stream, interpreted as an unsigned 16-bit integer."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readUnsignedShort method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final int readUnsignedShort ()"}, "readLine()": {"Returns": [["@B_java#lang#String_E@", "the next line of text from this input stream."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#BufferedReader#readLine_E@", "@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "This method does not properly convert bytes to characters. As of JDK 1.1, the preferred way to read lines of text is via the BufferedReader.readLine() method. Programs that use the DataInputStream class to read lines can be converted to use the BufferedReader class by replacing code of the form: See the general contract of the readLine method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final String readLine ()"}, "readUTF(java.io.DataInput)": {"Returns": [["@B_java#lang#String_E@", "a Unicode string."]], "Parameters": [["@B_java#io#DataInput_E@", "DataInput: a data input stream."]], "Throws": [["@B_java#io#EOFException_E@", "if the input stream reaches the end before all the bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."], ["@B_java#io#UTFDataFormatException_E@", "if the bytes do not represent a valid modified UTF-8 encoding of a Unicode string."]], "SeeAlso": ["@B_java#io#DataInputStream#readUnsignedShort_E@"], "Permissions": [], "Description": "Reads from the stream in a representation of a Unicode character string encoded in String. The details of the modified UTF-8 representation are exactly the same as for the readUTF method of DataInput.", "history": "Added in API level 1", "FullName": "public static final String readUTF (DataInput in)"}, "read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", "if the first byte cannot be read for any reason other than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads some number of bytes from the contained input stream and stores them into the buffer array b. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If b is null, a NullPointerException is thrown. If the length of b is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[0], the next one into b[1], and so on. The number of bytes read is, at most, equal to the length of b. Let k be the number of bytes actually read; these bytes will be stored in elements b[0] through b[k-1], leaving elements b[k] through b[b.length-1] unaffected. The read(b) method has the same effect as:", "history": "Added in API level 1", "FullName": "public final int read (byte[] b)"}, "readFully(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to read."]], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readFully method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "added in API level 1", "FullName": "public final void readFully (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if the first byte cannot be read for any reason other than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from the contained input stream into an array of bytes. An attempt is made to read as many as len bytes, but a smaller number may be read, possibly zero. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[off], the next one into b[off+1], and so on. The number of bytes read is, at most, equal to len. Let b[off] through b[off+-1], leaving elements b[off+] through b[off+len-1] unaffected. In every case, elements b[0] through b[off] and elements b[off+len] through b[b.length-1] are unaffected.", "history": "added in API level 1", "FullName": "public final int read (byte[] b, int off, int len)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the stream has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if the first byte cannot be read for any reason other than end of file, the stream has been closed and the underlying input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@", "@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Reads up to len bytes of data from the contained input stream into an array of bytes. An attempt is made to read as many as len bytes, but a smaller number may be read, possibly zero. The number of bytes actually read is returned as an integer. This method blocks until input data is available, end of file is detected, or an exception is thrown. If len is zero, then no bytes are read and 0 is returned; otherwise, there is an attempt to read at least one byte. If no byte is available because the stream is at end of file, the value -1 is returned; otherwise, at least one byte is read and stored into b. The first byte read is stored into element b[off], the next one into b[off+1], and so on. The number of bytes read is, at most, equal to len. Let b[off] through b[off+-1], leaving elements b[off+] through b[off+len-1] unaffected. In every case, elements b[0] through b[off] and elements b[off+len] through b[b.length-1] are unaffected.", "history": "Added in API level 1", "FullName": "public final int read (byte[] b, int off, int len)"}, "readFloat()": {"Returns": [["float", "the next four bytes of this input stream, interpreted as a float."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading four bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#DataInputStream#readInt_E@", "@B_java#lang#Float#intBitsToFloat_E@"], "Permissions": [], "Description": "See the general contract of the readFloat method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final float readFloat ()"}, "readLong()": {"Returns": [["long", "the next eight bytes of this input stream, interpreted as a long."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading eight bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readLong method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final long readLong ()"}, "readUnsignedByte()": {"Returns": [["int", "the next byte of this input stream, interpreted as an unsigned 8-bit number."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream has reached the end."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readUnsignedByte method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final int readUnsignedByte ()"}, "readByte()": {"Returns": [["byte", "the next byte of this input stream as a signed 8-bit byte."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream has reached the end."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readByte method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final byte readByte ()"}, "readBoolean()": {"Returns": [["boolean", "the boolean value read."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream has reached the end."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."]], "SeeAlso": ["@B_java#io#FilterInputStream#in_E@"], "Permissions": [], "Description": "See the general contract of the readBoolean method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final boolean readBoolean ()"}, "readUTF()": {"Returns": [["@B_java#lang#String_E@", "a Unicode string."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this input stream reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "the stream has been closed and the contained input stream does not support reading after close, or another I/O error occurs."], ["@B_java#io#UTFDataFormatException_E@", "if the bytes do not represent a valid modified UTF-8 encoding of a string."]], "SeeAlso": ["@B_java#io#DataInputStream#readUTF_E@"], "Permissions": [], "Description": "See the general contract of the readUTF method of DataInput. Bytes for this operation are read from the contained input stream.", "history": "Added in API level 1", "FullName": "public final String readUTF ()"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FilterInputStream_E@"], "ClassName": "java.io.DataInputStream", "ClassDesc": "A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way. An application uses a data output stream to write data that can later be read by a data input stream. DataInputStream is not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class."}