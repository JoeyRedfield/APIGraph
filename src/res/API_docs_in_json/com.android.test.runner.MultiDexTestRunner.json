{"Functions": {"onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Any additional arguments that were supplied when the instrumentation was started."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the instrumentation is starting, before any application code has been loaded. Usually this will be implemented to simply call @B_android#app#Instrumentation#start_E@ to begin the instrumentation thread, which will then continue execution in @B_android#app#Instrumentation#onStart_E@. If you do not need your own thread -- that is you are writing your instrumentation to be completely asynchronous (returning to the event loop so that the application can run), you can simply begin your instrumentation here, for example call @B_android#content#Context#startActivity_E@ to begin the appropriate first activity of the application.", "history": "", "FullName": "void onCreate (Bundle arguments)"}, "MultiDexTestRunner()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "MultiDexTestRunner ()"}}, "Inheritance": ["@B_android#app#Instrumentation_E@", "@B_android#test#InstrumentationTestRunner_E@"], "ClassName": "com.android.test.runner.MultiDexTestRunner", "ClassDesc": "Use @B_android#test#InstrumentationTestRunner_E@ for testing application needing multidex support."}