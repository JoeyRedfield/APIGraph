{"Functions": {"abortConnection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "in case of an IO problem. The connection will be released anyway."]], "SeeAlso": [], "Permissions": [], "Description": "Releases the connection without the option of keep-alive. This is a \"hard\" release that implies a shutdown of the connection. Use @B_org#apache#http#conn#ConnectionReleaseTrigger#releaseConnection_E@ for a graceful release.", "history": "Added in API level 1", "FullName": "public abstract void abortConnection ()"}, "releaseConnection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "in case of an IO problem. The connection will be released anyway."]], "SeeAlso": [], "Permissions": [], "Description": "Releases the connection with the option of keep-alive. This is a \"graceful\" release and may cause IO operations for consuming the remainder of a response entity. Use @B_org#apache#http#conn#ConnectionReleaseTrigger#abortConnection_E@ for a hard release. The connection may be reused as specified by the duration.", "history": "Added in API level 1", "FullName": "public abstract void releaseConnection ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.ConnectionReleaseTrigger", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Interface for releasing a connection. This can be implemented by various \"trigger\" objects which are associated with a connection, for example a @B_org#apache#http#conn#EofSensorInputStream_E@ or an @B_org#apache#http#conn#BasicManagedEntity_E@ or the @B_org#apache#http#conn#ManagedClientConnection_E@ itself. The methods in this interface can safely be called multiple times. The first invocation releases the connection, subsequent calls are ignored."}