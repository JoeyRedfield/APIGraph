{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 26", "FullName": "public String toString ()"}, "getDisplayName(java.time.format.TextStyle,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the text value of the era, not null"]], "Parameters": [["@B_java#time#format#TextStyle_E@", "TextStyle:"], ["@B_java#util#Locale_E@", "Locale:"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the textual representation of this era. This returns the textual name used to identify the era, suitable for presentation to the user. The parameters control the style of the returned text and the locale. If no textual mapping is found then the @B_java#time#chrono#Era#getValue_E@ is returned. This default implementation is suitable for all implementations.", "history": "Added in API level 26", "FullName": "public String getDisplayName (TextStyle style, Locale locale)"}, "getValue()": {"Returns": [["int", "the era value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the numeric era int value. The @B_java#time#chrono#JapaneseEra#SHOWA_E@ era that contains 1970-01-01 (ISO calendar system) has the value 1. Later eras are numbered from 2 (@B_java#time#chrono#JapaneseEra#HEISEI_E@). Earlier eras are numbered 0 (@B_java#time#chrono#JapaneseEra#TAISHO_E@), -1 (@B_java#time#chrono#JapaneseEra#MEIJI_E@)).", "history": "Added in API level 26", "FullName": "public int getValue ()"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#chrono#JapaneseEra_E@", "the JapaneseEra singleton, never null"]], "Parameters": [["@B_java#lang#String_E@", "String: the japaneseEra name; non-null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if there is not JapaneseEra with the specified name"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the JapaneseEra with the name. The string must match exactly the name of the era. (Extraneous whitespace characters are not permitted.)", "history": "Added in API level 26", "FullName": "public static JapaneseEra valueOf (String japaneseEra)"}, "values()": {"Returns": [["@B_java#time#chrono#JapaneseEra_E@", "an array of JapaneseEras"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of JapaneseEras. This method may be used to iterate over the JapaneseEras as follows:", "history": "Added in API level 26", "FullName": "public static JapaneseEra[] values ()"}, "of(int)": {"Returns": [["@B_java#time#chrono#JapaneseEra_E@", "the JapaneseEra singleton, not null"]], "Parameters": [["int", "int: the era to represent"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of JapaneseEra from an int value. The value 1 is associated with the 'Showa' era, because it contains 1970-01-01 (ISO calendar system). The values -1 and 0 are associated with two earlier eras, Meiji and Taisho, respectively. A value greater than 1 is associated with a later era, beginning with Heisei (2). Every instance of JapaneseEra that is returned from the @B_java#time#chrono#JapaneseEra#values_E@ method has an int value (available via @B_java#time#chrono#Era#getValue_E@ which is accepted by this method.", "history": "Added in API level 26", "FullName": "public static JapaneseEra of (int japaneseEra)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This era is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The ERA field returns the range. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field. The range of valid Japanese eras can change over time due to the nature of the Japanese calendar system.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}}, "Inheritance": [], "ClassName": "java.time.chrono.JapaneseEra", "ClassDesc": "An era in the Japanese Imperial calendar system. The Japanese government defines the official name and start date of each era. Eras are consecutive and their date ranges do not overlap, so the end date of one era is always the day before the start date of the next era. The Java SE Platform supports all eras defined by the Japanese government, beginning with the Meiji era. Each era is identified in the Platform by an integer value and a name. The @B_java#time#chrono#JapaneseEra#of_E@ and @B_java#time#chrono#JapaneseEra#valueOf_E@ methods may be used to obtain a singleton instance of JapaneseEra for each era. The @B_java#time#chrono#JapaneseEra#values_E@ method returns the singleton instances of all supported eras. For convenience, this class declares a number of public static final fields that refer to singleton instances returned by the values() method."}