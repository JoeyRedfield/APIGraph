{"Functions": {"getStartY()": {"Returns": [["int", "The start Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start Y offset in the scroll.", "history": "Added in API level 9", "FullName": "public final int getStartY ()"}, "notifyVerticalEdgeReached(int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting/current Y position"], ["int", "int: Desired final Y position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalY. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the scroller that we've reached a vertical boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will animate a parabolic motion from startY to finalY.", "history": "added in API level 9", "FullName": "public void notifyVerticalEdgeReached (int startY, int finalY, int overY)"}, "OverScroller(android.content.Context,android.view.animation.Interpolator)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of this application."], ["@B_android#view#animation#Interpolator_E@", "Interpolator: The scroll interpolator. If null, a default (viscous) interpolator will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an OverScroller with flywheel enabled.", "history": "Added in API level 9", "FullName": "public OverScroller (Context context, Interpolator interpolator)"}, "notifyVerticalEdgeReached(int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting/current Y position"], ["int", "int: Desired final Y position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalY. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the scroller that we've reached a vertical boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will animate a parabolic motion from startY to finalY.", "history": "Added in API level 9", "FullName": "public void notifyVerticalEdgeReached (int startY, int finalY, int overY)"}, "computeScrollOffset()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when you want to know the new location. If it returns true, the animation is not yet finished.", "history": "Added in API level 9", "FullName": "public boolean computeScrollOffset ()"}, "getFinalY()": {"Returns": [["int", "The final Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "history": "Added in API level 9", "FullName": "public final int getFinalY ()"}, "getCurrX()": {"Returns": [["int", "The new X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current X offset in the scroll.", "history": "Added in API level 9", "FullName": "public final int getCurrX ()"}, "startScroll(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."], ["int", "int: Duration of the scroll in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel.", "history": "added in API level 9", "FullName": "public void startScroll (int startX, int startY, int dx, int dy, int duration)"}, "notifyHorizontalEdgeReached(int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting/current X position"], ["int", "int: Desired final X position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalX. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the scroller that we've reached a horizontal boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will transition the current motion and animate from startX to finalX as appropriate.", "history": "Added in API level 9", "FullName": "public void notifyHorizontalEdgeReached (int startX, int finalX, int overX)"}, "OverScroller(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an OverScroller with a viscous fluid scroll interpolator and flywheel.", "history": "Added in API level 9", "FullName": "public OverScroller (Context context)"}, "isOverScrolled()": {"Returns": [["boolean", "true when the current position is overscrolled and in the process of interpolating back to a valid value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the current Scroller is currently returning to a valid position. Valid bounds were provided by the @B_android#widget#OverScroller#fling_E@ method. One should check this value before calling @B_android#widget#OverScroller#startScroll_E@ as the interpolation currently in progress to restore a valid position will then be stopped. The caller has to take into account the fact that the started scroll will start from an overscrolled position.", "history": "Added in API level 9", "FullName": "public boolean isOverScrolled ()"}, "fling(int,int,int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting point of the scroll (X)"], ["int", "int: Starting point of the scroll (Y)"], ["int", "int: Initial velocity of the fling (X) measured in pixels per second."], ["int", "int: Initial velocity of the fling (Y) measured in pixels per second"], ["int", "int: Minimum X value. The scroller will not scroll past this point unless overX > 0. If overfling is allowed, it will use minX as a springback boundary."], ["int", "int: Maximum X value. The scroller will not scroll past this point unless overX > 0. If overfling is allowed, it will use maxX as a springback boundary."], ["int", "int: Minimum Y value. The scroller will not scroll past this point unless overY > 0. If overfling is allowed, it will use minY as a springback boundary."], ["int", "int: Maximum Y value. The scroller will not scroll past this point unless overY > 0. If overfling is allowed, it will use maxY as a springback boundary."], ["int", "int: Overfling range. If > 0, horizontal overfling in either direction will be possible."], ["int", "int: Overfling range. If > 0, vertical overfling in either direction will be possible."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling based on a fling gesture. The distance traveled will depend on the initial velocity of the fling.", "history": "Added in API level 9", "FullName": "public void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY)"}, "startScroll(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.", "history": "added in API level 9", "FullName": "public void startScroll (int startX, int startY, int dx, int dy)"}, "setFriction(float)": {"Returns": [], "Parameters": [["float", "float: A scalar dimension-less value representing the coefficient of friction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of friction applied to flings. The default value is @B_android#view#ViewConfiguration#getScrollFriction_E@.", "history": "Added in API level 11", "FullName": "public final void setFriction (float friction)"}, "startScroll(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."], ["int", "int: Duration of the scroll in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel.", "history": "Added in API level 9", "FullName": "public void startScroll (int startX, int startY, int dx, int dy, int duration)"}, "abortAnimation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#OverScroller#forceFinished_E@"], "Permissions": [], "Description": "Stops the animation. Contrary to @B_android#widget#OverScroller#forceFinished_E@, aborting the animating causes the scroller to move to the final x and y positions.", "history": "Added in API level 9", "FullName": "public void abortAnimation ()"}, "getCurrY()": {"Returns": [["int", "The new Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current Y offset in the scroll.", "history": "Added in API level 9", "FullName": "public final int getCurrY ()"}, "getFinalX()": {"Returns": [["int", "The final X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "history": "Added in API level 9", "FullName": "public final int getFinalX ()"}, "forceFinished(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The new finished value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force the finished field to a particular value. Contrary to @B_android#widget#OverScroller#abortAnimation_E@, forcing the animation to finished does NOT cause the scroller to move to the final x and y position.", "history": "Added in API level 9", "FullName": "public final void forceFinished (boolean finished)"}, "springBack(int,int,int,int,int,int)": {"Returns": [["boolean", "true if a springback was initiated, false if startX and startY were already within the valid range."]], "Parameters": [["int", "int: Starting X coordinate"], ["int", "int: Starting Y coordinate"], ["int", "int: Minimum valid X value"], ["int", "int: Maximum valid X value"], ["int", "int: Minimum valid Y value"], ["int", "int: Minimum valid Y value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when you want to 'spring back' into a valid coordinate range.", "history": "Added in API level 9", "FullName": "public boolean springBack (int startX, int startY, int minX, int maxX, int minY, int maxY)"}, "startScroll(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.", "history": "Added in API level 9", "FullName": "public void startScroll (int startX, int startY, int dx, int dy)"}, "fling(int, int, int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 9", "FullName": "public void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)"}, "springBack(int, int, int, int, int, int)": {"Returns": [["boolean", "true if a springback was initiated, false if startX and startY were already within the valid range."]], "Parameters": [["int", "int: Starting X coordinate"], ["int", "int: Starting Y coordinate"], ["int", "int: Minimum valid X value"], ["int", "int: Maximum valid X value"], ["int", "int: Minimum valid Y value"], ["int", "int: Minimum valid Y value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when you want to 'spring back' into a valid coordinate range.", "history": "added in API level 9", "FullName": "public boolean springBack (int startX, int startY, int minX, int maxX, int minY, int maxY)"}, "getCurrVelocity()": {"Returns": [["float", "The original velocity less the deceleration, norm of the X and Y velocity vector."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the absolute value of the current velocity.", "history": "Added in API level 14", "FullName": "public float getCurrVelocity ()"}, "notifyHorizontalEdgeReached(int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting/current X position"], ["int", "int: Desired final X position"], ["int", "int: Magnitude of overscroll allowed. This should be the maximum desired distance from finalX. Absolute value - must be positive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify the scroller that we've reached a horizontal boundary. Normally the information to handle this will already be known when the animation is started, such as in a call to one of the fling functions. However there are cases where this cannot be known in advance. This function will transition the current motion and animate from startX to finalX as appropriate.", "history": "added in API level 9", "FullName": "public void notifyHorizontalEdgeReached (int startX, int finalX, int overX)"}, "isFinished()": {"Returns": [["boolean", "True if the scroller has finished scrolling, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the scroller has finished scrolling.", "history": "Added in API level 9", "FullName": "public final boolean isFinished ()"}, "fling(int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)"}, "OverScroller(android.content.Context,android.view.animation.Interpolator,float,float)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of this application."], ["@B_android#view#animation#Interpolator_E@", "Interpolator: The scroll interpolator. If null, a default (viscous) interpolator will be used."], ["float", "float: A value between 0 and 1 that will determine the proportion of the velocity which is preserved in the bounce when the horizontal edge is reached. A null value means no bounce. This behavior is no longer supported and this coefficient has no effect."], ["float", "float: Same as bounceCoefficientX but for the vertical direction. This behavior is no longer supported and this coefficient has no effect."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#OverScroller_E@ instead. Creates an OverScroller with flywheel enabled.", "history": "Added in API level 9", "FullName": "public OverScroller (Context context, Interpolator interpolator, float bounceCoefficientX, float bounceCoefficientY)"}, "getStartX()": {"Returns": [["int", "The start X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start X offset in the scroll.", "history": "Added in API level 9", "FullName": "public final int getStartX ()"}, "OverScroller(android.content.Context,android.view.animation.Interpolator,float,float,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of this application."], ["@B_android#view#animation#Interpolator_E@", "Interpolator: The scroll interpolator. If null, a default (viscous) interpolator will be used."], ["float", "float: A value between 0 and 1 that will determine the proportion of the velocity which is preserved in the bounce when the horizontal edge is reached. A null value means no bounce. This behavior is no longer supported and this coefficient has no effect."], ["float", "float: Same as bounceCoefficientX but for the vertical direction. This behavior is no longer supported and this coefficient has no effect."], ["boolean", "boolean: If true, successive fling motions will keep on increasing scroll speed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#OverScroller#OverScroller_E@ instead. Creates an OverScroller.", "history": "Added in API level 11", "FullName": "public OverScroller (Context context, Interpolator interpolator, float bounceCoefficientX, float bounceCoefficientY, boolean flywheel)"}}, "Inheritance": [], "ClassName": "android.widget.OverScroller", "ClassDesc": "This class encapsulates scrolling with the ability to overshoot the bounds of a scrolling operation. This class is a drop-in replacement for @B_android#widget#Scroller_E@ in most cases."}