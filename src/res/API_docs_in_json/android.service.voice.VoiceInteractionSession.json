{"Functions": {"show(android.os.Bundle,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary arguments that will be propagated @B_android#service#voice#VoiceInteractionSession#onShow_E@."], ["int", "int: Indicates additional optional behavior that should be performed. May be any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@ to request that the system generate and deliver assist data on the current foreground app as part of showing the session UI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the UI for this session. This asks the system to go through the process of showing your UI, which will eventually culminate in @B_android#service#voice#VoiceInteractionSession#onShow_E@. This is similar to calling @B_android#service#voice#VoiceInteractionService#showSession_E@.", "history": "Added in API level 23", "FullName": "public void show (Bundle args, int flags)"}, "onDirectActionsInvalidated(android.service.voice.VoiceInteractionSession.ActivityId)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#ActivityId_E@", "VoiceInteractionSession.ActivityId: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the direct actions are invalidated.", "history": "Added in API level 29", "FullName": "public void onDirectActionsInvalidated (VoiceInteractionSession.ActivityId activityId)"}, "setUiEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the UI layer for this session is enabled. It is enabled by default. If set to false, you will not be able to provide a UI through @B_android#service#voice#VoiceInteractionSession#onCreateContentView_E@.", "history": "Added in API level 26", "FullName": "public void setUiEnabled (boolean enabled)"}, "getDisabledShowContext()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_android#service#voice#VoiceInteractionService#getDisabledShowContext_E@.", "history": "Added in API level 23", "FullName": "public int getDisabledShowContext ()"}, "onCancelRequest(android.service.voice.VoiceInteractionSession.Request)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#Request_E@", "VoiceInteractionSession.Request: The request that is being canceled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the @B_android#app#VoiceInteractor_E@ has asked to cancel a @B_android#service#voice#VoiceInteractionSession#Request_E@ that was previously delivered to @B_android#service#voice#VoiceInteractionSession#onRequestConfirmation_E@, @B_android#service#voice#VoiceInteractionSession#onRequestPickOption_E@, @B_android#service#voice#VoiceInteractionSession#onRequestCompleteVoice_E@, @B_android#service#voice#VoiceInteractionSession#onRequestAbortVoice_E@, or @B_android#service#voice#VoiceInteractionSession#onRequestCommand_E@.", "history": "Added in API level 23", "FullName": "public void onCancelRequest (VoiceInteractionSession.Request request)"}, "onHandleScreenshot(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to receive a screenshot of what the user was currently viewing when an assist session is started. May be null if screenshots are disabled by the user, policy, or application. If the original show request did not specify @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@, this method will not be called.", "history": "Added in API level 23", "FullName": "public void onHandleScreenshot (Bitmap screenshot)"}, "onShow(android.os.Bundle,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The arguments that were supplied to @B_android#service#voice#VoiceInteractionService#showSession_E@."], ["int", "int: The show flags originally provided to @B_android#service#voice#VoiceInteractionService#showSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the session UI is going to be shown. This is called after @B_android#service#voice#VoiceInteractionSession#onCreateContentView_E@ (if the session's content UI needed to be created) and immediately prior to the window being shown. This may be called while the window is already shown, if a show request has come in while it is shown, to allow you to update the UI to match the new show arguments.", "history": "Added in API level 23", "FullName": "public void onShow (Bundle args, int showFlags)"}, "onPrepareShow(android.os.Bundle,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The arguments that were supplied to @B_android#service#voice#VoiceInteractionService#showSession_E@."], ["int", "int: The show flags originally provided to @B_android#service#voice#VoiceInteractionService#showSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called prior to @B_android#service#voice#VoiceInteractionSession#onShow_E@ before any UI setup has occurred. Not generally useful.", "history": "Added in API level 26", "FullName": "public void onPrepareShow (Bundle args, int showFlags)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new device configuration. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read", "history": "Added in API level 23", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "onLockscreenShown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the lockscreen was shown.", "history": "Added in API level 23", "FullName": "public void onLockscreenShown ()"}, "onRequestCompleteVoice(android.service.voice.VoiceInteractionSession.CompleteVoiceRequest)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#CompleteVoiceRequest_E@", "VoiceInteractionSession.CompleteVoiceRequest: The active request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to complete the voice interaction session because the voice activity successfully completed its interaction using voice. Corresponds to @B_android#app#VoiceInteractor#CompleteVoiceRequest_E@. The default implementation just sends an empty confirmation back to allow the activity to exit.", "history": "Added in API level 23", "FullName": "public void onRequestCompleteVoice (VoiceInteractionSession.CompleteVoiceRequest request)"}, "onBackPressed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user presses the back button while focus is in the session UI. Note that this will only happen if the session UI has requested input focus in its window; otherwise, the back key will go to whatever window has focus and do whatever behavior it normally has there. The default implementation simply calls @B_android#service#voice#VoiceInteractionSession#hide_E@.", "history": "Added in API level 23", "FullName": "public void onBackPressed ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "The arguments that were supplied to @B_android#service#voice#VoiceInteractionService#startSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiatize a new session.", "history": "Added in API level 21", "FullName": "public void onCreate (Bundle args)"}, "onComputeInsets(android.service.voice.VoiceInteractionSession.Insets)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#Insets_E@", "VoiceInteractionSession.Insets: Fill in with the current UI insets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the interesting insets into your UI. The default implementation sets @B_android#service#voice#VoiceInteractionSession#Insets#contentInsets_E@ to the height of the window, meaning it should not adjust content underneath. The default touchable insets are @B_android#service#voice#VoiceInteractionSession#Insets#TOUCHABLE_INSETS_FRAME_E@, meaning it consumes all touch events within its window frame.", "history": "Added in API level 23", "FullName": "public void onComputeInsets (VoiceInteractionSession.Insets outInsets)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public Context getContext ()"}, "startAssistantActivity(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask that a new assistant activity be started. This will create a new task in the in activity manager: this means that @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@ will be set for you to make it a new task. The newly started activity will be displayed on top of other activities in the system in a new layer that is not affected by multi-window mode. Tasks started from this activity will go into the normal activity layer and not this new layer. By default, the system will create a window for the UI for this session. If you are using an assistant activity instead, then you can disable the window creation by calling @B_android#service#voice#VoiceInteractionSession#setUiEnabled_E@ in @B_android#service#voice#VoiceInteractionSession#onPrepareShow_E@.", "history": "Added in API level 26", "FullName": "public void startAssistantActivity (Intent intent)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key down event has occurred. If you return true, you can first call @B_android#view#KeyEvent#startTracking_E@ to have the framework track the event through its @B_android#view#KeyEvent#Callback#onKeyUp_E@ and also call your @B_android#view#KeyEvent#Callback#onKeyLongPress_E@ if it occurs.", "history": "added in API level 21", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: Number of pairs as returned by event.getRepeatCount()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession.", "history": "added in API level 21", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "setDisabledShowContext(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_android#service#voice#VoiceInteractionService#setDisabledShowContext_E@.", "history": "Added in API level 23", "FullName": "public void setDisabledShowContext (int flags)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: Number of pairs as returned by event.getRepeatCount()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a user's interaction with an analog control, such as flinging a trackball, generates simulated down/up events for the same key multiple times in quick succession.", "history": "Added in API level 21", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "onCreateContentView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook in which to create the session's UI.", "history": "Added in API level 23", "FullName": "public View onCreateContentView ()"}, "onHandleAssistSecondary(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent,int,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary data supplied by the app through @B_android#app#Activity#onProvideAssistData_E@. May be null if assist data has been disabled by the user or device policy. This value may be null."], ["@B_android#app#assist#AssistStructure_E@", "AssistStructure: If available, the structure definition of all windows currently displayed by the app. May be null if assist data has been disabled by the user or device policy; will be an empty stub if the application has disabled assist by marking its window as secure. This value may be null."], ["@B_android#app#assist#AssistContent_E@", "AssistContent: Additional content data supplied by the app through @B_android#app#Activity#onProvideAssistContent_E@. May be null if assist data has been disabled by the user or device policy; will not be automatically filled in with data from the app if the app has marked its window as secure. This value may be null."], ["int", "int: the index of the additional activity that this data is for."], ["int", "int: the total number of additional activities for which the assist data is being returned, including the focused activity that is returned via @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@ Called to receive data from other applications that the user was or is interacting with, that are currently on the screen in a multi-window display environment, not including the currently focused activity. This could be a free-form window, a picture-in-picture window, or another window in a split-screen display. This method is very similar to @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@ except that it is called for additional non-focused activities along with an index and count that indicates which additional activity the data is for. index will be between 1 and count-1 and this method is called once for each additional window, in no particular order. The count indicates how many windows to expect assist data for, including the top focused activity, which continues to be returned via @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@. To be responsive to assist requests, process assist data as soon as it is received, without waiting for all queued activities to return assist data.", "history": "Added in API level 24 Deprecated in API level 29", "FullName": "public void onHandleAssistSecondary (Bundle data, AssistStructure structure, AssistContent content, int index, int count)"}, "onHandleAssist(android.service.voice.VoiceInteractionSession.AssistState)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#AssistState_E@", "VoiceInteractionSession.AssistState: The state object capturing the state of an activity. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to receive data from the application that the user was currently viewing when an assist session is started. If the original show request did not specify @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@, this method will not be called. This method is called for all activities along with an index and count that indicates which activity the data is for. index will be between 0 and count-1 and this method is called once for each activity in no particular order. The count indicates how many activities to expect assist data for, including the top focused one. The focused activity can be determined by calling @B_android#service#voice#VoiceInteractionSession#AssistState#isFocused_E@. To be responsive to assist requests, process assist data as soon as it is received, without waiting for all queued activities to return assist data.", "history": "Added in API level 29", "FullName": "public void onHandleAssist (VoiceInteractionSession.AssistState state)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key down event has occurred. If you return true, you can first call @B_android#view#KeyEvent#startTracking_E@ to have the framework track the event through its @B_android#view#KeyEvent#Callback#onKeyUp_E@ and also call your @B_android#view#KeyEvent#Callback#onKeyLongPress_E@ if it occurs.", "history": "Added in API level 21", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "closeSystemDialogs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that all system dialogs (and status bar shade etc) be closed, allowing access to the session's UI. This will not cause the lock screen to be dismissed.", "history": "Added in API level 23", "FullName": "public void closeSystemDialogs ()"}, "onTaskStarted(android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The original @B_android#content#Intent_E@ supplied to @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@."], ["int", "int: Unique ID of the now running task."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a task initiated by @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@ has actually started.", "history": "Added in API level 23", "FullName": "public void onTaskStarted (Intent intent, int taskId)"}, "onTaskFinished(android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The original @B_android#content#Intent_E@ supplied to @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@."], ["int", "int: Unique ID of the finished task."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the last activity of a task initiated by @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@ has finished. The default implementation calls @B_android#service#voice#VoiceInteractionSession#finish_E@ on the assumption that this represents the completion of a voice action. You can override the implementation if you would like a different behavior.", "history": "Added in API level 23", "FullName": "public void onTaskFinished (Intent intent, int taskId)"}, "onHide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called immediately after stopping to show the session UI.", "history": "Added in API level 23", "FullName": "public void onHide ()"}, "performDirectAction(android.app.DirectAction,android.os.Bundle,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<android.os.Bundle>)": {"Returns": [], "Parameters": [["@B_android#app#DirectAction_E@", "DirectAction: The action to be performed. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Any optional extras sent to the app as part of the request This value may be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. This value may be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The handler to receive the callback. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_java#util#function#Consumer_E@", "Consumer: The callback to receive the response. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#service#voice#VoiceInteractionSession#requestDirectActions_E@", "@B_android#app#Activity#onGetDirectActions_E@"], "Permissions": [], "Description": "Asks that an action be performed by the app. This will send a request to the app which provided this action. An action could take time to execute and the result is provided asynchronously via a callback. If the action is taking longer and you want to cancel its execution you can pass in a cancellation signal through which to notify the app to abort the action.", "history": "Added in API level 29", "FullName": "public final void performDirectAction (DirectAction action, Bundle extras, CancellationSignal cancellationSignal, Executor resultExecutor, Consumer<Bundle> resultListener)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initiatize a new session. At this point you don't know exactly what this session will be used for; you will find that out in @B_android#service#voice#VoiceInteractionSession#onShow_E@.", "history": "Added in API level 23", "FullName": "public void onCreate ()"}, "setTheme(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "You can call this to customize the theme used by your IME's window. This must be set before @B_android#service#voice#VoiceInteractionSession#onCreate_E@, so you will typically call it in your constructor with the resource ID of your custom theme.", "history": "Added in API level 23", "FullName": "public void setTheme (int theme)"}, "requestDirectActions(android.service.voice.VoiceInteractionSession.ActivityId,android.os.CancellationSignal,java.util.concurrent.Executor,java.util.function.Consumer<java.util.List<android.app.DirectAction>>)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#ActivityId_E@", "VoiceInteractionSession.ActivityId: Ths activity id of the app to get the actions from. This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. This value may be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The handler to receive the callback This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_java#util#function#Consumer_E@", "Consumer: The callback to receive the response This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests a list of supported actions from an app.", "history": "Added in API level 29", "FullName": "public final void requestDirectActions (VoiceInteractionSession.ActivityId activityId, CancellationSignal cancellationSignal, Executor resultExecutor, Consumer<List<DirectAction>> callback)"}, "getLayoutInflater()": {"Returns": [["@B_android#view#LayoutInflater_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for inflating views.", "history": "Added in API level 23", "FullName": "public LayoutInflater getLayoutInflater ()"}, "onHandleAssist(android.os.Bundle,android.app.assist.AssistStructure,android.app.assist.AssistContent)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary data supplied by the app through @B_android#app#Activity#onProvideAssistData_E@. May be null if assist data has been disabled by the user or device policy. This value may be null."], ["@B_android#app#assist#AssistStructure_E@", "AssistStructure: If available, the structure definition of all windows currently displayed by the app. May be null if assist data has been disabled by the user or device policy; will be an empty stub if the application has disabled assist by marking its window as secure. This value may be null."], ["@B_android#app#assist#AssistContent_E@", "AssistContent: Additional content data supplied by the app through @B_android#app#Activity#onProvideAssistContent_E@. May be null if assist data has been disabled by the user or device policy; will not be automatically filled in with data from the app if the app has marked its window as secure. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@ Called to receive data from the application that the user was currently viewing when an assist session is started. If the original show request did not specify @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@, this method will not be called.", "history": "Added in API level 23 Deprecated in API level 29", "FullName": "public void onHandleAssist (Bundle data, AssistStructure structure, AssistContent content)"}, "onCloseSystemDialogs()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sessions automatically watch for requests that all system UI be closed (such as when the user presses HOME), which will appear here. The default implementation always calls @B_android#service#voice#VoiceInteractionSession#hide_E@.", "history": "Added in API level 21", "FullName": "public void onCloseSystemDialogs ()"}, "onTrimMemory(int)": {"Returns": [], "Parameters": [["int", "int: The context of the trim, giving a hint of the amount of trimming the application may like to perform. Value is @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_MODERATE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_BACKGROUND_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_UI_HIDDEN_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_CRITICAL_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_LOW_E@, or @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_MODERATE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level, since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point, you can use @B_android#app#ActivityManager#getMyMemoryState_E@.", "history": "Added in API level 23", "FullName": "public void onTrimMemory (int level)"}, "onTaskFinished(android.content.Intent, int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The original @B_android#content#Intent_E@ supplied to @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@."], ["int", "int: Unique ID of the finished task."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the last activity of a task initiated by @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@ has finished. The default implementation calls @B_android#service#voice#VoiceInteractionSession#finish_E@ on the assumption that this represents the completion of a voice action. You can override the implementation if you would like a different behavior.", "history": "added in API level 23", "FullName": "public void onTaskFinished (Intent intent, int taskId)"}, "onAssistStructureFailure(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: The failure exception that was thrown when building the @B_android#app#assist#AssistStructure_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when there has been a failure transferring the @B_android#app#assist#AssistStructure_E@ to the assistant. This may happen, for example, if the data is too large and results in an out of memory exception, or the client has provided corrupt data. This will be called immediately before @B_android#service#voice#VoiceInteractionSession#onHandleAssist_E@ and the AssistStructure supplied there afterwards will be null.", "history": "Added in API level 23", "FullName": "public void onAssistStructureFailure (Throwable failure)"}, "onShow(android.os.Bundle, int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The arguments that were supplied to @B_android#service#voice#VoiceInteractionService#showSession_E@."], ["int", "int: The show flags originally provided to @B_android#service#voice#VoiceInteractionService#showSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the session UI is going to be shown. This is called after @B_android#service#voice#VoiceInteractionSession#onCreateContentView_E@ (if the session's content UI needed to be created) and immediately prior to the window being shown. This may be called while the window is already shown, if a show request has come in while it is shown, to allow you to update the UI to match the new show arguments.", "history": "added in API level 23", "FullName": "public void onShow (Bundle args, int showFlags)"}, "getUserDisabledShowContext()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return which show context flags have been disabled by the user through the system settings UI, so the session will never get this data. Returned flags are any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@. Note that this only tells you about global user settings, not about restrictions that may be applied contextual based on the current application the user is in or other transient states.", "history": "Added in API level 23", "FullName": "public int getUserDisabledShowContext ()"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Service's state into the given stream. This gets invoked by @B_android#service#voice#VoiceInteractionSessionService_E@ when its Service @B_android#app#Service#dump_E@ method is called.", "history": "Added in API level 23", "FullName": "public void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "onRequestConfirmation(android.service.voice.VoiceInteractionSession.ConfirmationRequest)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#ConfirmationRequest_E@", "VoiceInteractionSession.ConfirmationRequest: The active request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to confirm with the user before proceeding with an unrecoverable operation, corresponding to a @B_android#app#VoiceInteractor#ConfirmationRequest_E@.", "history": "Added in API level 23", "FullName": "public void onRequestConfirmation (VoiceInteractionSession.ConfirmationRequest request)"}, "onRequestAbortVoice(android.service.voice.VoiceInteractionSession.AbortVoiceRequest)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#AbortVoiceRequest_E@", "VoiceInteractionSession.AbortVoiceRequest: The active request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to abort the voice interaction session because the voice activity can not complete its interaction using voice. Corresponds to @B_android#app#VoiceInteractor#AbortVoiceRequest_E@. The default implementation just sends an empty confirmation back to allow the activity to exit.", "history": "Added in API level 23", "FullName": "public void onRequestAbortVoice (VoiceInteractionSession.AbortVoiceRequest request)"}, "onPrepareShow(android.os.Bundle, int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The arguments that were supplied to @B_android#service#voice#VoiceInteractionService#showSession_E@."], ["int", "int: The show flags originally provided to @B_android#service#voice#VoiceInteractionService#showSession_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called prior to @B_android#service#voice#VoiceInteractionSession#onShow_E@ before any UI setup has occurred. Not generally useful.", "history": "added in API level 26", "FullName": "public void onPrepareShow (Bundle args, int showFlags)"}, "getWindow()": {"Returns": [["@B_android#app#Dialog_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the window being used to show the session's UI.", "history": "Added in API level 23", "FullName": "public Dialog getWindow ()"}, "VoiceInteractionSession(android.content.Context,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#os#Handler_E@", "Handler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public VoiceInteractionSession (Context context, Handler handler)"}, "show(android.os.Bundle, int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Arbitrary arguments that will be propagated @B_android#service#voice#VoiceInteractionSession#onShow_E@."], ["int", "int: Indicates additional optional behavior that should be performed. May be any combination of @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_ASSIST_E@ and @B_android#service#voice#VoiceInteractionSession#SHOW_WITH_SCREENSHOT_E@ to request that the system generate and deliver assist data on the current foreground app as part of showing the session UI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the UI for this session. This asks the system to go through the process of showing your UI, which will eventually culminate in @B_android#service#voice#VoiceInteractionSession#onShow_E@. This is similar to calling @B_android#service#voice#VoiceInteractionService#showSession_E@.", "history": "added in API level 23", "FullName": "public void show (Bundle args, int flags)"}, "startVoiceActivity(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent to start this voice interaction. The given Intent will always have @B_android#content#Intent#CATEGORY_VOICE_E@ added to it, since this is part of a voice interaction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask that a new activity be started for voice interaction. This will create a new dedicated task in the activity manager for this voice interaction session; this means that @B_android#content#Intent#FLAG_ACTIVITY_NEW_TASK_E@ will be set for you to make it a new task. The newly started activity will be displayed to the user in a special way, as a layer under the voice interaction UI. As the voice activity runs, it can retrieve a @B_android#app#VoiceInteractor_E@ through which it can perform voice interactions through your session. These requests for voice interactions will appear as callbacks on @B_android#service#voice#VoiceInteractionSession#onGetSupportedCommands_E@, @B_android#service#voice#VoiceInteractionSession#onRequestConfirmation_E@, @B_android#service#voice#VoiceInteractionSession#onRequestPickOption_E@, @B_android#service#voice#VoiceInteractionSession#onRequestCompleteVoice_E@, @B_android#service#voice#VoiceInteractionSession#onRequestAbortVoice_E@, or @B_android#service#voice#VoiceInteractionSession#onRequestCommand_E@ You will receive a call to @B_android#service#voice#VoiceInteractionSession#onTaskStarted_E@ when the task starts up and @B_android#service#voice#VoiceInteractionSession#onTaskFinished_E@ when the last activity has finished.", "history": "Added in API level 23", "FullName": "public void startVoiceActivity (Intent intent)"}, "finish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finish the session. This completely destroys the session -- the next time it is shown, an entirely new one will be created. You do not normally call this function; instead, use @B_android#service#voice#VoiceInteractionSession#hide_E@ and allow the system to destroy your session if it needs its RAM.", "history": "Added in API level 21", "FullName": "public void finish ()"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key up event has occurred.", "history": "added in API level 21", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Last callback to the session as it is being finished.", "history": "Added in API level 21", "FullName": "public void onDestroy ()"}, "hide()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hide the session's UI, if currently shown. Call this when you are done with your user interaction.", "history": "Added in API level 23", "FullName": "public void hide ()"}, "onKeyLongPress(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a long press has occurred. If you return true, the final key up will have @B_android#view#KeyEvent#FLAG_CANCELED_E@ and @B_android#view#KeyEvent#FLAG_CANCELED_LONG_PRESS_E@ set. Note that in order to receive this callback, someone in the event change must return true from @B_android#view#KeyEvent#Callback#onKeyDown_E@ and call @B_android#view#KeyEvent#startTracking_E@ on the event.", "history": "Added in API level 21", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public void setContentView (View view)"}, "VoiceInteractionSession(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public VoiceInteractionSession (Context context)"}, "setKeepAwake(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this session will keep the device awake while it is running a voice activity. By default, the system holds a wake lock for it while in this state, so that it can work even if the screen is off. Setting this to false removes that wake lock, allowing the CPU to go to sleep. This is typically used if the session decides it has been waiting too long for a response from the user and doesn't want to let this continue to drain the battery. Passing false here will release the wake lock, and you can call later with true to re-acquire it. It will also be automatically re-acquired for you each time you start a new voice activity task -- that is when you call @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@.", "history": "Added in API level 23", "FullName": "public void setKeepAwake (boolean keepAwake)"}, "onTaskStarted(android.content.Intent, int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The original @B_android#content#Intent_E@ supplied to @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@."], ["int", "int: Unique ID of the now running task."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a task initiated by @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@ has actually started.", "history": "added in API level 23", "FullName": "public void onTaskStarted (Intent intent, int taskId)"}, "onGetSupportedCommands(java.lang.String[])": {"Returns": [["boolean[]", "Return an array of booleans indicating which of each entry in the command array is supported. A true entry in the array indicates the command is supported; false indicates it is not. The default implementation returns an array of all false entries."]], "Parameters": [["@B_java#lang#String_E@", "String: An array of commands that are being queried."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to query for what extended commands the session supports.", "history": "Added in API level 23", "FullName": "public boolean[] onGetSupportedCommands (String[] commands)"}, "onRequestPickOption(android.service.voice.VoiceInteractionSession.PickOptionRequest)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#PickOptionRequest_E@", "VoiceInteractionSession.PickOptionRequest: The active request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request for the user to pick one of N options, corresponding to a @B_android#app#VoiceInteractor#PickOptionRequest_E@.", "history": "Added in API level 23", "FullName": "public void onRequestPickOption (VoiceInteractionSession.PickOptionRequest request)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key up event has occurred.", "history": "Added in API level 21", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onRequestCommand(android.service.voice.VoiceInteractionSession.CommandRequest)": {"Returns": [], "Parameters": [["@B_android#service#voice#VoiceInteractionSession#CommandRequest_E@", "VoiceInteractionSession.CommandRequest: The active request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process an arbitrary extended command from the caller, corresponding to a @B_android#app#VoiceInteractor#CommandRequest_E@.", "history": "Added in API level 23", "FullName": "public void onRequestCommand (VoiceInteractionSession.CommandRequest request)"}, "onKeyLongPress(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a long press has occurred. If you return true, the final key up will have @B_android#view#KeyEvent#FLAG_CANCELED_E@ and @B_android#view#KeyEvent#FLAG_CANCELED_LONG_PRESS_E@ set. Note that in order to receive this callback, someone in the event change must return true from @B_android#view#KeyEvent#Callback#onKeyDown_E@ and call @B_android#view#KeyEvent#startTracking_E@ on the event.", "history": "added in API level 21", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined, generally it will happen when all background process have been killed. That is, before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably, you should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ from @B_android#content#ComponentCallbacks2_E@ to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher, so you should only use this @B_android#content#ComponentCallbacks#onLowMemory_E@ method as a fallback for older versions, which can be treated the same as @B_android#content#ComponentCallbacks2#onTrimMemory_E@ with the @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@ level.", "history": "Added in API level 23", "FullName": "public void onLowMemory ()"}}, "Inheritance": [], "ClassName": "android.service.voice.VoiceInteractionSession", "ClassDesc": "An active voice interaction session, providing a facility for the implementation to interact with the user in the voice interaction layer. The user interface is initially shown by default, and can be created be overriding @B_android#service#voice#VoiceInteractionSession#onCreateContentView_E@ in which the UI can be built. A voice interaction session can be self-contained, ultimately calling @B_android#service#voice#VoiceInteractionSession#finish_E@ when done. It can also initiate voice interactions with applications by calling @B_android#service#voice#VoiceInteractionSession#startVoiceActivity_E@."}