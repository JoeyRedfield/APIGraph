{"Functions": {"hasCookies()": {"Returns": [["boolean", "true if there are stored cookies"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether there are stored cookies.", "history": "Added in API level 1", "FullName": "public abstract boolean hasCookies ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures all cookies currently accessible through the getCookie API are written to persistent storage. This call will block the caller until it is done and may perform I/O.", "history": "Added in API level 21", "FullName": "public abstract void flush ()"}, "getInstance()": {"Returns": [["@B_android#webkit#CookieManager_E@", "the singleton CookieManager instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the singleton CookieManager instance.", "history": "Added in API level 1", "FullName": "public static CookieManager getInstance ()"}, "allowFileSchemeCookies()": {"Returns": [["boolean", "true if @B_android#webkit#WebView_E@ instances send and accept cookies for file scheme URLs"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the application's @B_android#webkit#WebView_E@ instances send and accept cookies for file scheme URLs.", "history": "Added in API level 12", "FullName": "public static boolean allowFileSchemeCookies ()"}, "CookieManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This class should not be constructed by applications, use @B_android#webkit#CookieManager#getInstance_E@ instead to fetch the singleton instance.", "history": "Added in API level 22", "FullName": "public CookieManager ()"}, "setAcceptThirdPartyCookies(android.webkit.WebView,boolean)": {"Returns": [], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: the @B_android#webkit#WebView_E@ instance to set the cookie policy on"], ["boolean", "boolean: whether the @B_android#webkit#WebView_E@ instance should accept third party cookies"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the @B_android#webkit#WebView_E@ should allow third party cookies to be set. Allowing third party cookies is a per WebView policy and can be set differently on different WebView instances. Apps that target @B_android#os#Build#VERSION_CODES#KITKAT_E@ or below default to allowing third party cookies. Apps targeting @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ or later default to disallowing third party cookies.", "history": "Added in API level 21", "FullName": "public abstract void setAcceptThirdPartyCookies (WebView webview, boolean accept)"}, "setAcceptCookie(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether @B_android#webkit#WebView_E@ instances should send and accept cookies"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the application's @B_android#webkit#WebView_E@ instances should send and accept cookies. By default this is set to true and the WebView accepts cookies. When this is true @B_android#webkit#CookieManager#setAcceptThirdPartyCookies_E@ and @B_android#webkit#CookieManager#setAcceptFileSchemeCookies_E@ can be used to control the policy for those specific types of cookie.", "history": "Added in API level 1", "FullName": "public abstract void setAcceptCookie (boolean accept)"}, "getCookie(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "value the cookies as a string, using the format of the 'Cookie' HTTP request header"]], "Parameters": [["@B_java#lang#String_E@", "String: the URL for which the cookies are requested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the cookies for the given URL.", "history": "Added in API level 1", "FullName": "public abstract String getCookie (String url)"}, "setCookie(java.lang.String,java.lang.String,android.webkit.ValueCallback<java.lang.Boolean>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL for which the cookie is to be set"], ["@B_java#lang#String_E@", "String: the cookie as a string, using the format of the 'Set-Cookie' HTTP response header"], ["@B_android#webkit#ValueCallback_E@", "ValueCallback: a callback to be executed when the cookie has been set This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a cookie for the given URL. Any existing cookie with the same host, path and name will be replaced with the new cookie. The cookie being set will be ignored if it is expired. This method is asynchronous. If a @B_android#webkit#ValueCallback_E@ is provided, @B_android#webkit#ValueCallback#onReceiveValue_E@ will be called on the current thread's @B_android#os#Looper_E@ once the operation is complete. The value provided to the callback indicates whether the cookie was set successfully. You can pass null as the callback if you don't need to know when the operation completes or whether it succeeded, and in this case it is safe to call the method from a thread without a Looper.", "history": "Added in API level 21", "FullName": "public abstract void setCookie (String url, String value, ValueCallback<Boolean> callback)"}, "removeSessionCookies(android.webkit.ValueCallback<java.lang.Boolean>)": {"Returns": [], "Parameters": [["@B_android#webkit#ValueCallback_E@", "ValueCallback: a callback which is executed when the session cookies have been removed This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all session cookies, which are cookies without an expiration date. This method is asynchronous. If a @B_android#webkit#ValueCallback_E@ is provided, @B_android#webkit#ValueCallback#onReceiveValue_E@ will be called on the current thread's @B_android#os#Looper_E@ once the operation is complete. The value provided to the callback indicates whether any cookies were removed. You can pass null as the callback if you don't need to know when the operation completes or whether any cookie were removed, and in this case it is safe to call the method from a thread without a Looper.", "history": "Added in API level 21", "FullName": "public abstract void removeSessionCookies (ValueCallback<Boolean> callback)"}, "setAcceptFileSchemeCookies(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the application's @B_android#webkit#WebView_E@ instances should send and accept cookies for file scheme URLs. Use of cookies with file scheme URLs is potentially insecure and turned off by default. Do not use this feature unless you can be sure that no unintentional sharing of cookie data can take place. Note that calls to this method will have no effect if made after a @B_android#webkit#WebView_E@ or CookieManager instance has been created.", "history": "Added in API level 12", "FullName": "public static void setAcceptFileSchemeCookies (boolean accept)"}, "acceptCookie()": {"Returns": [["boolean", "true if @B_android#webkit#WebView_E@ instances send and accept cookies"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the application's @B_android#webkit#WebView_E@ instances send and accept cookies.", "history": "Added in API level 1", "FullName": "public abstract boolean acceptCookie ()"}, "setCookie(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL for which the cookie is to be set"], ["@B_java#lang#String_E@", "String: the cookie as a string, using the format of the 'Set-Cookie' HTTP response header"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a cookie for the given URL. Any existing cookie with the same host, path and name will be replaced with the new cookie. The cookie being set will be ignored if it is expired.", "history": "added in API level 1", "FullName": "public abstract void setCookie (String url, String value)"}, "removeAllCookies(android.webkit.ValueCallback<java.lang.Boolean>)": {"Returns": [], "Parameters": [["@B_android#webkit#ValueCallback_E@", "ValueCallback: a callback which is executed when the cookies have been removed This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all cookies. This method is asynchronous. If a @B_android#webkit#ValueCallback_E@ is provided, @B_android#webkit#ValueCallback#onReceiveValue_E@ will be called on the current thread's @B_android#os#Looper_E@ once the operation is complete. The value provided to the callback indicates whether any cookies were removed. You can pass null as the callback if you don't need to know when the operation completes or whether any cookies were removed, and in this case it is safe to call the method from a thread without a Looper.", "history": "Added in API level 21", "FullName": "public abstract void removeAllCookies (ValueCallback<Boolean> callback)"}, "removeAllCookie()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#CookieManager#removeAllCookies_E@ instead. Removes all cookies.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public abstract void removeAllCookie ()"}, "removeSessionCookie()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#webkit#CookieManager#removeSessionCookies_E@ instead. Removes all session cookies, which are cookies without an expiration date.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public abstract void removeSessionCookie ()"}, "removeExpiredCookie()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The WebView handles removing expired cookies automatically. Removes all expired cookies.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public abstract void removeExpiredCookie ()"}, "setCookie(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the URL for which the cookie is to be set"], ["@B_java#lang#String_E@", "String: the cookie as a string, using the format of the 'Set-Cookie' HTTP response header"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a cookie for the given URL. Any existing cookie with the same host, path and name will be replaced with the new cookie. The cookie being set will be ignored if it is expired.", "history": "Added in API level 1", "FullName": "public abstract void setCookie (String url, String value)"}, "acceptThirdPartyCookies(android.webkit.WebView)": {"Returns": [["boolean", "true if the @B_android#webkit#WebView_E@ accepts third party cookies"]], "Parameters": [["@B_android#webkit#WebView_E@", "WebView: the @B_android#webkit#WebView_E@ instance to get the cookie policy for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether the @B_android#webkit#WebView_E@ should allow third party cookies to be set.", "history": "Added in API level 21", "FullName": "public abstract boolean acceptThirdPartyCookies (WebView webview)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "protected Object clone ()"}}, "Inheritance": [], "ClassName": "android.webkit.CookieManager", "ClassDesc": "Manages the cookies used by an application's @B_android#webkit#WebView_E@ instances. CookieManager represents cookies as strings in the same format as the HTTP Cookie and Set-Cookie header fields (defined in"}