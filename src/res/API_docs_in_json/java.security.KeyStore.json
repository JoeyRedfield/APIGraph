{"Functions": {"getCertificateAlias(java.security.cert.Certificate)": {"Returns": [["@B_java#lang#String_E@", "the alias name of the first entry with a matching certificate, or null if no such entry exists in this keystore."]], "Parameters": [["@B_java#security#cert#Certificate_E@", "Certificate: the certificate to match with."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the (alias) name of the first keystore entry whose certificate matches the given certificate. This method attempts to match the given certificate with each keystore entry. If the entry being considered was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the given certificate is compared to that entry's certificate. If the entry being considered was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the given certificate is compared to the first element of that entry's certificate chain.", "history": "Added in API level 1", "FullName": "public final String getCertificateAlias (Certificate cert)"}, "getCertificateChain(java.lang.String)": {"Returns": [["@B_java#security#cert#Certificate_E@", "the certificate chain (ordered with the user's certificate first followed by zero or more certificate authorities), or null if the given alias does not exist or does not contain a certificate chain"]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the certificate chain associated with the given alias. The certificate chain must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry.", "history": "Added in API level 1", "FullName": "public final Certificate[] getCertificateChain (String alias)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this keystore."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this keystore.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getKey(java.lang.String, char[])": {"Returns": [["@B_java#security#Key_E@", "the requested key, or null if the given alias does not exist or does not identify a key-related entry."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["char[]", "char: the password for recovering the key"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm for recovering the key cannot be found"], ["@B_java#security#UnrecoverableKeyException_E@", "if the key cannot be recovered (e.g., the given password is wrong)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.", "history": "added in API level 1", "FullName": "public final Key getKey (String alias, char[] password)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#KeyStore_E@", "a keystore object of the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if a KeyStoreSpi implementation for the specified type is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static KeyStore getInstance (String type, String provider)"}, "store(java.security.KeyStore.LoadStoreParameter)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore#LoadStoreParameter_E@", "KeyStore.LoadStoreParameter: the LoadStoreParameter that specifies how to store the keystore, which may be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given LoadStoreParameter input is not recognized"], ["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)"], ["@B_java#io#IOException_E@", "if there was an I/O problem with data"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the appropriate data integrity algorithm could not be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates included in the keystore data could not be stored"]], "SeeAlso": [], "Permissions": [], "Description": "Stores this keystore using the given LoadStoreParameter.", "history": "Added in API level 1", "FullName": "public final void store (KeyStore.LoadStoreParameter param)"}, "getEntry(java.lang.String,java.security.KeyStore.ProtectionParameter)": {"Returns": [["@B_java#security#KeyStore#Entry_E@", "the keystore Entry for the specified alias, or null if there is no such entry"]], "Parameters": [["@B_java#lang#String_E@", "String: get the keystore Entry for this alias"], ["@B_java#security#KeyStore#ProtectionParameter_E@", "KeyStore.ProtectionParameter: the ProtectionParameter used to protect the Entry, which may be null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if alias is null"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm for recovering the entry cannot be found"], ["@B_java#security#UnrecoverableEntryException_E@", "if the specified protParam were insufficient or invalid"], ["@B_java#security#UnrecoverableKeyException_E@", "if the entry is a PrivateKeyEntry or SecretKeyEntry and the specified protParam does not contain the information needed to recover the key (e.g. wrong password)"], ["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": ["@B_java#security#KeyStore#setEntry_E@"], "Permissions": [], "Description": "Gets a keystore Entry for the specified alias with the specified protection parameter.", "history": "Added in API level 1", "FullName": "public final KeyStore.Entry getEntry (String alias, KeyStore.ProtectionParameter protParam)"}, "setCertificateEntry(java.lang.String,java.security.cert.Certificate)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized, or the given alias already exists and does not identify an entry containing a trusted certificate, or this operation fails for some other reason."]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the given trusted certificate to the given alias. If the given alias identifies an existing entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, the trusted certificate in the existing entry is overridden by the given certificate.", "history": "Added in API level 1", "FullName": "public final void setCertificateEntry (String alias, Certificate cert)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#KeyStore_E@", "a keystore object of the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if no Provider supports a KeyStoreSpi implementation for the specified type."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a keystore object of the specified type. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new KeyStore object encapsulating the KeyStoreSpi implementation from the first Provider that supports the specified type is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyStore getInstance (String type)"}, "getCertificate(java.lang.String)": {"Returns": [["@B_java#security#cert#Certificate_E@", "the certificate, or null if the given alias does not exist or does not contain a certificate."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the certificate associated with the given alias. If the given alias name identifies an entry created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry, then the trusted certificate contained in that entry is returned. If the given alias name identifies an entry created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry, then the first element of the certificate chain in that entry is returned.", "history": "Added in API level 1", "FullName": "public final Certificate getCertificate (String alias)"}, "entryInstanceOf(java.lang.String,java.lang.Class<?extendsjava.security.KeyStore.Entry>)": {"Returns": [["boolean", "true if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["@B_java#lang#Class_E@", "Class: the entry class"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if alias or entryClass is null"], ["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)"]], "SeeAlso": [], "Permissions": [], "Description": "Determines if the keystore Entry for the specified alias is an instance or subclass of the specified entryClass.", "history": "Added in API level 1", "FullName": "public final boolean entryInstanceOf (String alias, Class<? extends KeyStore.Entry> entryClass)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#KeyStore_E@", "a keystore object of the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if a KeyStoreSpi implementation for the specified type is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static KeyStore getInstance (String type, String provider)"}, "isKeyEntry(java.lang.String)": {"Returns": [["boolean", "true if the entry identified by the given alias is a key-related entry, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias for the keystore entry to be checked"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the entry identified by the given alias was created by a call to setKeyEntry, or created by a call to setEntry with a PrivateKeyEntry or a SecretKeyEntry.", "history": "Added in API level 1", "FullName": "public final boolean isKeyEntry (String alias)"}, "load(java.io.InputStream,char[])": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which the keystore is loaded, or null"], ["char[]", "char: the password used to check the integrity of the keystore, the password used to unlock the keystore, or null"]], "Throws": [["@B_java#io#IOException_E@", "if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the @B_java#lang#Throwable#getCause_E@ of the IOException should be an UnrecoverableKeyException"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm used to check the integrity of the keystore cannot be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates in the keystore could not be loaded"]], "SeeAlso": [], "Permissions": [], "Description": "Loads this KeyStore from the given input stream. A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed. In order to create an empty keystore, or if the keystore cannot be initialized from a stream, pass null as the stream argument. Note that if this keystore has already been loaded, it is reinitialized and loaded again from the given input stream.", "history": "Added in API level 1", "FullName": "public final void load (InputStream stream, char[] password)"}, "aliases()": {"Returns": [["@B_java#util#Enumeration_E@", "enumeration of the alias names"]], "Parameters": [], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Lists all the alias names of this keystore.", "history": "Added in API level 1", "FullName": "public final Enumeration<String> aliases ()"}, "setKeyEntry(java.lang.String,byte[],java.security.cert.Certificate[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["byte[]", "byte: the key (in protected format) to be associated with the alias"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate chain for the corresponding public key (only useful if the protected key is of type java.security.PrivateKey)."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded), or if this operation fails for some other reason."]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the given key (that has already been protected) to the given alias. If the protected key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the underlying keystore implementation is of type jks, key must be encoded as an EncryptedPrivateKeyInfo as defined in the PKCS #8 standard. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).", "history": "Added in API level 1", "FullName": "public final void setKeyEntry (String alias, byte[] key, Certificate[] chain)"}, "getKey(java.lang.String,char[])": {"Returns": [["@B_java#security#Key_E@", "the requested key, or null if the given alias does not exist or does not identify a key-related entry."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["char[]", "char: the password for recovering the key"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm for recovering the key cannot be found"], ["@B_java#security#UnrecoverableKeyException_E@", "if the key cannot be recovered (e.g., the given password is wrong)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the key associated with the given alias, using the given password to recover it. The key must have been associated with the alias by a call to setKeyEntry, or by a call to setEntry with a PrivateKeyEntry or SecretKeyEntry.", "history": "Added in API level 1", "FullName": "public final Key getKey (String alias, char[] password)"}, "store(java.io.OutputStream, char[])": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream to which this keystore is written."], ["char[]", "char: the password to generate the keystore integrity check"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."], ["@B_java#io#IOException_E@", "if there was an I/O problem with data"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the appropriate data integrity algorithm could not be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates included in the keystore data could not be stored"]], "SeeAlso": [], "Permissions": [], "Description": "Stores this keystore to the given output stream, and protects its integrity with the given password.", "history": "added in API level 1", "FullName": "public final void store (OutputStream stream, char[] password)"}, "size()": {"Returns": [["int", "the number of entries in this keystore"]], "Parameters": [], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number of entries in this keystore.", "history": "Added in API level 1", "FullName": "public final int size ()"}, "containsAlias(java.lang.String)": {"Returns": [["boolean", "true if the alias exists, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the given alias exists in this keystore.", "history": "Added in API level 1", "FullName": "public final boolean containsAlias (String alias)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#KeyStore_E@", "a keystore object of the specified type."]], "Parameters": [["@B_java#lang#String_E@", "String: the type of keystore. See the KeyStore section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard keystore types."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if KeyStoreSpi implementation for the specified type is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the specified provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a keystore object of the specified type. A new KeyStore object encapsulating the KeyStoreSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static KeyStore getInstance (String type, Provider provider)"}, "setKeyEntry(java.lang.String,java.security.Key,char[],java.security.cert.Certificate[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"], ["@B_java#security#Key_E@", "Key: the key to be associated with the alias"], ["char[]", "char: the password to protect the key"], ["@B_java#security#cert#Certificate_E@", "Certificate: the certificate chain for the corresponding public key (only required if the given key is of type java.security.PrivateKey)."]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded), the given key cannot be protected, or this operation fails for some other reason"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the given key to the given alias, protecting it with the given password. If the given key is of type java.security.PrivateKey, it must be accompanied by a certificate chain certifying the corresponding public key. If the given alias already exists, the keystore information associated with it is overridden by the given key (and possibly certificate chain).", "history": "Added in API level 1", "FullName": "public final void setKeyEntry (String alias, Key key, char[] password, Certificate[] chain)"}, "setEntry(java.lang.String,java.security.KeyStore.Entry,java.security.KeyStore.ProtectionParameter)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: save the keystore Entry under this alias"], ["@B_java#security#KeyStore#Entry_E@", "KeyStore.Entry: the Entry to save"], ["@B_java#security#KeyStore#ProtectionParameter_E@", "KeyStore.ProtectionParameter: the ProtectionParameter used to protect the Entry, which may be null"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if alias or entry is null"], ["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded), or if this operation fails for some other reason"]], "SeeAlso": ["@B_java#security#KeyStore#getEntry_E@"], "Permissions": [], "Description": "Saves a keystore Entry under the specified alias. The protection parameter is used to protect the Entry. If an entry already exists for the specified alias, it is overridden.", "history": "Added in API level 1", "FullName": "public final void setEntry (String alias, KeyStore.Entry entry, KeyStore.ProtectionParameter protParam)"}, "getDefaultType()": {"Returns": [["@B_java#lang#String_E@", "the default keystore type as specified by the keystore.type security property, or the string \"jks\" if no such property exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Security_E@"], "Permissions": [], "Description": "Returns the default keystore type as specified by the keystore.type security property, or the string \"jks\" (acronym for \"Java keystore\") if no such property exists. The default keystore type can be used by applications that do not want to use a hard-coded keystore type when calling one of the getInstance methods, and want to provide a default keystore type in case a user does not specify its own. The default keystore type can be changed by setting the value of the keystore.type security property to the desired keystore type.", "history": "Added in API level 1", "FullName": "public static final String getDefaultType ()"}, "store(java.io.OutputStream,char[])": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream to which this keystore is written."], ["char[]", "char: the password to generate the keystore integrity check"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."], ["@B_java#io#IOException_E@", "if there was an I/O problem with data"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the appropriate data integrity algorithm could not be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates included in the keystore data could not be stored"]], "SeeAlso": [], "Permissions": [], "Description": "Stores this keystore to the given output stream, and protects its integrity with the given password.", "history": "Added in API level 1", "FullName": "public final void store (OutputStream stream, char[] password)"}, "load(java.security.KeyStore.LoadStoreParameter)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore#LoadStoreParameter_E@", "KeyStore.LoadStoreParameter: the LoadStoreParameter that specifies how to load the keystore, which may be null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given LoadStoreParameter input is not recognized"], ["@B_java#io#IOException_E@", "if there is an I/O or format problem with the keystore data. If the error is due to an incorrect ProtectionParameter (e.g. wrong password) the @B_java#lang#Throwable#getCause_E@ of the IOException should be an UnrecoverableKeyException"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm used to check the integrity of the keystore cannot be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates in the keystore could not be loaded"]], "SeeAlso": [], "Permissions": [], "Description": "Loads this keystore using the given LoadStoreParameter. Note that if this KeyStore has already been loaded, it is reinitialized and loaded again from the given parameter.", "history": "Added in API level 1", "FullName": "public final void load (KeyStore.LoadStoreParameter param)"}, "load(java.io.InputStream, char[])": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream from which the keystore is loaded, or null"], ["char[]", "char: the password used to check the integrity of the keystore, the password used to unlock the keystore, or null"]], "Throws": [["@B_java#io#IOException_E@", "if there is an I/O or format problem with the keystore data, if a password is required but not given, or if the given password was incorrect. If the error is due to a wrong password, the @B_java#lang#Throwable#getCause_E@ of the IOException should be an UnrecoverableKeyException"], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm used to check the integrity of the keystore cannot be found"], ["@B_java#security#cert#CertificateException_E@", "if any of the certificates in the keystore could not be loaded"]], "SeeAlso": [], "Permissions": [], "Description": "Loads this KeyStore from the given input stream. A password may be given to unlock the keystore (e.g. the keystore resides on a hardware token device), or to check the integrity of the keystore data. If a password is not given for integrity checking, then integrity checking is not performed. In order to create an empty keystore, or if the keystore cannot be initialized from a stream, pass null as the stream argument. Note that if this keystore has already been loaded, it is reinitialized and loaded again from the given input stream.", "history": "added in API level 1", "FullName": "public final void load (InputStream stream, char[] password)"}, "deleteEntry(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized, or if the entry cannot be removed."]], "SeeAlso": [], "Permissions": [], "Description": "Deletes the entry identified by the given alias from this keystore.", "history": "Added in API level 1", "FullName": "public final void deleteEntry (String alias)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the type of this keystore."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this keystore.", "history": "Added in API level 1", "FullName": "public final String getType ()"}, "getCreationDate(java.lang.String)": {"Returns": [["@B_java#util#Date_E@", "the creation date of this entry, or null if the given alias does not exist"]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the creation date of the entry identified by the given alias.", "history": "Added in API level 1", "FullName": "public final Date getCreationDate (String alias)"}, "KeyStore(java.security.KeyStoreSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#KeyStoreSpi_E@", "KeyStoreSpi: the provider implementation."], ["@B_java#security#Provider_E@", "Provider: the provider."], ["@B_java#lang#String_E@", "String: the keystore type."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a KeyStore object of the given type, and encapsulates the given provider implementation (SPI object) in it.", "history": "Added in API level 1", "FullName": "protected KeyStore (KeyStoreSpi keyStoreSpi, Provider provider, String type)"}, "isCertificateEntry(java.lang.String)": {"Returns": [["boolean", "true if the entry identified by the given alias contains a trusted certificate, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias for the keystore entry to be checked"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized (loaded)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the entry identified by the given alias was created by a call to setCertificateEntry, or created by a call to setEntry with a TrustedCertificateEntry.", "history": "Added in API level 1", "FullName": "public final boolean isCertificateEntry (String alias)"}}, "Inheritance": [], "ClassName": "java.security.KeyStore", "ClassDesc": "This class represents a storage facility for cryptographic keys and certificates. A KeyStore manages different types of entries. Each type of entry implements the KeyStore.Entry interface. Three basic KeyStore.Entry implementations are provided: This type of entry holds a cryptographic PrivateKey, which is optionally stored in a protected format to prevent unauthorized access. It is also accompanied by a certificate chain for the corresponding public key. Private keys and certificate chains are used by a given entity for self-authentication. Applications for this authentication include software distribution organizations which sign JAR files as part of releasing and/or licensing software. This type of entry holds a cryptographic SecretKey, which is optionally stored in a protected format to prevent unauthorized access. This type of entry contains a single public key Certificate belonging to another party. It is called a This type of entry can be used to authenticate other parties. Each entry in a keystore is identified by an \"alias\" string. In the case of private keys and their associated certificate chains, these strings distinguish among the different ways in which the entity may authenticate itself. For example, the entity may authenticate itself using different certificate authorities, or using different public key algorithms. Whether aliases are case sensitive is implementation dependent. In order to avoid problems, it is recommended not to use aliases in a KeyStore that only differ in case. Whether keystores are persistent, and the mechanisms used by the keystore if it is persistent, are not specified here. This allows use of a variety of techniques for protecting sensitive (e.g., private or secret) keys. Smart cards or other integrated cryptographic engines (SafeKeyper) are one option, and simpler mechanisms such as files may also be used (in a variety of formats). Typical ways to request a KeyStore object include relying on the default type and providing a specific keystore type. To rely on the default type: To provide a specific keystore type: Before a keystore can be accessed, it must be @B_java#security#KeyStore#load_E@. load method, pass null as the InputStream argument. Once the keystore has been loaded, it is possible to read existing entries from the keystore, or to write new entries into the keystore: Android provides the following KeyStore types:"}