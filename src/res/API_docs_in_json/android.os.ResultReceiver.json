{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "onReceiveResult(int, android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: Arbitrary result code delivered by the sender, as defined by the sender."], ["@B_android#os#Bundle_E@", "Bundle: Any additional data provided by the sender."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to receive results delivered to this object.", "history": "added in API level 3", "FullName": "protected void onReceiveResult (int resultCode, Bundle resultData)"}, "send(int, android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: Arbitrary result code to deliver, as defined by you."], ["@B_android#os#Bundle_E@", "Bundle: Any additional data provided by you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deliver a result to this receiver. Will call @B_android#os#ResultReceiver#onReceiveResult_E@, always asynchronously if the receiver has supplied a Handler in which to dispatch the result.", "history": "added in API level 3", "FullName": "public void send (int resultCode, Bundle resultData)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "onReceiveResult(int,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: Arbitrary result code delivered by the sender, as defined by the sender."], ["@B_android#os#Bundle_E@", "Bundle: Any additional data provided by the sender."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to receive results delivered to this object.", "history": "Added in API level 3", "FullName": "protected void onReceiveResult (int resultCode, Bundle resultData)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "send(int,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: Arbitrary result code to deliver, as defined by you."], ["@B_android#os#Bundle_E@", "Bundle: Any additional data provided by you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deliver a result to this receiver. Will call @B_android#os#ResultReceiver#onReceiveResult_E@, always asynchronously if the receiver has supplied a Handler in which to dispatch the result.", "history": "Added in API level 3", "FullName": "public void send (int resultCode, Bundle resultData)"}, "ResultReceiver(android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#os#Handler_E@", "Handler no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ResultReceive to receive results. Your @B_android#os#ResultReceiver#onReceiveResult_E@ method will be called from the thread running", "history": "Added in API level 3", "FullName": "public ResultReceiver (Handler handler)"}}, "Inheritance": [], "ClassName": "android.os.ResultReceiver", "ClassDesc": "Generic interface for receiving a callback result from someone. Use this by creating a subclass and implement @B_android#os#ResultReceiver#onReceiveResult_E@, which you can then pass to others and send through IPC, and receive results they supply with @B_android#os#ResultReceiver#send_E@. Note: the implementation underneath is just a simple wrapper around a @B_android#os#Binder_E@ that is used to perform the communication. This means semantically you should treat it as such: this class does not impact process lifecycle management (you must be using some higher-level component to tell the system that your process needs to continue running), the connection will break if your process goes away for any reason, etc."}