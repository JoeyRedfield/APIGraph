{"Functions": {"revealAchievementImmediate(com.google.android.gms.games.achievement.OnAchievementUpdatedListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#achievement#OnAchievementUpdatedListener_E@", "The listener that is called when the reveal achievement is complete. The listener is called on the main thread."], ["String", "The ID of the achievement to reveal"]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#unlockAchievementImmediate_E@"], "Permissions": [], "Description": "Reveal a hidden achievement to the currently signed in player. If the achievement is already visible, this will have no effect. This form of the API will attempt to update the user's achievement on the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered.", "history": "", "FullName": "public void revealAchievementImmediate (OnAchievementUpdatedListener listener, String id)"}, "getRealTimeWaitingRoomIntent(com.google.android.gms.games.multiplayer.realtime.Room, int)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to display the waiting room screen."]], "Parameters": [["@B_com#google#android#gms#games#multiplayer#realtime#Room_E@", "The @B_com#google#android#gms#games#multiplayer#realtime#Room_E@ object to be displayed."], ["int", "the minimum number of participants that must be connected to the room (including the current player) for the \"Start playing\" menu item to become enabled."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#createRoom_E@", "@B_com#google#android#gms#games#GamesClient#leaveRoom_E@"], "Permissions": [], "Description": "Returns an intent that will display a \"waiting room\" screen that shows the progress of participants joining a real-time multiplayer room. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. If the necessary number of peers have connected and it's now OK to start the game, or if the user explicitly asked to start the game now, the activity result will be @B_android#app#Activity#RESULT_OK_E@. If the user bailed out of the waiting room screen without taking any action, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user explicitly chose to leave the room, the result will be @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_LEFT_ROOM_E@. Regardless of what the result code was, the waiting room activity will return a data intent containing a @B_com#google#android#gms#games#multiplayer#realtime#Room_E@ object in @B_com#google#android#gms#games#GamesClient#EXTRA_ROOM_E@ that represents the current state of the Room that you originally passed as a parameter here. If desired, the waiting room can allow the user to start playing the game even before the room is fully connected. This is controlled by the minParticipantsToStart parameter: if at least that many participants (including the current player) are connected to the room, a \"Start playing\" menu item will become enabled in the waiting room UI. Setting minParticipantsToStart to 0 means that \"Start playing\" will always be available, and a value of @B_java#lang#Integer#MAX_VALUE_E@ will disable the item completely. Note: if you do allow the user to start early, you'll need to handle that situation by explicitly telling the other connected peers that the game is now starting; see the developer documentation for more details. Finally, note that the waiting room itself will never explicitly take any action to change the state of the room or its participants. So if the activity result is @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_LEFT_ROOM_E@, it's the caller's responsibility to actually leave the room. Or if the result is @B_android#app#Activity#RESULT_CANCELED_E@, it's the responsibility of the caller to double-check the current state of the Room and decide whether to start the game, keep waiting, or do something else. But note that while the waiting room is active, the state of the Room", "history": "", "FullName": "public Intent getRealTimeWaitingRoomIntent (Room room, int minParticipantsToStart)"}, "setUseNewPlayerNotificationsFirstParty(boolean)": {"Returns": [], "Parameters": [["boolean", "Whether or not to use \"new player\" notifications."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether or not to use the \"new player\" style notifications for the invitation inbox or destination app.", "history": "", "FullName": "public void setUseNewPlayerNotificationsFirstParty (boolean newPlayerStyle)"}, "loadMoreInvitablePlayers(com.google.android.gms.games.OnPlayersLoadedListener, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#OnPlayersLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["int", "The number of additional entries to request. This must be a value between 1 and 25."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously loads an additional page of invitable players. A new player buffer will be delivered that includes an extra page of results. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadMoreInvitablePlayers (OnPlayersLoadedListener listener, int pageSize)"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the connection to Google Play services. No calls can be made on this object after calling this method.", "history": "", "FullName": "public void disconnect ()"}, "clearAllNotifications()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear all notifications for the current game and signed-in player.", "history": "", "FullName": "public void clearAllNotifications ()"}, "getCurrentPlayer()": {"Returns": [["", "@B_com#google#android#gms#games#Player_E@ representing the currently signed in player. May be null if an error occurred while communicating with the games service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Player getCurrentPlayer ()"}, "loadLeaderboardMetadata(com.google.android.gms.games.leaderboard.OnLeaderboardMetadataLoadedListener, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardMetadataLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the list of leaderboard metadata for this game. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadLeaderboardMetadata (OnLeaderboardMetadataLoadedListener listener, boolean forceReload)"}, "setViewForPopups(android.view.View)": {"Returns": [], "Parameters": [["View", "The view to use as a content view for popups. View cannot be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#view#View_E@ to use as a content view for popups.", "history": "", "FullName": "public void setViewForPopups (View gamesContentView)"}, "loadPlayerCenteredScores(com.google.android.gms.games.leaderboard.OnLeaderboardScoresLoadedListener, java.lang.String, int, int, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardScoresLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the player-centered page of scores for a given leaderboard. If the player does not have a score on this leaderboard, this call will return the top page instead. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadPlayerCenteredScores (OnLeaderboardScoresLoadedListener listener, String leaderboardId, int span, int leaderboardCollection, int maxResults)"}, "submitScore(java.lang.String, long)": {"Returns": [], "Parameters": [["String", "The leaderboard to submit the score to."], ["long", "The raw score value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API is a fire-and-forget form. Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see", "history": "", "FullName": "public void submitScore (String leaderboardId, long score)"}, "sendUnreliableRealTimeMessageToAll(byte[], java.lang.String)": {"Returns": [["", "@B_com#google#android#gms#games#GamesClient#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#GamesClient#STATUS_REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to all participants in a real-time room. The message delivery is not reliable and will not report status after completion. The maximum message size supported is @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes.", "history": "", "FullName": "public int sendUnreliableRealTimeMessageToAll (byte[] messageData, String roomId)"}, "loadMoreScores(com.google.android.gms.games.leaderboard.OnLeaderboardScoresLoadedListener, com.google.android.gms.games.leaderboard.LeaderboardScoreBuffer, int, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardScoresLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["@B_com#google#android#gms#games#leaderboard#LeaderboardScoreBuffer_E@", "The existing buffer that will be expanded. The buffer is allowed to be closed prior to being passed in to this method."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."], ["int", "The direction to expand the buffer. Values are defined in @B_com#google#android#gms#games#PageDirection_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously loads an additional page of score data for the given score buffer. A new score buffer will be delivered that replaces the given buffer. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadMoreScores (OnLeaderboardScoresLoadedListener listener, LeaderboardScoreBuffer buffer, int maxResults, int pageDirection)"}, "loadLeaderboardMetadata(com.google.android.gms.games.leaderboard.OnLeaderboardMetadataLoadedListener, java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardMetadataLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard to load metadata for."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load a specific leaderboard's metadata for this game. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadLeaderboardMetadata (OnLeaderboardMetadataLoadedListener listener, String leaderboardId, boolean forceReload)"}, "isConnecting()": {"Returns": [["", "true if the client is attempting to connect to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is attempting to connect to the service.", "history": "", "FullName": "public boolean isConnecting ()"}, "loadPlayerCenteredScores(com.google.android.gms.games.leaderboard.OnLeaderboardScoresLoadedListener, java.lang.String, int, int, int, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardScoresLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the player-centered page of scores for a given leaderboard. If the player does not have a score on this leaderboard, this call will return the top page instead. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadPlayerCenteredScores (OnLeaderboardScoresLoadedListener listener, String leaderboardId, int span, int leaderboardCollection, int maxResults, boolean forceReload)"}, "getRealTimeSocketForParticipant(java.lang.String, java.lang.String)": {"Returns": [["", "An instance of a LocalSocket, or null on error."]], "Parameters": [["String", "ID of the room for which the socket is being bound."], ["String", "The ID of the participant to whom this socket is bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_com#google#android#gms#games#multiplayer#realtime#RealTimeSocket_E@ for carrying network traffic to the given peer. Creates a new socket if one does not exist (or if an existing socket gets disconnected). Requires an active real-time room and players being available. Throws an @B_java#lang#IllegalArgumentException_E@ if participantId is not a valid participant or belongs to the current player.", "history": "", "FullName": "public RealTimeSocket getRealTimeSocketForParticipant (String roomId, String participantId)"}, "registerInvitationListener(com.google.android.gms.games.multiplayer.OnInvitationReceivedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#multiplayer#OnInvitationReceivedListener_E@", "The listener that is called when a new invitation is received. The listener is called on the main thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a listener to intercept incoming invitations for the currently signed-in user. If a listener is registered by this method, the incoming invitation will not generate a status bar notification as long as this client remains connected. Note that only one listener may be active at a time. Calling this method while another listener was previously registered will replace the original listener with the new one.", "history": "", "FullName": "public void registerInvitationListener (OnInvitationReceivedListener listener)"}, "loadTopScores(com.google.android.gms.games.leaderboard.OnLeaderboardScoresLoadedListener, java.lang.String, int, int, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardScoresLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the top page of scores for a given leaderboard. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadTopScores (OnLeaderboardScoresLoadedListener listener, String leaderboardId, int span, int leaderboardCollection, int maxResults)"}, "submitScore(java.lang.String, long, java.lang.String)": {"Returns": [], "Parameters": [["String", "The leaderboard to submit the score to."], ["long", "The raw score value."], ["String", "Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API is a fire-and-forget form. Use this if you do not need to be notified of the results of submitting the score, though note that the update may not be sent to the server until the next sync. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see", "history": "", "FullName": "public void submitScore (String leaderboardId, long score, String scoreTag)"}, "unregisterConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection listener from this GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "loadAchievements(com.google.android.gms.games.achievement.OnAchievementsLoadedListener, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#achievement#OnAchievementsLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load achievement data for the currently signed in player. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadAchievements (OnAchievementsLoadedListener listener, boolean forceReload)"}, "sendReliableRealTimeMessage(com.google.android.gms.games.multiplayer.realtime.RealTimeReliableMessageSentListener, byte[], java.lang.String, java.lang.String)": {"Returns": [["", "The token for the message sent, which is returned in callback @B_com#google#android#gms#games#multiplayer#realtime#RealTimeReliableMessageSentListener#onRealTimeMessageSent_E@ or @B_com#google#android#gms#games#GamesClient#STATUS_REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["@B_com#google#android#gms#games#multiplayer#realtime#RealTimeReliableMessageSentListener_E@", "The listener that is notified when the message has been sent."], ["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#GamesClient#MAX_RELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["String", "The participant ID to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to a participant in a real-time room reliably. The caller will receive a callback to report the status of the send message operation. Throws an @B_java#lang#IllegalArgumentException_E@ if recipientParticipantId is not a valid participant or belongs to the current player. The maximum message size supported is @B_com#google#android#gms#games#GamesClient#MAX_RELIABLE_MESSAGE_LEN_E@ bytes.", "history": "", "FullName": "public int sendReliableRealTimeMessage (RealTimeReliableMessageSentListener listener, byte[] messageData, String roomId, String recipientParticipantId)"}, "leaveRoom(com.google.android.gms.games.multiplayer.realtime.RoomUpdateListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener_E@", "The listener that is notified after the room has been left. The listener is called on the main thread."], ["String", "ID of the room to leave."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Leave the specified room. This will disconnect the player from the room, but allow other players to continue playing the game. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onLeftRoom_E@ to the given listener on the main thread. After this method is called, you cannot perform any further actions on the room. You can create or join another room only after @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onLeftRoom_E@ is received.", "history": "", "FullName": "public void leaveRoom (RoomUpdateListener listener, String roomId)"}, "reconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#connect_E@", "@B_com#google#android#gms#games#GamesClient#disconnect_E@", "@B_com#google#android#gms#common#GooglePlayServicesClient#connect_E@"], "Permissions": [], "Description": "Closes the current connection to Google Play services and creates a new connection. This method closes the current connection then returns immediately and reconnects to the service in the background. This method will call @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onDisconnected_E@ followed by either @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ if the connection is successful or @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ on a failure.", "history": "", "FullName": "public void reconnect ()"}, "dismissRoomInvitation(java.lang.String)": {"Returns": [], "Parameters": [["String", "The ID of the invitation to dismiss."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss an invitation to a real-time room. Dismissing an invitation will not change the state of the room for the other participants.", "history": "", "FullName": "public void dismissRoomInvitation (String invitationId)"}, "loadPlayer(com.google.android.gms.games.OnPlayersLoadedListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#OnPlayersLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "The player ID to get full profile data for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously loads the profile for the requested player ID. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadPlayer (OnPlayersLoadedListener listener, String playerId)"}, "loadTopScores(com.google.android.gms.games.leaderboard.OnLeaderboardScoresLoadedListener, java.lang.String, int, int, int, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardScoresLoadedListener_E@", "the listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard."], ["int", "Time span to retrieve data for. Valid values are @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_DAILY_E@, @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_WEEKLY_E@, or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#TIME_SPAN_ALL_TIME_E@."], ["int", "The leaderboard collection to retrieve scores for. Valid values are either @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_PUBLIC_E@ or @B_com#google#android#gms#games#leaderboard#LeaderboardVariant#COLLECTION_SOCIAL_E@."], ["int", "The maximum number of scores to fetch per page. Must be between 1 and 25."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the top page of scores for a given leaderboard. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadTopScores (OnLeaderboardScoresLoadedListener listener, String leaderboardId, int span, int leaderboardCollection, int maxResults, boolean forceReload)"}, "loadLeaderboardMetadata(com.google.android.gms.games.leaderboard.OnLeaderboardMetadataLoadedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardMetadataLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the list of leaderboard metadata for this game. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered. This form of the API is deprecated and will be removed in a future release. Please use @B_com#google#android#gms#games#GamesClient#loadLeaderboardMetadata_E@ instead.", "history": "", "FullName": "public void loadLeaderboardMetadata (OnLeaderboardMetadataLoadedListener listener)"}, "isConnectionFailedListenerRegistered(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [["", "true if the specified listener is currently registered to receive connection failed events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection failed events.", "history": "", "FullName": "public boolean isConnectionFailedListenerRegistered (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "unlockAchievement(java.lang.String)": {"Returns": [], "Parameters": [["String", "The achievement ID to unlock"]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#revealAchievement_E@"], "Permissions": [], "Description": "Unlock an achievement for the currently signed in player. If the achievement is hidden this will reveal it to the player. This is the fire-and-forget form of the API. Use this form if you don't need to know the status of the operation immediately. For most applications, this will be the preferred API to use, though note that the update may not be sent to the server until the next sync. See @B_com#google#android#gms#games#GamesClient#unlockAchievementImmediate_E@ if you need the operation to attempt to communicate to the server immediately or need to have the status code delivered to your application.", "history": "", "FullName": "public void unlockAchievement (String id)"}, "createRoom(com.google.android.gms.games.multiplayer.realtime.RoomConfig)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@", "The real-time room configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a real-time room for the current game. The lifetime of the current game's connection to the room is bound to this @B_com#google#android#gms#games#GamesClient_E@'s lifecycle. When the client disconnects, the player will leave the room and any peer-to-peer connections for this player will be torn down. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onRoomCreated_E@ to the given RoomUpdateListener in the @B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@. The listener is called on the main thread.", "history": "", "FullName": "public void createRoom (RoomConfig config)"}, "getAllLeaderboardsIntent()": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the list of leaderboards for a game."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show the list of leaderboards for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GamesClient ends up in an inconsistent state.", "history": "", "FullName": "public Intent getAllLeaderboardsIntent ()"}, "incrementAchievement(java.lang.String, int)": {"Returns": [], "Parameters": [["String", "The achievement ID to increment."], ["int", "The number of steps to increment by. Must be greater than 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increments an achievement by the given number of steps. The achievement must be an incremental achievement. Once an achievement reaches at least the maximum number of steps, it will be unlocked automatically. Any further increments will be ignored. This is the fire-and-forget form of the API. Use this form if you don't need to know the status of the operation immediately. For most applications, this will be the preferred API to use, though note that the update may not be sent to the server until the next sync. See @B_com#google#android#gms#games#GamesClient#incrementAchievementImmediate_E@ if you need the operation to attempt to communicate to the server immediately or need to have the status code delivered to your application.", "history": "", "FullName": "public void incrementAchievement (String id, int numSteps)"}, "loadLeaderboardMetadata(com.google.android.gms.games.leaderboard.OnLeaderboardMetadataLoadedListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnLeaderboardMetadataLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["String", "ID of the leaderboard to load metadata for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load a specific leaderboard's metadata for this game. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered. This form of the API is deprecated and will be removed in a future release. Please use @B_com#google#android#gms#games#GamesClient#loadLeaderboardMetadata_E@ instead.", "history": "", "FullName": "public void loadLeaderboardMetadata (OnLeaderboardMetadataLoadedListener listener, String leaderboardId)"}, "setGravityForPopups(int)": {"Returns": [], "Parameters": [["int", "The gravity which controls the placement of games service popups."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the part of the screen at which games service popups (for example, \"welcome back\" or \"achievement unlocked\" popups) will be displayed using gravity. Default value is @B_android#view#Gravity#TOP_E@|@B_android#view#Gravity#CENTER_HORIZONTAL_E@.", "history": "", "FullName": "public void setGravityForPopups (int gravity)"}, "getAchievementsIntent()": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the currently signed in player's achievements."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show the list of achievements for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GamesClient ends up in an inconsistent state.", "history": "", "FullName": "public Intent getAchievementsIntent ()"}, "getCurrentPlayerId()": {"Returns": [["", "The player ID for the currently signed in player. May be null if an error occurred while communicating with the games service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getCurrentPlayerId ()"}, "unregisterConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection failed listener from the GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection failed events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "loadGame(com.google.android.gms.games.OnGamesLoadedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#OnGamesLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load the details for the current game.", "history": "", "FullName": "public void loadGame (OnGamesLoadedListener listener)"}, "getSettingsIntent()": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the GamesClient Settings UI."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show the Settings screen that allows the user to configure GamesClient-related features for the current game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GamesClient ends up in an inconsistent state. Most applications will not need to call this directly, since the Settings UI is already reachable from most other GamesClient UI screens (achievements, leaderboards, etc.) via a menu item.", "history": "", "FullName": "public Intent getSettingsIntent ()"}, "clearNotifications(int)": {"Returns": [], "Parameters": [["int", "Mask of notification types to clear."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the notifications of the specified type for the current game and signed-in player. This should be a mask comprised of values from the constants @B_com#google#android#gms#games#GamesClient#NOTIFICATION_TYPE_INVITATION_E@, @B_com#google#android#gms#games#GamesClient#NOTIFICATION_TYPES_MULTIPLAYER_E@, and @B_com#google#android#gms#games#GamesClient#NOTIFICATION_TYPES_ALL_E@.", "history": "", "FullName": "public void clearNotifications (int notificationTypes)"}, "getInvitationInboxIntent()": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the invitation inbox UI."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an intent that will let the user see and manage any outstanding invitations. Note that this must be invoked using @B_android#app#Activity#startActivityForResult_E@ so that the identity of the calling package can be established. If the user canceled, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user selected an invitation to accept, the result will be @B_android#app#Activity#RESULT_OK_E@ and the data intent will contain the selected invitation as a parcelable extra in @B_com#google#android#gms#games#GamesClient#EXTRA_INVITATION_E@.", "history": "", "FullName": "public Intent getInvitationInboxIntent ()"}, "getLeaderboardIntent(java.lang.String)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to view the specified leaderboard."]], "Parameters": [["String", "The ID of the leaderboard to view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an intent to show a leaderboard for a game. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. A @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_RECONNECT_REQUIRED_E@ may be returned as the resultCode in @B_android#app#Activity#onActivityResult_E@ if the GamesClient ends up in an inconsistent state.", "history": "", "FullName": "public Intent getLeaderboardIntent (String leaderboardId)"}, "getAppId()": {"Returns": [["", "The application ID linked to this GamesClient instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the application ID linked to this GamesClient instance.", "history": "", "FullName": "public String getAppId ()"}, "loadInvitablePlayers(com.google.android.gms.games.OnPlayersLoadedListener, int, boolean)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#OnPlayersLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."], ["int", "The number of entries to request for this initial page. Note that if cached data already exists, the returned buffer may contain more than this size, but it is guaranteed to contain at least this many if the collection contains enough records. This must be a value between 1 and 25."], ["boolean", "If true, this call will clear any locally cached data and attempt to fetch the latest data from the server. This would commonly be used for something like a user-initiated refresh. Normally, this should be set to false to gain advantages of data caching."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Load the initial page of players the currently signed-in player can invite to a multiplayer game, sorted alphabetically by name. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadInvitablePlayers (OnPlayersLoadedListener listener, int pageSize, boolean forceReload)"}, "getCurrentGame()": {"Returns": [["", "@B_com#google#android#gms#games#Game_E@ metadata for the current game. May be null if the metadata is not available locally."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Game getCurrentGame ()"}, "revealAchievement(java.lang.String)": {"Returns": [], "Parameters": [["String", "The achievement ID to reveal"]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#unlockAchievement_E@"], "Permissions": [], "Description": "Reveal a hidden achievement to the currently signed in player. If the achievement has already been unlocked, this will have no effect. This is the fire-and-forget form of the API. Use this form if you don't need to know the status of the operation immediately. For most applications, this will be the preferred API to use, though note that the update may not be sent to the server until the next sync. See @B_com#google#android#gms#games#GamesClient#revealAchievementImmediate_E@ if you need the operation to attempt to communicate to the server immediately or need to have the status code delivered to your application.", "history": "", "FullName": "public void revealAchievement (String id)"}, "setAchievementStepsImmediate(com.google.android.gms.games.achievement.OnAchievementUpdatedListener, java.lang.String, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#achievement#OnAchievementUpdatedListener_E@", "The listener that is called when the set operation is complete. The listener is called on the main thread."], ["String", "The ID of the achievement to modify."], ["int", "The number of steps to set the achievement to. Must be greater than 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an achievement to have at least the given number of steps completed. Calling this method while the achievement already has more steps than the provided value is a no-op. Once the achievement reaches the maximum number of steps, the achievement will automatically be unlocked, and any further mutation operations will be ignored. This form of the API will attempt to update the user's achievement on the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered.", "history": "", "FullName": "public void setAchievementStepsImmediate (OnAchievementUpdatedListener listener, String id, int numSteps)"}, "unlockAchievementImmediate(com.google.android.gms.games.achievement.OnAchievementUpdatedListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#achievement#OnAchievementUpdatedListener_E@", "The listener that is called when the unlock achievement is complete. The listener is called on the main thread."], ["String", "The ID of the achievement to unlock."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#revealAchievementImmediate_E@"], "Permissions": [], "Description": "Unlock an achievement for the currently signed in player. If the achievement is hidden this will reveal it to the player. This form of the API will attempt to update the user's achievement on the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered.", "history": "", "FullName": "public void unlockAchievementImmediate (OnAchievementUpdatedListener listener, String id)"}, "joinRoom(com.google.android.gms.games.multiplayer.realtime.RoomConfig)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@", "The real-time room configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Join a real-time room by accepting an invitation. The lifetime of the current game's connection to the room is bound to this @B_com#google#android#gms#games#GamesClient_E@'s lifecycle. When the client disconnects, the player will leave the room and any peer-to-peer connections for this player will be torn down. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onJoinedRoom_E@ to the given RoomUpdateListener in the @B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@. The listener is called on the main thread.", "history": "", "FullName": "public void joinRoom (RoomConfig config)"}, "signOut(com.google.android.gms.games.OnSignOutCompleteListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#OnSignOutCompleteListener_E@", "The listener that is called when sign-out is complete. The listener is called on the main thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously signs the current user out. This call doesn't disconnect the GamesClient. As no user is signed in after this call is completed, subsequent calls to this client will very likely fail. You should either call disconnect() or finish your Activity after this call. The listener is called when sign-out is complete. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before sign-out is complete, the listener will not be called.", "history": "", "FullName": "public void signOut (OnSignOutCompleteListener listener)"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#common#GooglePlayServicesClient#connect_E@"], "Permissions": [], "Description": "Connect to the games service. This method should be called from @B_android#app#Activity#onStart_E@ or @B_android#app#Fragment#onStart_E@. This method will return immediately, and @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ will be called if the connection is successful. The Bundle provided to onConnected may be null. If not null, it can contain the following keys: @B_com#google#android#gms#games#GamesClient#EXTRA_INVITATION_E@ if the user wanted to accept an invitation to a multiplayer game. The value contained here is an @B_com#google#android#gms#games#multiplayer#Invitation_E@ which can be accessed with @B_android#os#Bundle#getParcelable_E@.", "history": "", "FullName": "public void connect ()"}, "submitScoreImmediate(com.google.android.gms.games.leaderboard.OnScoreSubmittedListener, java.lang.String, long, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@", "@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@ to call when the score has been submitted."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."], ["String", "Optional metadata about this score. The value may contain no more than 64 URI-safe characters as defined by section 2.3 of RFC 3986."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@"], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API will attempt to submit the score to the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see", "history": "", "FullName": "public void submitScoreImmediate (OnScoreSubmittedListener listener, String leaderboardId, long score, String scoreTag)"}, "isConnected()": {"Returns": [["", "true if the client is connected to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is currently connected to the service, so that requests to other methods will succeed. Applications should guard client actions caused by the user with a call to this method.", "history": "", "FullName": "public boolean isConnected ()"}, "signOut()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously signs the current user out. This call doesn't disconnect the GamesClient. As no user is signed in after this call is completed, subsequent calls to this client will very likely fail. You should either call disconnect() or finish your Activity after this call.", "history": "", "FullName": "public void signOut ()"}, "getSelectPlayersIntent(int, int)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to display the player selector."]], "Parameters": [["int", "The minimum number of players to select (not including the current player)."], ["int", "The maximum number of players to select (not including the current player)."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#GamesClient#createRoom_E@"], "Permissions": [], "Description": "Returns an intent that will let the user select players to send an invitation to. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. The number of players passed in should be the desired number of additional players to select, not including the current player. So, for a game that can handle between 2 and 4 players, minPlayers would be 1 and maxPlayers would be 3. If the user canceled, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user selected players, the result will be @B_android#app#Activity#RESULT_OK_E@, and the data intent will contain the selected player IDs in @B_com#google#android#gms#games#GamesClient#EXTRA_PLAYERS_E@ and the minimum and maximum numbers of additional auto-match players in @B_com#google#android#gms#games#GamesClient#EXTRA_MIN_AUTOMATCH_PLAYERS_E@ and @B_com#google#android#gms#games#GamesClient#EXTRA_MAX_AUTOMATCH_PLAYERS_E@ respectively. The player IDs in @B_com#google#android#gms#games#GamesClient#EXTRA_PLAYERS_E@ will include only the other players selected, not the current player.", "history": "", "FullName": "public Intent getSelectPlayersIntent (int minPlayers, int maxPlayers)"}, "isConnectionCallbacksRegistered(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [["", "true if the specified listener is currently registered to receive connection events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection events.", "history": "", "FullName": "public boolean isConnectionCallbacksRegistered (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "getCurrentAccountName()": {"Returns": [["", "Account name for the currently selected account. May be null if an error occurred while communicating with the games service."]], "Parameters": [], "Throws": [["SecurityException", "If your app doesn't have the @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Get the name of the currently selected account. This is the account the user has chosen to use for Google Play Games. Note that the GamesClient must be connected to call this API, and your app must have <uses-permission android:name=\"android.permission.GET_ACCOUNTS\" /> declared in your manifest in order to use this method.", "history": "", "FullName": "public String getCurrentAccountName ()"}, "submitScoreImmediate(com.google.android.gms.games.leaderboard.OnScoreSubmittedListener, java.lang.String, long)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@", "@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@ to call when the score has been submitted."], ["String", "The leaderboard to submit the score to."], ["long", "The raw score value."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#leaderboard#OnScoreSubmittedListener_E@"], "Permissions": [], "Description": "Submit a score to a leaderboard for the currently signed in player. The score is ignored if it is worse (as defined by the leaderboard configuration) than a previously submitted score for the same player. This form of the API will attempt to submit the score to the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered. The meaning of the score value depends on the formatting of the leaderboard established in the developer console. Leaderboards support the following score formats: Fixed-point: score represents a raw value, and will be formatted based on the number of decimal places configured. A score of 1000 would be formatted as 1000, 100.0, or 10.00 for 0, 1, or 2 decimal places. Time: score represents an elapsed time in milliseconds. The value will be formatted as an appropriate time value. Currency: score represents a value in micro units. For example, in USD, a score of 100 would display as $0.0001, while a score of 1000000 would display as $1.00 For more details, please see", "history": "", "FullName": "public void submitScoreImmediate (OnScoreSubmittedListener listener, String leaderboardId, long score)"}, "unregisterInvitationListener()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters this client's invitation listener, if any. Any new invitations will generate status bar notifications as normal.", "history": "", "FullName": "public void unregisterInvitationListener ()"}, "loadInvitations(com.google.android.gms.games.multiplayer.OnInvitationsLoadedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#multiplayer#OnInvitationsLoadedListener_E@", "The listener that is called when the load is complete. The listener is called on the main thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asynchronously load the list of invitations for the current game. The result is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the result is ready it will not be delivered.", "history": "", "FullName": "public void loadInvitations (OnInvitationsLoadedListener listener)"}, "sendUnreliableRealTimeMessage(byte[], java.lang.String, java.util.List<java.lang.String>)": {"Returns": [["", "@B_com#google#android#gms#games#GamesClient#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#GamesClient#STATUS_REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["List", "One or more participant IDs to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to one or more participants in a real-time room. The message delivery is not reliable and will not report status after completion. Throws an @B_java#lang#IllegalArgumentException_E@ if any participants in recipientParticipantIds are not valid or belong to the current player. The maximum message size supported is @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes.", "history": "", "FullName": "public int sendUnreliableRealTimeMessage (byte[] messageData, String roomId, List<String> recipientParticipantIds)"}, "sendUnreliableRealTimeMessage(byte[], java.lang.String, java.lang.String)": {"Returns": [["", "@B_com#google#android#gms#games#GamesClient#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#GamesClient#STATUS_REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["String", "The participant ID to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to a participant in a real-time room. The message delivery is not reliable and will not report status after completion. Throws an @B_java#lang#IllegalArgumentException_E@ if recipientParticipantId is not a valid participant or belongs to the current player. The maximum message size supported is @B_com#google#android#gms#games#GamesClient#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes.", "history": "", "FullName": "public int sendUnreliableRealTimeMessage (byte[] messageData, String roomId, String recipientParticipantId)"}, "registerConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#games#GamesClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection failed events from this GooglePlayServicesClient. Unlike @B_com#google#android#gms#common#GooglePlayServicesClient#registerConnectionCallbacks_E@, if the service is not already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ method will not be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionFailedListener_E@ to avoid leaking resources. If the specified listener is already registered to receive connection failed events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "setAchievementSteps(java.lang.String, int)": {"Returns": [], "Parameters": [["String", "The ID of the achievement to modify."], ["int", "The number of steps to set the achievement to. Must be greater than 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an achievement to have at least the given number of steps completed. Calling this method while the achievement already has more steps than the provided value is a no-op. Once the achievement reaches the maximum number of steps, the achievement will automatically be unlocked, and any further mutation operations will be ignored. This is the fire-and-forget form of the API. Use this form if you don't need to know the status of the operation immediately. For most applications, this will be the preferred API to use, though note that the update may not be sent to the server until the next sync. See @B_com#google#android#gms#games#GamesClient#setAchievementStepsImmediate_E@ if you need the operation to attempt to communicate to the server immediately or need to have the status code delivered to your application.", "history": "", "FullName": "public void setAchievementSteps (String id, int numSteps)"}, "registerConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#games#GamesClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection events from this GooglePlayServicesClient. If the service is already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method will be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionCallbacks_E@ to avoid leaking resources. If the specified listener is already registered to receive connection events, this method will not add a duplicate entry for the same listener, but @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method if currently connected. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "incrementAchievementImmediate(com.google.android.gms.games.achievement.OnAchievementUpdatedListener, java.lang.String, int)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#games#achievement#OnAchievementUpdatedListener_E@", "The listener that is called when the increment achievement is complete. The listener is called on the main thread."], ["String", "The ID of the achievement to increment."], ["int", "The number of steps to increment by. Must be greater than 0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Increments an achievement by the given number of steps. The achievement must be an incremental achievement. Once an achievement reaches at least the maximum number of steps, it will be unlocked automatically. Any further increments will be ignored. This form of the API will attempt to update the user's achievement on the server immediately, and will use the provided listener to inform the caller of the result of the operation. The status code to indicate the success or failure of the operation is delivered to the given listener on the main thread. If @B_com#google#android#gms#games#GamesClient#disconnect_E@ is called before the operation is completed, the status code will not be delivered.", "history": "", "FullName": "public void incrementAchievementImmediate (OnAchievementUpdatedListener listener, String id, int numSteps)"}, "declineRoomInvitation(java.lang.String)": {"Returns": [], "Parameters": [["String", "The ID of the invitation to decline."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decline an invitation for a real-time room.", "history": "", "FullName": "public void declineRoomInvitation (String invitationId)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.games.GamesClient", "ClassDesc": "Main public API entry point for the games client."}