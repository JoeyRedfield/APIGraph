{"Functions": {"Button(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML Button tag being used to inflate the view."]], "Throws": [], "SeeAlso": ["@B_android#widget#Button#Button_E@", "@B_android#view#View#View_E@"], "Permissions": [], "Description": "@B_android#view#LayoutInflater_E@ calls this constructor when inflating a Button from XML. The attributes defined by the current theme's @B_android#R#attr#buttonStyle_E@ override base view attributes. You typically do not call this constructor to create your own button instance in code. However, you must override this constructor when", "history": "Added in API level 1", "FullName": "public Button (Context context, AttributeSet attrs)"}, "Button(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the Button is running in, through which it can access the current theme, resources, etc."]], "Throws": [], "SeeAlso": ["@B_android#widget#Button#Button_E@"], "Permissions": [], "Description": "Simple constructor to use when creating a button from code.", "history": "Added in API level 1", "FullName": "public Button (Context context)"}, "Button(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the Button is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML Button tag that is inflating the view."], ["int", "int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style\u2019s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values."]], "Throws": [], "SeeAlso": ["@B_android#widget#Button#Button_E@", "@B_android#view#View#View_E@"], "Permissions": [], "Description": "This constructor allows a Button subclass to use its own class-specific base style from a theme attribute when inflating. The attributes defined by the current theme's defStyleAttr override base view attributes. For Button's base view attributes see @B_android#R#styleable#Button_E@, @B_android#R#styleable#TextView_E@, @B_android#R#styleable#View_E@.", "history": "Added in API level 1", "FullName": "public Button (Context context, AttributeSet attrs, int defStyleAttr)"}, "onResolvePointerIcon(android.view.MotionEvent,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent from a mouse"], ["int", "int: The index of the pointer for which to retrieve the @B_android#view#PointerIcon_E@. This will be between 0 and @B_android#view#MotionEvent#getPointerCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews).", "history": "Added in API level 24", "FullName": "public PointerIcon onResolvePointerIcon (MotionEvent event, int pointerIndex)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "Button(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the Button is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML Button tag that is inflating the view."], ["int", "int: The resource identifier of an attribute in the current theme whose value is the the resource id of a style. The specified style\u2019s attribute values serve as default values for the button. Set this parameter to 0 to avoid use of default values."], ["int", "int: The identifier of a style resource that supplies default values for the button, used only if defStyleAttr is 0 or cannot be found in the theme. Set this parameter to 0 to avoid use of default values."]], "Throws": [], "SeeAlso": ["@B_android#widget#Button#Button_E@", "@B_android#view#View#View_E@"], "Permissions": [], "Description": "This constructor allows a Button subclass to use its own class-specific base style from either a theme attribute or style resource when inflating. To see how the final value of a particular attribute is resolved based on your inputs to this constructor, see @B_android#view#View#View_E@.", "history": "Added in API level 21", "FullName": "public Button (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@"], "ClassName": "android.widget.Button", "ClassDesc": "A user interface element the user can tap or click to perform an action. To display a button in an activity, add a button to the activity's layout XML file: To specify an action when the button is pressed, set a click listener on the button object in the corresponding activity code: The above snippet creates an instance of @B_android#view#View#OnClickListener_E@ and wires the listener to the button using @B_android#view#View#setOnClickListener_E@. As a result, the system executes the code you write in onClick(View) after the user presses the button. The system executes the code in onClick on the Every button is styled using the system's default button background, which is often different from one version of the platform to another. If you are not satisfied with the default button style, you can customize it. For more details and code samples, see the For all XML style attributes available on Button see @B_android#R#styleable#Button_E@, @B_android#R#styleable#TextView_E@, @B_android#R#styleable#View_E@. See the"}