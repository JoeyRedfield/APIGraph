{"Functions": {"EventListenerProxy(java.util.EventListener)": {"Returns": [], "Parameters": [["@B_java#util#EventListener_E@", "the listener wrapped by this proxy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new EventListener proxy instance.", "history": "Added in API level 1", "FullName": "public EventListenerProxy (EventListener listener)"}, "EventListenerProxy(T)": {"Returns": [], "Parameters": [["T", "T: the listener object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a proxy for the specified listener.", "history": "Added in API level 1", "FullName": "public EventListenerProxy (T listener)"}, "getListener()": {"Returns": [["T", "the listener associated with the proxy"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the listener associated with the proxy.", "history": "Added in API level 1", "FullName": "public T getListener ()"}}, "Inheritance": [], "ClassName": "@B_java#util#EventListener_E@", "ClassDesc": "An abstract wrapper class for an EventListener class which associates a set of additional parameters with the listener. Subclasses must provide the storage and accessor methods for the additional arguments or parameters. For example, a bean which supports named properties would have a two argument method signature for adding a PropertyChangeListener for a property: PropertyChangeListeners which are also PropertyChangeListenerProxy objects. If the calling method is interested in retrieving the named property then it would have to test the element to see if it is a proxy class."}