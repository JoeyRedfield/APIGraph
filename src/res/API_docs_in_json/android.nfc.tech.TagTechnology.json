{"Functions": {"getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "Added in API level 10", "FullName": "public abstract Tag getTag ()"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "Added in API level 10", "FullName": "public abstract boolean isConnected ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#nfc#tech#TagTechnology#connect_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public abstract void close ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or connect is canceled"]], "SeeAlso": ["@B_android#nfc#tech#TagTechnology#close_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public abstract void connect ()"}}, "Inheritance": [], "ClassName": "android.nfc.tech.TagTechnology", "ClassDesc": "@B_android#nfc#tech#TagTechnology_E@ is an interface to a technology in a @B_android#nfc#Tag_E@. Obtain a @B_android#nfc#tech#TagTechnology_E@ implementation by calling the static method get() on the implementation class. NFC tags are based on a number of independently developed technologies and offer a wide range of capabilities. The @B_android#nfc#tech#TagTechnology_E@ implementations provide access to these different technologies and capabilities. Some sub-classes map to technology specification (for example @B_android#nfc#tech#NfcA_E@, @B_android#nfc#tech#IsoDep_E@, others map to pseudo-technologies or capabilities (for example @B_android#nfc#tech#Ndef_E@, @B_android#nfc#tech#NdefFormatable_E@). It is mandatory for all Android NFC devices to provide the following @B_android#nfc#tech#TagTechnology_E@ implementations. @B_android#nfc#tech#NfcA_E@ (also known as ISO 14443-3A) @B_android#nfc#tech#NfcB_E@ (also known as ISO 14443-3B) @B_android#nfc#tech#NfcF_E@ (also known as JIS 6319-4) @B_android#nfc#tech#NfcV_E@ (also known as ISO 15693) @B_android#nfc#tech#IsoDep_E@ @B_android#nfc#tech#Ndef_E@ on NFC Forum Type 1, Type 2, Type 3 or Type 4 compliant tags It is optional for Android NFC devices to provide the following @B_android#nfc#tech#TagTechnology_E@ implementations. If it is not provided, the Android device will never enumerate that class via @B_android#nfc#Tag#getTechList_E@. @B_android#nfc#tech#MifareClassic_E@ @B_android#nfc#tech#MifareUltralight_E@ @B_android#nfc#tech#NfcBarcode_E@ @B_android#nfc#tech#NdefFormatable_E@ must only be enumerated on tags for which this Android device is capable of formatting. Proprietary knowledge is often required to format a tag to make it NDEF compatible. @B_android#nfc#tech#TagTechnology_E@ implementations provide methods that fall into two classes: cached getters and I/O operations. get or is) return properties of the tag, as determined at discovery time. These methods will never block or cause RF activity, and do not require @B_android#nfc#tech#TagTechnology#connect_E@ to have been called. They also never update, for example if a property is changed by an I/O operation with a tag then the cached getter will still return the result from tag discovery time. @B_android#nfc#tech#TagTechnology#connect_E@ must be called before using any other I/O operation. @B_android#nfc#tech#TagTechnology#close_E@ must be called after completing I/O operations with a @B_android#nfc#tech#TagTechnology_E@, and it will cancel all other blocked I/O operations on other threads (including @B_android#nfc#tech#TagTechnology#connect_E@ with @B_java#io#IOException_E@. Only one @B_android#nfc#tech#TagTechnology_E@ can be connected at a time. Other calls to @B_android#nfc#tech#TagTechnology#connect_E@ will return @B_java#io#IOException_E@. I/O operations may block, and should never be called on the main application thread. @B_android#Manifest#permission#NFC_E@ permission."}