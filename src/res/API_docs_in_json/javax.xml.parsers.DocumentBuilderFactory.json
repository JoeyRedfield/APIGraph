{"Functions": {"isIgnoringElementContentWhitespace()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which ignore ignorable whitespace in element content; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which ignore ignorable whitespace in element content.", "history": "Added in API level 1", "FullName": "public boolean isIgnoringElementContentWhitespace ()"}, "isExpandEntityReferences()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which expand entity reference nodes; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which expand entity reference nodes.", "history": "Added in API level 1", "FullName": "public boolean isExpandEntityReferences ()"}, "isXIncludeAware()": {"Returns": [["boolean", "current state of XInclude processing"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Get state of XInclude processing.", "history": "Added in API level 1", "FullName": "public boolean isXIncludeAware ()"}, "setAttribute(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["@B_java#lang#Object_E@", "Object: The value of the attribute."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown if the underlying implementation doesn't recognize the attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to set specific attributes on the underlying implementation.", "history": "Added in API level 1", "FullName": "public abstract void setAttribute (String name, Object value)"}, "setAttribute(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["@B_java#lang#Object_E@", "Object: The value of the attribute."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown if the underlying implementation doesn't recognize the attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to set specific attributes on the underlying implementation.", "history": "added in API level 1", "FullName": "public abstract void setAttribute (String name, Object value)"}, "setIgnoringComments(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: boolean value to ignore comments during processing"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will ignore comments. By default the value of this is set to false .", "history": "Added in API level 1", "FullName": "public void setIgnoringComments (boolean ignoreComments)"}, "setNamespaceAware(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced will provide support for XML namespaces; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will provide support for XML namespaces. By default the value of this is set to false", "history": "Added in API level 1", "FullName": "public void setNamespaceAware (boolean awareness)"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."], ["boolean", "boolean: Is feature state true or false."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support this feature."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. An @B_javax#xml#parsers#ParserConfigurationException_E@ is thrown if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support the feature. It is possible for an DocumentBuilderFactory to expose a feature value but be unable to change its state. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#parsers#DocumentBuilder#setErrorHandler_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "Added in API level 1", "FullName": "public abstract void setFeature (String name, boolean value)"}, "setCoalescing(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will convert CDATA nodes to Text nodes and append it to the adjacent (if any) text node. By default the value of this is set to false", "history": "Added in API level 1", "FullName": "public void setCoalescing (boolean coalescing)"}, "setExpandEntityReferences(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced will expand entity reference nodes; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will expand entity reference nodes. By default the value of this is set to true", "history": "Added in API level 1", "FullName": "public void setExpandEntityReferences (boolean expandEntityRef)"}, "newDocumentBuilder()": {"Returns": [["@B_javax#xml#parsers#DocumentBuilder_E@", "A new instance of a DocumentBuilder."]], "Parameters": [], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if a DocumentBuilder cannot be created which satisfies the configuration requested."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of a @B_javax#xml#parsers#DocumentBuilder_E@ using the currently configured parameters.", "history": "Added in API level 1", "FullName": "public abstract DocumentBuilder newDocumentBuilder ()"}, "isIgnoringComments()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which ignores comments; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which ignores comments.", "history": "Added in API level 1", "FullName": "public boolean isIgnoringComments ()"}, "isNamespaceAware()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which are namespace aware; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which are namespace aware.", "history": "Added in API level 1", "FullName": "public boolean isNamespaceAware ()"}, "newInstance(java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_javax#xml#parsers#DocumentBuilderFactory_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [["@B_javax#xml#parsers#FactoryConfigurationError_E@", "if factoryClassName is not available or cannot be instantiated."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of the named implementation of DocumentBuilderFactory.", "history": "Added in API level 9", "FullName": "public static DocumentBuilderFactory newInstance (String factoryClassName, ClassLoader classLoader)"}, "setXIncludeAware(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set XInclude processing to true or false"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Set state of XInclude processing. If XInclude markup is found in the document instance, should it be processed as specified in XInclude processing defaults to false.", "history": "Added in API level 1", "FullName": "public void setXIncludeAware (boolean state)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."], ["boolean", "boolean: Is feature state true or false."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support this feature."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set a feature for this DocumentBuilderFactory and DocumentBuilders created by this factory. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. An @B_javax#xml#parsers#ParserConfigurationException_E@ is thrown if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support the feature. It is possible for an DocumentBuilderFactory to expose a feature value but be unable to change its state. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#parsers#DocumentBuilder#setErrorHandler_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "added in API level 1", "FullName": "public abstract void setFeature (String name, boolean value)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "State of the named feature."]], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support this feature."]], "SeeAlso": [], "Permissions": [], "Description": "Get the state of the named feature. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. An @B_javax#xml#parsers#ParserConfigurationException_E@ is thrown if this DocumentBuilderFactory or the DocumentBuilders it creates cannot support the feature. It is possible for an DocumentBuilderFactory to expose a feature value but be unable to change its state.", "history": "Added in API level 1", "FullName": "public abstract boolean getFeature (String name)"}, "getSchema()": {"Returns": [["@B_javax#xml#validation#Schema_E@", "the @B_javax#xml#validation#Schema_E@ object that was last set through the @B_javax#xml#parsers#DocumentBuilderFactory#setSchema_E@ method, or null if the method was not invoked since a @B_javax#xml#parsers#DocumentBuilderFactory_E@ is created."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_javax#xml#validation#Schema_E@ object specified through the @B_javax#xml#parsers#DocumentBuilderFactory#setSchema_E@ method.", "history": "Added in API level 8", "FullName": "public Schema getSchema ()"}, "isCoalescing()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which converts CDATA nodes to Text nodes and appends it to the adjacent (if any) Text node.", "history": "Added in API level 1", "FullName": "public boolean isCoalescing ()"}, "DocumentBuilderFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected DocumentBuilderFactory ()"}, "isValidating()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which validate the XML content during parse; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse.", "history": "Added in API level 1", "FullName": "public boolean isValidating ()"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "value The value of the attribute."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown if the underlying implementation doesn't recognize the attribute."]], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to retrieve specific attributes on the underlying implementation.", "history": "Added in API level 1", "FullName": "public abstract Object getAttribute (String name)"}, "newInstance()": {"Returns": [["@B_javax#xml#parsers#DocumentBuilderFactory_E@", "a new DocumentBuilderFactory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns Android's implementation of DocumentBuilderFactory. Unlike other Java implementations, this method does not consult system properties, property files, or the services API.", "history": "Added in API level 1", "FullName": "public static DocumentBuilderFactory newInstance ()"}, "setIgnoringElementContentWhitespace(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser created must eliminate whitespace in the element content when parsing XML documents; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parsers created by this factory must eliminate whitespace in element content (sometimes known loosely as 'ignorable whitespace') when parsing XML documents (see XML Rec 2.10). Note that only whitespace which is directly contained within element content that has an element only content model (see XML Rec 3.2.1) will be eliminated. Due to reliance on the content model this setting requires the parser to be in validating mode. By default the value of this is set to false.", "history": "Added in API level 1", "FullName": "public void setIgnoringElementContentWhitespace (boolean whitespace)"}, "setValidating(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced will validate documents as they are parsed; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will validate documents as they are parsed. By default the value of this is set to false. Note that \"the validation\" here means To use modern schema languages such as W3C XML Schema or RELAX NG instead of DTD, you can configure your parser to be a non-validating parser by leaving the @B_javax#xml#parsers#DocumentBuilderFactory#setValidating_E@ method @B_javax#xml#parsers#DocumentBuilderFactory#setSchema_E@ method to associate a schema to a parser.", "history": "Added in API level 1", "FullName": "public void setValidating (boolean validating)"}, "setSchema(javax.xml.validation.Schema)": {"Returns": [], "Parameters": [["@B_javax#xml#validation#Schema_E@", "Schema: Schema to use or null to remove a schema."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_javax#xml#validation#Schema_E@ to be used by parsers created from this factory. When a @B_javax#xml#validation#Schema_E@ is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application. When errors are found by the validator, the parser is responsible to report them to the user-specified @B_org#xml#sax#ErrorHandler_E@ (or if the error handler is not set, ignore them or throw them), just like any other errors found by the parser itself. In other words, if the user-specified @B_org#xml#sax#ErrorHandler_E@ is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules. A validator may modify the outcome of a parse (for example by adding default values that were missing in documents), and a parser is responsible to make sure that the application will receive modified DOM trees. Initially, null is set as the @B_javax#xml#validation#Schema_E@. This processing will take effect even if the @B_javax#xml#parsers#DocumentBuilderFactory#isValidating_E@ method returns It is an error to use the http://java.sun.com/xml/jaxp/properties/schemaSource property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage property in conjunction with a @B_javax#xml#validation#Schema_E@ object. Such configuration will cause a @B_javax#xml#parsers#ParserConfigurationException_E@ exception when the @B_javax#xml#parsers#DocumentBuilderFactory#newDocumentBuilder_E@ is invoked. A parser must be able to work with any @B_javax#xml#validation#Schema_E@ implementation. However, parsers and schemas are allowed to use implementation-specific custom mechanisms as long as they yield the result described in the specification.", "history": "Added in API level 8", "FullName": "public void setSchema (Schema schema)"}}, "Inheritance": [], "ClassName": "javax.xml.parsers.DocumentBuilderFactory", "ClassDesc": "Defines a factory API that enables applications to obtain a parser that produces DOM object trees from XML documents."}