{"Functions": {"setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 24", "FullName": "public abstract ServerSocketChannel setOption (SocketOption<T> name, T value)"}, "setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 24", "FullName": "public abstract ServerSocketChannel setOption (SocketOption<T> name, T value)"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The local address to bind the socket, or null to bind to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", ""], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. An invocation of this method is equivalent to the following:", "history": "Added in API level 24", "FullName": "public final ServerSocketChannel bind (SocketAddress local)"}, "accept()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "The socket channel for the new connection, or null if this channel is in non-blocking mode and no connection is available to be accepted"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the accept operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the accept operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#nio#channels#NotYetBoundException_E@", "If this channel's socket has not yet been bound"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the remote endpoint of the new connection"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a connection made to this channel's socket. If this channel is in non-blocking mode then this method will immediately return The socket channel returned by this method, if any, will be in blocking mode regardless of the blocking mode of this channel. This method performs exactly the same security checks as the @B_java#net#ServerSocket#accept_E@ method of the @B_java#net#ServerSocket_E@ class. That is, if a security manager has been installed then for each new connection this method verifies that the address and port number of the connection's remote endpoint are permitted by the security manager's @B_java#lang#SecurityManager#checkAccept_E@ method.", "history": "Added in API level 1", "FullName": "public abstract SocketChannel accept ()"}, "bind(java.net.SocketAddress,int)": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind to an automatically assigned socket address"], ["int", "int: The maximum number of pending connections"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", "If the socket is already bound"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given address is not supported"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. The backlog parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the backlog parameter has the value 0, or a negative value, then an implementation specific default is used.", "history": "Added in API level 24", "FullName": "public abstract ServerSocketChannel bind (SocketAddress local, int backlog)"}, "getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port of the channel's socket is returned.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "bind(java.net.SocketAddress, int)": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind to an automatically assigned socket address"], ["int", "int: The maximum number of pending connections"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", "If the socket is already bound"], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", "If the type of the given address is not supported"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address and configures the socket to listen for connections. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. The backlog parameter is the maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. If the backlog parameter has the value 0, or a negative value, then an implementation specific default is used.", "history": "added in API level 24", "FullName": "public abstract ServerSocketChannel bind (SocketAddress local, int backlog)"}, "validOps()": {"Returns": [["int", "The valid-operation set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an operation set identifying this channel's supported operations. Server-socket channels only support the accepting of new connections, so this method returns @B_java#nio#channels#SelectionKey#OP_ACCEPT_E@.", "history": "Added in API level 1", "FullName": "public final int validOps ()"}, "open()": {"Returns": [["@B_java#nio#channels#ServerSocketChannel_E@", "A new socket channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a server-socket channel. The new channel is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openServerSocketChannel_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object. The new channel's socket is initially unbound; it must be bound to a specific address via one of its socket's @B_java#net#ServerSocket#bind_E@ methods before connections can be accepted.", "history": "Added in API level 1", "FullName": "public static ServerSocketChannel open ()"}, "socket()": {"Returns": [["@B_java#net#ServerSocket_E@", "A server socket associated with this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a server socket associated with this channel. The returned object will not declare any public methods that are not declared in the @B_java#net#ServerSocket_E@ class.", "history": "Added in API level 1", "FullName": "public abstract ServerSocket socket ()"}, "ServerSocketChannel(java.nio.channels.spi.SelectorProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#SelectorProvider_E@", "SelectorProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected ServerSocketChannel (SelectorProvider provider)"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@", "@B_java#nio#channels#SelectableChannel_E@", "@B_java#nio#channels#spi#AbstractSelectableChannel_E@"], "ClassName": "java.nio.channels.ServerSocketChannel", "ClassDesc": "A selectable channel for stream-oriented listening sockets. A server-socket channel is created by invoking the @B_java#nio#channels#ServerSocketChannel#open_E@ method of this class. It is not possible to create a channel for an arbitrary, pre-existing @B_java#net#ServerSocket_E@. A newly-created server-socket channel is open but not yet bound. An attempt to invoke the @B_java#nio#channels#ServerSocketChannel#accept_E@ method of an unbound server-socket channel will cause a @B_java#nio#channels#NotYetBoundException_E@ to be thrown. A server-socket channel can be bound by invoking one of the @B_java#nio#channels#ServerSocketChannel#bind_E@ methods defined by this class. Socket options are configured using the @B_java#nio#channels#ServerSocketChannel#setOption_E@ method. Server-socket channels support the following options: Server-socket channels are safe for use by multiple concurrent threads."}