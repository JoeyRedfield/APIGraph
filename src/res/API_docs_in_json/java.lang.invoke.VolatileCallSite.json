{"Functions": {"getTarget()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the linkage state of this call site, a method handle which can change over time"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#invoke#VolatileCallSite#setTarget_E@"], "Permissions": [], "Description": "Returns the target method of the call site, which behaves like a volatile field of the VolatileCallSite. The interactions of getTarget with memory are the same as of a read from a volatile field. In particular, the current thread is required to issue a fresh read of the target from memory, and must not fail to see a recent update to the target by another thread.", "history": "Added in API level 26", "FullName": "public final MethodHandle getTarget ()"}, "VolatileCallSite(java.lang.invoke.MethodType)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodType_E@", "MethodType: the method type that this call site will have"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed type is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a call site with a volatile binding to its target. The initial target is set to a method handle of the given type which will throw an IllegalStateException if called.", "history": "Added in API level 26", "FullName": "public VolatileCallSite (MethodType type)"}, "dynamicInvoker()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which always invokes this call site's current target"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site. This method is equivalent to the following code:", "history": "Added in API level 26", "FullName": "public final MethodHandle dynamicInvoker ()"}, "VolatileCallSite(java.lang.invoke.MethodHandle)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the method handle that will be the initial target of the call site"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed target is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a call site with a volatile binding to its target. The target is set to the given value.", "history": "Added in API level 26", "FullName": "public VolatileCallSite (MethodHandle target)"}, "setTarget(java.lang.invoke.MethodHandle)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the new target"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed new target is null"], ["@B_java#lang#invoke#WrongMethodTypeException_E@", "if the proposed new target has a method type that differs from the previous target"]], "SeeAlso": ["@B_java#lang#invoke#VolatileCallSite#getTarget_E@"], "Permissions": [], "Description": "Updates the target method of this call site, as a volatile variable. The type of the new target must agree with the type of the old target. The interactions with memory are the same as of a write to a volatile field. In particular, any threads is guaranteed to see the updated target the next time it calls getTarget.", "history": "Added in API level 26", "FullName": "public void setTarget (MethodHandle newTarget)"}}, "Inheritance": ["@B_java#lang#invoke#CallSite_E@"], "ClassName": "java.lang.invoke.VolatileCallSite", "ClassDesc": "A VolatileCallSite is a @B_java#lang#invoke#CallSite_E@ whose target acts like a volatile variable. An invokedynamic instruction linked to a VolatileCallSite sees updates to its call site target immediately, even if the update occurs in another thread. There may be a performance penalty for such tight coupling between threads. In other respects, a VolatileCallSite is interchangeable with MutableCallSite."}