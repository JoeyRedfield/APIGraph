{"Functions": {"getLocalAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The SocketAddress that the socket is bound to, or the SocketAddress representing the loopback address if denied by the security manager, or null if the channel's socket is not bound"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket address that this channel's socket is bound to. Where the channel is @B_java#nio#channels#NetworkChannel#bind_E@ to an Internet Protocol socket address then the return value from this method is of type @B_java#net#InetSocketAddress_E@. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port of the channel's socket is returned.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getLocalAddress ()"}, "write(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a datagram to this channel. This method may only be invoked if this channel's socket is connected, in which case it sends datagrams directly to the socket's peer. Otherwise it behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "disconnect()": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "This datagram channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Disconnects this channel's socket. The channel's socket is configured so that it can receive datagrams from, and sends datagrams to, any remote address so long as the security manager, if installed, permits it. This method may be invoked at any time. It will not have any effect on read or write operations that are already in progress at the moment that it is invoked. If this channel's socket is not connected, or if the channel is closed, then invoking this method has no effect.", "history": "Added in API level 1", "FullName": "public abstract DatagramChannel disconnect ()"}, "write(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a datagram to this channel. This method may only be invoked if this channel's socket is connected, in which case it sends datagrams directly to the socket's peer. Otherwise it behaves exactly as specified in the @B_java#nio#channels#WritableByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract int write (ByteBuffer src)"}, "send(java.nio.ByteBuffer, java.net.SocketAddress)": {"Returns": [["int", "The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer containing the datagram to be sent"], ["@B_java#net#SocketAddress_E@", "SocketAddress: The address to which the datagram is to be sent"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the read operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit datagrams to be sent to the given address"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sends a datagram via this channel. If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given buffer are transmitted as a single datagram to the given target address. The datagram is transferred from the byte buffer as if by a regular @B_java#nio#channels#WritableByteChannel#write_E@ operation. This method performs exactly the same security checks as the @B_java#net#DatagramSocket#send_E@ method of the @B_java#net#DatagramSocket_E@ class. That is, if the socket is not connected to a specific remote address and a security manager has been installed then for each datagram sent this method verifies that the target address and port number are permitted by the security manager's @B_java#lang#SecurityManager#checkConnect_E@ method. The overhead of this security check can be avoided by first connecting the socket via the @B_java#nio#channels#DatagramChannel#connect_E@ method. This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete. If this channel's socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if by invoking the @B_java#nio#channels#DatagramChannel#bind_E@ method with a parameter of null.", "history": "added in API level 1", "FullName": "public abstract int send (ByteBuffer src, SocketAddress target)"}, "connect(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "This datagram channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The remote address to which this channel is to be connected"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the connect operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the connect operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit access to the given remote address"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this channel's socket. The channel's socket is configured so that it only receives datagrams from, and sends datagrams to, the given remote This method performs exactly the same security checks as the @B_java#net#DatagramSocket#connect_E@ method of the @B_java#net#DatagramSocket_E@ class. That is, if a security manager has been installed then this method verifies that its @B_java#lang#SecurityManager#checkAccept_E@ and @B_java#lang#SecurityManager#checkConnect_E@ methods permit datagrams to be received from and sent to, respectively, the given remote address. This method may be invoked at any time. It will not have any effect on read or write operations that are already in progress at the moment that it is invoked. If this channel's socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if invoking the @B_java#nio#channels#DatagramChannel#bind_E@ method with a parameter of null.", "history": "Added in API level 1", "FullName": "public abstract DatagramChannel connect (SocketAddress remote)"}, "setOption(java.net.SocketOption<T>, T)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "added in API level 24", "FullName": "public abstract DatagramChannel setOption (SocketOption<T> name, T value)"}, "write(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a datagram to this channel. This method may only be invoked if this channel's socket is connected, in which case it sends datagrams directly to the socket's peer. Otherwise it behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "read(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a datagram from this channel. This method may only be invoked if this channel's socket is connected, and it only accepts datagrams from the socket's peer. If there are more bytes in the datagram than remain in the given buffers then the remainder of the datagram is silently discarded. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}, "DatagramChannel(java.nio.channels.spi.SelectorProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#SelectorProvider_E@", "SelectorProvider: The provider that created this channel"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected DatagramChannel (SelectorProvider provider)"}, "getRemoteAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "The remote address; null if the channel's socket is not connected"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If the channel is closed"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the remote address to which this channel's socket is connected.", "history": "Added in API level 24", "FullName": "public abstract SocketAddress getRemoteAddress ()"}, "write(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a datagram to this channel. This method may only be invoked if this channel's socket is connected, in which case it sends datagrams directly to the socket's peer. Otherwise it behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public final long write (ByteBuffer[] srcs)"}, "validOps()": {"Returns": [["int", "The valid-operation set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an operation set identifying this channel's supported operations. Datagram channels support reading and writing, so this method returns @B_java#nio#channels#SelectionKey#OP_READ_E@ @B_java#nio#channels#SelectionKey#OP_WRITE_E@", "history": "Added in API level 1", "FullName": "public final int validOps ()"}, "socket()": {"Returns": [["@B_java#net#DatagramSocket_E@", "A datagram socket associated with this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a datagram socket associated with this channel. The returned object will not declare any public methods that are not declared in the @B_java#net#DatagramSocket_E@ class.", "history": "Added in API level 1", "FullName": "public abstract DatagramSocket socket ()"}, "setOption(java.net.SocketOption<T>,T)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketOption_E@", "SocketOption: The socket option"], ["T", "T: The value of the socket option. A value of null may be a valid value for some socket options."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a socket option.", "history": "Added in API level 24", "FullName": "public abstract DatagramChannel setOption (SocketOption<T> name, T value)"}, "read(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a datagram from this channel. This method may only be invoked if this channel's socket is connected, and it only accepts datagrams from the socket's peer. If there are more bytes in the datagram than remain in the given buffers then the remainder of the datagram is silently discarded. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public final long read (ByteBuffer[] dsts)"}, "isConnected()": {"Returns": [["boolean", "true if, and only if, this channel's socket is @B_java#nio#channels#spi#AbstractInterruptibleChannel#isOpen_E@ and connected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel's socket is connected.", "history": "Added in API level 1", "FullName": "public abstract boolean isConnected ()"}, "read(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a datagram from this channel. This method may only be invoked if this channel's socket is connected, and it only accepts datagrams from the socket's peer. If there are more bytes in the datagram than remain in the given buffer then the remainder of the datagram is silently discarded. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ReadableByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract int read (ByteBuffer dst)"}, "send(java.nio.ByteBuffer,java.net.SocketAddress)": {"Returns": [["int", "The number of bytes sent, which will be either the number of bytes that were remaining in the source buffer when this method was invoked or, if this channel is non-blocking, may be zero if there was insufficient room for the datagram in the underlying output buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer containing the datagram to be sent"], ["@B_java#net#SocketAddress_E@", "SocketAddress: The address to which the datagram is to be sent"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the read operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit datagrams to be sent to the given address"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sends a datagram via this channel. If this channel is in non-blocking mode and there is sufficient room in the underlying output buffer, or if this channel is in blocking mode and sufficient room becomes available, then the remaining bytes in the given buffer are transmitted as a single datagram to the given target address. The datagram is transferred from the byte buffer as if by a regular @B_java#nio#channels#WritableByteChannel#write_E@ operation. This method performs exactly the same security checks as the @B_java#net#DatagramSocket#send_E@ method of the @B_java#net#DatagramSocket_E@ class. That is, if the socket is not connected to a specific remote address and a security manager has been installed then for each datagram sent this method verifies that the target address and port number are permitted by the security manager's @B_java#lang#SecurityManager#checkConnect_E@ method. The overhead of this security check can be avoided by first connecting the socket via the @B_java#nio#channels#DatagramChannel#connect_E@ method. This method may be invoked at any time. If another thread has already initiated a write operation upon this channel, however, then an invocation of this method will block until the first operation is complete. If this channel's socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if by invoking the @B_java#nio#channels#DatagramChannel#bind_E@ method with a parameter of null.", "history": "Added in API level 1", "FullName": "public abstract int send (ByteBuffer src, SocketAddress target)"}, "open()": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "A new datagram channel"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a datagram channel. The new channel is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openDatagramChannel_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object. The channel will not be connected. The @B_java#net#ProtocolFamily_E@ of the channel's socket is platform (and possibly configuration) dependent and therefore unspecified. The @B_java#nio#channels#DatagramChannel#open_E@ allows the protocol family to be selected when opening a datagram channel, and should be used to open datagram channels that are intended for Internet Protocol multicasting.", "history": "Added in API level 1", "FullName": "public static DatagramChannel open ()"}, "bind(java.net.SocketAddress)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "This channel"]], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: The address to bind the socket, or null to bind the socket to an automatically assigned socket address"]], "Throws": [["@B_java#nio#channels#AlreadyBoundException_E@", ""], ["@B_java#nio#channels#UnsupportedAddressTypeException_E@", ""], ["@B_java#nio#channels#ClosedChannelException_E@", ""], ["@B_java#io#IOException_E@", ""], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and its @B_java#lang#SecurityManager#checkListen_E@ method denies the operation"]], "SeeAlso": [], "Permissions": [], "Description": "Binds the channel's socket to a local address. This method is used to establish an association between the socket and a local address. Once an association is established then the socket remains bound until the channel is closed. If the local parameter has the value null then the socket will be bound to an address that is assigned automatically.", "history": "Added in API level 24", "FullName": "public abstract DatagramChannel bind (SocketAddress local)"}, "open(java.net.ProtocolFamily)": {"Returns": [["@B_java#nio#channels#DatagramChannel_E@", "A new datagram channel"]], "Parameters": [["@B_java#net#ProtocolFamily_E@", "ProtocolFamily: The protocol family"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If the specified protocol family is not supported. For example, suppose the parameter is specified as @B_java#net#StandardProtocolFamily#INET6_E@ but IPv6 is not enabled on the platform."], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a datagram channel. The family parameter is used to specify the @B_java#net#ProtocolFamily_E@. If the datagram channel is to be used for IP multicasting then this should correspond to the address type of the multicast groups that this channel will join. The new channel is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openDatagramChannel_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object. The channel will not be connected.", "history": "Added in API level 24", "FullName": "public static DatagramChannel open (ProtocolFamily family)"}, "receive(java.nio.ByteBuffer)": {"Returns": [["@B_java#net#SocketAddress_E@", "The datagram's source address, or null if this channel is in non-blocking mode and no datagram was immediately available"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which the datagram is to be transferred"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the read operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it does not permit datagrams to be accepted from the datagram's sender"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Receives a datagram via this channel. If a datagram is immediately available, or if this channel is in blocking mode and one eventually becomes available, then the datagram is copied into the given byte buffer and its source address is returned. If this channel is in non-blocking mode and a datagram is not immediately available then this method immediately returns The datagram is transferred into the given byte buffer starting at its current position, as if by a regular @B_java#nio#channels#ReadableByteChannel#read_E@ operation. If there are fewer bytes remaining in the buffer than are required to hold the datagram then the remainder of the datagram is silently discarded. This method performs exactly the same security checks as the @B_java#net#DatagramSocket#receive_E@ method of the @B_java#net#DatagramSocket_E@ class. That is, if the socket is not connected to a specific remote address and a security manager has been installed then for each datagram received this method verifies that the source's address and port number are permitted by the security manager's @B_java#lang#SecurityManager#checkAccept_E@ method. The overhead of this security check can be avoided by first connecting the socket via the @B_java#nio#channels#DatagramChannel#connect_E@ method. This method may be invoked at any time. If another thread has already initiated a read operation upon this channel, however, then an invocation of this method will block until the first operation is complete. If this channel's socket is not bound then this method will first cause the socket to be bound to an address that is assigned automatically, as if invoking the @B_java#nio#channels#DatagramChannel#bind_E@ method with a parameter of null.", "history": "Added in API level 1", "FullName": "public abstract SocketAddress receive (ByteBuffer dst)"}, "read(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#nio#channels#NotYetConnectedException_E@", "If this channel's socket is not connected"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a datagram from this channel. This method may only be invoked if this channel's socket is connected, and it only accepts datagrams from the socket's peer. If there are more bytes in the datagram than remain in the given buffers then the remainder of the datagram is silently discarded. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@", "@B_java#nio#channels#SelectableChannel_E@", "@B_java#nio#channels#spi#AbstractSelectableChannel_E@"], "ClassName": "java.nio.channels.DatagramChannel", "ClassDesc": "A selectable channel for datagram-oriented sockets. A datagram channel is created by invoking one of the @B_java#nio#channels#DatagramChannel#open_E@ methods of this class. It is not possible to create a channel for an arbitrary, pre-existing datagram socket. A newly-created datagram channel is open but not connected. A datagram channel need not be connected in order for the @B_java#nio#channels#DatagramChannel#send_E@ and @B_java#nio#channels#DatagramChannel#receive_E@ methods to be used. A datagram channel may be connected, by invoking its @B_java#nio#channels#DatagramChannel#connect_E@ method, in order to avoid the overhead of the security checks are otherwise performed as part of every send and receive operation. A datagram channel must be connected in order to use the @B_java#nio#channels#DatagramChannel#read_E@ and @B_java#nio#channels#DatagramChannel#write_E@ methods, since those methods do not accept or return socket addresses. Once connected, a datagram channel remains connected until it is disconnected or closed. Whether or not a datagram channel is connected may be determined by invoking its @B_java#nio#channels#DatagramChannel#isConnected_E@ method. Socket options are configured using the @B_java#nio#channels#DatagramChannel#setOption_E@ method. A datagram channel to an Internet Protocol socket supports the following options: Datagram channels are safe for use by multiple concurrent threads. They support concurrent reading and writing, though at most one thread may be reading and at most one thread may be writing at any given time."}