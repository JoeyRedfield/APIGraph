{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this certification path"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this certification path. This calls the toString method on each of the Certificates in the path.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getEncoded(java.lang.String)": {"Returns": [["byte[]", "the encoded bytes"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the encoding to use"]], "Throws": [["@B_java#security#cert#CertificateEncodingException_E@", "if an encoding error occurs or the encoding requested is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the encoded form of this certification path, using the specified encoding.", "history": "Added in API level 1", "FullName": "public abstract byte[] getEncoded (String encoding)"}, "CertPath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the type of Certificates in this path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CertPath of the specified type. This constructor is protected because most users should use a CertificateFactory to create CertPaths.", "history": "Added in API level 1", "FullName": "protected CertPath (String type)"}, "getEncoded()": {"Returns": [["byte[]", "the encoded bytes"]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateEncodingException_E@", "if an encoding error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the encoded form of this certification path, using the default encoding.", "history": "Added in API level 1", "FullName": "public abstract byte[] getEncoded ()"}, "getCertificates()": {"Returns": [["@B_java#util#List_E@", "an immutable List of Certificates (may be empty, but not null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of certificates in this certification path. The List returned must be immutable and thread-safe.", "history": "Added in API level 1", "FullName": "public abstract List<? extends Certificate> getCertificates ()"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the type of Certificates in this certification path (never null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of Certificates in this certification path. This is the same string that would be returned by @B_java#security#cert#Certificate#getType_E@ for all Certificates in the certification path.", "history": "Added in API level 1", "FullName": "public String getType ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this certification path, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this certification path"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this certification path for equality with the specified object. Two CertPaths are equal if and only if their types are equal and their certificate Lists (and by implication the Certificates in those Lists) are equal. A CertPath is never equal to an object that is not a CertPath. This algorithm is implemented by this method. If it is overridden, the behavior specified here must be maintained.", "history": "Added in API level 1", "FullName": "public boolean equals (Object other)"}, "getEncodings()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the names of the supported encodings (as Strings)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iteration of the encodings supported by this certification path, with the default encoding first. Attempts to modify the returned Iterator via its remove method result in an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public abstract Iterator<String> getEncodings ()"}, "writeReplace()": {"Returns": [["@B_java#lang#Object_E@", "the CertPathRep to be serialized"]], "Parameters": [], "Throws": [["@B_java#io#ObjectStreamException_E@", "if a CertPathRep object representing this certification path could not be created"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the CertPath to be serialized with a CertPathRep object.", "history": "Added in API level 1", "FullName": "protected Object writeReplace ()"}, "hashCode()": {"Returns": [["int", "the hashcode value for this certification path"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hashcode for this certification path. The hash code of a certification path is defined to be the result of the following calculation: path1.equals(path2) implies that path1.hashCode()==path2.hashCode() for any two certification paths, path1 and path2, as required by the general contract of Object.hashCode.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.security.cert.CertPath", "ClassDesc": "An immutable sequence of certificates (a certification path). This is an abstract class that defines the methods common to all CertPaths. Subclasses can handle different kinds of certificates (X.509, PGP, etc.). All CertPath objects have a type, a list of Certificates, and one or more supported encodings. Because the CertPath class is immutable, a CertPath cannot change in any externally visible way after being constructed. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses. The type is a String that identifies the type of Certificates in the certification path. For each certificate cert in a certification path certPath, cert.getType().equals(certPath.getType()) must be true. The list of Certificates is an ordered List of zero or more Certificates. This List and all of the Certificates contained in it must be immutable. Each CertPath object must support one or more encodings so that the object can be translated into a byte array for storage or transmission to other parties. Preferably, these encodings should be well-documented standards (such as PKCS#7). One of the encodings supported by a CertPath is considered the default encoding. This encoding is used if no encoding is explicitly requested (for the @B_java#security#cert#CertPath#getEncoded_E@ method, for instance). All CertPath objects are also Serializable. CertPath objects are resolved into an alternate @B_java#security#cert#CertPath#CertPathRep_E@ object during serialization. This allows a CertPath object to be serialized into an equivalent representation regardless of its underlying implementation. CertPath objects can be created with a CertificateFactory or they can be returned by other classes, such as a CertPathBuilder. By convention, X.509 CertPaths (consisting of X509Certificates), are ordered starting with the target certificate and ending with a certificate issued by the trust anchor. That is, the issuer of one certificate is the subject of the following one. The certificate representing the @B_java#security#cert#TrustAnchor_E@ should not be included in the certification path. Unvalidated X.509 CertPaths may not follow these conventions. PKIX CertPathValidators will detect any departure from these conventions that cause the certification path to be invalid and throw a CertPathValidatorException. Every implementation of the Java platform is required to support the following standard CertPath encodings: PKCS7 PkiPath These encodings are described in the All CertPath objects must be thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single CertPath object (or more than one) with no ill effects. This is also true for the List returned by CertPath.getCertificates. Requiring CertPath objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access. Providing this thread-safety is generally not difficult, since the CertPath and List objects in question are immutable."}