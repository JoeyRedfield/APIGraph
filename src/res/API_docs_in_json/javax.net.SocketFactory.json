{"Functions": {"createSocket(java.lang.String,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#net#UnknownHostException_E@", "if the host is not known"], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract Socket createSocket (String host, int port)"}, "SocketFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a SocketFactory.", "history": "Added in API level 1", "FullName": "protected SocketFactory ()"}, "getDefault()": {"Returns": [["@B_javax#net#SocketFactory_E@", "the default SocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the environment's default socket factory.", "history": "Added in API level 1", "FullName": "public static SocketFactory getDefault ()"}, "createSocket(java.net.InetAddress, int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server host"], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if host is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified port number at the specified address. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public abstract Socket createSocket (InetAddress host, int port)"}, "createSocket(java.net.InetAddress,int,java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server network address"], ["int", "int: the server port"], ["@B_java#net#InetAddress_E@", "InetAddress: the client network address"], ["int", "int: the client port"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if address is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connect it to the specified remote address on the specified remote port. The socket will also be bound to the local address and port suplied. The socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract Socket createSocket (InetAddress address, int port, InetAddress localAddress, int localPort)"}, "createSocket()": {"Returns": [["@B_java#net#Socket_E@", "the unconnected socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the socket cannot be created"]], "SeeAlso": ["@B_java#net#Socket#connect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates an unconnected socket.", "history": "Added in API level 1", "FullName": "public Socket createSocket ()"}, "createSocket(java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the server host"], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if host is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified port number at the specified address. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract Socket createSocket (InetAddress host, int port)"}, "createSocket(java.lang.String,int,java.net.InetAddress,int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address the socket is bound to"], ["int", "int: the local port the socket is bound to"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#net#UnknownHostException_E@", "if the host is not known"], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host on the specified remote port. The socket will also be bound to the local address and port supplied. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract Socket createSocket (String host, int port, InetAddress localHost, int localPort)"}, "createSocket(java.lang.String, int)": {"Returns": [["@B_java#net#Socket_E@", "the Socket"]], "Parameters": [["@B_java#lang#String_E@", "String: the server host name with which to connect, or null for the loopback address."], ["int", "int: the server port"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#net#UnknownHostException_E@", "if the host is not known"], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@", "@B_java#net#Socket#Socket_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host at the specified remote port. This socket is configured using the socket options established for this factory. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public abstract Socket createSocket (String host, int port)"}}, "Inheritance": [], "ClassName": "javax.net.SocketFactory", "ClassDesc": "This class creates sockets. It may be subclassed by other factories, which create particular subclasses of sockets and thus provide a general framework for the addition of public socket-level functionality. Socket factories are a simple way to capture a variety of policies related to the sockets being constructed, producing such sockets in a way which does not require special configuration of the code which asks for the sockets: Due to polymorphism of both factories and sockets, different kinds of sockets can be used by the same application code just by passing it different kinds of factories. Factories can themselves be customized with parameters used in socket construction. So for example, factories could be customized to return sockets with different networking timeouts or security parameters already configured. The sockets returned to the application can be subclasses of java.net.Socket, so that they can directly expose new APIs for features such as compression, security, record marking, statistics collection, or firewall tunneling. Factory classes are specified by environment-specific configuration mechanisms. For example, the getDefault method could return a factory that was appropriate for a particular user or applet, and a framework could use a factory customized to its own purposes."}