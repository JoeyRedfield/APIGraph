{"Functions": {"newInstance(java.lang.Object...)": {"Returns": [["T", "a new object created by calling the constructor this object represents"]], "Parameters": [["@B_java#lang#Object_E@", "Object: array of objects to be passed as arguments to the constructor call; values of primitive types are wrapped in a wrapper object of the appropriate type (e.g. a float in a @B_java#lang#Float_E@)"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if this Constructor object is enforcing Java language access control and the underlying constructor is inaccessible."], ["@B_java#lang#IllegalArgumentException_E@", "if the number of actual and formal parameters differ; if an unwrapping conversion for primitive arguments fails; or if, after possible unwrapping, a parameter value cannot be converted to the corresponding formal parameter type by a method invocation conversion; if this constructor pertains to an enum type."], ["@B_java#lang#InstantiationException_E@", "if the class that declares the underlying constructor represents an abstract class."], ["@B_java#lang#reflect#InvocationTargetException_E@", "if the underlying constructor throws an exception."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Uses the constructor represented by this Constructor object to create and initialize a new instance of the constructor's declaring class, with the specified initialization parameters. Individual parameters are automatically unwrapped to match primitive formal parameters, and both primitive and reference parameters are subject to method invocation conversions as necessary. If the number of formal parameters required by the underlying constructor is 0, the supplied initargs array may be of length 0 or null. If the constructor's declaring class is an inner class in a non-static context, the first argument to the constructor needs to be the enclosing instance; see section 15.9.3 of If the required access and argument checks succeed and the instantiation will proceed, the constructor's declaring class is initialized if it has not already been initialized. If the constructor completes normally, returns the newly created and initialized instance.", "history": "Added in API level 1", "FullName": "public T newInstance (Object... initargs)"}, "getExceptionTypes()": {"Returns": [["@B_java#lang#Class_E@", "the exception types declared as being thrown by the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the types of exceptions declared to be thrown by the underlying executable represented by this object. Returns an array of length 0 if the executable declares no exceptions in its throws clause.", "history": "Added in API level 1", "FullName": "public Class[]<?> getExceptionTypes ()"}, "setAccessible(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set the accessible flag. Setting this to true prevents IllegalAccessExceptions.", "history": "Added in API level 1", "FullName": "public void setAccessible (boolean flag)"}, "equalMethodParameters(java.lang.Class<?>[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean equalMethodParameters (Class[]<?> params)"}, "getParameterTypes()": {"Returns": [["@B_java#lang#Class_E@", "the parameter types for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters.", "history": "Added in API level 1", "FullName": "public Class[]<?> getParameterTypes ()"}, "getAnnotation(java.lang.Class<A>)": {"Returns": [["A", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 14", "FullName": "A getAnnotation (Class<A> annotationType)"}, "isVarArgs()": {"Returns": [["boolean", "true if an only if this executable was declared to take a variable number of arguments."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable was declared to take a variable number of arguments; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isVarArgs ()"}, "getParameterAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "an array of arrays that represent the annotations on the formal and implicit parameters, in declaration order, of the executable represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of arrays of Annotations that represent the annotations on the formal parameters, in declaration order, of the Executable represented by this object. Synthetic and mandated parameters (see explanation below), such as the outer \"this\" parameter to an inner class constructor will be represented in the returned array. If the executable has no parameters (meaning no formal, no synthetic, and no mandated parameters), a zero-length array will be returned. If the Executable has one or more parameters, a nested array of length zero is returned for each parameter with no annotations. The annotation objects contained in the returned arrays are serializable. The caller of this method is free to modify the returned arrays; it will have no effect on the arrays returned to other callers. A compiler may add extra parameters that are implicitly declared in source (\"mandated\"), as well as parameters that are neither implicitly nor explicitly declared in source (\"synthetic\") to the parameter list for a method. See @B_java#lang#reflect#Parameter_E@ for more information.", "history": "Added in API level 1", "FullName": "public Annotation[][] getParameterAnnotations ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this Constructor against the specified object. Returns true if the objects are the same. Two Constructor objects are the same if they were declared by the same class and have the same formal parameter types.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "an object representing the declaring class of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object representing the class or interface that declares the executable represented by this object.", "history": "Added in API level 1", "FullName": "public Class<T> getDeclaringClass ()"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this executable is a synthetic construct as defined by The Java\u2122 Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this executable is a synthetic construct; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isSynthetic ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this Constructor. The hashcode is the same as the hashcode for the underlying constructor's declaring class name.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getParameterCount()": {"Returns": [["int", "The number of formal parameters for the executable this object represents"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of formal parameters (whether explicitly declared or implicitly declared or neither) for the executable represented by this object.", "history": "Added in API level 26", "FullName": "public int getParameterCount ()"}, "getGenericParameterTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the formal parameter types of the underlying executable, in declaration order"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""], ["@B_java#lang#TypeNotPresentException_E@", ""], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the formal parameter types, in declaration order, of the executable represented by this object. Returns an array of length 0 if the underlying executable takes no parameters. If a formal parameter type is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code. If a formal parameter type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type[] getGenericParameterTypes ()"}, "toGenericString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Constructor, include type parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Constructor, including type parameters. The string is formatted as the constructor access modifiers, if any, followed by an angle-bracketed comma separated list of the constructor's type parameters, if any, followed by the fully-qualified name of the declaring class, followed by a parenthesized, comma-separated list of the constructor's generic formal parameter types. If this constructor was declared to take a variable number of arguments, instead of denoting the last parameter as \"throws\" followed by a comma-separated list of the thrown exception types. The only possible modifiers for constructors are the access modifiers public, protected or private. Only one of these may appear, or none if the constructor has default (package) access.", "history": "Added in API level 1", "FullName": "public String toGenericString ()"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "all annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all annotations present on this element. (Returns an array of length zero if this element has no annotations.) The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "Annotation[] getAnnotations ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Constructor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Constructor. The string is formatted as the constructor access modifiers, if any, followed by the fully-qualified name of the declaring class, followed by a parenthesized, comma-separated list of the constructor's formal parameter types. For example: The only possible modifiers for constructors are the access modifiers public, protected or private. Only one of these may appear, or none if the constructor has default (package) access.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getGenericExceptionTypes()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types that represent the exception types thrown by the underlying executable"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""], ["@B_java#lang#TypeNotPresentException_E@", ""], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects that represent the exceptions declared to be thrown by this executable object. Returns an array of length 0 if the underlying executable declares no exceptions in its throws clause. If an exception type is a type variable or a parameterized type, it is created. Otherwise, it is resolved.", "history": "Added in API level 1", "FullName": "public Type[] getGenericExceptionTypes ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the simple name of the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this constructor, as a string. This is the binary name of the constructor's declaring class.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "compareParameters(java.lang.Class<?>[])": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "int compareParameters (Class[]<?> params)"}, "getTypeParameters()": {"Returns": [["@B_java#lang#reflect#TypeVariable_E@", "an array of TypeVariable objects that represent the type variables declared by this generic declaration"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.", "history": "Added in API level 1", "FullName": "public TypeVariable[]<Constructor<T>> getTypeParameters ()"}, "getModifiers()": {"Returns": [["int", "the Java language modifiers for the underlying member"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Java language", "history": "Added in API level 1", "FullName": "public int getModifiers ()"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 1", "FullName": "public T getAnnotation (Class<T> annotationClass)"}}, "Inheritance": ["@B_java#lang#reflect#AccessibleObject_E@", "@B_java#lang#reflect#Executable_E@"], "ClassName": "java.lang.reflect.Constructor<T>", "ClassDesc": "Constructor provides information about, and access to, a single constructor for a class. Constructor permits widening conversions to occur when matching the actual parameters to newInstance() with the underlying constructor's formal parameters, but throws an IllegalArgumentException if a narrowing conversion would occur."}