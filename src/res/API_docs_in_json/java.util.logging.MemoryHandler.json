{"Functions": {"getPushLevel()": {"Returns": [["@B_java#util#logging#Level_E@", "the value of the pushLevel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the", "history": "Added in API level 1", "FullName": "public Level getPushLevel ()"}, "publish(java.util.logging.LogRecord)": {"Returns": [], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: description of the log event. A null record is silently ignored and is not published"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Store a If there is a", "history": "Added in API level 1", "FullName": "public void publish (LogRecord record)"}, "isLoggable(java.util.logging.LogRecord)": {"Returns": [["boolean", "true if the LogRecord would be logged."]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: a LogRecord"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this This method checks if the", "history": "Added in API level 1", "FullName": "public boolean isLoggable (LogRecord record)"}, "MemoryHandler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a", "history": "Added in API level 1", "FullName": "public MemoryHandler ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes a flush on the target Note that the current contents of the", "history": "Added in API level 1", "FullName": "public void flush ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Close the", "history": "Added in API level 1", "FullName": "public void close ()"}, "push()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Push any buffered output to the target The buffer is then cleared.", "history": "Added in API level 1", "FullName": "public void push ()"}, "MemoryHandler(java.util.logging.Handler,int,java.util.logging.Level)": {"Returns": [], "Parameters": [["@B_java#util#logging#Handler_E@", "Handler: the Handler to which to publish output."], ["int", "int: the number of log records to buffer (must be greater than zero)"], ["@B_java#util#logging#Level_E@", "Level: message level to push on"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size is <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Create a The", "history": "Added in API level 1", "FullName": "public MemoryHandler (Handler target, int size, Level pushLevel)"}, "setPushLevel(java.util.logging.Level)": {"Returns": [], "Parameters": [["@B_java#util#logging#Level_E@", "Level: the new value of the pushLevel"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Set the", "history": "Added in API level 1", "FullName": "public void setPushLevel (Level newLevel)"}}, "Inheritance": ["@B_java#util#logging#Handler_E@"], "ClassName": "java.util.logging.MemoryHandler", "ClassDesc": "Normally this There are three main models for triggering a push of the buffer: An incoming An external class calls the A subclass overrides the <handler-name>.level specifies the level for the <handler-name>.filter specifies the name of a <handler-name>.size defines the buffer size (defaults to 1000). <handler-name>.push defines the <handler-name>.target specifies the name of the target For example, the properties for MemoryHandler would be: java.util.logging.MemoryHandler.level=INFO java.util.logging.MemoryHandler.formatter=java.util.logging.SimpleFormatter For a custom handler, e.g. com.foo.MyHandler, the properties would be: com.foo.MyHandler.level=INFO com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter"}