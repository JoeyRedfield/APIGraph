{"Functions": {"rewriteURI(java.net.URI, org.apache.http.HttpHost, boolean)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "Contains the path, query and fragment to use."], ["@B_org#apache#http#HttpHost_E@", "Contains the scheme, host and port to use."], ["boolean", "True if the fragment should not be copied."]], "Throws": [["@B_java#net#URISyntaxException_E@", "If the resulting URI is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method for creating a new @B_java#net#URI_E@ whose scheme, host and port are taken from the target host, but whose path, query and fragment are taken from the existing URI. The fragment is only used if dropFragment is false.", "history": "Added in API level 1", "FullName": "public static URI rewriteURI (URI uri, HttpHost target, boolean dropFragment)"}, "resolve(java.net.URI, java.lang.String)": {"Returns": [["", "the resulting URI"]], "Parameters": [["@B_java#net#URI_E@", "the base URI"], ["@B_java#lang#String_E@", "the URI reference"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolves a URI reference against a base URI. Work-around for bug in java.net.URI (", "history": "Added in API level 1", "FullName": "public static URI resolve (URI baseURI, String reference)"}, "rewriteURI(java.net.URI, org.apache.http.HttpHost)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#net#URISyntaxException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method for @B_org#apache#http#client#utils#URIUtils#rewriteURI_E@ that always keeps the fragment.", "history": "Added in API level 1", "FullName": "public static URI rewriteURI (URI uri, HttpHost target)"}, "resolve(java.net.URI, java.net.URI)": {"Returns": [["", "the resulting URI"]], "Parameters": [["@B_java#net#URI_E@", "the base URI"], ["@B_java#net#URI_E@", "the URI reference"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolves a URI reference against a base URI. Work-around for bug in java.net.URI (", "history": "Added in API level 1", "FullName": "public static URI resolve (URI baseURI, URI reference)"}, "createURI(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "Scheme name"], ["@B_java#lang#String_E@", "Host name"], ["int", "Port number"], ["@B_java#lang#String_E@", "Path"], ["@B_java#lang#String_E@", "Query"], ["@B_java#lang#String_E@", "Fragment"]], "Throws": [["@B_java#net#URISyntaxException_E@", "If both a scheme and a path are given but the path is relative, if the URI string constructed from the given components violates RFC 2396, or if the authority component of the string is present but cannot be parsed as a server-based authority"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a @B_java#net#URI_E@ using all the parameters. This should be used instead of @B_java#net#URI#URI_E@ or any of the other URI multi-argument URI constructors. See", "history": "Added in API level 1", "FullName": "public static URI createURI (String scheme, String host, int port, String path, String query, String fragment)"}}, "Inheritance": [], "ClassName": "org.apache.http.client.utils.URIUtils", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A collection of utilities for @B_java#net#URI_E@, to workaround bugs within the class or for ease-of-use features."}