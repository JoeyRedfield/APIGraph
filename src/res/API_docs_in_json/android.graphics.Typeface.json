{"Functions": {"createFromFile(java.lang.String)": {"Returns": [["@B_android#graphics#Typeface_E@", "The new typeface."]], "Parameters": [["@B_java#lang#String_E@", "String: The full path to the font data. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new typeface from the specified font file.", "history": "Added in API level 4", "FullName": "public static Typeface createFromFile (String path)"}, "create(android.graphics.Typeface,int)": {"Returns": [["@B_android#graphics#Typeface_E@", "The best matching typeface."]], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: An existing @B_android#graphics#Typeface_E@ object. In case of null, the default typeface is used instead."], ["int", "int: The style (normal, bold, italic) of the typeface. e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC Value is @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@, or @B_android#graphics#Typeface#BOLD_ITALIC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a typeface object that best matches the specified existing typeface and the specified Style. Use this call if you want to pick a new style from the same family of an existing typeface object. If family is null, this selects from the default font's family. This method is not thread safe on API 27 or before. This method is thread safe on API 28 or after.", "history": "Added in API level 1", "FullName": "public static Typeface create (Typeface family, int style)"}, "getWeight()": {"Returns": [["int", "Value is between 0 and 1000 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the typeface's weight value", "history": "Added in API level 28", "FullName": "public int getWeight ()"}, "create(java.lang.String, int)": {"Returns": [["@B_android#graphics#Typeface_E@", "The best matching typeface."]], "Parameters": [["@B_java#lang#String_E@", "String: May be null. The name of the font family."], ["int", "int: The style (normal, bold, italic) of the typeface. e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a typeface object given a family name, and option style information. If null is passed for the name, then the \"default\" font will be chosen. The resulting typeface object can be queried (getStyle()) to discover what its \"real\" style characteristics are.", "history": "added in API level 1", "FullName": "public static Typeface create (String familyName, int style)"}, "create(android.graphics.Typeface, int)": {"Returns": [["@B_android#graphics#Typeface_E@", "The best matching typeface."]], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: An existing @B_android#graphics#Typeface_E@ object. In case of null, the default typeface is used instead."], ["int", "int: The style (normal, bold, italic) of the typeface. e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a typeface object that best matches the specified existing typeface and the specified Style. Use this call if you want to pick a new style from the same family of an existing typeface object. If family is null, this selects from the default font's family. This method is not thread safe on API 27 or before. This method is thread safe on API 28 or after.", "history": "added in API level 1", "FullName": "public static Typeface create (Typeface family, int style)"}, "getStyle()": {"Returns": [["int", "Value is @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@, or @B_android#graphics#Typeface#BOLD_ITALIC_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the typeface's intrinsic style attributes", "history": "Added in API level 1", "FullName": "public int getStyle ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "create(java.lang.String,int)": {"Returns": [["@B_android#graphics#Typeface_E@", "The best matching typeface."]], "Parameters": [["@B_java#lang#String_E@", "String: May be null. The name of the font family."], ["int", "int: The style (normal, bold, italic) of the typeface. e.g. NORMAL, BOLD, ITALIC, BOLD_ITALIC Value is @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@, or @B_android#graphics#Typeface#BOLD_ITALIC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a typeface object given a family name, and option style information. If null is passed for the name, then the \"default\" font will be chosen. The resulting typeface object can be queried (getStyle()) to discover what its \"real\" style characteristics are.", "history": "Added in API level 1", "FullName": "public static Typeface create (String familyName, int style)"}, "isItalic()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if getStyle() has the ITALIC bit set.", "history": "Added in API level 1", "FullName": "public final boolean isItalic ()"}, "createFromAsset(android.content.res.AssetManager,java.lang.String)": {"Returns": [["@B_android#graphics#Typeface_E@", "The new typeface."]], "Parameters": [["@B_android#content#res#AssetManager_E@", "AssetManager: The application's asset manager"], ["@B_java#lang#String_E@", "String: The file name of the font data in the assets directory"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new typeface from the specified font data.", "history": "Added in API level 1", "FullName": "public static Typeface createFromAsset (AssetManager mgr, String path)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "added in API level 1", "FullName": "void finalize ()"}, "defaultFromStyle(int)": {"Returns": [["@B_android#graphics#Typeface_E@", "the default typeface that corresponds to the style"]], "Parameters": [["int", "int: Value is @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@, or @B_android#graphics#Typeface#BOLD_ITALIC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns one of the default typeface objects, based on the specified style", "history": "Added in API level 1", "FullName": "public static Typeface defaultFromStyle (int style)"}, "createFromFile(java.io.File)": {"Returns": [["@B_android#graphics#Typeface_E@", "The new typeface."]], "Parameters": [["@B_java#io#File_E@", "File: The path to the font data. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new typeface from the specified font file.", "history": "Added in API level 4", "FullName": "public static Typeface createFromFile (File file)"}, "create(android.graphics.Typeface, int, boolean)": {"Returns": [["@B_android#graphics#Typeface_E@", "A @B_android#graphics#Typeface_E@ object for drawing specified weight and italic style. Never returns null"]], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: An existing @B_android#graphics#Typeface_E@ object. In case of null, the default typeface is used instead."], ["int", "int: The desired weight to be drawn.Value is between 1 and 1000 inclusive."], ["boolean", "boolean: true if italic style is desired to be drawn. Otherwise, false"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Typeface#getWeight_E@", "@B_android#graphics#Typeface#isItalic_E@"], "Permissions": [], "Description": "Creates a typeface object that best matches the specified existing typeface and the specified weight and italic style Below are numerical values and corresponding common weight names. This method is thread safe.", "history": "added in API level 28", "FullName": "public static Typeface create (Typeface family, int weight, boolean italic)"}, "create(android.graphics.Typeface,int,boolean)": {"Returns": [["@B_android#graphics#Typeface_E@", "A @B_android#graphics#Typeface_E@ object for drawing specified weight and italic style. Never returns null"]], "Parameters": [["@B_android#graphics#Typeface_E@", "Typeface: An existing @B_android#graphics#Typeface_E@ object. In case of null, the default typeface is used instead. This value may be null."], ["int", "int: The desired weight to be drawn. Value is between 1 and 1000 inclusive"], ["boolean", "boolean: true if italic style is desired to be drawn. Otherwise, false"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Typeface#getWeight_E@", "@B_android#graphics#Typeface#isItalic_E@"], "Permissions": [], "Description": "Creates a typeface object that best matches the specified existing typeface and the specified weight and italic style Below are numerical values and corresponding common weight names. This method is thread safe.", "history": "Added in API level 28", "FullName": "public static Typeface create (Typeface family, int weight, boolean italic)"}, "isBold()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if getStyle() has the BOLD bit set.", "history": "Added in API level 1", "FullName": "public final boolean isBold ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.graphics.Typeface", "ClassDesc": "The Typeface class specifies the typeface and intrinsic style of a font. This is used in the paint, along with optionally Paint settings like textSize, textSkewX, textScaleX to specify how text appears when drawn (and measured)."}