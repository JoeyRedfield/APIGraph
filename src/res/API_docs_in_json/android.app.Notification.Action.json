{"Functions": {"getIcon()": {"Returns": [["@B_android#graphics#drawable#Icon_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an icon representing the action.", "history": "Added in API level 23", "FullName": "public Icon getIcon ()"}, "Notification.Action(int,java.lang.CharSequence,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#app#PendingIntent_E@", "PendingIntent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#Notification#Action#Builder_E@.", "history": "Added in API level 19", "FullName": "public Notification.Action (int icon, CharSequence title, PendingIntent intent)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 19", "FullName": "public int describeContents ()"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get additional metadata carried around with this Action.", "history": "Added in API level 20", "FullName": "public Bundle getExtras ()"}, "getDataOnlyRemoteInputs()": {"Returns": [["@B_android#app#RemoteInput_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the list of inputs to be collected from the user that ONLY accept data when this action is sent. These remote inputs are guaranteed to return true on a call to @B_android#app#RemoteInput#isDataOnly_E@. Returns null if there are no data-only remote inputs. This method exists so that legacy RemoteInput collectors that pre-date the addition of non-textual RemoteInputs do not access these remote inputs.", "history": "Added in API level 26", "FullName": "public RemoteInput[] getDataOnlyRemoteInputs ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 19", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getAllowGeneratedReplies()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the platform should automatically generate possible replies for this @B_android#app#Notification#Action_E@", "history": "Added in API level 24", "FullName": "public boolean getAllowGeneratedReplies ()"}, "getRemoteInputs()": {"Returns": [["@B_android#app#RemoteInput_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the list of inputs to be collected from the user when this action is sent. May return null if no remote inputs were added. Only returns inputs which accept a text input. For inputs which only accept data use @B_android#app#Notification#Action#getDataOnlyRemoteInputs_E@.", "history": "Added in API level 20", "FullName": "public RemoteInput[] getRemoteInputs ()"}, "isContextual()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this is a contextual Action, i.e. whether the action is dependent on the notification message body. An example of a contextual action could be an action opening a map application with an address shown in the notification.", "history": "Added in API level 29", "FullName": "public boolean isContextual ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 19", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "clone()": {"Returns": [["@B_android#app#Notification#Action_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 19", "FullName": "public Notification.Action clone ()"}, "getSemanticAction()": {"Returns": [["int", "Value is @B_android#app#Notification#Action#SEMANTIC_ACTION_NONE_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_REPLY_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_MARK_AS_READ_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_MARK_AS_UNREAD_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_DELETE_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_ARCHIVE_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_MUTE_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_UNMUTE_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_THUMBS_UP_E@, @B_android#app#Notification#Action#SEMANTIC_ACTION_THUMBS_DOWN_E@, or @B_android#app#Notification#Action#SEMANTIC_ACTION_CALL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the SemanticAction associated with this @B_android#app#Notification#Action_E@. A SemanticAction denotes what an @B_android#app#Notification#Action_E@'s @B_android#app#PendingIntent_E@ will do (eg. reply, mark as read, delete, etc).", "history": "Added in API level 28", "FullName": "public int getSemanticAction ()"}}, "Inheritance": [], "ClassName": "android.app.Notification.Action", "ClassDesc": "Structure to encapsulate a named action that can be shown as part of this notification. It must include an icon, a label, and a @B_android#app#PendingIntent_E@ to be fired when the action is selected by the user. Apps should use @B_android#app#Notification#Builder#addAction_E@ or @B_android#app#Notification#Builder#addAction_E@ to attach actions."}