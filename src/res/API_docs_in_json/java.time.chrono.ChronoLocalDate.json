{"Functions": {"lengthOfMonth()": {"Returns": [["int", "the length of the month in days"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the month represented by this date, as defined by the calendar system. This returns the length of the month in days.", "history": "Added in API level 26", "FullName": "public abstract int lengthOfMonth ()"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate plus (long amountToAdd, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field can be queried, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if the specified field can be queried on this date. If false, then calling the @B_java#time#temporal#TemporalAccessor#range_E@, @B_java#time#temporal#TemporalAccessor#get_E@ and @B_java#time#chrono#ChronoLocalDate#with_E@ methods will throw an exception. The set of supported fields is defined by the chronology and normally includes all ChronoField date fields. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same date as this object. This returns a temporal object of the same observable type as the input with the date changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as the field. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "getChronology()": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this date. The Chronology represents the calendar system in use. The era and other fields in @B_java#time#temporal#ChronoField_E@ are defined by the chronology.", "history": "Added in API level 26", "FullName": "public abstract Chronology getChronology ()"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public ChronoLocalDate with (TemporalField field, long newValue)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this date and the end date"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to a ChronoLocalDate in the same chronology, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a ChronoLocalDate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another date in terms of the specified unit. This calculates the amount of time between two ChronoLocalDate objects in terms of a single TemporalUnit. The start and end points are this and the specified date. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a ChronoLocalDate using @B_java#time#chrono#Chronology#date_E@. The calculation returns a whole number, representing the number of complete units between the two dates. For example, the amount in days between two dates can be calculated using startDate.until(endDate, DAYS). There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS should be supported by all implementations. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract long until (Temporal endExclusive, TemporalUnit unit)"}, "compareTo(java.time.chrono.ChronoLocalDate)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date to another date, including the chronology. The comparison is based first on the underlying time-line date, then on the chronology. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. For example, the following is the comparator order: If all the date objects being compared are in the same chronology, then the additional chronology stage is not required and only the local date is used. To compare the dates of two TemporalAccessor instances, including dates in two different chronologies, use @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as a comparator. This default implementation performs the comparison defined above.", "history": "Added in API level 26", "FullName": "public int compareTo (ChronoLocalDate other)"}, "until(java.time.chrono.ChronoLocalDate)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the end date, exclusive, which may be in any chronology, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the period cannot be calculated"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the period between this date and another date as a ChronoPeriod. This calculates the period between two dates. All supplied chronologies calculate the period using years, months and days, however the ChronoPeriod API allows the period to be represented using other units. The start and end points are this and the specified date. The result will be negative if the end is before the start. The negative sign will be the same in each of year, month and day. The calculation is performed using the chronology of this date. If necessary, the input date will be converted to match. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoPeriod until (ChronoLocalDate endDateExclusive)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is equal to another date, including the chronology. Compares this date with another ensuring that the date and chronology are the same. To compare the dates of two TemporalAccessor instances, including dates in two different chronologies, use @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ as a comparator.", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object obj)"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified field altered. This returns a new object based on this one with the value for the specified field changed. For example, on a LocalDate, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate with (TemporalField field, long newValue)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount subtracted. This adjusts this temporal, subtracting according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate minus (TemporalAmount amount)"}, "isBefore(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if this is before the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is before the specified date ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This is equivalent to using date1.toEpochDay() < date2.toEpochDay(). This default implementation performs the comparison based on the epoch-day.", "history": "Added in API level 26", "FullName": "public boolean isBefore (ChronoLocalDate other)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the formatted date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date as a String. The output will include the full local date.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "timeLineOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares in time-line order ignoring the chronology"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDate#isAfter_E@", "@B_java#time#chrono#ChronoLocalDate#isBefore_E@", "@B_java#time#chrono#ChronoLocalDate#isEqual_E@"], "Permissions": [], "Description": "Gets a comparator that compares ChronoLocalDate in time-line order ignoring the chronology. This comparator differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date and not the chronology. This allows dates in different calendar systems to be compared based on the position of the date on the local time-line. The underlying comparison is equivalent to comparing the epoch-day.", "history": "Added in API level 26", "FullName": "public static Comparator<ChronoLocalDate> timeLineOrder ()"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date using the specified query. This queries this date using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 27", "FullName": "public ChronoLocalDate minus (long amountToSubtract, TemporalUnit unit)"}, "isLeapYear()": {"Returns": [["boolean", "true if this date is in a leap year, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the year is a leap year, as defined by the calendar system. A leap-year is a year of a longer length than normal. The exact meaning is determined by the chronology with the constraint that a leap-year must imply a year-length longer than a non leap-year. This default implementation uses @B_java#time#chrono#Chronology#isLeapYear_E@.", "history": "Added in API level 26", "FullName": "public boolean isLeapYear ()"}, "isAfter(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if this is after the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is after the specified date ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This is equivalent to using date1.toEpochDay() > date2.toEpochDay(). This default implementation performs the comparison based on the epoch-day.", "history": "Added in API level 26", "FullName": "public boolean isAfter (ChronoLocalDate other)"}, "atTime(java.time.LocalTime)": {"Returns": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "the local date-time formed from this date and the specified time, not null"]], "Parameters": [["@B_java#time#LocalTime_E@", "LocalTime: the local time to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date with a time to create a ChronoLocalDateTime. This returns a ChronoLocalDateTime formed from this date at the specified time. All possible combinations of date and time are valid.", "history": "Added in API level 26", "FullName": "public ChronoLocalDateTime<?> atTime (LocalTime localTime)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified period subtracted, not null"]], "Parameters": [["long", "long: the amount of the specified unit to subtract, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period subtracted. This method returns a new object based on this one with the specified period subtracted. For example, on a LocalDate, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate minus (long amountToSubtract, TemporalUnit unit)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to or subtracted from this date. If false, then calling the @B_java#time#chrono#ChronoLocalDate#plus_E@ and @B_java#time#chrono#ChronoLocalDate#minus_E@ methods will throw an exception. The set of supported units is defined by the chronology and normally includes all ChronoUnit date units except FOREVER. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "the date, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a ChronoLocalDate"]], "SeeAlso": ["@B_java#time#chrono#Chronology#date_E@"], "Permissions": [], "Description": "Obtains an instance of ChronoLocalDate from a temporal object. This obtains a local date based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ChronoLocalDate. The conversion extracts and combines the chronology and the date from the temporal object. The behavior is equivalent to using @B_java#time#chrono#Chronology#date_E@ with the extracted chronology. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ChronoLocalDate::from.", "history": "Added in API level 26", "FullName": "public static ChronoLocalDate from (TemporalAccessor temporal)"}, "toEpochDay()": {"Returns": [["long", "the Epoch Day equivalent to this date"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this date to the Epoch Day. The @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ is a simple incrementing count of days where day 0 is 1970-01-01 (ISO). This definition is the same for all chronologies, enabling conversion. This default implementation queries the EPOCH_DAY field.", "history": "Added in API level 26", "FullName": "public long toEpochDay ()"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified period added, not null"]], "Parameters": [["long", "long: the amount of the specified unit to add, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with the specified period added. This method returns a new object based on this one with the specified period added. For example, on a LocalDate, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object. In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.", "history": "added in API level 26", "FullName": "public ChronoLocalDate plus (long amountToAdd, TemporalUnit unit)"}, "lengthOfYear()": {"Returns": [["int", "the length of the year in days"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the year represented by this date, as defined by the calendar system. This returns the length of the year in days. The default implementation uses @B_java#time#chrono#ChronoLocalDate#isLeapYear_E@ and returns 365 or 366.", "history": "Added in API level 26", "FullName": "public int lengthOfYear ()"}, "isEqual(java.time.chrono.ChronoLocalDate)": {"Returns": [["boolean", "true if the underlying date is equal to the specified date"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the other date to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date is equal to the specified date ignoring the chronology. This method differs from the comparison in @B_java#lang#Comparable#compareTo_E@ in that it only compares the underlying date and not the chronology. This allows dates in different calendar systems to be compared based on the time-line position. This is equivalent to using date1.toEpochDay() == date2.toEpochDay(). This default implementation performs the comparison based on the epoch-day.", "history": "Added in API level 26", "FullName": "public boolean isEqual (ChronoLocalDate other)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date using the specified formatter. This date will be passed to the formatter to produce a string. The default implementation must behave as follows:", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object of the same type as this object with an amount added. This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a @B_java#time#Period_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface, such as @B_java#time#Duration_E@. Some example code indicating how and why this method is used: Note that calling plus followed by minus is not guaranteed to return the same date-time.", "history": "Added in API level 26", "FullName": "public ChronoLocalDate plus (TemporalAmount amount)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#chrono#ChronoLocalDate_E@", "an object of the same type with the specified adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", ""], ["@B_java#lang#ArithmeticException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted object of the same type as this object with the adjustment made. This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. Some example code indicating how and why this method is used:", "history": "Added in API level 26", "FullName": "public ChronoLocalDate with (TemporalAdjuster adjuster)"}, "getEra()": {"Returns": [["@B_java#time#chrono#Era_E@", "the chronology specific era constant applicable at this date, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the era, as defined by the chronology. The era is, conceptually, the largest division of the time-line. Most calendar systems have a single epoch dividing the time-line into two eras. However, some have multiple eras, such as one for the reign of each leader. The exact meaning is determined by the Chronology. All correctly implemented Era classes are singletons, thus it is valid code to write date.getEra() == SomeChrono.ERA_NAME). This default implementation uses @B_java#time#chrono#Chronology#eraOf_E@.", "history": "Added in API level 26", "FullName": "public Era getEra ()"}}, "Inheritance": [], "ClassName": "java.time.chrono.ChronoLocalDate", "ClassDesc": "A date without time-of-day or time-zone in an arbitrary chronology, intended for advanced globalization use cases. A ChronoLocalDate is the abstract representation of a date where the Chronology chronology, or calendar system, is pluggable. The date is defined in terms of fields expressed by @B_java#time#temporal#TemporalField_E@, where most common implementations are defined in @B_java#time#temporal#ChronoField_E@. The chronology defines how the calendar system operates and the meaning of the standard fields. LocalDate rather than this interface, even in the case where the application needs to deal with multiple calendar systems. This concept can seem surprising at first, as the natural way to globalize an application might initially appear to be to abstract the calendar system. However, as explored below, abstracting the calendar system is usually the wrong approach, resulting in logic errors and hard to find bugs. As such, it should be considered an application-wide architectural decision to choose to use this interface as opposed to LocalDate. 1) Applications using this interface, as opposed to using just LocalDate, face a significantly higher probability of bugs. This is because the calendar system in use is not known at development time. A key cause of bugs is where the developer applies assumptions from their day-to-day knowledge of the ISO calendar system to code that is intended to deal with any arbitrary calendar system. The section below outlines how those assumptions can cause problems The primary mechanism for reducing this increased risk of bugs is a strong code review process. This should also be considered a extra cost in maintenance for the lifetime of the code. 2) This interface does not enforce immutability of implementations. While the implementation notes indicate that all implementations must be immutable there is nothing in the code or type system to enforce this. Any method declared to accept a ChronoLocalDate could therefore be passed a poorly or maliciously written mutable implementation. 3) Applications using this interface must consider the impact of eras. LocalDate shields users from the concept of eras, by ensuring that getYear() returns the proleptic year. That decision ensures that developers can think of LocalDate instances as consisting of three fields - year, month-of-year and day-of-month. By contrast, users of this interface must think of dates as consisting of four fields - era, year-of-era, month-of-year and day-of-month. The extra era field is frequently forgotten, yet it is of vital importance to dates in an arbitrary calendar system. For example, in the Japanese calendar system, the era represents the reign of an Emperor. Whenever one reign ends and another starts, the year-of-era is reset to one. 4) The only agreed international standard for passing a date between two systems is the ISO-8601 standard which requires the ISO calendar system. Using this interface throughout the application will inevitably lead to the requirement to pass the date across a network or component boundary, requiring an application specific protocol or format. 5) Long term persistence, such as a database, will almost always only accept dates in the ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other calendar systems increases the complications of interacting with persistence. 6) Most of the time, passing a ChronoLocalDate throughout an application is unnecessary, as discussed in the last section below. Code that queries the day-of-month and assumes that the value will never be more than 31 is invalid. Some calendar systems have more than 31 days in some months. Code that adds 12 months to a date and assumes that a year has been added is invalid. Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic. Code that adds one month to a date and assumes that the month-of-year value will increase by one or wrap to the next year is invalid. Some calendar systems have a variable number of months in a year, such as the Hebrew. Code that adds one month, then adds a second one month and assumes that the day-of-month will remain close to its original value is invalid. Some calendar systems have a large difference between the length of the longest month and the length of the shortest month. For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days. Code that adds seven days and assumes that a week has been added is invalid. Some calendar systems have weeks of other than seven days, such as the French Revolutionary. Code that assumes that because the year of date1 is greater than the year of date2 then date1 is after date2 is invalid. This is invalid for all calendar systems when referring to the year-of-era, and especially untrue of the Japanese calendar system where the year-of-era restarts with the reign of every new Emperor. Code that treats month-of-year one and day-of-month one as the start of the year is invalid. Not all calendar systems start the year when the month value is one. In general, manipulating a date, and even querying a date, is wide open to bugs when the calendar system is unknown at development time. This is why it is essential that code using this interface is subjected to additional code reviews. It is also why an architectural decision to avoid this interface type is usually the correct one. Declare all method signatures referring to dates in terms of LocalDate. Either store the chronology (calendar system) in the user profile or lookup the chronology from the user locale Convert the ISO LocalDate to and from the user's preferred calendar system during printing and parsing This approach treats the problem of globalized calendar systems as a localization issue and confines it to the UI layer. This approach is in keeping with other localization issues in the java platform. As discussed above, performing calculations on a date where the rules of the calendar system are pluggable requires skill and is not recommended. Fortunately, the need to perform calculations on a date in an arbitrary calendar system is extremely rare. For example, it is highly unlikely that the business rules of a library book rental scheme will allow rentals to be for one month, where meaning of the month is dependent on the user's preferred calendar system. A key use case for calculations on a date in an arbitrary calendar system is producing a month-by-month calendar for display and user interaction. Again, this is a UI issue, and use of this interface solely within a few methods of the UI layer may be justified. In any other part of the system, where a date must be manipulated in a calendar system other than ISO, the use case will generally specify the calendar system to use. For example, an application may need to calculate the next Islamic or Hebrew holiday which may require manipulating the date. This kind of use case can be handled as follows: start from the ISO LocalDate being passed to the method convert the date to the alternate calendar system, which for this use case is known rather than arbitrary perform the calculation convert back to LocalDate Developers writing low-level frameworks or libraries should also avoid this interface. Instead, one of the two general purpose access interfaces should be used. Use @B_java#time#temporal#TemporalAccessor_E@ if read-only access is required, or use @B_java#time#temporal#Temporal_E@ if read-write access is required."}