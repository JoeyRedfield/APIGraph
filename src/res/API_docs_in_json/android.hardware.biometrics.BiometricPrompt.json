{"Functions": {"authenticate(android.hardware.biometrics.BiometricPrompt.CryptoObject,android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#biometrics#BiometricPrompt#CryptoObject_E@", "BiometricPrompt.CryptoObject: Object associated with the call This value must never be null."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: An object that can be used to cancel authentication This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: An executor to handle callback events This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback_E@", "BiometricPrompt.AuthenticationCallback: An object to receive authentication events This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the arguments are null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_BIOMETRIC_E@"], "Description": "This call warms up the biometric hardware, displays a system-provided dialog, and starts scanning for a biometric. It terminates when @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationError_E@ is called, when @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationSucceeded_E@, or when the user dismisses the system-provided dialog, at which point the crypto object becomes invalid. This operation can be canceled by using the provided cancel object. The application will receive authentication errors through @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback_E@, and button events through the corresponding callback set in @B_android#hardware#biometrics#BiometricPrompt#Builder#setNegativeButton_E@. It is safe to reuse the @B_android#hardware#biometrics#BiometricPrompt_E@ object, and calling @B_android#hardware#biometrics#BiometricPrompt#authenticate_E@ while an existing authentication attempt is occurring will stop the previous client and start a new authentication. The interrupted client will receive a cancelled notification through @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationError_E@. Note: Applications generally should not cancel and start authentication in quick succession. For example, to properly handle authentication across configuration changes, it's recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so, the application will not need to cancel/restart authentication during the configuration change. Requires @B_android#Manifest#permission#USE_BIOMETRIC_E@", "history": "Added in API level 28", "FullName": "public void authenticate (BiometricPrompt.CryptoObject crypto, CancellationSignal cancel, Executor executor, BiometricPrompt.AuthenticationCallback callback)"}, "authenticate(android.os.CancellationSignal,java.util.concurrent.Executor,android.hardware.biometrics.BiometricPrompt.AuthenticationCallback)": {"Returns": [], "Parameters": [["@B_android#os#CancellationSignal_E@", "CancellationSignal: An object that can be used to cancel authentication This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: An executor to handle callback events This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback_E@", "BiometricPrompt.AuthenticationCallback: An object to receive authentication events This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the arguments are null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_BIOMETRIC_E@"], "Description": "This call warms up the biometric hardware, displays a system-provided dialog, and starts scanning for a biometric. It terminates when @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationError_E@ is called, when @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationSucceeded_E@ is called, or when the user dismisses the system-provided dialog. This operation can be canceled by using the provided cancel object. The application will receive authentication errors through @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback_E@, and button events through the corresponding callback set in @B_android#hardware#biometrics#BiometricPrompt#Builder#setNegativeButton_E@. It is safe to reuse the @B_android#hardware#biometrics#BiometricPrompt_E@ object, and calling @B_android#hardware#biometrics#BiometricPrompt#authenticate_E@ while an existing authentication attempt is occurring will stop the previous client and start a new authentication. The interrupted client will receive a cancelled notification through @B_android#hardware#biometrics#BiometricPrompt#AuthenticationCallback#onAuthenticationError_E@. Note: Applications generally should not cancel and start authentication in quick succession. For example, to properly handle authentication across configuration changes, it's recommended to use BiometricPrompt in a fragment with setRetainInstance(true). By doing so, the application will not need to cancel/restart authentication during the configuration change. Requires @B_android#Manifest#permission#USE_BIOMETRIC_E@", "history": "Added in API level 28", "FullName": "public void authenticate (CancellationSignal cancel, Executor executor, BiometricPrompt.AuthenticationCallback callback)"}}, "Inheritance": [], "ClassName": "android.hardware.biometrics.BiometricPrompt", "ClassDesc": "A class that manages a system-provided biometric dialog."}