{"Functions": {"getBadgeImage()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the badge image drawable.", "history": "added in version 22.0.0", "FullName": "Drawable getBadgeImage ()"}, "getMainImage()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ImageView drawable.", "history": "added in version 22.0.0", "FullName": "Drawable getMainImage ()"}, "setBadgeImage(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the badge image drawable.", "history": "added in version 22.0.0", "FullName": "void setBadgeImage (Drawable drawable)"}, "getMainImageView()": {"Returns": [["@B_android#widget#ImageView_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the main image view.", "history": "added in version 22.0.0", "FullName": "ImageView getMainImageView ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "getTitleText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the title text.", "history": "added in version 22.0.0", "FullName": "CharSequence getTitleText ()"}, "getContentText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the content text.", "history": "added in version 22.0.0", "FullName": "CharSequence getContentText ()"}, "getInfoAreaBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the info area background drawable.", "history": "added in version 22.0.0", "FullName": "Drawable getInfoAreaBackground ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "setMainImage(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the image drawable with fade-in animation.", "history": "added in version 22.0.0", "FullName": "void setMainImage (Drawable drawable)"}, "setMainImageDimensions(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the layout dimensions of the ImageView.", "history": "added in version 22.0.0", "FullName": "void setMainImageDimensions (int width, int height)"}, "setContentText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the content text.", "history": "added in version 22.0.0", "FullName": "void setContentText (CharSequence text)"}, "setMainImageAdjustViewBounds(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables adjustment of view bounds on the main image.", "history": "added in version 22.0.0", "FullName": "void setMainImageAdjustViewBounds (boolean adjustViewBounds)"}, "setTitleText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the title text.", "history": "added in version 22.0.0", "FullName": "void setTitleText (CharSequence text)"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in @B_android#graphics#Canvas_E@ necessitates that a View return true if it uses the methods internally without passing the @B_android#graphics#Canvas#CLIP_TO_LAYER_SAVE_FLAG_E@. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "", "FullName": "boolean hasOverlappingRendering ()"}, "ImageCardView(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["int", "int: The resourceId of the theme you want to apply to the ImageCardView. The theme includes attributes \"imageCardViewStyle\", \"imageCardViewTitleStyle\", \"imageCardViewContentStyle\" etc. to customize individual part of ImageCardView."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calling this constructor inefficiently creates one ContextThemeWrapper per card, you should share it in card Presenter: wrapper = new ContextThemeWrapper(context, themResId); return new ImageCardView(wrapper); Create an ImageCardView using a given theme for customization.", "history": "added in version 23.1.0", "FullName": "ImageCardView (Context context, int themeResId)"}, "setInfoAreaBackgroundColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the info area background color.", "history": "added in version 22.0.0", "FullName": "void setInfoAreaBackgroundColor (int color)"}, "ImageCardView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": ["_E@"], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "ImageCardView (Context context)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@", "@B_android#support#v17#leanback#widget#BaseCardView_E@"], "ClassName": "android.support.v17.leanback.widget.ImageCardView", "ClassDesc": "A subclass of @B_android#support#v17#leanback#widget#BaseCardView_E@ with an https:##developer#android#com@B_android#widget#ImageView_E@ as its main region. The @B_android#support#v17#leanback#widget#ImageCardView_E@ is highly customizable and can be used for various use-cases by adjusting the ImageViewCard's type to any combination of Title, Content, Badge or ImageOnly. No matter what way you use, all your styles applied to an ImageCardView have to extend the style @B_android#support#v17#leanback#R#style#Widget_Leanback_ImageCardViewStyle_E@. The first possibility is to set custom Styles in the Leanback Theme's attributes imageCardViewStyle, imageCardViewTitleStyle etc. The styles set here, is the default style for all ImageCardViews. The second possibility allows you to style a particular ImageCardView. This is useful if you want to create multiple types of cards. E.g. you might want to display a card with only a title and another one with title and content. Thus you need to define two different ImageCardViewStyles and two different themes and apply them to the ImageCardViews. You can do this by using a the @B_android#support#v17#leanback#widget#ImageCardView#ImageCardView_E@ constructor and passing a ContextThemeWrapper with the custom ImageCardView theme id. You can style all ImageCardView's components such as the title, content, badge, infoArea and the image itself by extending the corresponding style and overriding the specific attribute in your custom ImageCardView theme. Title: The card's title Content: A short description Badge: An icon which can be displayed on the right or left side of the card. In order to choose the components you want to use in your ImageCardView, you have to specify them in the lbImageCardViewType attribute of your custom ImageCardViewStyle. You can combine the following values: Title, Content, IconOnRight, IconOnLeft, ImageOnly."}