{"Functions": {"CertPathValidator(java.security.cert.CertPathValidatorSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertPathValidatorSpi_E@", "CertPathValidatorSpi: the provider implementation"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a CertPathValidator object of the given algorithm, and encapsulates the given provider implementation (SPI object) in it.", "history": "Added in API level 1", "FullName": "protected CertPathValidator (CertPathValidatorSpi validatorSpi, Provider provider, String algorithm)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathValidator_E@", "a CertPathValidator object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathValidator algorithm. See the CertPathValidator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a CertPathValidatorSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathValidator object that implements the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static CertPathValidator getInstance (String algorithm)"}, "validate(java.security.cert.CertPath,java.security.cert.CertPathParameters)": {"Returns": [["@B_java#security#cert#CertPathValidatorResult_E@", "the result of the validation algorithm"]], "Parameters": [["@B_java#security#cert#CertPath_E@", "CertPath: the CertPath to be validated"], ["@B_java#security#cert#CertPathParameters_E@", "CertPathParameters: the algorithm parameters"]], "Throws": [["@B_java#security#cert#CertPathValidatorException_E@", "if the CertPath does not validate"], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified parameters or the type of the specified CertPath are inappropriate for this CertPathValidator"]], "SeeAlso": [], "Permissions": [], "Description": "Validates the specified certification path using the specified algorithm parameter set. The CertPath specified must be of a type that is supported by the validation algorithm, otherwise an InvalidAlgorithmParameterException will be thrown. For example, a CertPathValidator that implements the PKIX algorithm validates CertPath objects of type X.509.", "history": "Added in API level 1", "FullName": "public final CertPathValidatorResult validate (CertPath certPath, CertPathParameters params)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this CertPathValidator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this CertPathValidator.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathValidator_E@", "a CertPathValidator object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathValidator algorithm. See the CertPathValidator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathValidatorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathValidator object that implements the specified algorithm. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static CertPathValidator getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#cert#CertPathValidator_E@", "a CertPathValidator object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathValidator algorithm. See the CertPathValidator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathValidatorSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathValidator object that implements the specified algorithm. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static CertPathValidator getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the Provider of this CertPathValidator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Provider of this CertPathValidator.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#cert#CertPathValidator_E@", "a CertPathValidator object that implements the specified algorithm."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested CertPathValidator algorithm. See the CertPathValidator section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a CertPathValidatorSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a CertPathValidator object that implements the specified algorithm. A new CertPathValidator object encapsulating the CertPathValidatorSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static CertPathValidator getInstance (String algorithm, String provider)"}, "getDefaultType()": {"Returns": [["@B_java#lang#String_E@", "the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string \"PKIX\" if no such property exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Security_E@"], "Permissions": [], "Description": "Returns the default CertPathValidator type as specified by the certpathvalidator.type security property, or the string \"PKIX\" if no such property exists. The default CertPathValidator type can be used by applications that do not want to use a hard-coded type when calling one of the getInstance methods, and want to provide a default type in case a user does not specify its own. The default CertPathValidator type can be changed by setting the value of the certpathvalidator.type security property to the desired type.", "history": "Added in API level 1", "FullName": "public static final String getDefaultType ()"}, "getRevocationChecker()": {"Returns": [["@B_java#security#cert#CertPathChecker_E@", "a CertPathChecker"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the service provider does not support this method"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a CertPathChecker that the encapsulated CertPathValidatorSpi implementation uses to check the revocation status of certificates. A PKIX implementation returns objects of type PKIXRevocationChecker. Each invocation of this method returns a new instance of CertPathChecker. The primary purpose of this method is to allow callers to specify additional input parameters and options specific to revocation checking. See the class description for an example.", "history": "Added in API level 24", "FullName": "public final CertPathChecker getRevocationChecker ()"}}, "Inheritance": [], "ClassName": "java.security.cert.CertPathValidator", "ClassDesc": "A class for validating certification paths (also known as certificate chains). This class uses a provider-based architecture. To create a CertPathValidator, call one of the static getInstance methods, passing in the algorithm name of the CertPathValidator desired and optionally the name of the provider desired. Once a CertPathValidator object has been created, it can be used to validate certification paths by calling the @B_java#security#cert#CertPathValidator#validate_E@ method and passing it the CertPath to be validated and an algorithm-specific set of parameters. If successful, the result is returned in an object that implements the CertPathValidatorResult interface. The @B_java#security#cert#CertPathValidator#getRevocationChecker_E@ method allows an application to specify additional algorithm-specific parameters and options used by the CertPathValidator when checking the revocation status of certificates. Here is an example demonstrating how it is used with the PKIX algorithm: Android provides the following CertPathValidator algorithms: The static methods of this class are guaranteed to be thread-safe. Multiple threads may concurrently invoke the static methods defined in this class with no ill effects. However, this is not true for the non-static methods defined by this class. Unless otherwise documented by a specific provider, threads that need to access a single CertPathValidator instance concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating a different CertPathValidator instance need not synchronize."}