{"Functions": {"plusMonths(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified months added, not null"]], "Parameters": [["long", "long: the months to add, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified months added. This adds the amount to the months unit in a copy of this period. The years and days units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 months returns \"1 year, 8 months and 3 days\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period plusMonths (long monthsToAdd)"}, "addTo(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same type with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to adjust, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to add"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds this period to the specified temporal object. This returns a temporal object of the same observable type as the input with this period added. If the temporal has a chronology, it must be the ISO chronology. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#plus_E@. The calculation operates as follows. First, the chronology of the temporal is checked to ensure it is ISO chronology or null. Second, if the months are zero, the years are added if non-zero, otherwise the combination of years and months is added if non-zero. Finally, any days are added. This approach ensures that a partial period can be added to a partial date. For example, a period of years and/or months can be added to a YearMonth, but a period including days cannot. The approach also adds years and months together when necessary, which ensures correct behaviour at the end of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal addTo (Temporal temporal)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the requested period subtracted, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the specified amount has a non-ISO chronology or contains an invalid unit"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified period subtracted. This operates separately on the years, months and days. No normalization is performed. For example, \"1 year, 6 months and 3 days\" minus \"2 years, 2 months and 2 days\" returns \"-1 years, 4 months and 1 day\". The specified amount is typically an instance of Period. Other types are interpreted using @B_java#time#Period#from_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period minus (TemporalAmount amountToSubtract)"}, "between(java.time.LocalDate, java.time.LocalDate)": {"Returns": [["@B_java#time#Period_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the start date, inclusive, not null"], ["@B_java#time#LocalDate_E@", "LocalDate: the end date, exclusive, not null"]], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDate#until_E@"], "Permissions": [], "Description": "Obtains a Period consisting of the number of years, months, and days between two dates. The start date is included, but the end date is not. The period is calculated by removing complete months, then calculating the remaining number of days, adjusting to ensure that both have the same sign. The number of months is then split into years and months based on a 12 month year. A month is considered if the end day-of-month is greater than or equal to the start day-of-month. For example, from 2010-01-15 to 2011-03-18 is one year, two months and three days. The result of this method can be a negative period if the end is before the start. The negative sign will be the same in each of year, month and day.", "history": "added in API level 26", "FullName": "public static Period between (LocalDate startDateInclusive, LocalDate endDateExclusive)"}, "of(int, int, int)": {"Returns": [["@B_java#time#Period_E@", "the period of years, months and days, not null"]], "Parameters": [["int", "int: the amount of years, may be negative"], ["int", "int: the amount of months, may be negative"], ["int", "int: the amount of days, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of years, months and days. This creates an instance based on years, months and days.", "history": "added in API level 26", "FullName": "public static Period of (int years, int months, int days)"}, "multipliedBy(int)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the amounts multiplied by the scalar, not null"]], "Parameters": [["int", "int: the scalar to multiply by, not null"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance with each element in this period multiplied by the specified scalar. This returns a period with each of the years, months and days units individually multiplied. For example, a period of \"2 years, -3 months and 4 days\" multiplied by 3 will return \"6 years, -9 months and 12 days\". No normalization is performed.", "history": "Added in API level 26", "FullName": "public Period multipliedBy (int scalar)"}, "getChronology()": {"Returns": [["@B_java#time#chrono#IsoChronology_E@", "the ISO chronology, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology of this period, which is the ISO calendar system. The Chronology represents the calendar system in use. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time.", "history": "Added in API level 26", "FullName": "public IsoChronology getChronology ()"}, "from(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#Period_E@", "the equivalent period, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the temporal amount to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a Period"], ["@B_java#lang#ArithmeticException_E@", "if the amount of years, months or days exceeds an int"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Period from a temporal amount. This obtains a period based on the specified amount. A TemporalAmount represents an amount of time, which may be date-based or time-based, which this factory extracts to a Period. The conversion loops around the set of units from the amount and uses the @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@ units to create a period. If any other units are found then an exception is thrown. If the amount is a ChronoPeriod then it must use the ISO chronology.", "history": "Added in API level 26", "FullName": "public static Period from (TemporalAmount amount)"}, "negated()": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the amounts negated, not null"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs, which only happens if one of the units has the value Long.MIN_VALUE"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance with each amount in this period negated. This returns a period with each of the years, months and days units individually negated. For example, a period of \"2 years, -3 months and 4 days\" will be negated to \"-2 years, 3 months and -4 days\". No normalization is performed.", "history": "Added in API level 26", "FullName": "public Period negated ()"}, "ofMonths(int)": {"Returns": [["@B_java#time#Period_E@", "the period of months, not null"]], "Parameters": [["int", "int: the number of months, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of months. The resulting period will have the specified months. The years and days units will be zero.", "history": "Added in API level 26", "FullName": "public static Period ofMonths (int months)"}, "isZero()": {"Returns": [["boolean", "true if this period is zero-length"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if all three units of this period are zero. A zero period has the value zero for the years, months and days units.", "history": "Added in API level 26", "FullName": "public boolean isZero ()"}, "plusDays(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified days added, not null"]], "Parameters": [["long", "long: the days to add, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified days added. This adds the amount to the days unit in a copy of this period. The years and months units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 days returns \"1 year, 6 months and 5 days\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period plusDays (long daysToAdd)"}, "get(java.time.temporal.TemporalUnit)": {"Returns": [["long", "the long value of the unit"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the TemporalUnit for which to return the value"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the unit is not supported"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the requested unit. This returns a value for each of the three supported units, @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. All other units throw an exception.", "history": "Added in API level 26", "FullName": "public long get (TemporalUnit unit)"}, "ofWeeks(int)": {"Returns": [["@B_java#time#Period_E@", "the period, with the input weeks converted to days, not null"]], "Parameters": [["int", "int: the number of weeks, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of weeks. The resulting period will be day-based, with the amount of days equal to the number of weeks multiplied by 7. The years and months units will be zero.", "history": "Added in API level 26", "FullName": "public static Period ofWeeks (int weeks)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other period"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this period is equal to another period. The comparison is based on the type Period and each of the three amounts. To be equal, the years, months and days units must be individually equal. Note that this means that a period of \"15 Months\" is not equal to a period of \"1 Year and 3 Months\".", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "plusYears(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified years added, not null"]], "Parameters": [["long", "long: the years to add, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified years added. This adds the amount to the years unit in a copy of this period. The months and days units are unaffected. For example, \"1 year, 6 months and 3 days\" plus 2 years returns \"3 years, 6 months and 3 days\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period plusYears (long yearsToAdd)"}, "subtractFrom(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same type with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to adjust, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to subtract"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Subtracts this period from the specified temporal object. This returns a temporal object of the same observable type as the input with this period subtracted. If the temporal has a chronology, it must be the ISO chronology. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#minus_E@. The calculation operates as follows. First, the chronology of the temporal is checked to ensure it is ISO chronology or null. Second, if the months are zero, the years are subtracted if non-zero, otherwise the combination of years and months is subtracted if non-zero. Finally, any days are subtracted. This approach ensures that a partial period can be subtracted from a partial date. For example, a period of years and/or months can be subtracted from a YearMonth, but a period including days cannot. The approach also subtracts years and months together when necessary, which ensures correct behaviour at the end of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal subtractFrom (Temporal temporal)"}, "between(java.time.LocalDate,java.time.LocalDate)": {"Returns": [["@B_java#time#Period_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the start date, inclusive, not null"], ["@B_java#time#LocalDate_E@", "LocalDate: the end date, exclusive, not null"]], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDate#until_E@"], "Permissions": [], "Description": "Obtains a Period consisting of the number of years, months, and days between two dates. The start date is included, but the end date is not. The period is calculated by removing complete months, then calculating the remaining number of days, adjusting to ensure that both have the same sign. The number of months is then split into years and months based on a 12 month year. A month is considered if the end day-of-month is greater than or equal to the start day-of-month. For example, from 2010-01-15 to 2011-03-18 is one year, two months and three days. The result of this method can be a negative period if the end is before the start. The negative sign will be the same in each of year, month and day.", "history": "Added in API level 26", "FullName": "public static Period between (LocalDate startDateInclusive, LocalDate endDateExclusive)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this period.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "normalized()": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with excess months normalized to years, not null"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the years and months normalized. This normalizes the years and months units, leaving the days unit unchanged. The months unit is adjusted to have an absolute value less than 11, with the years unit being adjusted to compensate. For example, a period of \"1 Year and 15 months\" will be normalized to \"2 years and 3 months\". The sign of the years and months units will be the same after normalization. For example, a period of \"1 year and -25 months\" will be normalized to \"-1 year and -1 month\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period normalized ()"}, "ofDays(int)": {"Returns": [["@B_java#time#Period_E@", "the period of days, not null"]], "Parameters": [["int", "int: the number of days, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of days. The resulting period will have the specified days. The years and months units will be zero.", "history": "Added in API level 26", "FullName": "public static Period ofDays (int days)"}, "getUnits()": {"Returns": [["@B_java#util#List_E@", "a list containing the years, months and days units, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of units supported by this period. The supported units are @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. They are returned in the order years, months, days. This set can be used in conjunction with @B_java#time#Period#get_E@ to access the entire state of the period.", "history": "Added in API level 26", "FullName": "public List<TemporalUnit> getUnits ()"}, "minusYears(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified years subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified years subtracted. This subtracts the amount from the years unit in a copy of this period. The months and days units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 years returns \"-1 years, 6 months and 3 days\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period minusYears (long yearsToSubtract)"}, "getYears()": {"Returns": [["int", "the amount of years of this period, may be negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the amount of years of this period. This returns the years unit. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\".", "history": "Added in API level 26", "FullName": "public int getYears ()"}, "minusDays(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified days subtracted, not null"]], "Parameters": [["long", "long: the months to subtract, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified days subtracted. This subtracts the amount from the days unit in a copy of this period. The years and months units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 days returns \"1 year, 6 months and 1 day\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period minusDays (long daysToSubtract)"}, "withYears(int)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the requested years, not null"]], "Parameters": [["int", "int: the years to represent, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified amount of years. This sets the amount of the years unit in a copy of this period. The months and days units are unaffected. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period withYears (int years)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this period, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this period as a String, such as P6Y3M1D. The output will be in the ISO-8601 period format. A zero period will be represented as zero days, 'P0D'.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "isNegative()": {"Returns": [["boolean", "true if any unit of this period is negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if any of the three units of this period are negative. This checks whether the years, months or days units are less than zero.", "history": "Added in API level 26", "FullName": "public boolean isNegative ()"}, "getDays()": {"Returns": [["int", "the amount of days of this period, may be negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the amount of days of this period. This returns the days unit.", "history": "Added in API level 26", "FullName": "public int getDays ()"}, "minusMonths(long)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the specified months subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, positive or negative"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified months subtracted. This subtracts the amount from the months unit in a copy of this period. The years and days units are unaffected. For example, \"1 year, 6 months and 3 days\" minus 2 months returns \"1 year, 4 months and 3 days\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period minusMonths (long monthsToSubtract)"}, "withMonths(int)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the requested months, not null"]], "Parameters": [["int", "int: the months to represent, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified amount of months. This sets the amount of the months unit in a copy of this period. The years and days units are unaffected. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period withMonths (int months)"}, "withDays(int)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the requested days, not null"]], "Parameters": [["int", "int: the days to represent, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified amount of days. This sets the amount of the days unit in a copy of this period. The years and months units are unaffected. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period withDays (int days)"}, "ofYears(int)": {"Returns": [["@B_java#time#Period_E@", "the period of years, not null"]], "Parameters": [["int", "int: the number of years, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of years. The resulting period will have the specified years. The months and days units will be zero.", "history": "Added in API level 26", "FullName": "public static Period ofYears (int years)"}, "getMonths()": {"Returns": [["int", "the amount of months of this period, may be negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the amount of months of this period. This returns the months unit. The months unit is not automatically normalized with the years unit. This means that a period of \"15 months\" is different to a period of \"1 year and 3 months\".", "history": "Added in API level 26", "FullName": "public int getMonths ()"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#Period_E@", "the parsed period, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed to a period"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period from a text string such as PnYnMnD. This will parse the string produced by toString() which is based on the ISO-8601 period formats PnYnMnD and PnW. The string starts with an optional sign, denoted by the ASCII negative or positive symbol. If negative, the whole period is negated. The ASCII letter \"P\" is next in upper or lower case. There are then four sections, each consisting of a number and a suffix. At least one of the four sections must be present. The sections have suffixes in ASCII of \"Y\", \"M\", \"W\" and \"D\" for years, months, weeks and days, accepted in upper or lower case. The suffixes must occur in order. The number part of each section must consist of ASCII digits. The number may be prefixed by the ASCII negative or positive symbol. The number must parse to an int. The leading plus/minus sign, and negative values for other units are not part of the ISO-8601 standard. In addition, ISO-8601 does not permit mixing between the PnYnMnD and PnW formats. Any week-based input is multiplied by 7 and treated as a number of days. For example, the following are valid inputs:", "history": "Added in API level 26", "FullName": "public static Period parse (CharSequence text)"}, "of(int,int,int)": {"Returns": [["@B_java#time#Period_E@", "the period of years, months and days, not null"]], "Parameters": [["int", "int: the amount of years, may be negative"], ["int", "int: the amount of months, may be negative"], ["int", "int: the amount of days, may be negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a Period representing a number of years, months and days. This creates an instance based on years, months and days.", "history": "Added in API level 26", "FullName": "public static Period of (int years, int months, int days)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#Period_E@", "a Period based on this period with the requested period added, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the specified amount has a non-ISO chronology or contains an invalid unit"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified period added. This operates separately on the years, months and days. No normalization is performed. For example, \"1 year, 6 months and 3 days\" plus \"2 years, 2 months and 2 days\" returns \"3 years, 8 months and 5 days\". The specified amount is typically an instance of Period. Other types are interpreted using @B_java#time#Period#from_E@. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Period plus (TemporalAmount amountToAdd)"}, "toTotalMonths()": {"Returns": [["long", "the total number of months in the period, may be negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total number of months in this period. This returns the total number of months in the period by multiplying the number of years by 12 and adding the number of months. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long toTotalMonths ()"}}, "Inheritance": [], "ClassName": "java.time.Period", "ClassDesc": "A date-based amount of time in the ISO-8601 calendar system, such as '2 years, 3 months and 4 days'. This class models a quantity or amount of time in terms of years, months and days. See @B_java#time#Duration_E@ for the time-based equivalent to this class. Durations and periods differ in their treatment of daylight savings time when added to @B_java#time#ZonedDateTime_E@. A Duration will add an exact number of seconds, thus a duration of one day is always exactly 24 hours. By contrast, a Period will add a conceptual day, trying to maintain the local time. For example, consider adding a period of one day and a duration of one day to 18:00 on the evening before a daylight savings gap. The Period will add the conceptual day and result in a ZonedDateTime at 18:00 the following day. By contrast, the Duration will add exactly 24 hours, resulting in a ZonedDateTime at 19:00 the following day (assuming a one hour DST gap). The supported units of a period are @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. All three fields are always present, but may be set to zero. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. The period is modeled as a directed amount of time, meaning that individual parts of the period may be negative."}