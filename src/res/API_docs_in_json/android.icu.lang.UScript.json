{"Functions": {"getScript(int)": {"Returns": [["int", "The script code"]], "Parameters": [["int", "int: UChar32 codepoint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the script code associated with the given codepoint. Returns UScript.MALAYAM given 0x0D02", "history": "Added in API level 24", "FullName": "public static int getScript (int codepoint)"}, "getShortName(int)": {"Returns": [["@B_java#lang#String_E@", "short script name (4-letter code)"]], "Parameters": [["int", "int: int script code"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the script code is not valid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the 4-letter ISO 15924 script code, which is the same as the short Unicode script name if Unicode has names for the script. Returns \"Mlym\" given MALAYALAM.", "history": "Added in API level 24", "FullName": "public static String getShortName (int scriptCode)"}, "breaksBetweenLetters(int)": {"Returns": [["boolean", "true if the script allows line breaks between letters"]], "Parameters": [["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the script allows line breaks between letters (excluding hyphenation). Such a script typically requires dictionary-based line breaking. For example, Hani and Thai.", "history": "Added in API level 24", "FullName": "public static boolean breaksBetweenLetters (int script)"}, "isRightToLeft(int)": {"Returns": [["boolean", "true if the script is right-to-left"]], "Parameters": [["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the script is written right-to-left. For example, Arab and Hebr.", "history": "Added in API level 24", "FullName": "public static boolean isRightToLeft (int script)"}, "isCased(int)": {"Returns": [["boolean", "true if the script is cased"]], "Parameters": [["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if in modern (or most recent) usage of the script case distinctions are customary. For example, Latn and Cyrl.", "history": "Added in API level 24", "FullName": "public static boolean isCased (int script)"}, "getScriptExtensions(int, java.util.BitSet)": {"Returns": [["int", "negative number of script codes in c's Script_Extensions, or the non-negative single Script value"]], "Parameters": [["int", "int: code point"], ["@B_java#util#BitSet_E@", "BitSet: set of script code integers; will be cleared, then bits are set corresponding to c's Script_Extensions"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets code point c's Script_Extensions as script code integers into the output BitSet. If c does have Script_Extensions, then the return value is the negative number of Script_Extensions codes (= -set.cardinality()); in this case, the Script property value (normally Common or Inherited) is not included in the set. If c does not have Script_Extensions, then the one Script code is put into the set and also returned. If c is not a valid code point, then the one @B_android#icu#lang#UScript#UNKNOWN_E@ code is put into the set and also returned. In other words, if the return value is non-negative, it is c's single Script code and the set contains exactly this Script code. If the return value is -n, then the set contains c's n>=2 Script_Extensions script codes. Some characters are commonly used in multiple scripts. For more information, see UAX #24: http://www.unicode.org/reports/tr24/.", "history": "added in API level 24", "FullName": "public static int getScriptExtensions (int c, BitSet set)"}, "getUsage(int)": {"Returns": [["@B_android#icu#lang#UScript#ScriptUsage_E@", "script usage"]], "Parameters": [["int", "int: script code"]], "Throws": [], "SeeAlso": ["@B_android#icu#lang#UScript#ScriptUsage_E@"], "Permissions": [], "Description": "Returns the script usage according to UAX #31 Unicode Identifier and Pattern Syntax. Returns @B_android#icu#lang#UScript#ScriptUsage#NOT_ENCODED_E@ if the script is not encoded in Unicode.", "history": "Added in API level 24", "FullName": "public static UScript.ScriptUsage getUsage (int script)"}, "getScriptExtensions(int,java.util.BitSet)": {"Returns": [["int", "negative number of script codes in c's Script_Extensions, or the non-negative single Script value"]], "Parameters": [["int", "int: code point"], ["@B_java#util#BitSet_E@", "BitSet: set of script code integers; will be cleared, then bits are set corresponding to c's Script_Extensions"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets code point c's Script_Extensions as script code integers into the output BitSet. If c does have Script_Extensions, then the return value is the negative number of Script_Extensions codes (= -set.cardinality()); in this case, the Script property value (normally Common or Inherited) is not included in the set. If c does not have Script_Extensions, then the one Script code is put into the set and also returned. If c is not a valid code point, then the one @B_android#icu#lang#UScript#UNKNOWN_E@ code is put into the set and also returned. In other words, if the return value is non-negative, it is c's single Script code and the set contains exactly this Script code. If the return value is -n, then the set contains c's n>=2 Script_Extensions script codes. Some characters are commonly used in multiple scripts. For more information, see UAX #24: http://www.unicode.org/reports/tr24/.", "history": "Added in API level 24", "FullName": "public static int getScriptExtensions (int c, BitSet set)"}, "getSampleString(int)": {"Returns": [["@B_java#lang#String_E@", "the sample character string"]], "Parameters": [["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the script sample character string. This string normally consists of one code point but might be longer. The string is empty if the script is not encoded.", "history": "Added in API level 24", "FullName": "public static String getSampleString (int script)"}, "getCode(java.util.Locale)": {"Returns": [["int[]", "The script codes array. null if the the code cannot be found."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: Locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a script codes associated with the given locale or ISO 15924 abbreviation or name. Returns MALAYAM given \"Malayam\" OR \"Mlym\". Returns LATIN given \"en\" OR \"en_US\"", "history": "Added in API level 24", "FullName": "public static int[] getCode (Locale locale)"}, "getCode(java.lang.String)": {"Returns": [["int[]", "The script codes array. null if the the code cannot be found."]], "Parameters": [["@B_java#lang#String_E@", "String: name of the script or ISO 15924 code or locale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the script codes associated with the given locale or ISO 15924 abbreviation or name. Returns MALAYAM given \"Malayam\" OR \"Mlym\". Returns LATIN given \"en\" OR \"en_US\" Note: To search by short or long script alias only, use @B_android#icu#lang#UScript#getCodeFromName_E@ instead. That does a fast lookup with no access of the locale data.", "history": "Added in API level 24", "FullName": "public static int[] getCode (String nameOrAbbrOrLocale)"}, "getCodeFromName(java.lang.String)": {"Returns": [["int", "The script code value, or INVALID_CODE if the code cannot be found."]], "Parameters": [["@B_java#lang#String_E@", "String: name of the script or ISO 15924 code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the script code associated with the given Unicode script property alias (name or abbreviation). Short aliases are ISO 15924 script codes. Returns MALAYAM given \"Malayam\" OR \"Mlym\".", "history": "Added in API level 24", "FullName": "public static int getCodeFromName (String nameOrAbbr)"}, "hasScript(int,int)": {"Returns": [["boolean", "true if sc is in Script_Extensions(c)"]], "Parameters": [["int", "int: code point"], ["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do the Script_Extensions of code point c contain script sc? If c does not have explicit Script_Extensions, then this tests whether c has the Script property value sc. Some characters are commonly used in multiple scripts. For more information, see UAX #24: http://www.unicode.org/reports/tr24/.", "history": "Added in API level 24", "FullName": "public static boolean hasScript (int c, int sc)"}, "hasScript(int, int)": {"Returns": [["boolean", "true if sc is in Script_Extensions(c)"]], "Parameters": [["int", "int: code point"], ["int", "int: script code"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do the Script_Extensions of code point c contain script sc? If c does not have explicit Script_Extensions, then this tests whether c has the Script property value sc. Some characters are commonly used in multiple scripts. For more information, see UAX #24: http://www.unicode.org/reports/tr24/.", "history": "added in API level 24", "FullName": "public static boolean hasScript (int c, int sc)"}, "getCode(android.icu.util.ULocale)": {"Returns": [["int[]", "The script codes array. null if the the code cannot be found."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: ULocale"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a script codes associated with the given locale or ISO 15924 abbreviation or name. Returns MALAYAM given \"Malayam\" OR \"Mlym\". Returns LATIN given \"en\" OR \"en_US\"", "history": "Added in API level 24", "FullName": "public static int[] getCode (ULocale locale)"}, "getName(int)": {"Returns": [["@B_java#lang#String_E@", "long script name as given in PropertyValueAliases.txt, or the 4-letter code"]], "Parameters": [["int", "int: int script code"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the script code is not valid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the long Unicode script name, if there is one. Otherwise returns the 4-letter ISO 15924 script code. Returns \"Malayam\" given MALAYALAM.", "history": "Added in API level 24", "FullName": "public static String getName (int scriptCode)"}}, "Inheritance": [], "ClassName": "android.icu.lang.UScript", "ClassDesc": "Constants for ISO 15924 script codes, and related functions. The current set of script code constants supports at least all scripts that are encoded in the version of Unicode which ICU currently supports. The names of the constants are usually derived from the Unicode script property value aliases. See UAX #24 Unicode Script Property (http://www.unicode.org/reports/tr24/) and http://www.unicode.org/Public/UCD/latest/ucd/PropertyValueAliases.txt . In addition, constants for many ISO 15924 script codes are included, for use with language tags, CLDR data, and similar. Some of those codes are not used in the Unicode Character Database (UCD). For example, there are no characters that have a UCD script property value of Hans or Hant. All Han ideographs have the Hani script property value in Unicode. Private-use codes Qaaa..Qabx are not included, except as used in the UCD or in CLDR. Starting with ICU 55, script codes are only added when their scripts have been or will certainly be encoded in Unicode, and have been assigned Unicode script property value aliases, to ensure that their script names are stable and match the names of the constants. Script codes like Latf and Aran that are not subject to separate encoding may be added at any time."}