{"Functions": {"setRGBtoYUV()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert from RGB to YUV with a direct copy of the 4th channel.", "history": "Added in API level 17", "FullName": "public void setRGBtoYUV ()"}, "setAdd(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: The red add value."], ["float", "float: The green add value."], ["float", "float: The blue add value."], ["float", "float: The alpha add value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0}", "history": "Added in API level 19", "FullName": "public void setAdd (float r, float g, float b, float a)"}, "setAdd(android.renderscript.Float4)": {"Returns": [], "Parameters": [["@B_android#renderscript#Float4_E@", "Float4: The float4 value to be added."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0}", "history": "Added in API level 19", "FullName": "public void setAdd (Float4 f)"}, "setColorMatrix(android.renderscript.Matrix3f)": {"Returns": [], "Parameters": [["@B_android#renderscript#Matrix3f_E@", "Matrix3f: The 3x3 matrix to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color matrix which will be applied to each cell of the image. This will set the alpha channel to be a copy.", "history": "Added in API level 17", "FullName": "public void setColorMatrix (Matrix3f m)"}, "create(android.renderscript.RenderScript)": {"Returns": [["@B_android#renderscript#ScriptIntrinsicColorMatrix_E@", "ScriptIntrinsicColorMatrix"]], "Parameters": [["@B_android#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an intrinsic for applying a color matrix to an allocation.", "history": "Added in API level 19", "FullName": "public static ScriptIntrinsicColorMatrix create (RenderScript rs)"}, "setYUVtoRGB()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to convert from YUV to RGB with a direct copy of the 4th channel.", "history": "Added in API level 17", "FullName": "public void setYUVtoRGB ()"}, "forEach(android.renderscript.Allocation,android.renderscript.Allocation)": {"Returns": [], "Parameters": [["@B_android#renderscript#Allocation_E@", "Allocation: Input allocation"], ["@B_android#renderscript#Allocation_E@", "Allocation: Output allocation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoke the kernel and apply the matrix to each cell of input @B_android#renderscript#Allocation_E@ and copy to the output @B_android#renderscript#Allocation_E@. If the vector size of the input is less than four, the remaining components are treated as zero for the matrix multiply. If the output vector size is less than four, the unused vector components are discarded.", "history": "Added in API level 17", "FullName": "public void forEach (Allocation ain, Allocation aout)"}, "setAdd(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: The red add value."], ["float", "float: The green add value."], ["float", "float: The blue add value."], ["float", "float: The alpha add value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value to be added after the color matrix has been applied. The default value is {0, 0, 0, 0}", "history": "added in API level 19", "FullName": "public void setAdd (float r, float g, float b, float a)"}, "forEach(android.renderscript.Allocation,android.renderscript.Allocation,android.renderscript.Script.LaunchOptions)": {"Returns": [], "Parameters": [["@B_android#renderscript#Allocation_E@", "Allocation: Input allocation"], ["@B_android#renderscript#Allocation_E@", "Allocation: Output allocation"], ["@B_android#renderscript#Script#LaunchOptions_E@", "Script.LaunchOptions: LaunchOptions for clipping"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoke the kernel and apply the matrix to each cell of input @B_android#renderscript#Allocation_E@ and copy to the output @B_android#renderscript#Allocation_E@. If the vector size of the input is less than four, the remaining components are treated as zero for the matrix multiply. If the output vector size is less than four, the unused vector components are discarded.", "history": "Added in API level 21", "FullName": "public void forEach (Allocation ain, Allocation aout, Script.LaunchOptions opt)"}, "setColorMatrix(android.renderscript.Matrix4f)": {"Returns": [], "Parameters": [["@B_android#renderscript#Matrix4f_E@", "Matrix4f: The 4x4 matrix to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color matrix which will be applied to each cell of the image.", "history": "Added in API level 17", "FullName": "public void setColorMatrix (Matrix4f m)"}, "getKernelID()": {"Returns": [["@B_android#renderscript#Script#KernelID_E@", "Script.KernelID The KernelID object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a KernelID for this intrinsic kernel.", "history": "Added in API level 17", "FullName": "public Script.KernelID getKernelID ()"}, "setGreyscale()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a color matrix to convert from RGB to luminance. The alpha channel will be a copy.", "history": "Added in API level 17", "FullName": "public void setGreyscale ()"}, "create(android.renderscript.RenderScript,android.renderscript.Element)": {"Returns": [["@B_android#renderscript#ScriptIntrinsicColorMatrix_E@", "ScriptIntrinsicColorMatrix"]], "Parameters": [["@B_android#renderscript#RenderScript_E@", "RenderScript: The RenderScript context"], ["@B_android#renderscript#Element_E@", "Element: Element type for inputs and outputs, As of API 19, this parameter is ignored. The Element type check is performed in the kernel launch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use the single argument version as Element is now ignored. Create an intrinsic for applying a color matrix to an allocation.", "history": "Added in API level 17 Deprecated in API level 19", "FullName": "public static ScriptIntrinsicColorMatrix create (RenderScript rs, Element e)"}}, "Inheritance": ["@B_android#renderscript#BaseObj_E@", "@B_android#renderscript#Script_E@", "@B_android#renderscript#ScriptIntrinsic_E@"], "ClassName": "android.renderscript.ScriptIntrinsicColorMatrix", "ClassDesc": "Intrinsic for applying a color matrix to allocations. If the element type is @B_android#renderscript#Element#DataType#UNSIGNED_8_E@, it is converted to @B_android#renderscript#Element#DataType#FLOAT_32_E@ and normalized from (0-255) to (0-1). If the incoming vector size is less than four, a @B_android#renderscript#Element#F32_4_E@ is created by filling the missing vector channels with zero. This value is then multiplied by the 4x4 color matrix as performed by rsMatrixMultiply(), adding a @B_android#renderscript#Element#F32_4_E@, and then writing it to the output @B_android#renderscript#Allocation_E@. If the ouptut type is unsigned, the value is normalized from (0-1) to (0-255) and converted. If the output vector size is less than four, the unused channels are discarded. Supported elements types are @B_android#renderscript#Element#U8_E@, @B_android#renderscript#Element#U8_2_E@, @B_android#renderscript#Element#U8_3_E@, @B_android#renderscript#Element#U8_4_E@, @B_android#renderscript#Element#F32_E@, @B_android#renderscript#Element#F32_2_E@, @B_android#renderscript#Element#F32_3_E@, and @B_android#renderscript#Element#F32_4_E@. * @apiSince 17"}