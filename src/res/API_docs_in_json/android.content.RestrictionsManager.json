{"Functions": {"hasRestrictionsProvider()": {"Returns": [["boolean", "whether there is an active Restrictions Provider."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by an application to check if there is an active Restrictions Provider. If there isn't, @B_android#content#RestrictionsManager#requestPermission_E@ is not available.", "history": "Added in API level 21", "FullName": "public boolean hasRestrictionsProvider ()"}, "requestPermission(java.lang.String,java.lang.String,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The type of request. The type could be one of the predefined types specified here or a custom type that the specific Restrictions Provider might understand. For custom types, the type name should be namespaced to avoid collisions with predefined types and types specified by other Restrictions Providers."], ["@B_java#lang#String_E@", "String: A unique id generated by the app that contains sufficient information to identify the parameters of the request when it receives the id in the response."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: A PersistableBundle containing the data corresponding to the specified request type. The keys for the data in the bundle depend on the request type."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the required parameters are missing."]], "SeeAlso": [], "Permissions": [], "Description": "Called by an application to request permission for an operation. The contents of the request are passed in a Bundle that contains several pieces of data depending on the chosen request type.", "history": "Added in API level 21", "FullName": "public void requestPermission (String requestType, String requestId, PersistableBundle request)"}, "createLocalApprovalIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Intent createLocalApprovalIntent ()"}, "convertRestrictionsToBundle(java.util.List<android.content.RestrictionEntry>)": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [["@B_java#util#List_E@", "List: list of restrictions"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a list of restrictions to the corresponding bundle, using the following mapping:", "history": "Added in API level 23", "FullName": "public static Bundle convertRestrictionsToBundle (List<RestrictionEntry> entries)"}, "getApplicationRestrictions()": {"Returns": [["@B_android#os#Bundle_E@", "the application restrictions as a Bundle. Returns null if there are no restrictions."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns any available set of application-specific restrictions applicable to this application.", "history": "Added in API level 21", "FullName": "public Bundle getApplicationRestrictions ()"}, "notifyPermissionResponse(java.lang.String,android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the application to deliver the response to. Cannot be null."], ["@B_android#os#PersistableBundle_E@", "PersistableBundle: the bundle containing the response status, request ID and other information. Cannot be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the required parameters are missing."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the Restrictions Provider to deliver a response to an application.", "history": "Added in API level 21", "FullName": "public void notifyPermissionResponse (String packageName, PersistableBundle response)"}, "getManifestRestrictions(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "The list of RestrictionEntry objects created from the XML file specified in the manifest, or null if none was specified."]], "Parameters": [["@B_java#lang#String_E@", "String: The application for which to fetch the restrictions list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse and return the list of restrictions defined in the manifest for the specified package, if any.", "history": "Added in API level 21", "FullName": "public List<RestrictionEntry> getManifestRestrictions (String packageName)"}}, "Inheritance": [], "ClassName": "android.content.RestrictionsManager", "ClassDesc": "Provides a mechanism for apps to query restrictions imposed by an entity that manages the user. Apps can also send permission requests to a local or remote device administrator to override default app-specific restrictions or any other operation that needs explicit authorization from the administrator. Apps can expose a set of restrictions via an XML file specified in the manifest. If the user has an active Restrictions Provider, dynamic requests can be made in addition to the statically imposed restrictions. Dynamic requests are app-specific and can be expressed via a predefined set of request types. The RestrictionsManager forwards the dynamic requests to the active Restrictions Provider. The Restrictions Provider can respond back to requests by calling @B_android#content#RestrictionsManager#notifyPermissionResponse_E@, when a response is received from the administrator of the device or user. The response is relayed back to the application via a protected broadcast, @B_android#content#RestrictionsManager#ACTION_PERMISSION_RESPONSE_RECEIVED_E@. Static restrictions are specified by an XML file referenced by a meta-data attribute in the manifest. This enables applications as well as any web administration consoles to be able to read the list of available restrictions from the apk. The syntax of the XML format is as follows: The attributes for each restriction depend on the restriction type. key, title and restrictionType are mandatory. entries and entryValues are required if restrictionType is choice or multi-select. defaultValue is optional and its type depends on the restrictionType hidden type must have a defaultValue and will not be shown to the administrator. It can be used to pass along data that cannot be modified, such as a version code. description is meant to describe the restriction in more detail to the administrator controlling the values, if the title is not sufficient. Only restrictions of type bundle and bundle_array can have one or multiple nested restriction elements. In your manifest's application section, add the meta-data tag to point to the restrictions XML file as shown below:"}