{"Functions": {"isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 28", "FullName": "public final boolean isAutoMirrored ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 28", "FullName": "public void draw (Canvas canvas)"}, "unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)": {"Returns": [["boolean", "false if callback didn't exist in the call back list, or true if callback has been removed successfully."]], "Parameters": [["@B_android#graphics#drawable#Animatable2#AnimationCallback_E@", "Animatable2.AnimationCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified animation callback.", "history": "Added in API level 28", "FullName": "public boolean unregisterAnimationCallback (Animatable2.AnimationCallback callback)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 28", "FullName": "public int getIntrinsicWidth ()"}, "registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Animatable2#AnimationCallback_E@", "Animatable2.AnimationCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a callback to listen to the animation events.", "history": "Added in API level 28", "FullName": "public void registerAnimationCallback (Animatable2.AnimationCallback callback)"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 28", "FullName": "public void setAlpha (int alpha)"}, "setRepeatCount(int)": {"Returns": [], "Parameters": [["int", "int: Value is REPEAT_INFINITE or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the number of times to repeat the animation. By default, the repeat count in the encoded data is respected. If set to @B_android#graphics#drawable#AnimatedImageDrawable#REPEAT_INFINITE_E@, the animation will repeat as long as it is displayed. If the value is 0, the animation will play once. This call replaces the current repeat count. If the encoded data specified a repeat count of 2 (meaning that @B_android#graphics#drawable#AnimatedImageDrawable#getRepeatCount_E@ returns 2, the animation will play three times. Calling setRepeatCount(1) will result in playing only twice and @B_android#graphics#drawable#AnimatedImageDrawable#getRepeatCount_E@ returning 1. If the animation is already playing, the iterations that have already occurred count towards the new count. If the animation has already repeated the appropriate number of times (or more), it will finish its current iteration and then stop.", "history": "Added in API level 28", "FullName": "public void setRepeatCount (int repeatCount)"}, "onLayoutDirectionChanged(int)": {"Returns": [["boolean", "true if the layout direction change has caused the appearance of the drawable to change such that it needs to be re-drawn, false otherwise"]], "Parameters": [["int", "int: the new resolved layout direction Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawable's resolved layout direction changes.", "history": "Added in API level 28", "FullName": "public boolean onLayoutDirectionChanged (int layoutDirection)"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 28", "FullName": "public int getAlpha ()"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 28", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "isRunning()": {"Returns": [["boolean", "True if the animation is running, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the animation is currently running. When this drawable is created, this will return false. A client needs to call @B_android#graphics#drawable#AnimatedImageDrawable#start_E@ to start the animation.", "history": "Added in API level 28", "FullName": "public boolean isRunning ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start the animation. Does nothing if the animation is already running. If the animation is stopped, this will reset it. When the drawable is drawn, starting the animation, @B_android#graphics#drawable#Animatable2#AnimationCallback#onAnimationStart_E@ will be called.", "history": "Added in API level 28", "FullName": "public void start ()"}, "AnimatedImageDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an empty AnimatedImageDrawable.", "history": "Added in API level 28", "FullName": "public AnimatedImageDrawable ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 28", "FullName": "public int getIntrinsicHeight ()"}, "clearAnimationCallbacks()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all existing animation callbacks.", "history": "Added in API level 28", "FullName": "public void clearAnimationCallbacks ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 28", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "Added in API level 28", "FullName": "public ColorFilter getColorFilter ()"}, "getRepeatCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the number of times the animation will repeat. By default, the repeat count in the encoded data is respected. If the value is @B_android#graphics#drawable#AnimatedImageDrawable#REPEAT_INFINITE_E@, the animation will repeat as long as it is displayed. If the value is 0, it will play once. Calling @B_android#graphics#drawable#AnimatedImageDrawable#setRepeatCount_E@ will make future calls to this method return the value passed to @B_android#graphics#drawable#AnimatedImageDrawable#setRepeatCount_E@.", "history": "Added in API level 28", "FullName": "public int getRepeatCount ()"}, "getOpacity()": {"Returns": [["int", "Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 28", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 28", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop the animation. If the animation is stopped, it will continue to display the frame it was displaying when stopped.", "history": "Added in API level 28", "FullName": "public void stop ()"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.AnimatedImageDrawable", "ClassDesc": "@B_android#graphics#drawable#Drawable_E@ for drawing animated images (like GIF). The framework handles decoding subsequent frames in another thread and updating when necessary. The drawable will only animate while it is being displayed. Created by @B_android#graphics#ImageDecoder#decodeDrawable_E@. A user needs to call @B_android#graphics#drawable#AnimatedImageDrawable#start_E@ to start the animation. It can also be defined in XML using the <animated-image> element."}