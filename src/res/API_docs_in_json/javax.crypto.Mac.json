{"Functions": {"update(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes input.remaining() bytes in the ByteBuffer input, starting at input.position(). Upon return, the buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 1", "FullName": "public final void update (ByteBuffer input)"}, "getMacLength()": {"Returns": [["int", "the MAC length in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the MAC in bytes.", "history": "Added in API level 1", "FullName": "public final int getMacLength ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this Mac object. A call to this method resets this Mac object to the state it was in when previously initialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to update and doFinal. (In order to reuse this Mac object with a different key, it must be reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec).", "history": "Added in API level 1", "FullName": "public final void reset ()"}, "init(java.security.Key,java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key."], ["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the algorithm parameters."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this MAC."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this MAC."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this Mac object with the given key and algorithm parameters.", "history": "Added in API level 1", "FullName": "public final void init (Key key, AlgorithmParameterSpec params)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#crypto#Mac_E@", "the new Mac object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested MAC algorithm. See the Mac section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MacSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Mac object that implements the specified MAC algorithm. A new Mac object encapsulating the MacSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final Mac getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this Mac object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this Mac object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#crypto#Mac_E@", "the new Mac object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested MAC algorithm. See the Mac section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MacSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Mac object that implements the specified MAC algorithm. A new Mac object encapsulating the MacSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final Mac getInstance (String algorithm, String provider)"}, "update(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input buffer."], ["int", "int: the offset in input where the input starts."], ["int", "int: the number of bytes to process."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes the first len bytes in input, starting at offset inclusive.", "history": "Added in API level 1", "FullName": "public final void update (byte[] input, int offset, int len)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this Mac object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this Mac object. This is the same name that was specified in one of the getInstance calls that created this Mac object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "init(java.security.Key)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for initializing this MAC."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this Mac object with the given key.", "history": "Added in API level 1", "FullName": "public final void init (Key key)"}, "doFinal(byte[],int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer where the MAC result is stored"], ["int", "int: the offset in output where the MAC is stored"]], "Throws": [["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the MAC operation. A call to this method resets this Mac object to the state it was in when previously initialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to update and doFinal. (In order to reuse this Mac object with a different key, it must be reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). The MAC result is stored in output, starting at outOffset inclusive.", "history": "Added in API level 1", "FullName": "public final void doFinal (byte[] output, int outOffset)"}, "update(byte)": {"Returns": [], "Parameters": [["byte", "byte: the input byte to be processed."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes the given byte.", "history": "Added in API level 1", "FullName": "public final void update (byte input)"}, "doFinal()": {"Returns": [["byte[]", "the MAC result."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the MAC operation. A call to this method resets this Mac object to the state it was in when previously initialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to update and doFinal. (In order to reuse this Mac object with a different key, it must be reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec).", "history": "Added in API level 1", "FullName": "public final byte[] doFinal ()"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#crypto#Mac_E@", "the new Mac object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested MAC algorithm. See the Mac section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a MacSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Mac object that implements the specified MAC algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Mac object encapsulating the MacSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final Mac getInstance (String algorithm)"}, "doFinal(byte[], int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer where the MAC result is stored"], ["int", "int: the offset in output where the MAC is stored"]], "Throws": [["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result"], ["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the MAC operation. A call to this method resets this Mac object to the state it was in when previously initialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to update and doFinal. (In order to reuse this Mac object with a different key, it must be reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). The MAC result is stored in output, starting at outOffset inclusive.", "history": "added in API level 1", "FullName": "public final void doFinal (byte[] output, int outOffset)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#crypto#Mac_E@", "the new Mac object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested MAC algorithm. See the Mac section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a MacSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Mac object that implements the specified MAC algorithm. A new Mac object encapsulating the MacSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final Mac getInstance (String algorithm, String provider)"}, "update(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input buffer."], ["int", "int: the offset in input where the input starts."], ["int", "int: the number of bytes to process."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes the first len bytes in input, starting at offset inclusive.", "history": "added in API level 1", "FullName": "public final void update (byte[] input, int offset, int len)"}, "Mac(javax.crypto.MacSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#crypto#MacSpi_E@", "MacSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the algorithm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a MAC object.", "history": "Added in API level 1", "FullName": "protected Mac (MacSpi macSpi, Provider provider, String algorithm)"}, "doFinal(byte[])": {"Returns": [["byte[]", "the MAC result."]], "Parameters": [["byte[]", "byte: data in bytes"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes the given array of bytes and finishes the MAC operation. A call to this method resets this Mac object to the state it was in when previously initialized via a call to init(Key) or init(Key, AlgorithmParameterSpec). That is, the object is reset and available to generate another MAC from the same key, if desired, via new calls to update and doFinal. (In order to reuse this Mac object with a different key, it must be reinitialized via a call to init(Key) or init(Key, AlgorithmParameterSpec).", "history": "Added in API level 1", "FullName": "public final byte[] doFinal (byte[] input)"}, "update(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes to be processed."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this Mac has not been initialized."]], "SeeAlso": [], "Permissions": [], "Description": "Processes the given array of bytes.", "history": "Added in API level 1", "FullName": "public final void update (byte[] input)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone if the provider implementation is cloneable."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "if this is called on a delegate that does not support Cloneable."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone if the provider implementation is cloneable.", "history": "Added in API level 1", "FullName": "public final Object clone ()"}}, "Inheritance": [], "ClassName": "javax.crypto.Mac", "ClassDesc": "This class provides the functionality of a \"Message Authentication Code\" (MAC) algorithm. A MAC provides a way to check the integrity of information transmitted over or stored in an unreliable medium, based on a secret key. Typically, message authentication codes are used between two parties that share a secret key in order to validate information transmitted between these parties. A MAC mechanism that is based on cryptographic hash functions is referred to as HMAC. HMAC can be used with any cryptographic hash function, e.g., MD5 or SHA-1, in combination with a secret shared key. HMAC is specified in RFC 2104. Android provides the following Mac algorithms:"}