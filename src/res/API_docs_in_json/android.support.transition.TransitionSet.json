{"Functions": {"removeTarget(android.view.View)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: The target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "added in version 24.2.0", "FullName": "TransitionSet removeTarget (View target)"}, "excludeTarget(android.view.View, boolean)": {"Returns": [["@B_android#support#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in version 24.2.0", "FullName": "Transition excludeTarget (View target, boolean exclude)"}, "addTarget(java.lang.String)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition to which the target transitionName is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the transitionName of a target view that this Transition is interested in animating. By default, there are no targetNames, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetNames constrains the Transition to only listen for, and act on, views with these transitionNames. Views with different transitionNames, or no transitionName whatsoever, will be ignored. Note that transitionNames should be unique within the view hierarchy.", "history": "added in version 26.0.0-alpha1", "FullName": "TransitionSet addTarget (String targetName)"}, "setStartDelay(long)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "This transition object."]], "Parameters": [["long", "long: The length of the delay, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the startDelay of this transition. By default, there is no delay (indicated by a negative number), which means that the Animator created by the transition will have its own specified startDelay. If the delay of a Transition is set, that delay will override the Animator delay.", "history": "added in version 24.2.0", "FullName": "TransitionSet setStartDelay (long startDelay)"}, "excludeTarget(java.lang.String, boolean)": {"Returns": [["@B_android#support#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in version 26.0.0-alpha1", "FullName": "Transition excludeTarget (String targetName, boolean exclude)"}, "setOrdering(int)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["int", "int: @B_android#support#transition#TransitionSet#ORDERING_TOGETHER_E@ to play this set's child transitions together, @B_android#support#transition#TransitionSet#ORDERING_SEQUENTIAL_E@ to play the child transitions in sequence."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the play order of this set's child transitions.", "history": "added in version 24.2.0", "FullName": "TransitionSet setOrdering (int ordering)"}, "setDuration(long)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["long", "long: The length of the animation, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Setting a non-negative duration on a TransitionSet causes all of the child transitions (current and future) to inherit this duration.", "history": "added in version 24.2.0", "FullName": "TransitionSet setDuration (long duration)"}, "removeTarget(int)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition from which the targetId is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetId(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetId from the list of ids that this Transition is interested in animating.", "history": "added in version 24.2.0", "FullName": "TransitionSet removeTarget (int targetId)"}, "addTarget(java.lang.Class)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition to which the target class was added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(ImageView.class);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to include when running this transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the Class of a target view that this Transition is interested in animating. By default, there are no targetTypes, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetTypes constrains the Transition to only listen for, and act on, views with these classes. Views with different classes will be ignored. Note that any View that can be cast to targetType will be included, so if targetType is View.class, all Views will be included.", "history": "added in version 26.0.0-alpha1", "FullName": "TransitionSet addTarget (Class targetType)"}, "addTarget(android.view.View)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition to which the target is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: A View on which the Transition will act, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the target view instances that this Transition is interested in animating. By default, there are no targets, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targets constrains the Transition to only listen for, and act on, these views. All other views will be ignored. The target list is like the @B_android#support#transition#Transition#addTarget_E@ list except this list specifies the actual View instances, not the ids of the views. This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance. If the transition should treat those views as the same, then @B_android#support#transition#Transition#addTarget_E@ should be used instead of @B_android#support#transition#Transition#addTarget_E@. If, on the other hand, scene changes involve changes all within the same view hierarchy, among views which do not necessarily have ids set on them, then the target list of views may be more convenient.", "history": "added in version 24.2.0", "FullName": "TransitionSet addTarget (View target)"}, "getTransitionAt(int)": {"Returns": [["@B_android#support#transition#Transition_E@", "no returns description in source"]], "Parameters": [["int", "int: The position of the Transition to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#support#transition#TransitionSet#addTransition_E@", "@B_android#support#transition#TransitionSet#getTransitionCount_E@"], "Permissions": [], "Description": "Returns the child Transition at the specified position in the TransitionSet.", "history": "added in version 26.0.0-alpha1", "FullName": "Transition getTransitionAt (int index)"}, "removeTarget(java.lang.Class)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someType);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type of the target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "added in version 26.0.0-alpha1", "FullName": "TransitionSet removeTarget (Class target)"}, "excludeTarget(java.lang.Class, boolean)": {"Returns": [["@B_android#support#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in version 24.2.0", "FullName": "Transition excludeTarget (Class type, boolean exclude)"}, "TransitionSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty transition set. Add child transitions to the set by calling @B_android#support#transition#TransitionSet#addTransition_E@ )}. By default, child transitions will play @B_android#support#transition#TransitionSet#ORDERING_TOGETHER_E@.", "history": "added in version 24.2.0", "FullName": "TransitionSet ()"}, "removeTarget(java.lang.String)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition from which the targetName is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetName(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetName from the list of transitionNames that this Transition is interested in animating.", "history": "added in version 26.0.0-alpha1", "FullName": "TransitionSet removeTarget (String target)"}, "excludeTarget(int, boolean)": {"Returns": [["@B_android#support#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in version 24.2.0", "FullName": "Transition excludeTarget (int targetId, boolean exclude)"}, "getTransitionCount()": {"Returns": [["int", "The number of child transitions in the TransitionSet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#transition#TransitionSet#addTransition_E@", "@B_android#support#transition#TransitionSet#getTransitionAt_E@"], "Permissions": [], "Description": "Returns the number of child transitions in the TransitionSet.", "history": "added in version 26.0.0-alpha1", "FullName": "int getTransitionCount ()"}, "getOrdering()": {"Returns": [["int", "@B_android#support#transition#TransitionSet#ORDERING_TOGETHER_E@ if child transitions will play at the same time, @B_android#support#transition#TransitionSet#ORDERING_SEQUENTIAL_E@ if they will play in sequence."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#transition#TransitionSet#setOrdering_E@"], "Permissions": [], "Description": "Returns the ordering of this TransitionSet. By default, the value is @B_android#support#transition#TransitionSet#ORDERING_TOGETHER_E@.", "history": "added in version 24.2.0", "FullName": "int getOrdering ()"}, "clone()": {"Returns": [["@B_android#support#transition#Transition_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "added in version 26.0.0-alpha1", "FullName": "Transition clone ()"}, "addTarget(int)": {"Returns": [["@B_android#support#transition#TransitionSet_E@", "The Transition to which the targetId is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the id of a target view that this Transition is interested in animating. By default, there are no targetIds, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetIds constrains the Transition to only listen for, and act on, views with these IDs. Views with different IDs, or no IDs whatsoever, will be ignored. Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.", "history": "added in version 24.2.0", "FullName": "TransitionSet addTarget (int targetId)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#transition#Transition_E@"], "ClassName": "android.support.transition.TransitionSet", "ClassDesc": "A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play @B_android#support#transition#TransitionSet#ORDERING_TOGETHER_E@ and others play @B_android#support#transition#TransitionSet#ORDERING_SEQUENTIAL_E@. For example, @B_android#support#transition#AutoTransition_E@ uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a @B_android#support#transition#ChangeBounds_E@, followed by a Fade(Fade.OUT) transition. A TransitionSet can be described in a resource file by using the tag transitionSet, along with the standard attributes of TransitionSet and @B_android#support#transition#Transition_E@. Child transitions of the TransitionSet object can be loaded by adding those child tags inside the enclosing transitionSet tag. For example, the following xml describes a TransitionSet that plays a Fade and then a ChangeBounds transition on the affected view targets:"}