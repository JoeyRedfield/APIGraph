{"Functions": {"addAddress(java.lang.String, int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": ["@B_android#net#VpnService#Builder#addAddress_E@"], "Permissions": [], "Description": "Convenience method to add a network address to the VPN interface using a numeric address string. See @B_java#net#InetAddress_E@ for the definitions of numeric address formats. Adding an address implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "added in API level 14", "FullName": "public VpnService.Builder addAddress (String address, int prefixLength)"}, "allowBypass()": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining of method calls. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows all apps to bypass this VPN connection. By default, all traffic from apps is forwarded through the VPN interface and it is not possible for apps to side-step the VPN. If this method is called, apps may use methods such as @B_android#net#ConnectivityManager#bindProcessToNetwork_E@ to instead send/receive directly over the underlying network or any other network they have permissions for.", "history": "Added in API level 21", "FullName": "public VpnService.Builder allowBypass ()"}, "setMetered(boolean)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining method calls This value will never be null."]], "Parameters": [["boolean", "boolean: true if VPN network should be treated as metered regardless of underlying network meteredness"]], "Throws": [], "SeeAlso": ["_E@", "@B_android#net#ConnectivityManager#isActiveNetworkMetered_E@"], "Permissions": [], "Description": "Marks the VPN network as metered. A VPN network is classified as metered when the user is sensitive to heavy data usage due to monetary costs and/or data limitations. In such cases, you should set this to true so that apps on the system can avoid doing large data transfers. Otherwise, set this to false. Doing so would cause VPN network to inherit its meteredness from its underlying networks. VPN apps targeting @B_android#os#Build#VERSION_CODES#Q_E@ or above will be considered metered by default.", "history": "Added in API level 29", "FullName": "public VpnService.Builder setMetered (boolean isMetered)"}, "setUnderlyingNetworks(android.net.Network[])": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining method calls. This value will never be null."]], "Parameters": [["@B_android#net#Network_E@", "Network: An array of networks the VPN uses to tunnel traffic to/from its servers. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#net#VpnService#setUnderlyingNetworks_E@"], "Permissions": [], "Description": "Sets the underlying networks used by the VPN for its upstream connections.", "history": "Added in API level 22", "FullName": "public VpnService.Builder setUnderlyingNetworks (Network[] networks)"}, "addAddress(java.net.InetAddress,int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Add a network address to the VPN interface. Both IPv4 and IPv6 addresses are supported. At least one address must be set before calling @B_android#net#VpnService#Builder#establish_E@. Adding an address implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addAddress (InetAddress address, int prefixLength)"}, "setBlocking(boolean)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining method calls. This value will never be null."]], "Parameters": [["boolean", "boolean: True to put the descriptor into blocking mode; false for non-blocking."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the VPN interface's file descriptor to be in blocking/non-blocking mode. By default, the file descriptor returned by @B_android#net#VpnService#Builder#establish_E@ is non-blocking.", "history": "Added in API level 21", "FullName": "public VpnService.Builder setBlocking (boolean blocking)"}, "VpnService.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public VpnService.Builder ()"}, "addRoute(java.net.InetAddress,int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the route is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Add a network route to the VPN interface. Both IPv4 and IPv6 routes are supported. Adding a route implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addRoute (InetAddress address, int prefixLength)"}, "addRoute(java.lang.String,int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the route is invalid."]], "SeeAlso": ["@B_android#net#VpnService#Builder#addRoute_E@"], "Permissions": [], "Description": "Convenience method to add a network route to the VPN interface using a numeric address string. See @B_java#net#InetAddress_E@ for the definitions of numeric address formats. Adding a route implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addRoute (String address, int prefixLength)"}, "allowFamily(int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining of method calls. This value will never be null."]], "Parameters": [["int", "int: The address family (AF_INET or AF_INET6) to allow."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows traffic from the specified address family. By default, if no address, route or DNS server of a specific family (IPv4 or IPv6) is added to this VPN, then all outgoing traffic of that family is blocked. If any address, route or DNS server is added, that family is allowed. This method allows an address family to be unblocked even without adding an address, route or DNS server of that family. Traffic of that family will then typically fall-through to the underlying network if it's supported. family must be either AF_INET (for IPv4) or AF_INET6 (for IPv6). @B_java#lang#IllegalArgumentException_E@ is thrown if it's neither.", "history": "Added in API level 21", "FullName": "public VpnService.Builder allowFamily (int family)"}, "addRoute(java.net.InetAddress, int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the route is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Add a network route to the VPN interface. Both IPv4 and IPv6 routes are supported. Adding a route implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "added in API level 14", "FullName": "public VpnService.Builder addRoute (InetAddress address, int prefixLength)"}, "establish()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "@B_android#os#ParcelFileDescriptor_E@ of the VPN interface, or null if the application is not prepared."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if a parameter is not accepted by the operating system."], ["@B_java#lang#IllegalStateException_E@", "if a parameter cannot be applied by the operating system."], ["@B_java#lang#SecurityException_E@", "if the service is not properly declared in AndroidManifest.xml."]], "SeeAlso": ["@B_android#net#VpnService_E@"], "Permissions": [], "Description": "Create a VPN interface using the parameters supplied to this builder. The interface works on IP packets, and a file descriptor is returned for the application to access them. Each read retrieves an outgoing packet which was routed to the interface. Each write injects an incoming packet just like it was received from the interface. The file descriptor is put into non-blocking mode by default to avoid blocking Java threads. To use the file descriptor completely in native space, see @B_android#os#ParcelFileDescriptor#detachFd_E@. The application MUST close the file descriptor when the VPN connection is terminated. The VPN interface will be removed and the network will be restored by the system automatically. To avoid conflicts, there can be only one active VPN interface at the same time. Usually network parameters are never changed during the lifetime of a VPN connection. It is also common for an application to create a new file descriptor after closing the previous one. However, it is rare but not impossible to have two interfaces while performing a seamless handover. In this case, the old interface will be deactivated when the new one is created successfully. Both file descriptors are valid but now outgoing packets will be routed to the new interface. Therefore, after draining the old file descriptor, the application MUST close it and start using the new file descriptor. If the new interface cannot be created, the existing interface and its file descriptor remain untouched. An exception will be thrown if the interface cannot be created for any reason. However, this method returns null if the application is not prepared or is revoked. This helps solve possible race conditions between other VPN applications.", "history": "Added in API level 14", "FullName": "public ParcelFileDescriptor establish ()"}, "addRoute(java.lang.String, int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the route is invalid."]], "SeeAlso": ["@B_android#net#VpnService#Builder#addRoute_E@"], "Permissions": [], "Description": "Convenience method to add a network route to the VPN interface using a numeric address string. See @B_java#net#InetAddress_E@ for the definitions of numeric address formats. Adding a route implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "added in API level 14", "FullName": "public VpnService.Builder addRoute (String address, int prefixLength)"}, "addDnsServer(java.net.InetAddress)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Add a DNS server to the VPN connection. Both IPv4 and IPv6 addresses are supported. If none is set, the DNS servers of the default network will be used. Adding a server implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addDnsServer (InetAddress address)"}, "setMtu(int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value is not positive."]], "SeeAlso": [], "Permissions": [], "Description": "Set the maximum transmission unit (MTU) of the VPN interface. If it is not set, the default value in the operating system will be used.", "history": "Added in API level 14", "FullName": "public VpnService.Builder setMtu (int mtu)"}, "addAllowedApplication(java.lang.String)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining method calls. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (e.g.: \"com.google.apps.contacts\") of an application. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "If the application isn't installed."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an application that's allowed to access the VPN connection. If this method is called at least once, only applications added through this method (and no others) are allowed access. Else (if this method is never called), all applications are allowed by default. If some applications are added, other, un-added applications will use networking as if the VPN wasn't running. A @B_android#net#VpnService#Builder_E@ may have only a set of allowed applications OR a set of disallowed ones, but not both. Calling this method after @B_android#net#VpnService#Builder#addDisallowedApplication_E@ has already been called, or vice versa, will throw an @B_java#lang#UnsupportedOperationException_E@. packageName must be the canonical name of a currently installed application. @B_android#content#pm#PackageManager#NameNotFoundException_E@ is thrown if there's no such application.", "history": "Added in API level 21", "FullName": "public VpnService.Builder addAllowedApplication (String packageName)"}, "setSession(java.lang.String)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the name of this session. It will be displayed in system-managed dialogs and notifications. This is recommended not required.", "history": "Added in API level 14", "FullName": "public VpnService.Builder setSession (String session)"}, "setHttpProxy(android.net.ProxyInfo)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_android#net#ProxyInfo_E@", "ProxyInfo: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets an HTTP proxy for the VPN network. This proxy is only a recommendation and it is possible that some apps will ignore it.", "history": "Added in API level 29", "FullName": "public VpnService.Builder setHttpProxy (ProxyInfo proxyInfo)"}, "addAddress(java.net.InetAddress, int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Add a network address to the VPN interface. Both IPv4 and IPv6 addresses are supported. At least one address must be set before calling @B_android#net#VpnService#Builder#establish_E@. Adding an address implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "added in API level 14", "FullName": "public VpnService.Builder addAddress (InetAddress address, int prefixLength)"}, "setConfigureIntent(android.app.PendingIntent)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_android#app#PendingIntent_E@", "PendingIntent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_android#app#PendingIntent_E@ to an activity for users to configure the VPN connection. If it is not set, the button to configure will not be shown in system-managed dialogs.", "history": "Added in API level 14", "FullName": "public VpnService.Builder setConfigureIntent (PendingIntent intent)"}, "addDnsServer(java.lang.String)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": ["@B_android#net#VpnService#Builder#addDnsServer_E@"], "Permissions": [], "Description": "Convenience method to add a DNS server to the VPN connection using a numeric address string. See @B_java#net#InetAddress_E@ for the definitions of numeric address formats. Adding a server implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addDnsServer (String address)"}, "addAddress(java.lang.String,int)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the address is invalid."]], "SeeAlso": ["@B_android#net#VpnService#Builder#addAddress_E@"], "Permissions": [], "Description": "Convenience method to add a network address to the VPN interface using a numeric address string. See @B_java#net#InetAddress_E@ for the definitions of numeric address formats. Adding an address implicitly allows traffic from that address family (i.e., IPv4 or IPv6) to be routed over the VPN. @see #allowFamily", "history": "Added in API level 14", "FullName": "public VpnService.Builder addAddress (String address, int prefixLength)"}, "addDisallowedApplication(java.lang.String)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "this @B_android#net#VpnService#Builder_E@ object to facilitate chaining method calls. This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name (e.g.: \"com.google.apps.contacts\") of an application. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "If the application isn't installed."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an application that's denied access to the VPN connection. By default, all applications are allowed access, except for those denied through this method. Denied applications will use networking as if the VPN wasn't running. A @B_android#net#VpnService#Builder_E@ may have only a set of allowed applications OR a set of disallowed ones, but not both. Calling this method after @B_android#net#VpnService#Builder#addAllowedApplication_E@ has already been called, or vice versa, will throw an @B_java#lang#UnsupportedOperationException_E@. packageName must be the canonical name of a currently installed application. @B_android#content#pm#PackageManager#NameNotFoundException_E@ is thrown if there's no such application.", "history": "Added in API level 21", "FullName": "public VpnService.Builder addDisallowedApplication (String packageName)"}, "addSearchDomain(java.lang.String)": {"Returns": [["@B_android#net#VpnService#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a search domain to the DNS resolver.", "history": "Added in API level 14", "FullName": "public VpnService.Builder addSearchDomain (String domain)"}}, "Inheritance": [], "ClassName": "android.net.VpnService.Builder", "ClassDesc": "Helper class to create a VPN interface. This class should be always used within the scope of the outer @B_android#net#VpnService_E@."}