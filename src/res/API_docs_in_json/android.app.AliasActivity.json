{"Functions": {"onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in @B_android#app#Activity#onSaveInstanceState_E@. Note: Otherwise it is null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the activity is starting. This is where most initialization should go: calling @B_android#app#Activity#setContentView_E@ to inflate the activity's UI, using @B_android#app#Activity#findViewById_E@ to programmatically interact with widgets in the UI, calling @B_android#app#Activity#managedQuery_E@ to retrieve cursors for data being displayed, etc. You can call @B_android#app#Activity#finish_E@ from within this function, in which case onDestroy() will be immediately called after @B_android#app#Activity#onCreate_E@ without any of the rest of the activity lifecycle (@B_android#app#Activity#onStart_E@, @B_android#app#Activity#onResume_E@, @B_android#app#Activity#onPause_E@, etc) executing. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown. This method must be called from the If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onCreate (Bundle savedInstanceState)"}, "AliasActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public AliasActivity ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@"], "ClassName": "android.app.AliasActivity", "ClassDesc": "Stub activity that launches another activity (and then finishes itself) based on information in its component's manifest meta-data. This is a simple way to implement an alias-like mechanism. To use this activity, you should include in the manifest for the associated component an entry named \"android.app.alias\". It is a reference to an XML resource describing an intent that launches the real application."}