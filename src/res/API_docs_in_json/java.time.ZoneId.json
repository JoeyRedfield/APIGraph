{"Functions": {"from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a ZoneId"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneId from a temporal object. This obtains a zone based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of ZoneId. A TemporalAccessor represents some form of date and time information. This factory converts the arbitrary temporal object to an instance of ZoneId. The conversion will try to obtain the zone in a way that favours region-based zones over offset-based zones using @B_java#time#temporal#TemporalQueries#zone_E@. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, ZoneId::from.", "history": "Added in API level 26", "FullName": "public static ZoneId from (TemporalAccessor temporal)"}, "of(java.lang.String)": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the time-zone ID, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the zone ID has an invalid format"], ["@B_java#time#zone#ZoneRulesException_E@", "if the zone ID is a region ID that cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneId from an ID ensuring that the ID is valid and available for use. This method parses the ID producing a ZoneId or ZoneOffset. A ZoneOffset is returned if the ID is 'Z', or starts with '+' or '-'. The result will always be a valid ID for which @B_java#time#zone#ZoneRules_E@ can be obtained. Parsing matches the zone ID step by step as follows. If the zone ID equals 'Z', the result is ZoneOffset.UTC. If the zone ID consists of a single letter, the zone ID is invalid and DateTimeException is thrown. If the zone ID starts with '+' or '-', the ID is parsed as a ZoneOffset using @B_java#time#ZoneOffset#of_E@. If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a ZoneId with the same ID and rules equivalent to ZoneOffset.UTC. If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-' then the ID is a prefixed offset-based ID. The ID is split in two, with a two or three letter prefix and a suffix starting with the sign. The suffix is parsed as a @B_java#time#ZoneOffset#of_E@. The result will be a ZoneId with the specified UTC/GMT/UT prefix and the normalized offset ID as per @B_java#time#ZoneOffset#getId_E@. The rules of the returned ZoneId will be equivalent to the parsed ZoneOffset. All other IDs are parsed as region-based zone IDs. Region IDs must match the regular expression [A-Za-z][A-Za-z0-9~/._+-]+ otherwise a DateTimeException is thrown. If the zone ID is not in the configured set of IDs, ZoneRulesException is thrown. The detailed format of the region ID depends on the group supplying the data. The default set of data is supplied by the IANA Time Zone Database (TZDB). This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'. This is compatible with most IDs from @B_java#util#TimeZone_E@.", "history": "Added in API level 26", "FullName": "public static ZoneId of (String zoneId)"}, "getDisplayName(java.time.format.TextStyle,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the text value of the zone, not null"]], "Parameters": [["@B_java#time#format#TextStyle_E@", "TextStyle: the length of the text required, not null"], ["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the textual representation of the zone, such as 'British Time' or '+02:00'. This returns the textual name used to identify the time-zone ID, suitable for presentation to the user. The parameters control the style of the returned text and the locale. If no textual mapping is found then the @B_java#time#ZoneId#getId_E@ is returned.", "history": "Added in API level 26", "FullName": "public String getDisplayName (TextStyle style, Locale locale)"}, "getAvailableZoneIds()": {"Returns": [["@B_java#util#Set_E@", "a modifiable copy of the set of zone IDs, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of available zone IDs. This set includes the string form of all available region-based IDs. Offset-based zone IDs are not included in the returned set. The ID can be passed to @B_java#time#ZoneId#of_E@ to create a ZoneId. The set of zone IDs can increase over time, although in a typical application the set of IDs is fixed. Each call to this method is thread-safe.", "history": "Added in API level 26", "FullName": "public static Set<String> getAvailableZoneIds ()"}, "of(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the time-zone ID, not null"], ["@B_java#util#Map_E@", "Map: a map of alias zone IDs (typically abbreviations) to real zone IDs, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the zone ID has an invalid format"], ["@B_java#time#zone#ZoneRulesException_E@", "if the zone ID is a region ID that cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneId using its ID using a map of aliases to supplement the standard zone IDs. Many users of time-zones use short abbreviations, such as PST for 'Pacific Standard Time' and PDT for 'Pacific Daylight Time'. These abbreviations are not unique, and so cannot be used as IDs. This method allows a map of string to time-zone to be setup and reused within an application.", "history": "Added in API level 26", "FullName": "public static ZoneId of (String zoneId, Map<String, String> aliasMap)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this time-zone ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this zone as a String, using the ID.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "normalized()": {"Returns": [["@B_java#time#ZoneId_E@", "the time-zone unique ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Normalizes the time-zone ID, returning a ZoneOffset where possible. The returns a normalized ZoneId that can be used in place of this ID. The result will have ZoneRules equivalent to those returned by this object, however the ID returned by getId() may be different. The normalization checks if the rules of this ZoneId have a fixed offset. If they do, then the ZoneOffset equal to that offset is returned. Otherwise this is returned.", "history": "Added in API level 26", "FullName": "public ZoneId normalized ()"}, "ofOffset(java.lang.String,java.time.ZoneOffset)": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the time-zone ID, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset, not null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix is not one of \"GMT\", \"UTC\", or \"UT\", or \"\""]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneId wrapping an offset. If the prefix is \"GMT\", \"UTC\", or \"UT\" a ZoneId with the prefix and the non-zero offset is returned. If the prefix is empty \"\" the ZoneOffset is returned.", "history": "Added in API level 26", "FullName": "public static ZoneId ofOffset (String prefix, ZoneOffset offset)"}, "getRules()": {"Returns": [["@B_java#time#zone#ZoneRules_E@", "the rules, not null"]], "Parameters": [], "Throws": [["@B_java#time#zone#ZoneRulesException_E@", "if no rules are available for this ID"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the time-zone rules for this ID allowing calculations to be performed. The rules provide the functionality associated with a time-zone, such as finding the offset for a given instant or local date-time. A time-zone can be invalid if it is deserialized in a Java Runtime which does not have the same rules loaded as the Java Runtime that stored it. In this case, calling this method will throw a ZoneRulesException. @B_java#time#ZoneOffset_E@ will always return a set of rules where the offset never changes.", "history": "Added in API level 26", "FullName": "public abstract ZoneRules getRules ()"}, "ofOffset(java.lang.String, java.time.ZoneOffset)": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [["@B_java#lang#String_E@", "String: the time-zone ID, not null"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset, not null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix is not one of \"GMT\", \"UTC\", or \"UT\", or \"\""]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of ZoneId wrapping an offset. If the prefix is \"GMT\", \"UTC\", or \"UT\" a ZoneId with the prefix and the non-zero offset is returned. If the prefix is empty \"\" the ZoneOffset is returned.", "history": "added in API level 26", "FullName": "public static ZoneId ofOffset (String prefix, ZoneOffset offset)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other time-zone ID"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this time-zone ID is equal to another time-zone ID. The comparison is based on the ID.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "getId()": {"Returns": [["@B_java#lang#String_E@", "the time-zone unique ID, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the unique time-zone ID. This ID uniquely defines this object. The format of an offset based ID is defined by @B_java#time#ZoneOffset#getId_E@.", "history": "Added in API level 26", "FullName": "public abstract String getId ()"}, "systemDefault()": {"Returns": [["@B_java#time#ZoneId_E@", "the zone ID, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if the converted zone ID has an invalid format"], ["@B_java#time#zone#ZoneRulesException_E@", "if the converted zone region ID cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the system default time-zone. This queries @B_java#util#TimeZone#getDefault_E@ to find the default time-zone and converts it to a ZoneId. If the system default time-zone is changed, then the result of this method will also change.", "history": "Added in API level 26", "FullName": "public static ZoneId systemDefault ()"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this time-zone ID.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.ZoneId", "ClassDesc": "A time-zone ID, such as Europe/Paris. A ZoneId is used to identify the rules used to convert between an @B_java#time#Instant_E@ and a @B_java#time#LocalDateTime_E@. There are two distinct types of ID: Fixed offsets - a fully resolved offset from UTC/Greenwich, that uses the same offset for all local date-times Geographical regions - an area where a specific set of rules for finding the offset from UTC/Greenwich apply Most fixed offsets are represented by @B_java#time#ZoneOffset_E@. Calling @B_java#time#ZoneId#normalized_E@ on any ZoneId will ensure that a fixed offset ID will be represented as a ZoneOffset. The actual rules, describing when and how the offset changes, are defined by @B_java#time#zone#ZoneRules_E@. This class is simply an ID used to obtain the underlying rules. This approach is taken because rules are defined by governments and change frequently, whereas the ID is stable. The distinction has other effects. Serializing the ZoneId will only send the ID, whereas serializing the rules sends the entire data set. Similarly, a comparison of two IDs only examines the ID, whereas a comparison of two rules examines the entire data set. The simplest type of ID is that from ZoneOffset. This consists of 'Z' and IDs starting with '+' or '-'. The next type of ID are offset-style IDs with some form of prefix, such as 'GMT+2' or 'UTC+01:00'. The recognised prefixes are 'UTC', 'GMT' and 'UT'. The offset is the suffix and will be normalized during creation. These IDs can be normalized to a ZoneOffset using normalized(). The third type of ID are region-based IDs. A region-based ID must be of two or more characters, and not start with 'UTC', 'GMT', 'UT' '+' or '-'. Region-based IDs are defined by configuration. The configuration focuses on providing the lookup from the ID to the underlying ZoneRules. Time-zone rules are defined by governments and change frequently. There are a number of organizations, known here as groups, that monitor time-zone changes and collate them. The default group is the IANA Time Zone Database (TZDB). Other organizations include IATA (the airline industry body) and Microsoft. Each group defines its own format for the region ID it provides. The TZDB group defines IDs such as 'Europe/London' or 'America/New_York'. TZDB IDs take precedence over other groups. It is strongly recommended that the group name is included in all IDs supplied by groups other than TZDB to avoid conflicts. For example, IATA airline time-zone region IDs are typically the same as the three letter airport code. However, the airport of Utrecht has the code 'UTC', which is obviously a conflict. The recommended format for region IDs from groups other than TZDB is 'group~region'. Thus if IATA data were defined, Utrecht airport would be 'IATA~UTC'. ZoneOffset subclass uses a dedicated format that only stores the offset from UTC/Greenwich. A ZoneId can be deserialized in a Java Runtime where the ID is unknown. For example, if a server-side Java Runtime has been updated with a new zone ID, but the client-side Java Runtime has not been updated. In this case, the ZoneId object will exist, and can be queried using getId, equals, hashCode, toString, getDisplayName and normalized. However, any call to getRules will fail with ZoneRulesException. This approach is designed to allow a @B_java#time#ZonedDateTime_E@ to be loaded and queried, but not modified, on a Java Runtime with incomplete time-zone information."}