{"Functions": {"onUserInteraction()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called whenever a key, touch, or trackball event is dispatched to the activity. Implement this method if you wish to know that the user has interacted with the device in some way while your activity is running. This callback and @B_android#app#Activity#onUserLeaveHint_E@ are intended to help activities manage status bar notifications intelligently; specifically, for helping activities determine the proper time to cancel a notfication. All calls to your activity's @B_android#app#Activity#onUserLeaveHint_E@ callback will be accompanied by calls to @B_android#app#Activity#onUserInteraction_E@. This ensures that your activity will be told of relevant user activity such as pulling down the notification pane and touching an item there. Note that this callback will be invoked for the touch down action that begins a touch gesture, but may not be invoked for the touch-moved and touch-up actions that follow.", "history": "", "FullName": "public void onUserInteraction ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after @B_android#app#Activity#onCreate_E@ \u2014 or after @B_android#app#Activity#onRestart_E@ when the activity had been stopped, but is now again being displayed to the user. It will be followed by @B_android#app#Activity#onResume_E@. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.", "history": "", "FullName": "public void onStart ()"}, "BasicDream()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public BasicDream ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when you are no longer visible to the user. You will next receive either @B_android#app#Activity#onRestart_E@, @B_android#app#Activity#onDestroy_E@, or nothing, depending on later user activity. Note that this method may never be called, in low memory situations where the system does not have enough memory to keep your activity's process running after its @B_android#app#Activity#onPause_E@ method is called. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.", "history": "", "FullName": "public void onStop ()"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void onDraw (Canvas c)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "The desired content to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy. When calling this method, the layout parameters of the specified view are ignored. Both the width and the height of the view are set by default to @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. To use your own layout parameters, invoke @B_android#app#Activity#setContentView_E@ instead.", "history": "", "FullName": "public void setContentView (View v)"}, "invalidate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void invalidate ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called as part of the activity lifecycle when an activity is going into the background, but has not (yet) been killed. The counterpart to @B_android#app#Activity#onResume_E@. When activity B is launched in front of activity A, this callback will be invoked on A. B will not be created until A's @B_android#app#Activity#onPause_E@ returns, so be sure to not do anything lengthy here. This callback is mostly used for saving any persistent state the activity is editing, to present a \"edit in place\" model to the user and making sure nothing is lost if there are not enough resources to start the new activity without first killing this one. This is also a good place to do things like stop animations and other things that consume a noticeable amount of CPU in order to make the switch to the next activity as fast as possible, or to close resources that are exclusive access such as the camera. In situations where the system needs more memory it may kill paused processes to reclaim resources. Because of this, you should be sure that all of your state is saved by the time you return from this function. In general @B_android#app#Activity#onSaveInstanceState_E@ is used to save per-instance state in the activity and this method is used to store global persistent data (in content providers, files, etc.) After receiving this call you will usually receive a following call to @B_android#app#Activity#onStop_E@ (after the next activity has been resumed and displayed), however in some cases there will be a direct call back to @B_android#app#Activity#onResume_E@ without going through the stopped state. Derived classes must call through to the super class's implementation of this method. If they do not, an exception will be thrown.", "history": "", "FullName": "public void onPause ()"}, "getContentView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected View getContentView ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@"], "ClassName": "android.support.v13.dreams.BasicDream", "ClassDesc": "Base class for implementing Dreams."}