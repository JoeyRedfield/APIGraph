{"Functions": {"setCardType(int)": {"Returns": [], "Parameters": [["int", "int: The desired card type."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the type of this Card.", "history": "added in version 22.0.0", "FullName": "void setCardType (int type)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "", "FullName": "boolean shouldDelayChildPressedState ()"}, "setSelectedAnimationDelayed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True (default) if the selected animation should be delayed after the card is selected, or false if the animation should run immediately the next time the card is Selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a flag indicating if the Selected animation (if the selected card type implements one) should run immediately after the card is selected, or if it should be delayed. The default behavior is to delay this animation. This is a one-shot override. If set to false, after the card is selected and the selected animation is triggered, this flag is automatically reset to true. This is useful when you want to change the default behavior, and have the selected animation run immediately. One such case could be when focus moves from one row to the other, when instead of delaying the selected animation until the user pauses on a card, it may be desirable to trigger the animation for that card immediately.", "history": "added in version 22.0.0", "FullName": "void setSelectedAnimationDelayed (boolean delay)"}, "getInfoVisibility()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the visibility of the info region of the card.", "history": "added in version 22.0.0", "FullName": "int getInfoVisibility ()"}, "isSelectedAnimationDelayed()": {"Returns": [["boolean", "true if this card is set to delay the selected animation the next time it is selected, or false if the selected animation will run immediately the next time the card is selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a boolean indicating if the selected animation will run immediately or be delayed the next time the card is Selected.", "history": "added in version 22.0.0", "FullName": "boolean isSelectedAnimationDelayed ()"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#v17#leanback#widget#BaseCardView#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "BaseCardView.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "setActivated(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the card is ACTIVE, or false if INACTIVE."]], "Throws": [], "SeeAlso": ["@B_android#view#View#isActivated_E@"], "Permissions": [], "Description": "Sets the Activated state of this Card. This can trigger changes in the card layout, resulting in views to become visible or hidden. A card is normally set to Activated state when its parent container (like a Row) receives focus, and then activates all of its children.", "history": "", "FullName": "void setActivated (boolean activated)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v17#leanback#widget#BaseCardView#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, and a height of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@.", "history": "", "FullName": "BaseCardView.LayoutParams generateDefaultLayoutParams ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "BaseCardView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "BaseCardView (Context context)"}, "getExtraVisibility()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extra view's visibility is controlled by @B_android#support#v17#leanback#widget#BaseCardView#getInfoVisibility_E@ Returns the visibility of the extra region of the card.", "history": "added in version 22.0.0", "FullName": "int getExtraVisibility ()"}, "setExtraVisibility(int)": {"Returns": [], "Parameters": [["int", "int: The region visibility to use for the extra region. Must be one of @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_ALWAYS_E@, @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_SELECTED_E@, or @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_ACTIVATED_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Extra view's visibility is controlled by @B_android#support#v17#leanback#widget#BaseCardView#setInfoVisibility_E@ Sets the visibility of the extra region of the card.", "history": "added in version 22.0.0", "FullName": "void setExtraVisibility (int visibility)"}, "onCreateDrawableState(int)": {"Returns": [["int[]", "Returns an array holding the current @B_android#graphics#drawable#Drawable_E@ state of the view."]], "Parameters": [["int", "int: if non-zero, this is the number of extra entries you would like in the returned array in which you can place your own states."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate the new @B_android#graphics#drawable#Drawable_E@ state for this view. This is called by the view system when the cached Drawable state is determined to be invalid. To retrieve the current state, you should use @B_android#view#View#getDrawableState_E@.", "history": "", "FullName": "int[] onCreateDrawableState (int extraSpace)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "setInfoVisibility(int)": {"Returns": [], "Parameters": [["int", "int: The region visibility to use for the info region. Must be one of @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_ALWAYS_E@, @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_SELECTED_E@, or @B_android#support#v17#leanback#widget#BaseCardView#CARD_REGION_VISIBLE_ACTIVATED_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visibility of the info region of the card.", "history": "added in version 22.0.0", "FullName": "void setInfoVisibility (int visibility)"}, "getCardType()": {"Returns": [["int", "The type of this card."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this Card.", "history": "added in version 22.0.0", "FullName": "int getCardType ()"}, "setSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the card is Selected, or false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#view#View#isSelected_E@"], "Permissions": [], "Description": "Sets the Selected state of this Card. This can trigger changes in the card layout, resulting in views to become visible or hidden. A card is normally set to Selected state when it receives input focus.", "history": "", "FullName": "void setSelected (boolean selected)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.v17.leanback.widget.BaseCardView", "ClassDesc": "A card style layout that responds to certain state changes. It arranges its children in a vertical column, with different regions becoming visible at different times. A BaseCardView will draw its children based on its type, the region visibilities of the child types, and the state of the widget. A child may be marked as belonging to one of three regions: main, info, or extra. The main region is always visible, while the info and extra regions can be set to display based on the activated or selected state of the View. The card states are set by calling @B_android#support#v17#leanback#widget#BaseCardView#setActivated_E@ and @B_android#support#v17#leanback#widget#BaseCardView#setSelected_E@. See @B_android#support#v17#leanback#widget#BaseCardView#LayoutParams_E@ for layout attributes."}