{"Functions": {"setLogWriter(java.io.PrintWriter)": {"Returns": [], "Parameters": [["@B_java#io#PrintWriter_E@", "PrintWriter: the new logging/tracing PrintStream object; null to disable logging and tracing"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method denies setting the log writer"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#sql#DriverManager#getLogWriter_E@"], "Permissions": [], "Description": "Sets the logging/tracing PrintWriter object that is used by the DriverManager and all drivers. There is a minor versioning problem created by the introduction of the method setLogWriter. The method setLogWriter cannot create a PrintStream object that will be returned by getLogStream---the Java platform does not provide a backward conversion. As a result, a new application that uses setLogWriter and also uses a JDBC 1.0 driver that uses getLogStream will likely not see debugging information written by that driver. Starting with the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException.", "history": "Added in API level 1", "FullName": "public static void setLogWriter (PrintWriter out)"}, "getDrivers()": {"Returns": [["@B_java#util#Enumeration_E@", "the list of JDBC Drivers loaded by the caller's class loader"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an Enumeration with all of the currently loaded JDBC drivers to which the current caller has access. d.getClass().getName()", "history": "Added in API level 1", "FullName": "public static Enumeration<Driver> getDrivers ()"}, "getConnection(java.lang.String)": {"Returns": [["@B_java#sql#Connection_E@", "a connection to the URL"]], "Parameters": [["@B_java#lang#String_E@", "String: a database url of the form jdbc:subprotocol:subname"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers.", "history": "Added in API level 1", "FullName": "public static Connection getConnection (String url)"}, "setLoginTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the login time limit in seconds; zero means there is no limit"]], "Throws": [], "SeeAlso": ["@B_java#sql#DriverManager#getLoginTimeout_E@"], "Permissions": [], "Description": "Sets the maximum time in seconds that a driver will wait while attempting to connect to a database.", "history": "Added in API level 1", "FullName": "public static void setLoginTimeout (int seconds)"}, "getConnection(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#sql#Connection_E@", "a connection to the URL"]], "Parameters": [["@B_java#lang#String_E@", "String: a database url of the form jdbc:subprotocol:subname"], ["@B_java#lang#String_E@", "String: the database user on whose behalf the connection is being made"], ["@B_java#lang#String_E@", "String: the user's password"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers.", "history": "Added in API level 1", "FullName": "public static Connection getConnection (String url, String user, String password)"}, "getConnection(java.lang.String,java.util.Properties)": {"Returns": [["@B_java#sql#Connection_E@", "a Connection to the URL"]], "Parameters": [["@B_java#lang#String_E@", "String: a database url of the form jdbc:subprotocol:subname"], ["@B_java#util#Properties_E@", "Properties: a list of arbitrary string tag/value pairs as connection arguments; normally at least a \"user\" and \"password\" property should be included"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to establish a connection to the given database URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers.", "history": "Added in API level 1", "FullName": "public static Connection getConnection (String url, Properties info)"}, "setLogStream(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: the new logging/tracing PrintStream; to disable, set to null"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method denies setting the log stream"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#sql#DriverManager#getLogStream_E@"], "Permissions": [], "Description": "Use setLogWriter instead. Sets the logging/tracing PrintStream that is used by the DriverManager and all drivers. In the Java 2 SDK, Standard Edition, version 1.3 release, this method checks to see that there is an SQLPermission object before setting the logging stream. If a SecurityManager exists and its checkPermission method denies setting the log writer, this method throws a java.lang.SecurityException.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void setLogStream (PrintStream out)"}, "getLoginTimeout()": {"Returns": [["int", "the driver login time limit in seconds"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#sql#DriverManager#setLoginTimeout_E@"], "Permissions": [], "Description": "Gets the maximum time in seconds that a driver can wait when attempting to log in to a database.", "history": "Added in API level 1", "FullName": "public static int getLoginTimeout ()"}, "getLogWriter()": {"Returns": [["@B_java#io#PrintWriter_E@", "a java.io.PrintWriter object"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#sql#DriverManager#setLogWriter_E@"], "Permissions": [], "Description": "Retrieves the log writer. The getLogWriter and setLogWriter methods should be used instead of the get/setlogStream methods, which are deprecated.", "history": "Added in API level 1", "FullName": "public static PrintWriter getLogWriter ()"}, "registerDriver(java.sql.Driver)": {"Returns": [], "Parameters": [["@B_java#sql#Driver_E@", "Driver: the new JDBC Driver that is to be registered with the DriverManager"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Registers the given driver with the DriverManager. A newly-loaded driver class should call the method registerDriver to make itself known to the DriverManager.", "history": "Added in API level 1", "FullName": "public static void registerDriver (Driver driver)"}, "getDriver(java.lang.String)": {"Returns": [["@B_java#sql#Driver_E@", "a Driver object representing a driver that can connect to the given URL"]], "Parameters": [["@B_java#lang#String_E@", "String: a database URL of the form jdbc:subprotocol:subname"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to locate a driver that understands the given URL. The DriverManager attempts to select an appropriate driver from the set of registered JDBC drivers.", "history": "Added in API level 1", "FullName": "public static Driver getDriver (String url)"}, "deregisterDriver(java.sql.Driver)": {"Returns": [], "Parameters": [["@B_java#sql#Driver_E@", "Driver: the JDBC Driver to drop"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Drops a driver from the DriverManager's list. Applets can only deregister drivers from their own classloaders.", "history": "Added in API level 1", "FullName": "public static void deregisterDriver (Driver driver)"}, "println(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a log or tracing message"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a message to the current JDBC log stream.", "history": "Added in API level 1", "FullName": "public static void println (String message)"}, "getLogStream()": {"Returns": [["@B_java#io#PrintStream_E@", "the logging/tracing PrintStream; if disabled, is null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#sql#DriverManager#setLogStream_E@"], "Permissions": [], "Description": "Use getLogWriter instead. Retrieves the logging/tracing PrintStream that is used by the DriverManager and all drivers.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static PrintStream getLogStream ()"}}, "Inheritance": [], "ClassName": "java.sql.DriverManager", "ClassDesc": "The basic service for managing a set of JDBC drivers. DataSource interface, new in the JDBC 2.0 API, provides another way to connect to a data source. The use of a DataSource object is the preferred means of connecting to a data source. As part of its initialization, the DriverManager class will attempt to load the driver classes referenced in the \"jdbc.drivers\" system property. This allows a user to customize the JDBC Drivers used by their applications. For example in your ~/.hotjava/properties file you might specify: The DriverManager methods getConnection and getDrivers have been enhanced to support the Java Standard Edition META-INF/services/java.sql.Driver. This file contains the name of the JDBC drivers implementation of java.sql.Driver. For example, to load the my.sql.Driver class, the META-INF/services/java.sql.Driver file would contain the entry: Applications no longer need to explictly load JDBC drivers using Class.forName(). Existing programs which currently load JDBC drivers using Class.forName() will continue to work without modification. When the method getConnection is called, the DriverManager will attempt to locate a suitable driver from amongst those loaded at initialization and those loaded explicitly using the same classloader as the current applet or application. Starting with the Java 2 SDK, Standard Edition, version 1.3, a logging stream can be set only if the proper permission has been granted. Normally this will be done with the tool PolicyTool, which can be used to grant permission java.sql.SQLPermission \"setLog\"."}