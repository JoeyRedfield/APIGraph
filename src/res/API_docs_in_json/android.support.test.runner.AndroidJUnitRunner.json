{"Functions": {"onException(java.lang.Object, java.lang.Throwable)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["Object", "Object no parameter comment"], ["Throwable", "Throwable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onException (Object obj, Throwable e)"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This implementation of onStart() will guarantee that the Application's onCreate method has completed when it returns. Subclasses should call super.onStart() before executing any code that touches the application and it's state.", "history": "", "FullName": "void onStart ()"}, "finish(int, android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["Bundle", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures all activities launched in this instrumentation are finished before the instrumentation exits. Subclasses who override this method should do their finish processing and then call super.finish to invoke this logic. Not waiting for all activities to finish() before exiting can cause device wide instability.", "history": "", "FullName": "void finish (int resultCode, Bundle results)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["Bundle", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up lifecycle monitoring, and argument registry. Subclasses must call up to onCreate(). This onCreate method does not call start() it is the subclasses responsibility to call start if it desires.", "history": "", "FullName": "void onCreate (Bundle arguments)"}, "AndroidJUnitRunner()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "AndroidJUnitRunner ()"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@", "https:##developer#android#com@B_android#app#Instrumentation_E@", "android.support.test.internal.runner.hidden.ExposedInstrumentationApi", "@B_android#support#test#runner#MonitoringInstrumentation_E@"], "ClassName": "android.support.test.runner.AndroidJUnitRunner", "ClassDesc": "An https:##developer#android#com@B_android#app#Instrumentation_E@ that runs JUnit3 and JUnit4 tests against an Android package (application). Based on and replacement for https:##developer#android#com@B_android#test#InstrumentationTestRunner_E@. Supports a superset of https:##developer#android#com@B_android#test#InstrumentationTestRunner_E@ features, while maintaining command/output format compatibility with that class. Write JUnit3 style https:##developer#android#com@B_junit#framework#TestCase_E@s and/or JUnit4 style @B_android#support#test#InstrumentationRegistry_E@ if needed. In an appropriate AndroidManifest.xml, define an instrumentation with android:name set to @B_android#support#test#runner#AndroidJUnitRunner_E@ and the appropriate android:targetPackage set. If used with other options, the resulting test run will contain the intersection of the two options. e.g. \"-e size large -e annotation com.android.foo.MyAnnotation\" will run only tests with both the @B_android#support#test#filters#LargeTest_E@ and \"com.android.foo.MyAnnotation\" annotations. As above, if used with other options, the resulting test run will contain the intersection of the two options. e.g. \"-e size large -e notAnnotation com.android.foo.MyAnnotation\" will run tests with the @B_android#support#test#filters#LargeTest_E@ annotation that do NOT have the \"com.android.foo.MyAnnotation\" annotations. A @B_org#junit#runner#manipulation#Filter_E@ class provided to the filter option must be public and must provide a public constructor of one of the following patterns. They are searched in order and the first one found is the one that is used. A @B_org#junit#runners#model#RunnerBuilder_E@ class provided to the runnerBuilder option must be public and must provide a public no-argument constructor."}