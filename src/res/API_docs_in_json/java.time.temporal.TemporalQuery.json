{"Functions": {"queryFrom(java.time.temporal.TemporalAccessor)": {"Returns": [["R", "the queried value, may return null to indicate not found"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to query, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Queries the specified temporal object. This queries the specified temporal object to return an object using the logic encapsulated in the implementing class. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#TemporalAccessor#query_E@: query(TemporalQuery), as it is a lot clearer to read in code.", "history": "Added in API level 26", "FullName": "public abstract R queryFrom (TemporalAccessor temporal)"}}, "Inheritance": [], "ClassName": "java.time.temporal.TemporalQuery<R>", "ClassDesc": "Strategy for querying a temporal object. Queries are a key tool for extracting information from temporal objects. They exist to externalize the process of querying, permitting different approaches, as per the strategy design pattern. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. The @B_java#time#temporal#TemporalField_E@ interface provides another mechanism for querying temporal objects. That interface is limited to returning a long. By contrast, queries can return any type. There are two equivalent ways of using a TemporalQuery. The first is to invoke the method on this interface directly. The second is to use @B_java#time#temporal#TemporalAccessor#query_E@: query(TemporalQuery), as it is a lot clearer to read in code. The most common implementations are method references, such as LocalDate::from and ZoneId::from. Additional common queries are provided as static methods in @B_java#time#temporal#TemporalQueries_E@."}