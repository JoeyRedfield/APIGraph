{"Functions": {"comparingDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares by an extracted key"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: the function used to extract the double sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": ["@B_java#util#Comparator#comparing_E@"], "Permissions": [], "Description": "Accepts a function that extracts a double sort key from a type T, and returns a Comparator<T> that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> comparingDouble (ToDoubleFunction<? super T> keyExtractor)"}, "nullsFirst(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that considers null to be less than non-null, and compares non-null objects with the supplied Comparator."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing non-null values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a null-friendly comparator that considers null to be less than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.", "history": "added in API level 24", "FullName": "public static Comparator<T> nullsFirst (Comparator<? super T> comparator)"}, "comparing(java.util.function.Function<?superT,?extendsU>,java.util.Comparator<?superU>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares by an extracted key using the specified Comparator"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function used to extract the sort key"], ["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare the sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a function that extracts a sort key from a type T, and returns a Comparator<T> that compares by that sort key using the specified @B_java#util#Comparator_E@. The returned comparator is serializable if the specified function and comparator are both serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> comparing (Function<? super T, ? extends U> keyExtractor, Comparator<? super U> keyComparator)"}, "thenComparingInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the int sort key"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: the function used to extract the integer sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": ["@B_java#util#Comparator#comparingInt_E@", "@B_java#util#Comparator#thenComparing_E@"], "Permissions": [], "Description": "Returns a lexicographic-order comparator with a function that extracts a int sort key.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparingInt (ToIntFunction<? super T> keyExtractor)"}, "thenComparingLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the long sort key"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: the function used to extract the long sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": ["@B_java#util#Comparator#comparingLong_E@", "@B_java#util#Comparator#thenComparing_E@"], "Permissions": [], "Description": "Returns a lexicographic-order comparator with a function that extracts a long sort key.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparingLong (ToLongFunction<? super T> keyExtractor)"}, "reverseOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that imposes the reverse of the natural ordering on Comparable objects."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns a comparator that imposes the reverse of the natural ordering. The returned comparator is serializable and throws @B_java#lang#NullPointerException_E@ when comparing null.", "history": "Added in API level 24", "FullName": "public static Comparator<T> reverseOrder ()"}, "nullsLast(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that considers null to be greater than non-null, and compares non-null objects with the supplied Comparator."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing non-null values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a null-friendly comparator that considers null to be greater than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> nullsLast (Comparator<? super T> comparator)"}, "comparing(java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares by an extracted key"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function used to extract the @B_java#lang#Comparable_E@ sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Accepts a function that extracts a @B_java#lang#Comparable_E@ sort key from a type T, and returns a Comparator<T> that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> comparing (Function<? super T, ? extends U> keyExtractor)"}, "thenComparing(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the other comparator"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the other comparator to be used when this comparator compares two objects that are equal."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a lexicographic-order comparator with another comparator. If this Comparator considers two elements equal, i.e. compare(a, b) == 0, other is used to determine the order. The returned comparator is serializable if the specified comparator is also serializable.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparing (Comparator<? super T> other)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true only if the specified object is also a comparator and it imposes the same ordering as this comparator."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#lang#Object#hashCode_E@"], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this comparator. This method must obey the general contract of @B_java#lang#Object#equals_E@. Additionally, this method can return comp1.equals(comp2) implies that Note that it is", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object obj)"}, "thenComparing(java.util.function.Function<?superT,?extendsU>,java.util.Comparator<?superU>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this comparator and then comparing on the key extracted by the keyExtractor function"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function used to extract the sort key"], ["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare the sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either argument is null."]], "SeeAlso": ["@B_java#util#Comparator#comparing_E@", "@B_java#util#Comparator#thenComparing_E@"], "Permissions": [], "Description": "Returns a lexicographic-order comparator with a function that extracts a key to be compared with the given Comparator.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparing (Function<? super T, ? extends U> keyExtractor, Comparator<? super U> keyComparator)"}, "nullsLast(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that considers null to be greater than non-null, and compares non-null objects with the supplied Comparator."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing non-null values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a null-friendly comparator that considers null to be greater than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.", "history": "added in API level 24", "FullName": "public static Comparator<T> nullsLast (Comparator<? super T> comparator)"}, "nullsFirst(java.util.Comparator<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that considers null to be less than non-null, and compares non-null objects with the supplied Comparator."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a Comparator for comparing non-null values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a null-friendly comparator that considers null to be less than non-null. When both are null, they are considered equal. If both are non-null, the specified Comparator is used to determine the order. If the specified comparator is null, then the returned comparator considers all non-null values to be equal. The returned comparator is serializable if the specified comparator is serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> nullsFirst (Comparator<? super T> comparator)"}, "thenComparing(java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the @B_java#lang#Comparable_E@ sort key."]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function used to extract the @B_java#lang#Comparable_E@ sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": ["@B_java#util#Comparator#comparing_E@", "@B_java#util#Comparator#thenComparing_E@"], "Permissions": [], "Description": "Returns a lexicographic-order comparator with a function that extracts a Comparable sort key.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparing (Function<? super T, ? extends U> keyExtractor)"}, "comparingInt(java.util.function.ToIntFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares by an extracted key"]], "Parameters": [["@B_java#util#function#ToIntFunction_E@", "ToIntFunction: the function used to extract the integer sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": ["@B_java#util#Comparator#comparing_E@"], "Permissions": [], "Description": "Accepts a function that extracts an int sort key from a type T, and returns a Comparator<T> that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> comparingInt (ToIntFunction<? super T> keyExtractor)"}, "naturalOrder()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that imposes the natural ordering on Comparable objects."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns a comparator that compares @B_java#lang#Comparable_E@ objects in natural order. The returned comparator is serializable and throws @B_java#lang#NullPointerException_E@ when comparing null.", "history": "Added in API level 24", "FullName": "public static Comparator<T> naturalOrder ()"}, "compare(T,T)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."]], "Parameters": [["T", "T: the first object to be compared."], ["T", "T: the second object to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if an argument is null and this comparator does not permit null arguments"], ["@B_java#lang#ClassCastException_E@", "if the arguments' types prevent them from being compared by this comparator."]], "SeeAlso": [], "Permissions": [], "Description": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. In the foregoing description, the notation The implementor must ensure that The implementor must also ensure that the relation is transitive: Finally, the implementor must ensure that It is generally the case, but", "history": "Added in API level 1", "FullName": "public abstract int compare (T o1, T o2)"}, "compare(T, T)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."]], "Parameters": [["T", "T: the first object to be compared."], ["T", "T: the second object to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if an argument is null and this comparator does not permit null arguments"], ["@B_java#lang#ClassCastException_E@", "if the arguments' types prevent them from being compared by this comparator."]], "SeeAlso": [], "Permissions": [], "Description": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. In the foregoing description, the notation The implementor must ensure that The implementor must also ensure that the relation is transitive: Finally, the implementor must ensure that It is generally the case, but", "history": "added in API level 1", "FullName": "public abstract int compare (T o1, T o2)"}, "thenComparingDouble(java.util.function.ToDoubleFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the double sort key"]], "Parameters": [["@B_java#util#function#ToDoubleFunction_E@", "ToDoubleFunction: the function used to extract the double sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": ["@B_java#util#Comparator#comparingDouble_E@", "@B_java#util#Comparator#thenComparing_E@"], "Permissions": [], "Description": "Returns a lexicographic-order comparator with a function that extracts a double sort key.", "history": "Added in API level 24", "FullName": "public Comparator<T> thenComparingDouble (ToDoubleFunction<? super T> keyExtractor)"}, "comparingLong(java.util.function.ToLongFunction<?superT>)": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that compares by an extracted key"]], "Parameters": [["@B_java#util#function#ToLongFunction_E@", "ToLongFunction: the function used to extract the long sort key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": ["@B_java#util#Comparator#comparing_E@"], "Permissions": [], "Description": "Accepts a function that extracts a long sort key from a type T, and returns a Comparator<T> that compares by that sort key. The returned comparator is serializable if the specified function is also serializable.", "history": "Added in API level 24", "FullName": "public static Comparator<T> comparingLong (ToLongFunction<? super T> keyExtractor)"}, "thenComparing(java.util.Comparator<? super T>)": {"Returns": [["@B_java#util#Comparator_E@", "a lexicographic-order comparator composed of this and then the other comparator"]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the other comparator to be used when this comparator compares two objects that are equal."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a lexicographic-order comparator with another comparator. If this Comparator considers two elements equal, i.e. compare(a, b) == 0, other is used to determine the order. The returned comparator is serializable if the specified comparator is also serializable.", "history": "added in API level 24", "FullName": "public Comparator<T> thenComparing (Comparator<? super T> other)"}, "reversed()": {"Returns": [["@B_java#util#Comparator_E@", "a comparator that imposes the reverse ordering of this comparator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that imposes the reverse ordering of this comparator.", "history": "Added in API level 24", "FullName": "public Comparator<T> reversed ()"}}, "Inheritance": [], "ClassName": "java.util.Comparator<T>", "ClassDesc": "A comparison function, which imposes a @B_java#util#Collections#sort_E@ or @B_java#util#Arrays#sort_E@) to allow precise control over the sort order. Comparators can also be used to control the order of certain data structures (such as @B_java#util#SortedSet_E@ or @B_java#util#SortedMap_E@), or to provide an ordering for collections of objects that don't have a @B_java#lang#Comparable_E@. The ordering imposed by a comparator Caution should be exercised when using a comparator capable of imposing an ordering inconsistent with equals to order a sorted set (or sorted map). Suppose a sorted set (or sorted map) with an explicit comparator For example, suppose one adds two elements a and b such that (a.equals(b) && c.compare(a, b) != 0) to an empty TreeSet with comparator c. The second add operation will return true (and the size of the tree set will increase) because a and b are not equivalent from the tree set's perspective, even though this is contrary to the specification of the @B_java#util#Set#add_E@ method. Note: It is generally a good idea for comparators to also implement @B_java#util#TreeSet_E@, @B_java#util#TreeMap_E@). In order for the data structure to serialize successfully, the comparator (if provided) must implement For the mathematically inclined, the @B_java#lang#Object#equals_E@ method(s):Unlike Comparable, a comparator may optionally permit comparison of null arguments, while maintaining the requirements for an equivalence relation. This interface is a member of the"}