{"Functions": {"createCircularReveal(android.view.View,int,int,float,float)": {"Returns": [["@B_android#animation#Animator_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View: The View will be clipped to the animating circle."], ["int", "int: The x coordinate of the center of the animating circle, relative to view."], ["int", "int: The y coordinate of the center of the animating circle, relative to view."], ["float", "float: The starting radius of the animating circle."], ["float", "float: The ending radius of the animating circle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an Animator which can animate a clipping circle. Any shadow cast by the View will respect the circular clip from this animator. Only a single non-rectangular clip can be applied on a View at any time. Views clipped by a circular reveal animation take priority over @B_android#view#View#setClipToOutline_E@. Note that the animation returned here is a one-shot animation. It cannot be re-used, and once started it cannot be paused or resumed. It is also an asynchronous animation that automatically runs off of the UI thread. As a result @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ will occur after the animation has ended, but it may be delayed depending on thread responsiveness. Note that if any start delay is set on the reveal animator, the start radius will not be applied to the reveal circle until the start delay has passed. If it's desired to set a start radius on the reveal circle during the start delay, one workaround could be adding an animator with the same start and end radius. For example:", "history": "Added in API level 21", "FullName": "public static Animator createCircularReveal (View view, int centerX, int centerY, float startRadius, float endRadius)"}}, "Inheritance": [], "ClassName": "android.view.ViewAnimationUtils", "ClassDesc": "Defines common utilities for working with View's animations."}