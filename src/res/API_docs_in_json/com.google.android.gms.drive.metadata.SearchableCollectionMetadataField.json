{"Functions": {}, "Inheritance": [], "ClassName": "com.google.android.gms.drive.metadata.SearchableCollectionMetadataField<T>", "ClassDesc": "Interface for metadata fields which hold a collection of values. Implementation of this interface (such as the static values in @B_com#google#android#gms#drive#query#SearchableField_E@) can be used to create \"in\" filters for file queries. For example, the following code will find all files in the folder with ID \"folder\" with the MIME type \"text/plain\": DriveId parent = DriveId.createFromResourceId(\"folder\"); Filter parentFilter = Filters.in(SearchableField.PARENTS, parent); Filter mimeTypeFilter = Filters.eq(SearchableField.MIME_TYPE, \"text/plain\"); Query query = new Query.Builder().addFilters(parentFilter, mimeTypeFilter).build(); for (Metadata metadata : Drive.DriveApi.query(apiClient, query).await().getMetadataBuffer()) { System.out.println(metadata.getTitle()); } Note that you must pass a @B_com#google#android#gms#drive#metadata#SearchableCollectionMetadataField_E@ to the @B_com#google#android#gms#drive#query#Filters#in_E@ method; a plain @B_com#google#android#gms#drive#metadata#SearchableMetadataField_E@ cannot be used as part of an \"in\" query. However, every @B_com#google#android#gms#drive#metadata#SearchableCollectionMetadataField_E@ is also a @B_com#google#android#gms#drive#metadata#SearchableMetadataField_E@, so you can use a @B_com#google#android#gms#drive#metadata#SearchableCollectionMetadataField_E@ with @B_com#google#android#gms#drive#query#Filters#eq_E@ (for example, if you want to find a file with an exact set of parents)."}