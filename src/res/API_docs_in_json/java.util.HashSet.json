{"Functions": {"HashSet(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hash map"], ["float", "float: the load factor of the hash map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set; the backing", "history": "Added in API level 1", "FullName": "public HashSet (int initialCapacity, float loadFactor)"}, "size()": {"Returns": [["int", "the number of elements in this set (its cardinality)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this set (its cardinality).", "history": "Added in API level 1", "FullName": "public int size ()"}, "HashSet(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new set containing the elements in the specified collection. The", "history": "added in API level 1", "FullName": "public HashSet (Collection<? extends E> c)"}, "isEmpty()": {"Returns": [["boolean", "true if this set contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "add(E)": {"Returns": [["boolean", "true if this set did not already contain the specified element"]], "Parameters": [["E", "E: element to be added to this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this set if it is not already present. More formally, adds the specified element", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "HashSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set; the backing", "history": "Added in API level 1", "FullName": "public HashSet ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if the set contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be removed from this set, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified element from this set if it is present. More formally, removes an element", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "HashSet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new set containing the elements in the specified collection. The", "history": "Added in API level 1", "FullName": "public HashSet (Collection<? extends E> c)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this set. The set will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this set. The Spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#DISTINCT_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ConcurrentModificationException_E@"], "Permissions": [], "Description": "Returns an iterator over the elements in this set. The elements are returned in no particular order.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "HashSet(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hash map"], ["float", "float: the load factor of the hash map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero, or if the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set; the backing", "history": "added in API level 1", "FullName": "public HashSet (int initialCapacity, float loadFactor)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this set contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this set is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "HashSet(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity of the hash table"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty set; the backing", "history": "Added in API level 1", "FullName": "public HashSet (int initialCapacity)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractSet_E@"], "ClassName": "java.util.HashSet<E>", "ClassDesc": "This class implements the This class offers constant time performance for the basic operations (@B_java#util#Collections#synchronizedSet_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the set:The iterators returned by this class's @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw This class is a member of the"}