{"Functions": {"newSingleThreadExecutor()": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created single-threaded Executor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an Executor that uses a single worker thread operating off an unbounded queue. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newFixedThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads.", "history": "Added in API level 1", "FullName": "public static ExecutorService newSingleThreadExecutor ()"}, "privilegedThreadFactory()": {"Returns": [["@B_java#util#concurrent#ThreadFactory_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Legacy security code; do not use.", "history": "Added in API level 1", "FullName": "public static ThreadFactory privilegedThreadFactory ()"}, "callable(java.security.PrivilegedAction<?>)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "a callable object"]], "Parameters": [["@B_java#security#PrivilegedAction_E@", "PrivilegedAction: the privileged action to run"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if action null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#Callable_E@ object that, when called, runs the given privileged action and returns its result.", "history": "Added in API level 1", "FullName": "public static Callable<Object> callable (PrivilegedAction<?> action)"}, "callable(java.lang.Runnable,T)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "a callable object"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to run"], ["T", "T: the result to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if task null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#Callable_E@ object that, when called, runs the given task and returns the given result. This can be useful when applying methods requiring a Callable to an otherwise resultless action.", "history": "Added in API level 1", "FullName": "public static Callable<T> callable (Runnable task, T result)"}, "newScheduledThreadPool(int,java.util.concurrent.ThreadFactory)": {"Returns": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "a newly created scheduled thread pool"]], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle"], ["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when the executor creates a new thread"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"], ["@B_java#lang#NullPointerException_E@", "if threadFactory is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.", "history": "Added in API level 1", "FullName": "public static ScheduledExecutorService newScheduledThreadPool (int corePoolSize, ThreadFactory threadFactory)"}, "newSingleThreadExecutor(java.util.concurrent.ThreadFactory)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created single-threaded Executor"]], "Parameters": [["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when creating new threads"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if threadFactory is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed. Unlike the otherwise equivalent newFixedThreadPool(1, threadFactory) the returned executor is guaranteed not to be reconfigurable to use additional threads.", "history": "Added in API level 1", "FullName": "public static ExecutorService newSingleThreadExecutor (ThreadFactory threadFactory)"}, "callable(java.security.PrivilegedExceptionAction<?>)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "a callable object"]], "Parameters": [["@B_java#security#PrivilegedExceptionAction_E@", "PrivilegedExceptionAction: the privileged exception action to run"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if action null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#Callable_E@ object that, when called, runs the given privileged exception action and returns its result.", "history": "Added in API level 1", "FullName": "public static Callable<Object> callable (PrivilegedExceptionAction<?> action)"}, "callable(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "a callable object"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to run"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if task null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#Callable_E@ object that, when called, runs the given task and returns null.", "history": "Added in API level 1", "FullName": "public static Callable<Object> callable (Runnable task)"}, "newSingleThreadScheduledExecutor()": {"Returns": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "the newly created scheduled executor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newScheduledThreadPool(1) the returned executor is guaranteed not to be reconfigurable to use additional threads.", "history": "Added in API level 1", "FullName": "public static ScheduledExecutorService newSingleThreadScheduledExecutor ()"}, "newFixedThreadPool(int,java.util.concurrent.ThreadFactory)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [["int", "int: the number of threads in the pool"], ["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when creating new threads"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if threadFactory is null"], ["@B_java#lang#IllegalArgumentException_E@", "if nThreads <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly @B_java#util#concurrent#ExecutorService#shutdown_E@.", "history": "Added in API level 1", "FullName": "public static ExecutorService newFixedThreadPool (int nThreads, ThreadFactory threadFactory)"}, "newFixedThreadPool(int)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [["int", "int: the number of threads in the pool"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if nThreads <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue. At any point, at most nThreads threads will be active processing tasks. If additional tasks are submitted when all threads are active, they will wait in the queue until a thread is available. If any thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks. The threads in the pool will exist until it is explicitly @B_java#util#concurrent#ExecutorService#shutdown_E@.", "history": "Added in API level 1", "FullName": "public static ExecutorService newFixedThreadPool (int nThreads)"}, "defaultThreadFactory()": {"Returns": [["@B_java#util#concurrent#ThreadFactory_E@", "a thread factory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a default thread factory used to create new threads. This factory creates all new threads used by an Executor in the same @B_java#lang#ThreadGroup_E@. Each new thread is created as a non-daemon thread with priority set to the smaller of Thread.NORM_PRIORITY and the maximum priority permitted in the thread group. New threads have names accessible via @B_java#lang#Thread#getName_E@ of pool-N-thread-M, where N is the sequence number of this factory, and M is the sequence number of the thread created by this factory.", "history": "Added in API level 1", "FullName": "public static ThreadFactory defaultThreadFactory ()"}, "unconfigurableScheduledExecutorService(java.util.concurrent.ScheduledExecutorService)": {"Returns": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "a ScheduledExecutorService instance"]], "Parameters": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "ScheduledExecutorService: the underlying implementation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if executor null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object that delegates all defined @B_java#util#concurrent#ScheduledExecutorService_E@ methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely \"freeze\" configuration and disallow tuning of a given concrete implementation.", "history": "Added in API level 1", "FullName": "public static ScheduledExecutorService unconfigurableScheduledExecutorService (ScheduledExecutorService executor)"}, "privilegedCallableUsingCurrentClassLoader(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "no returns description in source"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Legacy security code; do not use.", "history": "Added in API level 1", "FullName": "public static Callable<T> privilegedCallableUsingCurrentClassLoader (Callable<T> callable)"}, "callable(java.lang.Runnable, T)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "a callable object"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to run"], ["T", "T: the result to return"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if task null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#Callable_E@ object that, when called, runs the given task and returns the given result. This can be useful when applying methods requiring a Callable to an otherwise resultless action.", "history": "added in API level 1", "FullName": "public static Callable<T> callable (Runnable task, T result)"}, "unconfigurableExecutorService(java.util.concurrent.ExecutorService)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "an ExecutorService instance"]], "Parameters": [["@B_java#util#concurrent#ExecutorService_E@", "ExecutorService: the underlying implementation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if executor null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an object that delegates all defined @B_java#util#concurrent#ExecutorService_E@ methods to the given executor, but not any other methods that might otherwise be accessible using casts. This provides a way to safely \"freeze\" configuration and disallow tuning of a given concrete implementation.", "history": "Added in API level 1", "FullName": "public static ExecutorService unconfigurableExecutorService (ExecutorService executor)"}, "privilegedCallable(java.util.concurrent.Callable<T>)": {"Returns": [["@B_java#util#concurrent#Callable_E@", "no returns description in source"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Legacy security code; do not use.", "history": "Added in API level 1", "FullName": "public static Callable<T> privilegedCallable (Callable<T> callable)"}, "newWorkStealingPool(int)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [["int", "int: the targeted parallelism level"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parallelism <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that maintains enough threads to support the given parallelism level, and may use multiple queues to reduce contention. The parallelism level corresponds to the maximum number of threads actively engaged in, or available to engage in, task processing. The actual number of threads may grow and shrink dynamically. A work-stealing pool makes no guarantees about the order in which submitted tasks are executed.", "history": "Added in API level 24", "FullName": "public static ExecutorService newWorkStealingPool (int parallelism)"}, "newWorkStealingPool()": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#concurrent#Executors#newWorkStealingPool_E@"], "Permissions": [], "Description": "Creates a work-stealing thread pool using the number of", "history": "Added in API level 24", "FullName": "public static ExecutorService newWorkStealingPool ()"}, "newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)": {"Returns": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "a newly created scheduled executor"]], "Parameters": [["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when creating new threads"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if threadFactory is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically. (Note however that if this single thread terminates due to a failure during execution prior to shutdown, a new one will take its place if needed to execute subsequent tasks.) Tasks are guaranteed to execute sequentially, and no more than one task will be active at any given time. Unlike the otherwise equivalent newScheduledThreadPool(1, threadFactory) the returned executor is guaranteed not to be reconfigurable to use additional threads.", "history": "Added in API level 1", "FullName": "public static ScheduledExecutorService newSingleThreadScheduledExecutor (ThreadFactory threadFactory)"}, "newCachedThreadPool(java.util.concurrent.ThreadFactory)": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [["@B_java#util#concurrent#ThreadFactory_E@", "ThreadFactory: the factory to use when creating new threads"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if threadFactory is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.", "history": "Added in API level 1", "FullName": "public static ExecutorService newCachedThreadPool (ThreadFactory threadFactory)"}, "newScheduledThreadPool(int)": {"Returns": [["@B_java#util#concurrent#ScheduledExecutorService_E@", "a newly created scheduled thread pool"]], "Parameters": [["int", "int: the number of threads to keep in the pool, even if they are idle"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if corePoolSize < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.", "history": "Added in API level 1", "FullName": "public static ScheduledExecutorService newScheduledThreadPool (int corePoolSize)"}, "newCachedThreadPool()": {"Returns": [["@B_java#util#concurrent#ExecutorService_E@", "the newly created thread pool"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available. These pools will typically improve the performance of programs that execute many short-lived asynchronous tasks. Calls to execute will reuse previously constructed threads if available. If no existing thread is available, a new thread will be created and added to the pool. Threads that have not been used for sixty seconds are terminated and removed from the cache. Thus, a pool that remains idle for long enough will not consume any resources. Note that pools with similar properties but different details (for example, timeout parameters) may be created using @B_java#util#concurrent#ThreadPoolExecutor_E@ constructors.", "history": "Added in API level 1", "FullName": "public static ExecutorService newCachedThreadPool ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.Executors", "ClassDesc": "Factory and utility methods for @B_java#util#concurrent#Executor_E@, @B_java#util#concurrent#ExecutorService_E@, @B_java#util#concurrent#ScheduledExecutorService_E@, @B_java#util#concurrent#ThreadFactory_E@, and @B_java#util#concurrent#Callable_E@ classes defined in this package. This class supports the following kinds of methods: Methods that create and return an @B_java#util#concurrent#ExecutorService_E@ set up with commonly useful configuration settings. Methods that create and return a @B_java#util#concurrent#ScheduledExecutorService_E@ set up with commonly useful configuration settings. Methods that create and return a \"wrapped\" ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible. Methods that create and return a @B_java#util#concurrent#ThreadFactory_E@ that sets newly created threads to a known state. Methods that create and return a @B_java#util#concurrent#Callable_E@ out of other closure-like forms, so they can be used in execution methods requiring Callable."}