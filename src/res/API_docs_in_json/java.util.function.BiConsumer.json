{"Functions": {"accept(T,U)": {"Returns": [], "Parameters": [["T", "T: the first input argument"], ["U", "U: the second input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given arguments.", "history": "Added in API level 24", "FullName": "public abstract void accept (T t, U u)"}, "andThen(java.util.function.BiConsumer<?superT,?superU>)": {"Returns": [["@B_java#util#function#BiConsumer_E@", "a composed BiConsumer that performs in sequence this operation followed by the after operation"]], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: the operation to perform after this operation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed BiConsumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.", "history": "Added in API level 24", "FullName": "public BiConsumer<T, U> andThen (BiConsumer<? super T, ? super U> after)"}, "accept(T, U)": {"Returns": [], "Parameters": [["T", "T: the first input argument"], ["U", "U: the second input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given arguments.", "history": "added in API level 24", "FullName": "public abstract void accept (T t, U u)"}}, "Inheritance": [], "ClassName": "java.util.function.BiConsumer<T, U>", "ClassDesc": "Represents an operation that accepts two input arguments and returns no result. This is the two-arity specialization of @B_java#util#function#Consumer_E@. Unlike most other functional interfaces, BiConsumer is expected to operate via side-effects. This is a @B_java#util#function#BiConsumer#accept_E@."}