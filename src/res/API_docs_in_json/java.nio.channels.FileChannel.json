{"Functions": {"position()": {"Returns": [["long", "This channel's file position, a non-negative integer counting the number of bytes from the beginning of the file to the current position"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this channel's file position.", "history": "Added in API level 1", "FullName": "public abstract long position ()"}, "write(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. Bytes are written starting at this channel's current file position unless the channel is in append mode, in which case the position is first advanced to the end of the file. The file is grown, if necessary, to accommodate the written bytes, and then the file position is updated with the number of bytes actually written. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "lock(long, long, boolean)": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock"]], "Parameters": [["long", "long: The position at which the locked region is to start; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true to request a shared lock, in which case this channel must be open for reading (and possibly writing); false to request an exclusive lock, in which case this channel must be open for writing (and possibly reading)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the invoking thread is blocked in this method"], ["@B_java#nio#channels#FileLockInterruptionException_E@", "If the invoking thread is interrupted while blocked in this method"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If shared is true this channel was not opened for reading"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If shared is false but this channel was not opened for writing"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Acquires a lock on the given region of this channel's file. An invocation of this method will block until the region can be locked, this channel is closed, or the invoking thread is interrupted, whichever comes first. If this channel is closed by another thread during an invocation of this method then an @B_java#nio#channels#AsynchronousCloseException_E@ will be thrown. If the invoking thread is interrupted while waiting to acquire the lock then its interrupt status will be set and a @B_java#nio#channels#FileLockInterruptionException_E@ will be thrown. If the invoker's interrupt status is set when this method is invoked then that exception will be thrown immediately; the thread's interrupt status will not be changed. The region specified by the @B_java#nio#channels#FileChannel#lock_E@ method simply locks a region of size @B_java#lang#Long#MAX_VALUE_E@. Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object's @B_java#nio#channels#FileLock#isShared_E@ method. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.", "history": "added in API level 1", "FullName": "public abstract FileLock lock (long position, long size, boolean shared)"}, "position(long)": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "This file channel"]], "Parameters": [["long", "long: The new position, a non-negative integer counting the number of bytes from the beginning of the file"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#lang#IllegalArgumentException_E@", "If the new position is negative"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this channel's file position. Setting the position to a value that is greater than the file's current size is legal but does not change the size of the file. A later attempt to read bytes at such a position will immediately return an end-of-file indication. A later attempt to write bytes at such a position will cause the file to be grown to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified.", "history": "Added in API level 1", "FullName": "public abstract FileChannel position (long newPosition)"}, "write(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. Bytes are written starting at this channel's current file position unless the channel is in append mode, in which case the position is first advanced to the end of the file. The file is grown, if necessary, to accommodate the written bytes, and then the file position is updated with the number of bytes actually written. Otherwise this method behaves exactly as specified by the @B_java#nio#channels#WritableByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract int write (ByteBuffer src)"}, "write(java.nio.ByteBuffer,long)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be transferred"], ["long", "long: The file position at which the transfer is to begin; must be non-negative"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the position is negative"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the write operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the write operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position. This method works in the same manner as the @B_java#nio#channels#FileChannel#write_E@ method, except that bytes are written starting at the given file position rather than at the channel's current position. This method does not modify this channel's position. If the given position is greater than the file's current size then the file will be grown to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified.", "history": "Added in API level 1", "FullName": "public abstract int write (ByteBuffer src, long position)"}, "read(java.nio.ByteBuffer, long)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the given position is greater than or equal to the file's current size"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"], ["long", "long: The file position at which the transfer is to begin; must be non-negative"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the position is negative"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If this channel was not opened for reading"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the read operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position. This method works in the same manner as the @B_java#nio#channels#FileChannel#read_E@ method, except that bytes are read starting at the given file position rather than at the channel's current position. This method does not modify this channel's position. If the given position is greater than the file's current size then no bytes are read.", "history": "added in API level 1", "FullName": "public abstract int read (ByteBuffer dst, long position)"}, "lock(long,long,boolean)": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock"]], "Parameters": [["long", "long: The position at which the locked region is to start; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true to request a shared lock, in which case this channel must be open for reading (and possibly writing); false to request an exclusive lock, in which case this channel must be open for writing (and possibly reading)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the invoking thread is blocked in this method"], ["@B_java#nio#channels#FileLockInterruptionException_E@", "If the invoking thread is interrupted while blocked in this method"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If shared is true this channel was not opened for reading"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If shared is false but this channel was not opened for writing"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Acquires a lock on the given region of this channel's file. An invocation of this method will block until the region can be locked, this channel is closed, or the invoking thread is interrupted, whichever comes first. If this channel is closed by another thread during an invocation of this method then an @B_java#nio#channels#AsynchronousCloseException_E@ will be thrown. If the invoking thread is interrupted while waiting to acquire the lock then its interrupt status will be set and a @B_java#nio#channels#FileLockInterruptionException_E@ will be thrown. If the invoker's interrupt status is set when this method is invoked then that exception will be thrown immediately; the thread's interrupt status will not be changed. The region specified by the @B_java#nio#channels#FileChannel#lock_E@ method simply locks a region of size @B_java#lang#Long#MAX_VALUE_E@. Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object's @B_java#nio#channels#FileLock#isShared_E@ method. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.", "history": "Added in API level 1", "FullName": "public abstract FileLock lock (long position, long size, boolean shared)"}, "write(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"], ["int", "int: The offset within the buffer array of the first buffer from which bytes are to be retrieved; must be non-negative and no larger than srcs.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than srcs.length - offset"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from a subsequence of the given buffers. Bytes are written starting at this channel's current file position unless the channel is in append mode, in which case the position is first advanced to the end of the file. The file is grown, if necessary, to accommodate the written bytes, and then the file position is updated with the number of bytes actually written. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract long write (ByteBuffer[] srcs, int offset, int length)"}, "read(java.nio.ByteBuffer[],int,int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into a subsequence of the given buffers. Bytes are read starting at this channel's current file position, and then the file position is updated with the number of bytes actually read. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}, "transferTo(long,long,java.nio.channels.WritableByteChannel)": {"Returns": [["long", "The number of bytes, possibly zero, that were actually transferred"]], "Parameters": [["long", "long: The position within the file at which the transfer is to begin; must be non-negative"], ["long", "long: The maximum number of bytes to be transferred; must be non-negative"], ["@B_java#nio#channels#WritableByteChannel_E@", "WritableByteChannel: The target channel"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If this channel was not opened for reading"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If the target channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If either this channel or the target channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes either channel while the transfer is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the transfer is in progress, thereby closing both channels and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers bytes from this channel's file to the given writable byte channel. An attempt is made to read up to This method does not modify this channel's position. If the given position is greater than the file's current size then no bytes are transferred. If the target channel has a position then bytes are written starting at that position and then the position is incremented by the number of bytes written. This method is potentially much more efficient than a simple loop that reads from this channel and writes to the target channel. Many operating systems can transfer bytes directly from the filesystem cache to the target channel without actually copying them.", "history": "Added in API level 1", "FullName": "public abstract long transferTo (long position, long count, WritableByteChannel target)"}, "write(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers from which bytes are to be retrieved"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffers. Bytes are written starting at this channel's current file position unless the channel is in append mode, in which case the position is first advanced to the end of the file. The file is grown, if necessary, to accommodate the written bytes, and then the file position is updated with the number of bytes actually written. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#GatheringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public final long write (ByteBuffer[] srcs)"}, "transferFrom(java.nio.channels.ReadableByteChannel,long,long)": {"Returns": [["long", "The number of bytes, possibly zero, that were actually transferred"]], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: The source channel"], ["long", "long: The position within the file at which the transfer is to begin; must be non-negative"], ["long", "long: The maximum number of bytes to be transferred; must be non-negative"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If the source channel was not opened for reading"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If either this channel or the source channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes either channel while the transfer is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the transfer is in progress, thereby closing both channels and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers bytes into this channel's file from the given readable byte channel. An attempt is made to read up to This method does not modify this channel's position. If the given position is greater than the file's current size then no bytes are transferred. If the source channel has a position then bytes are read starting at that position and then the position is incremented by the number of bytes read. This method is potentially much more efficient than a simple loop that reads from the source channel and writes to this channel. Many operating systems can transfer bytes directly from the source channel into the filesystem cache without actually copying them.", "history": "Added in API level 1", "FullName": "public abstract long transferFrom (ReadableByteChannel src, long position, long count)"}, "tryLock(long,long,boolean)": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"]], "Parameters": [["long", "long: The position at which the locked region is to start; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true to request a shared lock, false to request an exclusive lock"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region of the same file"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Attempts to acquire a lock on the given region of this channel's file. This method does not block. An invocation always returns immediately, either having acquired a lock on the requested region or having failed to do so. If it fails to acquire a lock because an overlapping lock is held by another program then it returns The region specified by the @B_java#nio#channels#FileChannel#tryLock_E@ method simply locks a region of size @B_java#lang#Long#MAX_VALUE_E@. Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object's @B_java#nio#channels#FileLock#isShared_E@ method. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.", "history": "Added in API level 1", "FullName": "public abstract FileLock tryLock (long position, long size, boolean shared)"}, "force(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true then this method is required to force changes to both the file's content and metadata to be written to storage; otherwise, it need only force content changes to be written"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Forces any updates to this channel's file to be written to the storage device that contains it. If this channel's file resides on a local storage device then when this method returns it is guaranteed that all changes made to the file since this channel was created, or since this method was last invoked, will have been written to that device. This is useful for ensuring that critical information is not lost in the event of a system crash. If the file does not reside on a local device then no such guarantee is made. The Invoking this method may cause an I/O operation to occur even if the channel was only opened for reading. Some operating systems, for example, maintain a last-access time as part of a file's metadata, and this time is updated whenever the file is read. Whether or not this is actually done is system-dependent and is therefore unspecified. This method is only guaranteed to force changes that were made to this channel's file via the methods defined in this class. It may or may not force changes that were made by modifying the content of a @B_java#nio#MappedByteBuffer_E@ obtained by invoking the @B_java#nio#channels#FileChannel#map_E@ method. Invoking the @B_java#nio#MappedByteBuffer#force_E@ method of the mapped byte buffer will force changes made to the buffer's content to be written.", "history": "Added in API level 1", "FullName": "public abstract void force (boolean metaData)"}, "size()": {"Returns": [["long", "The current size of this channel's file, measured in bytes"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current size of this channel's file.", "history": "Added in API level 1", "FullName": "public abstract long size ()"}, "read(java.nio.ByteBuffer,long)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the given position is greater than or equal to the file's current size"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"], ["long", "long: The file position at which the transfer is to begin; must be non-negative"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the position is negative"], ["@B_java#nio#channels#NonReadableChannelException_E@", "If this channel was not opened for reading"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the read operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the read operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer, starting at the given file position. This method works in the same manner as the @B_java#nio#channels#FileChannel#read_E@ method, except that bytes are read starting at the given file position rather than at the channel's current position. This method does not modify this channel's position. If the given position is greater than the file's current size then no bytes are read.", "history": "Added in API level 1", "FullName": "public abstract int read (ByteBuffer dst, long position)"}, "lock()": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the invoking thread is blocked in this method"], ["@B_java#nio#channels#FileLockInterruptionException_E@", "If the invoking thread is interrupted while blocked in this method"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region of the same file"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Acquires an exclusive lock on this channel's file. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final FileLock lock ()"}, "read(java.nio.ByteBuffer[])": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffers. Bytes are read starting at this channel's current file position, and then the file position is updated with the number of bytes actually read. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public final long read (ByteBuffer[] dsts)"}, "FileChannel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected FileChannel ()"}, "map(java.nio.channels.FileChannel.MapMode,long,long)": {"Returns": [["@B_java#nio#MappedByteBuffer_E@", "The mapped byte buffer"]], "Parameters": [["@B_java#nio#channels#FileChannel#MapMode_E@", "FileChannel.MapMode: One of the constants @B_java#nio#channels#FileChannel#MapMode#READ_ONLY_E@, @B_java#nio#channels#FileChannel#MapMode#READ_WRITE_E@, or @B_java#nio#channels#FileChannel#MapMode#PRIVATE_E@ defined in the @B_java#nio#channels#FileChannel#MapMode_E@ class, according to whether the file is to be mapped read-only, read/write, or privately (copy-on-write), respectively"], ["long", "long: The position within the file at which the mapped region is to start; must be non-negative"], ["long", "long: The size of the region to be mapped; must be non-negative and no greater than @B_java#lang#Integer#MAX_VALUE_E@"]], "Throws": [["@B_java#nio#channels#NonReadableChannelException_E@", "If the mode is @B_java#nio#channels#FileChannel#MapMode#READ_ONLY_E@ but this channel was not opened for reading"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If the mode is @B_java#nio#channels#FileChannel#MapMode#READ_WRITE_E@ or @B_java#nio#channels#FileChannel#MapMode#PRIVATE_E@ but this channel was not opened for both reading and writing"], ["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#MapMode_E@", "@B_java#nio#MappedByteBuffer_E@"], "Permissions": [], "Description": "Maps a region of this channel's file directly into memory. A region of a file may be mapped into memory in one of three modes: @B_java#nio#ReadOnlyBufferException_E@ to be thrown. (@B_java#nio#channels#FileChannel#MapMode#READ_ONLY_E@) @B_java#nio#channels#FileChannel#MapMode#READ_WRITE_E@) @B_java#nio#channels#FileChannel#MapMode#PRIVATE_E@) For a read-only mapping, this channel must have been opened for reading; for a read/write or private mapping, this channel must have been opened for both reading and writing. The @B_java#nio#MappedByteBuffer_E@ returned by this method will have a position of zero and a limit and capacity of A mapping, once established, is not dependent upon the file channel that was used to create it. Closing the channel, in particular, has no effect upon the validity of the mapping. Many of the details of memory-mapped files are inherently dependent upon the underlying operating system and are therefore unspecified. The behavior of this method when the requested region is not completely contained within this channel's file is unspecified. Whether changes made to the content or size of the underlying file, by this program or another, are propagated to the buffer is unspecified. The rate at which changes to the buffer are propagated to the file is unspecified. For most operating systems, mapping a file into memory is more expensive than reading or writing a few tens of kilobytes of data via the usual @B_java#nio#channels#FileChannel#read_E@ and @B_java#nio#channels#FileChannel#write_E@ methods. From the standpoint of performance it is generally only worth mapping relatively large files into memory.", "history": "Added in API level 1", "FullName": "public abstract MappedByteBuffer map (FileChannel.MapMode mode, long position, long size)"}, "open(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "A new file channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path of the file to open or create"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: Options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "If the path is associated with a provider that does not support creating file channels, or an unsupported open option is specified"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission required by the implementation. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access if the file is opened for writing"]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file, returning a file channel to access the file. An invocation of this method behaves in exactly the same way as the invocation opts is a set of the options specified in the options array.", "history": "Added in API level 26", "FullName": "public static FileChannel open (Path path, OpenOption... options)"}, "tryLock(long, long, boolean)": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"]], "Parameters": [["long", "long: The position at which the locked region is to start; must be non-negative"], ["long", "long: The size of the locked region; must be non-negative, and the sum position + size must be non-negative"], ["boolean", "boolean: true to request a shared lock, false to request an exclusive lock"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the preconditions on the parameters do not hold"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region of the same file"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Attempts to acquire a lock on the given region of this channel's file. This method does not block. An invocation always returns immediately, either having acquired a lock on the requested region or having failed to do so. If it fails to acquire a lock because an overlapping lock is held by another program then it returns The region specified by the @B_java#nio#channels#FileChannel#tryLock_E@ method simply locks a region of size @B_java#lang#Long#MAX_VALUE_E@. Some operating systems do not support shared locks, in which case a request for a shared lock is automatically converted into a request for an exclusive lock. Whether the newly-acquired lock is shared or exclusive may be tested by invoking the resulting lock object's @B_java#nio#channels#FileLock#isShared_E@ method. File locks are held on behalf of the entire Java virtual machine. They are not suitable for controlling access to a file by multiple threads within the same virtual machine.", "history": "added in API level 1", "FullName": "public abstract FileLock tryLock (long position, long size, boolean shared)"}, "tryLock()": {"Returns": [["@B_java#nio#channels#FileLock_E@", "A lock object representing the newly-acquired lock, or null if the lock could not be acquired because another program holds an overlapping lock"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#OverlappingFileLockException_E@", "If a lock that overlaps the requested region is already held by this Java virtual machine, or if another thread is already blocked in this method and is attempting to lock an overlapping region"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": ["@B_java#nio#channels#FileChannel#lock_E@", "@B_java#nio#channels#FileChannel#tryLock_E@"], "Permissions": [], "Description": "Attempts to acquire an exclusive lock on this channel's file. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final FileLock tryLock ()"}, "write(java.nio.ByteBuffer, long)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be transferred"], ["long", "long: The file position at which the transfer is to begin; must be non-negative"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the position is negative"], ["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#nio#channels#AsynchronousCloseException_E@", "If another thread closes this channel while the write operation is in progress"], ["@B_java#nio#channels#ClosedByInterruptException_E@", "If another thread interrupts the current thread while the write operation is in progress, thereby closing the channel and setting the current thread's interrupt status"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer, starting at the given file position. This method works in the same manner as the @B_java#nio#channels#FileChannel#write_E@ method, except that bytes are written starting at the given file position rather than at the channel's current position. This method does not modify this channel's position. If the given position is greater than the file's current size then the file will be grown to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified.", "history": "added in API level 1", "FullName": "public abstract int write (ByteBuffer src, long position)"}, "read(java.nio.ByteBuffer[], int, int)": {"Returns": [["long", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffers into which bytes are to be transferred"], ["int", "int: The offset within the buffer array of the first buffer into which bytes are to be transferred; must be non-negative and no larger than dsts.length"], ["int", "int: The maximum number of buffers to be accessed; must be non-negative and no larger than dsts.length - offset"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into a subsequence of the given buffers. Bytes are read starting at this channel's current file position, and then the file position is updated with the number of bytes actually read. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ScatteringByteChannel_E@ interface.", "history": "added in API level 1", "FullName": "public abstract long read (ByteBuffer[] dsts, int offset, int length)"}, "truncate(long)": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "This file channel"]], "Parameters": [["long", "long: The new size, a non-negative byte count"]], "Throws": [["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#lang#IllegalArgumentException_E@", "If the new size is negative"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Truncates this channel's file to the given size. If the given size is less than the file's current size then the file is truncated, discarding any bytes beyond the new end of the file. If the given size is greater than or equal to the file's current size then the file is not modified. In either case, if this channel's file position is greater than the given size then it is set to that size.", "history": "Added in API level 1", "FullName": "public abstract FileChannel truncate (long size)"}, "read(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. Bytes are read starting at this channel's current file position, and then the file position is updated with the number of bytes actually read. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ReadableByteChannel_E@ interface.", "history": "Added in API level 1", "FullName": "public abstract int read (ByteBuffer dst)"}, "open(java.nio.file.Path,java.util.Set<?extendsjava.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "A new file channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path of the file to open or create"], ["@B_java#util#Set_E@", "Set: Options specifying how the file is opened"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: An optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "If the path is associated with a provider that does not support creating file channels, or an unsupported open option is specified, or the array contains an attribute that cannot be set atomically when creating the file"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission required by the implementation. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access if the file is opened for writing"]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file, returning a file channel to access the file. The options parameter determines how the file is opened. The @B_java#nio#file#StandardOpenOption#READ_E@ and @B_java#nio#file#StandardOpenOption#WRITE_E@ options determine if the file should be opened for reading and/or writing. If neither option (or the @B_java#nio#file#StandardOpenOption#APPEND_E@ option) is contained in the array then the file is opened for reading. By default reading or writing commences at the beginning of the file. In the addition to READ and WRITE, the following options may be present: An implementation may also support additional options. The attrs parameter is an optional array of file @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the file. The new channel is created by invoking the @B_java#nio#file#spi#FileSystemProvider#newFileChannel_E@ method on the provider that created the Path.", "history": "Added in API level 26", "FullName": "public static FileChannel open (Path path, Set<? extends OpenOption> options, FileAttribute...<?> attrs)"}}, "Inheritance": ["@B_java#nio#channels#spi#AbstractInterruptibleChannel_E@"], "ClassName": "java.nio.channels.FileChannel", "ClassDesc": "A channel for reading, writing, mapping, and manipulating a file. A file channel is a @B_java#nio#channels#SeekableByteChannel_E@ that is connected to a file. It has a current @B_java#nio#channels#FileChannel#position_E@ and @B_java#nio#channels#FileChannel#position_E@. The file itself contains a variable-length sequence of bytes that can be read and written and whose current @B_java#nio#channels#FileChannel#size_E@ can be queried. The size of the file increases when bytes are written beyond its current size; the size of the file decreases when it is @B_java#nio#channels#FileChannel#truncate_E@. The file may also have some associated In addition to the familiar read, write, and close operations of byte channels, this class defines the following file-specific operations: Bytes may be @B_java#nio#channels#FileChannel#read_E@ or @B_java#nio#channels#FileChannel#write_E@ at an absolute position in a file in a way that does not affect the channel's current position. A region of a file may be @B_java#nio#channels#FileChannel#map_E@ directly into memory; for large files this is often much more efficient than invoking the usual Updates made to a file may be @B_java#nio#channels#FileChannel#force_E@ to the underlying storage device, ensuring that data are not lost in the event of a system crash. Bytes can be transferred from a file @B_java#nio#channels#FileChannel#transferTo_E@, and @B_java#nio#channels#FileChannel#transferFrom_E@, in a way that can be optimized by many operating systems into a very fast transfer directly to or from the filesystem cache. A region of a file may be @B_java#nio#channels#FileLock_E@ against access by other programs. File channels are safe for use by multiple concurrent threads. The @B_java#nio#channels#Channel#close_E@ method may be invoked at any time, as specified by the @B_java#nio#channels#Channel_E@ interface. Only one operation that involves the channel's position or can change its file's size may be in progress at any given time; attempts to initiate a second such operation while the first is still in progress will block until the first operation completes. Other operations, in particular those that take an explicit position, may proceed concurrently; whether they in fact do so is dependent upon the underlying implementation and is therefore unspecified. The view of a file provided by an instance of this class is guaranteed to be consistent with other views of the same file provided by other instances in the same program. The view provided by an instance of this class may or may not, however, be consistent with the views seen by other concurrently-running programs due to caching performed by the underlying operating system and delays induced by network-filesystem protocols. This is true regardless of the language in which these other programs are written, and whether they are running on the same machine or on some other machine. The exact nature of any such inconsistencies are system-dependent and are therefore unspecified. A file channel is created by invoking one of the @B_java#nio#channels#FileChannel#open_E@ methods defined by this class. A file channel can also be obtained from an existing @B_java#io#FileInputStream#getChannel_E@, @B_java#io#FileOutputStream#getChannel_E@, or @B_java#io#RandomAccessFile#getChannel_E@ object by invoking that object's At various points this class specifies that an instance that is \"open for reading,\" \"open for writing,\" or \"open for reading and writing\" is required. A channel obtained via the @B_java#io#FileInputStream#getChannel_E@ method of a @B_java#io#FileInputStream_E@ instance will be open for reading. A channel obtained via the @B_java#io#FileOutputStream#getChannel_E@ method of a @B_java#io#FileOutputStream_E@ instance will be open for writing. Finally, a channel obtained via the @B_java#io#RandomAccessFile#getChannel_E@ method of a @B_java#io#RandomAccessFile_E@ instance will be open for reading if the instance was created with mode A file channel that is open for writing may be in @B_java#io#FileOutputStream#FileOutputStream_E@ constructor and passing"}