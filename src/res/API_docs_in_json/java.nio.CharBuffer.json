{"Functions": {"subSequence(int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new character buffer"]], "Parameters": [["int", "int: The index, relative to the current position, of the first character in the subsequence; must be non-negative and no larger than remaining()"], ["int", "int: The index, relative to the current position, of the character following the last character in the subsequence; must be no smaller than start and no larger than remaining()"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on start and end do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position. The new buffer will share this buffer's content; that is, if the content of this buffer is mutable then modifications to one buffer will cause the other to be modified. The new buffer's capacity will be that of this buffer, its position will be", "history": "added in API level 1", "FullName": "public abstract CharBuffer subSequence (int start, int end)"}, "isDirect()": {"Returns": [["boolean", "true if, and only if, this buffer is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this char buffer is direct.", "history": "Added in API level 1", "FullName": "public abstract boolean isDirect ()"}, "hasArray()": {"Returns": [["boolean", "true if, and only if, this buffer is backed by an array and is not read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is backed by an accessible char array. If this method returns @B_java#nio#CharBuffer#array_E@ and @B_java#nio#CharBuffer#arrayOffset_E@ methods may safely be invoked.", "history": "Added in API level 1", "FullName": "public final boolean hasArray ()"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this buffer An invocation of this method of the form", "history": "added in API level 1", "FullName": "public CharBuffer append (CharSequence csq, int start, int end)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this character buffer."]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character sequence to this buffer An invocation of this method of the form Depending on the specification of @B_java#nio#CharBuffer#toString_E@ method of a character buffer will return a subsequence whose content depends upon the buffer's position and limit.", "history": "Added in API level 1", "FullName": "public CharBuffer append (CharSequence csq)"}, "array()": {"Returns": [["char[]", "The array that backs this buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the char array that backs this buffer Modifications to this buffer's content will cause the returned array's content to be modified, and vice versa. Invoke the @B_java#nio#CharBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final char[] array ()"}, "compareTo(java.nio.CharBuffer)": {"Returns": [["int", "A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this buffer to another. Two char buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its corresponding buffer. Pairs of char elements are compared as if by invoking @B_java#lang#Character#compare_E@. A char buffer is not comparable to any other type of object.", "history": "Added in API level 1", "FullName": "public int compareTo (CharBuffer that)"}, "duplicate()": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new char buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer duplicate ()"}, "put(char)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char", "char: The char to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If this buffer's current position is not smaller than its limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes the given char into this buffer at the current position, and then increments the position.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer put (char c)"}, "chars()": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream of char values from this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream of int zero-extending the char values from this sequence. Any char which maps to a If the sequence is mutated while the stream is being read, the result is undefined.", "history": "Added in API level 24", "FullName": "public IntStream chars ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, this buffer is equal to the given object"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to which this buffer is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is equal to another object. Two char buffers are equal if, and only if, A char buffer is not equal to any other type of object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object ob)"}, "append(char)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char", "char: The 16-bit char to append"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified char to this buffer An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer append (char c)"}, "hashCode()": {"Returns": [["int", "The current hash code of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current hash code of this buffer. The hash code of a char buffer depends only upon its remaining elements; that is, upon the elements from Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this buffer An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer append (CharSequence csq, int start, int end)"}, "get()": {"Returns": [["char", "The char at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If the buffer's current position is not smaller than its limit"]], "SeeAlso": [], "Permissions": [], "Description": "Relative", "history": "Added in API level 1", "FullName": "public abstract char get ()"}, "wrap(char[],int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [["char[]", "char: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a char array into a buffer. The new buffer will be backed by the given char array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#CharBuffer#array_E@ will be the given array, and its @B_java#nio#CharBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static CharBuffer wrap (char[] array, int offset, int length)"}, "wrap(char[], int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [["char[]", "char: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a char array into a buffer. The new buffer will be backed by the given char array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#CharBuffer#array_E@ will be the given array, and its @B_java#nio#CharBuffer#arrayOffset_E@ will be zero.", "history": "added in API level 1", "FullName": "public static CharBuffer wrap (char[] array, int offset, int length)"}, "put(java.lang.String,int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#String_E@", "String: The string from which chars are to be read"], ["int", "int: The offset within the string of the first char to be read; must be non-negative and no larger than string.length()"], ["int", "int: The offset within the string of the last char to be read, plus one; must be non-negative and no larger than string.length()"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the start and end parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars from the given string into this buffer. If there are more chars to be copied from the string than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer put (String src, int start, int end)"}, "position(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new position value; must be non-negative and no larger than the current limit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's position. If the mark is defined and larger than the new position then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer position (int newPosition)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The specified string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing the characters in this buffer. The first character of the resulting string will be the character at this buffer's position, while the last character will be the character at index", "history": "Added in API level 1", "FullName": "public String toString ()"}, "put(char[], int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The array from which chars are to be read"], ["int", "int: The offset within the array of the first char to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of chars to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars into this buffer from the given source array. If there are more chars to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public CharBuffer put (char[] src, int offset, int length)"}, "put(java.nio.CharBuffer)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: The source buffer from which chars are to be read; must not be this buffer"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer for the remaining chars in the source buffer"], ["@B_java#lang#IllegalArgumentException_E@", "If the source buffer is this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the chars remaining in the given source buffer into this buffer. If there are more chars remaining in the source buffer than in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer put (CharBuffer src)"}, "length()": {"Returns": [["int", "The length of this character buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this character buffer. When viewed as a character sequence, the length of a character buffer is simply the number of characters between the position (inclusive) and the limit (exclusive); that is, it is equivalent to", "history": "Added in API level 1", "FullName": "public final int length ()"}, "wrap(java.lang.CharSequence)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new character buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which the new character buffer is to be created"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps a character sequence into a buffer. The content of the new, read-only buffer will be the content of the given character sequence. The new buffer's capacity and limit will be", "history": "Added in API level 1", "FullName": "public static CharBuffer wrap (CharSequence csq)"}, "limit(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new limit value; must be non-negative and no larger than this buffer's capacity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer limit (int newLimit)"}, "order()": {"Returns": [["@B_java#nio#ByteOrder_E@", "This buffer's byte order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this buffer's byte order. The byte order of a char buffer created by allocation or by wrapping an existing @B_java#nio#ByteOrder#nativeOrder_E@ of the underlying hardware. The byte order of a char buffer created as a", "history": "Added in API level 1", "FullName": "public abstract ByteOrder order ()"}, "subSequence(int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new character buffer"]], "Parameters": [["int", "int: The index, relative to the current position, of the first character in the subsequence; must be non-negative and no larger than remaining()"], ["int", "int: The index, relative to the current position, of the character following the last character in the subsequence; must be no smaller than start and no larger than remaining()"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on start and end do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character buffer that represents the specified subsequence of this buffer, relative to the current position. The new buffer will share this buffer's content; that is, if the content of this buffer is mutable then modifications to one buffer will cause the other to be modified. The new buffer's capacity will be that of this buffer, its position will be", "history": "Added in API level 1", "FullName": "public abstract CharBuffer subSequence (int start, int end)"}, "get(char[], int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The array into which chars are to be written"], ["int", "int: The offset within the array of the first char to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of chars to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length chars remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars from this buffer into the given destination array. If there are fewer chars remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public CharBuffer get (char[] dst, int offset, int length)"}, "put(char[],int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The array from which chars are to be read"], ["int", "int: The offset within the array of the first char to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of chars to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars into this buffer from the given source array. If there are more chars to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer put (char[] src, int offset, int length)"}, "get(char[],int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The array into which chars are to be written"], ["int", "int: The offset within the array of the first char to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of chars to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length chars remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars from this buffer into the given destination array. If there are fewer chars remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer get (char[] dst, int offset, int length)"}, "clear()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.", "history": "Added in API level 1", "FullName": "public Buffer clear ()"}, "flip()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or This method is often used in conjunction with the @B_java#nio#ByteBuffer#compact_E@ method when transferring data from one place to another.", "history": "Added in API level 1", "FullName": "public Buffer flip ()"}, "put(java.lang.String, int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#String_E@", "String: The string from which chars are to be read"], ["int", "int: The offset within the string of the first char to be read; must be non-negative and no larger than string.length()"], ["int", "int: The offset within the string of the last char to be read, plus one; must be non-negative and no larger than string.length()"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the start and end parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars from the given string into this buffer. If there are more chars to be copied from the string than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public CharBuffer put (String src, int start, int end)"}, "slice()": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new char buffer whose content is a shared subsequence of this buffer's content. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of chars remaining in this buffer, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer slice ()"}, "wrap(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new character buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which the new character buffer is to be created"], ["int", "int: The index of the first character to be used; must be non-negative and no larger than csq.length(). The new buffer's position will be set to this value."], ["int", "int: The index of the character following the last character to be used; must be no smaller than start and no larger than csq.length(). The new buffer's limit will be set to this value."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the start and end parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a character sequence into a buffer. The content of the new, read-only buffer will be the content of the given character sequence. The buffer's capacity will be", "history": "added in API level 1", "FullName": "public static CharBuffer wrap (CharSequence csq, int start, int end)"}, "arrayOffset()": {"Returns": [["int", "The offset within this buffer's array of the first element of the buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset within this buffer's backing array of the first element of the buffer If this buffer is backed by an array then buffer position Invoke the @B_java#nio#CharBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final int arrayOffset ()"}, "asReadOnlyBuffer()": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new, read-only char buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, read-only char buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer; the new buffer itself, however, will be read-only and will not allow the shared content to be modified. The two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. If this buffer is itself read-only then this method behaves in exactly the same way as the @B_java#nio#CharBuffer#duplicate_E@ method.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer asReadOnlyBuffer ()"}, "reset()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this buffer's position to the previously-marked position. Invoking this method neither changes nor discards the mark's value.", "history": "Added in API level 1", "FullName": "public Buffer reset ()"}, "put(int,char)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the char will be written"], ["char", "char: The char value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given char into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer put (int index, char c)"}, "rewind()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or", "history": "Added in API level 1", "FullName": "public Buffer rewind ()"}, "wrap(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new character buffer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which the new character buffer is to be created"], ["int", "int: The index of the first character to be used; must be non-negative and no larger than csq.length(). The new buffer's position will be set to this value."], ["int", "int: The index of the character following the last character to be used; must be no smaller than start and no larger than csq.length(). The new buffer's limit will be set to this value."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the start and end parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a character sequence into a buffer. The content of the new, read-only buffer will be the content of the given character sequence. The buffer's capacity will be", "history": "Added in API level 1", "FullName": "public static CharBuffer wrap (CharSequence csq, int start, int end)"}, "compact()": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Compacts this buffer The chars between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the char at index The buffer's position is set to the number of chars copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative", "history": "Added in API level 1", "FullName": "public abstract CharBuffer compact ()"}, "put(int, char)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the char will be written"], ["char", "char: The char value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given char into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract CharBuffer put (int index, char c)"}, "charAt(int)": {"Returns": [["char", "The character at index position() + index"]], "Parameters": [["int", "int: The index of the character to be read, relative to the position; must be non-negative and smaller than remaining()"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on index do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the character at the given index relative to the current position.", "history": "Added in API level 1", "FullName": "public final char charAt (int index)"}, "read(java.nio.CharBuffer)": {"Returns": [["int", "The number of characters added to the buffer, or -1 if this source of characters is at its end"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: the buffer to read characters into"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "if target is null"], ["@B_java#nio#ReadOnlyBufferException_E@", "if target is a read only buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed.", "history": "Added in API level 1", "FullName": "public int read (CharBuffer target)"}, "allocate(int)": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [["int", "int: The new buffer's capacity, in chars"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the capacity is a negative integer"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new char buffer. The new buffer's position will be zero, its limit will be its capacity, its mark will be undefined, and each of its elements will be initialized to zero. It will have a @B_java#nio#CharBuffer#array_E@, and its @B_java#nio#CharBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static CharBuffer allocate (int capacity)"}, "put(char[])": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The source array"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the entire content of the given source char array into this buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final CharBuffer put (char[] src)"}, "get(int)": {"Returns": [["char", "The char at the given index"]], "Parameters": [["int", "int: The index from which the char will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute", "history": "Added in API level 1", "FullName": "public abstract char get (int index)"}, "wrap(char[])": {"Returns": [["@B_java#nio#CharBuffer_E@", "The new char buffer"]], "Parameters": [["char[]", "char: The array that will back this buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps a char array into a buffer. The new buffer will be backed by the given char array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity and limit will be @B_java#nio#CharBuffer#array_E@ will be the given array, and its @B_java#nio#CharBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static CharBuffer wrap (char[] array)"}, "get(char[])": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["char[]", "char: The destination array"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length chars remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers chars from this buffer into the given destination array. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public CharBuffer get (char[] dst)"}, "put(java.lang.String)": {"Returns": [["@B_java#nio#CharBuffer_E@", "This buffer"]], "Parameters": [["@B_java#lang#String_E@", "String: The source string"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the entire content of the given source string into this buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final CharBuffer put (String src)"}, "mark()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's mark at its position.", "history": "Added in API level 1", "FullName": "public Buffer mark ()"}}, "Inheritance": ["@B_java#nio#Buffer_E@"], "ClassName": "java.nio.CharBuffer", "ClassDesc": "A char buffer. This class defines four categories of operations upon char buffers: Absolute and relative @B_java#nio#CharBuffer#get_E@ and @B_java#nio#CharBuffer#put_E@ methods that read and write single chars; Relative @B_java#nio#CharBuffer#get_E@ methods that transfer contiguous sequences of chars from this buffer into an array; and Relative @B_java#nio#CharBuffer#put_E@ methods that transfer contiguous sequences of chars from a char array, a string, or some other char buffer into this buffer; and Methods for @B_java#nio#CharBuffer#compact_E@, @B_java#nio#CharBuffer#duplicate_E@, and @B_java#nio#CharBuffer#slice_E@ a char buffer. Char buffers can be created either by @B_java#nio#CharBuffer#allocate_E@, which allocates space for the buffer's content, by @B_java#nio#CharBuffer#wrap_E@ an existing char array or string into a buffer, or by creating a Like a byte buffer, a char buffer is either @B_java#nio#CharBuffer#isDirect_E@ method. This class implements the @B_java#lang#CharSequence_E@ interface so that character buffers may be used wherever character sequences are accepted, for example in the regular-expression package Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained. The sequence of statements"}