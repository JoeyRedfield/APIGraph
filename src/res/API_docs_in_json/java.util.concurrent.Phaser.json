{"Functions": {"forceTermination()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forces this phaser to enter termination state. Counts of registered parties are unaffected. If this phaser is a member of a tiered set of phasers, then all of the phasers in the set are terminated. If this phaser is already terminated, this method has no effect. This method may be useful for coordinating recovery after one or more tasks encounter unexpected exceptions.", "history": "Added in API level 21", "FullName": "public void forceTermination ()"}, "getRegisteredParties()": {"Returns": [["int", "the number of parties"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of parties registered at this phaser.", "history": "Added in API level 21", "FullName": "public int getRegisteredParties ()"}, "onAdvance(int,int)": {"Returns": [["boolean", "true if this phaser should terminate"]], "Parameters": [["int", "int: the current phase number on entry to this method, before this phaser is advanced"], ["int", "int: the current number of registered parties"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overridable method to perform an action upon impending phase advance, and to control termination. This method is invoked upon arrival of the party advancing this phaser (when all other waiting parties are dormant). If this method returns true, this phaser will be set to a final termination state upon advance, and subsequent calls to @B_java#util#concurrent#Phaser#isTerminated_E@ will return true. Any (unchecked) Exception or Error thrown by an invocation of this method is propagated to the party attempting to advance this phaser, in which case no advance occurs. The arguments to this method provide the state of the phaser prevailing for the current transition. The effects of invoking arrival, registration, and waiting methods on this phaser from within onAdvance are unspecified and should not be relied on. If this phaser is a member of a tiered set of phasers, then onAdvance is invoked only for its root phaser on each advance. To support the most common use cases, the default implementation of this method returns true when the number of registered parties has become zero as the result of a party invoking arriveAndDeregister. You can disable this behavior, thus enabling continuation upon future registrations, by overriding this method to always return false:", "history": "Added in API level 21", "FullName": "protected boolean onAdvance (int phase, int registeredParties)"}, "Phaser()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new phaser with no initially registered parties, no parent, and initial phase number 0. Any thread using this phaser will need to first register for it.", "history": "Added in API level 21", "FullName": "public Phaser ()"}, "isTerminated()": {"Returns": [["boolean", "true if this phaser has been terminated"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this phaser has been terminated.", "history": "Added in API level 21", "FullName": "public boolean isTerminated ()"}, "getParent()": {"Returns": [["@B_java#util#concurrent#Phaser_E@", "the parent of this phaser, or null if none"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent of this phaser, or null if none.", "history": "Added in API level 21", "FullName": "public Phaser getParent ()"}, "Phaser(int)": {"Returns": [], "Parameters": [["int", "int: the number of parties required to advance to the next phase"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties less than zero or greater than the maximum number of parties supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new phaser with the given number of registered unarrived parties, no parent, and initial phase number 0.", "history": "Added in API level 21", "FullName": "public Phaser (int parties)"}, "getArrivedParties()": {"Returns": [["int", "the number of arrived parties"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of registered parties that have arrived at the current phase of this phaser. If this phaser has terminated, the returned value is meaningless and arbitrary.", "history": "Added in API level 21", "FullName": "public int getArrivedParties ()"}, "Phaser(java.util.concurrent.Phaser, int)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Phaser_E@", "Phaser: the parent phaser"], ["int", "int: the number of parties required to advance to the next phase"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties less than zero or greater than the maximum number of parties supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new phaser with the given parent and number of registered unarrived parties. When the given parent is non-null and the given number of parties is greater than zero, this child phaser is registered with its parent.", "history": "added in API level 21", "FullName": "public Phaser (Phaser parent, int parties)"}, "arriveAndDeregister()": {"Returns": [["int", "the arrival phase number, or a negative value if terminated"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not terminated and the number of registered or unarrived parties would become negative"]], "SeeAlso": [], "Permissions": [], "Description": "Arrives at this phaser and deregisters from it without waiting for others to arrive. Deregistration reduces the number of parties required to advance in future phases. If this phaser has a parent, and deregistration causes this phaser to have zero parties, this phaser is also deregistered from its parent. It is a usage error for an unregistered party to invoke this method. However, this error may result in an IllegalStateException only upon some subsequent operation on this phaser, if ever.", "history": "Added in API level 21", "FullName": "public int arriveAndDeregister ()"}, "register()": {"Returns": [["int", "the arrival phase number to which this registration applied. If this value is negative, then this phaser has terminated, in which case registration has no effect."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if attempting to register more than the maximum supported number of parties"]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new unarrived party to this phaser. If an ongoing invocation of @B_java#util#concurrent#Phaser#onAdvance_E@ is in progress, this method may await its completion before returning. If this phaser has a parent, and this phaser previously had no registered parties, this child phaser is also registered with its parent. If this phaser is terminated, the attempt to register has no effect, and a negative value is returned.", "history": "Added in API level 21", "FullName": "public int register ()"}, "arriveAndAwaitAdvance()": {"Returns": [["int", "the arrival phase number, or the (negative) current phase if terminated"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not terminated and the number of unarrived parties would become negative"]], "SeeAlso": [], "Permissions": [], "Description": "Arrives at this phaser and awaits others. Equivalent in effect to awaitAdvance(arrive()). If you need to await with interruption or timeout, you can arrange this with an analogous construction using one of the other forms of the awaitAdvance method. If instead you need to deregister upon arrival, use awaitAdvance(arriveAndDeregister()). It is a usage error for an unregistered party to invoke this method. However, this error may result in an IllegalStateException only upon some subsequent operation on this phaser, if ever.", "history": "Added in API level 21", "FullName": "public int arriveAndAwaitAdvance ()"}, "arrive()": {"Returns": [["int", "the arrival phase number, or a negative value if terminated"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if not terminated and the number of unarrived parties would become negative"]], "SeeAlso": [], "Permissions": [], "Description": "Arrives at this phaser, without waiting for others to arrive. It is a usage error for an unregistered party to invoke this method. However, this error may result in an IllegalStateException only upon some subsequent operation on this phaser, if ever.", "history": "Added in API level 21", "FullName": "public int arrive ()"}, "onAdvance(int, int)": {"Returns": [["boolean", "true if this phaser should terminate"]], "Parameters": [["int", "int: the current phase number on entry to this method, before this phaser is advanced"], ["int", "int: the current number of registered parties"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overridable method to perform an action upon impending phase advance, and to control termination. This method is invoked upon arrival of the party advancing this phaser (when all other waiting parties are dormant). If this method returns true, this phaser will be set to a final termination state upon advance, and subsequent calls to @B_java#util#concurrent#Phaser#isTerminated_E@ will return true. Any (unchecked) Exception or Error thrown by an invocation of this method is propagated to the party attempting to advance this phaser, in which case no advance occurs. The arguments to this method provide the state of the phaser prevailing for the current transition. The effects of invoking arrival, registration, and waiting methods on this phaser from within onAdvance are unspecified and should not be relied on. If this phaser is a member of a tiered set of phasers, then onAdvance is invoked only for its root phaser on each advance. To support the most common use cases, the default implementation of this method returns true when the number of registered parties has become zero as the result of a party invoking arriveAndDeregister. You can disable this behavior, thus enabling continuation upon future registrations, by overriding this method to always return false:", "history": "added in API level 21", "FullName": "protected boolean onAdvance (int phase, int registeredParties)"}, "bulkRegister(int)": {"Returns": [["int", "the arrival phase number to which this registration applied. If this value is negative, then this phaser has terminated, in which case registration has no effect."]], "Parameters": [["int", "int: the number of additional parties required to advance to the next phase"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if attempting to register more than the maximum supported number of parties"], ["@B_java#lang#IllegalArgumentException_E@", "if parties < 0"]], "SeeAlso": [], "Permissions": [], "Description": "Adds the given number of new unarrived parties to this phaser. If an ongoing invocation of @B_java#util#concurrent#Phaser#onAdvance_E@ is in progress, this method may await its completion before returning. If this phaser has a parent, and the given number of parties is greater than zero, and this phaser previously had no registered parties, this child phaser is also registered with its parent. If this phaser is terminated, the attempt to register has no effect, and a negative value is returned.", "history": "Added in API level 21", "FullName": "public int bulkRegister (int parties)"}, "getPhase()": {"Returns": [["int", "the phase number, or a negative value if terminated"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current phase number. The maximum phase number is Integer.MAX_VALUE, after which it restarts at zero. Upon termination, the phase number is negative, in which case the prevailing phase prior to termination may be obtained via getPhase() + Integer.MIN_VALUE.", "history": "Added in API level 21", "FullName": "public final int getPhase ()"}, "getRoot()": {"Returns": [["@B_java#util#concurrent#Phaser_E@", "the root ancestor of this phaser"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the root ancestor of this phaser, which is the same as this phaser if it has no parent.", "history": "Added in API level 21", "FullName": "public Phaser getRoot ()"}, "awaitAdvanceInterruptibly(int,long,java.util.concurrent.TimeUnit)": {"Returns": [["int", "the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"]], "Parameters": [["int", "int: an arrival phase number, or negative value if terminated; this argument is normally the value returned by a previous call to arrive or arriveAndDeregister."], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if thread interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if timed out while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Awaits the phase of this phaser to advance from the given phase value or the given timeout to elapse, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.", "history": "Added in API level 21", "FullName": "public int awaitAdvanceInterruptibly (int phase, long timeout, TimeUnit unit)"}, "Phaser(java.util.concurrent.Phaser)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Phaser_E@", "Phaser: the parent phaser"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#Phaser#Phaser_E@.", "history": "Added in API level 21", "FullName": "public Phaser (Phaser parent)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this phaser, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this phaser, as well as its state. The state, in brackets, includes the String \"phase = \" followed by the phase number, \"parties = \" followed by the number of registered parties, and \"arrived = \" followed by the number of arrived parties.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "Phaser(java.util.concurrent.Phaser,int)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Phaser_E@", "Phaser: the parent phaser"], ["int", "int: the number of parties required to advance to the next phase"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if parties less than zero or greater than the maximum number of parties supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new phaser with the given parent and number of registered unarrived parties. When the given parent is non-null and the given number of parties is greater than zero, this child phaser is registered with its parent.", "history": "Added in API level 21", "FullName": "public Phaser (Phaser parent, int parties)"}, "getUnarrivedParties()": {"Returns": [["int", "the number of unarrived parties"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of registered parties that have not yet arrived at the current phase of this phaser. If this phaser has terminated, the returned value is meaningless and arbitrary.", "history": "Added in API level 21", "FullName": "public int getUnarrivedParties ()"}, "awaitAdvanceInterruptibly(int)": {"Returns": [["int", "the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"]], "Parameters": [["int", "int: an arrival phase number, or negative value if terminated; this argument is normally the value returned by a previous call to arrive or arriveAndDeregister."]], "Throws": [["@B_java#lang#InterruptedException_E@", "if thread interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Awaits the phase of this phaser to advance from the given phase value, throwing InterruptedException if interrupted while waiting, or returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.", "history": "Added in API level 21", "FullName": "public int awaitAdvanceInterruptibly (int phase)"}, "awaitAdvance(int)": {"Returns": [["int", "the next arrival phase number, or the argument if it is negative, or the (negative) current phase if terminated"]], "Parameters": [["int", "int: an arrival phase number, or negative value if terminated; this argument is normally the value returned by a previous call to arrive or arriveAndDeregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Awaits the phase of this phaser to advance from the given phase value, returning immediately if the current phase is not equal to the given phase value or this phaser is terminated.", "history": "Added in API level 21", "FullName": "public int awaitAdvance (int phase)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.Phaser", "ClassDesc": "A reusable synchronization barrier, similar in functionality to @B_java#util#concurrent#CyclicBarrier_E@ and @B_java#util#concurrent#CountDownLatch_E@ but supporting more flexible usage. registered to synchronize on a phaser may vary over time. Tasks may be registered at any time (using methods @B_java#util#concurrent#Phaser#register_E@, @B_java#util#concurrent#Phaser#bulkRegister_E@, or forms of constructors establishing initial numbers of parties), and optionally deregistered upon any arrival (using @B_java#util#concurrent#Phaser#arriveAndDeregister_E@). As is the case with most basic synchronization constructs, registration and deregistration affect only internal counts; they do not establish any further internal bookkeeping, so tasks cannot query whether they are registered. (However, you can introduce such bookkeeping by subclassing this class.) CyclicBarrier, a Phaser may be repeatedly awaited. Method @B_java#util#concurrent#Phaser#arriveAndAwaitAdvance_E@ has effect analogous to @B_java#util#concurrent#CyclicBarrier#await_E@. Each generation of a phaser has an associated phase number. The phase number starts at zero, and advances when all parties arrive at the phaser, wrapping around to zero after reaching Integer.MAX_VALUE. The use of phase numbers enables independent control of actions upon arrival at a phaser and upon awaiting others, via two kinds of methods that may be invoked by any registered party: @B_java#util#concurrent#Phaser#arrive_E@ and @B_java#util#concurrent#Phaser#arriveAndDeregister_E@ record arrival. These methods do not block, but return an associated arrival phase number; that is, the phase number of the phaser to which the arrival applied. When the final party for a given phase arrives, an optional action is performed and the phase advances. These actions are performed by the party triggering a phase advance, and are arranged by overriding method @B_java#util#concurrent#Phaser#onAdvance_E@, which also controls termination. Overriding this method is similar to, but more flexible than, providing a barrier action to a CyclicBarrier. @B_java#util#concurrent#Phaser#awaitAdvance_E@ requires an argument indicating an arrival phase number, and returns when the phaser advances to (or is already at) a different phase. Unlike similar constructions using CyclicBarrier, method awaitAdvance continues to wait even if the waiting thread is interrupted. Interruptible and timeout versions are also available, but exceptions encountered while tasks wait interruptibly or with timeout do not change the state of the phaser. If necessary, you can perform any associated recovery within handlers of those exceptions, often after invoking forceTermination. Phasers may also be used by tasks executing in a @B_java#util#concurrent#ForkJoinPool_E@. Progress is ensured if the pool's parallelismLevel can accommodate the maximum number of simultaneously blocked parties. termination state, that may be checked using method @B_java#util#concurrent#Phaser#isTerminated_E@. Upon termination, all synchronization methods immediately return without waiting for advance, as indicated by a negative return value. Similarly, attempts to register upon termination have no effect. Termination is triggered when an invocation of onAdvance returns true. The default implementation returns true if a deregistration has caused the number of registered parties to become zero. As illustrated below, when phasers control actions with a fixed number of iterations, it is often convenient to override this method to cause termination when the current phase number reaches a threshold. Method @B_java#util#concurrent#Phaser#forceTermination_E@ is also available to abruptly release waiting threads and allow them to terminate. tiered (i.e., constructed in tree structures) to reduce contention. Phasers with large numbers of parties that would otherwise experience heavy synchronization contention costs may instead be set up so that groups of sub-phasers share a common parent. This may greatly increase throughput even though it incurs greater per-operation overhead. In a tree of tiered phasers, registration and deregistration of child phasers with their parent are managed automatically. Whenever the number of registered parties of a child phaser becomes non-zero (as established in the @B_java#util#concurrent#Phaser#Phaser_E@ constructor, @B_java#util#concurrent#Phaser#register_E@, or @B_java#util#concurrent#Phaser#bulkRegister_E@), the child phaser is registered with its parent. Whenever the number of registered parties becomes zero as the result of an invocation of @B_java#util#concurrent#Phaser#arriveAndDeregister_E@, the child phaser is deregistered from its parent. @B_java#util#concurrent#Phaser#getRegisteredParties_E@ parties in total, of which @B_java#util#concurrent#Phaser#getArrivedParties_E@ have arrived at the current phase (@B_java#util#concurrent#Phaser#getPhase_E@). When the remaining (@B_java#util#concurrent#Phaser#getUnarrivedParties_E@) parties arrive, the phase advances. The values returned by these methods may reflect transient states and so are not in general useful for synchronization control. Method @B_java#util#concurrent#Phaser#toString_E@ returns snapshots of these state queries in a form convenient for informal monitoring. A Phaser may be used instead of a CountDownLatch to control a one-shot action serving a variable number of parties. The typical idiom is for the method setting this up to first register, then start the actions, then deregister, as in: One way to cause a set of threads to repeatedly perform actions for a given number of iterations is to override onAdvance: Related constructions may be used to await particular phase numbers in contexts where you are sure that the phase will never wrap around Integer.MAX_VALUE. For example: To create a set of n tasks using a tree of phasers, you could use code of the following form, assuming a Task class with a constructor accepting a Phaser that it registers with upon construction. After invocation of build(new Task[n], 0, n, new Phaser()), these tasks could then be started, for example by submitting to a pool: TASKS_PER_PHASER depends mainly on expected synchronization rates. A value as low as four may be appropriate for extremely small per-phase task bodies (thus high rates), or up to hundreds for extremely large ones. IllegalStateException. However, you can and should create tiered phasers to accommodate arbitrarily large sets of participants."}