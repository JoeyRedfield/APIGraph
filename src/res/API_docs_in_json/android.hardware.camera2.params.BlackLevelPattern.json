{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#params#BlackLevelPattern_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#CameraCharacteristics_E@"], "Permissions": [], "Description": "Return this @B_android#hardware#camera2#params#BlackLevelPattern_E@ as a string representation. \"BlackLevelPattern([%d, %d], [%d, %d])\", where each %d represents one black level offset of a color channel. The values are in the same order as channels listed for the CFA layout key (see @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_COLOR_FILTER_ARRANGEMENT_E@). A @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME_E@ camera only has one channel. As a result, the returned string will contain 4 identical values.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getOffsetForIndex(int,int)": {"Returns": [["int", "a color channel offset."]], "Parameters": [["int", "int: the column index in the the raw pixel array."], ["int", "int: the row index in the raw pixel array."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if a column or row given is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Return the color channel offset for a given index into the array of raw pixel values.", "history": "Added in API level 21", "FullName": "public int getOffsetForIndex (int column, int row)"}, "getOffsetForIndex(int, int)": {"Returns": [["int", "a color channel offset."]], "Parameters": [["int", "int: the column index in the the raw pixel array."], ["int", "int: the row index in the raw pixel array."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if a column or row given is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Return the color channel offset for a given index into the array of raw pixel values.", "history": "added in API level 21", "FullName": "public int getOffsetForIndex (int column, int row)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#BlackLevelPattern_E@ is equal to another @B_android#hardware#camera2#params#BlackLevelPattern_E@. Two vectors are only equal if and only if each of the respective elements is equal.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "copyTo(int[], int)": {"Returns": [], "Parameters": [["int[]", "int: an array big enough to hold at least @B_android#hardware#camera2#params#BlackLevelPattern#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the offset is invalid."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the destination vector is too small."], ["@B_java#lang#NullPointerException_E@", "if the destination is null."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the ColorChannel offsets into the destination vector. Offsets are given in row-column scan order for a given 2x2 color pattern.", "history": "added in API level 21", "FullName": "public void copyTo (int[] destination, int offset)"}, "copyTo(int[],int)": {"Returns": [], "Parameters": [["int[]", "int: an array big enough to hold at least @B_android#hardware#camera2#params#BlackLevelPattern#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the offset is invalid."], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if the destination vector is too small."], ["@B_java#lang#NullPointerException_E@", "if the destination is null."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the ColorChannel offsets into the destination vector. Offsets are given in row-column scan order for a given 2x2 color pattern.", "history": "Added in API level 21", "FullName": "public void copyTo (int[] destination, int offset)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.BlackLevelPattern", "ClassDesc": "Immutable class to store a 4-element vector of integers corresponding to a 2x2 pattern of color channel offsets used for the black level offsets of each color channel. For a camera device with @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MONOCHROME_E@ capability, all 4 elements of the pattern will have the same value."}