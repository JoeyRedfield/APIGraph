{"Functions": {"getCreatorUserHandle()": {"Returns": [["@B_android#os#UserHandle_E@", "The user handle of the PendingIntent, or null if there is none associated with it."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the user handle of the application that created this PendingIntent, that is the user under which you will actually be sending the Intent. The returned UserHandle is supplied by the system, so that an application can not spoof its user. See @B_android#os#Process#myUserHandle_E@ for more explanation of user handles.", "history": "Added in API level 17", "FullName": "public UserHandle getCreatorUserHandle ()"}, "readIntentSenderOrNullFromParcel(android.os.Parcel)": {"Returns": [["@B_android#content#IntentSender_E@", "Returns the Messenger read from the Parcel, or null if null had been written."]], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel containing the written Messenger."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for reading either a Messenger or null pointer from a Parcel. You must have previously written the Messenger with @B_android#content#IntentSender#writeIntentSenderOrNullToParcel_E@.", "history": "Added in API level 4", "FullName": "public static IntentSender readIntentSenderOrNullFromParcel (Parcel in)"}, "writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#content#IntentSender_E@", "IntentSender: The IntentSender to write, or null."], ["@B_android#os#Parcel_E@", "Parcel: Where to write the IntentSender."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience function for writing either a IntentSender or null pointer to a Parcel. You must use this with @B_android#content#IntentSender#readIntentSenderOrNullFromParcel_E@ for later reading it.", "history": "Added in API level 4", "FullName": "public static void writeIntentSenderOrNullToParcel (IntentSender sender, Parcel out)"}, "getCreatorPackage()": {"Returns": [["@B_java#lang#String_E@", "The package name of the PendingIntent, or null if there is none associated with it."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the package name of the application that created this IntentSender, that is the identity under which you will actually be sending the Intent. The returned string is supplied by the system, so that an application can not spoof its package.", "history": "Added in API level 17", "FullName": "public String getCreatorPackage ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 4", "FullName": "public int describeContents ()"}, "getTargetPackage()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renamed to @B_android#content#IntentSender#getCreatorPackage_E@.", "history": "Added in API level 9 Deprecated in API level 17", "FullName": "public String getTargetPackage ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 4", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Comparison operator on two IntentSender objects, such that true is returned then they both represent the same operation from the same package.", "history": "Added in API level 4", "FullName": "public boolean equals (Object otherObj)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 4", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getCreatorUid()": {"Returns": [["int", "The uid of the PendingIntent, or -1 if there is none associated with it."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the uid of the application that created this PendingIntent, that is the identity under which you will actually be sending the Intent. The returned integer is supplied by the system, so that an application can not spoof its uid.", "history": "Added in API level 17", "FullName": "public int getCreatorUid ()"}, "sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context of the caller. This may be null if intent is also null."], ["int", "int: Result code to supply back to the IntentSender's target."], ["@B_android#content#Intent_E@", "Intent: Additional Intent data. See @B_android#content#Intent#fillIn_E@ for information on how this is applied to the original Intent. Use null to not modify the original Intent."], ["@B_android#content#IntentSender#OnFinished_E@", "IntentSender.OnFinished: The object to call back on when the send has completed, or null for no callback."], ["@B_android#os#Handler_E@", "Handler: Handler identifying the thread on which the callback should happen. If null, the callback will happen from the thread pool of the process."]], "Throws": [["@B_android#content#IntentSender#SendIntentException_E@", "Throws CanceledIntentException if the IntentSender is no longer allowing more intents to be sent through it."]], "SeeAlso": [], "Permissions": [], "Description": "Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed.", "history": "Added in API level 4", "FullName": "public void sendIntent (Context context, int code, Intent intent, IntentSender.OnFinished onFinished, Handler handler)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 4", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender.OnFinished,android.os.Handler,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context of the caller. This may be null if intent is also null."], ["int", "int: Result code to supply back to the IntentSender's target."], ["@B_android#content#Intent_E@", "Intent: Additional Intent data. See @B_android#content#Intent#fillIn_E@ for information on how this is applied to the original Intent. Use null to not modify the original Intent."], ["@B_android#content#IntentSender#OnFinished_E@", "IntentSender.OnFinished: The object to call back on when the send has completed, or null for no callback."], ["@B_android#os#Handler_E@", "Handler: Handler identifying the thread on which the callback should happen. If null, the callback will happen from the thread pool of the process."], ["@B_java#lang#String_E@", "String: Name of permission that a recipient of the PendingIntent is required to hold. This is only valid for broadcast intents, and corresponds to the permission argument in @B_android#content#Context#sendBroadcast_E@. If null, no permission is required."]], "Throws": [["@B_android#content#IntentSender#SendIntentException_E@", "Throws CanceledIntentException if the IntentSender is no longer allowing more intents to be sent through it."]], "SeeAlso": [], "Permissions": [], "Description": "Perform the operation associated with this IntentSender, allowing the caller to specify information about the Intent to use and be notified when the send has completed.", "history": "Added in API level 14", "FullName": "public void sendIntent (Context context, int code, Intent intent, IntentSender.OnFinished onFinished, Handler handler, String requiredPermission)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 4", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.content.IntentSender", "ClassDesc": "A description of an Intent and target action to perform with it. The returned object can be handed to other applications so that they can perform the action you described on your behalf at a later time. By giving a IntentSender to another application, you are granting it the right to perform the operation you have specified as if the other application was yourself (with the same permissions and identity). As such, you should be careful about how you build the IntentSender: often, for example, the base Intent you supply will have the component name explicitly set to one of your own components, to ensure it is ultimately sent there and nowhere else. A IntentSender itself is simply a reference to a token maintained by the system describing the original data used to retrieve it. This means that, even if its owning application's process is killed, the IntentSender itself will remain usable from other processes that have been given it. If the creating application later re-retrieves the same kind of IntentSender (same operation, same Intent action, data, categories, and components, and same flags), it will receive a IntentSender representing the same token if that is still valid. Instances of this class can not be made directly, but rather must be created from an existing @B_android#app#PendingIntent_E@ with @B_android#app#PendingIntent#getIntentSender_E@."}