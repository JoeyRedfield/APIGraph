{"Functions": {"isTokenChar(char)": {"Returns": [["", "true if the character is a valid token start, false otherwise"]], "Parameters": [["char", "the character to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a character is a valid token character. Whitespace, control characters, and HTTP separators are not valid token characters. The HTTP specification (RFC 2616, section 2.2) defines tokens only for the US-ASCII character set, this method extends the definition to other character sets.", "history": "Added in API level 1", "FullName": "protected boolean isTokenChar (char ch)"}, "hasNext()": {"Returns": [["", "true if there is another token, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether there is another token in this iteration.", "history": "Added in API level 1", "FullName": "public boolean hasNext ()"}, "next()": {"Returns": [["", "the next token in this iteration"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more tokens"], ["@B_org#apache#http#ParseException_E@", "if an invalid header value is encountered"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token. Same as @B_org#apache#http#message#BasicTokenIterator#nextToken_E@, but with generic return type.", "history": "Added in API level 1", "FullName": "public final Object next ()"}, "BasicTokenIterator(org.apache.http.HeaderIterator)": {"Returns": [], "Parameters": [["@B_org#apache#http#HeaderIterator_E@", "the iterator for the headers to tokenize"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of @B_org#apache#http#message#BasicTokenIterator_E@.", "history": "Added in API level 1", "FullName": "public BasicTokenIterator (HeaderIterator headerIterator)"}, "isTokenSeparator(char)": {"Returns": [["", "true if the character is a token separator, false otherwise"]], "Parameters": [["char", "the character to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a character is a token separator. RFC 2616, section 2.1 defines comma as the separator for", "history": "Added in API level 1", "FullName": "protected boolean isTokenSeparator (char ch)"}, "findNext(int)": {"Returns": [["", "the position after the found token in the current header, or negative if there was no next token"]], "Parameters": [["int", "the position in the current header at which to start the search, -1 to search in the first header"]], "Throws": [["@B_org#apache#http#ParseException_E@", "if an invalid header value is encountered"]], "SeeAlso": [], "Permissions": [], "Description": "Determines the next token. If found, the token is stored in @B_org#apache#http#message#BasicTokenIterator#currentToken_E@. The return value indicates the position after the token in @B_org#apache#http#message#BasicTokenIterator#currentHeader_E@. If necessary, the next header will be obtained from @B_org#apache#http#message#BasicTokenIterator#headerIt_E@. If not found, @B_org#apache#http#message#BasicTokenIterator#currentToken_E@ is set to null.", "history": "Added in API level 1", "FullName": "protected int findNext (int from)"}, "nextToken()": {"Returns": [["", "the next token in this iteration"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the iteration is already over"], ["@B_org#apache#http#ParseException_E@", "if an invalid header value is encountered"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the next token from this iteration.", "history": "Added in API level 1", "FullName": "public String nextToken ()"}, "findTokenEnd(int)": {"Returns": [["", "the position after the last character of the token. The behavior is undefined if from does not point to a token character in the current header value."]], "Parameters": [["int", "the position of the first character of the token"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines the ending position of the current token. This method will not leave the current header value, since the end of the header value is a token boundary.", "history": "Added in API level 1", "FullName": "protected int findTokenEnd (int from)"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "Removing tokens is not supported.", "history": "Added in API level 1", "FullName": "public final void remove ()"}, "isHttpSeparator(char)": {"Returns": [["", "true if the character is an HTTP separator"]], "Parameters": [["char", "the character to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a character is an HTTP separator. The implementation in this class checks only for the HTTP separators defined in RFC 2616, section 2.2. If you need to detect other separators beyond the US-ASCII character set, override this method.", "history": "Added in API level 1", "FullName": "protected boolean isHttpSeparator (char ch)"}, "findTokenSeparator(int)": {"Returns": [["", "the position of a token separator in the current header, or at the end"]], "Parameters": [["int", "the position in the current header at which to start the search"]], "Throws": [["@B_org#apache#http#ParseException_E@", "if a new token is found before a token separator. RFC 2616, section 2.1 explicitly requires a comma between tokens for #."]], "SeeAlso": [], "Permissions": [], "Description": "Determines the position of the next token separator. Because of multi-header joining rules, the end of a header value is a token separator. This method does therefore not need to iterate over headers.", "history": "Added in API level 1", "FullName": "protected int findTokenSeparator (int from)"}, "isWhitespace(char)": {"Returns": [["", "true if the character is whitespace, false otherwise"]], "Parameters": [["char", "the character to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether a character is a whitespace character. RFC 2616, section 2.2 defines space and horizontal tab as whitespace. The optional preceeding line break is irrelevant, since header continuation is handled transparently when parsing messages.", "history": "Added in API level 1", "FullName": "protected boolean isWhitespace (char ch)"}, "createToken(java.lang.String, int, int)": {"Returns": [["", "a string representing the token identified by the arguments"]], "Parameters": [["@B_java#lang#String_E@", "the full header value from which to create a token"], ["int", "the index of the first token character"], ["int", "the index after the last token character"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new token to be returned. Called from @B_org#apache#http#message#BasicTokenIterator#findNext_E@ after the token is identified. The default implementation simply calls @B_java#lang#String#substring_E@. If header values are significantly longer than tokens, and some tokens are permanently referenced by the application, there can be problems with garbage collection. A substring will hold a reference to the full characters of the original string and therefore occupies more memory than might be expected. To avoid this, override this method and create a new string instead of a substring.", "history": "Added in API level 1", "FullName": "protected String createToken (String value, int start, int end)"}, "findTokenStart(int)": {"Returns": [["", "the position of the token start in the current header, negative if no token start could be found"]], "Parameters": [["int", "the position in the current header at which to start the search"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines the starting position of the next token. This method will iterate over headers if necessary.", "history": "Added in API level 1", "FullName": "protected int findTokenStart (int from)"}}, "Inheritance": [], "ClassName": "org.apache.http.message.BasicTokenIterator", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Basic implementation of a @B_org#apache#http#TokenIterator_E@. This implementation parses"}