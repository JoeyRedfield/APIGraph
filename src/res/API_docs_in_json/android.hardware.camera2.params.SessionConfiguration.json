{"Functions": {"getInputConfiguration()": {"Returns": [["@B_android#hardware#camera2#params#InputConfiguration_E@", "The capture session input configuration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#hardware#camera2#params#InputConfiguration_E@.", "history": "Added in API level 28", "FullName": "public InputConfiguration getInputConfiguration ()"}, "SessionConfiguration(int,java.util.List<android.hardware.camera2.params.OutputConfiguration>,java.util.concurrent.Executor,android.hardware.camera2.CameraCaptureSession.StateCallback)": {"Returns": [], "Parameters": [["int", "int: The session type. Value is @B_android#hardware#camera2#params#SessionConfiguration#SESSION_REGULAR_E@, or @B_android#hardware#camera2#params#SessionConfiguration#SESSION_HIGH_SPEED_E@"], ["@B_java#util#List_E@", "List: A list of output configurations for the capture session. This value must never be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The executor which should be used to invoke the callback. In general it is recommended that camera operations are not done on the main (UI) thread. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "CameraCaptureSession.StateCallback: A state callback interface implementation. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#SessionConfiguration_E@", "@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#CameraDevice#createCaptureSessionByOutputConfigurations_E@", "@B_android#hardware#camera2#CameraDevice#createReprocessableCaptureSession_E@", "@B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@"], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#SessionConfiguration_E@.", "history": "Added in API level 28", "FullName": "public SessionConfiguration (int sessionType, List<OutputConfiguration> outputs, Executor executor, CameraCaptureSession.StateCallback cb)"}, "getStateCallback()": {"Returns": [["@B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@", "A state callback interface implementation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#hardware#camera2#CameraCaptureSession#StateCallback_E@ for the capture session.", "history": "Added in API level 28", "FullName": "public CameraCaptureSession.StateCallback getStateCallback ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 29", "FullName": "public int describeContents ()"}, "setInputConfiguration(android.hardware.camera2.params.InputConfiguration)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#params#InputConfiguration_E@", "InputConfiguration: Input configuration. This value must never be null."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "In case it is called for @B_android#hardware#camera2#params#SessionConfiguration#SESSION_HIGH_SPEED_E@ type session configuration."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#hardware#camera2#params#InputConfiguration_E@ for a reprocessable session. Input configuration are not supported for @B_android#hardware#camera2#params#SessionConfiguration#SESSION_HIGH_SPEED_E@.", "history": "Added in API level 28", "FullName": "public void setInputConfiguration (InputConfiguration input)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#SessionConfiguration_E@ is equal to another @B_android#hardware#camera2#params#SessionConfiguration_E@. Two output session configurations are only equal if and only if the underlying input configuration, output configurations, and session type are equal.", "history": "Added in API level 28", "FullName": "public boolean equals (Object obj)"}, "getExecutor()": {"Returns": [["@B_java#util#concurrent#Executor_E@", "The Executor on which the callback will be invoked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_java#util#concurrent#Executor_E@ for the capture session.", "history": "Added in API level 28", "FullName": "public Executor getExecutor ()"}, "setSessionParameters(android.hardware.camera2.CaptureRequest)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CaptureRequest_E@", "CaptureRequest: A capture request that includes the initial values for any available session wide capture keys. Tags (see @B_android#hardware#camera2#CaptureRequest#Builder#setTag_E@) and output targets (see @B_android#hardware#camera2#CaptureRequest#Builder#addTarget_E@) are ignored if set. Parameter values not part of @B_android#hardware#camera2#CameraCharacteristics#getAvailableSessionKeys_E@ will also be ignored. It is recommended to build the session parameters using the same template type as the initial capture request, so that the session and initial request parameters match as much as possible."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the session wide camera parameters (see @B_android#hardware#camera2#CaptureRequest_E@). This argument can be set for every supported session type and will be passed to the camera device as part of the capture session initialization. Session parameters are a subset of the available capture request parameters (see @B_android#hardware#camera2#CameraCharacteristics#getAvailableSessionKeys_E@) and their application can introduce internal camera delays. To improve camera performance it is suggested to change them sparingly within the lifetime of the capture session and to pass their initial values as part of this method.", "history": "Added in API level 28", "FullName": "public void setSessionParameters (CaptureRequest params)"}, "getSessionParameters()": {"Returns": [["@B_android#hardware#camera2#CaptureRequest_E@", "A capture request that includes the initial values for any available session wide capture keys."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the session wide camera parameters (see @B_android#hardware#camera2#CaptureRequest_E@).", "history": "Added in API level 28", "FullName": "public CaptureRequest getSessionParameters ()"}, "getSessionType()": {"Returns": [["int", "The capture session type. Value is @B_android#hardware#camera2#params#SessionConfiguration#SESSION_REGULAR_E@, or @B_android#hardware#camera2#params#SessionConfiguration#SESSION_HIGH_SPEED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the type of the capture session.", "history": "Added in API level 28", "FullName": "public int getSessionType ()"}, "getOutputConfigurations()": {"Returns": [["@B_java#util#List_E@", "A list of output configurations for the capture session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_android#hardware#camera2#params#OutputConfiguration_E@ list for the capture session.", "history": "Added in API level 28", "FullName": "public List<OutputConfiguration> getOutputConfigurations ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 29", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 28", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.SessionConfiguration", "ClassDesc": "A helper class that aggregates all supported arguments for capture session initialization."}