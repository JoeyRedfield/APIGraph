{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#params#RggbChannelVector_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the RggbChannelVector as a string representation. \"RggbChannelVector{R:%f, G_even:%f, G_odd:%f, B:%f}\", where each %f respectively represents one of the the four color channels.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getGreenOdd()": {"Returns": [["float", "a floating point value (guaranteed to be finite)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the green (odd rows) component.", "history": "Added in API level 21", "FullName": "public float getGreenOdd ()"}, "RggbChannelVector(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float: red pixel"], ["float", "float: green pixel (even row)"], ["float", "float: green pixel (odd row)"], ["float", "float: blue pixel"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the arguments were not finite"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#RggbChannelVector_E@ from an RGGB 2x2 pixel. All pixel values are considered normalized within [0.0f, 1.0f] (i.e. 1.0f could be linearized to 255 if converting to a non-floating point pixel representation). All arguments must be finite; NaN and infinity is not allowed.", "history": "Added in API level 21", "FullName": "public RggbChannelVector (float red, float greenEven, float greenOdd, float blue)"}, "getComponent(int)": {"Returns": [["float", "a floating point value (guaranteed to be finite)"]], "Parameters": [["int", "int: greater or equal to 0 and less than @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if colorChannel was out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Get the component by the color channel index. colorChannel must be one of @B_android#hardware#camera2#params#RggbChannelVector#RED_E@, @B_android#hardware#camera2#params#RggbChannelVector#GREEN_EVEN_E@, @B_android#hardware#camera2#params#RggbChannelVector#GREEN_ODD_E@, @B_android#hardware#camera2#params#RggbChannelVector#BLUE_E@.", "history": "Added in API level 21", "FullName": "public float getComponent (int colorChannel)"}, "RggbChannelVector(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float: red pixel"], ["float", "float: green pixel (even row)"], ["float", "float: green pixel (odd row)"], ["float", "float: blue pixel"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the arguments were not finite"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#hardware#camera2#params#RggbChannelVector_E@ from an RGGB 2x2 pixel. All pixel values are considered normalized within [0.0f, 1.0f] (i.e. 1.0f could be linearized to 255 if converting to a non-floating point pixel representation). All arguments must be finite; NaN and infinity is not allowed.", "history": "added in API level 21", "FullName": "public RggbChannelVector (float red, float greenEven, float greenOdd, float blue)"}, "copyTo(float[], int)": {"Returns": [], "Parameters": [["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the vector into the destination in the order [R, Geven, Godd, B].", "history": "added in API level 21", "FullName": "public void copyTo (float[] destination, int offset)"}, "getRed()": {"Returns": [["float", "a floating point value (guaranteed to be finite)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the red component.", "history": "Added in API level 21", "FullName": "public float getRed ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#RggbChannelVector_E@ is equal to another @B_android#hardware#camera2#params#RggbChannelVector_E@. Two vectors are only equal if and only if each of the respective elements is equal.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "copyTo(float[],int)": {"Returns": [], "Parameters": [["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": [], "Permissions": [], "Description": "Copy the vector into the destination in the order [R, Geven, Godd, B].", "history": "Added in API level 21", "FullName": "public void copyTo (float[] destination, int offset)"}, "getBlue()": {"Returns": [["float", "a floating point value (guaranteed to be finite)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the blue component.", "history": "Added in API level 21", "FullName": "public float getBlue ()"}, "getGreenEven()": {"Returns": [["float", "a floating point value (guaranteed to be finite)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the green (even rows) component.", "history": "Added in API level 21", "FullName": "public float getGreenEven ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.RggbChannelVector", "ClassDesc": "Immutable class to store a 4-element vector of floats indexable by a bayer RAW 2x2 pixel block."}