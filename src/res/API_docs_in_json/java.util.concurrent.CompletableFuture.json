{"Functions": {"handleAsync(java.util.function.BiFunction<?superT,java.lang.Throwable,?extendsU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using this stage's default asynchronous execution facility, with this stage's result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function's result is used to complete the returned stage.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> handleAsync (BiFunction<? super T, Throwable, ? extends U> fn)"}, "thenCombineAsync(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiFunction<?superT,?superU,?extendsV>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<V> thenCombineAsync (CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn, Executor executor)"}, "applyToEither(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Function<?superT,U>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> applyToEither (CompletionStage<? extends T> other, Function<? super T, U> fn)"}, "runAfterEither(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterEither (CompletionStage<?> other, Runnable action)"}, "acceptEitherAsync(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Consumer<?superT>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> acceptEitherAsync (CompletionStage<? extends T> other, Consumer<? super T> action, Executor executor)"}, "allOf(java.util.concurrent.CompletableFuture<?>...)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "a new CompletableFuture that is completed when all of the given CompletableFutures complete"]], "Parameters": [["@B_java#util#concurrent#CompletableFuture_E@", "CompletableFuture: the CompletableFutures"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the array or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is completed when all of the given CompletableFutures complete. If any of the given CompletableFutures complete exceptionally, then the returned CompletableFuture also does so, with a CompletionException holding this exception as its cause. Otherwise, the results, if any, of the given CompletableFutures are not reflected in the returned CompletableFuture, but may be obtained by inspecting them individually. If no CompletableFutures are provided, returns a CompletableFuture completed with the value null. Among the applications of this method is to await completion of a set of independent CompletableFutures before continuing a program, as in: CompletableFuture.allOf(c1, c2, c3).join();.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<Void> allOf (CompletableFuture...<?> cfs)"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["T", "the result value"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if this future was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if this future completed exceptionally"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.", "history": "added in API level 24", "FullName": "public T get (long timeout, TimeUnit unit)"}, "handleAsync(java.util.function.BiFunction<?superT,java.lang.Throwable,?extendsU>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed using the supplied executor, with this stage's result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function's result is used to complete the returned stage.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> handleAsync (BiFunction<? super T, Throwable, ? extends U> fn, Executor executor)"}, "completeExceptionally(java.lang.Throwable)": {"Returns": [["boolean", "true if this invocation caused this CompletableFuture to transition to a completed state, else false"]], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the exception"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If not already completed, causes invocations of @B_java#util#concurrent#CompletableFuture#get_E@ and related methods to throw the given exception.", "history": "Added in API level 24", "FullName": "public boolean completeExceptionally (Throwable ex)"}, "runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using this stage's default asynchronous execution facility. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterBothAsync (CompletionStage<?> other, Runnable action)"}, "handle(java.util.function.BiFunction<?superT,java.lang.Throwable,?extendsU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes either normally or exceptionally, is executed with this stage's result and exception as arguments to the supplied function. When this stage is complete, the given function is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments, and the function's result is used to complete the returned stage.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> handle (BiFunction<? super T, Throwable, ? extends U> fn)"}, "exceptionally(java.util.function.Function<java.lang.Throwable,?extendsT>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletableFuture"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletableFuture if this CompletableFuture completed exceptionally"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is completed when this CompletableFuture completes, with the result of the given function of the exception triggering this CompletableFuture's completion when it completes exceptionally; otherwise, if this CompletableFuture completes normally, then the returned CompletableFuture also completes normally with the same value. Note: More flexible versions of this functionality are available using methods whenComplete and handle.", "history": "Added in API level 24", "FullName": "public CompletableFuture<T> exceptionally (Function<Throwable, ? extends T> fn)"}, "thenAcceptBothAsync(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiConsumer<?superT,?superU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAcceptBothAsync (CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)"}, "thenAcceptAsync(java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAcceptAsync (Consumer<? super T> action)"}, "complete(T)": {"Returns": [["boolean", "true if this invocation caused this CompletableFuture to transition to a completed state, else false"]], "Parameters": [["T", "T: the result value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If not already completed, sets the value returned by @B_java#util#concurrent#CompletableFuture#get_E@ and related methods to the given value.", "history": "Added in API level 24", "FullName": "public boolean complete (T value)"}, "thenApply(java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied function. This method is analogous to @B_java#util#Optional#map_E@ and @B_java#util#stream#Stream#map_E@. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenApply (Function<? super T, ? extends U> fn)"}, "thenApplyAsync(java.util.function.Function<?superT,?extendsU>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenApplyAsync (Function<? super T, ? extends U> fn, Executor executor)"}, "supplyAsync(java.util.function.Supplier<U>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletableFuture"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a function returning the value to be used to complete the returned CompletableFuture"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor with the value obtained by calling the given Supplier.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<U> supplyAsync (Supplier<U> supplier, Executor executor)"}, "get()": {"Returns": [["T", "the result value"]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if this future was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if this future completed exceptionally"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for this future to complete, and then returns its result.", "history": "Added in API level 24", "FullName": "public T get ()"}, "thenCombine(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiFunction<?superT,?superU,?extendsV>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<V> thenCombine (CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)"}, "thenRun(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, executes the given action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenRun (Runnable action)"}, "get(long,java.util.concurrent.TimeUnit)": {"Returns": [["T", "the result value"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if this future was cancelled"], ["@B_java#util#concurrent#ExecutionException_E@", "if this future completed exceptionally"], ["@B_java#lang#InterruptedException_E@", "if the current thread was interrupted while waiting"], ["@B_java#util#concurrent#TimeoutException_E@", "if the wait timed out"]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for this future to complete, and then returns its result, if available.", "history": "Added in API level 24", "FullName": "public T get (long timeout, TimeUnit unit)"}, "obtrudeValue(T)": {"Returns": [], "Parameters": [["T", "T: the completion value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forcibly sets or resets the value subsequently returned by method @B_java#util#concurrent#CompletableFuture#get_E@ and related methods, whether or not already completed. This method is designed for use only in error recovery actions, and even in such situations may result in ongoing dependent completions using established versus overwritten outcomes.", "history": "Added in API level 24", "FullName": "public void obtrudeValue (T value)"}, "whenCompleteAsync(java.util.function.BiConsumer<?superT,?superjava.lang.Throwable>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using this stage's default asynchronous execution facility when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method @B_java#util#concurrent#CompletionStage#handleAsync_E@, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: If this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action's exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage's exception.", "history": "Added in API level 24", "FullName": "public CompletableFuture<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action)"}, "getNow(T)": {"Returns": [["T", "the result value, if completed, else the given valueIfAbsent"]], "Parameters": [["T", "T: the value to return if not completed"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#CompletionException_E@", "if this future completed exceptionally or a completion computation threw an exception"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the result value (or throws any encountered exception) if completed, else returns the given valueIfAbsent.", "history": "Added in API level 24", "FullName": "public T getNow (T valueIfAbsent)"}, "supplyAsync(java.util.function.Supplier<U>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletableFuture"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: a function returning the value to be used to complete the returned CompletableFuture"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is asynchronously completed by a task running in the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ with the value obtained by calling the given Supplier.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<U> supplyAsync (Supplier<U> supplier)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this CompletableFuture, as well as its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this CompletableFuture, as well as its completion state. The state, in brackets, contains the String \"Completed Normally\" or the String \"Completed Exceptionally\", or the String \"Not completed\" followed by the number of CompletableFutures dependent upon its completion, if any.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "applyToEitherAsync(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Function<?superT,U>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using the supplied executor, with the corresponding result as argument to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> applyToEitherAsync (CompletionStage<? extends T> other, Function<? super T, U> fn, Executor executor)"}, "isCancelled()": {"Returns": [["boolean", "true if this CompletableFuture was cancelled before it completed normally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this CompletableFuture was cancelled before it completed normally.", "history": "Added in API level 24", "FullName": "public boolean isCancelled ()"}, "join()": {"Returns": [["T", "the result value"]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "if the computation was cancelled"], ["@B_java#util#concurrent#CompletionException_E@", "if this future completed exceptionally or a completion computation threw an exception"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the result value when complete, or throws an (unchecked) exception if completed exceptionally. To better conform with the use of common functional forms, if a computation involved in the completion of this CompletableFuture threw an exception, this method throws an (unchecked) @B_java#util#concurrent#CompletionException_E@ with the underlying exception as its cause.", "history": "Added in API level 24", "FullName": "public T join ()"}, "thenAccept(java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAccept (Consumer<? super T> action)"}, "thenCombineAsync(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiFunction<?superT,?superU,?extendsV>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using this stage's default asynchronous execution facility, with the two results as arguments to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<V> thenCombineAsync (CompletionStage<? extends U> other, BiFunction<? super T, ? super U, ? extends V> fn)"}, "runAsync(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletableFuture"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the action to run before completing the returned CompletableFuture"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is asynchronously completed by a task running in the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ after it runs the given action.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<Void> runAsync (Runnable runnable)"}, "thenAcceptBoth(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiConsumer<?superT,?superU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed with the two results as arguments to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAcceptBoth (CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action)"}, "acceptEither(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed with the corresponding result as argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> acceptEither (CompletionStage<? extends T> other, Consumer<? super T> action)"}, "thenComposeAsync(java.util.function.Function<?superT,?extendsjava.util.concurrent.CompletionStage<U>>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute another CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using the supplied Executor. When this stage completes normally, the given function is invoked with this stage's result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenComposeAsync (Function<? super T, ? extends CompletionStage<U>> fn, Executor executor)"}, "whenComplete(java.util.function.BiConsumer<?superT,?superjava.lang.Throwable>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method @B_java#util#concurrent#CompletionStage#handle_E@, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: if this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action's exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage's exception.", "history": "Added in API level 24", "FullName": "public CompletableFuture<T> whenComplete (BiConsumer<? super T, ? super Throwable> action)"}, "completedFuture(U)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the completed CompletableFuture"]], "Parameters": [["U", "U: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is already completed with the given value.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<U> completedFuture (U value)"}, "thenCompose(java.util.function.Function<?superT,?extendsjava.util.concurrent.CompletionStage<U>>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute another CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function. When this stage completes normally, the given function is invoked with this stage's result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. This method is analogous to @B_java#util#Optional#flatMap_E@ and @B_java#util#stream#Stream#flatMap_E@. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenCompose (Function<? super T, ? extends CompletionStage<U>> fn)"}, "isCompletedExceptionally()": {"Returns": [["boolean", "true if this CompletableFuture completed exceptionally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this CompletableFuture completed exceptionally, in any way. Possible causes include cancellation, explicit invocation of completeExceptionally, and abrupt termination of a CompletionStage action.", "history": "Added in API level 24", "FullName": "public boolean isCompletedExceptionally ()"}, "applyToEitherAsync(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Function<?superT,U>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> applyToEitherAsync (CompletionStage<? extends T> other, Function<? super T, U> fn)"}, "runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using the supplied executor. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterEitherAsync (CompletionStage<?> other, Runnable action, Executor executor)"}, "whenCompleteAsync(java.util.function.BiConsumer<?superT,?superjava.lang.Throwable>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage with the same result or exception as this stage, that executes the given action using the supplied Executor when this stage completes. When this stage is complete, the given action is invoked with the result (or null if none) and the exception (or null if none) of this stage as arguments. The returned stage is completed when the action returns. Unlike method @B_java#util#concurrent#CompletionStage#handleAsync_E@, this method is not designed to translate completion outcomes, so the supplied action should not throw an exception. However, if it does, the following rules apply: If this stage completed normally but the supplied action throws an exception, then the returned stage completes exceptionally with the supplied action's exception. Or, if this stage completed exceptionally and the supplied action throws an exception, then the returned stage completes exceptionally with this stage's exception.", "history": "Added in API level 24", "FullName": "public CompletableFuture<T> whenCompleteAsync (BiConsumer<? super T, ? super Throwable> action, Executor executor)"}, "isDone()": {"Returns": [["boolean", "true if completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if completed in any fashion: normally, exceptionally, or via cancellation.", "history": "Added in API level 24", "FullName": "public boolean isDone ()"}, "runAfterBoth(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterBoth (CompletionStage<?> other, Runnable action)"}, "CompletableFuture()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new incomplete CompletableFuture.", "history": "Added in API level 24", "FullName": "public CompletableFuture ()"}, "thenAcceptBothAsync(java.util.concurrent.CompletionStage<?extendsU>,java.util.function.BiConsumer<?superT,?superU>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#BiConsumer_E@", "BiConsumer: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, is executed using the supplied executor, with the two results as arguments to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAcceptBothAsync (CompletionStage<? extends U> other, BiConsumer<? super T, ? super U> action, Executor executor)"}, "getNumberOfDependents()": {"Returns": [["int", "the number of dependent CompletableFutures"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the estimated number of CompletableFutures whose completions are awaiting completion of this CompletableFuture. This method is designed for use in monitoring system state, not for synchronization control.", "history": "Added in API level 24", "FullName": "public int getNumberOfDependents ()"}, "thenRunAsync(java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, executes the given action using this stage's default asynchronous execution facility. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenRunAsync (Runnable action)"}, "toCompletableFuture()": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "this CompletableFuture"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this CompletableFuture.", "history": "Added in API level 24", "FullName": "public CompletableFuture<T> toCompletableFuture ()"}, "thenAccept(java.util.function.Consumer<? super T>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed with this stage's result as the argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "added in API level 24", "FullName": "public CompletableFuture<Void> thenAccept (Consumer<? super T> action)"}, "runAfterEitherAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, executes the given action using this stage's default asynchronous execution facility. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterEitherAsync (CompletionStage<?> other, Runnable action)"}, "thenComposeAsync(java.util.function.Function<?superT,?extendsjava.util.concurrent.CompletionStage<U>>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute another CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that is completed with the same value as the CompletionStage returned by the given function, executed using this stage's default asynchronous execution facility. When this stage completes normally, the given function is invoked with this stage's result as the argument, returning another CompletionStage. When that stage completes normally, the CompletionStage returned by this method is completed with the same value. To ensure progress, the supplied function must arrange eventual completion of its result. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenComposeAsync (Function<? super T, ? extends CompletionStage<U>> fn)"}, "runAsync(java.lang.Runnable,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletableFuture"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the action to run before completing the returned CompletableFuture"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is asynchronously completed by a task running in the given executor after it runs the given action.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<Void> runAsync (Runnable runnable, Executor executor)"}, "thenRunAsync(java.lang.Runnable,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, executes the given action using the supplied Executor. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenRunAsync (Runnable action, Executor executor)"}, "obtrudeException(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the exception"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the exception is null"]], "SeeAlso": [], "Permissions": [], "Description": "Forcibly causes subsequent invocations of method @B_java#util#concurrent#CompletableFuture#get_E@ and related methods to throw the given exception, whether or not already completed. This method is designed for use only in error recovery actions, and even in such situations may result in ongoing dependent completions using established versus overwritten outcomes.", "history": "Added in API level 24", "FullName": "public void obtrudeException (Throwable ex)"}, "thenApplyAsync(java.util.function.Function<?superT,?extendsU>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Function_E@", "Function: the function to use to compute the value of the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed using this stage's default asynchronous execution facility, with this stage's result as the argument to the supplied function. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<U> thenApplyAsync (Function<? super T, ? extends U> fn)"}, "acceptEitherAsync(java.util.concurrent.CompletionStage<?extendsT>,java.util.function.Consumer<?superT>)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when either this or the other given stage complete normally, is executed using this stage's default asynchronous execution facility, with the corresponding result as argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> acceptEitherAsync (CompletionStage<? extends T> other, Consumer<? super T> action)"}, "cancel(boolean)": {"Returns": [["boolean", "true if this task is now cancelled"]], "Parameters": [["boolean", "boolean: this value has no effect in this implementation because interrupts are not used to control processing."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If not already completed, completes this CompletableFuture with a @B_java#util#concurrent#CancellationException_E@. Dependent CompletableFutures that have not already completed will also complete exceptionally, with a @B_java#util#concurrent#CompletionException_E@ caused by this CancellationException.", "history": "Added in API level 24", "FullName": "public boolean cancel (boolean mayInterruptIfRunning)"}, "runAfterBothAsync(java.util.concurrent.CompletionStage<?>,java.lang.Runnable,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#concurrent#CompletionStage_E@", "CompletionStage: the other CompletionStage"], ["@B_java#lang#Runnable_E@", "Runnable: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this and the other given stage both complete normally, executes the given action using the supplied executor. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> runAfterBothAsync (CompletionStage<?> other, Runnable action, Executor executor)"}, "anyOf(java.util.concurrent.CompletableFuture<?>...)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "a new CompletableFuture that is completed with the result or exception of any of the given CompletableFutures when one completes"]], "Parameters": [["@B_java#util#concurrent#CompletableFuture_E@", "CompletableFuture: the CompletableFutures"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the array or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletableFuture that is completed when any of the given CompletableFutures complete, with the same result. Otherwise, if it completed exceptionally, the returned CompletableFuture also does so, with a CompletionException holding this exception as its cause. If no CompletableFutures are provided, returns an incomplete CompletableFuture.", "history": "Added in API level 24", "FullName": "public static CompletableFuture<Object> anyOf (CompletableFuture...<?> cfs)"}, "thenAcceptAsync(java.util.function.Consumer<?superT>,java.util.concurrent.Executor)": {"Returns": [["@B_java#util#concurrent#CompletableFuture_E@", "the new CompletionStage"]], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer: the action to perform before completing the returned CompletionStage"], ["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use for asynchronous execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new CompletionStage that, when this stage completes normally, is executed using the supplied Executor, with this stage's result as the argument to the supplied action. See the @B_java#util#concurrent#CompletionStage_E@ documentation for rules covering exceptional completion.", "history": "Added in API level 24", "FullName": "public CompletableFuture<Void> thenAcceptAsync (Consumer<? super T> action, Executor executor)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.CompletableFuture<T>", "ClassDesc": "A @B_java#util#concurrent#Future_E@ that may be explicitly completed (setting its value and status), and may be used as a @B_java#util#concurrent#CompletionStage_E@, supporting dependent functions and actions that trigger upon its completion. When two or more threads attempt to @B_java#util#concurrent#CompletableFuture#complete_E@, @B_java#util#concurrent#CompletableFuture#completeExceptionally_E@, or @B_java#util#concurrent#CompletableFuture#cancel_E@ a CompletableFuture, only one of them succeeds. In addition to these and related methods for directly manipulating status and results, CompletableFuture implements interface @B_java#util#concurrent#CompletionStage_E@ with the following policies: Actions supplied for dependent completions of non-async methods may be performed by the thread that completes the current CompletableFuture, or by any other caller of a completion method. All async methods without an explicit Executor argument are performed using the @B_java#util#concurrent#ForkJoinPool#commonPool_E@ (unless it does not support a parallelism level of at least two, in which case, a new Thread is created to run each task). To simplify monitoring, debugging, and tracking, all generated asynchronous tasks are instances of the marker interface @B_java#util#concurrent#CompletableFuture#AsynchronousCompletionTask_E@. Operations with time-delays can use adapter methods defined in this class, for example: supplyAsync(supplier, delayedExecutor(timeout, timeUnit)). To support methods with delays and timeouts, this class maintains at most one daemon thread for triggering and cancelling actions, not for running them. All CompletionStage methods are implemented independently of other public methods, so the behavior of one method is not impacted by overrides of others in subclasses. CompletableFuture also implements @B_java#util#concurrent#Future_E@ with the following policies: Since (unlike @B_java#util#concurrent#FutureTask_E@) this class has no direct control over the computation that causes it to be completed, cancellation is treated as just another form of exceptional completion. Method @B_java#util#concurrent#CompletableFuture#cancel_E@ has the same effect as completeExceptionally(new CancellationException()). Method @B_java#util#concurrent#CompletableFuture#isCompletedExceptionally_E@ can be used to determine if a CompletableFuture completed in any exceptional fashion. In case of exceptional completion with a CompletionException, methods @B_java#util#concurrent#CompletableFuture#get_E@ and @B_java#util#concurrent#CompletableFuture#get_E@ throw an @B_java#util#concurrent#ExecutionException_E@ with the same cause as held in the corresponding CompletionException. To simplify usage in most contexts, this class also defines methods @B_java#util#concurrent#CompletableFuture#join_E@ and @B_java#util#concurrent#CompletableFuture#getNow_E@ that instead throw the CompletionException directly in these cases. Arguments used to pass a completion result (that is, for parameters of type T) for methods accepting them may be null, but passing a null value for any other parameter will result in a @B_java#lang#NullPointerException_E@ being thrown."}