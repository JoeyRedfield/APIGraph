{"Functions": {"isExponentSignAlwaysShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setExponentSignAlwaysShown_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isExponentSignAlwaysShown ()"}, "setMaximumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: The maximum number of integer digits after the decimal separator."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingMode_E@"], "Permissions": [], "Description": "For example, if maximum fraction digits is 2, the number 123.456 will be printed as \"123.46\". Minimum integer and minimum and maximum fraction digits can be specified via the pattern string. For example, \"#,#00.00#\" has 2 minimum integer digits, 2 minimum fraction digits, and 3 maximum fraction digits. Note that it is not possible to specify maximium integer digits in the pattern except in scientific notation. If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3.", "history": "Added in API level 24", "FullName": "public void setMaximumFractionDigits (int value)"}, "format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#CurrencyAmount_E@", "CurrencyAmount no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public StringBuffer format (CurrencyAmount currAmt, StringBuffer result, FieldPosition fieldPosition)"}, "setMinimumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: The minimum number of integer digits after the decimal separator."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingMode_E@", "@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@", "@B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@"], "Permissions": [], "Description": "For example, if minimum fraction digits is 2, the number 123.4 will be printed as \"123.40\". Minimum integer and minimum and maximum fraction digits can be specified via the pattern string. For example, \"#,#00.00#\" has 2 minimum integer digits, 2 minimum fraction digits, and 3 maximum fraction digits. Note that it is not possible to specify maximium integer digits in the pattern except in scientific notation. If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3. See @B_android#icu#text#DecimalFormat#setRoundingIncrement_E@ and @B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@ for two other ways of specifying rounding strategies.", "history": "Added in API level 24", "FullName": "public void setMinimumFractionDigits (int value)"}, "getParseMaxDigits()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Setting max parse digits has no effect since ICU4J 59. Always returns 1000, the default prior to ICU 59.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public int getParseMaxDigits ()"}, "setMathContext(java.math.MathContext)": {"Returns": [], "Parameters": [["@B_java#math#MathContext_E@", "MathContext: The MathContext to use when rounding numbers."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "when inverting multiplier produces a non-terminating decimal result in conjunction with MathContext of unlimited precision."]], "SeeAlso": ["@B_java#math#MathContext_E@"], "Permissions": [], "Description": "@B_java#math#MathContext_E@ used to round numbers. A \"math context\" encodes both a rounding mode and a number of significant digits. Most users should call @B_android#icu#text#DecimalFormat#setRoundingMode_E@ and/or @B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@ instead of this method. When formatting, since no division is ever performed, the default MathContext is unlimited significant digits. However, when division occurs during parsing to correct for percentages and multipliers, a MathContext of 34 digits, the IEEE 754R Decimal128 standard, is used by default. If you require more than 34 digits when parsing, you can set a custom MathContext using this method.", "history": "Added in API level 24", "FullName": "public void setMathContext (MathContext mathContext)"}, "setMathContextICU(android.icu.math.MathContext)": {"Returns": [], "Parameters": [["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext to use when rounding numbers."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "when inverting multiplier produces a non-terminating decimal result in conjunction with MathContext of unlimited precision."]], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMathContext_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormat#setMathContext_E@ for @B_android#icu#math#MathContext_E@.", "history": "Added in API level 24", "FullName": "public void setMathContextICU (MathContext mathContextICU)"}, "getCurrency()": {"Returns": [["@B_android#icu#util#Currency_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setCurrency_E@", "@B_android#icu#text#DecimalFormatSymbols#getCurrency_E@"], "Permissions": [], "Description": "Returns the currency used to display currency amounts. May be null.", "history": "Added in API level 24", "FullName": "public Currency getCurrency ()"}, "setRoundingIncrement(double)": {"Returns": [], "Parameters": [["double", "double: The increment to which numbers are to be rounded."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@.", "history": "Added in API level 24", "FullName": "public void setRoundingIncrement (double increment)"}, "areSignificantDigitsUsed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setSignificantDigitsUsed_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean areSignificantDigitsUsed ()"}, "getCurrencyPluralInfo()": {"Returns": [["@B_android#icu#text#CurrencyPluralInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setCurrencyPluralInfo_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public CurrencyPluralInfo getCurrencyPluralInfo ()"}, "isParseIntegerOnly()": {"Returns": [["boolean", "true if this will parse integers only"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setParseIntegerOnly_E@"], "Permissions": [], "Description": "Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string \"1234.\" would be parsed as the integer value 1234 and parsing would stop at the \".\" character. The decimal separator accepted by the parse operation is locale-dependent and determined by the subclass.", "history": "Added in API level 24", "FullName": "public boolean isParseIntegerOnly ()"}, "setCurrencyPluralInfo(android.icu.text.CurrencyPluralInfo)": {"Returns": [], "Parameters": [["@B_android#icu#text#CurrencyPluralInfo_E@", "CurrencyPluralInfo: The CurrencyPluralInfo to use when printing currency long names."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "NumberFormat.getInstance(NumberFormat.PLURALCURRENCYSTYLE).", "history": "Added in API level 24", "FullName": "public void setCurrencyPluralInfo (CurrencyPluralInfo newInfo)"}, "setMultiplier(int)": {"Returns": [], "Parameters": [["int", "int: The number by which all numbers passed to @B_android#icu#text#NumberFormat#format_E@ will be multiplied."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given multiplier is zero."], ["@B_java#lang#ArithmeticException_E@", "when inverting multiplier produces a non-terminating decimal result in conjunction with MathContext of unlimited precision."]], "SeeAlso": [], "Permissions": [], "Description": "Sets a number that will be used to multiply all numbers prior to formatting. For example, when formatting percents, a multiplier of 100 can be used. If a percent or permille sign is specified in the pattern, the multiplier is automatically set to 100 or 1000, respectively. If the number specified here is a power of 10, a more efficient code path will be used.", "history": "Added in API level 24", "FullName": "public void setMultiplier (int multiplier)"}, "applyPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parses the given pattern string and overwrites the settings specified in the pattern string. The properties corresponding to the following setters are overwritten, either with their default values or with the value specified in the pattern string: For more information on pattern strings, see", "history": "Added in API level 24", "FullName": "public void applyPattern (String pattern)"}, "setFormatWidth(int)": {"Returns": [], "Parameters": [["int", "int: The minimum number of characters in the output."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setPadCharacter_E@", "@B_android#icu#text#DecimalFormat#setPadPosition_E@"], "Permissions": [], "Description": "If the number is longer than your padding width, the number will display as if no padding width had been specified, which may result in strings longer than the padding width. Padding can be specified in the pattern string using the '*' symbol. For example, the format \"*x######0\" has a format width of 7 and a pad character of 'x'. Padding is currently counted in UTF-16 code units; see", "history": "Added in API level 24", "FullName": "public void setFormatWidth (int width)"}, "format(long,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public StringBuffer format (long number, StringBuffer result, FieldPosition fieldPosition)"}, "setDecimalFormatSymbols(android.icu.text.DecimalFormatSymbols)": {"Returns": [], "Parameters": [["@B_android#icu#text#DecimalFormatSymbols_E@", "DecimalFormatSymbols: desired DecimalFormatSymbols"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Sets the decimal format symbols used by this formatter. The formatter uses a copy of the provided symbols.", "history": "Added in API level 24", "FullName": "public void setDecimalFormatSymbols (DecimalFormatSymbols newSymbols)"}, "setNegativePrefix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The literal string to prepend to negative numbers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US (overriding the implicit default '-' in the pattern). Using this method overrides the affix specified via the pattern, and unlike the pattern, the string given to this method will be interpreted literally WITHOUT locale symbol substitutions.", "history": "Added in API level 24", "FullName": "public void setNegativePrefix (String prefix)"}, "getFormatWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setFormatWidth_E@"], "Permissions": [], "Description": "Returns the minimum number of characters in formatted output.", "history": "Added in API level 24", "FullName": "public int getFormatWidth ()"}, "setRoundingMode(int)": {"Returns": [], "Parameters": [["int", "int: The integer constant rounding mode to use when formatting numbers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_java#math#RoundingMode_E@ used to round numbers. The default rounding mode is HALF_EVEN, which rounds decimals to their closest whole number, and rounds to the closest even number if at the midpoint. For more detail on rounding modes, see For backwards compatibility, the rounding mode is specified as an int argument, which can be from either the constants in @B_android#icu#math#BigDecimal_E@ or the ordinal value of @B_java#math#RoundingMode_E@. The following two calls are functionally equivalent.", "history": "Added in API level 24", "FullName": "public void setRoundingMode (int roundingMode)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default value of toString() with extra DecimalFormat-specific information appended to the end of the string. This extra information is intended for debugging purposes, and the format is not guaranteed to be stable.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "setParseMaxDigits(int)": {"Returns": [], "Parameters": [["int", "int: Prior to ICU 59, the maximum number of digits in the output number after exponential notation is applied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Setting max parse digits has no effect since ICU4J 59.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public void setParseMaxDigits (int maxDigits)"}, "getPositivePrefix()": {"Returns": [["@B_java#lang#String_E@", "The string being prepended to positive numbers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the affix was specified via the pattern, the string returned by this method will have locale symbols substituted in place of special characters according to the LDML specification. If the affix was specified via @B_android#icu#text#DecimalFormat#setPositivePrefix_E@, the string will be returned literally.", "history": "Added in API level 24", "FullName": "public String getPositivePrefix ()"}, "setGroupingSize(int)": {"Returns": [], "Parameters": [["int", "int: The grouping size to use."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setSecondaryGroupingSize_E@"], "Permissions": [], "Description": "For example, with a grouping size of 3, the number 1234567 will be formatted as \"1,234,567\". Grouping size can also be specified in the pattern: for example, \"#,##0\" corresponds to a grouping size of 3.", "history": "Added in API level 24", "FullName": "public void setGroupingSize (int width)"}, "applyLocalizedPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The pattern string in localized notation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the given string to standard notation and then parses it using @B_android#icu#text#DecimalFormat#applyPattern_E@. This method is provided for backwards compatibility and should not be used in new projects. Localized notation means that instead of using generic placeholders in the pattern, you use the corresponding locale-specific characters instead. For example, in locale fr-FR, the period in the pattern \"0.000\" means \"decimal\" in standard notation (as it does in every other locale), but it means \"grouping\" in localized notation.", "history": "Added in API level 24", "FullName": "public void applyLocalizedPattern (String localizedPattern)"}, "isGroupingUsed()": {"Returns": [["boolean", "true if grouping is used"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setGroupingUsed_E@"], "Permissions": [], "Description": "Returns whether or not grouping separators are being printed in the output.", "history": "Added in API level 24", "FullName": "public boolean isGroupingUsed ()"}, "getSecondaryGroupingSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setSecondaryGroupingSize_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getSecondaryGroupingSize ()"}, "format(double,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["double", "double no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public StringBuffer format (double number, StringBuffer result, FieldPosition fieldPosition)"}, "getMaximumFractionDigits()": {"Returns": [["int", "the maximum number of fraction digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the effective maximum number of integer digits after the decimal separator.", "history": "Added in API level 24", "FullName": "public int getMaximumFractionDigits ()"}, "getMinimumFractionDigits()": {"Returns": [["int", "the minimum number of fraction digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the effective minimum number of integer digits after the decimal separator.", "history": "Added in API level 24", "FullName": "public int getMinimumFractionDigits ()"}, "setPositiveSuffix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The literal string to append to positive numbers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US. Using this method overrides the affix specified via the pattern, and unlike the pattern, the string given to this method will be interpreted literally WITHOUT locale symbol substitutions.", "history": "Added in API level 24", "FullName": "public void setPositiveSuffix (String suffix)"}, "getRoundingIncrement()": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public BigDecimal getRoundingIncrement ()"}, "setPadPosition(int)": {"Returns": [], "Parameters": [["int", "int: The position used for padding."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setFormatWidth_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormat#setFormatWidth_E@. For example, consider the pattern \"P123S\" with padding width 8 and padding char \"*\". The four positions are: @B_android#icu#text#DecimalFormat#PAD_BEFORE_PREFIX_E@ \u21d2 \"***P123S\" @B_android#icu#text#DecimalFormat#PAD_AFTER_PREFIX_E@ \u21d2 \"P***123S\" @B_android#icu#text#DecimalFormat#PAD_BEFORE_SUFFIX_E@ \u21d2 \"P123***S\" @B_android#icu#text#DecimalFormat#PAD_AFTER_SUFFIX_E@ \u21d2 \"P123S***\"", "history": "Added in API level 24", "FullName": "public void setPadPosition (int padPos)"}, "getMaximumIntegerDigits()": {"Returns": [["int", "the maximum number of integer digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the effective maximum number of digits before the decimal separator.", "history": "Added in API level 24", "FullName": "public int getMaximumIntegerDigits ()"}, "getRoundingMode()": {"Returns": [["int", "A rounding mode, between BigDecimal.ROUND_UP and BigDecimal.ROUND_UNNECESSARY."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingMode_E@"], "Permissions": [], "Description": "Returns the rounding mode being used to round numbers.", "history": "Added in API level 24", "FullName": "public int getRoundingMode ()"}, "getNegativePrefix()": {"Returns": [["@B_java#lang#String_E@", "The string being prepended to negative numbers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the affix was specified via the pattern, the string returned by this method will have locale symbols substituted in place of special characters according to the LDML specification. If the affix was specified via @B_android#icu#text#DecimalFormat#setNegativePrefix_E@, the string will be returned literally.", "history": "Added in API level 24", "FullName": "public String getNegativePrefix ()"}, "setScientificNotation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable scientific notation; false to disable it."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMinimumExponentDigits_E@"], "Permissions": [], "Description": "en-US. A locale-specific symbol is used as the exponent separator. Calling df.setScientificNotation(true) is functionally equivalent to calling df.setMinimumExponentDigits(1).", "history": "Added in API level 24", "FullName": "public void setScientificNotation (boolean useScientific)"}, "getGroupingSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setGroupingSize_E@"], "Permissions": [], "Description": "Returns the primary grouping size in use.", "history": "Added in API level 24", "FullName": "public int getGroupingSize ()"}, "getMathContext()": {"Returns": [["@B_java#math#MathContext_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMathContext_E@"], "Permissions": [], "Description": "@B_java#math#MathContext_E@ being used to round numbers.", "history": "Added in API level 24", "FullName": "public MathContext getMathContext ()"}, "getMinimumExponentDigits()": {"Returns": [["byte", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMinimumExponentDigits_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public byte getMinimumExponentDigits ()"}, "setSecondaryGroupingSize(int)": {"Returns": [], "Parameters": [["int", "int: The secondary grouping size to use."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setGroupingSize_E@"], "Permissions": [], "Description": "For example, with primary grouping size 3 and secondary grouping size 2, the number 1234567 will be formatted as \"12,34,567\". Grouping size can also be specified in the pattern: for example, \"#,##,##0\" corresponds to a primary grouping size of 3 and a secondary grouping size of 2.", "history": "Added in API level 24", "FullName": "public void setSecondaryGroupingSize (int width)"}, "toLocalizedPattern()": {"Returns": [["@B_java#lang#String_E@", "A decimal format pattern string in localized notation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls @B_android#icu#text#DecimalFormat#toPattern_E@ and converts the string to localized notation. For more information on localized notation, see @B_android#icu#text#DecimalFormat#applyLocalizedPattern_E@. This method is provided for backwards compatibility and should not be used in new projects.", "history": "Added in API level 24", "FullName": "public String toLocalizedPattern ()"}, "setGroupingUsed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable grouping separators; false to disable them."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setGroupingSize_E@", "@B_android#icu#text#DecimalFormat#setSecondaryGroupingSize_E@"], "Permissions": [], "Description": "en-US). For example, if grouping is enabled, 12345 will be printed as \"12,345\" in en-US. If grouping were disabled, it would instead be printed as simply \"12345\".", "history": "Added in API level 24", "FullName": "public void setGroupingUsed (boolean enabled)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double. The return type is not guaranteed other than for the Long case. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! For more detail on parsing, see the \"Parsing\" header in the class documentation of @B_android#icu#text#DecimalFormat_E@.", "history": "Added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}, "isDecimalPatternMatchRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setDecimalPatternMatchRequired_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isDecimalPatternMatchRequired ()"}, "getNegativeSuffix()": {"Returns": [["@B_java#lang#String_E@", "The string being appended to negative numbers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the affix was specified via the pattern, the string returned by this method will have locale symbols substituted in place of special characters according to the LDML specification. If the affix was specified via @B_android#icu#text#DecimalFormat#setNegativeSuffix_E@, the string will be returned literally.", "history": "Added in API level 24", "FullName": "public String getNegativeSuffix ()"}, "getPositiveSuffix()": {"Returns": [["@B_java#lang#String_E@", "The string being appended to positive numbers."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the affix was specified via the pattern, the string returned by this method will have locale symbols substituted in place of special characters according to the LDML specification. If the affix was specified via @B_android#icu#text#DecimalFormat#setPositiveSuffix_E@, the string will be returned literally.", "history": "Added in API level 24", "FullName": "public String getPositiveSuffix ()"}, "setMinimumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: The minimum number of digits before the decimal separator."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For example, if minimum integer digits is 3, the number 12.3 will be printed as \"001.23\". Minimum integer and minimum and maximum fraction digits can be specified via the pattern string. For example, \"#,#00.00#\" has 2 minimum integer digits, 2 minimum fraction digits, and 3 maximum fraction digits. Note that it is not possible to specify maximium integer digits in the pattern except in scientific notation. If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3.", "history": "Added in API level 24", "FullName": "public void setMinimumIntegerDigits (int value)"}, "setExponentSignAlwaysShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to always shown the sign in the exponent; false to show it for negatives but not positives."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US. The number 0.0000123 will always be printed as \"1.23E-5\" in locale en-US whether or not this setting is enabled. This setting corresponds to the '+' in a pattern such as \"0.00E+0\".", "history": "Added in API level 24", "FullName": "public void setExponentSignAlwaysShown (boolean expSignAlways)"}, "getMaximumSignificantDigits()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getMaximumSignificantDigits ()"}, "DecimalFormat(java.lang.String,android.icu.text.DecimalFormatSymbols,android.icu.text.CurrencyPluralInfo,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a non-localized pattern string"], ["@B_android#icu#text#DecimalFormatSymbols_E@", "DecimalFormatSymbols: the set of symbols to be used"], ["@B_android#icu#text#CurrencyPluralInfo_E@", "CurrencyPluralInfo: the information used for currency plural format, including currency plural patterns and plural rules."], ["int", "int: the decimal formatting style, it is one of the following values: NumberFormat.NUMBERSTYLE; NumberFormat.CURRENCYSTYLE; NumberFormat.PERCENTSTYLE; NumberFormat.SCIENTIFICSTYLE; NumberFormat.INTEGERSTYLE; NumberFormat.ISOCURRENCYSTYLE; NumberFormat.PLURALCURRENCYSTYLE;"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a DecimalFormat based on the given pattern and symbols, with additional control over the behavior of currency. The style argument determines whether currency rounding rules should override the pattern, and the @B_android#icu#text#CurrencyPluralInfo_E@ object is used for customizing the plural forms used for currency long names. Most users should call the factory methods on NumberFormat, such as @B_android#icu#text#NumberFormat#getNumberInstance_E@, which return localized formatter objects, instead of the DecimalFormat constructors.", "history": "Added in API level 24", "FullName": "public DecimalFormat (String pattern, DecimalFormatSymbols symbols, CurrencyPluralInfo infoInput, int style)"}, "setParseStrict(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable strict parsing. Default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The presence and position of special symbols, including currency, must match the pattern. '+123' fails (there is no plus sign in the pattern) Leading or doubled grouping separators ',123' and '1,,234\" fail Groups of incorrect length when grouping is used '1,23' and '1234,567' fail, but '1234' passes Grouping separators used in numbers followed by exponents '1,234E5' fails, but '1234E5' and '1,234E' pass ('E' is not an exponent when not followed by a number) When strict parsing is off, all grouping separators are ignored. This is the default behavior.", "history": "Added in API level 24", "FullName": "public void setParseStrict (boolean parseStrict)"}, "getMultiplier()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMultiplier_E@"], "Permissions": [], "Description": "Returns the multiplier being applied to numbers before they are formatted.", "history": "Added in API level 24", "FullName": "public int getMultiplier ()"}, "setMaximumSignificantDigits(int)": {"Returns": [], "Parameters": [["int", "int: The maximum number of significant digits to display."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingMode_E@", "@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@", "@B_android#icu#text#DecimalFormat#setMaximumFractionDigits_E@"], "Permissions": [], "Description": "For example, if maximum significant digits is 3 and the number is 12345, the number will be printed as \"12300\". If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3. See @B_android#icu#text#DecimalFormat#setRoundingIncrement_E@ and @B_android#icu#text#DecimalFormat#setMaximumFractionDigits_E@ for two other ways of specifying rounding strategies.", "history": "Added in API level 24", "FullName": "public void setMaximumSignificantDigits (int value)"}, "getPadCharacter()": {"Returns": [["char", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setPadCharacter_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public char getPadCharacter ()"}, "setRoundingIncrement(android.icu.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The increment to which numbers are to be rounded."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormat#setRoundingIncrement_E@.", "history": "Added in API level 24", "FullName": "public void setRoundingIncrement (BigDecimal increment)"}, "setMinimumExponentDigits(byte)": {"Returns": [], "Parameters": [["byte", "byte: The minimum number of digits in the exponent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This setting corresponds to the number of zeros after the 'E' in a pattern string such as \"0.00E000\".", "history": "Added in API level 24", "FullName": "public void setMinimumExponentDigits (byte minExpDig)"}, "setParseBigDecimal(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to cause @B_android#icu#text#NumberFormat#parse_E@ to prefer BigDecimal; false to let @B_android#icu#text#NumberFormat#parse_E@ return additional data types like Long or BigInteger."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to make @B_android#icu#text#NumberFormat#parse_E@ prefer returning a @B_android#icu#math#BigDecimal_E@ when possible. For strings corresponding to return values of Infinity, -Infinity, NaN, and -0.0, a Double will be returned even if ParseBigDecimal is enabled.", "history": "Added in API level 24", "FullName": "public void setParseBigDecimal (boolean value)"}, "setRoundingIncrement(java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: The increment to which numbers are to be rounded."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setRoundingMode_E@", "@B_android#icu#text#DecimalFormat#setMaximumFractionDigits_E@", "@B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@"], "Permissions": [], "Description": "The rounding increment can be specified via the pattern string: for example, the pattern \"#,##0.05\" encodes a rounding increment of 0.05. The rounding increment is applied after any multipliers might take effect; for example, in scientific notation or when @B_android#icu#text#DecimalFormat#setMultiplier_E@ is used. See @B_android#icu#text#DecimalFormat#setMaximumFractionDigits_E@ and @B_android#icu#text#DecimalFormat#setMaximumSignificantDigits_E@ for two other ways of specifying rounding strategies.", "history": "Added in API level 24", "FullName": "public void setRoundingIncrement (BigDecimal increment)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "DecimalFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getInstance_E@", "@B_android#icu#text#NumberFormat#getNumberInstance_E@", "@B_android#icu#text#NumberFormat#getCurrencyInstance_E@", "@B_android#icu#text#NumberFormat#getPercentInstance_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a DecimalFormat based on the number pattern and symbols for the default locale. This is a convenient way to obtain a DecimalFormat instance when internationalization is not the main concern. Most users should call the factory methods on NumberFormat, such as @B_android#icu#text#NumberFormat#getNumberInstance_E@, which return localized formatter objects, instead of the DecimalFormat constructors.", "history": "Added in API level 24", "FullName": "public DecimalFormat ()"}, "setMinimumSignificantDigits(int)": {"Returns": [], "Parameters": [["int", "int: The minimum number of significant digits to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For example, if minimum significant digits is 3 and the number is 1.2, the number will be printed as \"1.20\". If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3.", "history": "Added in API level 24", "FullName": "public void setMinimumSignificantDigits (int value)"}, "DecimalFormat(java.lang.String,android.icu.text.DecimalFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A pattern string such as \"#,##0.00\" conforming to UTS #35."], ["@B_android#icu#text#DecimalFormatSymbols_E@", "DecimalFormatSymbols: The set of symbols to be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": ["@B_android#icu#text#NumberFormat#getInstance_E@", "@B_android#icu#text#NumberFormat#getNumberInstance_E@", "@B_android#icu#text#NumberFormat#getCurrencyInstance_E@", "@B_android#icu#text#NumberFormat#getPercentInstance_E@", "@B_android#icu#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Creates a DecimalFormat based on the given pattern and symbols. Use this constructor if you want complete control over the behavior of the formatter. Most users should call the factory methods on NumberFormat, such as @B_android#icu#text#NumberFormat#getNumberInstance_E@, which return localized formatter objects, instead of the DecimalFormat constructors.", "history": "Added in API level 24", "FullName": "public DecimalFormat (String pattern, DecimalFormatSymbols symbols)"}, "setCurrencyUsage(android.icu.util.Currency.CurrencyUsage)": {"Returns": [], "Parameters": [["@B_android#icu#util#Currency#CurrencyUsage_E@", "Currency.CurrencyUsage: The strategy to use when rounding in the current currency."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "STANDARD: When the amount displayed is intended for banking statements or electronic transfer. CASH: When the amount displayed is intended to be representable in physical currency, like at a cash register. CASH mode is relevant in currencies that do not have tender down to the penny. For more information on the two rounding strategies, see @B_android#icu#text#DecimalFormat#setMinimumFractionDigits_E@ and @B_android#icu#text#DecimalFormat#setMaximumFractionDigits_E@ or @B_android#icu#text#DecimalFormat#setRoundingIncrement_E@.", "history": "Added in API level 24", "FullName": "public void setCurrencyUsage (Currency.CurrencyUsage usage)"}, "setPositivePrefix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The literal string to prepend to positive numbers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US. Using this method overrides the affix specified via the pattern, and unlike the pattern, the string given to this method will be interpreted literally WITHOUT locale symbol substitutions.", "history": "Added in API level 24", "FullName": "public void setPositivePrefix (String prefix)"}, "getDecimalFormatSymbols()": {"Returns": [["@B_android#icu#text#DecimalFormatSymbols_E@", "desired DecimalFormatSymbols"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Returns a copy of the decimal format symbols used by this formatter.", "history": "Added in API level 24", "FullName": "public DecimalFormatSymbols getDecimalFormatSymbols ()"}, "DecimalFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A pattern string such as \"#,##0.00\" conforming to UTS #35."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid."]], "SeeAlso": ["@B_android#icu#text#NumberFormat#getInstance_E@", "@B_android#icu#text#NumberFormat#getNumberInstance_E@", "@B_android#icu#text#NumberFormat#getCurrencyInstance_E@", "@B_android#icu#text#NumberFormat#getPercentInstance_E@", "@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Creates a DecimalFormat based on the given pattern, using symbols for the default locale. This is a convenient way to obtain a DecimalFormat instance when internationalization is not the main concern. Most users should call the factory methods on NumberFormat, such as @B_android#icu#text#NumberFormat#getNumberInstance_E@, which return localized formatter objects, instead of the DecimalFormat constructors.", "history": "Added in API level 24", "FullName": "public DecimalFormat (String pattern)"}, "isParseBigDecimal()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setParseBigDecimal_E@"], "Permissions": [], "Description": "Returns whether @B_android#icu#text#NumberFormat#parse_E@ will always return a BigDecimal.", "history": "Added in API level 24", "FullName": "public boolean isParseBigDecimal ()"}, "setSignificantDigitsUsed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable significant digit rounding; false to disable it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calling df.setSignificantDigitsUsed(true) is functionally equivalent to:", "history": "Added in API level 24", "FullName": "public void setSignificantDigitsUsed (boolean useSignificantDigits)"}, "isScientificNotation()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setScientificNotation_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isScientificNotation ()"}, "isParseStrict()": {"Returns": [["boolean", "true if strict parsing is in effect"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isParseStrict ()"}, "setDecimalSeparatorAlwaysShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to always show the decimal separator; false to show it only when there is a fraction part of the number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US) is shown on integers. For example, if this setting is turned on, formatting 123 will result in \"123.\" with the decimal separator. This setting can be specified in the pattern for integer formats: \"#,##0.\" is an example.", "history": "Added in API level 24", "FullName": "public void setDecimalSeparatorAlwaysShown (boolean value)"}, "setDecimalPatternMatchRequired(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to either require or forbid the decimal point according to the pattern; false to disable this feature."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setParseIntegerOnly_E@"], "Permissions": [], "Description": "require or forbid the presence of a decimal point in the string being parsed (disabled by default). This feature was designed to be an extra layer of strictness on top of strict parsing, although it can be used in either lenient mode or strict mode. To require a decimal point, call this method in combination with either a pattern containing a decimal point or with @B_android#icu#text#DecimalFormat#setDecimalSeparatorAlwaysShown_E@. forbid a decimal point, call this method in combination with a pattern containing no decimal point. Alternatively, use @B_android#icu#text#DecimalFormat#setParseIntegerOnly_E@ for the same behavior without depending on the contents of the pattern string.", "history": "Added in API level 24", "FullName": "public void setDecimalPatternMatchRequired (boolean value)"}, "format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public StringBuffer format (BigDecimal number, StringBuffer result, FieldPosition fieldPosition)"}, "setNegativeSuffix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The literal string to append to negative numbers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "en-US. Using this method overrides the affix specified via the pattern, and unlike the pattern, the string given to this method will be interpreted literally WITHOUT locale symbol substitutions.", "history": "Added in API level 24", "FullName": "public void setNegativeSuffix (String suffix)"}, "getMinimumIntegerDigits()": {"Returns": [["int", "the minimum number of integer digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the effective minimum number of digits before the decimal separator.", "history": "Added in API level 24", "FullName": "public int getMinimumIntegerDigits ()"}, "parseCurrency(java.lang.CharSequence,java.text.ParsePosition)": {"Returns": [["@B_android#icu#util#CurrencyAmount_E@", "a CurrencyAmount, or null upon failure"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: input-output position; on input, the position within text to match; must have 0 <= pos.getIndex() < text.length(); on output, the position after the last matched character. If the parse fails, the position in unchanged upon output."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parses text from the given string as a CurrencyAmount. Unlike the parse() method, this method will attempt to parse a generic currency name, searching for a match of this object's locale's currency display names, or for a 3-letter ISO currency code. This method will fail if this format is not a currency format, that is, if it does not contain the currency pattern symbol (U+00A4) in its prefix or suffix.", "history": "Added in API level 24", "FullName": "public CurrencyAmount parseCurrency (CharSequence text, ParsePosition parsePosition)"}, "setCurrency(android.icu.util.Currency)": {"Returns": [], "Parameters": [["@B_android#icu#util#Currency_E@", "Currency: The currency to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currency to be used when formatting numbers. The effect is twofold: @B_android#icu#text#NumberFormat#getCurrencyInstance_E@ or one of its friends.", "history": "Added in API level 24", "FullName": "public void setCurrency (Currency currency)"}, "format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public StringBuffer format (BigInteger number, StringBuffer result, FieldPosition fieldPosition)"}, "setMaximumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: The maximum number of digits before the decimal separator."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For example, if maximum integer digits is 3, the number 12345 will be printed as \"345\". Minimum integer and minimum and maximum fraction digits can be specified via the pattern string. For example, \"#,#00.00#\" has 2 minimum integer digits, 2 minimum fraction digits, and 3 maximum fraction digits. Note that it is not possible to specify maximium integer digits in the pattern except in scientific notation. If minimum and maximum integer, fraction, or significant digits conflict with each other, the most recently specified value is used. For example, if there is a formatter with minInt=5, and then you set maxInt=3, then minInt will be changed to 3.", "history": "Added in API level 24", "FullName": "public void setMaximumIntegerDigits (int value)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides clone.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double. The return type is not guaranteed other than for the Long case. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! For more detail on parsing, see the \"Parsing\" header in the class documentation of @B_android#icu#text#DecimalFormat_E@.", "history": "added in API level 24", "FullName": "public Number parse (String text, ParsePosition parsePosition)"}, "getMinimumSignificantDigits()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMinimumSignificantDigits_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getMinimumSignificantDigits ()"}, "getCurrencyUsage()": {"Returns": [["@B_android#icu#util#Currency#CurrencyUsage_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setCurrencyUsage_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Currency.CurrencyUsage getCurrencyUsage ()"}, "setPadCharacter(char)": {"Returns": [], "Parameters": [["char", "char: The character used for padding."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setFormatWidth_E@"], "Permissions": [], "Description": "@B_android#icu#text#DecimalFormat#setFormatWidth_E@. In the pattern string, the padding character is the token that follows '*' before or after the prefix or suffix.", "history": "Added in API level 24", "FullName": "public void setPadCharacter (char padChar)"}, "getMathContextICU()": {"Returns": [["@B_android#icu#math#MathContext_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setMathContext_E@"], "Permissions": [], "Description": "@B_android#icu#math#MathContext_E@ being used to round numbers.", "history": "Added in API level 24", "FullName": "public MathContext getMathContextICU ()"}, "isDecimalSeparatorAlwaysShown()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setDecimalSeparatorAlwaysShown_E@"], "Permissions": [], "Description": "Returns whether the decimal separator is shown on integers.", "history": "Added in API level 24", "FullName": "public boolean isDecimalSeparatorAlwaysShown ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the object is equal to this."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests for equality between this formatter and another formatter. If two DecimalFormat instances are equal, then they will always produce the same output. However, the reverse is not necessarily true: if two DecimalFormat instances always produce the same output, they are not necessarily equal.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public StringBuffer format (BigDecimal number, StringBuffer result, FieldPosition fieldPosition)"}, "formatToCharacterIterator(java.lang.Object)": {"Returns": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator describing the formatted value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats an Object producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. Each attribute key of the AttributedCharacterIterator will be of type Field. It is up to each Format implementation to define what the legal values are for each attribute in the AttributedCharacterIterator, but typically the attribute key is also used as the attribute value. The default implementation creates an AttributedCharacterIterator with no attributes. Subclasses that support fields should override this and create an AttributedCharacterIterator with meaningful attributes.", "history": "Added in API level 24", "FullName": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)"}, "setParseIntegerOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to ignore fractional parts of numbers when parsing; false to consume fractional parts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For example, in en-US, parsing the string \"123.45\" will return the number 123 and parse position 3. This is functionally equivalent to calling @B_android#icu#text#DecimalFormat#setDecimalPatternMatchRequired_E@ and a pattern without a decimal point.", "history": "Added in API level 24", "FullName": "public void setParseIntegerOnly (boolean parseIntegerOnly)"}, "toPattern()": {"Returns": [["@B_java#lang#String_E@", "A decimal format pattern string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Serializes this formatter object to a decimal format pattern string. The result of this method is guaranteed to be functionally equivalent to the pattern string used to create this instance after incorporating values from the setter methods. For more information on decimal format pattern strings, see @B_android#icu#text#DecimalFormat#applyPattern_E@.", "history": "Added in API level 24", "FullName": "public String toPattern ()"}, "getPadPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#DecimalFormat#setPadPosition_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getPadPosition ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@", "@B_android#icu#text#NumberFormat_E@"], "ClassName": "android.icu.text.DecimalFormat", "ClassDesc": "@B_java#text#DecimalFormat_E@. Methods, fields, and other functionality specific to ICU are labeled 'DecimalFormat is the primary concrete subclass of @B_android#icu#text#NumberFormat_E@. It has a variety of features designed to make it possible to parse and format numbers in any locale, including support for Western, Arabic, or Indic digits. It supports different flavors of numbers, including integers (\"123\"), fixed-point numbers (\"123.4\"), scientific notation (\"1.23E4\"), percentages (\"12%\"), and currency amounts (\"$123.00\", \"USD123.00\", \"123.00 US dollars\"). All of these flavors can be easily localized. To obtain a number formatter for a specific locale (including the default locale), call one of NumberFormat's factory methods such as @B_android#icu#text#NumberFormat#getInstance_E@. Do not call DecimalFormat constructors directly unless you know what you are doing. DecimalFormat aims to comply with the specification Customize settings on a DecimalFormat instance from the NumberFormat factory: Quick and dirty print out a number using the localized number, currency, and percent format for each locale: A DecimalFormat object encapsulates a set of properties and a set of symbols. Grouping size, rounding mode, and affixes are examples of properties. Locale digits and the characters used for grouping and decimal separators are examples of symbols. To set a custom set of symbols, use @B_android#icu#text#DecimalFormat#setDecimalFormatSymbols_E@. Use the various other setters in this class to set custom values for the properties. DecimalFormat provides three main strategies to specify the position at which numbers should be rounded: It is not possible to specify more than one rounding strategy. For example, setting a rounding increment in conjunction with significant digits results in undefined behavior. It is also possible to specify the rounding mode to use. The default rounding mode is \"half even\", which rounds numbers to their closest increment, with ties broken in favor of trailing numbers being even. For more information, see @B_android#icu#text#DecimalFormat#setRoundingMode_E@ and A pattern string is a way to serialize some of the available properties for decimal formatting. However, not all properties are capable of being serialized into a pattern string; see @B_android#icu#text#DecimalFormat#applyPattern_E@ for more information. Most users should not need to interface with pattern strings directly. ICU DecimalFormat aims to follow the specification for pattern strings in The first subpattern is for positive numbers. The second (optional) subpattern is for negative numbers. Not indicated in the BNF syntax above: The grouping separator ',' can occur inside the integer and sigDigits elements, between any two pattern characters of that element, as long as the integer or sigDigits element is not followed by the exponent element. Two grouping intervals are recognized: That between the decimal point and the first grouping symbol, and that between the first and second grouping symbols. These intervals are identical in most locales, but in some locales they differ. For example, the pattern \"#,##,###\" formats the number 123456789 as \"12,34,56,789\". The pad specifier padSpec may appear before the prefix, after the prefix, before the suffix, after the suffix, or not at all. In place of '0', the digits '1' through '9' may be used to indicate a rounding increment. DecimalFormat aims to be able to parse anything that it can output as a formatted string. There are two primary parse modes: lenient and strict. Lenient mode should be used if the goal is to parse user input to a number; strict mode should be used if the goal is validation. The default is lenient mode. For more information, see @B_android#icu#text#DecimalFormat#setParseStrict_E@. DecimalFormat parses all Unicode characters that represent decimal digits, as defined by @B_android#icu#lang#UCharacter#digit_E@. In addition, DecimalFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the @B_android#icu#text#DecimalFormatSymbols_E@ object. During formatting, the @B_android#icu#text#DecimalFormatSymbols_E@-based digits are output. Grouping separators are ignored in lenient mode (default). In strict mode, grouping separators must match the locale-specified grouping sizes. When using @B_android#icu#text#DecimalFormat#parseCurrency_E@, all currencies are accepted, not just the currency currently set in the formatter. In addition, the formatter is able to parse every currency style format for a particular locale no matter which style the formatter is constructed with. For example, a formatter instance gotten from NumberFormat.getInstance(ULocale, NumberFormat.CURRENCYSTYLE) can parse both \"USD1.00\" and \"3.00 US dollars\". Whitespace characters (lenient mode) and control characters (lenient and strict mode), collectively called \"ignorables\", do not need to match in identity or quantity between the pattern string and the input string. For example, the pattern \"# %\" matches \"35 %\" (with a single space), \"35%\" (with no space), \"35 %\" (with a non-breaking space), and \"35 %\" (with multiple spaces). Arbitrary ignorables are also allowed at boundaries between the parts of the number: prefix, number, exponent separator, and suffix. Ignorable whitespace characters are those having the Unicode \"blank\" property for regular expressions, defined in UTS #18 Annex C, which is \"horizontal\" whitespace, like spaces and tabs, but not \"vertical\" whitespace, like line breaks. Ignorable control characters are those in the Unicode set [:Default_Ignorable_Code_Point:]. If @B_android#icu#text#DecimalFormat#parse_E@ fails to parse a string, it returns null and leaves the parse position unchanged. The convenience method @B_android#icu#text#NumberFormat#parse_E@ indicates parse failure by throwing a @B_java#text#ParseException_E@. Under the hood, a state table parsing engine is used. To debug a parsing failure during development, use the following pattern to print details about the state table transitions: Starting with ICU 59, instances of DecimalFormat are thread-safe. Under the hood, DecimalFormat maintains an immutable formatter object that is rebuilt whenever any of the property setters are called. It is therefore best practice to call property setters only during construction and not when formatting numbers online."}