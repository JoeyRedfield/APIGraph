{"Functions": {"setEpicenterCallback(android.transition.Transition.EpicenterCallback)": {"Returns": [], "Parameters": [["@B_android#transition#Transition#EpicenterCallback_E@", "Transition.EpicenterCallback: The callback to use to find the epicenter of the Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the callback to use to find the epicenter of a Transition. A null value indicates that there is no epicenter in the Transition and onGetEpicenter() will return null. Transitions like @B_android#transition#Explode_E@ use a point or Rect to orient the direction of travel. This is called the epicenter of the Transition and is typically centered on a touched View. The @B_android#transition#Transition#EpicenterCallback_E@ allows a Transition to dynamically retrieve the epicenter during a Transition.", "history": "Added in API level 21", "FullName": "public void setEpicenterCallback (Transition.EpicenterCallback epicenterCallback)"}, "removeTarget(android.view.View)": {"Returns": [["@B_android#transition#TransitionSet_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: The target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "Added in API level 19", "FullName": "public TransitionSet removeTarget (View target)"}, "addTarget(java.lang.String)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition to which the target transitionName is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the transitionName of a target view that this Transition is interested in animating. By default, there are no targetNames, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetNames constrains the Transition to only listen for, and act on, views with these transitionNames. Views with different transitionNames, or no transitionName whatsoever, will be ignored. Note that transitionNames should be unique within the view hierarchy.", "history": "Added in API level 21", "FullName": "public TransitionSet addTarget (String targetName)"}, "setStartDelay(long)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transition object."]], "Parameters": [["long", "long: The length of the delay, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the startDelay of this transition. By default, there is no delay (indicated by a negative number), which means that the Animator created by the transition will have its own specified startDelay. If the delay of a Transition is set, that delay will override the Animator delay.", "history": "Added in API level 19", "FullName": "public TransitionSet setStartDelay (long startDelay)"}, "excludeTarget(java.lang.String, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 21", "FullName": "public Transition excludeTarget (String targetName, boolean exclude)"}, "captureStartValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the start scene for the properties that this transition monitors. These values are then passed as the startValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureStartValues (TransitionValues transitionValues)"}, "setOrdering(int)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["int", "int: @B_android#transition#TransitionSet#ORDERING_TOGETHER_E@ to play this set's child transitions together, @B_android#transition#TransitionSet#ORDERING_SEQUENTIAL_E@ to play the child transitions in sequence."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the play order of this set's child transitions.", "history": "Added in API level 19", "FullName": "public TransitionSet setOrdering (int ordering)"}, "addTarget(java.lang.Class)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition to which the target class was added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(ImageView.class);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to include when running this transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the Class of a target view that this Transition is interested in animating. By default, there are no targetTypes, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetTypes constrains the Transition to only listen for, and act on, views with these classes. Views with different classes will be ignored. Note that any View that can be cast to targetType will be included, so if targetType is View.class, all Views will be included.", "history": "Added in API level 21", "FullName": "public TransitionSet addTarget (Class targetType)"}, "excludeTarget(int, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (int targetId, boolean exclude)"}, "excludeTarget(android.view.View,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (View target, boolean exclude)"}, "TransitionSet(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TransitionSet (Context context, AttributeSet attrs)"}, "addTarget(android.view.View)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition to which the target is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: A View on which the Transition will act, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the target view instances that this Transition is interested in animating. By default, there are no targets, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targets constrains the Transition to only listen for, and act on, these views. All other views will be ignored. The target list is like the @B_android#transition#Transition#addTarget_E@ list except this list specifies the actual View instances, not the ids of the views. This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance. If the transition should treat those views as the same, then @B_android#transition#Transition#addTarget_E@ should be used instead of @B_android#transition#Transition#addTarget_E@. If, on the other hand, scene changes involve changes all within the same view hierarchy, among views which do not necessarily have ids set on them, then the target list of views may be more convenient.", "history": "Added in API level 19", "FullName": "public TransitionSet addTarget (View target)"}, "removeTransition(android.transition.Transition)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["@B_android#transition#Transition_E@", "Transition: The transition to be removed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified child transition from this set.", "history": "Added in API level 19", "FullName": "public TransitionSet removeTransition (Transition transition)"}, "excludeTarget(java.lang.Class, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (Class type, boolean exclude)"}, "addTransition(android.transition.Transition)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["@B_android#transition#Transition_E@", "Transition: A non-null child transition to be added to this set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds child transition to this set. The order in which this child transition is added relative to other child transitions that are added, in addition to the @B_android#transition#TransitionSet#getOrdering_E@ property, determines the order in which the transitions are started. If this transitionSet has a @B_android#transition#Transition#getDuration_E@, @B_android#transition#Transition#getInterpolator_E@, @B_android#transition#Transition#getPropagation_E@, @B_android#transition#Transition#getPathMotion_E@, or @B_android#transition#TransitionSet#setEpicenterCallback_E@ set on it, the child transition will inherit the values that are set. Transitions are assumed to have a maximum of one transitionSet parent.", "history": "Added in API level 19", "FullName": "public TransitionSet addTransition (Transition transition)"}, "removeTarget(java.lang.String)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition from which the targetName is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetName(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetName from the list of transitionNames that this Transition is interested in animating.", "history": "Added in API level 21", "FullName": "public TransitionSet removeTarget (String target)"}, "removeListener(android.transition.Transition.TransitionListener)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transition object."]], "Parameters": [["@B_android#transition#Transition#TransitionListener_E@", "Transition.TransitionListener: the listener to be removed from the current set of listeners for this transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a listener from the set listening to this animation.", "history": "Added in API level 19", "FullName": "public TransitionSet removeListener (Transition.TransitionListener listener)"}, "captureEndValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the end scene for the properties that this transition monitors. These values are then passed as the endValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureEndValues (TransitionValues transitionValues)"}, "clone()": {"Returns": [["@B_android#transition#TransitionSet_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 19", "FullName": "public TransitionSet clone ()"}, "setPathMotion(android.transition.PathMotion)": {"Returns": [], "Parameters": [["@B_android#transition#PathMotion_E@", "PathMotion: Algorithm object to use for determining how to interpolate in two dimensions. If null, a straight-path algorithm will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the algorithm used to calculate two-dimensional interpolation. Transitions such as @B_android#transition#ChangeBounds_E@ move Views, typically in a straight path between the start and end positions. Applications that desire to have these motions move in a curve can change how Views interpolate in two dimensions by extending PathMotion and implementing @B_android#transition#PathMotion#getPath_E@. When describing in XML, use a nested XML tag for the path motion. It can be one of the built-in tags arcMotion or patternPathMotion or it can be a custom PathMotion using pathMotion with the class attributed with the fully-described class name. For example: or", "history": "Added in API level 21", "FullName": "public void setPathMotion (PathMotion pathMotion)"}, "getTransitionAt(int)": {"Returns": [["@B_android#transition#Transition_E@", "no returns description in source"]], "Parameters": [["int", "int: The position of the Transition to retrieve."]], "Throws": [], "SeeAlso": ["@B_android#transition#TransitionSet#addTransition_E@", "@B_android#transition#TransitionSet#getTransitionCount_E@"], "Permissions": [], "Description": "Returns the child Transition at the specified position in the TransitionSet.", "history": "Added in API level 21", "FullName": "public Transition getTransitionAt (int index)"}, "excludeTarget(int,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (int targetId, boolean exclude)"}, "getTransitionCount()": {"Returns": [["int", "The number of child transitions in the TransitionSet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#transition#TransitionSet#addTransition_E@", "@B_android#transition#TransitionSet#getTransitionAt_E@"], "Permissions": [], "Description": "Returns the number of child transitions in the TransitionSet.", "history": "Added in API level 21", "FullName": "public int getTransitionCount ()"}, "addTarget(int)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition to which the targetId is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the id of a target view that this Transition is interested in animating. By default, there are no targetIds, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetIds constrains the Transition to only listen for, and act on, views with these IDs. Views with different IDs, or no IDs whatsoever, will be ignored. Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.", "history": "Added in API level 19", "FullName": "public TransitionSet addTarget (int targetId)"}, "removeTarget(java.lang.Class)": {"Returns": [["@B_android#transition#TransitionSet_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someType);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type of the target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "Added in API level 21", "FullName": "public TransitionSet removeTarget (Class target)"}, "removeTarget(int)": {"Returns": [["@B_android#transition#TransitionSet_E@", "The Transition from which the targetId is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetId(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetId from the list of ids that this Transition is interested in animating.", "history": "Added in API level 19", "FullName": "public TransitionSet removeTarget (int targetId)"}, "setDuration(long)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transitionSet object."]], "Parameters": [["long", "long: The length of the animation, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Setting a non-negative duration on a TransitionSet causes all of the child transitions (current and future) to inherit this duration.", "history": "Added in API level 19", "FullName": "public TransitionSet setDuration (long duration)"}, "excludeTarget(java.lang.Class,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (Class type, boolean exclude)"}, "addListener(android.transition.Transition.TransitionListener)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transition object."]], "Parameters": [["@B_android#transition#Transition#TransitionListener_E@", "Transition.TransitionListener: the listener to be added to the current set of listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.", "history": "Added in API level 19", "FullName": "public TransitionSet addListener (Transition.TransitionListener listener)"}, "excludeTarget(java.lang.String,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 21", "FullName": "public Transition excludeTarget (String targetName, boolean exclude)"}, "TransitionSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty transition set. Add child transitions to the set by calling @B_android#transition#TransitionSet#addTransition_E@ )}. By default, child transitions will play @B_android#transition#TransitionSet#ORDERING_TOGETHER_E@.", "history": "Added in API level 19", "FullName": "public TransitionSet ()"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [["@B_android#transition#TransitionSet_E@", "This transition object."]], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: The time interpolator used by the transition"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the interpolator of this transition. By default, the interpolator is null, which means that the Animator created by the transition will have its own specified interpolator. If the interpolator of a Transition is set, that interpolator will override the Animator interpolator.", "history": "Added in API level 19", "FullName": "public TransitionSet setInterpolator (TimeInterpolator interpolator)"}, "excludeTarget(android.view.View, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (View target, boolean exclude)"}, "setPropagation(android.transition.TransitionPropagation)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionPropagation_E@", "TransitionPropagation: The class used to determine the start delay of Animators created by this Transition. A null value indicates that no delay should be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the method for determining Animator start delays. When a Transition affects several Views like @B_android#transition#Explode_E@ or @B_android#transition#Slide_E@, there may be a desire to have a \"wave-front\" effect such that the Animator start delay depends on position of the View. The TransitionPropagation specifies how the start delays are calculated.", "history": "Added in API level 21", "FullName": "public void setPropagation (TransitionPropagation propagation)"}, "getOrdering()": {"Returns": [["int", "@B_android#transition#TransitionSet#ORDERING_TOGETHER_E@ if child transitions will play at the same time, @B_android#transition#TransitionSet#ORDERING_SEQUENTIAL_E@ if they will play in sequence."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#transition#TransitionSet#setOrdering_E@"], "Permissions": [], "Description": "Returns the ordering of this TransitionSet. By default, the value is @B_android#transition#TransitionSet#ORDERING_TOGETHER_E@.", "history": "Added in API level 19", "FullName": "public int getOrdering ()"}}, "Inheritance": ["@B_android#transition#Transition_E@"], "ClassName": "android.transition.TransitionSet", "ClassDesc": "A TransitionSet is a parent of child transitions (including other TransitionSets). Using TransitionSets enables more complex choreography of transitions, where some sets play @B_android#transition#TransitionSet#ORDERING_TOGETHER_E@ and others play @B_android#transition#TransitionSet#ORDERING_SEQUENTIAL_E@. For example, @B_android#transition#AutoTransition_E@ uses a TransitionSet to sequentially play a Fade(Fade.OUT), followed by a @B_android#transition#ChangeBounds_E@, followed by a Fade(Fade.OUT) transition. A TransitionSet can be described in a resource file by using the tag transitionSet, along with the standard attributes of @B_android#R#styleable#TransitionSet_E@ and @B_android#R#styleable#Transition_E@. Child transitions of the TransitionSet object can be loaded by adding those child tags inside the enclosing transitionSet tag. For example, the following xml describes a TransitionSet that plays a Fade and then a ChangeBounds transition on the affected view targets:"}