{"Functions": {"accept(double)": {"Returns": [], "Parameters": [["double", "double: the input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given argument.", "history": "Added in API level 24", "FullName": "public abstract void accept (double value)"}, "andThen(java.util.function.DoubleConsumer)": {"Returns": [["@B_java#util#function#DoubleConsumer_E@", "a composed DoubleConsumer that performs in sequence this operation followed by the after operation"]], "Parameters": [["@B_java#util#function#DoubleConsumer_E@", "DoubleConsumer: the operation to perform after this operation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed DoubleConsumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.", "history": "Added in API level 24", "FullName": "public DoubleConsumer andThen (DoubleConsumer after)"}}, "Inheritance": [], "ClassName": "java.util.function.DoubleConsumer", "ClassDesc": "Represents an operation that accepts a single double-valued argument and returns no result. This is the primitive type specialization of @B_java#util#function#Consumer_E@ for double. Unlike most other functional interfaces, DoubleConsumer is expected to operate via side-effects. This is a @B_java#util#function#DoubleConsumer#accept_E@."}