{"Functions": {"supportsCommands(java.lang.String[])": {"Returns": [["boolean[]", "Array of booleans indicating whether each command is supported or not."]], "Parameters": [["@B_java#lang#String_E@", "String: The array of commands to query for support."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the supported commands available from the VoiceInteractionService. The command is a string that describes the generic operation to be performed. An example might be \"org.example.commands.PICK_DATE\" to ask the user to pick a date. (Note: This is not an actual working example.)", "history": "Added in API level 23", "FullName": "public boolean[] supportsCommands (String[] commands)"}, "isDestroyed()": {"Returns": [["boolean", "whether the voice interactor is destroyed. You should not interact with a destroyed voice interactor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isDestroyed ()"}, "registerOnDestroyedCallback(java.util.concurrent.Executor,java.lang.Runnable)": {"Returns": [["boolean", "whether the callback was registered."]], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: Executor on which to run the callback. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_java#lang#Runnable_E@", "Runnable: The callback to run. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to be called when the VoiceInteractor is destroyed.", "history": "Added in API level 29", "FullName": "public boolean registerOnDestroyedCallback (Executor executor, Runnable callback)"}, "getActiveRequests()": {"Returns": [["@B_android#app#VoiceInteractor#Request_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return all currently active requests.", "history": "Added in API level 23", "FullName": "public Request[] getActiveRequests ()"}, "submitRequest(android.app.VoiceInteractor.Request)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#app#VoiceInteractor#Request_E@", "VoiceInteractor.Request no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public boolean submitRequest (VoiceInteractor.Request request)"}, "notifyDirectActionsChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the assist framework that the direct actions supported by the app changed.", "history": "Added in API level 29", "FullName": "public void notifyDirectActionsChanged ()"}, "submitRequest(android.app.VoiceInteractor.Request,java.lang.String)": {"Returns": [["boolean", "Returns true of the request was successfully submitted, else false."]], "Parameters": [["@B_android#app#VoiceInteractor#Request_E@", "VoiceInteractor.Request: The desired request to submit."], ["@B_java#lang#String_E@", "String: An optional name for this request, or null. This can be used later with @B_android#app#VoiceInteractor#getActiveRequests_E@ and @B_android#app#VoiceInteractor#getActiveRequest_E@ to find the request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submit a new @B_android#app#VoiceInteractor#Request_E@ to the voice interaction service. The request must be one of the available subclasses -- @B_android#app#VoiceInteractor#ConfirmationRequest_E@, @B_android#app#VoiceInteractor#PickOptionRequest_E@, @B_android#app#VoiceInteractor#CompleteVoiceRequest_E@, @B_android#app#VoiceInteractor#AbortVoiceRequest_E@, or @B_android#app#VoiceInteractor#CommandRequest_E@.", "history": "Added in API level 23", "FullName": "public boolean submitRequest (VoiceInteractor.Request request, String name)"}, "unregisterOnDestroyedCallback(java.lang.Runnable)": {"Returns": [["boolean", "whether the callback was unregistered."]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The callback to remove. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters a previously registered onDestroy callback", "history": "Added in API level 29", "FullName": "public boolean unregisterOnDestroyedCallback (Runnable callback)"}, "getActiveRequest(java.lang.String)": {"Returns": [["@B_android#app#VoiceInteractor#Request_E@", "Returns the active request with that name, or null if there was none."]], "Parameters": [["@B_java#lang#String_E@", "String: The name used to submit the request, as per @B_android#app#VoiceInteractor#submitRequest_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return any currently active request that was submitted with the given name.", "history": "Added in API level 23", "FullName": "public VoiceInteractor.Request getActiveRequest (String name)"}}, "Inheritance": [], "ClassName": "android.app.VoiceInteractor", "ClassDesc": "Interface for an @B_android#app#Activity_E@ to interact with the user through voice. Use @B_android#app#Activity#getVoiceInteractor_E@ to retrieve the interface, if the activity is currently involved in a voice interaction. The voice interactor revolves around submitting voice interaction requests to the back-end voice interaction service that is working with the user. These requests are submitted with @B_android#app#VoiceInteractor#submitRequest_E@, providing a new instance of a @B_android#app#VoiceInteractor#Request_E@ subclass describing the type of operation to perform -- currently the possible requests are @B_android#app#VoiceInteractor#ConfirmationRequest_E@ and @B_android#app#VoiceInteractor#CommandRequest_E@. Once a request is submitted, the voice system will process it and eventually deliver the result to the request object. The application can cancel a pending request at any time. The VoiceInteractor is integrated with Activity's state saving mechanism, so that if an activity is being restarted with retained state, it will retain the current VoiceInteractor and any outstanding requests. Because of this, you should always use @B_android#app#VoiceInteractor#Request#getActivity_E@ to get back to the activity of a request, rather than holding on to the activity instance yourself, either explicitly or implicitly through a non-static inner class."}