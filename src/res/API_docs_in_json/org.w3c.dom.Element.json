{"Functions": {"setAttributeNS(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to create or alter."], ["@B_java#lang#String_E@", "String: The qualified name of the attribute to create or alter."], ["@B_java#lang#String_E@", "String: The value to set in string form."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified qualified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NAMESPACE_ERR: Raised if the qualifiedName is malformed per the Namespaces in XML specification, if the qualifiedName has a prefix and the namespaceURI is null, if the qualifiedName has a prefix that is \"xml\" and the namespaceURI is different from \" http://www.w3.org/XML/1998/namespace\", if the qualifiedName or its prefix is \"xmlns\" and the namespaceURI is different from \"http://www.w3.org/2000/xmlns/\", or if the namespaceURI is \"http://www.w3.org/2000/xmlns/\" and neither the qualifiedName nor its prefix is \"xmlns\". NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new attribute. If an attribute with the same local name and namespace URI is already present on the element, its prefix is changed to be the prefix part of the qualifiedName, and its value is changed to be the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNodeNS or setAttributeNode to assign it as the value of an attribute. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract void setAttributeNS (String namespaceURI, String qualifiedName, String value)"}, "setIdAttributeNode(org.w3c.dom.Attr,boolean)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Attr_E@", "Attr: The attribute node."], ["boolean", "boolean: Whether the attribute is a of type ID."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."]], "SeeAlso": [], "Permissions": [], "Description": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute.", "history": "Added in API level 8", "FullName": "public abstract void setIdAttributeNode (Attr idAttr, boolean isId)"}, "removeAttributeNS(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to remove."], ["@B_java#lang#String_E@", "String: The local name of the attribute to remove."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Removes an attribute by local name and namespace URI. If a default value for the removed attribute is defined in the DTD, a new attribute immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date. If no attribute with this local name and namespace URI is found, this method has no effect. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract void removeAttributeNS (String namespaceURI, String localName)"}, "removeAttributeNode(org.w3c.dom.Attr)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "The Attr node that was removed."]], "Parameters": [["@B_org#w3c#dom#Attr_E@", "Attr: The Attr node to remove from the attribute list."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if oldAttr is not an attribute of the element."]], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified attribute node. If a default value for the removed Attr node is defined in the DTD, a new node immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date.", "history": "Added in API level 1", "FullName": "public abstract Attr removeAttributeNode (Attr oldAttr)"}, "removeAttribute(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute to remove."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Removes an attribute by name. If a default value for the removed attribute is defined in the DTD, a new attribute immediately appears with the default value as well as the corresponding namespace URI, local name, and prefix when applicable. The implementation may handle default values from other schemas similarly but applications should use Document.normalizeDocument() to guarantee this information is up-to-date. If no attribute with this name is found, this method has no effect. To remove an attribute by local name and namespace URI, use the removeAttributeNS method.", "history": "Added in API level 1", "FullName": "public abstract void removeAttribute (String name)"}, "getElementsByTagNameNS(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#NodeList_E@", "A new NodeList object containing all the matched Elements."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the elements to match on. The special value \"*\" matches all namespaces."], ["@B_java#lang#String_E@", "String: The local name of the elements to match on. The special value \"*\" matches all local names."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a NodeList of all the descendant Elements with a given local name and namespace URI in document order.", "history": "Added in API level 1", "FullName": "public abstract NodeList getElementsByTagNameNS (String namespaceURI, String localName)"}, "hasAttribute(java.lang.String)": {"Returns": [["boolean", "true if an attribute with the given name is specified on this element or has a default value, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute to look for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true when an attribute with a given name is specified on this element or has a default value, false otherwise.", "history": "Added in API level 1", "FullName": "public abstract boolean hasAttribute (String name)"}, "setIdAttribute(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["boolean", "boolean: Whether the attribute is a of type ID."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."]], "SeeAlso": [], "Permissions": [], "Description": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute. To specify an attribute by local name and namespace URI, use the setIdAttributeNS method.", "history": "Added in API level 8", "FullName": "public abstract void setIdAttribute (String name, boolean isId)"}, "getAttributeNS(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The Attr value as a string, or the empty string if that attribute does not have a specified or default value."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to retrieve."], ["@B_java#lang#String_E@", "String: The local name of the attribute to retrieve."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an attribute value by local name and namespace URI. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeNS (String namespaceURI, String localName)"}, "getAttributeNodeNS(java.lang.String,java.lang.String)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "The Attr node with the specified attribute local name and namespace URI or null if there is no such attribute."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to retrieve."], ["@B_java#lang#String_E@", "String: The local name of the attribute to retrieve."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an Attr node by local name and namespace URI. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract Attr getAttributeNodeNS (String namespaceURI, String localName)"}, "hasAttributeNS(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if an attribute with the given local name and namespace URI is specified or has a default value on this element, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to look for."], ["@B_java#lang#String_E@", "String: The local name of the attribute to look for."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract boolean hasAttributeNS (String namespaceURI, String localName)"}, "getElementsByTagName(java.lang.String)": {"Returns": [["@B_org#w3c#dom#NodeList_E@", "A list of matching Element nodes."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the tag to match on. The special value \"*\" matches all tags."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a NodeList of all descendant Elements with a given tag name, in document order.", "history": "Added in API level 1", "FullName": "public abstract NodeList getElementsByTagName (String name)"}, "getSchemaTypeInfo()": {"Returns": [["@B_org#w3c#dom#TypeInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The type information associated with this element.", "history": "Added in API level 8", "FullName": "public abstract TypeInfo getSchemaTypeInfo ()"}, "setAttribute(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute to create or alter."], ["@B_java#lang#String_E@", "String: Value to set in string form."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNode to assign it as the value of an attribute. To set an attribute with a qualified name and namespace URI, use the setAttributeNS method.", "history": "added in API level 1", "FullName": "public abstract void setAttribute (String name, String value)"}, "setIdAttributeNS(java.lang.String,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute."], ["@B_java#lang#String_E@", "String: The local name of the attribute."], ["boolean", "boolean: Whether the attribute is a of type ID."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."]], "SeeAlso": [], "Permissions": [], "Description": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute.", "history": "Added in API level 8", "FullName": "public abstract void setIdAttributeNS (String namespaceURI, String localName, boolean isId)"}, "setAttribute(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute to create or alter."], ["@B_java#lang#String_E@", "String: Value to set in string form."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INVALID_CHARACTER_ERR: Raised if the specified name is not an XML name according to the XML version in use specified in the Document.xmlVersion attribute. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new attribute. If an attribute with that name is already present in the element, its value is changed to be that of the value parameter. This value is a simple string; it is not parsed as it is being set. So any markup (such as syntax to be recognized as an entity reference) is treated as literal text, and needs to be appropriately escaped by the implementation when it is written out. In order to assign an attribute value that contains entity references, the user must create an Attr node plus any Text and EntityReference nodes, build the appropriate subtree, and use setAttributeNode to assign it as the value of an attribute. To set an attribute with a qualified name and namespace URI, use the setAttributeNS method.", "history": "Added in API level 1", "FullName": "public abstract void setAttribute (String name, String value)"}, "hasAttributeNS(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if an attribute with the given local name and namespace URI is specified or has a default value on this element, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to look for."], ["@B_java#lang#String_E@", "String: The local name of the attribute to look for."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Returns true when an attribute with a given local name and namespace URI is specified on this element or has a default value, false otherwise. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "added in API level 1", "FullName": "public abstract boolean hasAttributeNS (String namespaceURI, String localName)"}, "getAttributeNode(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "The Attr node with the specified name ( nodeName) or null if there is no such attribute."]], "Parameters": [["@B_java#lang#String_E@", "String: The name (nodeName) of the attribute to retrieve."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an attribute node by name. To retrieve an attribute node by qualified name and namespace URI, use the getAttributeNodeNS method.", "history": "Added in API level 1", "FullName": "public abstract Attr getAttributeNode (String name)"}, "setAttributeNodeNS(org.w3c.dom.Attr)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "If the newAttr attribute replaces an existing attribute with the same local name and namespace URI, the replaced Attr node is returned, otherwise null is returned."]], "Parameters": [["@B_org#w3c#dom#Attr_E@", "Attr: The Attr node to add to the attribute list."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "WRONG_DOCUMENT_ERR: Raised if newAttr was created from a different document than the one that created the element. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. The DOM user must explicitly clone Attr nodes to re-use them in other elements. NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new attribute. If an attribute with that local name and that namespace URI is already present in the element, it is replaced by the new one. Replacing an attribute node by itself has no effect. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "Added in API level 1", "FullName": "public abstract Attr setAttributeNodeNS (Attr newAttr)"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The Attr value as a string, or the empty string if that attribute does not have a specified or default value."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute to retrieve."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an attribute value by name.", "history": "Added in API level 1", "FullName": "public abstract String getAttribute (String name)"}, "setAttributeNode(org.w3c.dom.Attr)": {"Returns": [["@B_org#w3c#dom#Attr_E@", "If the newAttr attribute replaces an existing attribute, the replaced Attr node is returned, otherwise null is returned."]], "Parameters": [["@B_org#w3c#dom#Attr_E@", "Attr: The Attr node to add to the attribute list."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "WRONG_DOCUMENT_ERR: Raised if newAttr was created from a different document than the one that created the element. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. The DOM user must explicitly clone Attr nodes to re-use them in other elements."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a new attribute node. If an attribute with that name ( nodeName) is already present in the element, it is replaced by the new one. Replacing an attribute node by itself has no effect. To add a new attribute node with a qualified name and namespace URI, use the setAttributeNodeNS method.", "history": "Added in API level 1", "FullName": "public abstract Attr setAttributeNode (Attr newAttr)"}, "getTagName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The name of the element. If Node.localName is different from null, this attribute is a qualified name. For example, in: tagName has the value \"elementExample\". Note that this is case-preserving in XML, as are all of the operations of the DOM. The HTML DOM returns the tagName of an HTML element in the canonical uppercase form, regardless of the case in the source HTML document.", "history": "Added in API level 1", "FullName": "public abstract String getTagName ()"}, "setIdAttribute(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["boolean", "boolean: Whether the attribute is a of type ID."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."]], "SeeAlso": [], "Permissions": [], "Description": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute. To specify an attribute by local name and namespace URI, use the setIdAttributeNS method.", "history": "added in API level 8", "FullName": "public abstract void setIdAttribute (String name, boolean isId)"}, "getAttributeNS(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The Attr value as a string, or the empty string if that attribute does not have a specified or default value."]], "Parameters": [["@B_java#lang#String_E@", "String: The namespace URI of the attribute to retrieve."], ["@B_java#lang#String_E@", "String: The local name of the attribute to retrieve."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: May be raised if the implementation does not support the feature \"XML\" and the language exposed through the Document does not support XML Namespaces (such as [HTML 4.01])."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves an attribute value by local name and namespace URI. Per [null as the namespaceURI parameter for methods if they wish to have no namespace.", "history": "added in API level 1", "FullName": "public abstract String getAttributeNS (String namespaceURI, String localName)"}, "setIdAttributeNode(org.w3c.dom.Attr, boolean)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#Attr_E@", "Attr: The attribute node."], ["boolean", "boolean: Whether the attribute is a of type ID."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly. NOT_FOUND_ERR: Raised if the specified node is not an attribute of this element."]], "SeeAlso": [], "Permissions": [], "Description": "If the parameter isId is true, this method declares the specified attribute to be a user-determined ID attribute . This affects the value of Attr.isId and the behavior of Document.getElementById, but does not change any schema that may be in use, in particular this does not affect the Attr.schemaTypeInfo of the specified Attr node. Use the value false for the parameter isId to undeclare an attribute for being a user-determined ID attribute.", "history": "added in API level 8", "FullName": "public abstract void setIdAttributeNode (Attr idAttr, boolean isId)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.Element", "ClassDesc": "The Element interface represents an element in an HTML or XML document. Elements may have attributes associated with them; since the Element interface inherits from Node, the generic Node interface attribute attributes may be used to retrieve the set of all attributes for an element. There are methods on the Element interface to retrieve either an Attr object by name or an attribute value by name. In XML, where an attribute value may contain entity references, an Attr object should be retrieved to examine the possibly fairly complex sub-tree representing the attribute value. On the other hand, in HTML, where all attributes have simple string values, methods to directly access an attribute value can safely be used as a convenience. normalize is inherited from the Node interface where it was moved. See also the"}