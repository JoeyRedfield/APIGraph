{"Functions": {"getKeepAliveDuration(org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the duration in ms for which it is safe to keep the connection idle, or <=0 if no suggested duration."]], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "The last response received over the connection."], ["@B_org#apache#http#protocol#HttpContext_E@", "the context in which the connection is being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the duration of time which this connection can be safely kept idle. If the connection is left idle for longer than this period of time, it MUST not reused. A value of 0 or less may be returned to indicate that there is no suitable suggestion. When coupled with a @B_org#apache#http#ConnectionReuseStrategy_E@, if {@link ConnectionReuseStrategy#keepAlive(HttpResponse, HttpContext) returns true, this allows you to control how long the reuse will last. If keepAlive returns false, this should have no meaningful impact", "history": "Added in API level 1", "FullName": "public long getKeepAliveDuration (HttpResponse response, HttpContext context)"}, "DefaultConnectionKeepAliveStrategy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DefaultConnectionKeepAliveStrategy ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.client.DefaultConnectionKeepAliveStrategy", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Default implementation of a strategy deciding duration that a connection can remain idle. The default implementation looks solely at the 'Keep-Alive' header's timeout token."}