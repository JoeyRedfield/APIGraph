{"Functions": {"getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getAnnotations ()"}, "getMethod(java.lang.String, java.lang.Class<?>...)": {"Returns": [["@B_java#lang#reflect#Method_E@", "the Method object that matches the specified name and parameterTypes"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#Class_E@", "Class: the list of parameters"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if a matching method is not found or if the name is \"<init>\"or \"<clinit>\"."], ["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object. The name parameter is a String specifying the simple name of the desired method. The parameterTypes parameter is an array of Class objects that identify the method's formal parameter types, in declared order. If parameterTypes is null, it is treated as if it were an empty array. If the name is \"<init>\" or \"<clinit>\" a NoSuchMethodException is raised. Otherwise, the method to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object: To find a matching method in a class or interface C: If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not. This increased flexibility in the virtual machine can be used to implement various language features. For example, covariant returns can be implemented with If this Class object represents an array type, then this method does not find the clone() method. Static methods declared in superinterfaces of the class or interface represented by this Class object are not considered members of the class or interface.", "history": "added in API level 9", "FullName": "public Method getMethod (String name, Class...<?> parameterTypes)"}, "isEnum()": {"Returns": [["boolean", "true if and only if this class was declared as an enum in the source code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if and only if this class was declared as an enum in the source code.", "history": "Added in API level 1", "FullName": "public boolean isEnum ()"}, "getEnclosingMethod()": {"Returns": [["@B_java#lang#reflect#Method_E@", "the immediately enclosing method of the underlying class, if that class is a local or anonymous class; otherwise null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Class object represents a local or anonymous class within a method, returns a @B_java#lang#reflect#Method_E@ object representing the immediately enclosing method of the underlying class. Returns null otherwise. In particular, this method returns null if the underlying class is a local or anonymous class immediately enclosed by a type declaration, instance initializer or static initializer.", "history": "Added in API level 1", "FullName": "public Method getEnclosingMethod ()"}, "asSubclass(java.lang.Class<U>)": {"Returns": [["@B_java#lang#Class_E@", "this Class object, cast to represent a subclass of the specified class object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class of the type to cast this class object to"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if this Class object does not represent a subclass of the specified class (here \"subclass\" includes the class itself)."]], "SeeAlso": [], "Permissions": [], "Description": "Casts this Class object to represent a subclass of the class represented by the specified class object. Checks that the cast is valid, and throws a ClassCastException if it is not. If this method succeeds, it always returns a reference to this class object. This method is useful when a client needs to \"narrow\" the type of a Class object to pass it to an API that restricts the Class objects that it is willing to accept. A cast would generate a compile-time warning, as the correctness of the cast could not be checked at runtime (because generic types are implemented by erasure).", "history": "Added in API level 1", "FullName": "public Class<? extends U> asSubclass (Class<U> clazz)"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 1", "FullName": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)"}, "getClasses()": {"Returns": [["@B_java#lang#Class_E@", "the array of Class objects representing the public members of this class"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing Class objects representing all the public classes and interfaces that are members of the class represented by this Class object. This includes public class and interface members inherited from superclasses and public class and interface members declared by the class. This method returns an array of length 0 if this Class object has no public member classes or interfaces. This method also returns an array of length 0 if this Class object represents a primitive type, an array class, or void.", "history": "Added in API level 1", "FullName": "public Class[]<?> getClasses ()"}, "getDeclaredMethod(java.lang.String,java.lang.Class<?>...)": {"Returns": [["@B_java#lang#reflect#Method_E@", "the Method object for the method of this class matching the specified name and parameters"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#Class_E@", "Class: the parameter array"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if a matching method is not found."], ["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared method the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Method object that reflects the specified declared method of the class or interface represented by this Class object. The name parameter is a String that specifies the simple name of the desired method, and the parameterTypes parameter is an array of Class objects that identify the method's formal parameter types, in declared order. If more than one method with the same parameter types is declared in a class, and one of these methods has a return type that is more specific than any of the others, that method is returned; otherwise one of the methods is chosen arbitrarily. If the name is \"<init>\"or \"<clinit>\" a NoSuchMethodException is raised. If this Class object represents an array type, then this method does not find the clone() method.", "history": "Added in API level 1", "FullName": "public Method getDeclaredMethod (String name, Class...<?> parameterTypes)"}, "getAnnotation(java.lang.Class<A>)": {"Returns": [["A", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public A getAnnotation (Class<A> annotationClass)"}, "isInterface()": {"Returns": [["boolean", "true if this object represents an interface; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the specified Class object represents an interface type.", "history": "Added in API level 1", "FullName": "public boolean isInterface ()"}, "getAnnotationsByType(java.lang.Class<A>)": {"Returns": [["A[]", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public A[] getAnnotationsByType (Class<A> annotationClass)"}, "isAnnotation()": {"Returns": [["boolean", "true if this class object represents an annotation type; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Class object represents an annotation type. Note that if this method returns true, @B_java#lang#Class#isInterface_E@ would also return true, as all annotation types are also interfaces.", "history": "Added in API level 1", "FullName": "public boolean isAnnotation ()"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this class is a synthetic class as defined by the Java Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this class is a synthetic class; returns false otherwise.", "history": "Added in API level 1", "FullName": "public boolean isSynthetic ()"}, "getConstructor(java.lang.Class<?>...)": {"Returns": [["@B_java#lang#reflect#Constructor_E@", "the Constructor object of the public constructor that matches the specified parameterTypes"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the parameter array"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if a matching method is not found."], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Constructor object that reflects the specified public constructor of the class represented by this Class object. The parameterTypes parameter is an array of Class objects that identify the constructor's formal parameter types, in declared order. If this Class object represents an inner class declared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter. The constructor to reflect is the public constructor of the class represented by this Class object whose formal parameter types match those specified by parameterTypes.", "history": "Added in API level 1", "FullName": "public Constructor<T> getConstructor (Class...<?> parameterTypes)"}, "newInstance()": {"Returns": [["T", "a newly allocated instance of the class represented by this object."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if the class or its nullary constructor is not accessible."], ["@B_java#lang#InstantiationException_E@", "if this Class represents an abstract class, an interface, an array class, a primitive type, or void; or if the class has no nullary constructor; or if the instantiation fails for some other reason."], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails."], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of the class represented by this Class object. The class is instantiated as if by a new expression with an empty argument list. The class is initialized if it has not already been initialized. Note that this method propagates any exception thrown by the nullary constructor, including a checked exception. Use of this method effectively bypasses the compile-time exception checking that would otherwise be performed by the compiler. The @B_java#lang#reflect#Constructor#newInstance_E@ method avoids this problem by wrapping any exception thrown by the constructor in a (checked) @B_java#lang#reflect#InvocationTargetException_E@.", "history": "Added in API level 1", "FullName": "public T newInstance ()"}, "getResource(java.lang.String)": {"Returns": [["@B_java#net#URL_E@", "A @B_java#net#URL_E@ object or null if no resource with this name is found"]], "Parameters": [["@B_java#lang#String_E@", "String: name of the desired resource"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds a resource with a given name. The rules for searching resources associated with a given class are implemented by the defining @B_java#lang#ClassLoader#getSystemResource_E@. Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a '/' (name following the '/'. Otherwise, the absolute name is of the following form: Where the modified_package_name is the package name of this object with '/' substituted for '.' (", "history": "Added in API level 1", "FullName": "public URL getResource (String name)"}, "getPackage()": {"Returns": [["@B_java#lang#Package_E@", "the package of the class, or null if no package information is available from the archive or codebase."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the package for this class. The class loader of this class is used to find the package. If the class was loaded by the bootstrap class loader the set of packages loaded from CLASSPATH is searched to find the package of the class. Null is returned if no package object was created by the class loader of this class. Packages have attributes for versions and specifications only if the information was defined in the manifests that accompany the classes, and if the class loader created the package instance with the attributes from the manifest.", "history": "Added in API level 1", "FullName": "public Package getPackage ()"}, "getResourceAsStream(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "A @B_java#io#InputStream_E@ object or null if no resource with this name is found"]], "Parameters": [["@B_java#lang#String_E@", "String: name of the desired resource"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds a resource with a given name. The rules for searching resources associated with a given class are implemented by the defining @B_java#lang#ClassLoader#getSystemResourceAsStream_E@. Before delegation, an absolute resource name is constructed from the given resource name using this algorithm: If the name begins with a '/' (name following the '/'. Otherwise, the absolute name is of the following form: Where the modified_package_name is the package name of this object with '/' substituted for '.' (", "history": "Added in API level 1", "FullName": "public InputStream getResourceAsStream (String name)"}, "getFields()": {"Returns": [["@B_java#lang#reflect#Field_E@", "the array of Field objects representing the public fields"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing Field objects reflecting all the accessible public fields of the class or interface represented by this Class object. If this Class object represents a class or interface with no no accessible public fields, then this method returns an array of length 0. If this Class object represents a class, then this method returns the public fields of the class and of all its superclasses. If this Class object represents an interface, then this method returns the fields of the interface and of all its superinterfaces. If this Class object represents an array type, a primitive type, or void, then this method returns an array of length 0. The elements in the returned array are not sorted and are not in any particular order.", "history": "Added in API level 1", "FullName": "public Field[] getFields ()"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an associated list of annotations on this element, whose class is annotationClass, or an empty array if nothing was found.", "history": "", "FullName": "T[] getAnnotationsByType (Class<T> annotationClass)"}, "forName(java.lang.String,boolean,java.lang.ClassLoader)": {"Returns": [["@B_java#lang#Class_E@", "class object representing the desired class"]], "Parameters": [["@B_java#lang#String_E@", "String: fully qualified name of the desired class"], ["boolean", "boolean: if true the class will be initialized. See Section 12.4 of The Java Language Specification."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: class loader from which the class must be loaded"]], "Throws": [["@B_java#lang#LinkageError_E@", "if the linkage fails"], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails"], ["@B_java#lang#ClassNotFoundException_E@", "if the class cannot be located by the specified class loader"]], "SeeAlso": ["@B_java#lang#Class#forName_E@", "@B_java#lang#ClassLoader_E@"], "Permissions": [], "Description": "Returns the Class object associated with the class or interface with the given string name, using the given class loader. Given the fully qualified name for a class or interface (in the same format returned by getName) this method attempts to locate, load, and link the class or interface. The specified class loader is used to load the class or interface. If the parameter loader is null, the class is loaded through the bootstrap class loader. The class is initialized only if the initialize parameter is true and if it has not been initialized earlier. If name denotes a primitive type or void, an attempt will be made to locate a user-defined class in the unnamed package whose name is name. Therefore, this method cannot be used to obtain any of the Class objects representing primitive types or void. If name denotes an array class, the component type of the array class is loaded but not initialized. For example, in an instance method the expression: The Java Language Specification. Note that this method does not check whether the requested class is accessible to its caller. If the loader is null, and a security manager is present, and the caller's class loader is not null, then this method calls the security manager's checkPermission method with a RuntimePermission(\"getClassLoader\") permission to ensure it's ok to access the bootstrap class loader.", "history": "Added in API level 1", "FullName": "public static Class<?> forName (String name, boolean initialize, ClassLoader loader)"}, "getSuperclass()": {"Returns": [["@B_java#lang#Class_E@", "the superclass of the class represented by this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class representing the superclass of the entity (class, interface, primitive type or void) represented by this Class. If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned. If this object represents an array class then the Class object representing the Object class is returned.", "history": "Added in API level 1", "FullName": "public Class<? super T> getSuperclass ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this class object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the object to a string. The string representation is the string \"class\" or \"interface\", followed by a space, and then by the fully qualified name of the class in the format returned by getName. If this Class object represents a primitive type, this method returns the name of the primitive type. If this Class object represents void this method returns \"void\".", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getProtectionDomain()": {"Returns": [["@B_java#security#ProtectionDomain_E@", "the ProtectionDomain of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow getting the ProtectionDomain."]], "SeeAlso": ["@B_java#security#ProtectionDomain_E@", "@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Returns the ProtectionDomain of this class. If there is a security manager installed, this method first calls the security manager's checkPermission method with a RuntimePermission(\"getProtectionDomain\") permission to ensure it's ok to get the ProtectionDomain.", "history": "Added in API level 1", "FullName": "public ProtectionDomain getProtectionDomain ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the name of the class or interface represented by this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the entity (class, interface, array class, primitive type, or void) represented by this Class object, as a String. If this class object represents a reference type that is not an array type then the binary name of the class is returned, as specified by If this class object represents a primitive type or void, then the name returned is a String equal to the Java language keyword corresponding to the primitive type or void. If this class object represents a class of arrays, then the internal form of the name consists of the name of the element type preceded by one or more '[' characters representing the depth of the array nesting. The encoding of element type names is as follows: The class or interface name Examples:", "history": "Added in API level 1", "FullName": "public String getName ()"}, "getConstructors()": {"Returns": [["@B_java#lang#reflect#Constructor_E@", "the array of Constructor objects representing the public constructors of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing Constructor objects reflecting all the public constructors of the class represented by this Class object. An array of length 0 is returned if the class has no public constructors, or if the class is an array class, or if the class reflects a primitive type or void. Note that while this method returns an array of Constructor<T> objects (that is an array of constructors from this class), the return type of this method is Constructor<?>[] and not Constructor<T>[] as might be expected. This less informative return type is necessary since after being returned from this method, the array could be modified to hold Constructor objects for different classes, which would violate the type guarantees of Constructor<T>[].", "history": "Added in API level 1", "FullName": "public Constructor[]<?> getConstructors ()"}, "getDeclaredAnnotation(java.lang.Class<T>)": {"Returns": [["T", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a directly-present annotation on this element, whose class is annotationClass, or null if nothing was found.", "history": "", "FullName": "T getDeclaredAnnotation (Class<T> annotationClass)"}, "getGenericInterfaces()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of interfaces implemented by this class"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic class signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if any of the generic superinterfaces refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if any of the generic superinterfaces refer to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Types representing the interfaces directly implemented by the class or interface represented by this object. If a superinterface is a parameterized type, the Type object returned for it must accurately reflect the actual type parameters used in the source code. The parameterized type representing each superinterface is created if it had not been created before. See the declaration of @B_java#lang#reflect#ParameterizedType_E@ for the semantics of the creation process for parameterized types. If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the implements clause of the declaration of the class represented by this object. In the case of an array class, the interfaces Cloneable and Serializable are returned in that order. If this object represents an interface, the array contains objects representing all interfaces directly extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the extends clause of the declaration of the interface represented by this object. If this object represents a class or interface that implements no interfaces, the method returns an array of length 0. If this object represents a primitive type or void, the method returns an array of length 0.", "history": "Added in API level 1", "FullName": "public Type[] getGenericInterfaces ()"}, "getSigners()": {"Returns": [["@B_java#lang#Object_E@", "the signers of this class, or null if there are no signers. In particular, this method returns null if this object represents a primitive type or void."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signers of this class.", "history": "Added in API level 1", "FullName": "public Object[] getSigners ()"}, "getDeclaredConstructors()": {"Returns": [["@B_java#lang#reflect#Constructor_E@", "the array of Constructor objects representing all the declared constructors of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared constructors within this class the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Constructor objects reflecting all the constructors declared by the class represented by this Class object. These are public, protected, default (package) access, and private constructors. The elements in the array returned are not sorted and are not in any particular order. If the class has a default constructor, it is included in the returned array. This method returns an array of length 0 if this Class object represents an interface, a primitive type, an array class, or void. See The Java Language Specification, section 8.2.", "history": "Added in API level 1", "FullName": "public Constructor[]<?> getDeclaredConstructors ()"}, "getEnclosingClass()": {"Returns": [["@B_java#lang#Class_E@", "the immediately enclosing class of the underlying class"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the immediately enclosing class of the underlying class. If the underlying class is a top level class this method returns null.", "history": "Added in API level 1", "FullName": "public Class<?> getEnclosingClass ()"}, "getDeclaredClasses()": {"Returns": [["@B_java#lang#Class_E@", "the array of Class objects representing all the declared members of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared classes within this class the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Class objects reflecting all the classes and interfaces declared as members of the class represented by this Class object. This includes public, protected, default (package) access, and private classes and interfaces declared by the class, but excludes inherited classes and interfaces. This method returns an array of length 0 if the class declares no classes or interfaces as members, or if this Class object represents a primitive type, an array class, or void.", "history": "Added in API level 1", "FullName": "public Class[]<?> getDeclaredClasses ()"}, "isArray()": {"Returns": [["boolean", "true if this object represents an array class; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if this Class object represents an array class.", "history": "Added in API level 1", "FullName": "public boolean isArray ()"}, "getCanonicalName()": {"Returns": [["@B_java#lang#String_E@", "the canonical name of the underlying class if it exists, and null otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the canonical name of the underlying class as defined by the Java Language Specification. Returns null if the underlying class does not have a canonical name (i.e., if it is a local or anonymous class or an array whose component type does not have a canonical name).", "history": "Added in API level 1", "FullName": "public String getCanonicalName ()"}, "getDeclaredField(java.lang.String)": {"Returns": [["@B_java#lang#reflect#Field_E@", "the Field object for the specified field in this class"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the field"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if a field with the specified name is not found."], ["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared field the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Field object that reflects the specified declared field of the class or interface represented by this Class object. The name parameter is a String that specifies the simple name of the desired field. If this Class object represents an array type, then this method does not find the length field of the array type.", "history": "Added in API level 1", "FullName": "public Field getDeclaredField (String name)"}, "cast(java.lang.Object)": {"Returns": [["T", "the object after casting, or null if obj is null"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be cast"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the object is not null and is not assignable to the type T."]], "SeeAlso": [], "Permissions": [], "Description": "Casts an object to the class or interface represented by this Class object.", "history": "Added in API level 1", "FullName": "public T cast (Object obj)"}, "getInterfaces()": {"Returns": [["@B_java#lang#Class_E@", "an array of interfaces implemented by this class."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines the interfaces implemented by the class or interface represented by this object. If this object represents a class, the return value is an array containing objects representing all interfaces implemented by the class. The order of the interface objects in the array corresponds to the order of the interface names in the implements clause of the declaration of the class represented by this object. For example, given the declaration: s is an instance of Shimmer; the value of the expression: Class object that represents interface FloorWax; and the value of: Class object that represents interface DessertTopping. If this object represents an interface, the array contains objects representing all interfaces extended by the interface. The order of the interface objects in the array corresponds to the order of the interface names in the extends clause of the declaration of the interface represented by this object. If this object represents a class or interface that implements no interfaces, the method returns an array of length 0. If this object represents a primitive type or void, the method returns an array of length 0. If this Class object represents an array type, the interfaces Cloneable and java.io.Serializable are returned in that order.", "history": "Added in API level 1", "FullName": "public Class[]<?> getInterfaces ()"}, "getMethods()": {"Returns": [["@B_java#lang#reflect#Method_E@", "the array of Method objects representing the public methods of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces. If this Class object represents a type that has multiple public methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method. If this Class object represents a type with a class initialization method <clinit>, then the returned array does not have a corresponding Method object. If this Class object represents an array type, then the returned array has a Method object for each of the public methods inherited by the array type from Object. It does not contain a Method object for clone(). If this Class object represents an interface then the returned array does not contain any implicitly declared methods from Object. Therefore, if no methods are explicitly declared in this interface or any of its superinterfaces then the returned array has length 0. (Note that a Class object which represents a class always has public methods, inherited from Object.) If this Class object represents a primitive type or void, then the returned array has length 0. Static methods declared in superinterfaces of the class or interface represented by this Class object are not considered members of the class or interface. The elements in the returned array are not sorted and are not in any particular order.", "history": "Added in API level 1", "FullName": "public Method[] getMethods ()"}, "getGenericSuperclass()": {"Returns": [["@B_java#lang#reflect#Type_E@", "the superclass of the class represented by this object"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic class signature does not conform to the format specified in The Java\u2122 Virtual Machine Specification"], ["@B_java#lang#TypeNotPresentException_E@", "if the generic superclass refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if the generic superclass refers to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Type representing the direct superclass of the entity (class, interface, primitive type or void) represented by this Class. If the superclass is a parameterized type, the Type object returned must accurately reflect the actual type parameters used in the source code. The parameterized type representing the superclass is created if it had not been created before. See the declaration of @B_java#lang#reflect#ParameterizedType_E@ for the semantics of the creation process for parameterized types. If this Class represents either the Object class, an interface, a primitive type, or void, then null is returned. If this object represents an array class then the Class object representing the Object class is returned.", "history": "Added in API level 1", "FullName": "public Type getGenericSuperclass ()"}, "isPrimitive()": {"Returns": [["boolean", "true if and only if this class represents a primitive type"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Boolean_E@", "@B_java#lang#Character_E@", "@B_java#lang#Byte_E@", "@B_java#lang#Short_E@", "@B_java#lang#Integer_E@", "@B_java#lang#Long_E@", "@B_java#lang#Float_E@", "@B_java#lang#Double_E@", "@B_java#lang#Void_E@"], "Permissions": [], "Description": "Determines if the specified Class object represents a primitive type. There are nine predefined Class objects to represent the eight primitive types and void. These are created by the Java Virtual Machine, and have the same names as the primitive types that they represent, namely boolean, byte, char, short, int, long, float, and double. These objects may only be accessed via the following public static final variables, and are the only Class objects for which this method returns true.", "history": "Added in API level 1", "FullName": "public boolean isPrimitive ()"}, "getTypeParameters()": {"Returns": [["@B_java#lang#reflect#TypeVariable_E@", "an array of TypeVariable objects that represent the type variables declared by this generic declaration"]], "Parameters": [], "Throws": [["@B_java#lang#reflect#GenericSignatureFormatError_E@", "if the generic signature of this generic declaration does not conform to the format specified in The Java\u2122 Virtual Machine Specification"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of TypeVariable objects that represent the type variables declared by the generic declaration represented by this GenericDeclaration object, in declaration order. Returns an array of length 0 if the underlying generic declaration declares no type variables.", "history": "Added in API level 1", "FullName": "public TypeVariable[]<Class<T>> getTypeParameters ()"}, "isLocalClass()": {"Returns": [["boolean", "true if and only if this class is a local class."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if and only if the underlying class is a local class.", "history": "Added in API level 1", "FullName": "public boolean isLocalClass ()"}, "getDeclaredConstructor(java.lang.Class<?>...)": {"Returns": [["@B_java#lang#reflect#Constructor_E@", "The Constructor object for the constructor with the specified parameter list"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the parameter array"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if a matching method is not found."], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared constructor the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Constructor object that reflects the specified constructor of the class or interface represented by this Class object. The parameterTypes parameter is an array of Class objects that identify the constructor's formal parameter types, in declared order. If this Class object represents an inner class declared in a non-static context, the formal parameter types include the explicit enclosing instance as the first parameter.", "history": "Added in API level 1", "FullName": "public Constructor<T> getDeclaredConstructor (Class...<?> parameterTypes)"}, "getTypeName()": {"Returns": [["@B_java#lang#String_E@", "an informative string for the name of this type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an informative string for the name of this type.", "history": "Added in API level 26", "FullName": "public String getTypeName ()"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "the declaring class for this class"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the class or interface represented by this Class object is a member of another class, returns the Class object representing the class in which it was declared. This method returns null if this class or interface is not a member of any other class. If this Class object represents an array class, a primitive type, or void,then this method returns null.", "history": "Added in API level 1", "FullName": "public Class<?> getDeclaringClass ()"}, "toGenericString()": {"Returns": [["@B_java#lang#String_E@", "a string describing this Class, including information about modifiers and type parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this Class, including information about modifiers and type parameters. The string is formatted as a list of type modifiers, if any, followed by the kind of type (empty string for primitive types and class, enum, interface, or @interface, as appropriate), followed by the type's name, followed by an angle-bracketed comma-separated list of the type's type parameters, if any. A space is used to separate modifiers from one another and to separate any modifiers from the kind of type. The modifiers occur in canonical order. If there are no type parameters, the type parameter list is elided. Note that since information about the runtime representation of a type is being generated, modifiers not present on the originating source code or illegal on the originating source code may be present.", "history": "Added in API level 26", "FullName": "public String toGenericString ()"}, "getEnumConstants()": {"Returns": [["T[]", "an array containing the values comprising the enum class represented by this Class object in the order they're declared, or null if this Class object does not represent an enum type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the elements of this enum class or null if this Class object does not represent an enum type.", "history": "Added in API level 1", "FullName": "public T[] getEnumConstants ()"}, "getField(java.lang.String)": {"Returns": [["@B_java#lang#reflect#Field_E@", "the Field object of this class specified by name"]], "Parameters": [["@B_java#lang#String_E@", "String: the field name"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if a field with the specified name is not found."], ["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Field object that reflects the specified public member field of the class or interface represented by this Class object. The name parameter is a String specifying the simple name of the desired field. The field to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object: If this Class object represents an array type, then this method does not find the length field of the array type.", "history": "Added in API level 1", "FullName": "public Field getField (String name)"}, "getEnclosingConstructor()": {"Returns": [["@B_java#lang#reflect#Constructor_E@", "the immediately enclosing constructor of the underlying class, if that class is a local or anonymous class; otherwise null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Class object represents a local or anonymous class within a constructor, returns a @B_java#lang#reflect#Constructor_E@ object representing the immediately enclosing constructor of the underlying class. Returns null otherwise. In particular, this method returns null if the underlying class is a local or anonymous class immediately enclosed by a type declaration, instance initializer or static initializer.", "history": "Added in API level 1", "FullName": "public Constructor<?> getEnclosingConstructor ()"}, "getSimpleName()": {"Returns": [["@B_java#lang#String_E@", "the simple name of the underlying class"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the simple name of the underlying class as given in the source code. Returns an empty string if the underlying class is anonymous. The simple name of an array is the simple name of the component type with \"[]\" appended. In particular the simple name of an array whose component type is anonymous is \"[]\".", "history": "Added in API level 1", "FullName": "public String getSimpleName ()"}, "getDeclaredAnnotation(java.lang.Class<A>)": {"Returns": [["A", "no returns description in source"]], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public A getDeclaredAnnotation (Class<A> annotationClass)"}, "isMemberClass()": {"Returns": [["boolean", "true if and only if this class is a member class."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if and only if the underlying class is a member class.", "history": "Added in API level 1", "FullName": "public boolean isMemberClass ()"}, "isInstance(java.lang.Object)": {"Returns": [["boolean", "true if obj is an instance of this class"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the specified Object is assignment-compatible with the object represented by this Class. This method is the dynamic equivalent of the Java language instanceof operator. The method returns true if the specified Object argument is non-null and can be cast to the reference type represented by this Class object without raising a ClassCastException. It returns false otherwise. Specifically, if this Class object represents a declared class, this method returns true if the specified Object argument is an instance of the represented class (or of any of its subclasses); it returns false otherwise. If this Class object represents an array class, this method returns true if the specified Object argument can be converted to an object of the array class by an identity conversion or by a widening reference conversion; it returns false otherwise. If this Class object represents an interface, this method returns true if the class or any superclass of the specified Object argument implements this interface; it returns false otherwise. If this Class object represents a primitive type, this method returns false.", "history": "Added in API level 1", "FullName": "public boolean isInstance (Object obj)"}, "getDeclaredFields()": {"Returns": [["@B_java#lang#reflect#Field_E@", "the array of Field objects representing all the declared fields of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared fields within this class the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Field objects reflecting all the fields declared by the class or interface represented by this Class object. This includes public, protected, default (package) access, and private fields, but excludes inherited fields. If this Class object represents a class or interface with no declared fields, then this method returns an array of length 0. If this Class object represents an array type, a primitive type, or void, then this method returns an array of length 0. The elements in the returned array are not sorted and are not in any particular order.", "history": "Added in API level 1", "FullName": "public Field[] getDeclaredFields ()"}, "desiredAssertionStatus()": {"Returns": [["boolean", "the desired assertion status of the specified class."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#ClassLoader#setClassAssertionStatus_E@", "@B_java#lang#ClassLoader#setPackageAssertionStatus_E@", "@B_java#lang#ClassLoader#setDefaultAssertionStatus_E@"], "Permissions": [], "Description": "Returns the assertion status that would be assigned to this class if it were to be initialized at the time this method is invoked. If this class has had its assertion status set, the most recent setting will be returned; otherwise, if any package default assertion status pertains to this class, the most recent setting for the most specific pertinent package default assertion status is returned; otherwise, if this class is not a system class (i.e., it has a class loader) its class loader's default assertion status is returned; otherwise, the system class default assertion status is returned. Few programmers will have any need for this method; it is provided for the benefit of the JRE itself. (It allows a class to determine at the time that it is initialized whether assertions should be enabled.) Note that this method is not guaranteed to return the actual assertion status that was (or will be) associated with the specified class when it was (or will be) initialized.", "history": "Added in API level 1", "FullName": "public boolean desiredAssertionStatus ()"}, "getMethod(java.lang.String,java.lang.Class<?>...)": {"Returns": [["@B_java#lang#reflect#Method_E@", "the Method object that matches the specified name and parameterTypes"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#Class_E@", "Class: the list of parameters"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if a matching method is not found or if the name is \"<init>\"or \"<clinit>\"."], ["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of @B_java#lang#SecurityManager#checkPackageAccess_E@ denies access to the package of this class."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Method object that reflects the specified public member method of the class or interface represented by this Class object. The name parameter is a String specifying the simple name of the desired method. The parameterTypes parameter is an array of Class objects that identify the method's formal parameter types, in declared order. If parameterTypes is null, it is treated as if it were an empty array. If the name is \"<init>\" or \"<clinit>\" a NoSuchMethodException is raised. Otherwise, the method to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object: To find a matching method in a class or interface C: If C declares exactly one public method with the specified name and exactly the same formal parameter types, that is the method reflected. If more than one such method is found in C, and one of these methods has a return type that is more specific than any of the others, that method is reflected; otherwise one of the methods is chosen arbitrarily. Note that there may be more than one matching method in a class because while the Java language forbids a class to declare multiple methods with the same signature but different return types, the Java virtual machine does not. This increased flexibility in the virtual machine can be used to implement various language features. For example, covariant returns can be implemented with If this Class object represents an array type, then this method does not find the clone() method. Static methods declared in superinterfaces of the class or interface represented by this Class object are not considered members of the class or interface.", "history": "Added in API level 1", "FullName": "public Method getMethod (String name, Class...<?> parameterTypes)"}, "isAnonymousClass()": {"Returns": [["boolean", "true if and only if this class is an anonymous class."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if and only if the underlying class is an anonymous class.", "history": "Added in API level 1", "FullName": "public boolean isAnonymousClass ()"}, "getClassLoader()": {"Returns": [["@B_java#lang#ClassLoader_E@", "the class loader that loaded the class or interface represented by this object."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method denies access to the class loader for the class."]], "SeeAlso": ["@B_java#lang#ClassLoader_E@", "@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Returns the class loader for the class. Some implementations may use null to represent the bootstrap class loader. This method will return null in such implementations if this class was loaded by the bootstrap class loader. If a security manager is present, and the caller's class loader is not null and the caller's class loader is not the same as or an ancestor of the class loader for the class whose class loader is requested, then this method calls the security manager's checkPermission method with a RuntimePermission(\"getClassLoader\") permission to ensure it's ok to access the class loader for the class. If this object represents a primitive type or void, null is returned.", "history": "Added in API level 1", "FullName": "public ClassLoader getClassLoader ()"}, "getDeclaredMethods()": {"Returns": [["@B_java#lang#reflect#Method_E@", "the array of Method objects representing all the declared methods of this class"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager, s, is present and any of the following conditions is met: the caller's class loader is not the same as the class loader of this class and invocation of SecurityManager#checkPermission method with RuntimePermission(\"accessDeclaredMembers\") denies access to the declared methods within this class the caller's class loader is not the same as or an ancestor of the class loader for the current class and invocation of SecurityManager#checkPackageAccess denies access to the package of this class"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods. If this Class object represents a type that has multiple declared methods with the same name and parameter types, but different return types, then the returned array has a Method object for each such method. If this Class object represents a type that has a class initialization method <clinit>, then the returned array does not have a corresponding Method object. If this Class object represents a class or interface with no declared methods, then the returned array has length 0. If this Class object represents an array type, a primitive type, or void, then the returned array has length 0. The elements in the returned array are not sorted and are not in any particular order.", "history": "Added in API level 1", "FullName": "public Method[] getDeclaredMethods ()"}, "isAssignableFrom(java.lang.Class<?>)": {"Returns": [["boolean", "the boolean value indicating whether objects of the type cls can be assigned to objects of this class"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object to be checked"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified Class parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Determines if the class or interface represented by this Class object is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified Class parameter. It returns true if so; otherwise it returns false. If this Class object represents a primitive type, this method returns true if the specified Class parameter is exactly this Class object; otherwise it returns false. Specifically, this method tests whether the type represented by the specified Class parameter can be converted to the type represented by this Class object via an identity conversion or via a widening reference conversion. See The Java Language Specification, sections 5.1.1 and 5.1.4 , for details.", "history": "Added in API level 1", "FullName": "public boolean isAssignableFrom (Class<?> cls)"}, "forName(java.lang.String)": {"Returns": [["@B_java#lang#Class_E@", "the Class object for the class with the specified name."]], "Parameters": [["@B_java#lang#String_E@", "String: the fully qualified name of the desired class."]], "Throws": [["@B_java#lang#LinkageError_E@", "if the linkage fails"], ["@B_java#lang#ExceptionInInitializerError_E@", "if the initialization provoked by this method fails"], ["@B_java#lang#ClassNotFoundException_E@", "if the class cannot be located"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object associated with the class or interface with the given string name. Invoking this method is equivalent to: currentLoader denotes the defining class loader of the current class. For example, the following code fragment returns the runtime Class descriptor for the class named java.lang.Thread: A call to forName(\"X\") causes the class named X to be initialized.", "history": "Added in API level 1", "FullName": "public static Class<?> forName (String className)"}, "getModifiers()": {"Returns": [["int", "the int representing the modifiers for this class"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#reflect#Modifier_E@"], "Permissions": [], "Description": "Returns the Java language modifiers for this class or interface, encoded in an integer. The modifiers consist of the Java Virtual Machine's constants for public, protected, private, final, static, abstract and interface; they should be decoded using the methods of class Modifier. If the underlying class is an array class, then its public, private and protected modifiers are the same as those of its component type. If this Class represents a primitive type or void, its public modifier is always true, and its protected and private modifiers are always false. If this object represents an array class, a primitive type or void, then its final modifier is always true and its interface modifier is always false. The values of its other modifiers are not determined by this specification. The modifier encodings are defined in The Java Virtual Machine Specification, table 4.1.", "history": "Added in API level 1", "FullName": "public int getModifiers ()"}, "getComponentType()": {"Returns": [["@B_java#lang#Class_E@", "the Class representing the component type of this class if this class is an array"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#reflect#Array_E@"], "Permissions": [], "Description": "Returns the Class representing the component type of an array. If this class does not represent an array class this method returns null.", "history": "Added in API level 1", "FullName": "public Class<?> getComponentType ()"}}, "Inheritance": [], "ClassName": "java.lang.Class<T>", "ClassDesc": "Instances of the class Class represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a Class object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types (boolean, byte, char, short, int, long, float, and double), and the keyword void are also represented as Class objects. Class has no public constructor. Instead Class objects are constructed automatically by the Java Virtual Machine as classes are loaded and by calls to the defineClass method in the class loader. The following example uses a Class object to print the class name of an object: It is also possible to get the Class object for a named type (or for void) using a class literal. See Section 15.8.2 of"}