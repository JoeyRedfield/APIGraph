{"Functions": {"release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears Intents state. Must be called after each test case.", "history": "", "FullName": "void release ()"}, "assertNoUnverifiedIntents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asserts that Intents does not have any unverified intents. You can use this method after you have verified your intents to make sure that nothing unexpected was sent out. This is an equivalent of verifyNoMoreInteractions() in Mockito.", "history": "", "FullName": "void assertNoUnverifiedIntents ()"}, "init()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes Intents and begins recording intents. Must be called prior to triggering any actions that send out intents which need to be verified or stubbed. This is similar to MockitoAnnotations.initMocks.", "history": "", "FullName": "void init ()"}, "times(int)": {"Returns": [["@B_android#support#test#espresso#intent#VerificationMode_E@", "no returns description in source"]], "Parameters": [["int", "int: the number of times that the intent should be matched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows verifying a specific number of intents sent by the application under test. This is an equivalent of times(num) in Mockito.", "history": "", "FullName": "VerificationMode times (int times)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.intent.Intents", "ClassDesc": "Intents enables validation and stubbing of intents sent out by the application under test. An example test that simply validates an outgoing intent: public void testValidateIntentSentToPackage() { // User action that results in an external \"phone\" activity being launched. user.clickOnView(system.getView(R.id.callButton)); // Using a canned RecordedIntentMatcher to validate that an intent resolving // to the \"phone\" activity has been sent. intended(toPackage(\"com.android.phone\")); } An example test with intent stubbing: public void testActivityResultIsHandledProperly() { // Build a result to return when a particular activity is launched. Intent resultData = new Intent(); String phoneNumber = \"123-345-6789\"; resultData.putExtra(\"phone\", phoneNumber); ActivityResult result = new ActivityResult(Activity.RESULT_OK, resultData); // Set up result stubbing when an intent sent to \"contacts\" is seen. intending(toPackage(\"com.android.contacts\")).respondWith(result)); // User action that results in \"contacts\" activity being launched. // Launching activity expects phoneNumber to be returned and displays it on the screen. user.clickOnView(system.getView(R.id.pickButton)); // Assert that data we set up above is shown. assertTrue(user.waitForText(phoneNumber)); }"}