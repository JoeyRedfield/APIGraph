{"Functions": {"setError()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that an error has occurred. This method will cause subsequent invocations of @B_java#io#PrintWriter#checkError_E@ to return @B_java#io#PrintWriter#clearError_E@ is invoked.", "history": "Added in API level 1", "FullName": "protected void setError ()"}, "print(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#toString_E@"], "Permissions": [], "Description": "Prints an object. The string produced by the String.valueOf(Object) method is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (Object obj)"}, "PrintWriter(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "added in API level 1", "FullName": "public PrintWriter (File file, String csn)"}, "PrintWriter(java.io.OutputStream, boolean)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An output stream"], ["boolean", "boolean: A boolean; if true, the println, printf, or format methods will flush the output buffer"]], "Throws": [], "SeeAlso": ["@B_java#io#OutputStreamWriter#OutputStreamWriter_E@"], "Permissions": [], "Description": "Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.", "history": "added in API level 1", "FullName": "public PrintWriter (OutputStream out, boolean autoFlush)"}, "format(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the Formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@, regardless of any previous invocations of other formatting methods on this object.", "history": "Added in API level 1", "FullName": "public PrintWriter format (String format, Object... args)"}, "write(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "added in API level 1", "FullName": "public void write (String s, int off, int len)"}, "printf(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public PrintWriter printf (String format, Object... args)"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: int specifying a character to be written."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a single character.", "history": "Added in API level 1", "FullName": "public void write (int c)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this writer."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character sequence to this writer. An invocation of this method of the form Depending on the specification of", "history": "Added in API level 1", "FullName": "public PrintWriter append (CharSequence csq)"}, "clearError()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the error state of this stream. This method will cause subsequent invocations of @B_java#io#PrintWriter#checkError_E@ to return @B_java#io#PrintWriter#setError_E@.", "history": "Added in API level 9", "FullName": "protected void clearError ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#PrintWriter#checkError_E@"], "Permissions": [], "Description": "Flushes the stream.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "print(int)": {"Returns": [], "Parameters": [["int", "int: The int to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Integer#toString_E@"], "Permissions": [], "Description": "Prints an integer. The string produced by String.valueOf(int) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (int i)"}, "println(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the String value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a String and then terminates the line. This method behaves as though it invokes print(java.lang.String) and then println().", "history": "Added in API level 1", "FullName": "public void println (String x)"}, "append(char)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["char", "char: The 16-bit character to append"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified character to this writer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintWriter append (char c)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintWriter append (CharSequence csq, int start, int end)"}, "checkError()": {"Returns": [["boolean", "true if the print stream has encountered an error, either on the underlying output stream or during a format conversion."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flushes the stream if it's not closed and checks its error state.", "history": "Added in API level 1", "FullName": "public boolean checkError ()"}, "print(double)": {"Returns": [], "Parameters": [["double", "double: The double to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#toString_E@"], "Permissions": [], "Description": "Prints a double-precision floating-point number. The string produced by String.valueOf(double) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (double d)"}, "println(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the boolean value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a boolean value and then terminates the line. This method behaves as though it invokes print(boolean) and then println().", "history": "Added in API level 1", "FullName": "public void println (boolean x)"}, "println(long)": {"Returns": [], "Parameters": [["long", "long: the long value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a long integer and then terminates the line. This method behaves as though it invokes print(long) and then println().", "history": "Added in API level 1", "FullName": "public void println (long x)"}, "println(double)": {"Returns": [], "Parameters": [["double", "double: the double value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a double-precision floating-point number and then terminates the line. This method behaves as though it invokes print(double) and then println().", "history": "Added in API level 1", "FullName": "public void println (double x)"}, "format(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."], ["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer.", "history": "Added in API level 1", "FullName": "public PrintWriter format (Locale l, String format, Object... args)"}, "println(int)": {"Returns": [], "Parameters": [["int", "int: the int value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an integer and then terminates the line. This method behaves as though it invokes print(int) and then println().", "history": "Added in API level 1", "FullName": "public void println (int x)"}, "PrintWriter(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A character-output stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing.", "history": "Added in API level 1", "FullName": "public PrintWriter (Writer out)"}, "format(java.lang.String, java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the Formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. The locale always used is the one returned by @B_java#util#Locale#getDefault_E@, regardless of any previous invocations of other formatting methods on this object.", "history": "added in API level 1", "FullName": "public PrintWriter format (String format, Object... args)"}, "print(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The boolean to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a boolean value. The string produced by String.valueOf(boolean) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (boolean b)"}, "println(char[])": {"Returns": [], "Parameters": [["char[]", "char: the array of char values to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an array of characters and then terminates the line. This method behaves as though it invokes print(char[]) and then println().", "history": "Added in API level 1", "FullName": "public void println (char[] x)"}, "print(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The String to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a string. If the argument is null then the string \"null\" is printed. Otherwise, the string's characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (String s)"}, "PrintWriter(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "Added in API level 1", "FullName": "public PrintWriter (String fileName, String csn)"}, "print(float)": {"Returns": [], "Parameters": [["float", "float: The float to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#toString_E@"], "Permissions": [], "Description": "Prints a floating-point number. The string produced by String.valueOf(float) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (float f)"}, "PrintWriter(java.io.OutputStream,boolean)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An output stream"], ["boolean", "boolean: A boolean; if true, the println, printf, or format methods will flush the output buffer"]], "Throws": [], "SeeAlso": ["@B_java#io#OutputStreamWriter#OutputStreamWriter_E@"], "Permissions": [], "Description": "Creates a new PrintWriter from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.", "history": "Added in API level 1", "FullName": "public PrintWriter (OutputStream out, boolean autoFlush)"}, "printf(java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintWriter printf (String format, Object... args)"}, "print(long)": {"Returns": [], "Parameters": [["long", "long: The long to be printed"]], "Throws": [], "SeeAlso": ["@B_java#lang#Long#toString_E@"], "Permissions": [], "Description": "Prints a long integer. The string produced by String.valueOf(long) is translated into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (long l)"}, "write(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: Array of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes A Portion of an array of characters.", "history": "added in API level 1", "FullName": "public void write (char[] buf, int off, int len)"}, "PrintWriter(java.io.Writer,boolean)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A character-output stream"], ["boolean", "boolean: A boolean; if true, the println, printf, or format methods will flush the output buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter.", "history": "Added in API level 1", "FullName": "public PrintWriter (Writer out, boolean autoFlush)"}, "PrintWriter(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "Added in API level 1", "FullName": "public PrintWriter (File file, String csn)"}, "write(char[])": {"Returns": [], "Parameters": [["char[]", "char: Array of characters to be written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes an array of characters. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.", "history": "Added in API level 1", "FullName": "public void write (char[] buf)"}, "println(float)": {"Returns": [], "Parameters": [["float", "float: the float value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a floating-point number and then terminates the line. This method behaves as though it invokes print(float) and then println().", "history": "Added in API level 1", "FullName": "public void println (float x)"}, "PrintWriter(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file name. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the", "history": "Added in API level 1", "FullName": "public PrintWriter (String fileName)"}, "PrintWriter(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."], ["@B_java#lang#String_E@", "String: The name of a supported charset"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"], ["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file name and charset. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the provided charset.", "history": "added in API level 1", "FullName": "public PrintWriter (String fileName, String csn)"}, "print(char)": {"Returns": [], "Parameters": [["char", "char: The char to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a character. The character is translated into one or more bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (char c)"}, "PrintWriter(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: An output stream"]], "Throws": [], "SeeAlso": ["@B_java#io#OutputStreamWriter#OutputStreamWriter_E@"], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, from an existing OutputStream. This convenience constructor creates the necessary intermediate OutputStreamWriter, which will convert characters into bytes using the default character encoding.", "history": "Added in API level 1", "FullName": "public PrintWriter (OutputStream out)"}, "PrintWriter(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: The file to use as the destination of this writer. If the file exists then it will be truncated to zero size; otherwise, a new file will be created. The output will be written to the file and is buffered."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "If the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and @B_java#lang#SecurityManager#checkWrite_E@ denies write access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter, without automatic line flushing, with the specified file. This convenience constructor creates the necessary intermediate @B_java#io#OutputStreamWriter_E@, which will encode characters using the", "history": "Added in API level 1", "FullName": "public PrintWriter (File file)"}, "PrintWriter(java.io.Writer, boolean)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer: A character-output stream"], ["boolean", "boolean: A boolean; if true, the println, printf, or format methods will flush the output buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new PrintWriter.", "history": "added in API level 1", "FullName": "public PrintWriter (Writer out, boolean autoFlush)"}, "write(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: Array of characters"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes A Portion of an array of characters.", "history": "Added in API level 1", "FullName": "public void write (char[] buf, int off, int len)"}, "print(char[])": {"Returns": [], "Parameters": [["char[]", "char: The array of chars to be printed"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If s is null"]], "SeeAlso": [], "Permissions": [], "Description": "Prints an array of characters. The characters are converted into bytes according to the platform's default character encoding, and these bytes are written in exactly the manner of the write(int) method.", "history": "Added in API level 1", "FullName": "public void print (char[] s)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#PrintWriter#checkError_E@"], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If start or end are negative, start is greater than end, or end is greater than csq.length()"]], "SeeAlso": [], "Permissions": [], "Description": "Appends a subsequence of the specified character sequence to this writer. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public PrintWriter append (CharSequence csq, int start, int end)"}, "write(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A String"], ["int", "int: Offset from which to start writing characters"], ["int", "int: Number of characters to write"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a portion of a string.", "history": "Added in API level 1", "FullName": "public void write (String s, int off, int len)"}, "println(char)": {"Returns": [], "Parameters": [["char", "char: the char value to be printed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints a character and then terminates the line. This method behaves as though it invokes print(char) and then println().", "history": "Added in API level 1", "FullName": "public void println (char x)"}, "printf(java.util.Locale,java.lang.String,java.lang.Object...)": {"Returns": [["@B_java#io#PrintWriter_E@", "This writer"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to apply during formatting. If l is null then no localization is applied."], ["@B_java#lang#String_E@", "String: A format string as described in Format string syntax."], ["@B_java#lang#Object_E@", "Object: Arguments referenced by the format specifiers in the format string. If there are more arguments than format specifiers, the extra arguments are ignored. The number of arguments is variable and may be zero. The maximum number of arguments is limited by the maximum dimension of a Java array as defined by The Java\u2122 Virtual Machine Specification. The behaviour on a null argument depends on the conversion."]], "Throws": [["@B_java#util#IllegalFormatException_E@", "If a format string contains an illegal syntax, a format specifier that is incompatible with the given arguments, insufficient arguments given the format string, or other illegal conditions. For specification of all possible formatting errors, see the Details section of the formatter class specification."], ["@B_java#lang#NullPointerException_E@", "If the format is null"]], "SeeAlso": [], "Permissions": [], "Description": "A convenience method to write a formatted string to this writer using the specified format string and arguments. If automatic flushing is enabled, calls to this method will flush the output buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public PrintWriter printf (Locale l, String format, Object... args)"}, "println(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object to be printed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prints an Object and then terminates the line. This method calls at first String.valueOf(x) to get the printed object's string value, then behaves as though it invokes print(java.lang.String) and then println().", "history": "Added in API level 1", "FullName": "public void println (Object x)"}, "println()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Terminates the current line by writing the line separator string. The line separator string is defined by the system property line.separator, and is not necessarily a single newline character ('\\n').", "history": "Added in API level 1", "FullName": "public void println ()"}, "write(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: String to be written"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes a string. This method cannot be inherited from the Writer class because it must suppress I/O exceptions.", "history": "Added in API level 1", "FullName": "public void write (String s)"}}, "Inheritance": ["@B_java#io#Writer_E@"], "ClassName": "java.io.PrintWriter", "ClassDesc": "Prints formatted representations of objects to a text-output stream. This class implements all of the @B_java#io#PrintStream_E@. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams. Unlike the @B_java#io#PrintStream_E@ class, if automatic flushing is enabled it will be done only when one of the Methods in this class never throw I/O exceptions, although some of its constructors may. The client may inquire as to whether any errors have occurred by invoking @B_java#io#PrintWriter#checkError_E@."}