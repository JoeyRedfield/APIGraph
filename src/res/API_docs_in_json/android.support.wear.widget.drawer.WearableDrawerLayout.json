{"Functions": {"WearableDrawerLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 26.0.0-beta2", "FullName": "WearableDrawerLayout (Context context)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "", "FullName": "void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "", "FullName": "void computeScroll ()"}, "onNestedPreFling(android.view.View, float, float)": {"Returns": [["boolean", "true if this parent consumed the fling ahead of the target view"]], "Parameters": [["@B_android#view#View_E@", "View: View that initiated the nested scroll"], ["float", "float: Horizontal velocity in pixels per second"], ["float", "float: Vertical velocity in pixels per second"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "React to a nested fling before the target view consumes it. This method siginfies that a nested scrolling child has detected a fling with the given velocity along each axis. Generally this means that a touch scroll has ended with a @B_android#view#VelocityTracker_E@ in the direction of scrolling that meets or exceeds the @B_android#view#ViewConfiguration#getScaledMinimumFlingVelocity_E@ along a scrollable axis. If a nested scrolling parent is consuming motion as part of a @B_android#view#ViewParent#onNestedPreScroll_E@, it may be appropriate for it to also consume the pre-fling to complete that same motion. By returning true from this method, the parent indicates that the child should not fling its own internal content as well.", "history": "", "FullName": "boolean onNestedPreFling (View target, float velocityX, float velocityY)"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "getNestedScrollAxes()": {"Returns": [["int", "Flags indicating the current axes of nested scrolling"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current axes of nested scrolling for this ViewGroup. A ViewGroup returning something other than @B_android#view#View#SCROLL_AXIS_NONE_E@ is currently acting as a nested scrolling parent for one or more descendant views in the hierarchy.", "history": "", "FullName": "int getNestedScrollAxes ()"}, "onApplyWindowInsets(android.view.WindowInsets)": {"Returns": [["@B_android#view#WindowInsets_E@", "The supplied insets with any applied insets consumed"]], "Parameters": [["@B_android#view#WindowInsets_E@", "WindowInsets: Insets to apply"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the view should apply @B_android#view#WindowInsets_E@ according to its internal policy. This method should be overridden by views that wish to apply a policy different from or in addition to the default behavior. Clients that wish to force a view subtree to apply insets should call @B_android#view#View#dispatchApplyWindowInsets_E@. Clients may supply an @B_android#view#View#OnApplyWindowInsetsListener_E@ to a view. If one is set it will be called during dispatch instead of this method. The listener may optionally call this method from its own implementation if it wishes to apply the view's default insets policy in addition to its own. Implementations of this method should either return the insets parameter unchanged or a new @B_android#view#WindowInsets_E@ cloned from the supplied insets with any insets consumed that this view applied itself. This allows new inset types added in future platform versions to pass through existing implementations unchanged without being erroneously consumed. By default if a view's @B_android#view#View#setFitsSystemWindows_E@ property is set then the view will consume the system window insets and apply them as padding for the view.", "history": "", "FullName": "WindowInsets onApplyWindowInsets (WindowInsets insets)"}, "onStopNestedScroll(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View that initiated the nested scroll"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "React to a nested scroll operation ending. Perform cleanup after a nested scrolling operation. This method will be called when a nested scroll stops, for example when a nested touch scroll ends with a @B_android#view#MotionEvent#ACTION_UP_E@ or @B_android#view#MotionEvent#ACTION_CANCEL_E@ event. Implementations of this method should always call their superclass's implementation of this method if one is present.", "history": "", "FullName": "void onStopNestedScroll (View target)"}, "onFlingComplete(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 26.0.0-beta2", "FullName": "void onFlingComplete (View view)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.wear.widget.drawer.WearableDrawerLayout", "ClassDesc": "Top-level container that allows interactive drawers to be pulled from the top and bottom edge of the window. For WearableDrawerLayout to work properly, scrolling children must send nested scrolling events. Views that implement @B_android#support#v4#view#NestedScrollingChild_E@ do this by default. To enable nested scrolling on frameworks views like https:##developer#android#com@B_android#widget#ListView_E@, set android:nestedScrollingEnabled=\"true\" on the view in the layout file, or call https:##developer#android#com@B_android#view#View#setNestedScrollingEnabled_E@ in code. This includes the main content in a WearableDrawerLayout, as well as the content inside of the drawers. To use WearableDrawerLayout with @B_android#support#wear#widget#drawer#WearableActionDrawerView_E@ or @B_android#support#wear#widget#drawer#WearableNavigationDrawerView_E@, place either drawer in a WearableDrawerLayout. To use custom content in a drawer, place @B_android#support#wear#widget#drawer#WearableDrawerView_E@ in a WearableDrawerLayout and specify the layout_gravity to pick the drawer location (the following example is for a top drawer). @B_android#support#wear#widget#drawer#WearableDrawerView#setDrawerContent_E@ and pass in your drawer content view, or specify it in the app:drawerContent XML attribute."}