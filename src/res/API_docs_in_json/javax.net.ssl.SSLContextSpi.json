{"Functions": {"engineGetSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "the SocketFactory object"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the engineInit() has not been called"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#getSocketFactory_E@"], "Permissions": [], "Description": "Returns a SocketFactory object for this context.", "history": "Added in API level 1", "FullName": "protected abstract SSLSocketFactory engineGetSocketFactory ()"}, "engineGetClientSessionContext()": {"Returns": [["@B_javax#net#ssl#SSLSessionContext_E@", "the SSLSessionContext object"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLContext#getClientSessionContext_E@"], "Permissions": [], "Description": "Returns a client SSLSessionContext object for this context.", "history": "Added in API level 1", "FullName": "protected abstract SSLSessionContext engineGetClientSessionContext ()"}, "engineCreateSSLEngine(java.lang.String, int)": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the SSLEngine Object"]], "Parameters": [["@B_java#lang#String_E@", "String: the non-authoritative name of the host"], ["int", "int: the non-authoritative port"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the engineInit() has not been called"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#createSSLEngine_E@"], "Permissions": [], "Description": "Creates a SSLEngine using this context. Applications using this factory method are providing hints for an internal session reuse strategy. Some cipher suites (such as Kerberos) require remote hostname information, in which case peerHost needs to be specified.", "history": "added in API level 1", "FullName": "protected abstract SSLEngine engineCreateSSLEngine (String host, int port)"}, "SSLContextSpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public SSLContextSpi ()"}, "engineGetDefaultSSLParameters()": {"Returns": [["@B_javax#net#ssl#SSLParameters_E@", "a copy of the SSLParameters object with the default settings"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the default SSL parameters could not be obtained."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the SSLParameters indicating the default settings for this SSL context. The parameters will always have the ciphersuite and protocols arrays set to non-null values. The default implementation obtains the parameters from an SSLSocket created by calling the", "history": "Added in API level 9", "FullName": "protected SSLParameters engineGetDefaultSSLParameters ()"}, "engineInit(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#KeyManager_E@", "KeyManager: the sources of authentication keys"], ["@B_javax#net#ssl#TrustManager_E@", "TrustManager: the sources of peer authentication trust decisions"], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#KeyManagementException_E@", "if this operation fails"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#init_E@"], "Permissions": [], "Description": "Initializes this context.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (KeyManager[] km, TrustManager[] tm, SecureRandom sr)"}, "engineGetSupportedSSLParameters()": {"Returns": [["@B_javax#net#ssl#SSLParameters_E@", "a copy of the SSLParameters object with the maximum supported settings"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the supported SSL parameters could not be obtained."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the SSLParameters indicating the maximum supported settings for this SSL context. The parameters will always have the ciphersuite and protocols arrays set to non-null values. The default implementation obtains the parameters from an SSLSocket created by calling the", "history": "Added in API level 9", "FullName": "protected SSLParameters engineGetSupportedSSLParameters ()"}, "engineGetServerSessionContext()": {"Returns": [["@B_javax#net#ssl#SSLSessionContext_E@", "the SSLSessionContext object"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLContext#getServerSessionContext_E@"], "Permissions": [], "Description": "Returns a server SSLSessionContext object for this context.", "history": "Added in API level 1", "FullName": "protected abstract SSLSessionContext engineGetServerSessionContext ()"}, "engineGetServerSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLServerSocketFactory_E@", "the ServerSocketFactory object"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the engineInit() has not been called"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#getServerSocketFactory_E@"], "Permissions": [], "Description": "Returns a ServerSocketFactory object for this context.", "history": "Added in API level 1", "FullName": "protected abstract SSLServerSocketFactory engineGetServerSocketFactory ()"}, "engineCreateSSLEngine(java.lang.String,int)": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the SSLEngine Object"]], "Parameters": [["@B_java#lang#String_E@", "String: the non-authoritative name of the host"], ["int", "int: the non-authoritative port"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the engineInit() has not been called"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#createSSLEngine_E@"], "Permissions": [], "Description": "Creates a SSLEngine using this context. Applications using this factory method are providing hints for an internal session reuse strategy. Some cipher suites (such as Kerberos) require remote hostname information, in which case peerHost needs to be specified.", "history": "Added in API level 1", "FullName": "protected abstract SSLEngine engineCreateSSLEngine (String host, int port)"}, "engineCreateSSLEngine()": {"Returns": [["@B_javax#net#ssl#SSLEngine_E@", "the SSLEngine Object"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the SSLContextImpl requires initialization and the engineInit() has not been called"]], "SeeAlso": ["@B_javax#net#ssl#SSLContext#createSSLEngine_E@"], "Permissions": [], "Description": "Creates a new SSLEngine using this context. Applications using this factory method are providing no hints for an internal session reuse strategy. If hints are desired, @B_javax#net#ssl#SSLContextSpi#engineCreateSSLEngine_E@ should be used instead. Some cipher suites (such as Kerberos) require remote hostname information, in which case this factory method should not be used.", "history": "Added in API level 1", "FullName": "protected abstract SSLEngine engineCreateSSLEngine ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.SSLContextSpi", "ClassDesc": "This class defines the SSLContext class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular SSL context."}