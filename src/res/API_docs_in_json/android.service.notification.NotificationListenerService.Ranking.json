{"Functions": {"getImportanceExplanation()": {"Returns": [["@B_java#lang#CharSequence_E@", "the explanation for the importance, or null if it is the natural importance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the importance has been overridden by user preference, then this will be non-null, and should be displayed to the user.", "history": "Added in API level 24", "FullName": "public CharSequence getImportanceExplanation ()"}, "getOverrideGroupKey()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the system has overridden the group key, then this will be non-null, and this key should be used to bundle notifications.", "history": "Added in API level 24", "FullName": "public String getOverrideGroupKey ()"}, "getRank()": {"Returns": [["int", "the rank of the notification, that is the 0-based index in the list of active notifications."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rank of the notification.", "history": "Added in API level 21", "FullName": "public int getRank ()"}, "getKey()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key of the notification this Ranking applies to.", "history": "Added in API level 21", "FullName": "public String getKey ()"}, "canBubble()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the user has allowed bubbles globally, at the app level, and at the channel level for this notification. This does not take into account the current importance of the notification, the current DND state, or whether the posting app is foreground.", "history": "Added in API level 29", "FullName": "public boolean canBubble ()"}, "getImportance()": {"Returns": [["int", "the importance of the notification Value is @B_android#app#NotificationManager#IMPORTANCE_UNSPECIFIED_E@, @B_android#app#NotificationManager#IMPORTANCE_NONE_E@, @B_android#app#NotificationManager#IMPORTANCE_MIN_E@, @B_android#app#NotificationManager#IMPORTANCE_LOW_E@, @B_android#app#NotificationManager#IMPORTANCE_DEFAULT_E@, or @B_android#app#NotificationManager#IMPORTANCE_HIGH_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the importance of the notification, which dictates its modes of presentation, see: @B_android#app#NotificationManager#IMPORTANCE_DEFAULT_E@, etc.", "history": "Added in API level 24", "FullName": "public int getImportance ()"}, "getSuppressedVisualEffects()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type(s) of visual effects that should be suppressed for this notification. See @B_android#app#NotificationManager#Policy_E@, e.g. @B_android#app#NotificationManager#Policy#SUPPRESSED_EFFECT_LIGHTS_E@.", "history": "Added in API level 24", "FullName": "public int getSuppressedVisualEffects ()"}, "isAmbient()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the notification is an ambient notification, that is a notification that doesn't require the user's immediate attention.", "history": "Added in API level 21", "FullName": "public boolean isAmbient ()"}, "getChannel()": {"Returns": [["@B_android#app#NotificationChannel_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the notification channel this notification was posted to, which dictates notification behavior and presentation.", "history": "Added in API level 26", "FullName": "public NotificationChannel getChannel ()"}, "getSmartActions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of smart @B_android#app#Notification#Action_E@ that can be added by the @B_android#service#notification#NotificationAssistantService_E@", "history": "Added in API level 29", "FullName": "public List<Notification.Action> getSmartActions ()"}, "getLastAudiblyAlertedMillis()": {"Returns": [["long", "the time of the last alerting behavior, in milliseconds. Value is a non-negative timestamp measured as the number of milliseconds since 1970-01-01T00:00:00Z."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the last time this notification alerted the user via sound or vibration. Value is a non-negative timestamp measured as the number of milliseconds since 1970-01-01T00:00:00Z.", "history": "Added in API level 29", "FullName": "public long getLastAudiblyAlertedMillis ()"}, "canShowBadge()": {"Returns": [["boolean", "true if the notification can be displayed as a badge, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this notification can be displayed as a badge.", "history": "Added in API level 26", "FullName": "public boolean canShowBadge ()"}, "NotificationListenerService.Ranking()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public NotificationListenerService.Ranking ()"}, "getUserSentiment()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns how the system thinks the user feels about notifications from the channel provided by @B_android#service#notification#NotificationListenerService#Ranking#getChannel_E@. You can use this information to expose controls to help the user block this channel's notifications, if the sentiment is @B_android#service#notification#NotificationListenerService#Ranking#USER_SENTIMENT_NEGATIVE_E@, or emphasize this notification if the sentiment is @B_android#service#notification#NotificationListenerService#Ranking#USER_SENTIMENT_POSITIVE_E@.", "history": "Added in API level 28", "FullName": "public int getUserSentiment ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object o)"}, "getSmartReplies()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of smart replies that can be added by the @B_android#service#notification#NotificationAssistantService_E@", "history": "Added in API level 29", "FullName": "public List<CharSequence> getSmartReplies ()"}, "matchesInterruptionFilter()": {"Returns": [["boolean", "true if the notification is allowed by the filter, or false if it is blocked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the notification matches the user's interruption filter.", "history": "Added in API level 21", "FullName": "public boolean matchesInterruptionFilter ()"}, "isSuspended()": {"Returns": [["boolean", "true if the notification should be hidden, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the app that posted this notification is suspended, so this notification should be hidden.", "history": "Added in API level 28", "FullName": "public boolean isSuspended ()"}}, "Inheritance": [], "ClassName": "android.service.notification.NotificationListenerService.Ranking", "ClassDesc": "Stores ranking related information on a currently active notification. Ranking objects aren't automatically updated as notification events occur. Instead, ranking information has to be retrieved again via the current @B_android#service#notification#NotificationListenerService#RankingMap_E@."}