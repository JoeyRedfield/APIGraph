{"Functions": {"shortValue()": {"Returns": [["short", "the divided value of the numerator and denominator as a short."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified number as a short. @B_android#util#Rational#isInfinite_E@ rationals are converted to a short value identically to @B_android#util#Rational#intValue_E@; the int result is then truncated to a short before returning the value.", "history": "Added in API level 21", "FullName": "public short shortValue ()"}, "parseRational(java.lang.String)": {"Returns": [["@B_android#util#Rational_E@", "the rational value represented by string."]], "Parameters": [["@B_java#lang#String_E@", "String: the string representation of a rational value."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if string cannot be parsed as a rational value."], ["@B_java#lang#NullPointerException_E@", "if string was null"]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified string as a rational value. The ASCII characters \\u003a (':') and \\u002f ('/') are recognized as separators between the numerator and denumerator. For any Rational r: Rational.parseRational(r.toString()).equals(r). However, the method also handles rational numbers expressed in the following forms: \"/:=> new Rational(num, den);, where", "history": "Added in API level 21", "FullName": "public static Rational parseRational (String string)"}, "intValue()": {"Returns": [["int", "the divided value of the numerator and denominator as a int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified number as a int. @B_android#util#Rational#isInfinite_E@ rationals are converted to an int value by dividing the numerator by the denominator; conversion for non-finite values happens identically to casting a floating point value to an int, in particular: Positive infinity saturates to the largest maximum integer @B_java#lang#Integer#MAX_VALUE_E@ Negative infinity saturates to the smallest maximum integer @B_java#lang#Integer#MIN_VALUE_E@ Not-A-Number (NaN) returns 0.", "history": "Added in API level 21", "FullName": "public int intValue ()"}, "isInfinite()": {"Returns": [["boolean", "true if this rational is a (positive or negative) infinite value; false if this is a finite number value (or NaN)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this rational represents an infinite value. An infinite value occurs when the denominator is 0 (but the numerator is not).", "history": "Added in API level 21", "FullName": "public boolean isInfinite ()"}, "compareTo(android.util.Rational)": {"Returns": [["int", "a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified rational."]], "Parameters": [["@B_android#util#Rational_E@", "Rational: the rational to be compared"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if another was null"]], "SeeAlso": [], "Permissions": [], "Description": "Compare this rational to the specified rational to determine their natural order. @B_android#util#Rational#NaN_E@ is considered to be equal to itself and greater than all other Rational values. Otherwise, if the objects are not @B_android#util#Rational#equals_E@, then the following rules apply: Positive infinity is greater than any other finite number (or negative infinity) Negative infinity is less than any other finite number (or positive infinity) The finite number represented by this rational is checked numerically against the other finite number by converting both rationals to a common denominator multiple and comparing their numerators.", "history": "Added in API level 21", "FullName": "public int compareTo (Rational another)"}, "Rational(int,int)": {"Returns": [], "Parameters": [["int", "int: the numerator of the rational"], ["int", "int: the denominator of the rational"]], "Throws": [], "SeeAlso": ["@B_android#util#Rational#equals_E@"], "Permissions": [], "Description": "Create a Rational with a given numerator and denominator. The signs of the numerator and the denominator may be flipped such that the denominator is always positive. Both the numerator and denominator will be converted to their reduced forms (see @B_android#util#Rational#equals_E@ for more details). For example, a rational of 2/4 will be reduced to 1/2. a rational of 1/-1 will be flipped to -1/1 a rational of 5/0 will be reduced to 1/0 a rational of 0/5 will be reduced to 0/1", "history": "Added in API level 21", "FullName": "public Rational (int numerator, int denominator)"}, "floatValue()": {"Returns": [["float", "the divided value of the numerator and denominator as a float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified number as a float. The float is calculated by converting both the numerator and denominator to a float; then returning the result of dividing the numerator by the denominator.", "history": "Added in API level 21", "FullName": "public float floatValue ()"}, "getDenominator()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the denominator of the rational The denominator may return 0, in which case the rational may represent positive infinity (if the numerator was positive), negative infinity (if the numerator was negative), or NaN (if the numerator was 0). The denominator will always return 1 if the numerator is 0.", "history": "Added in API level 21", "FullName": "public int getDenominator ()"}, "Rational(int, int)": {"Returns": [], "Parameters": [["int", "int: the numerator of the rational"], ["int", "int: the denominator of the rational"]], "Throws": [], "SeeAlso": ["@B_android#util#Rational#equals_E@"], "Permissions": [], "Description": "Create a Rational with a given numerator and denominator. The signs of the numerator and the denominator may be flipped such that the denominator is always positive. Both the numerator and denominator will be converted to their reduced forms (see @B_android#util#Rational#equals_E@ for more details). For example, a rational of 2/4 will be reduced to 1/2. a rational of 1/-1 will be flipped to -1/1 a rational of 5/0 will be reduced to 1/0 a rational of 0/5 will be reduced to 0/1", "history": "added in API level 21", "FullName": "public Rational (int numerator, int denominator)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation of this rational, e.g. \"1/2\". The following rules of conversion apply: NaN values will return \"NaN\" Positive infinity values will return \"Infinity\" Negative infinity values will return \"-Infinity\" All other values will return \"numerator/denominator\" where numerator and denominator are substituted with the appropriate numerator and denominator values.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "isZero()": {"Returns": [["boolean", "true if this rational is finite zero value; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this rational represents a zero value. A zero value is a @B_android#util#Rational#isFinite_E@ rational with a numerator of 0.", "history": "Added in API level 21", "FullName": "public boolean isZero ()"}, "doubleValue()": {"Returns": [["double", "the divided value of the numerator and denominator as a double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified number as a double. The double is calculated by converting both the numerator and denominator to a double; then returning the result of dividing the numerator by the denominator.", "history": "Added in API level 21", "FullName": "public double doubleValue ()"}, "longValue()": {"Returns": [["long", "the divided value of the numerator and denominator as a long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified number as a long. @B_android#util#Rational#isInfinite_E@ rationals are converted to an long value by dividing the numerator by the denominator; conversion for non-finite values happens identically to casting a floating point value to a long, in particular: Positive infinity saturates to the largest maximum long @B_java#lang#Long#MAX_VALUE_E@ Negative infinity saturates to the smallest maximum long @B_java#lang#Long#MIN_VALUE_E@ Not-A-Number (NaN) returns 0.", "history": "Added in API level 21", "FullName": "public long longValue ()"}, "isFinite()": {"Returns": [["boolean", "true if this rational is a (positive or negative) infinite value; false if this is a finite number value (or NaN)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this rational represents a finite value. A finite value occurs when the denominator is not 0; in other words the rational is neither infinity or NaN.", "history": "Added in API level 21", "FullName": "public boolean isFinite ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "A boolean that determines whether or not the two Rational objects are equal."]], "Parameters": [["@B_java#lang#Object_E@", "Object: a reference to another object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare this Rational to another object and see if they are equal. A Rational object can only be equal to another Rational object (comparing against any other type will return false). A Rational object is considered equal to another Rational object if and only if one of the following holds: Both are NaN Both are infinities of the same sign Both have the same numerator and denominator in their reduced form A reduced form of a Rational is calculated by dividing both the numerator and the denominator by their greatest common divisor.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "isNaN()": {"Returns": [["boolean", "true if this rational is a Not-a-Number (NaN) value; false if this is a (potentially infinite) number value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this rational is a Not-a-Number (NaN) value. A NaN value occurs when both the numerator and the denominator are 0.", "history": "Added in API level 21", "FullName": "public boolean isNaN ()"}, "getNumerator()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the numerator of the rational. The numerator will always return 1 if this rational represents infinity (that is, the denominator is 0).", "history": "Added in API level 21", "FullName": "public int getNumerator ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "android.util.Rational", "ClassDesc": "An immutable data type representation a rational number. Contains a pair of ints representing the numerator and denominator of a Rational number."}