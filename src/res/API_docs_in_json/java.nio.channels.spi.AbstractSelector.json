{"Functions": {"cancelledKeys()": {"Returns": [["@B_java#util#Set_E@", "The cancelled-key set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this selector's cancelled-key set. This set should only be used while synchronized upon it.", "history": "Added in API level 1", "FullName": "protected final Set<SelectionKey> cancelledKeys ()"}, "isOpen()": {"Returns": [["boolean", "true if, and only if, this selector is open"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this selector is open.", "history": "Added in API level 1", "FullName": "public final boolean isOpen ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks the end of an I/O operation that might block indefinitely. This method should be invoked in tandem with the @B_java#nio#channels#spi#AbstractSelector#begin_E@ method, using a", "history": "Added in API level 1", "FullName": "protected final void end ()"}, "AbstractSelector(java.nio.channels.spi.SelectorProvider)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#SelectorProvider_E@", "SelectorProvider: The provider that created this selector"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected AbstractSelector (SelectorProvider provider)"}, "begin()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks the beginning of an I/O operation that might block indefinitely. This method should be invoked in tandem with the @B_java#nio#channels#spi#AbstractSelector#end_E@ method, using a Invoking this method arranges for the selector's @B_java#nio#channels#Selector#wakeup_E@ method to be invoked if a thread's @B_java#lang#Thread#interrupt_E@ method is invoked while the thread is blocked in an I/O operation upon the selector.", "history": "Added in API level 1", "FullName": "protected final void begin ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this selector. If the selector has already been closed then this method returns immediately. Otherwise it marks the selector as closed and then invokes the @B_java#nio#channels#spi#AbstractSelector#implCloseSelector_E@ method in order to complete the close operation.", "history": "Added in API level 1", "FullName": "public final void close ()"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#SelectorProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 1", "FullName": "public final SelectorProvider provider ()"}, "implCloseSelector()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs while closing the selector"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this selector. This method is invoked by the @B_java#nio#channels#spi#AbstractSelector#close_E@ method in order to perform the actual work of closing the selector. This method is only invoked if the selector has not yet been closed, and it is never invoked more than once. An implementation of this method must arrange for any other thread that is blocked in a selection operation upon this selector to return immediately as if by invoking the @B_java#nio#channels#Selector#wakeup_E@ method.", "history": "Added in API level 1", "FullName": "protected abstract void implCloseSelector ()"}, "deregister(java.nio.channels.spi.AbstractSelectionKey)": {"Returns": [], "Parameters": [["@B_java#nio#channels#spi#AbstractSelectionKey_E@", "AbstractSelectionKey: The selection key to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given key from its channel's key set. This method must be invoked by the selector for each channel that it deregisters.", "history": "Added in API level 1", "FullName": "protected final void deregister (AbstractSelectionKey key)"}, "register(java.nio.channels.spi.AbstractSelectableChannel,int,java.lang.Object)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "A new key representing the registration of the given channel with this selector"]], "Parameters": [["@B_java#nio#channels#spi#AbstractSelectableChannel_E@", "AbstractSelectableChannel: The channel to be registered"], ["int", "int: The initial interest set, which must be valid"], ["@B_java#lang#Object_E@", "Object: The initial attachment for the resulting key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers the given channel with this selector. This method is invoked by a channel's @B_java#nio#channels#SelectableChannel#register_E@ method in order to perform the actual work of registering the channel with this selector.", "history": "Added in API level 1", "FullName": "protected abstract SelectionKey register (AbstractSelectableChannel ch, int ops, Object att)"}}, "Inheritance": ["@B_java#nio#channels#Selector_E@"], "ClassName": "java.nio.channels.spi.AbstractSelector", "ClassDesc": "Base implementation class for selectors. This class encapsulates the low-level machinery required to implement the interruption of selection operations. A concrete selector class must invoke the @B_java#nio#channels#spi#AbstractSelector#begin_E@ and @B_java#nio#channels#spi#AbstractSelector#end_E@ methods before and after, respectively, invoking an I/O operation that might block indefinitely. In order to ensure that the @B_java#nio#channels#spi#AbstractSelector#end_E@ method is always invoked, these methods should be used within a This class also defines methods for maintaining a selector's cancelled-key set and for removing a key from its channel's key set, and declares the abstract @B_java#nio#channels#spi#AbstractSelector#register_E@ method that is invoked by a selectable channel's @B_java#nio#channels#SelectableChannel#register_E@ method in order to perform the actual work of registering a channel."}