{"Functions": {"getSpanCount()": {"Returns": [["int", "The number of spans"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayoutManager#setSpanCount_E@"], "Permissions": [], "Description": "Returns the number of spans laid out by this grid.", "history": "added in version 22.0.0", "FullName": "int getSpanCount ()"}, "setStackFromEnd(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "stackFromEnd is not supported by GridLayoutManager. Consider using @B_android#support#v7#widget#LinearLayoutManager#setReverseLayout_E@.", "history": "added in version 22.0.0", "FullName": "void setStackFromEnd (boolean stackFromEnd)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#RecyclerView#LayoutParams_E@", "A new LayoutParams for a child view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a default LayoutParams object for a child of the RecyclerView. LayoutManagers will often want to use a custom LayoutParams type to store extra information specific to the layout. Client code should subclass @B_android#support#v7#widget#RecyclerView#LayoutParams_E@ for this purpose. Important: if you use your own custom LayoutParams type you must also override @B_android#support#v7#widget#RecyclerView#LayoutManager#checkLayoutParams_E@, @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@ and @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@.", "history": "added in version 22.0.0", "FullName": "RecyclerView.LayoutParams generateDefaultLayoutParams ()"}, "getSpanSizeLookup()": {"Returns": [["@B_android#support#v7#widget#GridLayoutManager#SpanSizeLookup_E@", "The current @B_android#support#v7#widget#GridLayoutManager#SpanSizeLookup_E@ used by the GridLayoutManager."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current @B_android#support#v7#widget#GridLayoutManager#SpanSizeLookup_E@ used by the GridLayoutManager.", "history": "added in version 22.0.0", "FullName": "GridLayoutManager.SpanSizeLookup getSpanSizeLookup ()"}, "GridLayoutManager(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Current context, will be used to access resources."], ["int", "int: The number of columns in the grid"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a vertical GridLayoutManager", "history": "added in version 22.0.0", "FullName": "GridLayoutManager (Context context, int spanCount)"}, "setSpanCount(int)": {"Returns": [], "Parameters": [["int", "int: The total number of spans in the grid"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#GridLayoutManager#getSpanCount_E@"], "Permissions": [], "Description": "Sets the number of spans to be laid out. If @B_android#support#v7#widget#LinearLayoutManager#getOrientation_E@ is @B_android#support#v7#widget#LinearLayoutManager#VERTICAL_E@, this is the number of columns. If @B_android#support#v7#widget#LinearLayoutManager#getOrientation_E@ is @B_android#support#v7#widget#LinearLayoutManager#HORIZONTAL_E@, this is the number of rows.", "history": "added in version 22.0.0", "FullName": "void setSpanCount (int spanCount)"}, "supportsPredictiveItemAnimations()": {"Returns": [["boolean", "true if predictive item animations should be enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this LayoutManager supports automatic item animations. A LayoutManager wishing to support item animations should obey certain rules as outlined in @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@. The default return value is false, so subclasses of LayoutManager will not get predictive item animations by default. Whether item animations are enabled in a RecyclerView is determined both by the return value from this method and the @B_android#support#v7#widget#RecyclerView#setItemAnimator_E@ set on the RecyclerView itself. If the RecyclerView has a non-null ItemAnimator but this method returns false, then simple item animations will be enabled, in which views that are moving onto or off of the screen are simply faded in/out. If the RecyclerView has a non-null ItemAnimator and this method returns true, then there will be two calls to @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ to setup up the information needed to more intelligently predict where appearing and disappearing views should be animated from/to.", "history": "added in version 22.0.0", "FullName": "boolean supportsPredictiveItemAnimations ()"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v7#widget#RecyclerView#LayoutManager_E@", "@B_android#support#v7#widget#LinearLayoutManager_E@"], "ClassName": "android.support.v7.widget.GridLayoutManager", "ClassDesc": "A @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ implementations that lays out items in a grid. By default, each item occupies 1 span. You can change it by providing a custom @B_android#support#v7#widget#GridLayoutManager#SpanSizeLookup_E@ instance via @B_android#support#v7#widget#GridLayoutManager#setSpanSizeLookup_E@."}