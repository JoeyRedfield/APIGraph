{"Functions": {"attach(java.lang.Object)": {"Returns": [["@B_java#lang#Object_E@", "The previously-attached object, if any, otherwise null"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to be attached; may be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attaches the given object to this key. An attached object may later be retrieved via the @B_java#nio#channels#SelectionKey#attachment_E@ method. Only one object may be attached at a time; invoking this method causes any previous attachment to be discarded. The current attachment may be discarded by attaching", "history": "Added in API level 1", "FullName": "public final Object attach (Object ob)"}, "interestOps()": {"Returns": [["int", "This key's interest set"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this key's interest set. It is guaranteed that the returned set will only contain operation bits that are valid for this key's channel. This method may be invoked at any time. Whether or not it blocks, and for how long, is implementation-dependent.", "history": "Added in API level 1", "FullName": "public abstract int interestOps ()"}, "attachment()": {"Returns": [["@B_java#lang#Object_E@", "The object currently attached to this key, or null if there is no attachment"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current attachment.", "history": "Added in API level 1", "FullName": "public final Object attachment ()"}, "isWritable()": {"Returns": [["boolean", "true if, and only if, readyOps() & OP_WRITE is nonzero"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this key's channel is ready for writing. An invocation of this method of the form If this key's channel does not support write operations then this method always returns", "history": "Added in API level 1", "FullName": "public final boolean isWritable ()"}, "isConnectable()": {"Returns": [["boolean", "true if, and only if, readyOps() & OP_CONNECT is nonzero"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this key's channel has either finished, or failed to finish, its socket-connection operation. An invocation of this method of the form If this key's channel does not support socket-connect operations then this method always returns", "history": "Added in API level 1", "FullName": "public final boolean isConnectable ()"}, "readyOps()": {"Returns": [["int", "This key's ready-operation set"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this key's ready-operation set. It is guaranteed that the returned set will only contain operation bits that are valid for this key's channel.", "history": "Added in API level 1", "FullName": "public abstract int readyOps ()"}, "isReadable()": {"Returns": [["boolean", "true if, and only if, readyOps() & OP_READ is nonzero"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this key's channel is ready for reading. An invocation of this method of the form If this key's channel does not support read operations then this method always returns", "history": "Added in API level 1", "FullName": "public final boolean isReadable ()"}, "channel()": {"Returns": [["@B_java#nio#channels#SelectableChannel_E@", "This key's channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the channel for which this key was created. This method will continue to return the channel even after the key is cancelled.", "history": "Added in API level 1", "FullName": "public abstract SelectableChannel channel ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests that the registration of this key's channel with its selector be cancelled. Upon return the key will be invalid and will have been added to its selector's cancelled-key set. The key will be removed from all of the selector's key sets during the next selection operation. If this key has already been cancelled then invoking this method has no effect. Once cancelled, a key remains forever invalid. This method may be invoked at any time. It synchronizes on the selector's cancelled-key set, and therefore may block briefly if invoked concurrently with a cancellation or selection operation involving the same selector.", "history": "Added in API level 1", "FullName": "public abstract void cancel ()"}, "isAcceptable()": {"Returns": [["boolean", "true if, and only if, readyOps() & OP_ACCEPT is nonzero"]], "Parameters": [], "Throws": [["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether this key's channel is ready to accept a new socket connection. An invocation of this method of the form If this key's channel does not support socket-accept operations then this method always returns", "history": "Added in API level 1", "FullName": "public final boolean isAcceptable ()"}, "SelectionKey()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an instance of this class.", "history": "Added in API level 1", "FullName": "protected SelectionKey ()"}, "selector()": {"Returns": [["@B_java#nio#channels#Selector_E@", "This key's selector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the selector for which this key was created. This method will continue to return the selector even after the key is cancelled.", "history": "Added in API level 1", "FullName": "public abstract Selector selector ()"}, "isValid()": {"Returns": [["boolean", "true if, and only if, this key is valid"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this key is valid. A key is valid upon creation and remains so until it is cancelled, its channel is closed, or its selector is closed.", "history": "Added in API level 1", "FullName": "public abstract boolean isValid ()"}, "interestOps(int)": {"Returns": [["@B_java#nio#channels#SelectionKey_E@", "This selection key"]], "Parameters": [["int", "int: The new interest set"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If a bit in the set does not correspond to an operation that is supported by this key's channel, that is, if (ops & ~channel().validOps()) != 0"], ["@B_java#nio#channels#CancelledKeyException_E@", "If this key has been cancelled"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this key's interest set to the given value. This method may be invoked at any time. Whether or not it blocks, and for how long, is implementation-dependent.", "history": "Added in API level 1", "FullName": "public abstract SelectionKey interestOps (int ops)"}}, "Inheritance": [], "ClassName": "java.nio.channels.SelectionKey", "ClassDesc": "A token representing the registration of a @B_java#nio#channels#SelectableChannel_E@ with a @B_java#nio#channels#Selector_E@. A selection key is created each time a channel is registered with a selector. A key remains valid until it is @B_java#nio#channels#SelectionKey#cancel_E@ method, by closing its channel, or by closing its selector. Cancelling a key does not immediately remove it from its selector; it is instead added to the selector's @B_java#nio#channels#SelectionKey#isValid_E@ method. A selection key contains two The @B_java#nio#channels#SelectionKey#interestOps_E@ method. The That a selection key's ready set indicates that its channel is ready for some operation category is a hint, but not a guarantee, that an operation in such a category may be performed by a thread without causing the thread to block. A ready set is most likely to be accurate immediately after the completion of a selection operation. It is likely to be made inaccurate by external events and by I/O operations that are invoked upon the corresponding channel. This class defines all known operation-set bits, but precisely which bits are supported by a given channel depends upon the type of the channel. Each subclass of @B_java#nio#channels#SelectableChannel_E@ defines an @B_java#nio#channels#SelectableChannel#validOps_E@ method which returns a set identifying just those operations that are supported by the channel. An attempt to set or test an operation-set bit that is not supported by a key's channel will result in an appropriate run-time exception. It is often necessary to associate some application-specific data with a selection key, for example an object that represents the state of a higher-level protocol and handles readiness notifications in order to implement that protocol. Selection keys therefore support the @B_java#nio#channels#SelectionKey#attach_E@ method and then later retrieved via the @B_java#nio#channels#SelectionKey#attachment_E@ method. Selection keys are safe for use by multiple concurrent threads. The operations of reading and writing the interest set will, in general, be synchronized with certain operations of the selector. Exactly how this synchronization is performed is implementation-dependent: In a naive implementation, reading or writing the interest set may block indefinitely if a selection operation is already in progress; in a high-performance implementation, reading or writing the interest set may block briefly, if at all. In any case, a selection operation will always use the interest-set value that was current at the moment that the operation began."}