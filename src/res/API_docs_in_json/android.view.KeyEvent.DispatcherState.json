{"Functions": {"reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset back to initial state.", "history": "Added in API level 5", "FullName": "public void reset ()"}, "startTracking(android.view.KeyEvent,java.lang.Object)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start tracking the key code associated with the given event. This can only be called on a key down. It will allow you to see any long press associated with the key, and will result in @B_android#view#KeyEvent#isTracking_E@ return true on the long press and up events. This is only needed if you are directly dispatching events, rather than handling them in @B_android#view#KeyEvent#Callback#onKeyDown_E@.", "history": "Added in API level 5", "FullName": "public void startTracking (KeyEvent event, Object target)"}, "KeyEvent.DispatcherState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 5", "FullName": "public KeyEvent.DispatcherState ()"}, "isTracking(android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the key event is for a key code that is currently being tracked by the dispatcher.", "history": "Added in API level 5", "FullName": "public boolean isTracking (KeyEvent event)"}, "reset(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop any tracking associated with this target.", "history": "Added in API level 5", "FullName": "public void reset (Object target)"}, "handleUpEvent(android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle key up event to stop tracking. This resets the dispatcher state, and updates the key event state based on it. This is only needed if you are directly dispatching events, rather than handling them in @B_android#view#KeyEvent#Callback#onKeyUp_E@.", "history": "Added in API level 5", "FullName": "public void handleUpEvent (KeyEvent event)"}, "performedLongPress(android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Keep track of the given event's key code as having performed an action with a long press, so no action should occur on the up. This is only needed if you are directly dispatching events, rather than handling them in @B_android#view#KeyEvent#Callback#onKeyLongPress_E@.", "history": "Added in API level 5", "FullName": "public void performedLongPress (KeyEvent event)"}}, "Inheritance": [], "ClassName": "android.view.KeyEvent.DispatcherState", "ClassDesc": "Use with @B_android#view#KeyEvent#dispatch_E@ for more advanced key dispatching, such as long presses."}