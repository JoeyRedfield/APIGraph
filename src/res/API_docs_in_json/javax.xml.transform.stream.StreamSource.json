{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "The system identifier that was set with setSystemId, or null if setSystemId was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the system identifier that was set with setSystemId.", "history": "Added in API level 8", "FullName": "public String getSystemId ()"}, "setInputStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A valid InputStream reference to an XML stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the byte stream to be used as input. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. If this Source object is used to process a stylesheet, normally setSystemId should also be called, so that relative URL references can be resolved.", "history": "Added in API level 8", "FullName": "public void setInputStream (InputStream inputStream)"}, "setReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A valid Reader reference to an XML CharacterStream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the input to be a character reader. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.", "history": "Added in API level 8", "FullName": "public void setReader (Reader reader)"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "The byte stream that was set with setByteStream, or null if setByteStream or the ByteStream constructor was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the byte stream that was set with setByteStream.", "history": "Added in API level 8", "FullName": "public InputStream getInputStream ()"}, "setPublicId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The public identifier as a string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the public identifier for this Source. The public identifier is always optional: if the application writer includes one, it will be provided as part of the location information.", "history": "Added in API level 8", "FullName": "public void setPublicId (String publicId)"}, "StreamSource(java.io.Reader, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A valid Reader reference to an XML character stream."], ["@B_java#lang#String_E@", "String: Must be a String that conforms to the URI syntax."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a character reader. Normally, a stream should be used rather than a reader, so that the XML parser may resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.", "history": "added in API level 8", "FullName": "public StreamSource (Reader reader, String systemId)"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The system identifier as a URL string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the system identifier for this Source. The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if there is no byte stream or character stream specified).", "history": "Added in API level 8", "FullName": "public void setSystemId (String systemId)"}, "StreamSource(java.io.Reader,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A valid Reader reference to an XML character stream."], ["@B_java#lang#String_E@", "String: Must be a String that conforms to the URI syntax."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a character reader. Normally, a stream should be used rather than a reader, so that the XML parser may resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.", "history": "Added in API level 8", "FullName": "public StreamSource (Reader reader, String systemId)"}, "StreamSource()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#xml#transform#Transformer#transform_E@"], "Permissions": [], "Description": "Zero-argument default constructor. If this constructor is used, and no Stream source is set using @B_javax#xml#transform#stream#StreamSource#setInputStream_E@ or @B_javax#xml#transform#stream#StreamSource#setReader_E@, then the Transformer will create an empty source @B_java#io#InputStream_E@ using @B_java#io#InputStream#InputStream_E@.", "history": "Added in API level 8", "FullName": "public StreamSource ()"}, "StreamSource(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Must be a String that conforms to the URI syntax."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a URL.", "history": "Added in API level 8", "FullName": "public StreamSource (String systemId)"}, "StreamSource(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A valid InputStream reference to an XML stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a byte stream. Normally, a stream should be used rather than a reader, so the XML parser can resolve character encoding specified by the XML declaration. If this constructor is used to process a stylesheet, normally setSystemId should also be called, so that relative URI references can be resolved.", "history": "Added in API level 8", "FullName": "public StreamSource (InputStream inputStream)"}, "StreamSource(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: Must a non-null File reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a File.", "history": "Added in API level 8", "FullName": "public StreamSource (File f)"}, "StreamSource(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A valid Reader reference to an XML character stream."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a character reader. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. However, in many cases the encoding of the input stream is already resolved, as in the case of reading XML from a StringReader.", "history": "Added in API level 8", "FullName": "public StreamSource (Reader reader)"}, "getReader()": {"Returns": [["@B_java#io#Reader_E@", "The character stream that was set with setReader, or null if setReader or the Reader constructor was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character stream that was set with setReader.", "history": "Added in API level 8", "FullName": "public Reader getReader ()"}, "setSystemId(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: Must a non-null File reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the system ID from a File reference.", "history": "Added in API level 8", "FullName": "public void setSystemId (File f)"}, "StreamSource(java.io.InputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A valid InputStream reference to an XML stream."], ["@B_java#lang#String_E@", "String: Must be a String that conforms to the URI syntax."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a StreamSource from a byte stream. Normally, a stream should be used rather than a reader, so that the XML parser can resolve character encoding specified by the XML declaration. This constructor allows the systemID to be set in addition to the input stream, which allows relative URIs to be processed.", "history": "Added in API level 8", "FullName": "public StreamSource (InputStream inputStream, String systemId)"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "The public identifier that was set with setPublicId, or null if setPublicId was not called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the public identifier that was set with setPublicId.", "history": "Added in API level 8", "FullName": "public String getPublicId ()"}}, "Inheritance": [], "ClassName": "javax.xml.transform.stream.StreamSource", "ClassDesc": "Acts as an holder for a transformation Source in the form of a stream of XML markup. Note: Due to their internal use of either a @B_java#io#Reader_E@ or @B_java#io#InputStream_E@ instance, StreamSource instances may only be used once."}