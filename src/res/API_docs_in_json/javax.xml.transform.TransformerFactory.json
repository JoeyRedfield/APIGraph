{"Functions": {"getAssociatedStylesheet(javax.xml.transform.Source,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_javax#xml#transform#Source_E@", "A Source Object suitable for passing to the TransformerFactory."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: The XML source document."], ["@B_java#lang#String_E@", "String: The media attribute to be matched. May be null, in which case the preferred templates will be used (i.e. alternate = no)."], ["@B_java#lang#String_E@", "String: The value of the title attribute to match. May be null."], ["@B_java#lang#String_E@", "String: The value of the charset attribute to match. May be null."]], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "An Exception is thrown if an error occurs during parsing of the source."]], "SeeAlso": [], "Permissions": [], "Description": "Get the stylesheet specification(s) associated with the XML Source document via the", "history": "Added in API level 8", "FullName": "public abstract Source getAssociatedStylesheet (Source source, String media, String title, String charset)"}, "newTransformer(javax.xml.transform.Source)": {"Returns": [["@B_javax#xml#transform#Transformer_E@", "A Transformer object that may be used to perform a transformation in a single Thread, never null."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: Source of XSLT document used to create Transformer. Examples of XML Sources include @B_javax#xml#transform#stream#StreamSource_E@, @B_javax#xml#transform#sax#SAXSource_E@ and @B_javax#xml#transform#dom#DOMSource_E@."]], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "Thrown if there are errors when parsing the Source or it is not possible to create a Transformer instance."]], "SeeAlso": [], "Permissions": [], "Description": "Process the Source into a Transformer Object. The Source is an XSLT document that conforms to Transformer in multiple Threads running concurrently. Different TransformerFactories can be used concurrently by different Threads.", "history": "Added in API level 8", "FullName": "public abstract Transformer newTransformer (Source source)"}, "newTemplates(javax.xml.transform.Source)": {"Returns": [["@B_javax#xml#transform#Templates_E@", "A Templates object capable of being used for transformation purposes, never null."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: An object that holds a URL, input stream, etc."]], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "May throw this during the parse when it is constructing the Templates object and fails."]], "SeeAlso": [], "Permissions": [], "Description": "Process the Source into a Templates object, which is a a compiled representation of the source. This Templates object may then be used concurrently across multiple threads. Creating a Templates object allows the TransformerFactory to do detailed performance optimization of transformation instructions, without penalizing runtime transformation.", "history": "Added in API level 8", "FullName": "public abstract Templates newTemplates (Source source)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."], ["boolean", "boolean: Is feature state true or false."]], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "if this TransformerFactory or the Transformers or Templates it creates cannot support this feature."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set a feature for this TransformerFactory and Transformers or Templates created by this factory. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. An @B_javax#xml#transform#TransformerConfigurationException_E@ is thrown if this TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits and behave in a secure fashion as defined by the implementation. Examples include resolving user defined style sheets and functions. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_javax#xml#transform#ErrorListener#fatalError_E@. See @B_javax#xml#transform#TransformerFactory#setErrorListener_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "added in API level 8", "FullName": "public abstract void setFeature (String name, boolean value)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "The current state of the feature, true or false."]], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Look up the value of a feature. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. false is returned if this TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state.", "history": "Added in API level 8", "FullName": "public abstract boolean getFeature (String name)"}, "getErrorListener()": {"Returns": [["@B_javax#xml#transform#ErrorListener_E@", "The current error handler, which should never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the error event handler for the TransformerFactory.", "history": "Added in API level 8", "FullName": "public abstract ErrorListener getErrorListener ()"}, "setAttribute(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["@B_java#lang#Object_E@", "Object: The value of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to set specific attributes on the underlying implementation. An attribute in this context is defined to be an option that the implementation provides. An IllegalArgumentException is thrown if the underlying implementation doesn't recognize the attribute.", "history": "added in API level 8", "FullName": "public abstract void setAttribute (String name, Object value)"}, "newTransformer()": {"Returns": [["@B_javax#xml#transform#Transformer_E@", "A Transformer object that may be used to perform a transformation in a single thread, never null."]], "Parameters": [], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "Thrown if it is not possible to create a Transformer instance."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new Transformer that performs a copy of the Source to the Result. i.e. the \"identity transform\".", "history": "Added in API level 8", "FullName": "public abstract Transformer newTransformer ()"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Feature name."], ["boolean", "boolean: Is feature state true or false."]], "Throws": [["@B_javax#xml#transform#TransformerConfigurationException_E@", "if this TransformerFactory or the Transformers or Templates it creates cannot support this feature."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set a feature for this TransformerFactory and Transformers or Templates created by this factory. Feature names are fully qualified @B_java#net#URI_E@s. Implementations may define their own features. An @B_javax#xml#transform#TransformerConfigurationException_E@ is thrown if this TransformerFactory or the Transformers or Templates it creates cannot support the feature. It is possible for an TransformerFactory to expose a feature value but be unable to change its state. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits and behave in a secure fashion as defined by the implementation. Examples include resolving user defined style sheets and functions. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_javax#xml#transform#ErrorListener#fatalError_E@. See @B_javax#xml#transform#TransformerFactory#setErrorListener_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "Added in API level 8", "FullName": "public abstract void setFeature (String name, boolean value)"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "value The value of the attribute."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to retrieve specific attributes on the underlying implementation. An IllegalArgumentException is thrown if the underlying implementation doesn't recognize the attribute.", "history": "Added in API level 8", "FullName": "public abstract Object getAttribute (String name)"}, "newInstance()": {"Returns": [["@B_javax#xml#transform#TransformerFactory_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_javax#xml#transform#TransformerFactoryConfigurationError_E@", "never. Included for API compatibility with other Java implementations."]], "SeeAlso": [], "Permissions": [], "Description": "Returns Android's implementation of TransformerFactory. Unlike other Java implementations, this method does not consult system properties, properties files, or the services API.", "history": "Added in API level 8", "FullName": "public static TransformerFactory newInstance ()"}, "getURIResolver()": {"Returns": [["@B_javax#xml#transform#URIResolver_E@", "The URIResolver that was set with setURIResolver."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include.", "history": "Added in API level 8", "FullName": "public abstract URIResolver getURIResolver ()"}, "setErrorListener(javax.xml.transform.ErrorListener)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#ErrorListener_E@", "ErrorListener: The new error listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the error event listener for the TransformerFactory, which is used for the processing of transformation instructions, and not for the transformation itself. An IllegalArgumentException is thrown if the ErrorListener listener is null.", "history": "Added in API level 8", "FullName": "public abstract void setErrorListener (ErrorListener listener)"}, "setAttribute(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the attribute."], ["@B_java#lang#Object_E@", "Object: The value of the attribute."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows the user to set specific attributes on the underlying implementation. An attribute in this context is defined to be an option that the implementation provides. An IllegalArgumentException is thrown if the underlying implementation doesn't recognize the attribute.", "history": "Added in API level 8", "FullName": "public abstract void setAttribute (String name, Object value)"}, "setURIResolver(javax.xml.transform.URIResolver)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#URIResolver_E@", "URIResolver: An object that implements the URIResolver interface, or null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an object that is used by default during the transformation to resolve URIs used in document(), xsl:import, or xsl:include.", "history": "Added in API level 8", "FullName": "public abstract void setURIResolver (URIResolver resolver)"}, "newInstance(java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_javax#xml#transform#TransformerFactory_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [["@B_javax#xml#transform#TransformerFactoryConfigurationError_E@", "if factoryClassName is not available or cannot be instantiated."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of the named implementation of TransformerFactory.", "history": "Added in API level 9", "FullName": "public static TransformerFactory newInstance (String factoryClassName, ClassLoader classLoader)"}, "TransformerFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor is protected on purpose.", "history": "Added in API level 8", "FullName": "protected TransformerFactory ()"}}, "Inheritance": [], "ClassName": "javax.xml.transform.TransformerFactory", "ClassDesc": "A TransformerFactory instance can be used to create @B_javax#xml#transform#Transformer_E@ and @B_javax#xml#transform#Templates_E@ objects. The system property that determines which Factory implementation to create is named \"javax.xml.transform.TransformerFactory\". This property names a concrete subclass of the TransformerFactory abstract class. If the property is not defined, a platform default is be used."}