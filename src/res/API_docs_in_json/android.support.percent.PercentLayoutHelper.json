{"Functions": {"restoreOriginalParams()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Iterates over children and restores their original dimensions that were changed for percentage values. Calling this method only makes sense if you previously called @B_android#support#percent#PercentLayoutHelper#adjustChildren_E@.", "history": "added in version 23.0.0", "FullName": "void restoreOriginalParams ()"}, "adjustChildren(int, int)": {"Returns": [], "Parameters": [["int", "int: Width MeasureSpec of the parent ViewGroup."], ["int", "int: Height MeasureSpec of the parent ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Iterates over children and changes their width and height to one calculated from percentage values.", "history": "added in version 23.0.0", "FullName": "void adjustChildren (int widthMeasureSpec, int heightMeasureSpec)"}, "handleMeasuredStateTooSmall()": {"Returns": [["boolean", "True if the measure phase needs to be rerun because one of the children would like to receive more space."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Iterates over children and checks if any of them would like to get more space than it received through the percentage dimension. If you are building a layout that supports percentage dimensions you are encouraged to take advantage of this method. The developer should be able to specify that a child should be remeasured by adding normal dimension attribute with wrap_content value. For example he might specify child's attributes as app:layout_widthPercent=\"60%p\" and android:layout_width=\"wrap_content\". In this case if the child receives too little space, it will be remeasured with width set to WRAP_CONTENT.", "history": "added in version 23.0.0", "FullName": "boolean handleMeasuredStateTooSmall ()"}, "PercentLayoutHelper(android.view.ViewGroup)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "PercentLayoutHelper (ViewGroup host)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.percent.PercentLayoutHelper", "ClassDesc": "consider using ConstraintLayout and associated layouts instead. The following shows how to replicate the functionality of percentage layouts with a ConstraintLayout. The Guidelines are used to define each percentage break point, and then a Button view is stretched to fill the gap:"}