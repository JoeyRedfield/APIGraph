{"Functions": {"subSet(E, E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "added in API level 1", "FullName": "public SortedSet<E> subSet (E fromElement, E toElement)"}, "TreeSet(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection whose elements will comprise the new set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the elements in c are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree set containing the elements in the specified collection, sorted according to the @B_java#lang#Comparable_E@ interface. Furthermore, all such elements must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the set.", "history": "added in API level 1", "FullName": "public TreeSet (Collection<? extends E> c)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the elements provided cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null or if any element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set.", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "headSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "last()": {"Returns": [["E", "the last (highest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last (highest) element currently in this set.", "history": "Added in API level 1", "FullName": "public E last ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set in ascending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set in ascending order.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "pollLast()": {"Returns": [["E", "the last element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last (highest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public E pollLast ()"}, "TreeSet(java.util.SortedSet<E>)": {"Returns": [], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: sorted set whose elements will comprise the new set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified sorted set is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree set containing the same elements and using the same ordering as the specified sorted set.", "history": "Added in API level 1", "FullName": "public TreeSet (SortedSet<E> s)"}, "tailSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this set. The set will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "TreeSet(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this set. If null, the Comparable of the elements will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree set, sorted according to the specified comparator. All elements inserted into the set must be comparator.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the set. If the user attempts to add an element to the set that violates this constraint, the add call will throw a ClassCastException.", "history": "Added in API level 1", "FullName": "public TreeSet (Comparator<? super E> comparator)"}, "descendingSet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order view of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned set has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression s.descendingSet().descendingSet() returns a view of s essentially equivalent to s.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> descendingSet ()"}, "tailSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "add(E)": {"Returns": [["boolean", "true if this set did not already contain the specified element"]], "Parameters": [["E", "E: element to be added to this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified object cannot be compared with the elements currently in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that false.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the elements provided cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null or if any element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set.", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "TreeSet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection whose elements will comprise the new set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the elements in c are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree set containing the elements in the specified collection, sorted according to the @B_java#lang#Comparable_E@ interface. Furthermore, all such elements must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the set.", "history": "Added in API level 1", "FullName": "public TreeSet (Collection<? extends E> c)"}, "pollFirst()": {"Returns": [["E", "the first element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first (lowest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public E pollFirst ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this TreeSet instance. (The elements themselves are not cloned.)", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "higher(E)": {"Returns": [["E", "the least element greater than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set strictly greater than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E higher (E e)"}, "size()": {"Returns": [["int", "the number of elements in this set (its cardinality)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this set (its cardinality).", "history": "Added in API level 1", "FullName": "public int size ()"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the elements in this set, or", "history": "Added in API level 1", "FullName": "public Comparator<? super E> comparator ()"}, "tailSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than or equal to The returned set will throw an Equivalent to tailSet(fromElement, true).", "history": "Added in API level 1", "FullName": "public SortedSet<E> tailSet (E fromElement)"}, "isEmpty()": {"Returns": [["boolean", "true if this set contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains no elements.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "headSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "floor(E)": {"Returns": [["E", "the greatest element less than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E floor (E e)"}, "lower(E)": {"Returns": [["E", "the greatest element less than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set strictly less than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E lower (E e)"}, "ceiling(E)": {"Returns": [["E", "the least element greater than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set greater than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public E ceiling (E e)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this set contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be removed from this set, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified object cannot be compared with the elements currently in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified element from this set if it is present. More formally, removes an element e such that true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "TreeSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree set, sorted according to the natural ordering of its elements. All elements inserted into the set must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all such elements must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the set. If the user attempts to add an element to the set that violates this constraint (for example, the user attempts to add a string element to a set whose elements are integers), the add call will throw a ClassCastException.", "history": "Added in API level 1", "FullName": "public TreeSet ()"}, "TreeSet(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this set. If null, the natural ordering of the elements will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree set, sorted according to the specified comparator. All elements inserted into the set must be comparator.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the set. If the user attempts to add an element to the set that violates this constraint, the add call will throw a ClassCastException.", "history": "added in API level 1", "FullName": "public TreeSet (Comparator<? super E> comparator)"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set in descending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set in descending order.", "history": "Added in API level 9", "FullName": "public Iterator<E> descendingIterator ()"}, "subSet(E,boolean,E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "headSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are strictly less than toElement"]], "Parameters": [["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are strictly less than The returned set will throw an Equivalent to headSet(toElement, false).", "history": "Added in API level 1", "FullName": "public SortedSet<E> headSet (E toElement)"}, "first()": {"Returns": [["E", "the first (lowest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (lowest) element currently in this set.", "history": "Added in API level 1", "FullName": "public E first ()"}, "subSet(E, boolean, E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "subSet(E,E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set uses natural ordering, or its comparator does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "Added in API level 1", "FullName": "public SortedSet<E> subSet (E fromElement, E toElement)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this set contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified object cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set uses natural ordering, or its comparator does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this set. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#DISTINCT_E@, @B_java#util#Spliterator#SORTED_E@, and @B_java#util#Spliterator#ORDERED_E@. Overriding implementations should document the reporting of additional characteristic values. The spliterator's comparator (see @B_java#util#Spliterator#getComparator_E@) is null if the tree set's comparator (see @B_java#util#TreeSet#comparator_E@) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the tree set's comparator.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractSet_E@"], "ClassName": "java.util.TreeSet<E>", "ClassDesc": "A @B_java#util#NavigableSet_E@ implementation based on a @B_java#util#TreeMap_E@. The elements are ordered using their @B_java#util#Comparator_E@ provided at set creation time, depending on which constructor is used. This implementation provides guaranteed log(n) time cost for the basic operations (add, remove and contains). Note that the ordering maintained by a set (whether or not an explicit comparator is provided) must be Set interface. (See Comparable or Comparator for a precise definition of Set interface is defined in terms of the equals operation, but a TreeSet instance performs all element comparisons using its compareTo (or compare) method, so two elements that are deemed equal by this method are, from the standpoint of the set, equal. The behavior of a set Set interface. @B_java#util#Collections#synchronizedSortedSet_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the set: The iterators returned by this class's iterator method are remove method, the iterator will throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: This class is a member of the"}