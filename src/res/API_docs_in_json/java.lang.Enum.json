{"Functions": {"valueOf(java.lang.Class<T>, java.lang.String)": {"Returns": [["T", "the enum constant of the specified enum type with the specified name"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object of the enum type from which to return a constant"], ["@B_java#lang#String_E@", "String: the name of the constant to return"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified enum type has no constant with the specified name, or the specified class object does not represent an enum type"], ["@B_java#lang#NullPointerException_E@", "if enumType or name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the enum constant of the specified enum type with the specified name. The name must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Note that for a particular enum type T, the implicitly declared public static T valueOf(String) method on that enum may be used instead of this method to map from a name to the corresponding enum constant. All the constants of an enum type can be obtained by calling the implicit public static T[] values() method of that type.", "history": "added in API level 1", "FullName": "public static T valueOf (Class<T> enumType, String name)"}, "Enum(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: - The name of this enum constant, which is the identifier used to declare it."], ["int", "int: - The ordinal of this enumeration constant (its position in the enum declaration, where the initial constant is assigned an ordinal of zero)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. Programmers cannot invoke this constructor. It is for use by code emitted by the compiler in response to enum type declarations.", "history": "Added in API level 1", "FullName": "protected Enum (String name, int ordinal)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "enum classes cannot have finalize methods.", "history": "Added in API level 1", "FullName": "protected final void finalize ()"}, "Enum(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: - The name of this enum constant, which is the identifier used to declare it."], ["int", "int: - The ordinal of this enumeration constant (its position in the enum declaration, where the initial constant is assigned an ordinal of zero)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. Programmers cannot invoke this constructor. It is for use by code emitted by the compiler in response to enum type declarations.", "history": "added in API level 1", "FullName": "protected Enum (String name, int ordinal)"}, "valueOf(java.lang.Class<T>,java.lang.String)": {"Returns": [["T", "the enum constant of the specified enum type with the specified name"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object of the enum type from which to return a constant"], ["@B_java#lang#String_E@", "String: the name of the constant to return"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified enum type has no constant with the specified name, or the specified class object does not represent an enum type"], ["@B_java#lang#NullPointerException_E@", "if enumType or name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the enum constant of the specified enum type with the specified name. The name must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) Note that for a particular enum type T, the implicitly declared public static T valueOf(String) method on that enum may be used instead of this method to map from a name to the corresponding enum constant. All the constants of an enum type can be obtained by calling the implicit public static T[] values() method of that type.", "history": "Added in API level 1", "FullName": "public static T valueOf (Class<T> enumType, String name)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "the name of this enum constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this enum constant, exactly as declared in its enum declaration.", "history": "Added in API level 1", "FullName": "public final String name ()"}, "getDeclaringClass()": {"Returns": [["@B_java#lang#Class_E@", "the Class object corresponding to this enum constant's enum type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Class object corresponding to this enum constant's enum type. Two enum constants e1 and e2 are of the same enum type if and only if e1.getDeclaringClass() == e2.getDeclaringClass(). (The value returned by this method may differ from the one returned by the @B_java#lang#Object#getClass_E@ method for enum constants with constant-specific class bodies.)", "history": "Added in API level 1", "FullName": "public final Class<E> getDeclaringClass ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the name of this enum constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this enum constant, as contained in the declaration. This method may be overridden, though it typically isn't necessary or desirable. An enum type should override this method when a more \"programmer-friendly\" string form exists.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "compareTo(E)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["E", "E no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this enum with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. Enum constants are only comparable to other enum constants of the same enum type. The natural order implemented by this method is the order in which the constants are declared.", "history": "Added in API level 1", "FullName": "public final int compareTo (E o)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this enum constant."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified object is equal to this enum constant.", "history": "Added in API level 1", "FullName": "public final boolean equals (Object other)"}, "ordinal()": {"Returns": [["int", "the ordinal of this enumeration constant"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ordinal of this enumeration constant (its position in its enum declaration, where the initial constant is assigned an ordinal of zero). Most programmers will have no use for this method. It is designed for use by sophisticated enum-based data structures, such as @B_java#util#EnumSet_E@ and @B_java#util#EnumMap_E@.", "history": "Added in API level 1", "FullName": "public final int ordinal ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "(never returns)"]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Throws CloneNotSupportedException. This guarantees that enums are never cloned, which is necessary to preserve their \"singleton\" status.", "history": "Added in API level 1", "FullName": "protected final Object clone ()"}, "hashCode()": {"Returns": [["int", "a hash code for this enum constant."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this enum constant.", "history": "Added in API level 1", "FullName": "public final int hashCode ()"}}, "Inheritance": [], "ClassName": "@B_java#lang#Enum_E@", "ClassDesc": "This is the common base class of all Java language enumeration types. More information about enums, including descriptions of the implicitly declared methods synthesized by the compiler, can be found in section 8.9 of Note that when using an enumeration type as the type of a set or as the type of the keys in a map, specialized and efficient"}