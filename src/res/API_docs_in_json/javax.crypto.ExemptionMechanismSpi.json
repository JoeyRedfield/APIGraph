{"Functions": {"engineGenExemptionBlob(byte[],int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#ExemptionMechanismSpi#engineGetOutputSize_E@ to determine how big the output buffer should be.", "history": "Added in API level 1", "FullName": "protected abstract int engineGenExemptionBlob (byte[] output, int outputOffset)"}, "engineGenExemptionBlob()": {"Returns": [["byte[]", "the new buffer with the result key blob."]], "Parameters": [], "Throws": [["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob.", "history": "Added in API level 1", "FullName": "protected abstract byte[] engineGenExemptionBlob ()"}, "engineInit(java.security.Key)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key. If this exemption mechanism requires any algorithm parameters that cannot be derived from the given key, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidKeyException is raised.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (Key key)"}, "engineInit(java.security.Key,java.security.AlgorithmParameters)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (Key key, AlgorithmParameters params)"}, "engineGenExemptionBlob(byte[], int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#ExemptionMechanismSpi#engineGetOutputSize_E@ to determine how big the output buffer should be.", "history": "added in API level 1", "FullName": "protected abstract int engineGenExemptionBlob (byte[] output, int outputOffset)"}, "ExemptionMechanismSpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public ExemptionMechanismSpi ()"}, "engineInit(java.security.Key,java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"], ["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.", "history": "Added in API level 1", "FullName": "protected abstract void engineInit (Key key, AlgorithmParameterSpec params)"}, "engineGetOutputSize(int)": {"Returns": [["int", "the required output buffer size (in bytes)"]], "Parameters": [["int", "int: the input length (in bytes)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next @B_javax#crypto#ExemptionMechanismSpi#engineGenExemptionBlob_E@ operation, given the input length inputLen (in bytes). The actual output length of the next @B_javax#crypto#ExemptionMechanismSpi#engineGenExemptionBlob_E@ call may be smaller than the length returned by this method.", "history": "Added in API level 1", "FullName": "protected abstract int engineGetOutputSize (int inputLen)"}}, "Inheritance": [], "ClassName": "javax.crypto.ExemptionMechanismSpi", "ClassDesc": "This class defines the ExemptionMechanism class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular exemption mechanism."}