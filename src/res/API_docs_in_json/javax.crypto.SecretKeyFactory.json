{"Functions": {"getInstance(java.lang.String)": {"Returns": [["@B_javax#crypto#SecretKeyFactory_E@", "the new SecretKeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested secret-key algorithm. See the SecretKeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a SecretKeyFactorySpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final SecretKeyFactory getInstance (String algorithm)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm name of this SecretKeyFactory object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm name of this SecretKeyFactory object. This is the same name that was specified in one of the getInstance calls that created this SecretKeyFactory object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "translateKey(javax.crypto.SecretKey)": {"Returns": [["@B_javax#crypto#SecretKey_E@", "the translated key"]], "Parameters": [["@B_javax#crypto#SecretKey_E@", "SecretKey: the key whose provider is unknown or untrusted"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key cannot be processed by this secret-key factory."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a key object, whose provider may be unknown or potentially untrusted, into a corresponding key object of this secret-key factory.", "history": "Added in API level 1", "FullName": "public final SecretKey translateKey (SecretKey key)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#crypto#SecretKeyFactory_E@", "the new SecretKeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested secret-key algorithm. See the SecretKeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SecretKeyFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final SecretKeyFactory getInstance (String algorithm, String provider)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#crypto#SecretKeyFactory_E@", "the new SecretKeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested secret-key algorithm. See the SecretKeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if a SecretKeyFactorySpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final SecretKeyFactory getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this SecretKeyFactory object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this SecretKeyFactory object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "generateSecret(java.security.spec.KeySpec)": {"Returns": [["@B_javax#crypto#SecretKey_E@", "the secret key"]], "Parameters": [["@B_java#security#spec#KeySpec_E@", "KeySpec: the specification (key material) of the secret key"]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the given key specification is inappropriate for this secret-key factory to produce a secret key."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a SecretKey object from the provided key specification (key material).", "history": "Added in API level 1", "FullName": "public final SecretKey generateSecret (KeySpec keySpec)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#crypto#SecretKeyFactory_E@", "the new SecretKeyFactory object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested secret-key algorithm. See the SecretKeyFactory section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SecretKeyFactorySpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#lang#NullPointerException_E@", "if the specified algorithm is null."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a SecretKeyFactory object that converts secret keys of the specified algorithm. A new SecretKeyFactory object encapsulating the SecretKeyFactorySpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final SecretKeyFactory getInstance (String algorithm, String provider)"}, "SecretKeyFactory(javax.crypto.SecretKeyFactorySpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#crypto#SecretKeyFactorySpi_E@", "SecretKeyFactorySpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the secret-key algorithm"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a SecretKeyFactory object.", "history": "Added in API level 1", "FullName": "protected SecretKeyFactory (SecretKeyFactorySpi keyFacSpi, Provider provider, String algorithm)"}, "getKeySpec(javax.crypto.SecretKey,java.lang.Class<?>)": {"Returns": [["@B_java#security#spec#KeySpec_E@", "the underlying key specification (key material) in the requested format"]], "Parameters": [["@B_javax#crypto#SecretKey_E@", "SecretKey: the key"], ["@B_java#lang#Class_E@", "Class: the requested format in which the key material shall be returned"]], "Throws": [["@B_java#security#spec#InvalidKeySpecException_E@", "if the requested key specification is inappropriate for the given key (e.g., the algorithms associated with key and keySpec do not match, or key references a key on a cryptographic hardware device whereas keySpec is the specification of a software-based key), or the given key cannot be dealt with (e.g., the given key has an algorithm or format not supported by this secret-key factory)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specification (key material) of the given key object in the requested format.", "history": "Added in API level 1", "FullName": "public final KeySpec getKeySpec (SecretKey key, Class<?> keySpec)"}}, "Inheritance": [], "ClassName": "javax.crypto.SecretKeyFactory", "ClassDesc": "This class represents a factory for secret keys. Key factories are used to convert Key) into Key factories are bi-directional, i.e., they allow to build an opaque key object from a given key specification (key material), or to retrieve the underlying key material of a key object in a suitable format. Application developers should refer to their provider's documentation to find out which key specifications are supported by the @B_javax#crypto#SecretKeyFactory#generateSecret_E@ and @B_javax#crypto#SecretKeyFactory#getKeySpec_E@ methods. For example, the DES secret-key factory supplied by the \"SunJCE\" provider supports DESKeySpec as a transparent representation of DES keys, and that provider's secret-key factory for Triple DES keys supports DESedeKeySpec as a transparent representation of Triple DES keys. Android provides the following SecretKeyFactory algorithms:"}