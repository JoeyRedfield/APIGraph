{"Functions": {"ListFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public ListFragment ()"}, "getListView()": {"Returns": [["@B_android#widget#ListView_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the fragment's list view widget.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public ListView getListView ()"}, "setListAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide the cursor for the list view.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setListAdapter (ListAdapter adapter)"}, "setListShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the list view is shown; if false, the progress indicator. The initial value is true."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the list is being displayed. You can make it not displayed if you are waiting for the initial data to show in it. During this time an indeterminant progress indicator will be shown instead. Applications do not normally need to use this themselves. The default behavior of ListFragment is to start with the list not being shown, only showing it once an adapter is given with @B_android#app#ListFragment#setListAdapter_E@. If the list at that point had not been shown, when it does get shown it will be do without the user ever seeing the hidden state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setListShown (boolean shown)"}, "getSelectedItemPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the position of the currently selected list item.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public int getSelectedItemPosition ()"}, "onViewCreated(android.view.View,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View returned by @B_android#app#ListFragment#onCreateView_E@."], ["@B_android#os#Bundle_E@", "Bundle: If non-null, this fragment is being re-constructed from a previous saved state as given here. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach to list view once the view hierarchy has been created.", "history": "Added in API level 13 Deprecated in API level 28", "FullName": "public void onViewCreated (View view, Bundle savedInstanceState)"}, "getSelectedItemId()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the cursor row ID of the currently selected list item.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public long getSelectedItemId ()"}, "onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)": {"Returns": [["@B_android#view#View_E@", "Return the View for the fragment's UI, or null."]], "Parameters": [["@B_android#view#LayoutInflater_E@", "LayoutInflater: The LayoutInflater object that can be used to inflate any views in the fragment,"], ["@B_android#view#ViewGroup_E@", "ViewGroup: If non-null, this is the parent view that the fragment's UI should be attached to. The fragment should not add the view itself, but this can be used to generate the LayoutParams of the view. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: If non-null, this fragment is being re-constructed from a previous saved state as given here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide default implementation to return a simple list view. Subclasses can override to replace with their own layout. If doing so, the returned view hierarchy must have a ListView whose id is @B_android#R#id#list_E@ and can optionally have a sibling view id @B_android#R#id#empty_E@ that is to be shown when the list is empty. If you are overriding this method with your own custom content, consider including the standard layout @B_android#R#layout#list_content_E@ in your layout file, so that you continue to retain all of the standard behavior of ListFragment. In particular, this is currently the only way to have the built-in indeterminant progress state be shown.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public View onCreateView (LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)"}, "setEmptyText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default content for a ListFragment has a TextView that can be shown when the list is empty. If you would like to have it shown, call this method to supply the text it should use.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setEmptyText (CharSequence text)"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Detach from list view.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroyView ()"}, "onListItemClick(android.widget.ListView,android.view.View,int,long)": {"Returns": [], "Parameters": [["@B_android#widget#ListView_E@", "ListView: The ListView where the click happened"], ["@B_android#view#View_E@", "View: The view that was clicked within the ListView"], ["int", "int: The position of the view in the list"], ["long", "long: The row id of the item that was clicked"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when an item in the list is selected. Subclasses should override. Subclasses can call getListView().getItemAtPosition(position) if they need to access the data associated with the selected item.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onListItemClick (ListView l, View v, int position, long id)"}, "getListAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ListAdapter associated with this fragment's ListView.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public ListAdapter getListAdapter ()"}, "setSelection(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the currently selected list item to the specified position with the adapter's data", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setSelection (int position)"}, "setListShownNoAnimation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#app#ListFragment#setListShown_E@, but no animation is used when transitioning from the previous state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setListShownNoAnimation (boolean shown)"}}, "Inheritance": ["@B_android#app#Fragment_E@"], "ClassName": "android.app.ListFragment", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#ListFragment_E@ for consistent behavior across all devices and access to A fragment that displays a list of items by binding to a data source such as an array or Cursor, and exposes event handlers when the user selects an item. ListFragment hosts a @B_android#widget#ListView_E@ object that can be bound to different data sources, typically either an array or a Cursor holding query results. Binding, screen layout, and row layout are discussed in the following sections. ListFragment has a default layout that consists of a single list view. However, if you desire, you can customize the fragment layout by returning your own view hierarchy from @B_android#app#ListFragment#onCreateView_E@. To do this, your view hierarchy must contain a ListView object with the id \"@android:id/list\" (or @B_android#R#id#list_E@ if it's in code) Optionally, your view hierarchy can contain another view object of any type to display when the list view is empty. This \"empty list\" notifier must have an id \"android:empty\". Note that when an empty view is present, the list view will be hidden when there is no data to display. The following code demonstrates an (ugly) custom list layout. It has a list with a green background, and an alternate red \"no data\" message. You can specify the layout of individual rows in the list. You do this by specifying a layout resource in the ListAdapter object hosted by the fragment (the ListAdapter binds the ListView to the data; more on this later). A ListAdapter constructor takes a parameter that specifies a layout resource for each row. It also has two additional parameters that let you specify which data field to associate with which object in the row layout resource. These two parameters are typically parallel arrays. Android provides some standard row layout resources. These are in the @B_android#R#layout_E@ class, and have names such as simple_list_item_1, simple_list_item_2, and two_line_list_item. The following layout XML is the source for the resource two_line_list_item, which displays two data fields,one above the other, for each list row. You must identify the data bound to each TextView object in this layout. The syntax for this is discussed in the next section. You bind the ListFragment's ListView object to data using a class that implements the @B_android#widget#ListAdapter_E@ interface. Android provides two standard list adapters: @B_android#widget#SimpleAdapter_E@ for static data (Maps), and @B_android#widget#SimpleCursorAdapter_E@ for Cursor query results. You @B_android#app#ListFragment#setListAdapter_E@ to associate the list with an adapter. Do not directly call @B_android#widget#ListView#setAdapter_E@ or else important initialization will be skipped."}