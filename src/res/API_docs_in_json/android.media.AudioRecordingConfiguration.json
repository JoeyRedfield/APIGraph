{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 24", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getClientFormat()": {"Returns": [["@B_android#media#AudioFormat_E@", "the recording format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio format at which the client application is recording audio. Note that it may differ from the actual recording format (see @B_android#media#AudioRecordingConfiguration#getFormat_E@).", "history": "Added in API level 24", "FullName": "public AudioFormat getClientFormat ()"}, "isClientSilenced()": {"Returns": [["boolean", "true if captured audio is silenced, false otherwise ."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the audio returned to the client is currently being silenced by the audio framework due to concurrent capture policy (e.g the capturing application does not have an active foreground process or service anymore).", "history": "Added in API level 29", "FullName": "public boolean isClientSilenced ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 24", "FullName": "public int describeContents ()"}, "getClientAudioSessionId()": {"Returns": [["int", "the session number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the session number of the recording, see @B_android#media#AudioRecord#getAudioSessionId_E@.", "history": "Added in API level 24", "FullName": "public int getClientAudioSessionId ()"}, "getAudioDevice()": {"Returns": [["@B_android#media#AudioDeviceInfo_E@", "the audio recording device or null if this information cannot be retrieved"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns information about the audio input device used for this recording.", "history": "Added in API level 24", "FullName": "public AudioDeviceInfo getAudioDevice ()"}, "getClientEffects()": {"Returns": [["@B_java#util#List_E@", "List of @B_android#media#audiofx#AudioEffect#Descriptor_E@ containing all effects enabled for the client. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of @B_android#media#audiofx#AudioEffect#Descriptor_E@ for all effects currently enabled on the audio capture client (e.g. @B_android#media#AudioRecord_E@ or @B_android#media#MediaRecorder_E@).", "history": "Added in API level 29", "FullName": "public List<AudioEffect.Descriptor> getClientEffects ()"}, "getAudioSource()": {"Returns": [["int", "the audio source active on the capture path. Value is @B_android#media#MediaRecorder#AudioSource#DEFAULT_E@, @B_android#media#MediaRecorder#AudioSource#MIC_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_UPLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_DOWNLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_CALL_E@, @B_android#media#MediaRecorder#AudioSource#CAMCORDER_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_RECOGNITION_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_COMMUNICATION_E@, @B_android#media#MediaRecorder#AudioSource#UNPROCESSED_E@, or @B_android#media#MediaRecorder#AudioSource#VOICE_PERFORMANCE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio source currently used to configure the capture path. It can be different from the source returned by @B_android#media#AudioRecordingConfiguration#getClientAudioSource_E@ if another capture is active.", "history": "Added in API level 29", "FullName": "public int getAudioSource ()"}, "getClientAudioSource()": {"Returns": [["int", "the audio source selected by the client. Value is @B_android#media#MediaRecorder#AudioSource#DEFAULT_E@, @B_android#media#MediaRecorder#AudioSource#MIC_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_UPLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_DOWNLINK_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_CALL_E@, @B_android#media#MediaRecorder#AudioSource#CAMCORDER_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_RECOGNITION_E@, @B_android#media#MediaRecorder#AudioSource#VOICE_COMMUNICATION_E@, @B_android#media#MediaRecorder#AudioSource#UNPROCESSED_E@, or @B_android#media#MediaRecorder#AudioSource#VOICE_PERFORMANCE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio source selected by the client.", "history": "Added in API level 24", "FullName": "public int getClientAudioSource ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object o)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 24", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getFormat()": {"Returns": [["@B_android#media#AudioFormat_E@", "the device recording format"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio format at which audio is recorded on this Android device. Note that it may differ from the client application recording format (see @B_android#media#AudioRecordingConfiguration#getClientFormat_E@).", "history": "Added in API level 24", "FullName": "public AudioFormat getFormat ()"}, "getEffects()": {"Returns": [["@B_java#util#List_E@", "List of @B_android#media#audiofx#AudioEffect#Descriptor_E@ containing all effects enabled on the capture stream. This can be different from the list returned by @B_android#media#AudioRecordingConfiguration#getClientEffects_E@ if another capture is active. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of @B_android#media#audiofx#AudioEffect#Descriptor_E@ for all effects currently enabled on the capture stream.", "history": "Added in API level 29", "FullName": "public List<AudioEffect.Descriptor> getEffects ()"}}, "Inheritance": [], "ClassName": "android.media.AudioRecordingConfiguration", "ClassDesc": "The AudioRecordingConfiguration class collects the information describing an audio recording session. Direct polling (see @B_android#media#AudioManager#getActiveRecordingConfigurations_E@) or callback (see @B_android#media#AudioManager#registerAudioRecordingCallback_E@ methods are ways to receive information about the current recording configuration of the device. An audio recording configuration contains information about the recording format as used by the application (@B_android#media#AudioRecordingConfiguration#getClientFormat_E@, as well as the recording format actually used by the device (@B_android#media#AudioRecordingConfiguration#getFormat_E@). The two recording formats may, for instance, be at different sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the device always records at 48kHz, and the Android framework resamples for the application). The configuration also contains the use case for which audio is recorded (@B_android#media#AudioRecordingConfiguration#getClientAudioSource_E@), enabling the ability to distinguish between different activities such as ongoing voice recognition or camcorder recording."}