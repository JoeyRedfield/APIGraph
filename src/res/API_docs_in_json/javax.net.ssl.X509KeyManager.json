{"Functions": {"chooseClientAlias(java.lang.String[],java.security.Principal[],java.net.Socket)": {"Returns": [["@B_java#lang#String_E@", "the alias name for the desired key, or null if there are no matches."]], "Parameters": [["@B_java#lang#String_E@", "String: the key algorithm type name(s), ordered with the most-preferred key type first."], ["@B_java#security#Principal_E@", "Principal: the list of acceptable CA issuer subject names or null if it does not matter which issuers are used."], ["@B_java#net#Socket_E@", "Socket: the socket to be used for this connection. This parameter can be null, which indicates that implementations are free to select an alias applicable to any socket."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Choose an alias to authenticate the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).", "history": "Added in API level 1", "FullName": "public abstract String chooseClientAlias (String[] keyType, Principal[] issuers, Socket socket)"}, "getClientAliases(java.lang.String,java.security.Principal[])": {"Returns": [["@B_java#lang#String_E@", "an array of the matching alias names, or null if there were no matches."]], "Parameters": [["@B_java#lang#String_E@", "String: the key algorithm type name"], ["@B_java#security#Principal_E@", "Principal: the list of acceptable CA issuer subject names, or null if it does not matter which issuers are used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the matching aliases for authenticating the client side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).", "history": "Added in API level 1", "FullName": "public abstract String[] getClientAliases (String keyType, Principal[] issuers)"}, "getPrivateKey(java.lang.String)": {"Returns": [["@B_java#security#PrivateKey_E@", "the requested key, or null if the alias can't be found."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key associated with the given alias.", "history": "Added in API level 1", "FullName": "public abstract PrivateKey getPrivateKey (String alias)"}, "getCertificateChain(java.lang.String)": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "the certificate chain (ordered with the user's certificate first and the root certificate authority last), or null if the alias can't be found."]], "Parameters": [["@B_java#lang#String_E@", "String: the alias name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the certificate chain associated with the given alias.", "history": "Added in API level 1", "FullName": "public abstract X509Certificate[] getCertificateChain (String alias)"}, "chooseServerAlias(java.lang.String,java.security.Principal[],java.net.Socket)": {"Returns": [["@B_java#lang#String_E@", "the alias name for the desired key, or null if there are no matches."]], "Parameters": [["@B_java#lang#String_E@", "String: the key algorithm type name."], ["@B_java#security#Principal_E@", "Principal: the list of acceptable CA issuer subject names or null if it does not matter which issuers are used."], ["@B_java#net#Socket_E@", "Socket: the socket to be used for this connection. This parameter can be null, which indicates that implementations are free to select an alias applicable to any socket."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Choose an alias to authenticate the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).", "history": "Added in API level 1", "FullName": "public abstract String chooseServerAlias (String keyType, Principal[] issuers, Socket socket)"}, "getServerAliases(java.lang.String,java.security.Principal[])": {"Returns": [["@B_java#lang#String_E@", "an array of the matching alias names, or null if there were no matches."]], "Parameters": [["@B_java#lang#String_E@", "String: the key algorithm type name"], ["@B_java#security#Principal_E@", "Principal: the list of acceptable CA issuer subject names or null if it does not matter which issuers are used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the matching aliases for authenticating the server side of a secure socket given the public key type and the list of certificate issuer authorities recognized by the peer (if any).", "history": "Added in API level 1", "FullName": "public abstract String[] getServerAliases (String keyType, Principal[] issuers)"}}, "Inheritance": [], "ClassName": "javax.net.ssl.X509KeyManager", "ClassDesc": "Instances of this interface manage which X509 certificate-based key pairs are used to authenticate the local side of a secure socket. During secure socket negotiations, implentations call methods in this interface to: determine the set of aliases that are available for negotiations based on the criteria presented, select the obtain the corresponding key material for given aliases. Note: the X509ExtendedKeyManager should be used in favor of this class."}