{"Functions": {"getDisplays(java.lang.String)": {"Returns": [["@B_android#view#Display_E@", "An array containing all displays sorted by order of preference."]], "Parameters": [["@B_java#lang#String_E@", "String: The requested display category or null to return all displays."]], "Throws": [], "SeeAlso": ["@B_android#hardware#display#DisplayManager_E@"], "Permissions": [], "Description": "Gets all currently valid logical displays of the specified category. When there are multiple displays in a category the returned displays are sorted of preference. For example, if the requested category is @B_android#hardware#display#DisplayManager#DISPLAY_CATEGORY_PRESENTATION_E@ and there are multiple presentation displays then the displays are sorted so that the first display in the returned array is the most preferred presentation display. The application may simply use the first display or allow the user to choose.", "history": "Added in API level 17", "FullName": "public Display[] getDisplays (String category)"}, "createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int)": {"Returns": [["@B_android#hardware#display#VirtualDisplay_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#Surface_E@", "Surface: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#hardware#display#DisplayManager#createVirtualDisplay_E@"], "Permissions": [], "Description": "Creates a virtual display.", "history": "Added in API level 19", "FullName": "public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags)"}, "createVirtualDisplay(java.lang.String,int,int,int,android.view.Surface,int,android.hardware.display.VirtualDisplay.Callback,android.os.Handler)": {"Returns": [["@B_android#hardware#display#VirtualDisplay_E@", "The newly created virtual display, or null if the application could not create the virtual display."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the virtual display, must be non-empty. This value must never be null."], ["int", "int: The width of the virtual display in pixels, must be greater than 0."], ["int", "int: The height of the virtual display in pixels, must be greater than 0."], ["int", "int: The density of the virtual display in dpi, must be greater than 0."], ["@B_android#view#Surface_E@", "Surface: The surface to which the content of the virtual display should be rendered, or null if there is none initially. This value may be null."], ["int", "int: A combination of virtual display flags: @B_android#hardware#display#DisplayManager#VIRTUAL_DISPLAY_FLAG_PUBLIC_E@, @B_android#hardware#display#DisplayManager#VIRTUAL_DISPLAY_FLAG_PRESENTATION_E@, @B_android#hardware#display#DisplayManager#VIRTUAL_DISPLAY_FLAG_SECURE_E@, @B_android#hardware#display#DisplayManager#VIRTUAL_DISPLAY_FLAG_OWN_CONTENT_ONLY_E@, or @B_android#hardware#display#DisplayManager#VIRTUAL_DISPLAY_FLAG_AUTO_MIRROR_E@."], ["@B_android#hardware#display#VirtualDisplay#Callback_E@", "VirtualDisplay.Callback: Callback to call when the state of the @B_android#hardware#display#VirtualDisplay_E@ changes This value may be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. This value may be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller does not have permission to create a virtual display with the specified flags."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a virtual display. The content of a virtual display is rendered to a @B_android#view#Surface_E@ provided by the application. The virtual display should be @B_android#hardware#display#VirtualDisplay#release_E@ when no longer needed. Because a virtual display renders to a surface provided by the application, it will be released automatically when the process terminates and all remaining windows on it will be forcibly removed. The behavior of the virtual display depends on the flags that are provided to this method. By default, virtual displays are created to be private, non-presentation and unsecure. Permissions may be required to use certain flags. As of @B_android#os#Build#VERSION_CODES#KITKAT_WATCH_E@, the surface may be attached or detached dynamically using @B_android#hardware#display#VirtualDisplay#setSurface_E@. Previously, the surface had to be non-null when @B_android#hardware#display#DisplayManager#createVirtualDisplay_E@ was called and could not be changed for the lifetime of the display. Detaching the surface that backs a virtual display has a similar effect to turning off the screen.", "history": "Added in API level 21", "FullName": "public VirtualDisplay createVirtualDisplay (String name, int width, int height, int densityDpi, Surface surface, int flags, VirtualDisplay.Callback callback, Handler handler)"}, "getDisplays()": {"Returns": [["@B_android#view#Display_E@", "An array containing all displays."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets all currently valid logical displays.", "history": "Added in API level 17", "FullName": "public Display[] getDisplays ()"}, "registerDisplayListener(android.hardware.display.DisplayManager.DisplayListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#hardware#display#DisplayManager#DisplayListener_E@", "DisplayManager.DisplayListener: The listener to register."], ["@B_android#os#Handler_E@", "Handler: The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper."]], "Throws": [], "SeeAlso": ["@B_android#hardware#display#DisplayManager#unregisterDisplayListener_E@"], "Permissions": [], "Description": "Registers an display listener to receive notifications about when displays are added, removed or changed.", "history": "Added in API level 17", "FullName": "public void registerDisplayListener (DisplayManager.DisplayListener listener, Handler handler)"}, "unregisterDisplayListener(android.hardware.display.DisplayManager.DisplayListener)": {"Returns": [], "Parameters": [["@B_android#hardware#display#DisplayManager#DisplayListener_E@", "DisplayManager.DisplayListener: The listener to unregister."]], "Throws": [], "SeeAlso": ["@B_android#hardware#display#DisplayManager#registerDisplayListener_E@"], "Permissions": [], "Description": "Unregisters a display listener.", "history": "Added in API level 17", "FullName": "public void unregisterDisplayListener (DisplayManager.DisplayListener listener)"}, "getDisplay(int)": {"Returns": [["@B_android#view#Display_E@", "The display object, or null if there is no valid display with the given id."]], "Parameters": [["int", "int: The logical display id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets information about a logical display. The display metrics may be adjusted to provide compatibility for legacy applications.", "history": "Added in API level 17", "FullName": "public Display getDisplay (int displayId)"}}, "Inheritance": [], "ClassName": "android.hardware.display.DisplayManager", "ClassDesc": "Manages the properties of attached displays."}