{"Functions": {"finish()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Immediately finish the current animation. After this call @B_android#widget#EdgeEffect#isFinished_E@ will return true.", "history": "Added in API level 14", "FullName": "public void finish ()"}, "onPull(float)": {"Returns": [], "Parameters": [["float", "float: Change in distance since the last call. Values may be 0 (no change) to 1.f (full length of the view) or negative values to express change back toward the edge reached to initiate the effect."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A view should call this when content is pulled away from an edge by the user. This will update the state of the current visual effect and its associated animation. The host view should always @B_android#view#View#invalidate_E@ after this and draw the results accordingly. Views using EdgeEffect should favor @B_android#widget#EdgeEffect#onPull_E@ when the displacement of the pull point is known.", "history": "Added in API level 14", "FullName": "public void onPull (float deltaDistance)"}, "getColor()": {"Returns": [["int", "The color of this edge effect in argb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the color of this edge effect in argb.", "history": "Added in API level 21", "FullName": "public int getColor ()"}, "getBlendMode()": {"Returns": [["@B_android#graphics#BlendMode_E@", "BlendMode This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the blend mode. A blend mode defines how source pixels (generated by a drawing command) are composited with the destination pixels (content of the render target).", "history": "Added in API level 29", "FullName": "public BlendMode getBlendMode ()"}, "setSize(int,int)": {"Returns": [], "Parameters": [["int", "int: Effect width in pixels"], ["int", "int: Effect height in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the size of this edge effect in pixels.", "history": "Added in API level 14", "FullName": "public void setSize (int width, int height)"}, "getMaxHeight()": {"Returns": [["int", "The maximum height of the edge effect"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum height that the edge effect will be drawn at given the original @B_android#widget#EdgeEffect#setSize_E@.", "history": "Added in API level 21", "FullName": "public int getMaxHeight ()"}, "setBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: May be null. The blend mode to be installed in the paint This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#BlendMode_E@"], "Permissions": [], "Description": "Set or clear the blend mode. A blend mode defines how source pixels (generated by a drawing command) are composited with the destination pixels (content of the render target). Pass null to clear any previous blend mode.", "history": "Added in API level 29", "FullName": "public void setBlendMode (BlendMode blendmode)"}, "draw(android.graphics.Canvas)": {"Returns": [["boolean", "true if drawing should continue beyond this frame to continue the animation"]], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: Canvas to draw into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw into the provided canvas. Assumes that the canvas has been rotated accordingly and the size has been set. The effect will be drawn the full width of X=0 to X=width, beginning from Y=0 and extending to some factor < 1.f of height.", "history": "Added in API level 14", "FullName": "public boolean draw (Canvas canvas)"}, "onAbsorb(int)": {"Returns": [], "Parameters": [["int", "int: Velocity at impact in pixels per second."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call when the effect absorbs an impact at the given velocity. Used when a fling reaches the scroll boundary. When using a @B_android#widget#Scroller_E@ or @B_android#widget#OverScroller_E@, the method getCurrVelocity will provide a reasonable approximation to use here.", "history": "Added in API level 14", "FullName": "public void onAbsorb (int velocity)"}, "onPull(float, float)": {"Returns": [], "Parameters": [["float", "float: Change in distance since the last call. Values may be 0 (no change) to 1.f (full length of the view) or negative values to express change back toward the edge reached to initiate the effect."], ["float", "float: The displacement from the starting side of the effect of the point initiating the pull. In the case of touch this is the finger position. Values may be from 0-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A view should call this when content is pulled away from an edge by the user. This will update the state of the current visual effect and its associated animation. The host view should always @B_android#view#View#invalidate_E@ after this and draw the results accordingly.", "history": "added in API level 21", "FullName": "public void onPull (float deltaDistance, float displacement)"}, "isFinished()": {"Returns": [["boolean", "true if animation is finished, false if drawing should continue on the next frame."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports if this EdgeEffect's animation is finished. If this method returns false after a call to @B_android#widget#EdgeEffect#draw_E@ the host widget should schedule another drawing pass to continue the animation.", "history": "Added in API level 14", "FullName": "public boolean isFinished ()"}, "onRelease()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call when the object is released after being pulled. This will begin the \"decay\" phase of the effect. After calling this method the host view should @B_android#view#View#invalidate_E@ and thereby draw the results accordingly.", "history": "Added in API level 14", "FullName": "public void onRelease ()"}, "EdgeEffect(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context used to provide theming and resource information for the EdgeEffect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new EdgeEffect with a theme appropriate for the provided context.", "history": "Added in API level 14", "FullName": "public EdgeEffect (Context context)"}, "setSize(int, int)": {"Returns": [], "Parameters": [["int", "int: Effect width in pixels"], ["int", "int: Effect height in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the size of this edge effect in pixels.", "history": "added in API level 14", "FullName": "public void setSize (int width, int height)"}, "onPull(float,float)": {"Returns": [], "Parameters": [["float", "float: Change in distance since the last call. Values may be 0 (no change) to 1.f (full length of the view) or negative values to express change back toward the edge reached to initiate the effect."], ["float", "float: The displacement from the starting side of the effect of the point initiating the pull. In the case of touch this is the finger position. Values may be from 0-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A view should call this when content is pulled away from an edge by the user. This will update the state of the current visual effect and its associated animation. The host view should always @B_android#view#View#invalidate_E@ after this and draw the results accordingly.", "history": "Added in API level 21", "FullName": "public void onPull (float deltaDistance, float displacement)"}, "setColor(int)": {"Returns": [], "Parameters": [["int", "int: Color in argb"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color of this edge effect in argb.", "history": "Added in API level 21", "FullName": "public void setColor (int color)"}}, "Inheritance": [], "ClassName": "android.widget.EdgeEffect", "ClassDesc": "This class performs the graphical effect used at the edges of scrollable widgets when the user scrolls beyond the content bounds in 2D space. EdgeEffect is stateful. Custom widgets using EdgeEffect should create an instance for each edge that should show the effect, feed it input data using the methods @B_android#widget#EdgeEffect#onAbsorb_E@, @B_android#widget#EdgeEffect#onPull_E@, and @B_android#widget#EdgeEffect#onRelease_E@, and draw the effect using @B_android#widget#EdgeEffect#draw_E@ in the widget's overridden @B_android#view#View#draw_E@ method. If @B_android#widget#EdgeEffect#isFinished_E@ returns false after drawing, the edge effect's animation is not yet complete and the widget should schedule another drawing pass to continue the animation. When drawing, widgets should draw their main content and child views first, usually by invoking super.draw(canvas) from an overridden draw method. (This will invoke onDraw and dispatch drawing to child views as needed.) The edge effect may then be drawn on top of the view's content using the @B_android#widget#EdgeEffect#draw_E@ method."}