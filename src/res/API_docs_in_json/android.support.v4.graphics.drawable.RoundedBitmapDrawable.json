{"Functions": {"getPaint()": {"Returns": [["@B_android#graphics#Paint_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the paint used to render this drawable.", "history": "added in version 22.0.0", "FullName": "Paint getPaint ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "added in version 22.0.0", "FullName": "void draw (Canvas canvas)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicWidth ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the current color filter, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "", "FullName": "ColorFilter getColorFilter ()"}, "setCircular(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the image shape to circular. This overwrites any calls made to @B_android#support#v4#graphics#drawable#RoundedBitmapDrawable#setCornerRadius_E@ so far.", "history": "added in version 23.0.0", "FullName": "void setCircular (boolean circular)"}, "getGravity()": {"Returns": [["int", "the gravity applied to the bitmap"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@"], "Permissions": [], "Description": "Get the gravity used to position/stretch the bitmap within its bounds.", "history": "added in version 22.0.0", "FullName": "int getGravity ()"}, "setAntiAlias(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the bitmap should be anti-aliased, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#graphics#drawable#RoundedBitmapDrawable#hasAntiAlias_E@"], "Permissions": [], "Description": "Enables or disables anti-aliasing for this drawable. Anti-aliasing affects the edges of the bitmap only so it applies only when the drawable is rotated.", "history": "added in version 22.0.0", "FullName": "void setAntiAlias (boolean aa)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicHeight ()"}, "getCornerRadius()": {"Returns": [["float", "The corner radius applied when drawing the bitmap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "float getCornerRadius ()"}, "setMipMap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the bitmap should use mipmaps, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#graphics#drawable#RoundedBitmapDrawable#hasMipMap_E@"], "Permissions": [], "Description": "Enables or disables the mipmap hint for this drawable's bitmap. See @B_android#graphics#Bitmap#setHasMipMap_E@ for more information. If the bitmap is null, or the current API version does not support setting a mipmap hint, calling this method has no effect.", "history": "added in version 22.0.0", "FullName": "void setMipMap (boolean mipMap)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "", "FullName": "void setDither (boolean dither)"}, "setTargetDensity(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas from which the density scale must be obtained."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density scale at which this drawable will be rendered. This method assumes the drawable will be rendered at the same density as the specified canvas.", "history": "added in version 22.0.0", "FullName": "void setTargetDensity (Canvas canvas)"}, "getAlpha()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "", "FullName": "int getAlpha ()"}, "hasMipMap()": {"Returns": [["boolean", "True if the mipmap hint is set, false otherwise. If the bitmap is null, this method always returns false."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#graphics#drawable#RoundedBitmapDrawable#setMipMap_E@"], "Permissions": [], "Description": "Indicates whether the mipmap hint is enabled on this drawable's bitmap.", "history": "added in version 22.0.0", "FullName": "boolean hasMipMap ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "added in version 22.0.0", "FullName": "int getOpacity ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "added in version 22.0.0", "FullName": "void setAlpha (int alpha)"}, "setTargetDensity(android.util.DisplayMetrics)": {"Returns": [], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: The DisplayMetrics indicating the density scale for this drawable."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density scale at which this drawable will be rendered.", "history": "added in version 22.0.0", "FullName": "void setTargetDensity (DisplayMetrics metrics)"}, "setFilterBitmap(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set to true to have the drawable filter its bitmaps with bilinear sampling when they are scaled or rotated. This can improve appearance when bitmaps are rotated. If the drawable does not use bitmaps, this call is ignored.", "history": "", "FullName": "void setFilterBitmap (boolean filter)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "", "FullName": "void onBoundsChange (Rect bounds)"}, "hasAntiAlias()": {"Returns": [["boolean", "True if anti-aliasing is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#graphics#drawable#RoundedBitmapDrawable#setAntiAlias_E@"], "Permissions": [], "Description": "Indicates whether anti-aliasing is enabled for this drawable.", "history": "added in version 22.0.0", "FullName": "boolean hasAntiAlias ()"}, "setCornerRadius(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the corner radius to be applied when drawing the bitmap.", "history": "added in version 22.0.0", "FullName": "void setCornerRadius (float cornerRadius)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: the gravity"]], "Throws": [], "SeeAlso": ["@B_android#view#Gravity_E@"], "Permissions": [], "Description": "Set the gravity used to position/stretch the bitmap within its bounds.", "history": "added in version 22.0.0", "FullName": "void setGravity (int gravity)"}, "isCircular()": {"Returns": [["boolean", "true if the image is circular, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "boolean isCircular ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "added in version 22.0.0", "FullName": "void setColorFilter (ColorFilter cf)"}, "getBitmap()": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bitmap used by this drawable to render. May be null.", "history": "added in version 22.0.0", "FullName": "Bitmap getBitmap ()"}, "setTargetDensity(int)": {"Returns": [], "Parameters": [["int", "int: The density scale for this drawable."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Bitmap#setDensity_E@", "@B_android#graphics#Bitmap#getDensity_E@"], "Permissions": [], "Description": "Set the density at which this drawable will be rendered.", "history": "added in version 22.0.0", "FullName": "void setTargetDensity (int density)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.support.v4.graphics.drawable.RoundedBitmapDrawable", "ClassDesc": "A Drawable that wraps a bitmap and can be drawn with rounded corners. You can create a RoundedBitmapDrawable from a file path, an input stream, or from a https:##developer#android#com@B_android#graphics#Bitmap_E@ object. Also see the https:##developer#android#com@B_android#graphics#Bitmap_E@ class, which handles the management and transformation of raw bitmap graphics, and should be used when drawing to a https:##developer#android#com@B_android#graphics#Canvas_E@."}