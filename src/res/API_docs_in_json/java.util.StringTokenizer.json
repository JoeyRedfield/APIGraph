{"Functions": {"nextToken()": {"Returns": [["@B_java#lang#String_E@", "the next token from this string tokenizer."]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more tokens in this tokenizer's string."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token from this string tokenizer.", "history": "Added in API level 1", "FullName": "public String nextToken ()"}, "hasMoreElements()": {"Returns": [["boolean", "true if there are more tokens; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#StringTokenizer#hasMoreTokens_E@"], "Permissions": [], "Description": "Returns the same value as the hasMoreTokens method. It exists so that this class can implement the Enumeration interface.", "history": "Added in API level 1", "FullName": "public boolean hasMoreElements ()"}, "StringTokenizer(java.lang.String,java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be parsed."], ["@B_java#lang#String_E@", "String: the delimiters."], ["boolean", "boolean: flag indicating whether to return the delimiters as tokens."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if str is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string tokenizer for the specified string. All characters in the delim argument are the delimiters for separating tokens. If the returnDelims flag is true, then the delimiter characters are also returned as tokens. Each delimiter is returned as a string of length one. If the flag is false, the delimiter characters are skipped and only serve as separators between tokens. Note that if", "history": "Added in API level 1", "FullName": "public StringTokenizer (String str, String delim, boolean returnDelims)"}, "StringTokenizer(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be parsed."], ["@B_java#lang#String_E@", "String: the delimiters."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if str is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string tokenizer for the specified string. The characters in the delim argument are the delimiters for separating tokens. Delimiter characters themselves will not be treated as tokens. Note that if", "history": "Added in API level 1", "FullName": "public StringTokenizer (String str, String delim)"}, "nextToken(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the next token, after switching to the new delimiter set."]], "Parameters": [["@B_java#lang#String_E@", "String: the new delimiters."]], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more tokens in this tokenizer's string."], ["@B_java#lang#NullPointerException_E@", "if delim is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token in this string tokenizer's string. First, the set of characters considered to be delimiters by this", "history": "Added in API level 1", "FullName": "public String nextToken (String delim)"}, "nextElement()": {"Returns": [["@B_java#lang#Object_E@", "the next token in the string."]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if there are no more tokens in this tokenizer's string."]], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#StringTokenizer#nextToken_E@"], "Permissions": [], "Description": "Returns the same value as the nextToken method, except that its declared return value is Object rather than String. It exists so that this class can implement the Enumeration interface.", "history": "Added in API level 1", "FullName": "public Object nextElement ()"}, "hasMoreTokens()": {"Returns": [["boolean", "true if and only if there is at least one token in the string after the current position; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests if there are more tokens available from this tokenizer's string. If this method returns", "history": "Added in API level 1", "FullName": "public boolean hasMoreTokens ()"}, "StringTokenizer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be parsed."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if str is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a string tokenizer for the specified string. The tokenizer uses the default delimiter set, which is \" \\t\\n\\r\\f\": the space character, the tab character, the newline character, the carriage-return character, and the form-feed character. Delimiter characters themselves will not be treated as tokens.", "history": "Added in API level 1", "FullName": "public StringTokenizer (String str)"}, "countTokens()": {"Returns": [["int", "the number of tokens remaining in the string using the current delimiter set."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#StringTokenizer#nextToken_E@"], "Permissions": [], "Description": "Calculates the number of times that this tokenizer's nextToken method can be called before it generates an exception. The current position is not advanced.", "history": "Added in API level 1", "FullName": "public int countTokens ()"}}, "Inheritance": [], "ClassName": "java.util.StringTokenizer", "ClassDesc": "The string tokenizer class allows an application to break a string into tokens. The tokenization method is much simpler than the one used by the StreamTokenizer class. The StringTokenizer methods do not distinguish among identifiers, numbers, and quoted strings, nor do they recognize and skip comments. The set of delimiters (the characters that separate tokens) may be specified either at creation time or on a per-token basis. An instance of StringTokenizer behaves in one of two ways, depending on whether it was created with the returnDelims flag having the value true or false: If the flag is false, delimiter characters serve to separate tokens. A token is a maximal sequence of consecutive characters that are not delimiters. If the flag is true, delimiter characters are themselves considered to be tokens. A token is thus either one delimiter character, or a maximal sequence of consecutive characters that are not delimiters. A A token is returned by taking a substring of the string that was used to create the The following is one example of the use of the tokenizer. The code: prints the following output: The following example illustrates how the prints the following output:"}