{"Functions": {"isActive()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if any view is currently active in the input method.", "history": "Added in API level 3", "FullName": "public boolean isActive ()"}, "dispatchKeyEventFromInputMethod(android.view.View,android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the default target view. If null is specified, then this method tries to find a good event target based on the current focus state. This value may be null."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the key event to be dispatched. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides the default implementation of @B_android#view#inputmethod#InputConnection#sendKeyEvent_E@, which is expected to dispatch an keyboard event sent from the IME to an appropriate event target depending on the given @B_android#view#View_E@ and the current focus state. CAUTION: This method is provided only for the situation where @B_android#view#inputmethod#InputConnection#sendKeyEvent_E@ needs to be implemented without relying on @B_android#view#inputmethod#BaseInputConnection_E@. Do not use this API for anything else.", "history": "Added in API level 24", "FullName": "public void dispatchKeyEventFromInputMethod (View targetView, KeyEvent event)"}, "viewClicked(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: @B_android#view#View_E@ which is being clicked."]], "Throws": [], "SeeAlso": ["@B_android#inputmethodservice#InputMethodService#onViewClicked_E@"], "Permissions": [], "Description": "The semantics of this method can never be defined well for composite @B_android#view#View_E@ that works as a giant \"Canvas\", which can host its own UI hierarchy and sub focus state. @B_android#webkit#WebView_E@ is a good example. Application / IME developers should not rely on this method. Notify the event when the user tapped or clicked the text view.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void viewClicked (View view)"}, "setInputMethodAndSubtype(android.os.IBinder,java.lang.String,android.view.inputmethod.InputMethodSubtype)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself. This value must never be null."], ["@B_java#lang#String_E@", "String: The unique identifier for the new input method to be switched to."], ["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: The new subtype of the new input method to be switched to."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@"], "Description": "Use @B_android#inputmethodservice#InputMethodService#switchInputMethod_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Force switch to a new input method and subtype. This can only be called from an application or a service which has a token of the currently active input method. On Android @B_android#os#Build#VERSION_CODES#Q_E@ and later devices, token cannot be null even with @B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@. Instead, update @B_android#provider#Settings#Secure#DEFAULT_INPUT_METHOD_E@ and @B_android#provider#Settings#Secure#SELECTED_INPUT_METHOD_SUBTYPE_E@ directly.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setInputMethodAndSubtype (IBinder token, String id, InputMethodSubtype subtype)"}, "sendAppPrivateCommand(android.view.View,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Optional View that is sending the command, or null if you want to send the command regardless of the view that is attached to the input method."], ["@B_java#lang#String_E@", "String: Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands."], ["@B_android#os#Bundle_E@", "Bundle: Any data to include with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#view#inputmethod#InputMethodSession#appPrivateCommand_E@ on the current Input Method.", "history": "Added in API level 3", "FullName": "public void sendAppPrivateCommand (View view, String action, Bundle data)"}, "displayCompletions(android.view.View,android.view.inputmethod.CompletionInfo[])": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void displayCompletions (View view, CompletionInfo[] completions)"}, "showInputMethodPicker()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show IME picker popup window. Requires the @B_android#content#pm#PackageManager#FEATURE_INPUT_METHODS_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 3", "FullName": "public void showInputMethodPicker ()"}, "updateSelection(android.view.View,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report the current selection range. @B_android#view#inputmethod#EditorInfo#initialSelStart_E@ and @B_android#view#inputmethod#EditorInfo#initialSelEnd_E@ every time @B_android#view#View#onCreateInputConnection_E@ is called, which happens whenever the keyboard shows up or the focus changes to a text field, among other cases.", "history": "Added in API level 3", "FullName": "public void updateSelection (View view, int selStart, int selEnd, int candidatesStart, int candidatesEnd)"}, "showStatusIcon(android.os.IBinder,java.lang.String,int)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#showStatusIcon_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public void showStatusIcon (IBinder imeToken, String packageName, int iconId)"}, "setInputMethod(android.os.IBinder,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."], ["@B_java#lang#String_E@", "String: The unique identifier for the new input method to be switched to."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@"], "Description": "Use @B_android#inputmethodservice#InputMethodService#switchInputMethod_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Force switch to a new input method component. This can only be called from an application or a service which has a token of the currently active input method. On Android @B_android#os#Build#VERSION_CODES#Q_E@ and later devices, the undocumented behavior that token can be null when the caller has @B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@ is deprecated. Instead, update @B_android#provider#Settings#Secure#DEFAULT_INPUT_METHOD_E@ and @B_android#provider#Settings#Secure#SELECTED_INPUT_METHOD_SUBTYPE_E@ directly.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public void setInputMethod (IBinder token, String id)"}, "getInputMethodList()": {"Returns": [["@B_java#util#List_E@", "@B_java#util#List_E@ of @B_android#view#inputmethod#InputMethodInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of installed input methods. On multi user environment, this API returns a result for the calling process user.", "history": "Added in API level 3", "FullName": "public List<InputMethodInfo> getInputMethodList ()"}, "hideStatusIcon(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#hideStatusIcon_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public void hideStatusIcon (IBinder imeToken)"}, "restartInput(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose text has changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the input method is currently connected to the given view, restart it with its new contents. You should call this when the text within your view changes outside of the normal input method or key input flow, such as when an application calls TextView.setText().", "history": "Added in API level 3", "FullName": "public void restartInput (View view)"}, "getEnabledInputMethodList()": {"Returns": [["@B_java#util#List_E@", "@B_java#util#List_E@ of @B_android#view#inputmethod#InputMethodInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of enabled input methods. On multi user environment, this API returns a result for the calling process user.", "history": "Added in API level 3", "FullName": "public List<InputMethodInfo> getEnabledInputMethodList ()"}, "getLastInputMethodSubtype()": {"Returns": [["@B_android#view#inputmethod#InputMethodSubtype_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public InputMethodSubtype getLastInputMethodSubtype ()"}, "updateExtractedText(android.view.View,int,android.view.inputmethod.ExtractedText)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#inputmethod#ExtractedText_E@", "ExtractedText no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void updateExtractedText (View view, int token, ExtractedText text)"}, "switchToLastInputMethod(android.os.IBinder)": {"Returns": [["boolean", "true if the current input method and subtype was successfully switched to the last used input method and subtype."]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#switchToPreviousInputMethod_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Force switch to the last used input method and subtype. If the last input method didn't have any subtypes, the framework will simply switch to the last input method with no subtype specified.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean switchToLastInputMethod (IBinder imeToken)"}, "showSoftInput(android.view.View, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View: The currently focused view, which would like to receive soft keyboard input."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#view#inputmethod#InputMethodManager#showSoftInput_E@ without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed.", "history": "added in API level 3", "FullName": "public boolean showSoftInput (View view, int flags)"}, "setCurrentInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)": {"Returns": [["boolean", "true if the current subtype was successfully switched. When the specified subtype is null, this method returns false."]], "Parameters": [["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: A new input method subtype to switch."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@"], "Description": "If the calling process is an IME, use @B_android#inputmethodservice#InputMethodService#switchInputMethod_E@, which does not require any permission as long as the caller is the current IME. If the calling process is some privileged app that already has @B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@ permission, just directly update @B_android#provider#Settings#Secure#SELECTED_INPUT_METHOD_SUBTYPE_E@. Switch to a new input method subtype of the current input method. Requires @B_android#Manifest#permission#WRITE_SECURE_SETTINGS_E@", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean setCurrentInputMethodSubtype (InputMethodSubtype subtype)"}, "showInputMethodAndSubtypeEnabler(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An input method, whose subtypes settings will be shown. If imiId is null, subtypes of all input methods will be shown."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Show the settings for enabling subtypes of the specified input method.", "history": "Added in API level 11", "FullName": "public void showInputMethodAndSubtypeEnabler (String imiId)"}, "showSoftInputFromInputMethod(android.os.IBinder,int)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@ or @B_android#view#inputmethod#InputMethodManager#SHOW_FORCED_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#requestShowSelf_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Show the input method's soft input area, so the user sees the input method window and can interact with it. This can only be called from the currently active input method, as validated by the given token.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public void showSoftInputFromInputMethod (IBinder token, int flags)"}, "updateCursorAnchorInfo(android.view.View,android.view.inputmethod.CursorAnchorInfo)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#view#inputmethod#CursorAnchorInfo_E@", "CursorAnchorInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report positional change of the text insertion point and/or characters in the composition string.", "history": "Added in API level 21", "FullName": "public void updateCursorAnchorInfo (View view, CursorAnchorInfo cursorAnchorInfo)"}, "setAdditionalInputMethodSubtypes(java.lang.String,android.view.inputmethod.InputMethodSubtype[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Id of InputMethodInfo which additional input method subtypes will be added to."], ["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: subtypes will be added as additional subtypes of the current input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For IMEs that have already implemented features like customizable/downloadable keyboard layouts/languages, please start migration to other approaches. One idea would be exposing only one unified @B_android#view#inputmethod#InputMethodSubtype_E@ then implement IME's own language switching mechanism within that unified subtype. The support of \"Additional Subtype\" may be completely dropped in a future version of Android. Set additional input method subtypes. Only a process which shares the same uid with the IME can add additional input method subtypes to the IME. Please note that a subtype's status is stored in the system. For example, enabled subtypes are remembered by the framework even after they are removed by using this method. If you re-add the same subtypes again, they will just get enabled. If you want to avoid such conflicts, for instance, you may want to create a \"different\" new subtype even with the same locale and mode, by changing its extra value. The different subtype won't get affected by the stored past status. (You may want to take a look at @B_android#view#inputmethod#InputMethodSubtype#hashCode_E@ to refer to the current implementation.) NOTE: If the same subtype exists in both the manifest XML file and additional subtypes specified by subtypes, those multiple instances are automatically merged into one instance. CAVEAT: In API Level 23 and prior, the system may do nothing if an empty @B_android#view#inputmethod#InputMethodSubtype_E@ is specified in subtypes, which prevents you from removing the last one entry of additional subtypes. If your IME statically defines one or more subtypes in the manifest XML file, you may be able to work around this limitation by specifying one of those statically defined subtypes in subtypes.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setAdditionalInputMethodSubtypes (String imiId, InputMethodSubtype[] subtypes)"}, "isWatchingCursor(android.view.View)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#inputmethod#InputConnection#requestCursorUpdates_E@ instead. Return true if the current input method wants to watch the location of the input editor's cursor in its window.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public boolean isWatchingCursor (View view)"}, "hideSoftInputFromWindow(android.os.IBinder, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The token of the window that is making the request, as returned by @B_android#view#View#getWindowToken_E@."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#view#inputmethod#InputMethodManager#hideSoftInputFromWindow_E@ without a result: request to hide the soft input window from the context of the window that is currently accepting input.", "history": "added in API level 3", "FullName": "public boolean hideSoftInputFromWindow (IBinder windowToken, int flags)"}, "showSoftInput(android.view.View,int,android.os.ResultReceiver)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View: The currently focused view, which would like to receive soft keyboard input."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@ bit set."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: If non-null, this will be called by the IME when it has processed your request to tell you what it has done. The result code you receive may be either @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Explicitly request that the current input method's soft input area be shown to the user, if needed. Call this if the user interacts with your view in such a way that they have expressed they would like to start performing input into it. @B_android#os#ResultReceiver_E@ instance passed to this method can be a long-lived object, because it may not be garbage-collected until all the corresponding @B_android#os#ResultReceiver_E@ objects transferred to different processes get garbage-collected. Follow the general patterns to avoid memory leaks in Android. Consider to use @B_java#lang#ref#WeakReference_E@ so that application logic objects such as @B_android#app#Activity_E@ and @B_android#content#Context_E@ can be garbage collected regardless of the lifetime of @B_android#os#ResultReceiver_E@.", "history": "Added in API level 3", "FullName": "public boolean showSoftInput (View view, int flags, ResultReceiver resultReceiver)"}, "hideSoftInputFromInputMethod(android.os.IBinder,int)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@, @B_android#view#inputmethod#InputMethodManager#HIDE_NOT_ALWAYS_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#requestHideSelf_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Close/hide the input method's soft input area, so the user no longer sees it or can interact with it. This can only be called from the currently active input method, as validated by the given token.", "history": "Added in API level 3 Deprecated in API level 28", "FullName": "public void hideSoftInputFromInputMethod (IBinder token, int flags)"}, "getCurrentInputMethodSubtype()": {"Returns": [["@B_android#view#inputmethod#InputMethodSubtype_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current input method subtype. This subtype is one of the subtypes in the current input method. This method returns null when the current input method doesn't have any input method subtype.", "history": "Added in API level 11", "FullName": "public InputMethodSubtype getCurrentInputMethodSubtype ()"}, "shouldOfferSwitchingToNextInputMethod(android.os.IBinder)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#shouldOfferSwitchingToNextInputMethod_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Returns true if the current IME needs to offer the users ways to switch to a next input method (e.g. a globe key.). When an IME sets supportsSwitchingToNextInputMethod and this method returns true, the IME has to offer ways to to invoke @B_android#view#inputmethod#InputMethodManager#switchToNextInputMethod_E@ accordingly. Note that the system determines the most appropriate next input method and subtype in order to provide the consistent user experience in switching between IMEs and subtypes.", "history": "Added in API level 19 Deprecated in API level 28", "FullName": "public boolean shouldOfferSwitchingToNextInputMethod (IBinder imeToken)"}, "showSoftInput(android.view.View,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View: The currently focused view, which would like to receive soft keyboard input."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#view#inputmethod#InputMethodManager#showSoftInput_E@ without a result receiver: explicitly request that the current input method's soft input area be shown to the user, if needed.", "history": "Added in API level 3", "FullName": "public boolean showSoftInput (View view, int flags)"}, "toggleSoftInput(int, int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@, @B_android#view#inputmethod#InputMethodManager#SHOW_FORCED_E@ bit set."], ["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@, @B_android#view#inputmethod#InputMethodManager#HIDE_NOT_ALWAYS_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method toggles the input method window display. If the input window is already displayed, it gets hidden. If not the input window will be displayed.", "history": "added in API level 3", "FullName": "public void toggleSoftInput (int showFlags, int hideFlags)"}, "getShortcutInputMethodsAndSubtypes()": {"Returns": [["@B_java#util#Map_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a map of all shortcut input method info and their subtypes.", "history": "Added in API level 11", "FullName": "public Map<InputMethodInfo, List<InputMethodSubtype>> getShortcutInputMethodsAndSubtypes ()"}, "hideSoftInputFromWindow(android.os.IBinder,int,android.os.ResultReceiver)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The token of the window that is making the request, as returned by @B_android#view#View#getWindowToken_E@."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@ bit set."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: If non-null, this will be called by the IME when it has processed your request to tell you what it has done. The result code you receive may be either @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to hide the soft input window from the context of the window that is currently accepting input. This should be called as a result of the user doing some actually than fairly explicitly requests to have the input window hidden. @B_android#os#ResultReceiver_E@ instance passed to this method can be a long-lived object, because it may not be garbage-collected until all the corresponding @B_android#os#ResultReceiver_E@ objects transferred to different processes get garbage-collected. Follow the general patterns to avoid memory leaks in Android. Consider to use @B_java#lang#ref#WeakReference_E@ so that application logic objects such as @B_android#app#Activity_E@ and @B_android#content#Context_E@ can be garbage collected regardless of the lifetime of @B_android#os#ResultReceiver_E@.", "history": "Added in API level 3", "FullName": "public boolean hideSoftInputFromWindow (IBinder windowToken, int flags, ResultReceiver resultReceiver)"}, "toggleSoftInput(int,int)": {"Returns": [], "Parameters": [["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#SHOW_IMPLICIT_E@, @B_android#view#inputmethod#InputMethodManager#SHOW_FORCED_E@ bit set."], ["int", "int: Provides additional operating flags. May be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@, @B_android#view#inputmethod#InputMethodManager#HIDE_NOT_ALWAYS_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method toggles the input method window display. If the input window is already displayed, it gets hidden. If not the input window will be displayed.", "history": "Added in API level 3", "FullName": "public void toggleSoftInput (int showFlags, int hideFlags)"}, "updateCursor(android.view.View,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#inputmethod#InputMethodManager#updateCursorAnchorInfo_E@ instead. Report the current cursor location in its window.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public void updateCursor (View view, int left, int top, int right, int bottom)"}, "hideSoftInputFromWindow(android.os.IBinder,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The token of the window that is making the request, as returned by @B_android#view#View#getWindowToken_E@."], ["int", "int: Provides additional operating flags. Currently may be 0 or have the @B_android#view#inputmethod#InputMethodManager#HIDE_IMPLICIT_ONLY_E@ bit set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synonym for @B_android#view#inputmethod#InputMethodManager#hideSoftInputFromWindow_E@ without a result: request to hide the soft input window from the context of the window that is currently accepting input.", "history": "Added in API level 3", "FullName": "public boolean hideSoftInputFromWindow (IBinder windowToken, int flags)"}, "isAcceptingText()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the currently served view is accepting full text edits. If false, it has no input connection, so can only handle raw key events.", "history": "Added in API level 3", "FullName": "public boolean isAcceptingText ()"}, "isFullscreenMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows you to discover whether the attached input method is running in fullscreen mode. Return true if it is fullscreen, entirely covering your UI, else returns false.", "history": "Added in API level 3", "FullName": "public boolean isFullscreenMode ()"}, "isActive(android.view.View)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the given view is the currently active view for the input method.", "history": "Added in API level 3", "FullName": "public boolean isActive (View view)"}, "getEnabledInputMethodSubtypeList(android.view.inputmethod.InputMethodInfo,boolean)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["@B_android#view#inputmethod#InputMethodInfo_E@", "InputMethodInfo: An input method info whose subtypes list will be returned."], ["boolean", "boolean: A boolean flag to allow to return the implicitly selected subtypes. If an input method info doesn't have enabled subtypes, the framework will implicitly enable subtypes according to the current system language."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of enabled input method subtypes for the specified input method info. On multi user environment, this API returns a result for the calling process user.", "history": "Added in API level 11", "FullName": "public List<InputMethodSubtype> getEnabledInputMethodSubtypeList (InputMethodInfo imi, boolean allowsImplicitlySelectedSubtypes)"}, "switchToNextInputMethod(android.os.IBinder,boolean)": {"Returns": [["boolean", "true if the current input method and subtype was successfully switched to the next input method and subtype."]], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: Supplies the identifying token given to an input method when it was started, which allows it to perform this operation on itself."], ["boolean", "boolean: if true, the framework will find the next subtype which belongs to the current IME"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#inputmethodservice#InputMethodService#switchToNextInputMethod_E@ instead. This method was intended for IME developers who should be accessing APIs through the service. APIs in this class are intended for app developers interacting with the IME. Force switch to the next input method and subtype. If there is no IME enabled except current IME and subtype, do nothing.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "public boolean switchToNextInputMethod (IBinder imeToken, boolean onlyCurrentIme)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.InputMethodManager", "ClassDesc": "Central system API to the overall input method framework (IMF) architecture, which arbitrates interaction between applications and the current input method. Topics covered here: There are three primary parties involved in the input method framework (IMF) architecture: The An Multiple In most cases, applications that are using the standard @B_android#widget#TextView_E@ or its subclasses will have little they need to do to work well with soft input methods. The main things you need to be aware of are: Properly set the @B_android#R#attr#inputType_E@ in your editable text views, so that the input method will have enough context to help the user in entering text into them. Deal well with losing screen space when the input method is displayed. Ideally an application should handle its window being resized smaller, but it can rely on the system performing panning of the window if needed. You should set the @B_android#R#attr#windowSoftInputMode_E@ attribute on your activity or the corresponding values on windows you create to help the system determine whether to pan or resize (it will try to determine this automatically but may get it wrong). You can also control the preferred soft input state (open, closed, etc) for your window using the same @B_android#R#attr#windowSoftInputMode_E@ attribute. More finer-grained control is available through the APIs here to directly interact with the IMF and its IME -- either showing or hiding the input area, letting the user pick an input method, etc. For the rare people amongst us writing their own text editors, you will need to implement @B_android#view#View#onCreateInputConnection_E@ to return a new instance of your own @B_android#view#inputmethod#InputConnection_E@ interface allowing the IME to interact with your editor. An input method (IME) is implemented as a @B_android#app#Service_E@, typically deriving from @B_android#inputmethodservice#InputMethodService_E@. It must provide the core @B_android#view#inputmethod#InputMethod_E@ interface, though this is normally handled by @B_android#inputmethodservice#InputMethodService_E@ and implementors will only need to deal with the higher-level API there. See the @B_android#inputmethodservice#InputMethodService_E@ class for more information on implementing IMEs. There are a lot of security issues associated with input methods, since they essentially have freedom to completely drive the UI and monitor everything the user enters. The Android input method framework also allows arbitrary third party IMEs, so care must be taken to restrict their selection and interactions. Here are some key points about the security architecture behind the IMF: Only the system is allowed to directly access an IME's @B_android#view#inputmethod#InputMethod_E@ interface, via the @B_android#Manifest#permission#BIND_INPUT_METHOD_E@ permission. This is enforced in the system by not binding to an input method service that does not require this permission, so the system can guarantee no other untrusted clients are accessing the current input method outside of its control. There may be many client processes of the IMF, but only one may be active at a time. The inactive clients can not interact with key parts of the IMF through the mechanisms described below. Clients of an input method are only given access to its @B_android#view#inputmethod#InputMethodSession_E@ interface. One instance of this interface is created for each client, and only calls from the session associated with the active client will be processed by the current IME. This is enforced by @B_android#inputmethodservice#AbstractInputMethodService_E@ for normal IMEs, but must be explicitly handled by an IME that is customizing the raw @B_android#view#inputmethod#InputMethodSession_E@ implementation. Only the active client's @B_android#view#inputmethod#InputConnection_E@ will accept operations. The IMF tells each client process whether it is active, and the framework enforces that in inactive processes calls on to the current InputConnection will be ignored. This ensures that the current IME can only deliver events and text edits to the UI that the user sees as being in focus. An IME can never interact with an @B_android#view#inputmethod#InputConnection_E@ while the screen is off. This is enforced by making all clients inactive while the screen is off, and prevents bad IMEs from driving the UI when the user can not be aware of its behavior. A client application can ask that the system let the user pick a new IME, but can not programmatically switch to one itself. This avoids malicious applications from switching the user to their own IME, which remains running when the user navigates away to another application. An IME, on the other hand, is allowed to programmatically switch the system to another IME, since it already has full control of user input. The user must explicitly enable a new IME in settings before they can switch to it, to confirm with the system that they know about it and want to make it available for use. Requires the @B_android#content#pm#PackageManager#FEATURE_INPUT_METHODS_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@."}