{"Functions": {"getKeySize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the key size specified by this parameter. For instance, for RSA this will return the modulus size and for EC it will return the field size.", "history": "Added in API level 19 Deprecated in API level 23", "FullName": "public int getKeySize ()"}, "getStartDate()": {"Returns": [["@B_java#util#Date_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the start date to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public Date getStartDate ()"}, "getEndDate()": {"Returns": [["@B_java#util#Date_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the end date to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public Date getEndDate ()"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Android context used for operations with this instance.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public Context getContext ()"}, "getKeyType()": {"Returns": [["@B_java#lang#String_E@", "This value may be null. Value is @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_RSA_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_EC_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_AES_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA1_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA224_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA256_E@, @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA384_E@, or @B_android#security#keystore#KeyProperties#KEY_ALGORITHM_HMAC_SHA512_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of key pair (e.g., EC, RSA) to be generated. See @B_android#security#keystore#KeyProperties_E@.KEY_ALGORITHM constants.", "history": "Added in API level 19 Deprecated in API level 23", "FullName": "public String getKeyType ()"}, "getAlgorithmParameterSpec()": {"Returns": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#security#spec#AlgorithmParameterSpec_E@ that will be used for creation of the key pair.", "history": "Added in API level 19 Deprecated in API level 23", "FullName": "public AlgorithmParameterSpec getAlgorithmParameterSpec ()"}, "getKeystoreAlias()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alias that will be used in the java.security.KeyStore in conjunction with the AndroidKeyStore.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public String getKeystoreAlias ()"}, "getSerialNumber()": {"Returns": [["@B_java#math#BigInteger_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the serial number to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public BigInteger getSerialNumber ()"}, "getSubjectDN()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the subject distinguished name to be used on the X.509 certificate that will be put in the @B_java#security#KeyStore_E@.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public X500Principal getSubjectDN ()"}, "isEncryptionRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#KeyguardManager#isDeviceSecure_E@"], "Permissions": [], "Description": "Returns true if the key must be encrypted at rest. This will protect the key pair with the secure lock screen credential (e.g., password, PIN, or pattern). Note that encrypting the key at rest requires that the secure lock screen (e.g., password, PIN, pattern) is set up, otherwise key generation will fail. Moreover, this key will be deleted when the secure lock screen is disabled or reset (e.g., by the user or a Device Administrator). Finally, this key cannot be used until the user unlocks the secure lock screen after boot.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public boolean isEncryptionRequired ()"}}, "Inheritance": [], "ClassName": "android.security.KeyPairGeneratorSpec", "ClassDesc": "Use @B_android#security#keystore#KeyGenParameterSpec_E@ instead. This provides the required parameters needed for initializing the KeyPairGenerator that works with @B_java#security#KeyPairGenerator_E@ API using the AndroidKeyStore provider. The context passed in may be used to pop up some UI to ask the user to unlock or initialize the Android KeyStore facility. After generation, the keyStoreAlias is used with the @B_java#security#KeyStore#getEntry_E@ interface to retrieve the @B_java#security#PrivateKey_E@ and its associated @B_java#security#cert#Certificate_E@ chain. The KeyPair generator will create a self-signed certificate with the subject as its X.509v3 Subject Distinguished Name and as its X.509v3 Issuer Distinguished Name along with the other parameters specified with the @B_android#security#KeyPairGeneratorSpec#Builder_E@. The self-signed X.509 certificate may be replaced at a later time by a certificate signed by a real Certificate Authority."}