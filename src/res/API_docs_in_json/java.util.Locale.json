{"Functions": {"getExtension(char)": {"Returns": [["@B_java#lang#String_E@", "The extension, or null if this locale defines no extension for the specified key."]], "Parameters": [["char", "char: the extension key"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if key is not well-formed"]], "SeeAlso": ["@B_java#util#Locale_E@"], "Permissions": [], "Description": "Returns the extension (or private use) value associated with the specified key, or null if there is no extension associated with the key. To be well-formed, the key must be one of [0-9A-Za-z]. Keys are case-insensitive, so for example 'z' and 'Z' represent the same extension.", "history": "Added in API level 21", "FullName": "public String getExtension (char key)"}, "getCountry()": {"Returns": [["@B_java#lang#String_E@", "The country/region code, or the empty string if none is defined."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDisplayCountry_E@"], "Permissions": [], "Description": "Returns the country/region code for this locale, which should either be the empty string, an uppercase ISO 3166 2-letter code, or a UN M.49 3-digit code.", "history": "Added in API level 1", "FullName": "public String getCountry ()"}, "lookup(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)": {"Returns": [["@B_java#util#Locale_E@", "the best matching Locale instance chosen based on priority or weight, or null if nothing matches."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: Locale instances used for matching"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or tags is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Locale instance for the best-matching language tag using the lookup mechanism defined in RFC 4647.", "history": "Added in API level 26", "FullName": "public static Locale lookup (List<Locale.LanguageRange> priorityList, Collection<Locale> locales)"}, "getScript()": {"Returns": [["@B_java#lang#String_E@", "The script code, or the empty string if none is defined."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDisplayScript_E@"], "Permissions": [], "Description": "Returns the script for this locale, which should either be the empty string or an ISO 15924 4-letter script code. The first letter is uppercase and the rest are lowercase, for example, 'Latn', 'Cyrl'.", "history": "Added in API level 21", "FullName": "public String getScript ()"}, "getUnicodeLocaleKeys()": {"Returns": [["@B_java#util#Set_E@", "The set of Unicode locale keys, or the empty set if this locale has no Unicode locale keywords."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of Unicode locale keys defined by this locale, or the empty set if this locale has none. The returned set is immutable. Keys are all lower case.", "history": "Added in API level 21", "FullName": "public Set<String> getUnicodeLocaleKeys ()"}, "getISO3Language()": {"Returns": [["@B_java#lang#String_E@", "A three-letter abbreviation of this locale's language."]], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if three-letter language abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a three-letter abbreviation of this locale's language. If the language matches an ISO 639-1 two-letter code, the corresponding ISO 639-2/T three-letter lowercase code is returned. The ISO 639-2 language codes can be found on-line, see \"Codes for the Representation of Names of Languages Part 2: Alpha-3 Code\". If the locale specifies a three-letter language, the language is returned as is. If the locale does not specify a language the empty string is returned.", "history": "Added in API level 1", "FullName": "public String getISO3Language ()"}, "filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>,java.util.Locale.FilteringMode)": {"Returns": [["@B_java#util#List_E@", "a list of Locale instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: Locale instances used for matching"], ["@B_java#util#Locale#FilteringMode_E@", "Locale.FilteringMode: filtering mode"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or locales is null"], ["@B_java#lang#IllegalArgumentException_E@", "if one or more extended language ranges are included in the given list when @B_java#util#Locale#FilteringMode#REJECT_EXTENDED_RANGES_E@ is specified"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647.", "history": "Added in API level 26", "FullName": "public static List<Locale> filter (List<Locale.LanguageRange> priorityList, Collection<Locale> locales, Locale.FilteringMode mode)"}, "getLanguage()": {"Returns": [["@B_java#lang#String_E@", "The language code, or the empty string if none is defined."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDisplayLanguage_E@"], "Permissions": [], "Description": "Returns the language code of this Locale.", "history": "Added in API level 1", "FullName": "public String getLanguage ()"}, "Locale(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the Locale class description about valid language values."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a locale from a language code. This constructor normalizes the language value to lowercase. ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input.", "history": "Added in API level 1", "FullName": "public Locale (String language)"}, "getDisplayCountry(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this locale's country, localized to locale. Returns the empty string if this locale does not correspond to a specific country.", "history": "Added in API level 1", "FullName": "public String getDisplayCountry (Locale locale)"}, "getDisplayScript(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the display name of the script code for the current default @B_java#util#Locale#Category#DISPLAY_E@ locale"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale for which to retrieve the display script."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if inLocale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale's script that is appropriate for display to the user. If possible, the name will be localized for the given locale. Returns the empty string if this locale doesn't specify a script code.", "history": "Added in API level 21", "FullName": "public String getDisplayScript (Locale inLocale)"}, "filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>,java.util.Locale.FilteringMode)": {"Returns": [["@B_java#util#List_E@", "a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: language tags"], ["@B_java#util#Locale#FilteringMode_E@", "Locale.FilteringMode: filtering mode"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or tags is null"], ["@B_java#lang#IllegalArgumentException_E@", "if one or more extended language ranges are included in the given list when @B_java#util#Locale#FilteringMode#REJECT_EXTENDED_RANGES_E@ is specified"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647.", "history": "Added in API level 26", "FullName": "public static List<String> filterTags (List<Locale.LanguageRange> priorityList, Collection<String> tags, Locale.FilteringMode mode)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this Locale is equal to the specified object."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Locale is equal to another object. A Locale is deemed equal to another Locale with identical language, script, country, variant and extensions, and unequal to all other objects.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode. Since Locales are often used in hashtables, caches the value for speed.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "setDefault(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the new default locale"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow the operation."], ["@B_java#lang#NullPointerException_E@", "if newLocale is null"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#util#PropertyPermission_E@"], "Permissions": [], "Description": "Sets the default locale for this instance of the Java Virtual Machine. This does not affect the host locale. If there is a security manager, its checkPermission method is called with a PropertyPermission(\"user.language\", \"write\") permission before the default locale is changed. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine. By setting the default locale with this method, all of the default locales for each Category are also set to the specified default locale.", "history": "Added in API level 1", "FullName": "public static void setDefault (Locale newLocale)"}, "getDisplayVariant()": {"Returns": [["@B_java#lang#String_E@", "The name of the display variant code appropriate to the locale."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale's variant code that is appropriate for display to the user. If possible, the name will be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale. If the locale doesn't specify a variant code, this function returns the empty string.", "history": "Added in API level 1", "FullName": "public String getDisplayVariant ()"}, "getDisplayVariant(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "The name of the display variant code appropriate to the given locale."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale for which to retrieve the display variant code."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if inLocale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale's variant code that is appropriate for display to the user. If possible, the name will be localized for inLocale. If the locale doesn't specify a variant code, this function returns the empty string.", "history": "Added in API level 1", "FullName": "public String getDisplayVariant (Locale inLocale)"}, "lookupTag(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)": {"Returns": [["@B_java#lang#String_E@", "the best matching language tag chosen based on priority or weight, or null if nothing matches."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: language tangs used for matching"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or tags is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the best-matching language tag using the lookup mechanism defined in RFC 4647.", "history": "Added in API level 26", "FullName": "public static String lookupTag (List<Locale.LanguageRange> priorityList, Collection<String> tags)"}, "getISO3Country()": {"Returns": [["@B_java#lang#String_E@", "A three-letter abbreviation of this locale's country."]], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "Throws MissingResourceException if the three-letter country abbreviation is not available for this locale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a three-letter abbreviation for this locale's country. If the country matches an ISO 3166-1 alpha-2 code, the corresponding ISO 3166-1 alpha-3 uppercase code is returned. If the locale doesn't specify a country, this will be the empty string. The ISO 3166-1 codes can be found on-line.", "history": "Added in API level 1", "FullName": "public String getISO3Country ()"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "The name of the locale appropriate to display."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale that is appropriate for display to the user. This will be the values returned by getDisplayLanguage(), getDisplayScript(), getDisplayCountry(), and getDisplayVariant() assembled into a single string. The the non-empty values are used in order, with the second and subsequent names in parentheses. For example:", "history": "Added in API level 1", "FullName": "public String getDisplayName ()"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this locale's language name, country name, and variant, localized to locale. The exact output form depends on whether this locale corresponds to a specific language, script, country and variant. For example: new Locale(\"en\").getDisplayName(Locale.US) -> English new Locale(\"en\", \"US\").getDisplayName(Locale.US) -> English (United States) new Locale(\"en\", \"US\", \"POSIX\").getDisplayName(Locale.US) -> English (United States,Computer) Locale.fromLanguageTag(\"zh-Hant-CN\").getDisplayName(Locale.US) -> Chinese (Traditional Han,China) new Locale(\"en\").getDisplayName(Locale.FRANCE) -> anglais new Locale(\"en\", \"US\").getDisplayName(Locale.FRANCE) -> anglais (\u00c9tats-Unis) new Locale(\"en\", \"US\", \"POSIX\").getDisplayName(Locale.FRANCE) -> anglais (\u00c9tats-Unis,informatique).", "history": "Added in API level 1", "FullName": "public String getDisplayName (Locale locale)"}, "getDisplayLanguage(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this locale's language, localized to locale. If the language name is unknown, the language code is returned.", "history": "Added in API level 1", "FullName": "public String getDisplayLanguage (Locale locale)"}, "setDefault(java.util.Locale.Category,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale#Category_E@", "Locale.Category: - the specified category to set the default locale"], ["@B_java#util#Locale_E@", "Locale: - the new default locale"]], "Throws": [["@B_java#lang#SecurityException_E@", "- if a security manager exists and its checkPermission method doesn't allow the operation."], ["@B_java#lang#NullPointerException_E@", "- if category and/or newLocale is null"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#util#PropertyPermission_E@", "@B_java#util#Locale#getDefault_E@"], "Permissions": [], "Description": "Sets the default locale for the specified Category for this instance of the Java Virtual Machine. This does not affect the host locale. If there is a security manager, its checkPermission method is called with a PropertyPermission(\"user.language\", \"write\") permission before the default locale is changed. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. Since changing the default locale may affect many different areas of functionality, this method should only be used if the caller is prepared to reinitialize locale-sensitive code running within the same Java Virtual Machine.", "history": "Added in API level 24", "FullName": "public static void setDefault (Locale.Category category, Locale newLocale)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string representation of the Locale, for debugging."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDisplayName_E@", "@B_java#util#Locale#toLanguageTag_E@"], "Permissions": [], "Description": "Returns a string representation of this Locale object, consisting of language, country, variant, script, and extensions as below: @B_java#util#Locale#toLanguageTag_E@. When the locale has neither script nor extensions, the result is the same as in Java 6 and prior. If both the language and country fields are missing, this function will return the empty string, even if the variant, script, or extensions field is present (you can't have a locale with just a variant, the variant must accompany a well-formed language or country code). If script or extensions are present and variant is missing, no underscore is added before the \"#\". This behavior is designed to support debugging and to be compatible with previous uses of toString that expected language, country, and variant fields only. To represent a Locale as a String for interchange purposes, use @B_java#util#Locale#toLanguageTag_E@. Examples:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "filterTags(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.lang.String>)": {"Returns": [["@B_java#util#List_E@", "a list of matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: language tags"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or tags is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of matching languages tags using the basic filtering mechanism defined in RFC 4647. This is equivalent to @B_java#util#Locale#filterTags_E@ when mode is @B_java#util#Locale#FilteringMode#AUTOSELECT_FILTERING_E@.", "history": "Added in API level 26", "FullName": "public static List<String> filterTags (List<Locale.LanguageRange> priorityList, Collection<String> tags)"}, "getDisplayScript()": {"Returns": [["@B_java#lang#String_E@", "the display name of the script code for the current default @B_java#util#Locale#Category#DISPLAY_E@ locale"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the the locale's script that is appropriate for display to the user. If possible, the name will be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale. Returns the empty string if this locale doesn't specify a script code.", "history": "Added in API level 21", "FullName": "public String getDisplayScript ()"}, "getVariant()": {"Returns": [["@B_java#lang#String_E@", "The variant code, or the empty string if none is defined."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDisplayVariant_E@"], "Permissions": [], "Description": "Returns the variant code for this locale.", "history": "Added in API level 1", "FullName": "public String getVariant ()"}, "Locale(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the Locale class description about valid language values."], ["@B_java#lang#String_E@", "String: An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the Locale class description about valid country values."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a locale from language and country. This constructor normalizes the language value to lowercase and the country value to uppercase. ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input.", "history": "added in API level 1", "FullName": "public Locale (String language, String country)"}, "getExtensionKeys()": {"Returns": [["@B_java#util#Set_E@", "The set of extension keys, or the empty set if this locale has no extensions."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of extension keys associated with this locale, or the empty set if it has no extensions. The returned set is unmodifiable. The keys will all be lower-case.", "history": "Added in API level 21", "FullName": "public Set<Character> getExtensionKeys ()"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of installed locales."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all installed locales.", "history": "Added in API level 1", "FullName": "public static Locale[] getAvailableLocales ()"}, "getDisplayLanguage()": {"Returns": [["@B_java#lang#String_E@", "The name of the display language."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale's language that is appropriate for display to the user. If possible, the name returned will be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale. For example, if the locale is fr_FR and the default @B_java#util#Locale#Category#DISPLAY_E@ locale is en_US, getDisplayLanguage() will return \"French\"; if the locale is en_US and the default @B_java#util#Locale#Category#DISPLAY_E@ locale is fr_FR, getDisplayLanguage() will return \"anglais\". If the name returned cannot be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale, (say, we don't have a Japanese name for Croatian), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn't specify a language, this function returns the empty string.", "history": "Added in API level 1", "FullName": "public String getDisplayLanguage ()"}, "getDefault(java.util.Locale.Category)": {"Returns": [["@B_java#util#Locale_E@", "the default locale for the specified Category for this instance of the Java Virtual Machine"]], "Parameters": [["@B_java#util#Locale#Category_E@", "Locale.Category: - the specified category to get the default locale"]], "Throws": [["@B_java#lang#NullPointerException_E@", "- if category is null"]], "SeeAlso": ["@B_java#util#Locale#setDefault_E@"], "Permissions": [], "Description": "Gets the current value of the default locale for the specified Category for this instance of the Java Virtual Machine. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the setDefault(Locale.Category, Locale) method.", "history": "Added in API level 24", "FullName": "public static Locale getDefault (Locale.Category category)"}, "stripExtensions()": {"Returns": [["@B_java#util#Locale_E@", "a copy of this Locale with no extensions, or this if this has no extensions"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this Locale with no Locale has no extensions, this Locale is returned.", "history": "Added in API level 26", "FullName": "public Locale stripExtensions ()"}, "filter(java.util.List<java.util.Locale.LanguageRange>,java.util.Collection<java.util.Locale>)": {"Returns": [["@B_java#util#List_E@", "a list of Locale instances for matching language tags sorted in descending order based on priority or weight, or an empty list if nothing matches. The list is modifiable."]], "Parameters": [["@B_java#util#List_E@", "List: user's Language Priority List in which each language tag is sorted in descending order based on priority or weight"], ["@B_java#util#Collection_E@", "Collection: Locale instances used for matching"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if priorityList or locales is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of matching Locale instances using the filtering mechanism defined in RFC 4647. This is equivalent to @B_java#util#Locale#filter_E@ when mode is @B_java#util#Locale#FilteringMode#AUTOSELECT_FILTERING_E@.", "history": "Added in API level 26", "FullName": "public static List<Locale> filter (List<Locale.LanguageRange> priorityList, Collection<Locale> locales)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides Cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getISOLanguages()": {"Returns": [["@B_java#lang#String_E@", "Am array of ISO 639 two-letter language codes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of all 2-letter language codes defined in ISO 639. Can be used to create Locales. ISO 639 is not a stable standard\u2014 some languages' codes have changed. The list this function returns includes both the new and the old codes for the languages whose codes have changed. The Locale class also supports language codes up to 8 characters in length. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.", "history": "Added in API level 1", "FullName": "public static String[] getISOLanguages ()"}, "getDisplayCountry()": {"Returns": [["@B_java#lang#String_E@", "The name of the country appropriate to the locale."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name for the locale's country that is appropriate for display to the user. If possible, the name returned will be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale. For example, if the locale is fr_FR and the default @B_java#util#Locale#Category#DISPLAY_E@ locale is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and the default @B_java#util#Locale#Category#DISPLAY_E@ locale is fr_FR, getDisplayCountry() will return \"Etats-Unis\". If the name returned cannot be localized for the default @B_java#util#Locale#Category#DISPLAY_E@ locale, (say, we don't have a Japanese name for Croatia), this function falls back on the English name, and uses the ISO code as a last-resort value. If the locale doesn't specify a country, this function returns the empty string.", "history": "Added in API level 1", "FullName": "public String getDisplayCountry ()"}, "getDefault()": {"Returns": [["@B_java#util#Locale_E@", "the default locale for this instance of the Java Virtual Machine"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value of the default locale for this instance of the Java Virtual Machine. The Java Virtual Machine sets the default locale during startup based on the host environment. It is used by many locale-sensitive methods if no locale is explicitly specified. It can be changed using the @B_java#util#Locale#setDefault_E@ method.", "history": "Added in API level 1", "FullName": "public static Locale getDefault ()"}, "hasExtensions()": {"Returns": [["boolean", "true if this Locale has any extensions"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this Locale has any", "history": "Added in API level 26", "FullName": "public boolean hasExtensions ()"}, "Locale(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the Locale class description about valid language values."], ["@B_java#lang#String_E@", "String: An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the Locale class description about valid country values."], ["@B_java#lang#String_E@", "String: Any arbitrary value used to indicate a variation of a Locale. See the Locale class description for the details."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if any argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a locale from language, country and variant. This constructor normalizes the language value to lowercase and the country value to uppercase. ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input. The two cases (\"ja\", \"JP\", \"JP\") and (\"th\", \"TH\", \"TH\") are handled specially, see", "history": "Added in API level 1", "FullName": "public Locale (String language, String country, String variant)"}, "getUnicodeLocaleType(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The Unicode locale type associated with the key, or null if the locale does not define the key."]], "Parameters": [["@B_java#lang#String_E@", "String: the Unicode locale key"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the key is not well-formed"], ["@B_java#lang#NullPointerException_E@", "if key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Unicode locale type associated with the specified Unicode locale key for this locale. Returns the empty string for keys that are defined with no type. Returns null if the key is not defined. Keys are case-insensitive. The key must be two alphanumeric characters ([0-9a-zA-Z]), or an IllegalArgumentException is thrown.", "history": "Added in API level 21", "FullName": "public String getUnicodeLocaleType (String key)"}, "Locale(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An ISO 639 alpha-2 or alpha-3 language code, or a language subtag up to 8 characters in length. See the Locale class description about valid language values."], ["@B_java#lang#String_E@", "String: An ISO 3166 alpha-2 country code or a UN M.49 numeric-3 area code. See the Locale class description about valid country values."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either argument is null."]], "SeeAlso": [], "Permissions": [], "Description": "Construct a locale from language and country. This constructor normalizes the language value to lowercase and the country value to uppercase. ISO 639 is not a stable standard; some of the language codes it defines (specifically \"iw\", \"ji\", and \"in\") have changed. This constructor accepts both the old codes (\"iw\", \"ji\", and \"in\") and the new codes (\"he\", \"yi\", and \"id\"), but all other API on Locale will return only the OLD codes. For backward compatibility reasons, this constructor does not make any syntactic checks on the input.", "history": "Added in API level 1", "FullName": "public Locale (String language, String country)"}, "getUnicodeLocaleAttributes()": {"Returns": [["@B_java#util#Set_E@", "The set of attributes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of unicode locale attributes associated with this locale, or the empty set if it has no attributes. The returned set is unmodifiable.", "history": "Added in API level 21", "FullName": "public Set<String> getUnicodeLocaleAttributes ()"}, "toLanguageTag()": {"Returns": [["@B_java#lang#String_E@", "a BCP47 language tag representing the locale"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#forLanguageTag_E@"], "Permissions": [], "Description": "Returns a well-formed IETF BCP 47 language tag representing this locale. If this Locale has a language, country, or variant that does not satisfy the IETF BCP 47 language tag syntax requirements, this method handles these fields as described below: if all sub-segments match [0-9a-zA-Z]{1,8} (for example \"WIN\" or \"Oracle_JDK_Standard_Edition\"), the first ill-formed sub-segment and all following will be appended to the private use subtag. The first appended subtag will be \"lvariant\", followed by the sub-segments in order, separated by hyphen. For example, \"x-lvariant-WIN\", \"Oracle-x-lvariant-JDK-Standard-Edition\". if any sub-segment does not match [0-9a-zA-Z]{1,8}, the variant will be truncated and the problematic sub-segment and all following sub-segments will be omitted. If the remainder is non-empty, it will be emitted as a private use subtag as above (even if the remainder turns out to be well-formed). For example, \"Solaris_isjustthecoolestthing\" is emitted as \"x-lvariant-Solaris\", not as \"solaris\". Deprecated ISO language codes \"iw\", \"ji\", and \"in\" are converted to \"he\", \"yi\", and \"id\", respectively. A locale with language \"no\", country \"NO\", and variant \"NY\", representing Norwegian Nynorsk (Norway), is converted to a language tag \"nn-NO\".", "history": "Added in API level 21", "FullName": "public String toLanguageTag ()"}, "forLanguageTag(java.lang.String)": {"Returns": [["@B_java#util#Locale_E@", "The locale that best represents the language tag."]], "Parameters": [["@B_java#lang#String_E@", "String: the language tag"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if languageTag is null"]], "SeeAlso": ["@B_java#util#Locale#toLanguageTag_E@", "@B_java#util#Locale#Builder#setLanguageTag_E@"], "Permissions": [], "Description": "Returns a locale for the specified IETF BCP 47 language tag string. If the specified language tag contains any ill-formed subtags, the first such subtag and all following subtags are ignored. Compare to @B_java#util#Locale#Builder#setLanguageTag_E@ which throws an exception in this case. The following The language code \"und\" is mapped to language \"\". The language codes \"he\", \"yi\", and \"id\" are mapped to \"iw\", \"ji\", and \"in\" respectively. (This is the same canonicalization that's done in Locale's constructors.) The portion of a private use subtag prefixed by \"lvariant\", if any, is removed and appended to the variant field in the result locale (without case normalization). If it is then empty, the private use subtag is discarded: When the languageTag argument contains an extlang subtag, the first such subtag is used as the language, and the primary language subtag and other extlang subtags are ignored: Case is normalized except for variant tags, which are left unchanged. Language is normalized to lower case, script to title case, country to upper case, and extensions to lower case. If, after processing, the locale would exactly match either ja_JP_JP or th_TH_TH with no extensions, the appropriate extensions are added as though the constructor had been called: This implements the 'Language-Tag' production of BCP47, and so supports grandfathered (regular and irregular) as well as private use language tags. Stand alone private use tags are represented as empty language and extension 'x-whatever', and grandfathered tags are converted to their canonical replacements where they exist. Grandfathered tags with canonical replacements are as follows: Grandfathered tags with no modern replacement will be converted as follows: For a list of all grandfathered tags, see the IANA Language Subtag Registry (search for \"Type: grandfathered\"). toLanguageTag and forLanguageTag will round-trip.", "history": "Added in API level 21", "FullName": "public static Locale forLanguageTag (String languageTag)"}, "getISOCountries()": {"Returns": [["@B_java#lang#String_E@", "An array of ISO 3166 two-letter country codes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of all 2-letter country codes defined in ISO 3166. Can be used to create Locales. Locale class also supports other codes for country (region), such as 3-letter numeric UN M.49 area codes. Therefore, the list returned by this method does not contain ALL valid codes that can be used to create Locales.", "history": "Added in API level 1", "FullName": "public static String[] getISOCountries ()"}}, "Inheritance": [], "ClassName": "java.util.Locale", "ClassDesc": "A Locale object represents a specific geographical, political, or cultural region. An operation that requires a Locale to perform its task is called locale-sensitive and uses the Locale to tailor information for the user. For example, displaying a number is a locale-sensitive operation\u2014 the number should be formatted according to the customs and conventions of the user's native country, region, or culture. The Locale class implements IETF BCP 47 which is composed of A Locale object logically consists of the fields described below. Locale class does not provide any validation features. The Builder only checks if an individual field satisfies the syntactic requirement (is well-formed), but does not validate the value itself. See @B_java#util#Locale#Builder_E@ for details. UTS#35, \"Unicode Locale Data Markup Language\" defines optional attributes and keywords to override or refine the default behavior associated with a locale. A keyword is represented by a pair of key and type. For example, \"nu-thai\" indicates that Thai local digits (value:\"thai\") should be used for formatting numbers (key:\"nu\"). The keywords are mapped to a BCP 47 extension value using the extension key 'u' (@B_java#util#Locale#UNICODE_LOCALE_EXTENSION_E@). The above example, \"nu-thai\", becomes the extension \"u-nu-thai\".code Thus, when a Locale object contains Unicode locale attributes and keywords, getExtension(UNICODE_LOCALE_EXTENSION) will return a String representing this information, for example, \"nu-thai\". The Locale class also provides @B_java#util#Locale#getUnicodeLocaleAttributes_E@, @B_java#util#Locale#getUnicodeLocaleKeys_E@, and @B_java#util#Locale#getUnicodeLocaleType_E@ which allow you to access Unicode locale attributes and key/type pairs directly. When represented as a string, the Unicode Locale Extension lists attributes alphabetically, followed by key/type sequences with keys listed alphabetically (the order of subtags comprising a key's type is fixed when the type is defined) A well-formed locale key has the form [0-9a-zA-Z]{2}. A well-formed locale type has the form \"\" | [0-9a-zA-Z]{3,8} ('-' [0-9a-zA-Z]{3,8})* (it can be empty, or a series of subtags 3-8 alphanums in length). A well-formed locale attribute has the form [0-9a-zA-Z]{3,8} (it is a single subtag with the same form as a locale type subtag). The Unicode locale extension specifies optional behavior in locale-sensitive services. Although the LDML specification defines various keys and values, actual locale-sensitive service implementations in a Java Runtime Environment might not support any particular Unicode locale attributes or key/type pairs. There are several different ways to create a Locale object. Using @B_java#util#Locale#Builder_E@ you can construct a Locale object that conforms to BCP 47 syntax. The Locale class provides three constructors: Locale object with language, country and variant, but you cannot specify script or extensions. The method @B_java#util#Locale#forLanguageTag_E@ creates a Locale object for a well-formed BCP 47 language tag. The Locale class provides a number of convenient constants that you can use to create Locale objects for commonly used locales. For example, the following creates a Locale object for the United States: If an application or a system is internationalized and provides localized resources for multiple locales, it sometimes needs to find one or more locales (or language tags) which meet each user's specific preferences. Note that a term \"language tag\" is used interchangeably with \"locale\" in this locale matching documentation. In order to do matching a user's preferred locales to a set of language tags, Filtering is used to get all matching locales, whereas lookup is to choose the best matching locale. Matching is done case-insensitively. These matching mechanisms are described in the following sections. A user's preference is called a Language Priority List and is expressed as a list of language ranges. There are syntactically two types of language ranges: basic and extended. See @B_java#util#Locale#LanguageRange_E@ for details. The filtering operation returns all matching language tags. It is defined in RFC 4647 as follows: \"In filtering, each language range represents the least specific language tag (that is, the language tag with fewest number of subtags) that is an acceptable match. All of the language tags in the matching set of tags will have an equal or greater number of subtags than the language range. Every non-wildcard subtag in the language range will appear in every one of the matching language tags.\" There are two types of filtering: filtering for basic language ranges (called \"basic filtering\") and filtering for extended language ranges (called \"extended filtering\"). They may return different results by what kind of language ranges are included in the given Language Priority List. @B_java#util#Locale#FilteringMode_E@ is a parameter to specify how filtering should be done. The lookup operation returns the best matching language tags. It is defined in RFC 4647 as follows: \"By contrast with filtering, each language range represents the most specific tag that is an acceptable match. The first matching tag found, according to the user's priority, is considered the closest match and is the item returned.\" For example, if a Language Priority List consists of two language ranges, \"zh-Hant-TW\" and \"en-US\", in prioritized order, lookup method progressively searches the language tags below in order to find the best matching language tag. \"*\" is the special language range, and it is ignored in lookup. If multiple language tags match as a result of the subtag '*' included in a language range, the first matching language tag returned by an @B_java#util#Iterator_E@ over a @B_java#util#Collection_E@ of language tags is treated as the best matching one. Once you've created a Locale you can query it for information about itself. Use getCountry to get the country (or region) code and getLanguage to get the language code. You can use getDisplayCountry to get the name of the country suitable for displaying to the user. Similarly, you can use getDisplayLanguage to get the name of the language suitable for displaying to the user. Interestingly, the getDisplayXXX methods are themselves locale-sensitive and have two versions: one that uses the default @B_java#util#Locale#Category#DISPLAY_E@ locale and one that uses the locale specified as an argument. The Java Platform provides a number of classes that perform locale-sensitive operations. For example, the NumberFormat class formats numbers, currency, and percentages in a locale-sensitive manner. Classes such as NumberFormat have several convenience methods for creating a default object of that type. For example, the NumberFormat class provides these three convenience methods for creating a default NumberFormat object: @B_java#util#Locale#Category#FORMAT_E@ locale: Locale is the mechanism for identifying the kind of object (NumberFormat) that you would like to get. The locale is In order to maintain compatibility with existing usage, Locale's constructors retain their behavior prior to the Java Runtime Environment version 1.7. The same is largely true for the toString method. Thus Locale objects can continue to be used as they were. In particular, clients who parse the output of toString into language, country, and variant fields can continue to do so (although this is strongly discouraged), although the variant field will have additional information in it if script or extensions are present. In addition, BCP 47 imposes syntax restrictions that are not imposed by Locale's constructors. This means that conversions between some Locales and BCP 47 language tags cannot be made without losing information. Thus toLanguageTag cannot represent the state of locales whose language, country, or variant do not conform to BCP 47. Because of these issues, it is recommended that clients migrate away from constructing non-conforming locales and use the forLanguageTag and Locale.Builder APIs instead. Clients desiring a string representation of the complete locale can then always rely on toLanguageTag for this purpose. For compatibility reasons, two non-conforming locales are treated as special cases. These are Java has used Java has used During serialization, writeObject writes all fields to the output stream, including extensions. During deserialization, readResolve adds extensions as described in Locale's constructor has always converted three language codes to their earlier, obsoleted forms: The APIs added in 1.7 map between the old and new language codes, maintaining the old codes internal to Locale (so that getLanguage and toString reflect the old code), but using the new codes in the BCP 47 language tag APIs (so that toLanguageTag reflects the new one). This preserves the equivalence between Locales no matter which code or API is used to construct them. Java's default resource bundle lookup mechanism also implements this mapping, so that resources can be named using either convention, see @B_java#util#ResourceBundle#Control_E@. The Locale constructors have always specified that the language and the country param be two characters in length, although in practice they have accepted any length. The specification has now been relaxed to allow language codes of two to eight characters and country (region) codes of two to three characters, and in particular, three-letter language codes and three-digit region codes as specified in the IANA Language Subtag Registry. For compatibility, the implementation still does not impose a length constraint. Note that locale data comes solely from ICU. User-supplied locale service providers (using the java.text.spi or java.util.spi mechanisms) are not supported. Here are the versions of ICU (and the corresponding CLDR and Unicode versions) used in various Android releases: Note that there are many convenience methods that automatically use the default locale, but using them may lead to subtle bugs. The default locale is appropriate for tasks that involve presenting data to the user. In this case, you want to use the user's date/time formats, number formats, rules for conversion to lowercase, and so on. In this case, it's safe to use the convenience methods. The default locale is Locale.US \u2013 this locale is guaranteed to be available on all devices, and the fact that it has no surprising special cases and is frequently used (especially for computer-computer communication) means that it tends to be the most efficient choice too. A common mistake is to implicitly use the default locale when producing output meant to be machine-readable. This tends to work on the developer's test devices (especially because so many developers use en_US), but fails when run on a device whose user is in a more complex locale. For example, if you're formatting integers some locales will use non-ASCII decimal digits. As another example, if you're formatting floating-point numbers some locales will use ',' as the decimal point and '.' for digit grouping. That's correct for human-readable output, but likely to cause problems if presented to another computer (@B_java#lang#Double#parseDouble_E@ can't parse such a number, for example). You should also be wary of the @B_java#lang#String#toLowerCase_E@ and @B_java#lang#String#toUpperCase_E@ overloads that don't take a Locale: in Turkey, for example, the characters 'i' and 'I' won't be converted to 'I' and 'i'. This is the correct behavior for Turkish text (such as user input), but inappropriate for, say, HTTP headers."}