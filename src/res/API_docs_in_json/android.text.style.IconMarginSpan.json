{"Functions": {"IconMarginSpan(android.graphics.Bitmap,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: bitmap to be rendered at the beginning of the text This value must never be null."], ["int", "int: padding width, in pixels, between the bitmap and the text Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#text#style#IconMarginSpan_E@ from a @B_android#graphics#Bitmap_E@.", "history": "Added in API level 1", "FullName": "public IconMarginSpan (Bitmap bitmap, int pad)"}, "IconMarginSpan(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: bitmap to be rendered at the beginning of the text This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#text#style#IconMarginSpan_E@ from a @B_android#graphics#Bitmap_E@.", "history": "Added in API level 1", "FullName": "public IconMarginSpan (Bitmap bitmap)"}, "IconMarginSpan(android.graphics.Bitmap, int)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: bitmap to be rendered at the beginning of the textThis value must never be null."], ["int", "int: padding width, in pixels, between the bitmap and the text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#text#style#IconMarginSpan_E@ from a @B_android#graphics#Bitmap_E@.", "history": "added in API level 1", "FullName": "public IconMarginSpan (Bitmap bitmap, int pad)"}, "chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint.FontMetricsInt)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text"], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["int", "int: the start of the span"], ["int", "int: the line height"], ["@B_android#graphics#Paint#FontMetricsInt_E@", "Paint.FontMetricsInt: font metrics of the paint, in integers"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Classes that implement this should define how the height is being calculated.", "history": "Added in API level 1", "FullName": "public void chooseHeight (CharSequence text, int start, int end, int istartv, int v, Paint.FontMetricsInt fm)"}, "drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas"], ["@B_android#graphics#Paint_E@", "Paint: the paint. The this should be left unchanged on exit."], ["int", "int: the current position of the margin"], ["int", "int: the base direction of the paragraph; if negative, the margin is to the right of the text, otherwise it is to the left."], ["int", "int: the top of the line"], ["int", "int: the baseline of the line"], ["int", "int: the bottom of the line"], ["@B_java#lang#CharSequence_E@", "CharSequence: the text"], ["int", "int: the start of the line"], ["int", "int: the end of the line"], ["boolean", "boolean: true if this is the first line of its paragraph"], ["@B_android#text#Layout_E@", "Layout: the layout containing this line"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders the leading margin. This is called before the margin has been adjusted by the value returned by @B_android#text#style#LeadingMarginSpan#getLeadingMargin_E@.", "history": "Added in API level 1", "FullName": "public void drawLeadingMargin (Canvas c, Paint p, int x, int dir, int top, int baseline, int bottom, CharSequence text, int start, int end, boolean first, Layout layout)"}, "getLeadingMargin(boolean)": {"Returns": [["int", "the offset for the margin."]], "Parameters": [["boolean", "boolean: true if the request is for the first line of a paragraph, false for subsequent lines"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount by which to adjust the leading margin. Positive values move away from the leading edge of the paragraph, negative values move towards it.", "history": "Added in API level 1", "FullName": "public int getLeadingMargin (boolean first)"}}, "Inheritance": [], "ClassName": "android.text.style.IconMarginSpan", "ClassDesc": "Paragraph affecting span, that draws a bitmap at the beginning of a text. The span also allows setting a padding between the bitmap and the text. The default value of the padding is 0px. The span should be attached from the first character of the text. For example, an IconMarginSpan with a bitmap and a padding of 30px can be set like this:"}