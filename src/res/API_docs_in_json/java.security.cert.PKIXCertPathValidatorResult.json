{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a String describing the contents of this PKIXCertPathValidatorResult"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a printable representation of this PKIXCertPathValidatorResult.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the public key of the subject (never null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the public key of the subject (target) of the certification path, including any inherited public key parameters if applicable.", "history": "Added in API level 1", "FullName": "public PublicKey getPublicKey ()"}, "getTrustAnchor()": {"Returns": [["@B_java#security#cert#TrustAnchor_E@", "the TrustAnchor (never null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the TrustAnchor describing the CA that served as a trust anchor for the certification path.", "history": "Added in API level 1", "FullName": "public TrustAnchor getTrustAnchor ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "the copy"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this object.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "PKIXCertPathValidatorResult(java.security.cert.TrustAnchor,java.security.cert.PolicyNode,java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#cert#TrustAnchor_E@", "TrustAnchor: a TrustAnchor describing the CA that served as a trust anchor for the certification path"], ["@B_java#security#cert#PolicyNode_E@", "PolicyNode: the immutable valid policy tree, or null if there are no valid policies"], ["@B_java#security#PublicKey_E@", "PublicKey: the public key of the subject"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the subjectPublicKey or trustAnchor parameters are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of PKIXCertPathValidatorResult containing the specified parameters.", "history": "Added in API level 1", "FullName": "public PKIXCertPathValidatorResult (TrustAnchor trustAnchor, PolicyNode policyTree, PublicKey subjectPublicKey)"}, "getPolicyTree()": {"Returns": [["@B_java#security#cert#PolicyNode_E@", "the root node of the valid policy tree, or null if there are no valid policies"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the root node of the valid policy tree resulting from the PKIX certification path validation algorithm. The PolicyNode object that is returned and any objects that it returns through public methods are immutable. Most applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in PKIXParameters. However, more sophisticated applications, especially those that process policy qualifiers, may need to traverse the valid policy tree using the @B_java#security#cert#PolicyNode#getParent_E@ and @B_java#security#cert#PolicyNode#getChildren_E@ methods.", "history": "Added in API level 1", "FullName": "public PolicyNode getPolicyTree ()"}}, "Inheritance": [], "ClassName": "java.security.cert.PKIXCertPathValidatorResult", "ClassDesc": "This class represents the successful result of the PKIX certification path validation algorithm. Instances of PKIXCertPathValidatorResult are returned by the @B_java#security#cert#CertPathValidator#validate_E@ method of CertPathValidator objects implementing the PKIX algorithm. All PKIXCertPathValidatorResult objects contain the valid policy tree and subject public key resulting from the validation algorithm, as well as a TrustAnchor describing the certification authority (CA) that served as a trust anchor for the certification path. Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."}