{"Functions": {"setTimeOfDay(int,int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#HOUR_OF_DAY_E@ value (24-hour clock)"], ["int", "int: the @B_java#util#Calendar#MINUTE_E@ value"], ["int", "int: the @B_java#util#Calendar#SECOND_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time of day field parameters to the values given by hourOfDay, minute, and second. This method is equivalent to a call to:", "history": "Added in API level 26", "FullName": "public Calendar.Builder setTimeOfDay (int hourOfDay, int minute, int second)"}, "setInstant(java.util.Date)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["@B_java#util#Date_E@", "Date: a Date representing a millisecond offset from the Epoch"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if instant is null"], ["@B_java#lang#IllegalStateException_E@", "if any of the field parameters have already been set"]], "SeeAlso": ["@B_java#util#Calendar#setTime_E@", "@B_java#util#Calendar#setTimeInMillis_E@", "@B_java#util#Calendar#time_E@"], "Permissions": [], "Description": "Sets the instant parameter to the instant value given by a @B_java#util#Date_E@. This method is equivalent to a call to @B_java#util#Calendar#Builder#setInstant_E@.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setInstant (Date instant)"}, "setTimeOfDay(int, int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#HOUR_OF_DAY_E@ value (24-hour clock)"], ["int", "int: the @B_java#util#Calendar#MINUTE_E@ value"], ["int", "int: the @B_java#util#Calendar#SECOND_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time of day field parameters to the values given by hourOfDay, minute, and second. This method is equivalent to a call to:", "history": "added in API level 26", "FullName": "public Calendar.Builder setTimeOfDay (int hourOfDay, int minute, int second)"}, "setWeekDefinition(int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the first day of a week; one of @B_java#util#Calendar#SUNDAY_E@ to @B_java#util#Calendar#SATURDAY_E@"], ["int", "int: the minimal number of days in the first week (1..7)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if firstDayOfWeek or minimalDaysInFirstWeek is invalid"]], "SeeAlso": ["@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the", "history": "Added in API level 26", "FullName": "public Calendar.Builder setWeekDefinition (int firstDayOfWeek, int minimalDaysInFirstWeek)"}, "set(int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: an index to the Calendar fields"], ["int", "int: the field value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is invalid"], ["@B_java#lang#IllegalStateException_E@", "if the instant value has already been set, or if fields have been set too many (approximately @B_java#lang#Integer#MAX_VALUE_E@) times."]], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the field parameter to the given value. field is an index to the @B_java#util#Calendar#fields_E@, such as @B_java#util#Calendar#DAY_OF_MONTH_E@. Field value validation is not performed in this method. Any out of range values are either normalized in lenient mode or detected as an invalid value in non-lenient mode when building a Calendar.", "history": "added in API level 26", "FullName": "public Calendar.Builder set (int field, int value)"}, "setDate(int,int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#YEAR_E@ value"], ["int", "int: the @B_java#util#Calendar#MONTH_E@ value (the month numbering is 0-based)."], ["int", "int: the @B_java#util#Calendar#DAY_OF_MONTH_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the date field parameters to the values given by year, month, and dayOfMonth. This method is equivalent to a call to:", "history": "Added in API level 26", "FullName": "public Calendar.Builder setDate (int year, int month, int dayOfMonth)"}, "setInstant(long)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["long", "long: a millisecond offset from the Epoch"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if any of the field parameters have already been set"]], "SeeAlso": ["@B_java#util#Calendar#setTime_E@", "@B_java#util#Calendar#setTimeInMillis_E@", "@B_java#util#Calendar#time_E@"], "Permissions": [], "Description": "Sets the instant parameter to the given instant value that is a millisecond offset from", "history": "Added in API level 26", "FullName": "public Calendar.Builder setInstant (long instant)"}, "setLenient(boolean)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["boolean", "boolean: true for lenient mode; false for non-lenient mode"]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setLenient_E@"], "Permissions": [], "Description": "Sets the lenient mode parameter to the value given by lenient. If no lenient parameter is given to this Calendar.Builder, lenient mode will be used in the @B_java#util#Calendar#Builder#build_E@ method.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setLenient (boolean lenient)"}, "setDate(int, int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#YEAR_E@ value"], ["int", "int: the @B_java#util#Calendar#MONTH_E@ value (the month numbering is 0-based)."], ["int", "int: the @B_java#util#Calendar#DAY_OF_MONTH_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the date field parameters to the values given by year, month, and dayOfMonth. This method is equivalent to a call to:", "history": "added in API level 26", "FullName": "public Calendar.Builder setDate (int year, int month, int dayOfMonth)"}, "setFields(int...)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int...", "int: field-value pairs"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if fieldValuePairs is null"], ["@B_java#lang#IllegalArgumentException_E@", "if any of fields are invalid, or if fieldValuePairs.length is an odd number."], ["@B_java#lang#IllegalStateException_E@", "if the instant value has been set, or if fields have been set too many (approximately @B_java#lang#Integer#MAX_VALUE_E@) times."]], "SeeAlso": [], "Permissions": [], "Description": "Sets field parameters to their values given by fieldValuePairs that are pairs of a field and its value. For example, @B_java#util#Calendar#Builder#set_E@ calls:", "history": "Added in API level 26", "FullName": "public Calendar.Builder setFields (int... fieldValuePairs)"}, "setTimeZone(java.util.TimeZone)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["@B_java#util#TimeZone_E@", "TimeZone: the @B_java#util#TimeZone_E@"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if zone is null"]], "SeeAlso": ["@B_java#util#Calendar#setTimeZone_E@"], "Permissions": [], "Description": "Sets the time zone parameter to the given zone. If no time zone parameter is given to this Caledar.Builder, the @B_java#util#Calendar#Builder#build_E@ method.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setTimeZone (TimeZone zone)"}, "setTimeOfDay(int, int, int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#HOUR_OF_DAY_E@ value (24-hour clock)"], ["int", "int: the @B_java#util#Calendar#MINUTE_E@ value"], ["int", "int: the @B_java#util#Calendar#SECOND_E@ value"], ["int", "int: the @B_java#util#Calendar#MILLISECOND_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis. This method is equivalent to a call to:", "history": "added in API level 26", "FullName": "public Calendar.Builder setTimeOfDay (int hourOfDay, int minute, int second, int millis)"}, "setWeekDate(int,int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setWeekDate_E@", "@B_java#util#Calendar#isWeekDateSupported_E@"], "Permissions": [], "Description": "Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week. If the specified calendar doesn't support week dates, the @B_java#util#Calendar#Builder#build_E@ method will throw an @B_java#lang#IllegalArgumentException_E@.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "set(int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: an index to the Calendar fields"], ["int", "int: the field value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if field is invalid"], ["@B_java#lang#IllegalStateException_E@", "if the instant value has already been set, or if fields have been set too many (approximately @B_java#lang#Integer#MAX_VALUE_E@) times."]], "SeeAlso": ["@B_java#util#Calendar#set_E@"], "Permissions": [], "Description": "Sets the field parameter to the given value. field is an index to the @B_java#util#Calendar#fields_E@, such as @B_java#util#Calendar#DAY_OF_MONTH_E@. Field value validation is not performed in this method. Any out of range values are either normalized in lenient mode or detected as an invalid value in non-lenient mode when building a Calendar.", "history": "Added in API level 26", "FullName": "public Calendar.Builder set (int field, int value)"}, "setWeekDefinition(int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the first day of a week; one of @B_java#util#Calendar#SUNDAY_E@ to @B_java#util#Calendar#SATURDAY_E@"], ["int", "int: the minimal number of days in the first week (1..7)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if firstDayOfWeek or minimalDaysInFirstWeek is invalid"]], "SeeAlso": ["@B_java#util#Calendar#getFirstDayOfWeek_E@", "@B_java#util#Calendar#getMinimalDaysInFirstWeek_E@"], "Permissions": [], "Description": "Sets the week definition parameters to the values given by firstDayOfWeek and minimalDaysInFirstWeek that are used to determine the", "history": "added in API level 26", "FullName": "public Calendar.Builder setWeekDefinition (int firstDayOfWeek, int minimalDaysInFirstWeek)"}, "Calendar.Builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Calendar.Builder.", "history": "Added in API level 26", "FullName": "public Calendar.Builder ()"}, "setWeekDate(int, int, int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the week year"], ["int", "int: the week number based on weekYear"], ["int", "int: the day of week value: one of the constants for the @B_java#util#Calendar#DAY_OF_WEEK_E@ field: @B_java#util#Calendar#SUNDAY_E@, ..., @B_java#util#Calendar#SATURDAY_E@."]], "Throws": [], "SeeAlso": ["@B_java#util#Calendar#setWeekDate_E@", "@B_java#util#Calendar#isWeekDateSupported_E@"], "Permissions": [], "Description": "Sets the week-based date parameters to the values with the given date specifiers - week year, week of year, and day of week. If the specified calendar doesn't support week dates, the @B_java#util#Calendar#Builder#build_E@ method will throw an @B_java#lang#IllegalArgumentException_E@.", "history": "added in API level 26", "FullName": "public Calendar.Builder setWeekDate (int weekYear, int weekOfYear, int dayOfWeek)"}, "setTimeOfDay(int,int,int,int)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["int", "int: the @B_java#util#Calendar#HOUR_OF_DAY_E@ value (24-hour clock)"], ["int", "int: the @B_java#util#Calendar#MINUTE_E@ value"], ["int", "int: the @B_java#util#Calendar#SECOND_E@ value"], ["int", "int: the @B_java#util#Calendar#MILLISECOND_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time of day field parameters to the values given by hourOfDay, minute, second, and millis. This method is equivalent to a call to:", "history": "Added in API level 26", "FullName": "public Calendar.Builder setTimeOfDay (int hourOfDay, int minute, int second, int millis)"}, "setCalendarType(java.lang.String)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["@B_java#lang#String_E@", "String: the calendar type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if type is null"], ["@B_java#lang#IllegalArgumentException_E@", "if type is unknown"], ["@B_java#lang#IllegalStateException_E@", "if another calendar type has already been set"]], "SeeAlso": ["@B_java#util#Calendar#getCalendarType_E@", "@B_java#util#Calendar#getAvailableCalendarTypes_E@"], "Permissions": [], "Description": "Sets the calendar type parameter to the given type. The calendar type given by this method has precedence over any explicit or implicit calendar type given by the In addition to the available calendar types returned by the @B_java#util#Calendar#getAvailableCalendarTypes_E@ method, \"gregorian\" and \"iso8601\" as aliases of \"gregory\" can be used with this method.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setCalendarType (String type)"}, "build()": {"Returns": [["@B_java#util#Calendar_E@", "a Calendar built with parameters of this Calendar.Builder"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the calendar type is unknown, or if any invalid field values are given in non-lenient mode, or if a week date is given for the calendar type that doesn't support week dates."]], "SeeAlso": ["@B_java#util#Calendar#getInstance_E@", "@B_java#util#Locale#getDefault_E@", "@B_java#util#TimeZone#getDefault_E@"], "Permissions": [], "Description": "Returns a Calendar built from the parameters set by the setter methods. The calendar type given by the @B_java#util#Calendar#Builder#setCalendarType_E@ method or the Calendar to be created. If no explicit calendar type is given, the locale's default calendar is created. If the calendar type is \"iso8601\", the @B_java#util#GregorianCalendar_E@ is set to Date(Long.MIN_VALUE) to be the proleptic Gregorian calendar. Its week definition parameters are also set to be @B_java#util#GregorianCalendar#getCalendarType_E@ method of a GregorianCalendar created with \"iso8601\" returns \"gregory\". The default values are used for locale and time zone if these parameters haven't been given explicitly. Any out of range field values are either normalized in lenient mode or detected as an invalid value in non-lenient mode.", "history": "Added in API level 26", "FullName": "public Calendar build ()"}, "setLocale(java.util.Locale)": {"Returns": [["@B_java#util#Calendar#Builder_E@", "this Calendar.Builder"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the @B_java#util#Locale_E@"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": ["@B_java#util#Calendar#getInstance_E@"], "Permissions": [], "Description": "Sets the locale parameter to the given locale. If no locale is given to this Calendar.Builder, the @B_java#util#Locale#Category#FORMAT_E@ will be used. If no calendar type is explicitly given by a call to the @B_java#util#Calendar#Builder#setCalendarType_E@ method, the Locale value is used to determine what type of Calendar to be built. If no week definition parameters are explicitly given by a call to the @B_java#util#Calendar#Builder#setWeekDefinition_E@ method, the Locale's default values are used.", "history": "Added in API level 26", "FullName": "public Calendar.Builder setLocale (Locale locale)"}}, "Inheritance": [], "ClassName": "java.util.Calendar.Builder", "ClassDesc": "Calendar.Builder is used for creating a Calendar from various date-time parameters. There are two ways to set a Calendar to a date-time value. One is to set the instant parameter to a millisecond offset from the @B_java#util#Calendar#YEAR_E@, to their desired values. These two ways can't be mixed. Trying to set both the instant and individual fields will cause an @B_java#lang#IllegalStateException_E@ to be thrown. However, it is permitted to override previous values of the instant or field parameters. If no enough field parameters are given for determining date and/or time, calendar specific default values are used when building a Calendar. For example, if the @B_java#util#Calendar#YEAR_E@ value isn't given for the Gregorian calendar, 1970 will be used. If there are any conflicts among field parameters, the In addition to the date-time parameters, the The following are sample usages. Sample code assumes that the Calendar constants are statically imported. The following code produces a Calendar with date 2012-12-31 (Gregorian) because Monday is the first day of a week with the The following code produces a Japanese Calendar with date 1989-01-08 (Gregorian), assuming that the default @B_java#util#Calendar#ERA_E@ is Heisei that started on that day."}