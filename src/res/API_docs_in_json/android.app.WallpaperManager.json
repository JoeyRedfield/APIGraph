{"Functions": {"isWallpaperSupported()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether wallpapers are supported for the calling user. If this function returns false, any attempts to changing the wallpaper will have no effect, and any attempt to obtain of the wallpaper will return null.", "history": "Added in API level 23", "FullName": "public boolean isWallpaperSupported ()"}, "setWallpaperOffsets(android.os.IBinder,float,float)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The window who these offsets should be associated with, as returned by @B_android#view#View#getWindowToken_E@."], ["float", "float: The offset along the X dimension, from 0 to 1."], ["float", "float: The offset along the Y dimension, from 0 to 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the display position of the current wallpaper within any larger space, when that wallpaper is visible behind the given window. The X and Y offsets are floating point numbers ranging from 0 to 1, representing where the wallpaper should be positioned within the screen space. These only make sense when the wallpaper is larger than the display.", "history": "Added in API level 5", "FullName": "public void setWallpaperOffsets (IBinder windowToken, float xOffset, float yOffset)"}, "forgetLoadedWallpaper()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all internal references to the last loaded wallpaper. Useful for apps that want to reduce memory usage when they only temporarily need to have the wallpaper. After calling, the next request for the wallpaper will require reloading it again from disk.", "history": "Added in API level 14", "FullName": "public void forgetLoadedWallpaper ()"}, "getDesiredMinimumHeight()": {"Returns": [["int", "The desired minimum height for the wallpaper. This value should be honored by applications that set the wallpaper but it is not mandatory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired minimum height for the wallpaper. Callers of @B_android#app#WallpaperManager#setBitmap_E@ or @B_android#app#WallpaperManager#setStream_E@ should check this value beforehand to make sure the supplied wallpaper respects the desired minimum height. If the returned value is <= 0, the caller should use the height of the default display instead.", "history": "Added in API level 5", "FullName": "public int getDesiredMinimumHeight ()"}, "getInstance(android.content.Context)": {"Returns": [["@B_android#app#WallpaperManager_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a WallpaperManager associated with the given Context.", "history": "Added in API level 5", "FullName": "public static WallpaperManager getInstance (Context context)"}, "getBuiltInDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a drawable for the built-in static system wallpaper.", "history": "Added in API level 19", "FullName": "public Drawable getBuiltInDrawable ()"}, "getFastDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable object that will draw the wallpaper."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "Like @B_android#app#WallpaperManager#getDrawable_E@, but the returned Drawable has a number of limitations to reduce its overhead as much as possible. It will never scale the wallpaper (only centering it if the requested bounds do match the bitmap bounds, which should not be typical), doesn't allow setting an alpha, color filter, or other attributes, etc. The bounds of the returned drawable will be initialized to the same bounds as the wallpaper, so normally you will not need to touch it. The drawable also assumes that it will be used in a context running in the same density as the screen (not in density compatibility mode). Requires @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@", "history": "Added in API level 5", "FullName": "public Drawable getFastDrawable ()"}, "setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: A bitmap that will supply the wallpaper imagery."], ["@B_android#graphics#Rect_E@", "Rect: The rectangular subregion of fullImage that should be displayed as wallpaper. Passing null for this parameter means that the full image should be displayed if possible given the image's and device's aspect ratios, etc."], ["boolean", "boolean: true if the OS is permitted to back up this wallpaper image for restore to a future device; false otherwise."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs when attempting to set the wallpaper to the provided image."], ["@B_java#lang#IllegalArgumentException_E@", "If the visibleCropHint rectangle is empty or invalid."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Change the current system wallpaper to a bitmap, specifying a hint about which subrectangle of the full image is to be visible. The OS will then try to best present the given portion of the full image as the static system wallpaper image. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. Passing null as the visibleHint parameter is equivalent to passing (0, 0, fullImage.getWidth(), fullImage.getHeight()). This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public int setBitmap (Bitmap fullImage, Rect visibleCropHint, boolean allowBackup)"}, "suggestDesiredDimensions(int,int)": {"Returns": [], "Parameters": [["int", "int: Desired minimum width"], ["int", "int: Desired minimum height"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@"], "Description": "For use only by the current home application, to specify the size of wallpaper it would like to use. This allows such applications to have a virtual wallpaper that is larger than the physical screen, matching the size of their workspace. Note developers, who don't seem to be reading this. This is for home apps to tell what size wallpaper they would like. Nobody else should be calling this! Certainly not other non-home apps that change the wallpaper. Those apps are supposed to This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@.", "history": "Added in API level 5", "FullName": "public void suggestDesiredDimensions (int minimumWidth, int minimumHeight)"}, "setWallpaperOffsetSteps(float, float)": {"Returns": [], "Parameters": [["float", "float: The X offset delta from one screen to the next one"], ["float", "float: The Y offset delta from one screen to the next one"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For applications that use multiple virtual screens showing a wallpaper, specify the step size between virtual screens. For example, if the launcher has 3 virtual screens, it would specify an xStep of 0.5, since the X offset for those screens are 0.0, 0.5 and 1.0", "history": "added in API level 7", "FullName": "public void setWallpaperOffsetSteps (float xStep, float yStep)"}, "getWallpaperInfo()": {"Returns": [["@B_android#app#WallpaperInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the information about the wallpaper if the current wallpaper is a live wallpaper component. Otherwise, if the wallpaper is a static image, this returns null.", "history": "Added in API level 7", "FullName": "public WallpaperInfo getWallpaperInfo ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an error occurs reverting to the built-in wallpaper."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Remove any currently set system wallpaper, reverting to the system's built-in wallpaper. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 5", "FullName": "public void clear ()"}, "peekFastDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns an optimized Drawable object that will draw the wallpaper or a null pointer if these is none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "Like @B_android#app#WallpaperManager#getFastDrawable_E@, but if there is no wallpaper set, a null pointer is returned. Requires @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@", "history": "Added in API level 5", "FullName": "public Drawable peekFastDrawable ()"}, "setBitmap(android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap to be used as the new system wallpaper."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs when attempting to set the wallpaper to the provided image."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Change the current system wallpaper to a bitmap. The given bitmap is converted to a PNG and stored as the wallpaper. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. This method is equivalent to calling @B_android#app#WallpaperManager#setBitmap_E@ and passing null for the visibleCrop rectangle and true for the allowBackup parameter. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 5", "FullName": "public void setBitmap (Bitmap bitmap)"}, "addOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#app#WallpaperManager#OnColorsChangedListener_E@", "WallpaperManager.OnColorsChangedListener: A listener to register This value must never be null."], ["@B_android#os#Handler_E@", "Handler: Where to call it from. Will be called from the main thread if null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to get notified when the wallpaper colors change.", "history": "Added in API level 27", "FullName": "public void addOnColorsChangedListener (WallpaperManager.OnColorsChangedListener listener, Handler handler)"}, "hasResourceWallpaper(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether any users are currently set to use the wallpaper with the given resource ID. That is, their wallpaper has been set through @B_android#app#WallpaperManager#setResource_E@ with the same resource id.", "history": "Added in API level 17", "FullName": "public boolean hasResourceWallpaper (int resid)"}, "setResource(int,int)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["int", "int: The resource ID of the bitmap to be used as the wallpaper image"], ["int", "int: Flags indicating which wallpaper(s) to configure with the new imagery Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#app#WallpaperManager_E@"], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Version of @B_android#app#WallpaperManager#setResource_E@ that allows the caller to specify which of the supported wallpaper categories to set. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public int setResource (int resid, int which)"}, "isSetWallpaperAllowed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#UserManager_E@"], "Permissions": [], "Description": "Returns whether the calling package is allowed to set the wallpaper for the calling user. If this function returns false, any attempts to change the wallpaper will have no effect. Always returns true for device owner and profile owner.", "history": "Added in API level 24", "FullName": "public boolean isSetWallpaperAllowed ()"}, "getWallpaperFile(int)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "An open, readable file desriptor to the requested wallpaper image file; or null if no such wallpaper is configured or if the calling app does not have permission to read the current wallpaper."]], "Parameters": [["int", "int: The wallpaper whose image file is to be retrieved. Must be a single defined kind of wallpaper, either @B_android#app#WallpaperManager#FLAG_SYSTEM_E@ or @B_android#app#WallpaperManager#FLAG_LOCK_E@. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [], "SeeAlso": ["@B_android#app#WallpaperManager_E@"], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "Get an open, readable file descriptor to the given wallpaper image file. The caller is responsible for closing the file descriptor when done ingesting the file. If no lock-specific wallpaper has been configured for the given user, then this method will return null when requesting @B_android#app#WallpaperManager#FLAG_LOCK_E@ rather than returning the system wallpaper's image file. Requires @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@", "history": "Added in API level 24", "FullName": "public ParcelFileDescriptor getWallpaperFile (int which)"}, "removeOnColorsChangedListener(android.app.WallpaperManager.OnColorsChangedListener)": {"Returns": [], "Parameters": [["@B_android#app#WallpaperManager#OnColorsChangedListener_E@", "WallpaperManager.OnColorsChangedListener: A callback to unsubscribe. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop listening to color updates.", "history": "Added in API level 27", "FullName": "public void removeOnColorsChangedListener (WallpaperManager.OnColorsChangedListener callback)"}, "setStream(java.io.InputStream,android.graphics.Rect,boolean)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A stream containing the raw data to install as a wallpaper. This data can be in any format handled by @B_android#graphics#BitmapRegionDecoder_E@."], ["@B_android#graphics#Rect_E@", "Rect: The rectangular subregion of the streamed image that should be displayed as wallpaper. Passing null for this parameter means that the full image should be displayed if possible given the image's and device's aspect ratios, etc."], ["boolean", "boolean: true if the OS is permitted to back up this wallpaper image for restore to a future device; false otherwise."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs when attempting to set the wallpaper based on the provided image data."], ["@B_java#lang#IllegalArgumentException_E@", "If the visibleCropHint rectangle is empty or invalid."]], "SeeAlso": ["@B_android#app#WallpaperManager#getWallpaperId_E@"], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Change the current system wallpaper to a specific byte stream, specifying a hint about which subrectangle of the full image is to be visible. The OS will then try to best present the given portion of the full image as the static system wallpaper image. The data from the given InputStream is copied into persistent storage and will then be used as the system wallpaper. Currently the data must be either a JPEG or PNG image. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public int setStream (InputStream bitmapData, Rect visibleCropHint, boolean allowBackup)"}, "setResource(int)": {"Returns": [], "Parameters": [["int", "int: The resource ID of the bitmap to be used as the wallpaper image"]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs reverting to the built-in wallpaper."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Change the current system wallpaper to the bitmap in the given resource. The resource is opened as a raw data stream and copied into the wallpaper; it must be a valid PNG or JPEG image. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 5", "FullName": "public void setResource (int resid)"}, "getBuiltInDrawable(int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A Drawable presenting the specified wallpaper image, or null if no built-in default image for that wallpaper type exists."]], "Parameters": [["int", "int: The FLAG_* identifier of a valid wallpaper type. Throws IllegalArgumentException if an invalid wallpaper is requested. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a drawable for the specified built-in static system wallpaper.", "history": "Added in API level 24", "FullName": "public Drawable getBuiltInDrawable (int which)"}, "setDisplayPadding(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The number of pixels the wallpaper should extend beyond the display, on its left, top, right, and bottom sides."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@"], "Description": "Specify extra padding that the wallpaper should have outside of the display. That is, the given padding supplies additional pixels the wallpaper should extend outside of the display itself. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@", "history": "Added in API level 28", "FullName": "public void setDisplayPadding (Rect padding)"}, "getBuiltInDrawable(int,int,boolean,float,float)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A Drawable presenting the built-in default system wallpaper image, or null if no such default image is defined on this device."]], "Parameters": [["int", "int: The width of the returned drawable"], ["int", "int no parameter comment"], ["boolean", "boolean: If true, scale the wallpaper down rather than just cropping it"], ["float", "float: A float value between 0 and 1 specifying where to crop the image; 0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned"], ["float", "float: A float value between 0 and 1 specifying where to crop the image; 0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a drawable for the system built-in static wallpaper. Based on the parameters, the drawable can be cropped and scaled", "history": "Added in API level 19", "FullName": "public Drawable getBuiltInDrawable (int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment)"}, "setWallpaperOffsetSteps(float,float)": {"Returns": [], "Parameters": [["float", "float: The X offset delta from one screen to the next one"], ["float", "float: The Y offset delta from one screen to the next one"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For applications that use multiple virtual screens showing a wallpaper, specify the step size between virtual screens. For example, if the launcher has 3 virtual screens, it would specify an xStep of 0.5, since the X offset for those screens are 0.0, 0.5 and 1.0", "history": "Added in API level 7", "FullName": "public void setWallpaperOffsetSteps (float xStep, float yStep)"}, "clearWallpaper()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Reset all wallpaper to the factory default. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 28", "FullName": "public void clearWallpaper ()"}, "peekDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable object that will draw the wallpaper or a null pointer if these is none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current system wallpaper; if there is no wallpaper set, a null pointer is returned. This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set.", "history": "Added in API level 5", "FullName": "public Drawable peekDrawable ()"}, "getDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable object that will draw the system wallpaper, or null if no system wallpaper exists or if the calling application is not able to access the wallpaper."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current system wallpaper; if no wallpaper is set, the system built-in static wallpaper is returned. This is returned as an abstract Drawable that you can install in a View to display whatever wallpaper the user has currently set. This method can return null if there is no system wallpaper available, if wallpapers are not supported in the current user, or if the calling app is not permitted to access the system wallpaper.", "history": "Added in API level 5", "FullName": "public Drawable getDrawable ()"}, "getCropAndSetWallpaperIntent(android.net.Uri)": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The image URI that will be set in the intent. The must be a content URI and its provider must resolve its type to \"image/*\""]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the URI is not a content URI or its MIME type is not \"image/*\""]], "SeeAlso": [], "Permissions": [], "Description": "Gets an Intent that will launch an activity that crops the given image and sets the device's wallpaper. If there is a default HOME activity that supports cropping wallpapers, it will be preferred as the default. Use this method instead of directly creating a @B_android#app#WallpaperManager#ACTION_CROP_AND_SET_WALLPAPER_E@ intent.", "history": "Added in API level 19", "FullName": "public Intent getCropAndSetWallpaperIntent (Uri imageUri)"}, "setBitmap(android.graphics.Bitmap,android.graphics.Rect,boolean,int)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: A bitmap that will supply the wallpaper imagery."], ["@B_android#graphics#Rect_E@", "Rect: The rectangular subregion of fullImage that should be displayed as wallpaper. Passing null for this parameter means that the full image should be displayed if possible given the image's and device's aspect ratios, etc."], ["boolean", "boolean: true if the OS is permitted to back up this wallpaper image for restore to a future device; false otherwise."], ["int", "int: Flags indicating which wallpaper(s) to configure with the new imagery. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#app#WallpaperManager_E@"], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Version of @B_android#app#WallpaperManager#setBitmap_E@ that allows the caller to specify which of the supported wallpaper categories to set. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public int setBitmap (Bitmap fullImage, Rect visibleCropHint, boolean allowBackup, int which)"}, "getWallpaperColors(int)": {"Returns": [["@B_android#app#WallpaperColors_E@", "Current @B_android#app#WallpaperColors_E@ or null if colors are unknown."]], "Parameters": [["int", "int: Wallpaper type. Must be either @B_android#app#WallpaperManager#FLAG_SYSTEM_E@ or @B_android#app#WallpaperManager#FLAG_LOCK_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#WallpaperManager#addOnColorsChangedListener_E@"], "Permissions": [], "Description": "Get the primary colors of a wallpaper. This method can return null when: Colors are still being processed by the system. The user has chosen to use a live wallpaper: live wallpapers might not implement @B_android#service#wallpaper#WallpaperService#Engine#onComputeColors_E@.", "history": "Added in API level 27", "FullName": "public WallpaperColors getWallpaperColors (int which)"}, "setStream(java.io.InputStream,android.graphics.Rect,boolean,int)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A stream containing the raw data to install as a wallpaper. This data can be in any format handled by @B_android#graphics#BitmapRegionDecoder_E@."], ["@B_android#graphics#Rect_E@", "Rect: The rectangular subregion of the streamed image that should be displayed as wallpaper. Passing null for this parameter means that the full image should be displayed if possible given the image's and device's aspect ratios, etc."], ["boolean", "boolean: true if the OS is permitted to back up this wallpaper image for restore to a future device; false otherwise."], ["int", "int: Flags indicating which wallpaper(s) to configure with the new imagery. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#app#WallpaperManager#getWallpaperId_E@", "@B_android#app#WallpaperManager_E@"], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Version of @B_android#app#WallpaperManager#setStream_E@ that allows the caller to specify which of the supported wallpaper categories to set. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public int setStream (InputStream bitmapData, Rect visibleCropHint, boolean allowBackup, int which)"}, "getWallpaperId(int)": {"Returns": [["int", "The positive numeric ID of the current wallpaper of the given kind, or a negative value if no such wallpaper is configured."]], "Parameters": [["int", "int: The wallpaper whose ID is to be returned. Must be a single defined kind of wallpaper, either @B_android#app#WallpaperManager#FLAG_SYSTEM_E@ or @B_android#app#WallpaperManager#FLAG_LOCK_E@. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ID of the current wallpaper of the given kind. If there is no such wallpaper configured, returns a negative number. Every time the wallpaper image is set, a new ID is assigned to it. This method allows the caller to determine whether the wallpaper imagery has changed, regardless of how that change happened.", "history": "Added in API level 24", "FullName": "public int getWallpaperId (int which)"}, "setStream(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: A stream containing the raw data to install as a wallpaper. This data can be in any format handled by @B_android#graphics#BitmapRegionDecoder_E@."]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs when attempting to set the wallpaper based on the provided image data."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Change the current system wallpaper to a specific byte stream. The give InputStream is copied into persistent storage and will now be used as the wallpaper. Currently it must be either a JPEG or PNG image. On success, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ is broadcast. This method is equivalent to calling @B_android#app#WallpaperManager#setStream_E@ and passing null for the visibleCrop rectangle and true for the allowBackup parameter. This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_E@. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 5", "FullName": "public void setStream (InputStream bitmapData)"}, "getDesiredMinimumWidth()": {"Returns": [["int", "The desired minimum width for the wallpaper. This value should be honored by applications that set the wallpaper but it is not mandatory."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired minimum width for the wallpaper. Callers of @B_android#app#WallpaperManager#setBitmap_E@ or @B_android#app#WallpaperManager#setStream_E@ should check this value beforehand to make sure the supplied wallpaper respects the desired minimum width. If the returned value is <= 0, the caller should use the width of the default display instead.", "history": "Added in API level 5", "FullName": "public int getDesiredMinimumWidth ()"}, "getBuiltInDrawable(int,int,boolean,float,float,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A Drawable presenting the built-in default wallpaper image of the given type, or null if no default image of that type is defined on this device."]], "Parameters": [["int", "int: The width of the returned drawable"], ["int", "int no parameter comment"], ["boolean", "boolean: If true, scale the wallpaper down rather than just cropping it"], ["float", "float: A float value between 0 and 1 specifying where to crop the image; 0 for left-aligned, 0.5 for horizontal center-aligned, and 1 for right-aligned"], ["float", "float: A float value between 0 and 1 specifying where to crop the image; 0 for top-aligned, 0.5 for vertical center-aligned, and 1 for bottom-aligned"], ["int", "int: The FLAG_* identifier of a valid wallpaper type. Throws IllegalArgumentException if an invalid wallpaper is requested. Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a drawable for the built-in static wallpaper of the specified type. Based on the parameters, the drawable can be cropped and scaled.", "history": "Added in API level 24", "FullName": "public Drawable getBuiltInDrawable (int outWidth, int outHeight, boolean scaleToFit, float horizontalAlignment, float verticalAlignment, int which)"}, "clearWallpaperOffsets(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The window who these offsets should be associated with, as returned by @B_android#view#View#getWindowToken_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the offsets previously associated with this window through @B_android#app#WallpaperManager#setWallpaperOffsets_E@. This reverts the window to its default state, where it does not cause the wallpaper to scroll from whatever its last offsets were.", "history": "Added in API level 5", "FullName": "public void clearWallpaperOffsets (IBinder windowToken)"}, "setResource(int, int)": {"Returns": [["int", "An integer ID assigned to the newly active wallpaper; or zero on failure."]], "Parameters": [["int", "int: The resource ID of the bitmap to be used as the wallpaper image"], ["int", "int: Flags indicating which wallpaper(s) to configure with the new imageryValue is either 0 or combination of FLAG_SYSTEM or FLAG_LOCK."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#app#WallpaperManager_E@"], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Version of @B_android#app#WallpaperManager#setResource_E@ that allows the caller to specify which of the supported wallpaper categories to set.Requires the @B_android#Manifest#permission#SET_WALLPAPER_E@ permission.", "history": "added in API level 24", "FullName": "public int setResource (int resid, int which)"}, "suggestDesiredDimensions(int, int)": {"Returns": [], "Parameters": [["int", "int: Desired minimum width"], ["int", "int: Desired minimum height"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@"], "Description": "For use only by the current home application, to specify the size of wallpaper it would like to use. This allows such applications to have a virtual wallpaper that is larger than the physical screen, matching the size of their workspace. Note developers, who don't seem to be reading this. This is for home apps to tell what size wallpaper they would like. Nobody else should be calling this! Certainly not other non-home apps that change the wallpaper. Those apps are supposed to This method requires the caller to hold the permission @B_android#Manifest#permission#SET_WALLPAPER_HINTS_E@.", "history": "added in API level 5", "FullName": "public void suggestDesiredDimensions (int minimumWidth, int minimumHeight)"}, "sendWallpaperCommand(android.os.IBinder,java.lang.String,int,int,int,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: The window who these offsets should be associated with, as returned by @B_android#view#View#getWindowToken_E@."], ["@B_java#lang#String_E@", "String: Name of the command to perform. This must be a scoped name to avoid collisions, such as \"com.mycompany.wallpaper.DOIT\"."], ["int", "int: Arbitrary integer argument based on command."], ["int", "int: Arbitrary integer argument based on command."], ["int", "int: Arbitrary integer argument based on command."], ["@B_android#os#Bundle_E@", "Bundle: Optional additional information for the command, or null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send an arbitrary command to the current active wallpaper.", "history": "Added in API level 7", "FullName": "public void sendWallpaperCommand (IBinder windowToken, String action, int x, int y, int z, Bundle extras)"}, "clear(int)": {"Returns": [], "Parameters": [["int", "int: A bitwise combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@ or @B_android#app#WallpaperManager#FLAG_LOCK_E@ Value is either 0 or a combination of @B_android#app#WallpaperManager#FLAG_SYSTEM_E@, and @B_android#app#WallpaperManager#FLAG_LOCK_E@"]], "Throws": [["@B_java#io#IOException_E@", "If an error occurs reverting to the built-in wallpaper."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#SET_WALLPAPER_E@"], "Description": "Remove one or more currently set wallpapers, reverting to the system default display for each one. If @B_android#app#WallpaperManager#FLAG_SYSTEM_E@ is set in the which parameter, the intent @B_android#content#Intent#ACTION_WALLPAPER_CHANGED_E@ will be broadcast upon success. Requires @B_android#Manifest#permission#SET_WALLPAPER_E@", "history": "Added in API level 24", "FullName": "public void clear (int which)"}}, "Inheritance": [], "ClassName": "android.app.WallpaperManager", "ClassDesc": "Provides access to the system wallpaper. With WallpaperManager, you can get the current wallpaper, get the desired dimensions for the wallpaper, set the wallpaper, and more. An app can check whether wallpapers are supported for the current user, by calling @B_android#app#WallpaperManager#isWallpaperSupported_E@, and whether setting of wallpapers is allowed, by calling @B_android#app#WallpaperManager#isSetWallpaperAllowed_E@."}