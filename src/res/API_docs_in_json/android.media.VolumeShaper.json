{"Functions": {"apply(android.media.VolumeShaper.Operation)": {"Returns": [], "Parameters": [["@B_android#media#VolumeShaper#Operation_E@", "VolumeShaper.Operation: the operation to apply. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the player is uninitialized or if there is a critical failure. In that case, the VolumeShaper should be recreated."]], "SeeAlso": [], "Permissions": [], "Description": "Applies the @B_android#media#VolumeShaper#Operation_E@ to the VolumeShaper. Applying @B_android#media#VolumeShaper#Operation#PLAY_E@ after PLAY or @B_android#media#VolumeShaper#Operation#REVERSE_E@ after REVERSE has no effect. Applying @B_android#media#VolumeShaper#Operation#PLAY_E@ when the player hasn't started will synchronously start the VolumeShaper when playback begins.", "history": "Added in API level 26", "FullName": "public void apply (VolumeShaper.Operation operation)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the VolumeShaper object; any volume scale due to the VolumeShaper is removed after closing. If the volume does not reach 1.f when the VolumeShaper is closed (or finalized), there may be an abrupt change of volume. close() may be safely called after a prior close(). This class implements the Java AutoClosable interface and may be used with try-with-resources.", "history": "Added in API level 26", "FullName": "public void close ()"}, "getVolume()": {"Returns": [["float", "the volume, linearly represented as a value between 0.f and 1.f."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the player is uninitialized or if there is a critical failure. In that case, the VolumeShaper should be recreated."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current volume scale attributable to the VolumeShaper. This is the last volume from the VolumeShaper used for the player, or the initial volume if the VolumeShaper hasn't been started with @B_android#media#VolumeShaper#Operation#PLAY_E@.", "history": "Added in API level 26", "FullName": "public float getVolume ()"}, "replace(android.media.VolumeShaper.Configuration,android.media.VolumeShaper.Operation,boolean)": {"Returns": [], "Parameters": [["@B_android#media#VolumeShaper#Configuration_E@", "VolumeShaper.Configuration: the new configuration to use. This value must never be null."], ["@B_android#media#VolumeShaper#Operation_E@", "VolumeShaper.Operation: the operation to apply to the VolumeShaper This value must never be null."], ["boolean", "boolean: if true, match the start volume of the new configuration to the current volume of the existing VolumeShaper, to avoid discontinuity."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the player is uninitialized or if there is a critical failure. In that case, the VolumeShaper should be recreated."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the current VolumeShaper configuration with a new configuration. This allows the user to change the volume shape while the existing VolumeShaper is in effect. The effect of replace() is similar to an atomic close of the existing VolumeShaper and creation of a new VolumeShaper. If the operation is @B_android#media#VolumeShaper#Operation#PLAY_E@ then the new curve starts immediately. If the operation is @B_android#media#VolumeShaper#Operation#REVERSE_E@, then the new curve will be delayed until PLAY is applied.", "history": "Added in API level 26", "FullName": "public void replace (VolumeShaper.Configuration configuration, VolumeShaper.Operation operation, boolean join)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 26", "FullName": "protected void finalize ()"}}, "Inheritance": [], "ClassName": "android.media.VolumeShaper", "ClassDesc": "The VolumeShaper class is used to automatically control audio volume during media playback, allowing simple implementation of transition effects and ducking. It is created from implementations of VolumeAutomation, such as MediaPlayer and AudioTrack (referred to as \"players\" below), by @B_android#media#MediaPlayer#createVolumeShaper_E@ or @B_android#media#AudioTrack#createVolumeShaper_E@. A VolumeShaper is intended for short volume changes. If the audio output sink changes during a VolumeShaper transition, the precise curve position may be lost, and the VolumeShaper may advance to the end of the curve for the new audio output sink. The VolumeShaper appears as an additional scaling on the audio output, and adjusts independently of track or stream volume controls."}