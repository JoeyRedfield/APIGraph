{"Functions": {"chooseClientKeyIdentity(java.lang.String, javax.net.ssl.SSLEngine)": {"Returns": [["@B_java#lang#String_E@", "PSK identity to provide to the server. null is permitted but will be converted into an empty string."]], "Parameters": [["@B_java#lang#String_E@", "String: identity hint provided by the server or null if none provided."], ["@B_javax#net#ssl#SSLEngine_E@", "SSLEngine no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK identity to report to the server to help agree on the PSK for the provided engine. The default implementation returns an empty string.", "history": "Added in API level 21", "FullName": "String chooseClientKeyIdentity (String identityHint, SSLEngine engine)"}, "chooseServerKeyIdentityHint(javax.net.ssl.SSLEngine)": {"Returns": [["@B_java#lang#String_E@", "PSK identity hint to be provided to the client or null to provide no hint."]], "Parameters": [["@B_javax#net#ssl#SSLEngine_E@", "SSLEngine no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK identity hint to report to the client to help agree on the PSK for the provided engine. The default implementation returns null.", "history": "Added in API level 21", "FullName": "String chooseServerKeyIdentityHint (SSLEngine engine)"}, "getKey(java.lang.String, java.lang.String, java.net.Socket)": {"Returns": [["@B_javax#crypto#SecretKey_E@", "key or null to signal to peer that no suitable key is available and to abort the handshake."]], "Parameters": [["@B_java#lang#String_E@", "String: identity hint provided by the server to help select the key or null if none provided."], ["@B_java#lang#String_E@", "String: identity provided by the client to help select the key."], ["@B_java#net#Socket_E@", "Socket no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK to use for the provided socket. The default implementation returns null.", "history": "Added in API level 21", "FullName": "SecretKey getKey (String identityHint, String identity, Socket socket)"}, "chooseServerKeyIdentityHint(java.net.Socket)": {"Returns": [["@B_java#lang#String_E@", "PSK identity hint to be provided to the client or null to provide no hint."]], "Parameters": [["@B_java#net#Socket_E@", "Socket no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK identity hint to report to the client to help agree on the PSK for the provided socket. The default implementation returns null.", "history": "Added in API level 21", "FullName": "String chooseServerKeyIdentityHint (Socket socket)"}, "PskKeyManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "PskKeyManager ()"}, "chooseClientKeyIdentity(java.lang.String, java.net.Socket)": {"Returns": [["@B_java#lang#String_E@", "PSK identity to provide to the server. null is permitted but will be converted into an empty string."]], "Parameters": [["@B_java#lang#String_E@", "String: identity hint provided by the server or null if none provided."], ["@B_java#net#Socket_E@", "Socket no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK identity to report to the server to help agree on the PSK for the provided socket. The default implementation returns an empty string.", "history": "Added in API level 21", "FullName": "String chooseClientKeyIdentity (String identityHint, Socket socket)"}, "getKey(java.lang.String, java.lang.String, javax.net.ssl.SSLEngine)": {"Returns": [["@B_javax#crypto#SecretKey_E@", "key or null to signal to peer that no suitable key is available and to abort the handshake."]], "Parameters": [["@B_java#lang#String_E@", "String: identity hint provided by the server to help select the key or null if none provided."], ["@B_java#lang#String_E@", "String: identity provided by the client to help select the key."], ["@B_javax#net#ssl#SSLEngine_E@", "SSLEngine no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the PSK to use for the provided engine. The default implementation returns null.", "history": "Added in API level 21", "FullName": "SecretKey getKey (String identityHint, String identity, SSLEngine engine)"}}, "Inheritance": [], "ClassName": "android.net.PskKeyManager", "ClassDesc": "Provider of key material for pre-shared key (PSK) key exchange used in TLS-PSK cipher suites. TLS-PSK is a set of TLS/SSL cipher suites which rely on a symmetric pre-shared key (PSK) to secure the TLS/SSL connection and mutually authenticate its peers. These cipher suites may be a more natural fit compared to conventional public key based cipher suites in some scenarios where communication between peers is bootstrapped via a separate step (for example, a pairing step) and requires both peers to authenticate each other. In such scenarios a symmetric key (PSK) can be exchanged during the bootstrapping step, removing the need to generate and exchange public key pairs and X.509 certificates. When a TLS-PSK cipher suite is used, both peers have to use the same key for the TLS/SSL handshake to succeed. Thus, both peers are implicitly authenticated by a successful handshake. This removes the need to use a TrustManager in conjunction with this KeyManager. A peer may have multiple keys to choose from. To help choose the right key, during the handshake the server can provide a PSK identity hint to the client, and the client can provide a PSK identity to the server. The contents of these two pieces of information are specific to application-level protocols. NOTE: Both the PSK identity hint and the PSK identity are transmitted in cleartext. Moreover, these data are received and processed prior to peer having been authenticated. Thus, they must not contain or leak key material or other sensitive information, and should be treated (e.g., parsed) with caution, as untrusted data. The high-level flow leading to peers choosing a key during TLS/SSL handshake is as follows: In the flow above, either peer can signal that they do not have a suitable key, in which case the the handshake will be aborted immediately. This may enable a network attacker who does not know the key to learn which PSK identity hints or PSK identities are supported. If this is a concern then a randomly generated key should be used in the scenario where no key is available. This will lead to the handshake aborting later, due to key mismatch -- same as in the scenario where a key is available -- making it appear to the attacker that all PSK identity hints and PSK identities are supported. The maximum supported sizes are as follows: 256 bytes for keys (see @B_android#net#PskKeyManager#MAX_KEY_LENGTH_BYTES_E@), 128 bytes for PSK identity and PSK identity hint (in modified UTF-8 representation) (see @B_android#net#PskKeyManager#MAX_IDENTITY_LENGTH_BYTES_E@ and @B_android#net#PskKeyManager#MAX_IDENTITY_HINT_LENGTH_BYTES_E@). getKey because the default implementation returns no key, which aborts the handshake. ECDHE_PSK cipher suites in API Level 21 contains a bug which breaks compatibility with other implementations. ECDHE_PSK cipher suites are enabled by default on platforms with API Level 21 when an SSLContext is initialized with a PskKeyManager. A workaround is to disable ECDHE_PSK cipher suites on platforms with API Level 21. SSLContext which enables the use of TLS-PSK in SSLSocket, SSLServerSocket and SSLEngine instances obtained from it."}