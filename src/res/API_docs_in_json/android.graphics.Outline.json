{"Functions": {"setRect(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Outline to the rounded rect defined by the input rect, and corner radius.", "history": "Added in API level 21", "FullName": "public void setRect (int left, int top, int right, int bottom)"}, "set(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: Source outline to copy from. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replace the contents of this Outline with the contents of src.", "history": "Added in API level 21", "FullName": "public void set (Outline src)"}, "setConvexPath(android.graphics.Path)": {"Returns": [], "Parameters": [["@B_android#graphics#Path_E@", "Path: used to construct the Outline. As of @B_android#os#Build#VERSION_CODES#Q_E@, it is no longer required to be convex. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Outline to a @B_android#graphics#Path#isConvex_E@.", "history": "Added in API level 21", "FullName": "public void setConvexPath (Path convexPath)"}, "setRect(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Outline#setRect_E@", "history": "Added in API level 21", "FullName": "public void setRect (Rect rect)"}, "setOval(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Outline#setOval_E@", "history": "Added in API level 21", "FullName": "public void setOval (Rect rect)"}, "setEmpty()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Outline#isEmpty_E@"], "Permissions": [], "Description": "Sets the outline to be empty.", "history": "Added in API level 21", "FullName": "public void setEmpty ()"}, "setRect(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Outline to the rounded rect defined by the input rect, and corner radius.", "history": "added in API level 21", "FullName": "public void setRect (int left, int top, int right, int bottom)"}, "getAlpha()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alpha represented by the Outline.", "history": "Added in API level 21", "FullName": "public float getAlpha ()"}, "getRect(android.graphics.Rect)": {"Returns": [["boolean", "true if outBounds was populated with outline bounds, or false if no outline bounds are set"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the rect to populate with the outline bounds, if set This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates outBounds with the outline bounds, if set, and returns true. If no outline bounds are set, or if a path has been set via @B_android#graphics#Outline#setConvexPath_E@, returns false.", "history": "Added in API level 24", "FullName": "public boolean getRect (Rect outRect)"}, "setOval(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the outline to the oval defined by input rect.", "history": "added in API level 21", "FullName": "public void setOval (int left, int top, int right, int bottom)"}, "offset(int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offsets the Outline by (dx,dy)", "history": "Added in API level 22", "FullName": "public void offset (int dx, int dy)"}, "canClip()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#setClipToOutline_E@"], "Permissions": [], "Description": "Returns whether the outline can be used to clip a View. Currently, only Outlines that can be represented as a rectangle, circle, or round rect support clipping.", "history": "Added in API level 21", "FullName": "public boolean canClip ()"}, "Outline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an Outline with a copy of the data in src.", "history": "Added in API level 21", "FullName": "public Outline (Outline src)"}, "setOval(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the outline to the oval defined by input rect.", "history": "Added in API level 21", "FullName": "public void setOval (int left, int top, int right, int bottom)"}, "setAlpha(float)": {"Returns": [], "Parameters": [["float", "float: Value is between 0.0 and 1.0 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the alpha represented by the Outline - the degree to which the producer is guaranteed to be opaque over the Outline's shape. An alpha value of 0.0f either represents completely transparent content, or content that isn't guaranteed to fill the shape it publishes. Content producing a fully opaque (alpha = 1.0f) outline is assumed by the drawing system to fully cover content beneath it, meaning content beneath may be optimized away.", "history": "Added in API level 21", "FullName": "public void setAlpha (float alpha)"}, "isEmpty()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Outline#setEmpty_E@"], "Permissions": [], "Description": "Returns whether the Outline is empty. Outlines are empty when constructed, or if @B_android#graphics#Outline#setEmpty_E@ is called, until a setter method is called", "history": "Added in API level 21", "FullName": "public boolean isEmpty ()"}, "setRoundRect(android.graphics.Rect, float)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment This value must never be null."], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Outline#setRoundRect_E@", "history": "added in API level 21", "FullName": "public void setRoundRect (Rect rect, float radius)"}, "offset(int, int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offsets the Outline by (dx,dy)", "history": "added in API level 22", "FullName": "public void offset (int dx, int dy)"}, "setRoundRect(int, int, int, int, float)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Outline to the rounded rect defined by the input rect, and corner radius. Passing a zero radius is equivalent to calling @B_android#graphics#Outline#setRect_E@", "history": "added in API level 21", "FullName": "public void setRoundRect (int left, int top, int right, int bottom, float radius)"}, "getRadius()": {"Returns": [["float", "the rounded rect radius, or value < 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rounded rect radius, if set, or a value less than 0 if a path has been set via @B_android#graphics#Outline#setConvexPath_E@. A return value of 0 indicates a non-rounded rect.", "history": "Added in API level 24", "FullName": "public float getRadius ()"}, "Outline()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty Outline. Call one of the setter methods to make the outline valid for use with a View.", "history": "Added in API level 21", "FullName": "public Outline ()"}, "setRoundRect(int,int,int,int,float)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the Outline to the rounded rect defined by the input rect, and corner radius. Passing a zero radius is equivalent to calling @B_android#graphics#Outline#setRect_E@", "history": "Added in API level 21", "FullName": "public void setRoundRect (int left, int top, int right, int bottom, float radius)"}, "setRoundRect(android.graphics.Rect,float)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for @B_android#graphics#Outline#setRoundRect_E@", "history": "Added in API level 21", "FullName": "public void setRoundRect (Rect rect, float radius)"}}, "Inheritance": [], "ClassName": "android.graphics.Outline", "ClassDesc": "Defines a simple shape, used for bounding graphical regions. Can be computed for a View, or computed by a Drawable, to drive the shape of shadows cast by a View, or to clip the contents of the View."}