{"Functions": {"setImportantWhileForeground(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: whether to relax doze restrictions for this job when the app is in the foreground. False by default."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isImportantWhileForeground_E@"], "Permissions": [], "Description": "Setting this to true indicates that this job is important while the scheduling app is in the foreground or on the temporary whitelist for background restrictions. This means that the system will relax doze restrictions on this job during this time. Apps should use this flag only for short jobs that are essential for the app to function properly in the foreground. Note that once the scheduling app is no longer whitelisted from background restrictions and in the background, or the job failed due to unsatisfied constraints, this job should be expected to behave like other jobs without this flag.", "history": "Added in API level 28", "FullName": "public JobInfo.Builder setImportantWhileForeground (boolean importantWhileForeground)"}, "setRequiresDeviceIdle(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Pass true to prevent the job from running while the device is being used interactively."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isRequireDeviceIdle_E@"], "Permissions": [], "Description": "When set true, ensure that this job will not run if the device is in active use. The default state is false: that is, the for the job to be runnable even when someone is interacting with the device. This state is a loose definition provided by the system. In general, it means that the device is not currently being used interactively, and has not been in use for some time. As such, it is a good time to perform resource heavy jobs. Bear in mind that battery usage will still be attributed to your application, and surfaced to the user in battery stats. Despite the similar naming, this job constraint is not related to the system's \"device idle\" or \"doze\" states. This constraint only determines whether a job is allowed to run while the device is directly in use.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setRequiresDeviceIdle (boolean requiresDeviceIdle)"}, "setClipData(android.content.ClipData,int)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ClipData_E@", "ClipData: The new clip to set. May be null to clear the current clip. This value may be null."], ["int", "int: The desired permissions to grant for any URIs. This should be a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, and @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getClipData_E@", "@B_android#app#job#JobInfo#getClipGrantFlags_E@"], "Permissions": [], "Description": "Set a @B_android#content#ClipData_E@ associated with this Job. The main purpose of providing a ClipData is to allow granting of URI permissions for data associated with the clip. The exact kind of permission grant to perform is specified through If the ClipData contains items that are Intents, any grant flags in those Intents will be ignored. Only flags provided as an argument to this method are respected, and will be applied to all Uri or Intent items in the clip (or sub-items of the clip). Because setting this property is not compatible with persisted jobs, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called.", "history": "Added in API level 26", "FullName": "public JobInfo.Builder setClipData (ClipData clip, int grantFlags)"}, "setTriggerContentUpdateDelay(long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Delay after most recent content change, in milliseconds."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getTriggerContentUpdateDelay_E@"], "Permissions": [], "Description": "Set the delay (in milliseconds) from when a content change is detected until the job is scheduled. If there are more changes during that time, the delay will be reset to start at the time of the most recent change.", "history": "Added in API level 24", "FullName": "public JobInfo.Builder setTriggerContentUpdateDelay (long durationMs)"}, "setPrefetch(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isPrefetch_E@"], "Permissions": [], "Description": "Setting this to true indicates that this job is designed to prefetch content that will make a material improvement to the experience of the specific user of this device. For example, fetching top headlines of interest to the current user. The system may use this signal to relax the network constraints you originally requested, such as allowing a @B_android#app#job#JobInfo#NETWORK_TYPE_UNMETERED_E@ job to run over a metered network when there is a surplus of metered data available. The system may also use this signal in combination with end user usage patterns to ensure data is prefetched before the user launches your app.", "history": "Added in API level 28", "FullName": "public JobInfo.Builder setPrefetch (boolean prefetch)"}, "setClipData(android.content.ClipData, int)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ClipData_E@", "ClipData: The new clip to set. May be null to clear the current clip."], ["int", "int: The desired permissions to grant for any URIs. This should be a combination of @B_android#content#Intent#FLAG_GRANT_READ_URI_PERMISSION_E@, @B_android#content#Intent#FLAG_GRANT_WRITE_URI_PERMISSION_E@, and @B_android#content#Intent#FLAG_GRANT_PREFIX_URI_PERMISSION_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getClipData_E@", "@B_android#app#job#JobInfo#getClipGrantFlags_E@"], "Permissions": [], "Description": "Set a @B_android#content#ClipData_E@ associated with this Job. The main purpose of providing a ClipData is to allow granting of URI permissions for data associated with the clip. The exact kind of permission grant to perform is specified through If the ClipData contains items that are Intents, any grant flags in those Intents will be ignored. Only flags provided as an argument to this method are respected, and will be applied to all Uri or Intent items in the clip (or sub-items of the clip). Because setting this property is not compatible with persisted jobs, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called.", "history": "added in API level 26", "FullName": "public JobInfo.Builder setClipData (ClipData clip, int grantFlags)"}, "setRequiresCharging(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Pass true to require that the device be charging in order to run the job."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isRequireCharging_E@"], "Permissions": [], "Description": "Specify that to run this job, the device must be charging (or be a non-battery-powered device connected to permanent power, such as Android TV devices). This defaults to false. For purposes of running jobs, a battery-powered device \"charging\" is not quite the same as simply being connected to power. If the device is so busy that the battery is draining despite a power connection, jobs with this constraint will not run. This can happen during some common use cases such as video chat, particularly if the device is plugged in to USB rather than to wall power.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setRequiresCharging (boolean requiresCharging)"}, "setPeriodic(long, long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Millisecond interval for which this job will repeat. A minimum value of @B_android#app#job#JobInfo#getMinPeriodMillis_E@ is enforced."], ["long", "long: Millisecond flex for this job. Flex is clamped to be at least @B_android#app#job#JobInfo#getMinFlexMillis_E@ or 5 percent of the period, whichever is higher."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getIntervalMillis_E@", "@B_android#app#job#JobInfo#getFlexMillis_E@"], "Permissions": [], "Description": "Specify that this job should recur with the provided interval and flex. The job can execute at any time in a window of flex length at the end of the period.", "history": "added in API level 24", "FullName": "public JobInfo.Builder setPeriodic (long intervalMillis, long flexMillis)"}, "setExtras(android.os.PersistableBundle)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#PersistableBundle_E@", "PersistableBundle: Bundle containing extras you want the scheduler to hold on to for you. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getExtras_E@"], "Permissions": [], "Description": "Set optional extras. This is persisted, so we only allow primitive types.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setExtras (PersistableBundle extras)"}, "addTriggerContentUri(android.app.job.JobInfo.TriggerContentUri)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#app#job#JobInfo#TriggerContentUri_E@", "JobInfo.TriggerContentUri: The content: URI to monitor. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getTriggerContentUris_E@"], "Permissions": [], "Description": "Add a new content: URI that will be monitored with a @B_android#database#ContentObserver_E@, and will cause the job to execute if changed. If you have any trigger content URIs associated with a job, it will not execute until there has been a change report for one or more of them. Note that trigger URIs can not be used in combination with @B_android#app#job#JobInfo#Builder#setPeriodic_E@ or @B_android#app#job#JobInfo#Builder#setPersisted_E@. To continually monitor for content changes, you need to schedule a new JobInfo observing the same URIs before you finish execution of the JobService handling the most recent changes. Following this pattern will ensure you do not lost any content changes: while your job is running, the system will continue monitoring for content changes, and propagate any it sees over to the next job you schedule. Because setting this property is not compatible with periodic or persisted jobs, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called. The following example shows how this feature can be used to monitor for changes in the photos on a device.", "history": "Added in API level 24", "FullName": "public JobInfo.Builder addTriggerContentUri (JobInfo.TriggerContentUri uri)"}, "setRequiresStorageNotLow(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Whether or not the device's available storage must not be low."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isRequireStorageNotLow_E@"], "Permissions": [], "Description": "Specify that to run this job, the device's available storage must not be low. This defaults to false. If true, the job will only run when the device is not in a low storage state, which is generally the point where the user is given a \"low storage\" warning.", "history": "Added in API level 26", "FullName": "public JobInfo.Builder setRequiresStorageNotLow (boolean storageNotLow)"}, "setMinimumLatency(long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Milliseconds before which this job will not be considered for execution."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getMinLatencyMillis_E@"], "Permissions": [], "Description": "Specify that this job should be delayed by the provided amount of time. Because it doesn't make sense setting this property on a periodic job, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setMinimumLatency (long minLatencyMillis)"}, "build()": {"Returns": [["@B_android#app#job#JobInfo_E@", "The job object to hand to the JobScheduler. This object is immutable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public JobInfo build ()"}, "setRequiresBatteryNotLow(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: Whether or not the device's battery level must not be low."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isRequireBatteryNotLow_E@"], "Permissions": [], "Description": "Specify that to run this job, the device's battery level must not be low. This defaults to false. If true, the job will only run when the battery level is not low, which is generally the point where the user is given a \"low battery\" warning.", "history": "Added in API level 26", "FullName": "public JobInfo.Builder setRequiresBatteryNotLow (boolean batteryNotLow)"}, "setPeriodic(long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Millisecond interval for which this job will repeat."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getIntervalMillis_E@", "@B_android#app#job#JobInfo#getFlexMillis_E@"], "Permissions": [], "Description": "Specify that this job should recur with the provided interval, not more than once per period. You have no control over when within this interval this job will be executed, only the guarantee that it will be executed at most once within this interval. Setting this function on the builder with @B_android#app#job#JobInfo#Builder#setMinimumLatency_E@ or @B_android#app#job#JobInfo#Builder#setOverrideDeadline_E@ will result in an error.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setPeriodic (long intervalMillis)"}, "setBackoffCriteria(long,int)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Millisecond time interval to wait initially when job has failed."], ["int", "int: Value is @B_android#app#job#JobInfo#BACKOFF_POLICY_LINEAR_E@, or @B_android#app#job#JobInfo#BACKOFF_POLICY_EXPONENTIAL_E@"]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getInitialBackoffMillis_E@", "@B_android#app#job#JobInfo#getBackoffPolicy_E@"], "Permissions": [], "Description": "Set up the back-off/retry policy. This defaults to some respectable values: {30 seconds, Exponential}. We cap back-off at 5hrs. Note that trying to set a backoff criteria for a job with @B_android#app#job#JobInfo#Builder#setRequiresDeviceIdle_E@ will throw an exception when you call build(). This is because back-off typically does not make sense for these types of jobs. See @B_android#app#job#JobService#jobFinished_E@ for more description of the return value for the case of a job executing while in idle mode.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setBackoffCriteria (long initialBackoffMillis, int backoffPolicy)"}, "setTriggerContentMaxDelay(long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Delay after initial content change, in milliseconds."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getTriggerContentMaxDelay_E@"], "Permissions": [], "Description": "Set the maximum total delay (in milliseconds) that is allowed from the first time a content change is detected until the job is scheduled.", "history": "Added in API level 24", "FullName": "public JobInfo.Builder setTriggerContentMaxDelay (long durationMs)"}, "setOverrideDeadline(long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getMaxExecutionDelayMillis_E@"], "Permissions": [], "Description": "Set deadline which is the maximum scheduling latency. The job will be run by this deadline even if other requirements are not met. Because it doesn't make sense setting this property on a periodic job, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setOverrideDeadline (long maxExecutionDelayMillis)"}, "setTransientExtras(android.os.Bundle)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle containing extras you want the scheduler to hold on to for you. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getTransientExtras_E@"], "Permissions": [], "Description": "Set optional transient extras. Because setting this property is not compatible with persisted jobs, doing so will throw an @B_java#lang#IllegalArgumentException_E@ when @B_android#app#job#JobInfo#Builder#build_E@ is called.", "history": "Added in API level 26", "FullName": "public JobInfo.Builder setTransientExtras (Bundle extras)"}, "JobInfo.Builder(int,android.content.ComponentName)": {"Returns": [], "Parameters": [["int", "int: Application-provided id for this job. Subsequent calls to cancel, or jobs created with the same jobId, will update the pre-existing job with the same id. This ID must be unique across all clients of the same uid (not just the same package). You will want to make sure this is a stable id across app updates, so probably not based on a resource ID."], ["@B_android#content#ComponentName_E@", "ComponentName: The endpoint that you implement that will receive the callback from the JobScheduler. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize a new Builder to construct a @B_android#app#job#JobInfo_E@.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder (int jobId, ComponentName jobService)"}, "setPeriodic(long,long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Millisecond interval for which this job will repeat. A minimum value of @B_android#app#job#JobInfo#getMinPeriodMillis_E@ is enforced."], ["long", "long: Millisecond flex for this job. Flex is clamped to be at least @B_android#app#job#JobInfo#getMinFlexMillis_E@ or 5 percent of the period, whichever is higher."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getIntervalMillis_E@", "@B_android#app#job#JobInfo#getFlexMillis_E@"], "Permissions": [], "Description": "Specify that this job should recur with the provided interval and flex. The job can execute at any time in a window of flex length at the end of the period.", "history": "Added in API level 24", "FullName": "public JobInfo.Builder setPeriodic (long intervalMillis, long flexMillis)"}, "setRequiredNetworkType(int)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["int", "int: Value is @B_android#app#job#JobInfo#NETWORK_TYPE_NONE_E@, @B_android#app#job#JobInfo#NETWORK_TYPE_ANY_E@, @B_android#app#job#JobInfo#NETWORK_TYPE_UNMETERED_E@, @B_android#app#job#JobInfo#NETWORK_TYPE_NOT_ROAMING_E@, or @B_android#app#job#JobInfo#NETWORK_TYPE_CELLULAR_E@"]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#Builder#setRequiredNetwork_E@", "@B_android#app#job#JobInfo#getNetworkType_E@", "@B_android#app#job#JobParameters#getNetwork_E@"], "Permissions": [], "Description": "Set basic description of the kind of network your job requires. If you need more precise control over network capabilities, see @B_android#app#job#JobInfo#Builder#setRequiredNetwork_E@. If your job doesn't need a network connection, you don't need to call this method, as the default value is @B_android#app#job#JobInfo#NETWORK_TYPE_NONE_E@. Calling this method defines network as a strict requirement for your job. If the network requested is not available your job will never run. See @B_android#app#job#JobInfo#Builder#setOverrideDeadline_E@ to change this behavior. Calling this method will override any requirements previously defined by @B_android#app#job#JobInfo#Builder#setRequiredNetwork_E@; you typically only want to call one of these methods. When your job executes in @B_android#app#job#JobService#onStartJob_E@, be sure to use the specific network returned by @B_android#app#job#JobParameters#getNetwork_E@, otherwise you'll use the default network which may not meet this constraint.", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setRequiredNetworkType (int networkType)"}, "setRequiredNetwork(android.net.NetworkRequest)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#net#NetworkRequest_E@", "NetworkRequest: The detailed description of the kind of network this job requires, or null if no specific kind of network is required. Defining a @B_android#net#NetworkSpecifier_E@ is only supported for jobs that aren't persisted. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#Builder#setRequiredNetworkType_E@", "@B_android#app#job#JobInfo#getRequiredNetwork_E@", "@B_android#app#job#JobParameters#getNetwork_E@"], "Permissions": [], "Description": "Set detailed description of the kind of network your job requires. If your job doesn't need a network connection, you don't need to call this method, as the default is null. Calling this method defines network as a strict requirement for your job. If the network requested is not available your job will never run. See @B_android#app#job#JobInfo#Builder#setOverrideDeadline_E@ to change this behavior. Calling this method will override any requirements previously defined by @B_android#app#job#JobInfo#Builder#setRequiredNetworkType_E@; you typically only want to call one of these methods. When your job executes in @B_android#app#job#JobService#onStartJob_E@, be sure to use the specific network returned by @B_android#app#job#JobParameters#getNetwork_E@, otherwise you'll use the default network which may not meet this constraint.", "history": "Added in API level 28", "FullName": "public JobInfo.Builder setRequiredNetwork (NetworkRequest networkRequest)"}, "setPersisted(boolean)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["boolean", "boolean: True to indicate that the job will be written to disk and loaded at boot."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#isPersisted_E@"], "Permissions": ["@B_android#Manifest#permission#RECEIVE_BOOT_COMPLETED_E@"], "Description": "Set whether or not to persist this job across device reboots. Requires @B_android#Manifest#permission#RECEIVE_BOOT_COMPLETED_E@", "history": "Added in API level 21", "FullName": "public JobInfo.Builder setPersisted (boolean isPersisted)"}, "setEstimatedNetworkBytes(long, long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: The estimated size of network traffic that will be downloaded by this job, in bytes.Value is a non-negative number of bytes."], ["long", "long: The estimated size of network traffic that will be uploaded by this job, in bytes.Value is a non-negative number of bytes."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getEstimatedNetworkDownloadBytes_E@", "@B_android#app#job#JobInfo#getEstimatedNetworkUploadBytes_E@", "@B_android#app#job#JobWorkItem#JobWorkItem_E@"], "Permissions": [], "Description": "Set the estimated size of network traffic that will be performed by this job, in bytes. Apps are encouraged to provide values that are as accurate as possible, but when the exact size isn't available, an order-of-magnitude estimate can be provided instead. Here are some specific examples: A job that is backing up a photo knows the exact size of that photo, so it should provide that size as the estimate. A job that refreshes top news stories wouldn't know an exact size, but if the size is expected to be consistently around 100KB, it can provide that order-of-magnitude value as the estimate. A job that synchronizes email could end up using an extreme range of data, from under 1KB when nothing has changed, to dozens of MB when there are new emails with attachments. Jobs that cannot provide reasonable estimates should use the sentinel value @B_android#app#job#JobInfo#NETWORK_BYTES_UNKNOWN_E@. Note that the system may choose to delay jobs with large network usage estimates when the device has a poor network connection, in order to save battery. The values provided here only reflect the traffic that will be performed by the base job; if you're using @B_android#app#job#JobWorkItem_E@ then you also need to define the network traffic used by each work item when constructing them.", "history": "added in API level 28", "FullName": "public JobInfo.Builder setEstimatedNetworkBytes (long downloadBytes, long uploadBytes)"}, "setEstimatedNetworkBytes(long,long)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: The estimated size of network traffic that will be downloaded by this job, in bytes. Value is a non-negative number of bytes."], ["long", "long: The estimated size of network traffic that will be uploaded by this job, in bytes. Value is a non-negative number of bytes."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getEstimatedNetworkDownloadBytes_E@", "@B_android#app#job#JobInfo#getEstimatedNetworkUploadBytes_E@", "@B_android#app#job#JobWorkItem#JobWorkItem_E@"], "Permissions": [], "Description": "Set the estimated size of network traffic that will be performed by this job, in bytes. Apps are encouraged to provide values that are as accurate as possible, but when the exact size isn't available, an order-of-magnitude estimate can be provided instead. Here are some specific examples: A job that is backing up a photo knows the exact size of that photo, so it should provide that size as the estimate. A job that refreshes top news stories wouldn't know an exact size, but if the size is expected to be consistently around 100KB, it can provide that order-of-magnitude value as the estimate. A job that synchronizes email could end up using an extreme range of data, from under 1KB when nothing has changed, to dozens of MB when there are new emails with attachments. Jobs that cannot provide reasonable estimates should use the sentinel value @B_android#app#job#JobInfo#NETWORK_BYTES_UNKNOWN_E@. Note that the system may choose to delay jobs with large network usage estimates when the device has a poor network connection, in order to save battery. The values provided here only reflect the traffic that will be performed by the base job; if you're using @B_android#app#job#JobWorkItem_E@ then you also need to define the network traffic used by each work item when constructing them.", "history": "Added in API level 28", "FullName": "public JobInfo.Builder setEstimatedNetworkBytes (long downloadBytes, long uploadBytes)"}, "setBackoffCriteria(long, int)": {"Returns": [["@B_android#app#job#JobInfo#Builder_E@", "no returns description in source"]], "Parameters": [["long", "long: Millisecond time interval to wait initially when job has failed."], ["int", "int no parameter comment Value is BACKOFF_POLICY_LINEAR or BACKOFF_POLICY_EXPONENTIAL."]], "Throws": [], "SeeAlso": ["@B_android#app#job#JobInfo#getInitialBackoffMillis_E@", "@B_android#app#job#JobInfo#getBackoffPolicy_E@"], "Permissions": [], "Description": "Set up the back-off/retry policy. This defaults to some respectable values: {30 seconds, Exponential}. We cap back-off at 5hrs. Note that trying to set a backoff criteria for a job with @B_android#app#job#JobInfo#Builder#setRequiresDeviceIdle_E@ will throw an exception when you call build(). This is because back-off typically does not make sense for these types of jobs. See @B_android#app#job#JobService#jobFinished_E@ for more description of the return value for the case of a job executing while in idle mode.", "history": "added in API level 21", "FullName": "public JobInfo.Builder setBackoffCriteria (long initialBackoffMillis, int backoffPolicy)"}}, "Inheritance": [], "ClassName": "android.app.job.JobInfo.Builder", "ClassDesc": "Builder class for constructing @B_android#app#job#JobInfo_E@ objects."}