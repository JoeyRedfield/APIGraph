{"Functions": {"obtainTypedArray(int)": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the array values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return an array of heterogeneous values.", "history": "Added in API level 1", "FullName": "public TypedArray obtainTypedArray (int id)"}, "updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration no parameter comment"], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See @B_android#content#Context#createConfigurationContext_E@. Store the newly updated configuration.", "history": "Added in API level 1 Deprecated in API level 25", "FullName": "public void updateConfiguration (Configuration config, DisplayMetrics metrics)"}, "getQuantityString(int, int)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. Note that the string is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See", "history": "added in API level 1", "FullName": "public String getQuantityString (int id, int quantity)"}, "finishPreloading()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by zygote when it is done preloading resources, to change back to normal Resources operation.", "history": "Added in API level 1", "FullName": "public final void finishPreloading ()"}, "getQuantityString(int,int,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity, using the given arguments. Note that the string is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See Substitution of format arguments works as if using @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@. The resulting string will be stripped of any styled text information.", "history": "Added in API level 1", "FullName": "public String getQuantityString (int id, int quantity, Object... formatArgs)"}, "getFraction(int,int,int)": {"Returns": [["float", "Attribute fractional value multiplied by the appropriate base value."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["int", "int: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a fractional unit for a particular resource ID.", "history": "Added in API level 3", "FullName": "public float getFraction (int id, int base, int pbase)"}, "getQuantityText(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The string data associated with the resource, plus possibly styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the character sequence necessary for grammatically correct pluralization of the given resource ID for the given quantity. Note that the character sequence is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See", "history": "Added in API level 1", "FullName": "public CharSequence getQuantityText (int id, int quantity)"}, "Resources(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#AssetManager_E@", "AssetManager: Previously created AssetManager."], ["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: Current display metrics to consider when selecting/computing resource values."], ["@B_android#content#res#Configuration_E@", "Configuration: Desired device configuration to consider when selecting/computing resource values (optional)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resources should not be constructed by apps. See @B_android#content#Context#createConfigurationContext_E@. Create a new Resources object on top of an existing set of assets in an AssetManager.", "history": "Added in API level 1", "FullName": "public Resources (AssetManager assets, DisplayMetrics metrics, Configuration config)"}, "getIdentifier(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["int", "int The associated resource identifier. Returns 0 if no such resource was found. (0 is not a valid resource ID.)"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired resource."], ["@B_java#lang#String_E@", "String: Optional default resource type to find, if \"type/\" is not included in the name. Can be null to require an explicit type."], ["@B_java#lang#String_E@", "String: Optional default package to find, if \"package:\" is not included in the name. Can be null to require an explicit package."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a resource identifier for the given resource name. A fully qualified resource name is of the form \"package:type/entry\". The first two components (package and type) are optional if defType and defPackage, respectively, are specified here. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name.", "history": "Added in API level 1", "FullName": "public int getIdentifier (String name, String defType, String defPackage)"}, "getQuantityText(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The string data associated with the resource, plus possibly styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the character sequence necessary for grammatically correct pluralization of the given resource ID for the given quantity. Note that the character sequence is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See", "history": "added in API level 1", "FullName": "public CharSequence getQuantityText (int id, int quantity)"}, "getBoolean(int)": {"Returns": [["boolean", "Returns the boolean value contained in the resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return a boolean associated with a particular resource ID. This can be used with any integral resource value, and will return true if it is non-zero.", "history": "Added in API level 3", "FullName": "public boolean getBoolean (int id)"}, "getAttributeSetSourceResId(android.util.AttributeSet)": {"Returns": [["int", "The resource ID for the source that is backing the given AttributeSet or @B_android#content#res#Resources#ID_NULL_E@ if the AttributeSet is null."]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: AttributeSet for which we want to find the source. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the resource ID of the resource that was used to create this AttributeSet.", "history": "Added in API level 29", "FullName": "public static int getAttributeSetSourceResId (AttributeSet set)"}, "getSystem()": {"Returns": [["@B_android#content#res#Resources_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a global shared Resources object that provides access to only system resources (no application resources), is not configured for the current screen (can not use dimension units, does not change based on orientation, etc), and is not affected by Runtime Resource Overlay.", "history": "Added in API level 1", "FullName": "public static Resources getSystem ()"}, "getResourceTypeName(int)": {"Returns": [["@B_java#lang#String_E@", "A string holding the type name of the resource."]], "Parameters": [["int", "int: The resource identifier whose type name is to be retrieved."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getResourceName_E@"], "Permissions": [], "Description": "Return the type name for a given resource identifier.", "history": "Added in API level 1", "FullName": "public String getResourceTypeName (int resid)"}, "getColorStateList(int,android.content.res.Resources.Theme)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A themed ColorStateList object containing either a single solid color or multiple colors that can be selected based on a state."]], "Parameters": [["int", "int: The desired resource identifier of a @B_android#content#res#ColorStateList_E@, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme used to style the color attributes, may be null. This value may be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a themed color state list associated with a particular resource ID. The resource may contain either a single raw color value or a complex @B_android#content#res#ColorStateList_E@ holding multiple possible colors.", "history": "Added in API level 23", "FullName": "public ColorStateList getColorStateList (int id, Resources.Theme theme)"}, "getDrawableForDensity(int,int,android.content.res.Resources.Theme)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The desired screen density indicated by the resource as found in @B_android#util#DisplayMetrics_E@. A value of 0 means to use the density returned from @B_android#content#res#Resources#getConfiguration_E@. This is equivalent to calling @B_android#content#res#Resources#getDrawable_E@."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme used to style the drawable attributes, may be null if the drawable cannot be decoded. This value may be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return a drawable object associated with a particular resource ID for the given screen density in DPI and styled for the specified theme.", "history": "Added in API level 21", "FullName": "public Drawable getDrawableForDensity (int id, int density, Resources.Theme theme)"}, "getDimensionPixelSize(int)": {"Returns": [["int", "Resource dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDimension_E@", "@B_android#content#res#Resources#getDimensionPixelOffset_E@"], "Permissions": [], "Description": "Retrieve a dimensional for a particular resource ID for use as a size in raw pixels. This is the same as @B_android#content#res#Resources#getDimension_E@, except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size.", "history": "Added in API level 1", "FullName": "public int getDimensionPixelSize (int id)"}, "getAssets()": {"Returns": [["@B_android#content#res#AssetManager_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve underlying AssetManager storage for these resources.", "history": "Added in API level 1", "FullName": "public final AssetManager getAssets ()"}, "getText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The string data associated with the resource, plus possibly styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.", "history": "Added in API level 1", "FullName": "public CharSequence getText (int id)"}, "flushLayoutCache()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this to remove all cached loaded layout resources from the Resources object. Only intended for use with performance testing tools.", "history": "Added in API level 1", "FullName": "public final void flushLayoutCache ()"}, "getDimensionPixelOffset(int)": {"Returns": [["int", "Resource dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDimension_E@", "@B_android#content#res#Resources#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional for a particular resource ID for use as an offset in raw pixels. This is the same as @B_android#content#res#Resources#getDimension_E@, except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer.", "history": "Added in API level 1", "FullName": "public int getDimensionPixelOffset (int id)"}, "getColorStateList(int)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "A ColorStateList object containing either a single solid color or multiple colors that can be selected based on a state. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier of a @B_android#content#res#ColorStateList_E@, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#content#res#Resources#getColorStateList_E@ instead. Returns a color state list associated with a particular resource ID. The resource may contain either a single raw color value or a complex @B_android#content#res#ColorStateList_E@ holding multiple possible colors.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public ColorStateList getColorStateList (int id)"}, "getResourceEntryName(int)": {"Returns": [["@B_java#lang#String_E@", "A string holding the entry name of the resource."]], "Parameters": [["int", "int: The resource identifier whose entry name is to be retrieved."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getResourceName_E@"], "Permissions": [], "Description": "Return the entry name for a given resource identifier.", "history": "Added in API level 1", "FullName": "public String getResourceEntryName (int resid)"}, "newTheme()": {"Returns": [["@B_android#content#res#Resources#Theme_E@", "Theme The newly created Theme container."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generate a new Theme object for this set of Resources. It initially starts out empty.", "history": "Added in API level 1", "FullName": "public final Resources.Theme newTheme ()"}, "openRawResourceFd(int)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "AssetFileDescriptor A new file descriptor you can use to read the resource. This includes the file descriptor itself, as well as the offset and length of data where the resource appears in the file. A null is returned if the file exists but is compressed."]], "Parameters": [["int", "int: The resource identifier to open, as generated by the aapt tool."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Open a file descriptor for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources. This function only works for resources that are stored in the package as uncompressed data, which typically includes things like mp3 files and png images.", "history": "Added in API level 1", "FullName": "public AssetFileDescriptor openRawResourceFd (int id)"}, "openRawResource(int)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream Access to the resource data. This value will never be null."]], "Parameters": [["int", "int: The resource identifier to open, as generated by the aapt tool."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset files -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.", "history": "Added in API level 1", "FullName": "public InputStream openRawResource (int id)"}, "getResourcePackageName(int)": {"Returns": [["@B_java#lang#String_E@", "A string holding the package name of the resource."]], "Parameters": [["int", "int: The resource identifier whose package name is to be retrieved."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getResourceName_E@"], "Permissions": [], "Description": "Return the package name for a given resource identifier.", "history": "Added in API level 1", "FullName": "public String getResourcePackageName (int resid)"}, "parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the tag these attributes come from; this is only used for reporting error messages."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes from which to retrieve the name/value pair."], ["@B_android#os#Bundle_E@", "Bundle: The Bundle in which to place the parsed value."]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If the attributes are not valid."]], "SeeAlso": [], "Permissions": [], "Description": "Parse a name/value pair out of an XML tag holding that data. The AttributeSet must be holding the data defined by @B_android#R#styleable#Extra_E@. The following value types are supported: @B_android#util#TypedValue#TYPE_STRING_E@: @B_android#os#Bundle#putCharSequence_E@ @B_android#util#TypedValue#TYPE_INT_BOOLEAN_E@: @B_android#os#Bundle#putCharSequence_E@ @B_android#util#TypedValue#TYPE_FIRST_INT_E@-@B_android#util#TypedValue#TYPE_LAST_INT_E@: @B_android#os#Bundle#putCharSequence_E@ @B_android#util#TypedValue#TYPE_FLOAT_E@: @B_android#os#Bundle#putCharSequence_E@", "history": "Added in API level 3", "FullName": "public void parseBundleExtra (String tagName, AttributeSet attrs, Bundle outBundle)"}, "getAnimation(int)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "A new parser object through which you can read the XML data. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getXml_E@"], "Permissions": [], "Description": "Return an XmlResourceParser through which you can read an animation description for the given resource ID. This parser has limited functionality -- in particular, you can't change its input, and only the high-level events are available. This function is really a simple wrapper for calling @B_android#content#res#Resources#getXml_E@ with an animation resource.", "history": "Added in API level 1", "FullName": "public XmlResourceParser getAnimation (int id)"}, "getDimension(int)": {"Returns": [["float", "Resource dimension value multiplied by the appropriate metric to convert to pixels."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDimensionPixelOffset_E@", "@B_android#content#res#Resources#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional for a particular resource ID. Unit conversions are based on the current @B_android#util#DisplayMetrics_E@ associated with the resources.", "history": "Added in API level 1", "FullName": "public float getDimension (int id)"}, "getString(int,java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID, substituting the format arguments as defined in @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@. It will be stripped of any styled text information.", "history": "Added in API level 1", "FullName": "public String getString (int id, Object... formatArgs)"}, "getLayout(int)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "A new parser object through which you can read the XML data. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getXml_E@"], "Permissions": [], "Description": "Return an XmlResourceParser through which you can read a view layout description for the given resource ID. This parser has limited functionality -- in particular, you can't change its input, and only the high-level events are available. This function is really a simple wrapper for calling @B_android#content#res#Resources#getXml_E@ with a layout resource.", "history": "Added in API level 1", "FullName": "public XmlResourceParser getLayout (int id)"}, "getValue(int,android.util.TypedValue,boolean)": {"Returns": [], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#util#TypedValue_E@", "TypedValue: Object in which to place the resource data."], ["boolean", "boolean: If true, a resource that is a reference to another resource will be followed so that you receive the actual final resource data. If false, the TypedValue will be filled in with the reference itself."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the raw data associated with a particular resource ID.", "history": "Added in API level 1", "FullName": "public void getValue (int id, TypedValue outValue, boolean resolveRefs)"}, "getIntArray(int)": {"Returns": [["int[]", "The int array associated with the resource. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the int array associated with a particular resource ID.", "history": "Added in API level 1", "FullName": "public int[] getIntArray (int id)"}, "getMovie(int)": {"Returns": [["@B_android#graphics#Movie_E@", "no returns description in source"]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Prefer @B_android#graphics#drawable#AnimatedImageDrawable_E@. Return a movie object associated with the particular resource ID.", "history": "Added in API level 1 Deprecated in API level 29", "FullName": "public Movie getMovie (int id)"}, "getDrawableForDensity(int, int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource.This value may be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: the desired screen density indicated by the resource as found in @B_android#util#DisplayMetrics_E@. A value of 0 means to use the density returned from @B_android#content#res#Resources#getConfiguration_E@. This is equivalent to calling @B_android#content#res#Resources#getDrawable_E@."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDrawableForDensity_E@"], "Permissions": [], "Description": "Use @B_android#content#res#Resources#getDrawableForDensity_E@ instead. Return a drawable object associated with a particular resource ID for the given screen density in DPI. This will set the drawable's density to be the device's density multiplied by the ratio of actual drawable density to requested density. This allows the drawable to be scaled up to the correct size if needed. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc. The Drawable API hides these implementation details. @B_android#content#Context#getDrawable_E@ or @B_android#content#res#Resources#getDrawableForDensity_E@ passing the desired theme.", "history": "added in API level 15", "FullName": "public Drawable getDrawableForDensity (int id, int density)"}, "getText(int,java.lang.CharSequence)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The string data associated with the resource, plus possibly styled text information, or def if id is 0 or not found."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_java#lang#CharSequence_E@", "CharSequence: The default CharSequence to return."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.", "history": "Added in API level 1", "FullName": "public CharSequence getText (int id, CharSequence def)"}, "getResourceName(int)": {"Returns": [["@B_java#lang#String_E@", "A string holding the name of the resource."]], "Parameters": [["int", "int: The resource identifier whose name is to be retrieved."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getResourcePackageName_E@", "@B_android#content#res#Resources#getResourceTypeName_E@", "@B_android#content#res#Resources#getResourceEntryName_E@"], "Permissions": [], "Description": "Return the full name for a given resource identifier. This name is a single string of the form \"package:type/entry\".", "history": "Added in API level 1", "FullName": "public String getResourceName (int resid)"}, "getColor(int, android.content.res.Resources.Theme)": {"Returns": [["int", "A single color value in the form 0xAARRGGBB."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme used to style the color attributes, may be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a themed color integer associated with a particular resource ID. If the resource holds a complex @B_android#content#res#ColorStateList_E@, then the default color from the set is returned.", "history": "added in API level 23", "FullName": "public int getColor (int id, Resources.Theme theme)"}, "getTextArray(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "The styled text array associated with the resource. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the styled text array associated with a particular resource ID.", "history": "Added in API level 1", "FullName": "public CharSequence[] getTextArray (int id)"}, "getDisplayMetrics()": {"Returns": [["@B_android#util#DisplayMetrics_E@", "The resource's current display metrics."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current display metrics that are in effect for this resource object. The returned object should be treated as read-only.", "history": "Added in API level 1", "FullName": "public DisplayMetrics getDisplayMetrics ()"}, "getValueForDensity(int,int,android.util.TypedValue,boolean)": {"Returns": [], "Parameters": [["int", "int: resource identifier"], ["int", "int: density in DPI"], ["@B_android#util#TypedValue_E@", "TypedValue no parameter comment"], ["boolean", "boolean: If true, a resource that is a reference to another resource will be followed so that you receive the actual final resource data. If false, the TypedValue will be filled in with the reference itself."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getValue_E@"], "Permissions": [], "Description": "Get the raw value associated with a resource with associated density.", "history": "Added in API level 15", "FullName": "public void getValueForDensity (int id, int density, TypedValue outValue, boolean resolveRefs)"}, "getXml(int)": {"Returns": [["@B_android#content#res#XmlResourceParser_E@", "A new parser object through which you can read the XML data. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#util#AttributeSet_E@"], "Permissions": [], "Description": "Return an XmlResourceParser through which you can read a generic XML resource for the given resource ID. The XmlPullParser implementation returned here has some limited functionality. In particular, you can't change its input, and only high-level parsing events are available (since the document was pre-parsed for you at build time, which involved merging text and stripping comments).", "history": "Added in API level 1", "FullName": "public XmlResourceParser getXml (int id)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID. It will be stripped of any styled text information.", "history": "Added in API level 1", "FullName": "public String getString (int id)"}, "getStringArray(int)": {"Returns": [["@B_java#lang#String_E@", "The string array associated with the resource. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the string array associated with a particular resource ID.", "history": "Added in API level 1", "FullName": "public String[] getStringArray (int id)"}, "getValue(int, android.util.TypedValue, boolean)": {"Returns": [], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#util#TypedValue_E@", "TypedValue: Object in which to place the resource data."], ["boolean", "boolean: If true, a resource that is a reference to another resource will be followed so that you receive the actual final resource data. If false, the TypedValue will be filled in with the reference itself."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the raw data associated with a particular resource ID.", "history": "added in API level 1", "FullName": "public void getValue (int id, TypedValue outValue, boolean resolveRefs)"}, "getText(int, java.lang.CharSequence)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence The string data associated with the resource, plus possibly styled text information, or def if id is 0 or not found."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_java#lang#CharSequence_E@", "CharSequence: The default CharSequence to return."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID. The returned object will be a String if this is a plain string; it will be some other type of CharSequence if it is styled.", "history": "added in API level 1", "FullName": "public CharSequence getText (int id, CharSequence def)"}, "getString(int, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the string value associated with a particular resource ID, substituting the format arguments as defined in @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@. It will be stripped of any styled text information.", "history": "added in API level 1", "FullName": "public String getString (int id, Object... formatArgs)"}, "openRawResource(int, android.util.TypedValue)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream Access to the resource data.This value will never be null."]], "Parameters": [["int", "int: The resource identifier to open, as generated by the aapt tool."], ["@B_android#util#TypedValue_E@", "TypedValue: The TypedValue object to hold the resource information."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset file -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.", "history": "added in API level 3", "FullName": "public InputStream openRawResource (int id, TypedValue value)"}, "getFloat(int)": {"Returns": [["float", "Returns the floating-point value contained in the resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist or is not a floating-point value."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a floating-point value for a particular resource ID.", "history": "Added in API level 29", "FullName": "public float getFloat (int id)"}, "getQuantityString(int, int, java.lang.Object...)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."], ["@B_java#lang#Object_E@", "Object: The format arguments that will be used for substitution."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Formats the string necessary for grammatically correct pluralization of the given resource ID for the given quantity, using the given arguments. Note that the string is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See Substitution of format arguments works as if using @B_java#util#Formatter_E@ and @B_java#lang#String#format_E@. The resulting string will be stripped of any styled text information.", "history": "added in API level 1", "FullName": "public String getQuantityString (int id, int quantity, Object... formatArgs)"}, "getDrawable(int,android.content.res.Resources.Theme)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme used to style the drawable attributes, may be null. This value may be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return a drawable object associated with a particular resource ID and styled for the specified theme. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc.", "history": "Added in API level 21", "FullName": "public Drawable getDrawable (int id, Resources.Theme theme)"}, "obtainAttributes(android.util.AttributeSet, int[])": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it."]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: The current attribute values to retrieve."], ["int[]", "int: The specific attributes to be retrieved. These attribute IDs must be sorted in ascending order."]], "Throws": [], "SeeAlso": ["@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources.", "history": "added in API level 1", "FullName": "public TypedArray obtainAttributes (AttributeSet set, int[] attrs)"}, "obtainAttributes(android.util.AttributeSet,int[])": {"Returns": [["@B_android#content#res#TypedArray_E@", "Returns a TypedArray holding an array of the attribute values. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with it."]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: The current attribute values to retrieve."], ["int[]", "int: The specific attributes to be retrieved. These attribute IDs must be sorted in ascending order."]], "Throws": [], "SeeAlso": ["@B_android#content#res#Resources#Theme#obtainStyledAttributes_E@"], "Permissions": [], "Description": "Retrieve a set of basic attribute values from an AttributeSet, not performing styling of them using a theme and/or style resources.", "history": "Added in API level 1", "FullName": "public TypedArray obtainAttributes (AttributeSet set, int[] attrs)"}, "getColor(int,android.content.res.Resources.Theme)": {"Returns": [["int", "A single color value in the form 0xAARRGGBB."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme used to style the color attributes, may be null. This value may be null."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a themed color integer associated with a particular resource ID. If the resource holds a complex @B_android#content#res#ColorStateList_E@, then the default color from the set is returned.", "history": "Added in API level 23", "FullName": "public int getColor (int id, Resources.Theme theme)"}, "openRawResource(int,android.util.TypedValue)": {"Returns": [["@B_java#io#InputStream_E@", "InputStream Access to the resource data. This value will never be null."]], "Parameters": [["int", "int: The resource identifier to open, as generated by the aapt tool."], ["@B_android#util#TypedValue_E@", "TypedValue: The TypedValue object to hold the resource information."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Open a data stream for reading a raw resource. This can only be used with resources whose value is the name of an asset file -- that is, it can be used to open drawable, sound, and raw resources; it will fail on string and color resources.", "history": "Added in API level 3", "FullName": "public InputStream openRawResource (int id, TypedValue value)"}, "getQuantityString(int,int)": {"Returns": [["@B_java#lang#String_E@", "String The string data associated with the resource, stripped of styled text information. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The number used to get the correct string for the current language's plural rules."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the string necessary for grammatically correct pluralization of the given resource ID for the given quantity. Note that the string is selected based solely on grammatical necessity, and that such rules differ between languages. Do not assume you know which string will be returned for a given quantity. See", "history": "Added in API level 1", "FullName": "public String getQuantityString (int id, int quantity)"}, "getFont(int)": {"Returns": [["@B_android#graphics#Typeface_E@", "Typeface The Typeface data associated with the resource. This value will never be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the Typeface value associated with a particular resource ID.", "history": "Added in API level 26", "FullName": "public Typeface getFont (int id)"}, "getColor(int)": {"Returns": [["int", "A single color value in the form 0xAARRGGBB."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#content#res#Resources#getColor_E@ instead. Returns a color integer associated with a particular resource ID. If the resource holds a complex @B_android#content#res#ColorStateList_E@, then the default color from the set is returned.", "history": "Added in API level 1 Deprecated in API level 23", "FullName": "public int getColor (int id)"}, "getInteger(int)": {"Returns": [["int", "Returns the integer value contained in the resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return an integer associated with a particular resource ID.", "history": "Added in API level 1", "FullName": "public int getInteger (int id)"}, "getValue(java.lang.String,android.util.TypedValue,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the desired resource. This is passed to getIdentifier() with a default type of \"string\"."], ["@B_android#util#TypedValue_E@", "TypedValue: Object in which to place the resource data."], ["boolean", "boolean: If true, a resource that is a reference to another resource will be followed so that you receive the actual final resource data. If false, the TypedValue will be filled in with the reference itself."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the raw data associated with a particular resource ID. See getIdentifier() for information on how names are mapped to resource IDs, and getString(int) for information on how string resources are retrieved. Note: use of this function is discouraged. It is much more efficient to retrieve resources by identifier than by name.", "history": "Added in API level 1", "FullName": "public void getValue (String name, TypedValue outValue, boolean resolveRefs)"}, "getDrawable(int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDrawable_E@"], "Permissions": [], "Description": "Use @B_android#content#res#Resources#getDrawable_E@ instead. Return a drawable object associated with a particular resource ID. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc. The Drawable API hides these implementation details. @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@, this function would not correctly retrieve the final configuration density when the resource ID passed here is an alias to another Drawable resource. This means that if the density configuration of the alias resource is different than the actual resource, the density of the returned Drawable would be incorrect, resulting in bad scaling. To work around this, you can instead manually resolve the aliased reference by using @B_android#content#res#Resources#getValue_E@ and passing true for resolveRefs. The resulting @B_android#util#TypedValue#resourceId_E@ value may be passed to this method. @B_android#content#Context#getDrawable_E@ or @B_android#content#res#Resources#getDrawable_E@ passing the desired theme.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public Drawable getDrawable (int id)"}, "getConfiguration()": {"Returns": [["@B_android#content#res#Configuration_E@", "The resource's current configuration."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current configuration that is in effect for this resource object. The returned object should be treated as read-only.", "history": "Added in API level 1", "FullName": "public Configuration getConfiguration ()"}, "parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#res#XmlResourceParser_E@", "XmlResourceParser: The parser from which to retrieve the extras."], ["@B_android#os#Bundle_E@", "Bundle: A Bundle in which to place all parsed extras."]], "Throws": [["", "org.xmlpull.v1.XmlPullParserException"], ["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Parse a series of @B_android#R#styleable#Extra_E@ tags from an XML file. You call this when you are at the parent tag of the extra tags, and it will return once all of the child tags have been parsed. This will call @B_android#content#res#Resources#parseBundleExtra_E@ for each extra tag encountered.", "history": "Added in API level 3", "FullName": "public void parseBundleExtras (XmlResourceParser parser, Bundle outBundle)"}, "getDrawableForDensity(int,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable An object that can be used to draw this resource. This value may be null."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: the desired screen density indicated by the resource as found in @B_android#util#DisplayMetrics_E@. A value of 0 means to use the density returned from @B_android#content#res#Resources#getConfiguration_E@. This is equivalent to calling @B_android#content#res#Resources#getDrawable_E@."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": ["@B_android#content#res#Resources#getDrawableForDensity_E@"], "Permissions": [], "Description": "Use @B_android#content#res#Resources#getDrawableForDensity_E@ instead. Return a drawable object associated with a particular resource ID for the given screen density in DPI. This will set the drawable's density to be the device's density multiplied by the ratio of actual drawable density to requested density. This allows the drawable to be scaled up to the correct size if needed. Various types of objects will be returned depending on the underlying resource -- for example, a solid color, PNG image, scalable image, etc. The Drawable API hides these implementation details. @B_android#content#Context#getDrawable_E@ or @B_android#content#res#Resources#getDrawableForDensity_E@ passing the desired theme.", "history": "Added in API level 15 Deprecated in API level 22", "FullName": "public Drawable getDrawableForDensity (int id, int density)"}, "getFraction(int, int, int)": {"Returns": [["float", "Attribute fractional value multiplied by the appropriate base value."]], "Parameters": [["int", "int: The desired resource identifier, as generated by the aapt tool. This integer encodes the package, type, and resource entry. The value 0 is an invalid identifier."], ["int", "int: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["int", "int: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."]], "Throws": [["@B_android#content#res#Resources#NotFoundException_E@", "Throws NotFoundException if the given ID does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a fractional unit for a particular resource ID.", "history": "added in API level 3", "FullName": "public float getFraction (int id, int base, int pbase)"}}, "Inheritance": [], "ClassName": "android.content.res.Resources", "ClassDesc": "Class for accessing an application's resources. This sits on top of the asset manager of the application (accessible through @B_android#content#res#Resources#getAssets_E@) and provides a high-level API for getting typed data from the assets. The Android resource system keeps track of all non-code assets associated with an application. You can use this class to access your application's resources. You can generally acquire the @B_android#content#res#Resources_E@ instance associated with your application with @B_android#content#Context#getResources_E@. The Android SDK tools compile your application's resources into the application binary at build time. To use a resource, you must install it correctly in the source tree (inside your project's res/ directory) and build your application. As part of the build process, the SDK tools generate symbols for each resource, which you can use in your application code to access the resources. Using application resources makes it easy to update various characteristics of your application without modifying code, and\u2014by providing sets of alternative resources\u2014enables you to optimize your application for a variety of device configurations (such as for different languages and screen sizes). This is an important aspect of developing Android applications that are compatible on different types of devices. For more information about using resources, see the documentation about"}