{"Functions": {"postTranslate(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified translation. M' = T(dx, dy) * M", "history": "Added in API level 1", "FullName": "public boolean postTranslate (float dx, float dy)"}, "setValues(float[])": {"Returns": [], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy 9 values from the array into the matrix. Depending on the implementation of Matrix, these may be transformed into 16.16 integers in the Matrix, such that a subsequent call to getValues() will not yield exactly the same values.", "history": "Added in API level 1", "FullName": "public void setValues (float[] values)"}, "mapVectors(float[], float[])": {"Returns": [], "Parameters": [["float[]", "float: The array of dst vectors (x,y pairs)"], ["float[]", "float: The array of src vectors (x,y pairs)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use @B_android#graphics#Matrix#mapPoints_E@ if you want the translation to be applied.", "history": "added in API level 1", "FullName": "public void mapVectors (float[] dst, float[] src)"}, "setScale(float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to scale by sx and sy.", "history": "added in API level 1", "FullName": "public void setScale (float sx, float sy)"}, "preSkew(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified skew. M' = M * K(kx, ky)", "history": "added in API level 1", "FullName": "public boolean preSkew (float kx, float ky)"}, "mapVectors(float[],float[])": {"Returns": [], "Parameters": [["float[]", "float: The array of dst vectors (x,y pairs)"], ["float[]", "float: The array of src vectors (x,y pairs)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use @B_android#graphics#Matrix#mapPoints_E@ if you want the translation to be applied.", "history": "Added in API level 1", "FullName": "public void mapVectors (float[] dst, float[] src)"}, "setRotate(float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "added in API level 1", "FullName": "public void setRotate (float degrees, float px, float py)"}, "setPolyToPoly(float[], int, float[], int, int)": {"Returns": [["boolean", "true if the matrix was set to the specified transformation"]], "Parameters": [["float[]", "float: The array of src [x,y] pairs (points)"], ["int", "int: Index of the first pair of src values"], ["float[]", "float: The array of dst [x,y] pairs (points)"], ["int", "int: Index of the first pair of dst values"], ["int", "int: The number of pairs/points to be used. Must be [0..4]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix such that the specified src points would map to the specified dst points. The \"points\" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each \"point\" is 2 float values.", "history": "added in API level 1", "FullName": "public boolean setPolyToPoly (float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)"}, "preSkew(float, float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified skew. M' = M * K(kx, ky, px, py)", "history": "added in API level 1", "FullName": "public boolean preSkew (float kx, float ky, float px, float py)"}, "postSkew(float, float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified skew. M' = K(kx, ky, px, py) * M", "history": "added in API level 1", "FullName": "public boolean postSkew (float kx, float ky, float px, float py)"}, "mapVectors(float[],int,float[],int,int)": {"Returns": [], "Parameters": [["float[]", "float: The array of dst vectors (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of dst floats"], ["float[]", "float: The array of src vectors (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of src floats"], ["int", "int: The number of vectors (x,y pairs) to transform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use @B_android#graphics#Matrix#mapPoints_E@ if you want the translation to be applied.", "history": "Added in API level 1", "FullName": "public void mapVectors (float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount)"}, "setSkew(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to skew by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "Added in API level 1", "FullName": "public void setSkew (float kx, float ky, float px, float py)"}, "getValues(float[])": {"Returns": [], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy 9 values from the matrix into the array.", "history": "Added in API level 1", "FullName": "public void getValues (float[] values)"}, "setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix.ScaleToFit)": {"Returns": [["boolean", "true if the matrix can be represented by the rectangle mapping."]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: the source rectangle to map from."], ["@B_android#graphics#RectF_E@", "RectF: the destination rectangle to map to."], ["@B_android#graphics#Matrix#ScaleToFit_E@", "Matrix.ScaleToFit: the ScaleToFit option"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to the scale and translate values that map the source rectangle to the destination rectangle, returning true if the the result can be represented.", "history": "Added in API level 1", "FullName": "public boolean setRectToRect (RectF src, RectF dst, Matrix.ScaleToFit stf)"}, "preScale(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified scale. M' = M * S(sx, sy)", "history": "added in API level 1", "FullName": "public boolean preScale (float sx, float sy)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff obj is a Matrix and its values equal our values.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "mapRect(android.graphics.RectF)": {"Returns": [["boolean", "the result of calling rectStaysRect()"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: The rectangle to transform."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the rectangle, and write the transformed rectangle back into it. This is accomplished by transforming the 4 corners of rect, and then setting it to the bounds of those points", "history": "Added in API level 1", "FullName": "public boolean mapRect (RectF rect)"}, "preRotate(float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified rotation. M' = M * R(degrees, px, py)", "history": "Added in API level 1", "FullName": "public boolean preRotate (float degrees, float px, float py)"}, "setRotate(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate about (0,0) by the specified number of degrees.", "history": "Added in API level 1", "FullName": "public void setRotate (float degrees)"}, "setRotate(float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified number of degrees, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "Added in API level 1", "FullName": "public void setRotate (float degrees, float px, float py)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "preScale(float,float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified scale. M' = M * S(sx, sy, px, py)", "history": "Added in API level 1", "FullName": "public boolean preScale (float sx, float sy, float px, float py)"}, "postScale(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified scale. M' = S(sx, sy) * M", "history": "Added in API level 1", "FullName": "public boolean postScale (float sx, float sy)"}, "set(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "(deep) copy the src matrix into this matrix. If src is null, reset this matrix to the identity matrix.", "history": "Added in API level 1", "FullName": "public void set (Matrix src)"}, "setScale(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to scale by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "Added in API level 1", "FullName": "public void setScale (float sx, float sy, float px, float py)"}, "setSkew(float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to skew by sx and sy.", "history": "added in API level 1", "FullName": "public void setSkew (float kx, float ky)"}, "setSinCos(float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified sine and cosine values.", "history": "Added in API level 1", "FullName": "public void setSinCos (float sinValue, float cosValue)"}, "postRotate(float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified rotation. M' = R(degrees, px, py) * M", "history": "added in API level 1", "FullName": "public boolean postRotate (float degrees, float px, float py)"}, "postSkew(float,float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified skew. M' = K(kx, ky, px, py) * M", "history": "Added in API level 1", "FullName": "public boolean postSkew (float kx, float ky, float px, float py)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "toShortString()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String toShortString ()"}, "preTranslate(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified translation. M' = M * T(dx, dy)", "history": "Added in API level 1", "FullName": "public boolean preTranslate (float dx, float dy)"}, "setConcat(android.graphics.Matrix,android.graphics.Matrix)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"], ["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to the concatenation of the two specified matrices and return true. Either of the two matrices may also be the target matrix, that is matrixA.setConcat(matrixA, matrixB); is valid. In @B_android#os#Build#VERSION_CODES#GINGERBREAD_MR1_E@ and below, this function returns true only if the result can be represented. In @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@ and above, it always returns true.", "history": "Added in API level 1", "FullName": "public boolean setConcat (Matrix a, Matrix b)"}, "mapPoints(float[], int, float[], int, int)": {"Returns": [], "Parameters": [["float[]", "float: The array of dst points (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of dst floats"], ["float[]", "float: The array of src points (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of src floats"], ["int", "int: The number of points (x,y pairs) to transform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their \"points\" as pairs of floats [x, y].", "history": "added in API level 1", "FullName": "public void mapPoints (float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)"}, "mapPoints(float[],int,float[],int,int)": {"Returns": [], "Parameters": [["float[]", "float: The array of dst points (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of dst floats"], ["float[]", "float: The array of src points (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of src floats"], ["int", "int: The number of points (x,y pairs) to transform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their \"points\" as pairs of floats [x, y].", "history": "Added in API level 1", "FullName": "public void mapPoints (float[] dst, int dstIndex, float[] src, int srcIndex, int pointCount)"}, "setSinCos(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "added in API level 1", "FullName": "public void setSinCos (float sinValue, float cosValue, float px, float py)"}, "mapVectors(float[], int, float[], int, int)": {"Returns": [], "Parameters": [["float[]", "float: The array of dst vectors (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of dst floats"], ["float[]", "float: The array of src vectors (x,y pairs)"], ["int", "int: The index of the first [x,y] pair of src floats"], ["int", "int: The number of vectors (x,y pairs) to transform"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D vectors specified by src, and write the transformed vectors into the array of vectors specified by dst. The two arrays represent their \"vectors\" as pairs of floats [x, y]. Note: this method does not apply the translation associated with the matrix. Use @B_android#graphics#Matrix#mapPoints_E@ if you want the translation to be applied.", "history": "added in API level 1", "FullName": "public void mapVectors (float[] dst, int dstIndex, float[] src, int srcIndex, int vectorCount)"}, "mapPoints(float[])": {"Returns": [], "Parameters": [["float[]", "float: The array [x0, y0, x1, y1, ...] of points to transform."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D points, and write the transformed points back into the array", "history": "Added in API level 1", "FullName": "public void mapPoints (float[] pts)"}, "preRotate(float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified rotation. M' = M * R(degrees)", "history": "Added in API level 1", "FullName": "public boolean preRotate (float degrees)"}, "preSkew(float,float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified skew. M' = M * K(kx, ky, px, py)", "history": "Added in API level 1", "FullName": "public boolean preSkew (float kx, float ky, float px, float py)"}, "preConcat(android.graphics.Matrix)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified matrix. M' = M * other", "history": "Added in API level 1", "FullName": "public boolean preConcat (Matrix other)"}, "rectStaysRect()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if will map a rectangle to another rectangle. This can be true if the matrix is identity, scale-only, or rotates a multiple of 90 degrees.", "history": "Added in API level 1", "FullName": "public boolean rectStaysRect ()"}, "postScale(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified scale. M' = S(sx, sy) * M", "history": "added in API level 1", "FullName": "public boolean postScale (float sx, float sy)"}, "postRotate(float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified rotation. M' = R(degrees) * M", "history": "Added in API level 1", "FullName": "public boolean postRotate (float degrees)"}, "preScale(float, float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified scale. M' = M * S(sx, sy, px, py)", "history": "added in API level 1", "FullName": "public boolean preScale (float sx, float sy, float px, float py)"}, "preRotate(float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified rotation. M' = M * R(degrees, px, py)", "history": "added in API level 1", "FullName": "public boolean preRotate (float degrees, float px, float py)"}, "mapPoints(float[],float[])": {"Returns": [], "Parameters": [["float[]", "float: The array of dst points (x,y pairs)"], ["float[]", "float: The array of src points (x,y pairs)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their \"points\" as pairs of floats [x, y].", "history": "Added in API level 1", "FullName": "public void mapPoints (float[] dst, float[] src)"}, "setTranslate(float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to translate by (dx, dy).", "history": "added in API level 1", "FullName": "public void setTranslate (float dx, float dy)"}, "postSkew(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified skew. M' = K(kx, ky) * M", "history": "Added in API level 1", "FullName": "public boolean postSkew (float kx, float ky)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to identity", "history": "Added in API level 1", "FullName": "public void reset ()"}, "mapVectors(float[])": {"Returns": [], "Parameters": [["float[]", "float: The array [x0, y0, x1, y1, ...] of vectors to transform."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D vectors, and write the transformed vectors back into the array. Note: this method does not apply the translation associated with the matrix. Use @B_android#graphics#Matrix#mapPoints_E@ if you want the translation to be applied.", "history": "Added in API level 1", "FullName": "public void mapVectors (float[] vecs)"}, "postScale(float,float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified scale. M' = S(sx, sy, px, py) * M", "history": "Added in API level 1", "FullName": "public boolean postScale (float sx, float sy, float px, float py)"}, "preSkew(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified skew. M' = M * K(kx, ky)", "history": "Added in API level 1", "FullName": "public boolean preSkew (float kx, float ky)"}, "preTranslate(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified translation. M' = M * T(dx, dy)", "history": "added in API level 1", "FullName": "public boolean preTranslate (float dx, float dy)"}, "isAffine()": {"Returns": [["boolean", "Whether the matrix is affine."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this matrix is affine. An affine matrix preserves straight lines and has no perspective.", "history": "Added in API level 21", "FullName": "public boolean isAffine ()"}, "preScale(float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Preconcats the matrix with the specified scale. M' = M * S(sx, sy)", "history": "Added in API level 1", "FullName": "public boolean preScale (float sx, float sy)"}, "mapRect(android.graphics.RectF,android.graphics.RectF)": {"Returns": [["boolean", "the result of calling rectStaysRect()"]], "Parameters": [["@B_android#graphics#RectF_E@", "RectF: Where the transformed rectangle is written."], ["@B_android#graphics#RectF_E@", "RectF: The original rectangle to be transformed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the src rectangle, and write the transformed rectangle into dst. This is accomplished by transforming the 4 corners of src, and then setting dst to the bounds of those points.", "history": "Added in API level 1", "FullName": "public boolean mapRect (RectF dst, RectF src)"}, "postSkew(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified skew. M' = K(kx, ky) * M", "history": "added in API level 1", "FullName": "public boolean postSkew (float kx, float ky)"}, "mapRadius(float)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the mean radius of a circle after it has been mapped by this matrix. NOTE: in perspective this value assumes the circle has its center at the origin.", "history": "Added in API level 1", "FullName": "public float mapRadius (float radius)"}, "invert(android.graphics.Matrix)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this matrix can be inverted, return true and if inverse is not null, set inverse to be the inverse of this matrix. If this matrix cannot be inverted, ignore inverse and return false.", "history": "Added in API level 1", "FullName": "public boolean invert (Matrix inverse)"}, "setScale(float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to scale by sx and sy.", "history": "Added in API level 1", "FullName": "public void setScale (float sx, float sy)"}, "setTranslate(float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to translate by (dx, dy).", "history": "Added in API level 1", "FullName": "public void setTranslate (float dx, float dy)"}, "isIdentity()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the matrix is identity. This maybe faster than testing if (getType() == 0)", "history": "Added in API level 1", "FullName": "public boolean isIdentity ()"}, "Matrix(android.graphics.Matrix)": {"Returns": [], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix: The matrix to copy into this matrix"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a matrix that is a (deep) copy of src", "history": "Added in API level 1", "FullName": "public Matrix (Matrix src)"}, "postScale(float, float, float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified scale. M' = S(sx, sy, px, py) * M", "history": "added in API level 1", "FullName": "public boolean postScale (float sx, float sy, float px, float py)"}, "setSinCos(float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified sine and cosine values.", "history": "added in API level 1", "FullName": "public void setSinCos (float sinValue, float cosValue)"}, "mapPoints(float[], float[])": {"Returns": [], "Parameters": [["float[]", "float: The array of dst points (x,y pairs)"], ["float[]", "float: The array of src points (x,y pairs)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apply this matrix to the array of 2D points specified by src, and write the transformed points into the array of points specified by dst. The two arrays represent their \"points\" as pairs of floats [x, y].", "history": "added in API level 1", "FullName": "public void mapPoints (float[] dst, float[] src)"}, "setSkew(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to skew by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "added in API level 1", "FullName": "public void setSkew (float kx, float ky, float px, float py)"}, "setSinCos(float,float,float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to rotate by the specified sine and cosine values, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "Added in API level 1", "FullName": "public void setSinCos (float sinValue, float cosValue, float px, float py)"}, "postTranslate(float, float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified translation. M' = T(dx, dy) * M", "history": "added in API level 1", "FullName": "public boolean postTranslate (float dx, float dy)"}, "setPolyToPoly(float[],int,float[],int,int)": {"Returns": [["boolean", "true if the matrix was set to the specified transformation"]], "Parameters": [["float[]", "float: The array of src [x,y] pairs (points)"], ["int", "int: Index of the first pair of src values"], ["float[]", "float: The array of dst [x,y] pairs (points)"], ["int", "int: Index of the first pair of dst values"], ["int", "int: The number of pairs/points to be used. Must be [0..4]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix such that the specified src points would map to the specified dst points. The \"points\" are represented as an array of floats, order [x0, y0, x1, y1, ...], where each \"point\" is 2 float values.", "history": "Added in API level 1", "FullName": "public boolean setPolyToPoly (float[] src, int srcIndex, float[] dst, int dstIndex, int pointCount)"}, "Matrix()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create an identity matrix", "history": "Added in API level 1", "FullName": "public Matrix ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Javafinalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "void finalize ()"}, "setSkew(float,float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to skew by sx and sy.", "history": "Added in API level 1", "FullName": "public void setSkew (float kx, float ky)"}, "postConcat(android.graphics.Matrix)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#graphics#Matrix_E@", "Matrix no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified matrix. M' = other * M", "history": "Added in API level 1", "FullName": "public boolean postConcat (Matrix other)"}, "setScale(float, float, float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the matrix to scale by sx and sy, with a pivot point at (px, py). The pivot point is the coordinate that should remain unchanged by the specified transformation.", "history": "added in API level 1", "FullName": "public void setScale (float sx, float sy, float px, float py)"}, "postRotate(float,float,float)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Postconcats the matrix with the specified rotation. M' = R(degrees, px, py) * M", "history": "Added in API level 1", "FullName": "public boolean postRotate (float degrees, float px, float py)"}}, "Inheritance": [], "ClassName": "android.graphics.Matrix", "ClassDesc": "The Matrix class holds a 3x3 matrix for transforming coordinates."}