{"Functions": {"getChars(int, int, char[], int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["char[]", "char no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Exactly like String.getChars(): copy chars start through end - 1 from this CharSequence into dest beginning at offset destoff.", "history": "added in API level 1", "FullName": "public final void getChars (int start, int end, char[] dest, int off)"}, "subSequence(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "Added in API level 1", "FullName": "public final CharSequence subSequence (int start, int end)"}, "setSpan(java.lang.Object,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach the specified markup object to the range start\u2026end of the text, or move the object to that range if it was already attached elsewhere. See @B_android#text#Spanned_E@ for an explanation of what the flags mean. The object can be one that has meaning only within your application, or it can be one that the text system will use to affect text display or behavior. Some noteworthy ones are the subclasses of @B_android#text#style#CharacterStyle_E@ and @B_android#text#style#ParagraphStyle_E@, and @B_android#text#TextWatcher_E@ and @B_android#text#SpanWatcher_E@.", "history": "Added in API level 1", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "getSpanEnd(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the end of the range of text to which the specified markup object is attached, or -1 if the object is not attached.", "history": "added in API level 1", "FullName": "public int getSpanEnd (Object what)"}, "nextSpanTransition(int, int, java.lang.Class)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the first offset greater than start where a markup object of class type begins or ends, or limit if there are no starts or ends greater than start but less than limit. Specify null or Object.class for the type if you want every transition regardless of type.", "history": "added in API level 1", "FullName": "public int nextSpanTransition (int start, int limit, Class kind)"}, "charAt(int)": {"Returns": [["char", "the specified char value"]], "Parameters": [["int", "int: the index of the char value to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the char value at the specified index. An index ranges from zero to char value of the sequence is at index zero, the next at index one, and so on, as for array indexing. If the char value specified by the index is a", "history": "added in API level 1", "FullName": "public final char charAt (int i)"}, "subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a subsequence of this sequence. The subsequence starts with the char value at the specified index and ends with the char value at index chars) of the returned sequence is", "history": "added in API level 1", "FullName": "public final CharSequence subSequence (int start, int end)"}, "removeSpan(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the specified object from the range of text to which it was attached, if any. It is OK to remove an object that was never attached in the first place.", "history": "Added in API level 1", "FullName": "public void removeSpan (Object what)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "added in API level 1", "FullName": "public final String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "added in API level 1", "FullName": "public boolean equals (Object o)"}, "setSpan(java.lang.Object, int, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "getSpans(int, int, java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the markup objects attached to the specified slice of this CharSequence and whose type is the specified type or a subclass of it. Specify Object.class for the type if you want all the objects regardless of type.", "history": "added in API level 1", "FullName": "public T[] getSpans (int queryStart, int queryEnd, Class<T> kind)"}, "getSpanStart(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the beginning of the range of text to which the specified markup object is attached, or -1 if the object is not attached.", "history": "added in API level 1", "FullName": "public int getSpanStart (Object what)"}, "SpannableString(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: source text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For the backward compatibility reasons, this constructor copies all spans including @B_android#text#NoCopySpan_E@.", "history": "Added in API level 1", "FullName": "public SpannableString (CharSequence source)"}, "length()": {"Returns": [["int", "the number of chars in this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this character sequence. The length is the number of 16-bit chars in the sequence.", "history": "added in API level 1", "FullName": "public final int length ()"}, "getSpanFlags(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the flags that were specified when @B_android#text#Spannable#setSpan_E@ was used to attach the specified markup object, or 0 if the specified object has not been attached.", "history": "added in API level 1", "FullName": "public int getSpanFlags (Object what)"}, "valueOf(java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableString_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static SpannableString valueOf (CharSequence source)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.text.SpannableString", "ClassDesc": "This is the class for text whose content is immutable but to which markup objects can be attached and detached. For mutable text, see @B_android#text#SpannableStringBuilder_E@."}