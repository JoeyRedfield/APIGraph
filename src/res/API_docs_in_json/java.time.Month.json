{"Functions": {"getDisplayName(java.time.format.TextStyle,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the text value of the month-of-year, not null"]], "Parameters": [["@B_java#time#format#TextStyle_E@", "TextStyle: the length of the text required, not null"], ["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the textual representation, such as 'Jan' or 'December'. This returns the textual name used to identify the month-of-year, suitable for presentation to the user. The parameters control the style of the returned text and the locale. If no textual mapping is found then the @B_java#time#Month#getValue_E@ is returned.", "history": "Added in API level 26", "FullName": "public String getDisplayName (TextStyle style, Locale locale)"}, "firstDayOfYear(boolean)": {"Returns": [["int", "the day of year corresponding to the first day of this month, from 1 to 336"]], "Parameters": [["boolean", "boolean: true if the length is required for a leap year"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-year corresponding to the first day of this month. This returns the day-of-year that this month begins on, using the leap year flag to determine the length of February.", "history": "Added in API level 26", "FullName": "public int firstDayOfYear (boolean leapYear)"}, "maxLength()": {"Returns": [["int", "the maximum length of this month in days, from 29 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the maximum length of this month in days. February has a maximum length of 29 days. April, June, September and November have 30 days. All other months have 31 days.", "history": "Added in API level 26", "FullName": "public int maxLength ()"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this month-of-year, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this month-of-year can be queried for the specified field. If false, then calling the @B_java#time#Month#range_E@ and @B_java#time#Month#get_E@ methods will throw an exception. If the field is @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ then this method returns true. All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This month is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ then the range of the month-of-year, from 1 to 12, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this month-of-year using the specified query. This queries this month-of-year using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "length(boolean)": {"Returns": [["int", "the length of this month in days, from 28 to 31"]], "Parameters": [["boolean", "boolean: true if the length is required for a leap year"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the length of this month in days. This takes a flag to determine whether to return the length for a leap year or not. February has 28 days in a standard year and 29 days in a leap year. April, June, September and November have 30 days. All other months have 31 days.", "history": "Added in API level 26", "FullName": "public int length (boolean leapYear)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have this month-of-year. This returns a temporal object of the same observable type as the input with the month-of-year changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ as the field. If the specified temporal object does not use the ISO calendar system then a DateTimeException is thrown. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: For example, given a date in May, the following are output: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "plus(long)": {"Returns": [["@B_java#time#Month_E@", "the resulting month, not null"]], "Parameters": [["long", "long: the months to add, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the month-of-year that is the specified number of quarters after this one. The calculation rolls around the end of the year from December to January. The specified period may be negative. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Month plus (long months)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a Month"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Month from a temporal object. This obtains a month based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of Month. The conversion extracts the @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ field. The extraction is only permitted if the temporal object has an ISO chronology, or can be converted to a LocalDate. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, Month::from.", "history": "Added in API level 26", "FullName": "public static Month from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field, within the valid range of values"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this month-of-year as an int. This queries this month for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ then the value of the month-of-year, from 1 to 12, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "getValue()": {"Returns": [["int", "the month-of-year, from 1 (January) to 12 (December)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the month-of-year int value. The values are numbered following the ISO-8601 standard, from 1 (January) to 12 (December).", "history": "Added in API level 26", "FullName": "public int getValue ()"}, "firstMonthOfQuarter()": {"Returns": [["@B_java#time#Month_E@", "the first month of the quarter corresponding to this month, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the month corresponding to the first month of this quarter. The year can be divided into four quarters. This method returns the first month of the quarter for the base month. January, February and March return January. April, May and June return April. July, August and September return July. October, November and December return October.", "history": "Added in API level 26", "FullName": "public Month firstMonthOfQuarter ()"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this month-of-year as a long. This queries this month for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#MONTH_OF_YEAR_E@ then the value of the month-of-year, from 1 to 12, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#Month_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static Month valueOf (String name)"}, "values()": {"Returns": [["@B_java#time#Month_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static final Month[] values ()"}, "of(int)": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of Month from an int value. Month is an enum representing the 12 months of the year. This factory allows the enum to be obtained from the int value. The int value follows the ISO-8601 standard, from 1 (January) to 12 (December).", "history": "Added in API level 26", "FullName": "public static Month of (int month)"}, "minLength()": {"Returns": [["int", "the minimum length of this month in days, from 28 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minimum length of this month in days. February has a minimum length of 28 days. April, June, September and November have 30 days. All other months have 31 days.", "history": "Added in API level 26", "FullName": "public int minLength ()"}, "minus(long)": {"Returns": [["@B_java#time#Month_E@", "the resulting month, not null"]], "Parameters": [["long", "long: the months to subtract, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the month-of-year that is the specified number of months before this one. The calculation rolls around the start of the year from January to December. The specified period may be negative. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Month minus (long months)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.time.Month", "ClassDesc": "A month-of-year, such as 'July'. Month is an enum representing the 12 months of the year - January, February, March, April, May, June, July, August, September, October, November and December. In addition to the textual enum name, each month-of-year has an int value. The int value follows normal usage and the ISO-8601 standard, from 1 (January) to 12 (December). It is recommended that applications use the enum rather than the int value to ensure code clarity. This enum represents a common concept that is found in many calendar systems. As such, this enum may be used by any calendar system that has the month-of-year concept defined exactly equivalent to the ISO-8601 calendar system."}