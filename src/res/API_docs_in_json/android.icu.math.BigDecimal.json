{"Functions": {"divideInteger(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the integer part of this/rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the integer division."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is the integer part of this/rhs. The same as @B_android#icu#math#BigDecimal#divideInteger_E@, where the BigDecimal is rhs , and the context is new MathContext(0, MathContext.PLAIN).", "history": "Added in API level 24", "FullName": "public BigDecimal divideInteger (BigDecimal rhs)"}, "longValueExact()": {"Returns": [["long", "A long equal in value to this."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this has a non-zero decimal part, or will not fit in a long."]], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a long. If the BigDecimal has a non-zero decimal part or is out of the possible range for a long (64-bit signed integer) result then an ArithmeticException is thrown.", "history": "Added in API level 24", "FullName": "public long longValueExact ()"}, "BigDecimal(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The String to be converted."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the parameter is not a valid number."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from a String. Constructs a BigDecimal from the parameter, which must not be null and must represent a valid @B_android#icu#math#BigDecimal_E@. In summary, numbers in String form must have at least one digit, may have a leading sign, may have a decimal point, and exponential notation may be used. They follow conventional syntax, and may not contain blanks. Some valid strings from which a BigDecimal might be constructed are: (Exponential notation means that the number includes an optional sign and a power of ten following an 'E' that indicates how the decimal point will be shifted. Thus the \"4E+9\" above is just a short way of writing 4000000000, and the \"0.73e-7\" is short for 0.000000073.) The BigDecimal constructed from the String is in a standard form, with no blanks, as though the @B_android#icu#math#BigDecimal#add_E@ method had been used to add zero to the number with unlimited precision. If the string uses exponential notation (that is, includes an e or an E), then the BigDecimal number will be expressed in scientific notation (where the power of ten is adjusted so there is a single non-zero digit to the left of the decimal point); in this case if the number is zero then it will be expressed as the single digit 0, and if non-zero it will have an exponent unless that exponent would be 0. The exponent must fit in nine digits both before and after it is expressed in scientific notation. Any digits in the parameter must be decimal; that is, Character.digit(c, 10) (where c is the character in question) would not return -1.", "history": "Added in API level 24", "FullName": "public BigDecimal (String string)"}, "min(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the minimum of this and rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the minimum of this and rhs. Returns the smaller of the current object and the first parameter. If calling the @B_android#icu#math#BigDecimal#compareTo_E@ method with the same parameters would return -1 or 0, then the result of calling the @B_android#icu#math#BigDecimal#plus_E@ method on the current object (using the same MathContext parameter) is returned. Otherwise, the result of calling the @B_android#icu#math#BigDecimal#plus_E@ method on the first parameter object (using the same MathContext parameter) is returned.", "history": "Added in API level 24", "FullName": "public BigDecimal min (BigDecimal rhs, MathContext set)"}, "subtract(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this-rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the subtraction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this-rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#subtract_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN). The length of the decimal part (the scale) of the result will be the maximum of the scales of the two operands.", "history": "Added in API level 24", "FullName": "public BigDecimal subtract (BigDecimal rhs)"}, "doubleValue()": {"Returns": [["double", "A double corresponding to this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a double. If the BigDecimal is out of the possible range for a double (64-bit signed floating point) result then an ArithmeticException is thrown. The double produced is identical to result of expressing the BigDecimal as a String and then converting it using the Double(String) constructor; this can result in values of Double.NEGATIVE_INFINITY or Double.POSITIVE_INFINITY.", "history": "Added in API level 24", "FullName": "public double doubleValue ()"}, "format(int,int)": {"Returns": [["@B_java#lang#String_E@", "A String representing this BigDecimal, laid out according to the specified parameters"]], "Parameters": [["int", "int: The int specifying the number of places before the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places after the decimal point. Use -1 for 'as many as are needed'."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the number cannot be laid out as requested."], ["@B_java#lang#IllegalArgumentException_E@", "if a parameter is out of range."]], "SeeAlso": ["@B_android#icu#math#BigDecimal#toString_E@", "@B_android#icu#math#BigDecimal#toCharArray_E@"], "Permissions": [], "Description": "Returns the String representation of this BigDecimal, modified by layout parameters. The parameters, for both forms of the format method are all of type int. A value of -1 for any parameter indicates that the default action or value for that parameter should be used. The parameters, before and after, specify the number of characters to be used for the integer part and decimal part of the result respectively. Exponential notation is not used. If either parameter is -1 (which indicates the default action), the number of characters used will be exactly as many as are needed for that part. before must be a positive number; if it is larger than is needed to contain the integer part, that part is padded on the left with blanks to the requested length. If before is not large enough to contain the integer part of the number (including the sign, for negative numbers) an exception is thrown. after must be a non-negative number; if it is not the same size as the decimal part of the number, the number will be rounded (or extended with zeros) to fit. Specifying 0 for after will cause the number to be rounded to an integer (that is, it will have no decimal part or decimal point). The rounding method will be the default, MathContext.ROUND_HALF_UP. Other rounding methods, and the use of exponential notation, can be selected by using @B_android#icu#math#BigDecimal#format_E@. Using the two-parameter form of the method has exactly the same effect as using the six-parameter form with the final four parameters all being -1.", "history": "Added in API level 24", "FullName": "public String format (int before, int after)"}, "abs(android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the absolute value of this BigDecimal."]], "Parameters": [["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the absolute value of this BigDecimal. If the current object is zero or positive, then the same result as invoking the @B_android#icu#math#BigDecimal#plus_E@ method with the same parameter is returned. Otherwise, the same result as invoking the @B_android#icu#math#BigDecimal#negate_E@ method with the same parameter is returned.", "history": "Added in API level 24", "FullName": "public BigDecimal abs (MathContext set)"}, "min(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the minimum of this and rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is the minimum of this and rhs. The same as @B_android#icu#math#BigDecimal#min_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN).", "history": "Added in API level 24", "FullName": "public BigDecimal min (BigDecimal rhs)"}, "BigDecimal(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: The char[] array containing the number to be converted."], ["int", "int: The int offset into the array of the start of the number to be converted."], ["int", "int: The int length of the number."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the parameter is not a valid number for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from an array of characters. Constructs a BigDecimal as though a String had been constructed from the character array (or a subarray of that array) and the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor had then been used. The first parameter must not be null, and the subarray must be wholly contained within it. Using this constructor is faster than using the BigDecimal(String) constructor if the string is already available within a character array.", "history": "Added in API level 24", "FullName": "public BigDecimal (char[] inchars, int offset, int length)"}, "divideInteger(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the integer part of this/rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the integer division."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if the result will not fit in the number of digits specified for the context."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the integer part of this/rhs. Implements the integer division operator (as defined in the decimal documentation, see @B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal divideInteger (BigDecimal rhs, MathContext set)"}, "BigDecimal(java.math.BigDecimal)": {"Returns": [], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: The BigDecimal to be translated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from a java.math.BigDecimal. Constructs a BigDecimal as though the parameter had been represented as a String (using its toString method) and the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor had then been used. The parameter must not be null.", "history": "Added in API level 24", "FullName": "public BigDecimal (BigDecimal bd)"}, "valueOf(long,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The BigDecimal equal in value to lint."]], "Parameters": [["long", "long: The long to be translated."], ["int", "int: The int scale to be applied."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the scale is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a long to a BigDecimal with a given scale. That is, returns a plain BigDecimal whose unscaled value is equal to the given long, adjusted by the second parameter, scale. The result is given by: (new BigDecimal(lint)).divide(TEN.pow(new BigDecimal(scale))) A NumberFormatException is thrown if scale is negative.", "history": "Added in API level 24", "FullName": "public static BigDecimal valueOf (long lint, int scale)"}, "add(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this+rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the addition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this+rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#add_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN). The length of the decimal part (the scale) of the result will be the maximum of the scales of the two operands.", "history": "Added in API level 24", "FullName": "public BigDecimal add (BigDecimal rhs)"}, "BigDecimal(long)": {"Returns": [], "Parameters": [["long", "long: The long to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object directly from a long. Constructs a BigDecimal which is the exact decimal representation of the 64-bit signed binary integer parameter. The BigDecimal will contain only decimal digits, prefixed with a leading minus sign (hyphen) if the parameter is negative. A leading zero will be present only if the parameter is zero.", "history": "Added in API level 24", "FullName": "public BigDecimal (long num)"}, "plus()": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is +this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is +this. Note that this is not necessarily a plain BigDecimal, but the result will always be. The same as @B_android#icu#math#BigDecimal#plus_E@, where the context is new MathContext(0, MathContext.PLAIN). The length of the decimal part (the scale) of the result will be be this.scale()", "history": "Added in API level 24", "FullName": "public BigDecimal plus ()"}, "toCharArray()": {"Returns": [["char[]", "The char[] array corresponding to this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the BigDecimal as a character array. The result of this method is the same as using the sequence toString().toCharArray(), but avoids creating the intermediate String and char[] objects.", "history": "Added in API level 24", "FullName": "public char[] toCharArray ()"}, "longValue()": {"Returns": [["long", "A long converted from this, truncated and decapitated if necessary."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a long. If the BigDecimal has a non-zero decimal part it is discarded. If the BigDecimal is out of the possible range for a long (64-bit signed integer) result then only the low-order 64 bits are used. (That is, the number may be @B_android#icu#math#BigDecimal#longValueExact_E@ method.", "history": "Added in API level 24", "FullName": "public long longValue ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "A boolean whose value true if and only if the operands have identical string representations."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object for the right hand side of the comparison."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if rhs cannot be cast to a BigDecimal object."]], "SeeAlso": ["@B_android#icu#math#BigDecimal#compareTo_E@"], "Permissions": [], "Description": "Compares this BigDecimal with rhs for equality. If the parameter is null, or is not an instance of the BigDecimal type, or is not exactly equal to the current BigDecimal object, then \"Exactly equal\", here, means that the String representations of the BigDecimal numbers are identical (they have the same characters in the same sequence). The @B_android#icu#math#BigDecimal#compareTo_E@ method should be used for more general comparisons.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "multiply(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this*rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the multiplication."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this*rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#add_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN). The length of the decimal part (the scale) of the result will be the sum of the scales of the operands, if they were formatted without exponential notation.", "history": "Added in API level 24", "FullName": "public BigDecimal multiply (BigDecimal rhs)"}, "format(int, int)": {"Returns": [["@B_java#lang#String_E@", "A String representing this BigDecimal, laid out according to the specified parameters"]], "Parameters": [["int", "int: The int specifying the number of places before the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places after the decimal point. Use -1 for 'as many as are needed'."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the number cannot be laid out as requested."], ["@B_java#lang#IllegalArgumentException_E@", "if a parameter is out of range."]], "SeeAlso": ["@B_android#icu#math#BigDecimal#toString_E@", "@B_android#icu#math#BigDecimal#toCharArray_E@"], "Permissions": [], "Description": "Returns the String representation of this BigDecimal, modified by layout parameters. The parameters, for both forms of the format method are all of type int. A value of -1 for any parameter indicates that the default action or value for that parameter should be used. The parameters, before and after, specify the number of characters to be used for the integer part and decimal part of the result respectively. Exponential notation is not used. If either parameter is -1 (which indicates the default action), the number of characters used will be exactly as many as are needed for that part. before must be a positive number; if it is larger than is needed to contain the integer part, that part is padded on the left with blanks to the requested length. If before is not large enough to contain the integer part of the number (including the sign, for negative numbers) an exception is thrown. after must be a non-negative number; if it is not the same size as the decimal part of the number, the number will be rounded (or extended with zeros) to fit. Specifying 0 for after will cause the number to be rounded to an integer (that is, it will have no decimal part or decimal point). The rounding method will be the default, MathContext.ROUND_HALF_UP. Other rounding methods, and the use of exponential notation, can be selected by using @B_android#icu#math#BigDecimal#format_E@. Using the two-parameter form of the method has exactly the same effect as using the six-parameter form with the final four parameters all being -1.", "history": "added in API level 24", "FullName": "public String format (int before, int after)"}, "setScale(int, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal with the given scale."]], "Parameters": [["int", "int: The int specifying the scale of the resulting BigDecimal."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if scale is negative."], ["@B_java#lang#ArithmeticException_E@", "if round is MathContext.ROUND_UNNECESSARY, and reducing scale would discard non-zero digits."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal with a given scale. If the given scale (which must be zero or positive) is the same as or greater than the length of the decimal part (the scale) of this BigDecimal then trailing zeros will be added to the decimal part as necessary. If the given scale is less than the length of the decimal part (the scale) of this BigDecimal then trailing digits will be removed, and the rounding mode given by the second parameter is used to determine if the remaining digits are affected by a carry. In this case, an IllegalArgumentException is thrown if round is not a valid rounding mode. If round is MathContext.ROUND_UNNECESSARY, an ArithmeticException is thrown if any discarded digits are non-zero.", "history": "added in API level 24", "FullName": "public BigDecimal setScale (int scale, int round)"}, "hashCode()": {"Returns": [["int", "An int that is the hashcode for this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hashcode for this BigDecimal. This hashcode is suitable for use by the java.util.Hashtable class. Note that two BigDecimal objects are only guaranteed to produce the same hashcode if they are exactly equal (that is, the String representations of the BigDecimal numbers are identical -- they have the same characters in the same sequence).", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "BigDecimal(java.math.BigInteger,int)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: The BigInteger to be converted."], ["int", "int: The int specifying the scale."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the scale is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from a BigInteger and a scale. Constructs a BigDecimal which is the exact decimal representation of the BigInteger, scaled by the second parameter, which may not be negative. The value of the BigDecimal is the BigInteger divided by ten to the power of the scale. The BigInteger parameter must not be null. The BigDecimal will contain only decimal digits, (with an embedded decimal point followed by scale decimal digits if the scale is positive), prefixed with a leading minus sign (hyphen) if the BigInteger is negative. A leading zero will be present only if the BigInteger is zero.", "history": "Added in API level 24", "FullName": "public BigDecimal (BigInteger bi, int scale)"}, "setScale(int,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal with the given scale."]], "Parameters": [["int", "int: The int specifying the scale of the resulting BigDecimal."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if scale is negative."], ["@B_java#lang#ArithmeticException_E@", "if round is MathContext.ROUND_UNNECESSARY, and reducing scale would discard non-zero digits."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal with a given scale. If the given scale (which must be zero or positive) is the same as or greater than the length of the decimal part (the scale) of this BigDecimal then trailing zeros will be added to the decimal part as necessary. If the given scale is less than the length of the decimal part (the scale) of this BigDecimal then trailing digits will be removed, and the rounding mode given by the second parameter is used to determine if the remaining digits are affected by a carry. In this case, an IllegalArgumentException is thrown if round is not a valid rounding mode. If round is MathContext.ROUND_UNNECESSARY, an ArithmeticException is thrown if any discarded digits are non-zero.", "history": "Added in API level 24", "FullName": "public BigDecimal setScale (int scale, int round)"}, "remainder(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the remainder of this+rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the remainder operation."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if the integer part of the result will not fit in the number of digits specified for the context."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the remainder of this/rhs. Implements the remainder operator (as defined in the decimal documentation, see @B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object. This is not the modulo operator -- the result may be negative.", "history": "Added in API level 24", "FullName": "public BigDecimal remainder (BigDecimal rhs, MathContext set)"}, "max(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the maximum of this and rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the maximum of this and rhs. Returns the larger of the current object and the first parameter. If calling the @B_android#icu#math#BigDecimal#compareTo_E@ method with the same parameters would return 1 or 0, then the result of calling the @B_android#icu#math#BigDecimal#plus_E@ method on the current object (using the same MathContext parameter) is returned. Otherwise, the result of calling the @B_android#icu#math#BigDecimal#plus_E@ method on the first parameter object (using the same MathContext parameter) is returned.", "history": "Added in API level 24", "FullName": "public BigDecimal max (BigDecimal rhs, MathContext set)"}, "movePointRight(int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal derived from this, with the decimal point moved n places to the right."]], "Parameters": [["int", "int: The int specifying the number of places to move the decimal point rightwards."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose decimal point has been moved to the right by a specified number of positions. The parameter, n, specifies the number of positions to move the decimal point. That is, if n is 0 or positive, the number returned is given by: this.multiply(TEN.pow(new BigDecimal(n))) n may be negative, in which case the method returns the same result as movePointLeft(-n) .", "history": "Added in API level 24", "FullName": "public BigDecimal movePointRight (int n)"}, "valueOf(long)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The BigDecimal equal in value to lint."]], "Parameters": [["long", "long: The long to be translated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Translates a long to a BigDecimal. That is, returns a plain BigDecimal whose value is equal to the given long.", "history": "Added in API level 24", "FullName": "public static BigDecimal valueOf (long lint)"}, "subtract(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this-rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the subtraction."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is this-rhs. Implements the subtraction (@B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal subtract (BigDecimal rhs, MathContext set)"}, "valueOf(long, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The BigDecimal equal in value to lint."]], "Parameters": [["long", "long: The long to be translated."], ["int", "int: The int scale to be applied."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the scale is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a long to a BigDecimal with a given scale. That is, returns a plain BigDecimal whose unscaled value is equal to the given long, adjusted by the second parameter, scale. The result is given by: (new BigDecimal(lint)).divide(TEN.pow(new BigDecimal(scale))) A NumberFormatException is thrown if scale is negative.", "history": "added in API level 24", "FullName": "public static BigDecimal valueOf (long lint, int scale)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The String exactly corresponding to this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#math#BigDecimal#format_E@", "@B_android#icu#math#BigDecimal#toCharArray_E@"], "Permissions": [], "Description": "Returns the BigDecimal as a String. This returns a String that exactly represents this BigDecimal, as defined in the decimal documentation (see @B_android#icu#math#BigDecimal_E@). By definition, using the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor on the result String will create a BigDecimal that is exactly equal to the original BigDecimal.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "negate(android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is -this."]], "Parameters": [["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is -this. Implements the negation (Prefix @B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal negate (MathContext set)"}, "multiply(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this*rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the multiplication."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is this*rhs. Implements the multiplication (@B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal multiply (BigDecimal rhs, MathContext set)"}, "pow(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this**rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the operation (the power)."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is out of range or is not a whole number."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is this**rhs. Implements the power (@B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object. The first parameter is the power to which the this will be raised; it must be in the range -999999999 through 999999999, and must have a decimal part of zero. Note that these restrictions may be removed in the future, so they should not be used as a test for a whole number. If the digits setting of the MathContext parameter is 0, the power must be zero or positive.", "history": "Added in API level 24", "FullName": "public BigDecimal pow (BigDecimal rhs, MathContext set)"}, "setScale(int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal with the given scale."]], "Parameters": [["int", "int: The int specifying the scale of the resulting BigDecimal."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if scale is negative."], ["@B_java#lang#ArithmeticException_E@", "if reducing scale would discard non-zero digits."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal with a given scale. If the given scale (which must be zero or positive) is the same as or greater than the length of the decimal part (the scale) of this BigDecimal then trailing zeros will be added to the decimal part as necessary. If the given scale is less than the length of the decimal part (the scale) of this BigDecimal then trailing digits will be removed, and in this case an ArithmeticException is thrown if any discarded digits are non-zero. The same as @B_android#icu#math#BigDecimal#setScale_E@, where the first parameter is the scale, and the second is MathContext.ROUND_UNNECESSARY.", "history": "Added in API level 24", "FullName": "public BigDecimal setScale (int scale)"}, "max(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the maximum of this and rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is the maximum of this and rhs. The same as @B_android#icu#math#BigDecimal#max_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN).", "history": "Added in API level 24", "FullName": "public BigDecimal max (BigDecimal rhs)"}, "add(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this+rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the addition."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is this+rhs. Implements the addition (@B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal add (BigDecimal rhs, MathContext set)"}, "unscaledValue()": {"Returns": [["@B_java#math#BigInteger_E@", "The java.math.BigInteger equal in value to this BigDecimal multiplied by ten to the power of this.scale()."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number as a BigInteger after removing the scale. That is, the number is expressed as a plain number, any decimal point is then removed (retaining the digits of any decimal part), and the result is then converted to a BigInteger.", "history": "Added in API level 24", "FullName": "public BigInteger unscaledValue ()"}, "divide(android.icu.math.BigDecimal,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal whose value is this/rhs, using fixed point arithmetic and the specified rounding mode."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if round is @B_android#icu#math#MathContext#ROUND_UNNECESSARY_E@ and this.scale() is insufficient to represent the result exactly."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a rounding mode. The same as @B_android#icu#math#BigDecimal#divide_E@, where the BigDecimal is rhs, and the second parameter is this.scale(), and the third is round. The length of the decimal part (the scale) of the result will therefore be the same as the scale of the current object, if the latter were formatted without exponential notation.", "history": "Added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs, int round)"}, "toBigIntegerExact()": {"Returns": [["@B_java#math#BigInteger_E@", "The java.math.BigInteger equal in value to the integer part of this BigDecimal."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this has a non-zero decimal part."]], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a java.math.BigInteger. An exception is thrown if the decimal part (if any) is non-zero.", "history": "Added in API level 24", "FullName": "public BigInteger toBigIntegerExact ()"}, "valueOf(double)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "The BigDecimal equal in value to dub."]], "Parameters": [["double", "double: The double to be translated."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if the parameter is infinite or not a number."]], "SeeAlso": [], "Permissions": [], "Description": "Translates a double to a BigDecimal. Returns a BigDecimal which is the decimal representation of the 64-bit signed binary floating point parameter. If the parameter is infinite, or is not a number (NaN), a NumberFormatException is thrown. The number is constructed as though num had been converted to a String using the Double.toString() method and the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor had then been used. This is typically not an exact conversion.", "history": "Added in API level 24", "FullName": "public static BigDecimal valueOf (double dub)"}, "toBigDecimal()": {"Returns": [["@B_java#math#BigDecimal_E@", "The java.math.BigDecimal equal in value to this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a java.math.BigDecimal. This is an exact conversion; the result is the same as if the BigDecimal were formatted as a plain number without any rounding or exponent and then the java.math.BigDecimal(java.lang.String) constructor were used to construct the result.", "history": "Added in API level 24", "FullName": "public BigDecimal toBigDecimal ()"}, "intValue()": {"Returns": [["int", "An int converted from this, truncated and decapitated if necessary."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to an int. If the BigDecimal has a non-zero decimal part it is discarded. If the BigDecimal is out of the possible range for an int (32-bit signed integer) result then only the low-order 32 bits are used. (That is, the number may be @B_android#icu#math#BigDecimal#intValueExact_E@ method.", "history": "Added in API level 24", "FullName": "public int intValue ()"}, "remainder(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the remainder of this/rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the remainder operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is the remainder of this/rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#remainder_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN). This is not the modulo operator -- the result may be negative.", "history": "Added in API level 24", "FullName": "public BigDecimal remainder (BigDecimal rhs)"}, "format(int,int,int,int,int,int)": {"Returns": [["@B_java#lang#String_E@", "A String representing this BigDecimal, laid out according to the specified parameters"]], "Parameters": [["int", "int: The int specifying the number of places before the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places after the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places to be used for any exponent. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the trigger (digits before the decimal point) which if exceeded causes exponential notation to be used. Use 0 to force exponential notation. Use -1 to force plain notation (no exponential notation)."], ["int", "int: The int specifying the form of exponential notation to be used ( @B_android#icu#math#MathContext#SCIENTIFIC_E@ or @B_android#icu#math#MathContext#ENGINEERING_E@)."], ["int", "int: The int specifying the rounding mode to use. Use -1 for the default, @B_android#icu#math#MathContext#ROUND_HALF_UP_E@."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the number cannot be laid out as requested."], ["@B_java#lang#IllegalArgumentException_E@", "if a parameter is out of range."]], "SeeAlso": ["@B_android#icu#math#BigDecimal#toString_E@", "@B_android#icu#math#BigDecimal#toCharArray_E@"], "Permissions": [], "Description": "Returns the String representation of this BigDecimal, modified by layout parameters and allowing exponential notation. The parameters are all of type int. A value of -1 for any parameter indicates that the default action or value for that parameter should be used. The first two parameters (before and after) specify the number of characters to be used for the integer part and decimal part of the result respectively, as defined for @B_android#icu#math#BigDecimal#format_E@. If either of these is -1 (which indicates the default action), the number of characters used will be exactly as many as are needed for that part. The remaining parameters control the use of exponential notation and rounding. Three (explaces, exdigits, and exform) control the exponent part of the result. As before, the default action for any of these parameters may be selected by using the value -1. explaces must be a positive number; it sets the number of places (digits after the sign of the exponent) to be used for any exponent part, the default (when explaces is -1) being to use as many as are needed. If explaces is not -1, space is always reserved for an exponent; if one is not needed (for example, if the exponent will be 0) then explaces+2 blanks are appended to the result. (This preserves vertical alignment of similarly formatted numbers in a monospace font.) If explaces is not -1 and is not large enough to contain the exponent, an exception is thrown. exdigits sets the trigger point for use of exponential notation. If, before any rounding, the number of places needed before the decimal point exceeds exdigits, or if the absolute value of the result is less than 0.000001, then exponential form will be used, provided that exdigits was specified. When exdigits is -1, exponential notation will never be used. If 0 is specified for exdigits, exponential notation is always used unless the exponent would be 0. exform sets the form for exponential notation (if needed). It may be either @B_android#icu#math#MathContext#SCIENTIFIC_E@ or @B_android#icu#math#MathContext#ENGINEERING_E@. If the latter, engineering, form is requested, up to three digits (plus sign, if negative) may be needed for the integer part of the result (before ). Otherwise, only one digit (plus sign, if negative) is needed. Finally, the sixth argument, exround, selects the rounding algorithm to be used, and must be one of the values indicated by a public constant in the @B_android#icu#math#MathContext_E@ class whose name starts with ROUND_ . The default (ROUND_HALF_UP) may also be selected by using the value -1, as before. The special value MathContext.ROUND_UNNECESSARY may be used to detect whether non-zero digits are discarded -- if exround has this value than if non-zero digits would be discarded (rounded) during formatting then an ArithmeticException is thrown.", "history": "Added in API level 24", "FullName": "public String format (int before, int after, int explaces, int exdigits, int exformint, int exround)"}, "BigDecimal(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: The char[] array containing the number to be converted."], ["int", "int: The int offset into the array of the start of the number to be converted."], ["int", "int: The int length of the number."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the parameter is not a valid number for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from an array of characters. Constructs a BigDecimal as though a String had been constructed from the character array (or a subarray of that array) and the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor had then been used. The first parameter must not be null, and the subarray must be wholly contained within it. Using this constructor is faster than using the BigDecimal(String) constructor if the string is already available within a character array.", "history": "added in API level 24", "FullName": "public BigDecimal (char[] inchars, int offset, int length)"}, "divide(android.icu.math.BigDecimal, int, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal whose value is this/rhs, using fixed point arithmetic and the specified rounding mode."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."], ["int", "int: The int scale to be used for the result."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if scale is negative."], ["@B_java#lang#ArithmeticException_E@", "if round is @B_android#icu#math#MathContext#ROUND_UNNECESSARY_E@ and scale is insufficient to represent the result exactly."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a given scale and rounding mode. The same as @B_android#icu#math#BigDecimal#divide_E@, where the BigDecimal is rhs, new MathContext(0, MathContext.PLAIN, false, round), except that the length of the decimal part (the scale) to be used for the result is explicit rather than being taken from this. The length of the decimal part (the scale) of the result will be the same as the scale of the current object, if the latter were formatted without exponential notation.", "history": "added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs, int scale, int round)"}, "toBigInteger()": {"Returns": [["@B_java#math#BigInteger_E@", "The java.math.BigInteger equal in value to the integer part of this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a java.math.BigInteger. Any decimal part is truncated (discarded). If an exception is desired should the decimal part be non-zero, use @B_android#icu#math#BigDecimal#toBigIntegerExact_E@.", "history": "Added in API level 24", "FullName": "public BigInteger toBigInteger ()"}, "shortValueExact()": {"Returns": [["short", "A short equal in value to this."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this has a non-zero decimal part, or will not fit in a short."]], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a short. If the BigDecimal has a non-zero decimal part or is out of the possible range for a short (16-bit signed integer) result then an ArithmeticException is thrown.", "history": "Added in API level 24", "FullName": "public short shortValueExact ()"}, "BigDecimal(java.math.BigInteger, int)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: The BigInteger to be converted."], ["int", "int: The int specifying the scale."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the scale is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from a BigInteger and a scale. Constructs a BigDecimal which is the exact decimal representation of the BigInteger, scaled by the second parameter, which may not be negative. The value of the BigDecimal is the BigInteger divided by ten to the power of the scale. The BigInteger parameter must not be null. The BigDecimal will contain only decimal digits, (with an embedded decimal point followed by scale decimal digits if the scale is positive), prefixed with a leading minus sign (hyphen) if the BigInteger is negative. A leading zero will be present only if the BigInteger is zero.", "history": "added in API level 24", "FullName": "public BigDecimal (BigInteger bi, int scale)"}, "abs()": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is the absolute value of this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is the absolute value of this BigDecimal. The same as @B_android#icu#math#BigDecimal#abs_E@, where the context is new MathContext(0, MathContext.PLAIN). The length of the decimal part (the scale) of the result will be this.scale()", "history": "Added in API level 24", "FullName": "public BigDecimal abs ()"}, "BigDecimal(double)": {"Returns": [], "Parameters": [["double", "double: The double to be converted."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the parameter is infinite or not a number."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object directly from a double. Constructs a BigDecimal which is the exact decimal representation of the 64-bit signed binary floating point parameter. Note that this constructor it an exact conversion; it does not give the same result as converting num to a String using the Double.toString() method and then using the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor. To get that result, use the static @B_android#icu#math#BigDecimal#valueOf_E@ method to construct a BigDecimal from a double.", "history": "Added in API level 24", "FullName": "public BigDecimal (double num)"}, "compareTo(android.icu.math.BigDecimal)": {"Returns": [["int", "An int whose value is -1, 0, or 1 as this is numerically less than, equal to, or greater than rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this BigDecimal to another, using unlimited precision. The same as @B_android#icu#math#BigDecimal#compareTo_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN).", "history": "Added in API level 24", "FullName": "public int compareTo (BigDecimal rhs)"}, "BigDecimal(int)": {"Returns": [], "Parameters": [["int", "int: The int to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object directly from a int. Constructs a BigDecimal which is the exact decimal representation of the 32-bit signed binary integer parameter. The BigDecimal will contain only decimal digits, prefixed with a leading minus sign (hyphen) if the parameter is negative. A leading zero will be present only if the parameter is zero.", "history": "Added in API level 24", "FullName": "public BigDecimal (int num)"}, "byteValueExact()": {"Returns": [["byte", "A byte equal in value to this."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this has a non-zero decimal part, or will not fit in a byte."]], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a byte. If the BigDecimal has a non-zero decimal part or is out of the possible range for a byte (8-bit signed integer) result then an ArithmeticException is thrown.", "history": "Added in API level 24", "FullName": "public byte byteValueExact ()"}, "BigDecimal(char[])": {"Returns": [], "Parameters": [["char[]", "char: The char[] array containing the number to be converted."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "If the parameter is not a valid number."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from an array of characters. Constructs a BigDecimal as though a String had been constructed from the character array and the @B_android#icu#math#BigDecimal#BigDecimal_E@ constructor had then been used. The parameter must not be null. Using this constructor is faster than using the BigDecimal(String) constructor if the string is already available in character array form.", "history": "Added in API level 24", "FullName": "public BigDecimal (char[] inchars)"}, "negate()": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is -this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is -this. The same as @B_android#icu#math#BigDecimal#negate_E@, where the context is new MathContext(0, MathContext.PLAIN) . The length of the decimal part (the scale) of the result will be be this.scale()", "history": "Added in API level 24", "FullName": "public BigDecimal negate ()"}, "intValueExact()": {"Returns": [["int", "An int equal in value to this."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if this has a non-zero decimal part, or will not fit in an int."]], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to an int. If the BigDecimal has a non-zero decimal part or is out of the possible range for an int (32-bit signed integer) result then an ArithmeticException is thrown.", "history": "Added in API level 24", "FullName": "public int intValueExact ()"}, "BigDecimal(java.math.BigInteger)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: The BigInteger to be converted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a BigDecimal object from a BigInteger, with scale 0. Constructs a BigDecimal which is the exact decimal representation of the BigInteger, with a scale of zero. The value of the BigDecimal is identical to the value of the BigInteger . The parameter must not be null. The BigDecimal will contain only decimal digits, prefixed with a leading minus sign (hyphen) if the BigInteger is negative. A leading zero will be present only if the BigInteger is zero.", "history": "Added in API level 24", "FullName": "public BigDecimal (BigInteger bi)"}, "scale()": {"Returns": [["int", "An int whose value is the scale of this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the scale of this BigDecimal. Returns a non-negative int which is the scale of the number. The scale is the number of digits in the decimal part of the number if the number were formatted without exponential notation.", "history": "Added in API level 24", "FullName": "public int scale ()"}, "divide(android.icu.math.BigDecimal, int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal whose value is this/rhs, using fixed point arithmetic and the specified rounding mode."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if round is @B_android#icu#math#MathContext#ROUND_UNNECESSARY_E@ and this.scale() is insufficient to represent the result exactly."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a rounding mode. The same as @B_android#icu#math#BigDecimal#divide_E@, where the BigDecimal is rhs, and the second parameter is this.scale(), and the third is round. The length of the decimal part (the scale) of the result will therefore be the same as the scale of the current object, if the latter were formatted without exponential notation.", "history": "added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs, int round)"}, "signum()": {"Returns": [["int", "An int which is -1 if the BigDecimal is negative, 0 if it is numerically equal to zero, or 1 if it is positive."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sign of this BigDecimal, as an int. This returns the BigDecimal. That is, -1 if the BigDecimal is negative, 0 if it is numerically equal to zero, or 1 if it is positive.", "history": "Added in API level 24", "FullName": "public int signum ()"}, "plus(android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is +this."]], "Parameters": [["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is +this. Implements the plus (Prefix @B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object. This method is useful for rounding or otherwise applying a context to a decimal value.", "history": "Added in API level 24", "FullName": "public BigDecimal plus (MathContext set)"}, "movePointLeft(int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal derived from this, with the decimal point moved n places to the left."]], "Parameters": [["int", "int: The int specifying the number of places to move the decimal point leftwards."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose decimal point has been moved to the left by a specified number of positions. The parameter, n, specifies the number of positions to move the decimal point. That is, if n is 0 or positive, the number returned is given by: this.multiply(TEN.pow(new BigDecimal(-n))) n may be negative, in which case the method returns the same result as movePointRight(-n) .", "history": "Added in API level 24", "FullName": "public BigDecimal movePointLeft (int n)"}, "divide(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal whose value is this/rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "If rhs is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#divide_E@, where the BigDecimal is rhs, and the rounding mode is @B_android#icu#math#MathContext#ROUND_HALF_UP_E@. The length of the decimal part (the scale) of the result will be the same as the scale of the current object, if the latter were formatted without exponential notation.", "history": "Added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs)"}, "floatValue()": {"Returns": [["float", "A float corresponding to this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this BigDecimal to a float. If the BigDecimal is out of the possible range for a float (32-bit signed floating point) result then an ArithmeticException is thrown. The float produced is identical to result of expressing the BigDecimal as a String and then converting it using the Float(String) constructor; this can result in values of Float.NEGATIVE_INFINITY or Float.POSITIVE_INFINITY.", "history": "Added in API level 24", "FullName": "public float floatValue ()"}, "pow(android.icu.math.BigDecimal)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this**rhs, using fixed point arithmetic."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the operation (the power)."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is out of range or is not a whole number."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this**rhs, using fixed point arithmetic. The same as @B_android#icu#math#BigDecimal#pow_E@, where the BigDecimal is rhs, and the context is new MathContext(0, MathContext.PLAIN). The parameter is the power to which the this will be raised; it must be in the range 0 through 999999999, and must have a decimal part of zero. Note that these restrictions may be removed in the future, so they should not be used as a test for a whole number. In addition, the power must not be negative, as no MathContext is used and so the result would then always be 0.", "history": "Added in API level 24", "FullName": "public BigDecimal pow (BigDecimal rhs)"}, "format(int, int, int, int, int, int)": {"Returns": [["@B_java#lang#String_E@", "A String representing this BigDecimal, laid out according to the specified parameters"]], "Parameters": [["int", "int: The int specifying the number of places before the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places after the decimal point. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the number of places to be used for any exponent. Use -1 for 'as many as are needed'."], ["int", "int: The int specifying the trigger (digits before the decimal point) which if exceeded causes exponential notation to be used. Use 0 to force exponential notation. Use -1 to force plain notation (no exponential notation)."], ["int", "int: The int specifying the form of exponential notation to be used ( @B_android#icu#math#MathContext#SCIENTIFIC_E@ or @B_android#icu#math#MathContext#ENGINEERING_E@)."], ["int", "int: The int specifying the rounding mode to use. Use -1 for the default, @B_android#icu#math#MathContext#ROUND_HALF_UP_E@."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if the number cannot be laid out as requested."], ["@B_java#lang#IllegalArgumentException_E@", "if a parameter is out of range."]], "SeeAlso": ["@B_android#icu#math#BigDecimal#toString_E@", "@B_android#icu#math#BigDecimal#toCharArray_E@"], "Permissions": [], "Description": "Returns the String representation of this BigDecimal, modified by layout parameters and allowing exponential notation. The parameters are all of type int. A value of -1 for any parameter indicates that the default action or value for that parameter should be used. The first two parameters (before and after) specify the number of characters to be used for the integer part and decimal part of the result respectively, as defined for @B_android#icu#math#BigDecimal#format_E@. If either of these is -1 (which indicates the default action), the number of characters used will be exactly as many as are needed for that part. The remaining parameters control the use of exponential notation and rounding. Three (explaces, exdigits, and exform) control the exponent part of the result. As before, the default action for any of these parameters may be selected by using the value -1. explaces must be a positive number; it sets the number of places (digits after the sign of the exponent) to be used for any exponent part, the default (when explaces is -1) being to use as many as are needed. If explaces is not -1, space is always reserved for an exponent; if one is not needed (for example, if the exponent will be 0) then explaces+2 blanks are appended to the result. (This preserves vertical alignment of similarly formatted numbers in a monospace font.) If explaces is not -1 and is not large enough to contain the exponent, an exception is thrown. exdigits sets the trigger point for use of exponential notation. If, before any rounding, the number of places needed before the decimal point exceeds exdigits, or if the absolute value of the result is less than 0.000001, then exponential form will be used, provided that exdigits was specified. When exdigits is -1, exponential notation will never be used. If 0 is specified for exdigits, exponential notation is always used unless the exponent would be 0. exform sets the form for exponential notation (if needed). It may be either @B_android#icu#math#MathContext#SCIENTIFIC_E@ or @B_android#icu#math#MathContext#ENGINEERING_E@. If the latter, engineering, form is requested, up to three digits (plus sign, if negative) may be needed for the integer part of the result (before ). Otherwise, only one digit (plus sign, if negative) is needed. Finally, the sixth argument, exround, selects the rounding algorithm to be used, and must be one of the values indicated by a public constant in the @B_android#icu#math#MathContext_E@ class whose name starts with ROUND_ . The default (ROUND_HALF_UP) may also be selected by using the value -1, as before. The special value MathContext.ROUND_UNNECESSARY may be used to detect whether non-zero digits are discarded -- if exround has this value than if non-zero digits would be discarded (rounded) during formatting then an ArithmeticException is thrown.", "history": "added in API level 24", "FullName": "public String format (int before, int after, int explaces, int exdigits, int exformint, int exround)"}, "divide(android.icu.math.BigDecimal,int,int)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A plain BigDecimal whose value is this/rhs, using fixed point arithmetic and the specified rounding mode."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."], ["int", "int: The int scale to be used for the result."], ["int", "int: The int rounding mode to be used for the division (see the @B_android#icu#math#MathContext_E@ class)."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if round is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if rhs is zero."], ["@B_java#lang#ArithmeticException_E@", "if scale is negative."], ["@B_java#lang#ArithmeticException_E@", "if round is @B_android#icu#math#MathContext#ROUND_UNNECESSARY_E@ and scale is insufficient to represent the result exactly."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a plain BigDecimal whose value is this/rhs, using fixed point arithmetic and a given scale and rounding mode. The same as @B_android#icu#math#BigDecimal#divide_E@, where the BigDecimal is rhs, new MathContext(0, MathContext.PLAIN, false, round), except that the length of the decimal part (the scale) to be used for the result is explicit rather than being taken from this. The length of the decimal part (the scale) of the result will be the same as the scale of the current object, if the latter were formatted without exponential notation.", "history": "Added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs, int scale, int round)"}, "divide(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["@B_android#icu#math#BigDecimal_E@", "A BigDecimal whose value is this/rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the division."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rhs is zero."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is this/rhs. Implements the division (@B_android#icu#math#BigDecimal_E@), and returns the result as a BigDecimal object.", "history": "Added in API level 24", "FullName": "public BigDecimal divide (BigDecimal rhs, MathContext set)"}, "compareTo(android.icu.math.BigDecimal,android.icu.math.MathContext)": {"Returns": [["int", "An int whose value is -1, 0, or 1 as this is numerically less than, equal to, or greater than rhs."]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal: The BigDecimal for the right hand side of the comparison."], ["@B_android#icu#math#MathContext_E@", "MathContext: The MathContext arithmetic settings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this BigDecimal to another. Implements numeric comparison, (as defined in the decimal documentation, see @B_android#icu#math#BigDecimal_E@), and returns a result of type int. The result will be: A @B_android#icu#math#BigDecimal#compareTo_E@ method is also provided.", "history": "Added in API level 24", "FullName": "public int compareTo (BigDecimal rhs, MathContext set)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "android.icu.math.BigDecimal", "ClassDesc": "The BigDecimal class implements immutable arbitrary-precision decimal numbers. The methods of the BigDecimal class provide operations for fixed and floating point arithmetic, comparison, format conversions, and hashing. As the numbers are decimal, there is an exact correspondence between an instance of a BigDecimal object and its String representation; the BigDecimal class provides direct conversions to and from String and character array (char[]) objects, as well as conversions to and from the Java primitive types (which may not be exact) and BigInteger. In the descriptions of constructors and methods in this documentation, the value of a BigDecimal number object is shown as the result of invoking the toString() method on the object. The internal representation of a decimal number is neither defined nor exposed, and is not permitted to affect the result of any operation. The floating point arithmetic provided by this class is defined by the ANSI X3.274-1996 standard, and is also documented at http://www2.hursley.ibm.com/decimal Operations on BigDecimal numbers are controlled by a @B_android#icu#math#MathContext_E@ object, which provides the context (precision and other information) for the operation. Methods that can take a MathContext parameter implement the standard arithmetic operators for BigDecimal objects and are known as @B_android#icu#math#MathContext#DEFAULT_E@ (digits=9, form=SCIENTIFIC, lostDigits=false, roundingMode=ROUND_HALF_UP) perform general-purpose floating point arithmetic to nine digits of precision. The MathContext parameter must not be null. Each operator method also has a version provided which does not take a MathContext parameter. For this version of each method, the context settings used are digits=0, form=PLAIN, lostDigits=false, roundingMode=ROUND_HALF_UP; these settings perform fixed point arithmetic with unlimited precision, as defined for the original BigDecimal class in Java 1.1 and Java 1.2. For monadic operators, only the optional MathContext parameter is present; the operation acts upon the current object. For dyadic operators, a BigDecimal parameter is always present; it must not be null. The operation acts with the current object being the left-hand operand and the BigDecimal parameter being the right-hand operand. For example, adding two BigDecimal objects referred to by the names award and extra could be written as any of: award.add(extra) award.add(extra, MathContext.DEFAULT) award.add(extra, acontext) (where acontext is a MathContext object), which would return a BigDecimal object whose value is the result of adding award and extra under the appropriate context settings. When a BigDecimal operator method is used, a set of rules define what the result will be (and, by implication, how the result would be represented as a character string). These rules are defined in the BigDecimal arithmetic documentation (see the URL above), but in summary: Results are normally calculated with up to some maximum number of significant digits. For example, if the MathContext parameter for an operation were MathContext.DEFAULT then the result would be rounded to 9 digits; the division of 2 by 3 would then result in 0.666666667. You can change the default of 9 significant digits by providing the method with a suitable MathContext object. This lets you calculate using as many digits as you need -- thousands, if necessary. Fixed point (scaled) arithmetic is indicated by using a digits setting of 0 (or omitting the MathContext parameter). Similarly, you can change the algorithm used for rounding from the default \"classic\" algorithm. In standard arithmetic (that is, when the form setting is not PLAIN), a zero result is always expressed as the single digit '0' (that is, with no sign, decimal point, or exponent part). Except for the division and power operators in standard arithmetic, trailing zeros are preserved (this is in contrast to binary floating point operations and most electronic calculators, which lose the information about trailing zeros in the fractional part of results). So, for example: new BigDecimal(\"2.40\").add( new BigDecimal(\"2\")) => \"4.40\" new BigDecimal(\"2.40\").subtract(new BigDecimal(\"2\")) => \"0.40\" new BigDecimal(\"2.40\").multiply(new BigDecimal(\"2\")) => \"4.80\" new BigDecimal(\"2.40\").divide( new BigDecimal(\"2\"), def) => \"1.2\" where the value on the right of the => would be the result of the operation, expressed as a String, and def (in this and following examples) refers to MathContext.DEFAULT ). This preservation of trailing zeros is desirable for most calculations (including financial calculations). If necessary, trailing zeros may be easily removed using division by 1. In standard arithmetic, exponential form is used for a result depending on its value and the current setting of digits (the default is 9 digits). If the number of places needed before the decimal point exceeds the digits setting, or the absolute value of the number is less than 0.000001, then the number will be expressed in exponential notation; thus new BigDecimal(\"1e+6\").multiply(new BigDecimal(\"1e+6\"), def) results in 1E+12 instead of 1000000000000, and new BigDecimal(\"1\").divide(new BigDecimal(\"3E+10\"), def) results in 3.33333333E-11 instead of 0.0000000000333333333. The form of the exponential notation (scientific or engineering) is determined by the form setting. The names of methods in this class follow the conventions established by java.lang.Number, java.math.BigInteger, and java.math.BigDecimal in Java 1.1 and Java 1.2."}