{"Functions": {"copy(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the target file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to copy"], ["@B_java#nio#file#Path_E@", "Path: the path to the target file (may be associated with a different provider to the source path)"], ["@B_java#nio#file#CopyOption_E@", "CopyOption: options specifying how the copy should be done"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains a copy option that is not supported"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the target file exists but cannot be replaced because the REPLACE_EXISTING option is not specified (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "the REPLACE_EXISTING option is specified but the file cannot be replaced because it is a non-empty directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the source file, the @B_java#lang#SecurityManager#checkWrite_E@ is invoked to check write access to the target file. If a symbolic link is copied the security manager is invoked to check @B_java#nio#file#LinkPermission_E@(\"symbolic\")."]], "SeeAlso": [], "Permissions": [], "Description": "Copy a file to a target file. This method copies a file to the target file with the options parameter specifying how the copy is performed. By default, the copy fails if the target file already exists or is a symbolic link, except if the source and target are the @B_java#nio#file#Files#isSameFile_E@ file, in which case the method completes without copying the file. File attributes are not required to be copied to the target file. If symbolic links are supported, and the file is a symbolic link, then the final target of the link is copied. If the file is a directory then it creates an empty directory in the target location (entries in the directory are not copied). This method can be used with the @B_java#nio#file#Files#walkFileTree_E@ method to copy a directory and all entries in the directory, or an entire The options parameter may include any of the following: An implementation of this interface may support additional implementation specific options. Copying a file is not an atomic operation. If an @B_java#io#IOException_E@ is thrown, then it is possible that the target file is incomplete or some of its file attributes have not been copied from the source file. When the REPLACE_EXISTING option is specified and the target file exists, then the target file is replaced. The check for the existence of the file and the creation of the new file may not be atomic with respect to other file system activities.", "history": "Added in API level 26", "FullName": "public static Path copy (Path source, Path target, CopyOption... options)"}, "newDirectoryStream(java.nio.file.Path,java.nio.file.DirectoryStream.Filter<?superjava.nio.file.Path>)": {"Returns": [["@B_java#nio#file#DirectoryStream_E@", "a new and open DirectoryStream object"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the directory"], ["@B_java#nio#file#DirectoryStream#Filter_E@", "Filter: the directory stream filter"]], "Throws": [["@B_java#nio#file#NotDirectoryException_E@", "if the file could not otherwise be opened because it is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a directory, returning a @B_java#nio#file#DirectoryStream_E@ to iterate over the entries in the directory. The elements returned by the directory stream's @B_java#nio#file#DirectoryStream#iterator_E@ are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by @B_java#nio#file#Path#resolve_E@ the name of the directory entry against dir. The entries returned by the iterator are filtered by the given @B_java#nio#file#DirectoryStream#Filter_E@. When not using the try-with-resources construct, then directory stream's close method should be invoked after iteration is completed so as to free any resources held for the open directory. Where the filter terminates due to an uncaught error or runtime exception then it is propagated to the @B_java#util#Iterator#hasNext_E@ or @B_java#util#Iterator#next_E@ method. Where an IOException is thrown, it results in the hasNext or next method throwing a @B_java#nio#file#DirectoryIteratorException_E@ with the IOException as the cause. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a @B_java#nio#file#SecureDirectoryStream_E@.", "history": "Added in API level 26", "FullName": "public static DirectoryStream<Path> newDirectoryStream (Path dir, Filter<? super Path> filter)"}, "newBufferedWriter(java.nio.file.Path,java.nio.charset.Charset,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#BufferedWriter_E@", "a new buffered writer, with default buffer size, to write text to the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to use for encoding"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening or creating the file"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": ["@B_java#nio#file#Files#write_E@"], "Permissions": [], "Description": "Opens or creates a file for writing, returning a BufferedWriter that may be used to write text to the file in an efficient manner. The options parameter specifies how the the file is created or opened. If no options are present then this method works as if the @B_java#nio#file#StandardOpenOption#CREATE_E@, @B_java#nio#file#StandardOpenOption#TRUNCATE_EXISTING_E@, and @B_java#nio#file#StandardOpenOption#WRITE_E@ options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing @B_java#nio#file#Files#isRegularFile_E@ to a size of 0 if it exists. The Writer methods to write text throw IOException if the text cannot be encoded using the specified charset.", "history": "Added in API level 26", "FullName": "public static BufferedWriter newBufferedWriter (Path path, Charset cs, OpenOption... options)"}, "isReadable(java.nio.file.Path)": {"Returns": [["boolean", "true if the file exists and is readable; false if the file does not exist, read access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to check"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is readable. This method checks that a file exists and that this Java virtual machine has appropriate privileges that would allow it open the file for reading. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that the result of this method is immediately outdated, there is no guarantee that a subsequent attempt to open the file for reading will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.", "history": "Added in API level 26", "FullName": "public static boolean isReadable (Path path)"}, "readAttributes(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)": {"Returns": [["@B_java#util#Map_E@", "a map of the attributes returned; The map's keys are the attribute names, its values are the attribute values"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#String_E@", "String: the attributes to read"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available"], ["@B_java#lang#IllegalArgumentException_E@", "if no attributes are specified or an unrecognized attributes is specified"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a set of file attributes as a bulk operation. The attributes parameter identifies the attributes to be read and takes the form: ':' stands for itself. @B_java#nio#file#attribute#AttributeView#name_E@ of a @B_java#nio#file#attribute#FileAttributeView_E@ that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. The \"*\" then all attributes are read. Attributes that are not supported are ignored and will not be present in the returned map. It is implementation specific if all attributes are read as an atomic operation with respect to other file system operations. The following examples demonstrate possible values for the attributes parameter: The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed.", "history": "Added in API level 26", "FullName": "public static Map<String, Object> readAttributes (Path path, String attributes, LinkOption... options)"}, "exists(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["boolean", "true if the file exists; false if the file does not exist or its existence cannot be determined."]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to test"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled ."]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ is invoked to check read access to the file."]], "SeeAlso": ["@B_java#nio#file#Files#notExists_E@"], "Permissions": [], "Description": "Tests whether a file exists. The options parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. Note that the result of this method is immediately outdated. If this method indicates the file exists then there is no guarantee that a subsequence access will succeed. Care should be taken when using this method in security sensitive applications.", "history": "Added in API level 26", "FullName": "public static boolean exists (Path path, LinkOption... options)"}, "isSameFile(java.nio.file.Path, java.nio.file.Path)": {"Returns": [["boolean", "true if, and only if, the two paths locate the same file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: one path to the file"], ["@B_java#nio#file#Path_E@", "Path: the other path"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to both files."]], "SeeAlso": ["@B_java#nio#file#attribute#BasicFileAttributes#fileKey_E@"], "Permissions": [], "Description": "Tests if two paths locate the same file. If both Path objects are @B_java#nio#file#Path#equals_E@ then this method returns true without checking if the file exists. If the two Path objects are associated with different providers then this method returns false. Otherwise, this method checks if both Path objects locate the same file, and depending on the implementation, may require to open or access both files. If the file system and files remain static, then this method implements an equivalence relation for non-null Paths. It is Path f, isSameFile(f,f) should return true. It is Paths f and g, isSameFile(f,g) will equal isSameFile(g,f). It is Paths f, g, and h, if isSameFile(f,g) returns true and isSameFile(g,h) returns true, then isSameFile(f,h) will return return true.", "history": "added in API level 26", "FullName": "public static boolean isSameFile (Path path, Path path2)"}, "newByteChannel(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#nio#channels#SeekableByteChannel_E@", "a new seekable byte channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open or create"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported open option is specified"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file of that name already exists and the @B_java#nio#file#StandardOpenOption#CREATE_NEW_E@ option is specified (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the path if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the path if the file is opened for writing. The @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access if the file is opened with the DELETE_ON_CLOSE option."]], "SeeAlso": ["@B_java#nio#channels#FileChannel#open_E@"], "Permissions": [], "Description": "Opens or creates a file, returning a seekable byte channel to access the file. This method opens or creates a file in exactly the manner specified by the @B_java#nio#file#Files#newByteChannel_E@ method.", "history": "Added in API level 26", "FullName": "public static SeekableByteChannel newByteChannel (Path path, OpenOption... options)"}, "newByteChannel(java.nio.file.Path,java.util.Set<?extendsjava.nio.file.OpenOption>,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#channels#SeekableByteChannel_E@", "a new seekable byte channel"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open or create"], ["@B_java#util#Set_E@", "Set: options specifying how the file is opened"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported open option is specified or the array contains attributes that cannot be set atomically when creating the file"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file of that name already exists and the @B_java#nio#file#StandardOpenOption#CREATE_NEW_E@ option is specified (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the path if the file is opened for reading. The @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the path if the file is opened for writing. The @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access if the file is opened with the DELETE_ON_CLOSE option."]], "SeeAlso": ["@B_java#nio#channels#FileChannel#open_E@"], "Permissions": [], "Description": "Opens or creates a file, returning a seekable byte channel to access the file. The options parameter determines how the file is opened. The @B_java#nio#file#StandardOpenOption#READ_E@ and @B_java#nio#file#StandardOpenOption#WRITE_E@ options determine if the file should be opened for reading and/or writing. If neither option (or the @B_java#nio#file#StandardOpenOption#APPEND_E@ option) is present then the file is opened for reading. By default reading or writing commence at the beginning of the file. In the addition to READ and WRITE, the following options may be present: An implementation may also support additional implementation specific options. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when a new file is created. In the case of the default provider, the returned seekable byte channel is a @B_java#nio#channels#FileChannel_E@.", "history": "Added in API level 26", "FullName": "public static SeekableByteChannel newByteChannel (Path path, Set<? extends OpenOption> options, FileAttribute...<?> attrs)"}, "list(java.nio.file.Path)": {"Returns": [["@B_java#util#stream#Stream_E@", "The Stream describing the content of the directory"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the directory"]], "Throws": [["@B_java#nio#file#NotDirectoryException_E@", "if the file could not otherwise be opened because it is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs when opening the directory"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."]], "SeeAlso": ["@B_java#nio#file#Files#newDirectoryStream_E@"], "Permissions": [], "Description": "Return a lazily populated Stream, the elements of which are the entries in the directory. The listing is not recursive. The elements of the stream are @B_java#nio#file#Path_E@ objects that are obtained as if by @B_java#nio#file#Path#resolve_E@ the name of the directory entry against dir. Some file systems maintain special links to the directory itself and the directory's parent directory. Entries representing these links are not included. The stream is The returned stream encapsulates a @B_java#nio#file#DirectoryStream_E@. If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream's @B_java#util#stream#BaseStream#close_E@ method is invoked after the stream operations are completed. Operating on a closed stream behaves as if the end of stream has been reached. Due to read-ahead, one or more elements may be returned after the stream has been closed. If an @B_java#io#IOException_E@ is thrown when accessing the directory after this method has returned, it is wrapped in an @B_java#io#UncheckedIOException_E@ which will be thrown from the method that caused the access to take place.", "history": "Added in API level 26", "FullName": "public static Stream<Path> list (Path dir)"}, "createTempDirectory(java.nio.file.Path,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the newly created directory that did not exist before this method was invoked"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to directory in which to create the directory"], ["@B_java#lang#String_E@", "String: the prefix string to be used in generating the directory's name; may be null"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the directory"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix cannot be used to generate a candidate directory name"], ["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#io#IOException_E@", "if an I/O error occurs or dir does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access when creating the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new directory in the specified directory, using the given prefix to generate its name. The resulting Path is associated with the same FileSystem as the given directory. The details as to how the name of the directory is constructed is implementation dependent and therefore not specified. Where possible the prefix is used to construct candidate names. As with the createTempFile methods, this method is only part of a temporary-file facility. A @B_java#lang#Runtime#addShutdownHook_E@, or the @B_java#io#File#deleteOnExit_E@ mechanism may be used to delete the directory automatically. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the directory. Each attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.", "history": "Added in API level 26", "FullName": "public static Path createTempDirectory (Path dir, String prefix, FileAttribute...<?> attrs)"}, "getPosixFilePermissions(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["@B_java#util#Set_E@", "the file permissions"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the associated file system does not support the PosixFileAttributeView"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, and it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a file's POSIX file permissions. The path parameter is associated with a FileSystem that supports the @B_java#nio#file#attribute#PosixFileAttributeView_E@. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed.", "history": "Added in API level 26", "FullName": "public static Set<PosixFilePermission> getPosixFilePermissions (Path path, LinkOption... options)"}, "getAttribute(java.nio.file.Path,java.lang.String,java.nio.file.LinkOption...)": {"Returns": [["@B_java#lang#Object_E@", "the attribute value"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#String_E@", "String: the attribute to read"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available"], ["@B_java#lang#IllegalArgumentException_E@", "if the attribute name is not specified or is not recognized"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoked to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a file attribute. The attribute parameter identifies the attribute to be read and takes the form: ':' stands for itself. @B_java#nio#file#attribute#AttributeView#name_E@ of a @B_java#nio#file#attribute#FileAttributeView_E@ that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. unix\" view:", "history": "Added in API level 26", "FullName": "public static Object getAttribute (Path path, String attribute, LinkOption... options)"}, "copy(java.nio.file.Path,java.io.OutputStream)": {"Returns": [["long", "the number of bytes read or written"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#io#OutputStream_E@", "OutputStream: the output stream to write to"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when reading or writing"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all bytes from a file to an output stream. If an I/O error occurs reading from the file or writing to the output stream, then it may do so after some bytes have been read or written. Consequently the output stream may be in an inconsistent state. It is strongly recommended that the output stream be promptly closed if an I/O error occurs. This method may block indefinitely writing to the output stream (or reading from the file). The behavior for the case that the output stream is Note that if the given output stream is @B_java#io#Flushable_E@ then its @B_java#io#Flushable#flush_E@ method may need to invoked after this method completes so as to flush any buffered output.", "history": "Added in API level 26", "FullName": "public static long copy (Path source, OutputStream out)"}, "size(java.nio.file.Path)": {"Returns": [["long", "the file size, in bytes"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": ["@B_java#nio#file#attribute#BasicFileAttributes#size_E@"], "Permissions": [], "Description": "Returns the size of a file (in bytes). The size may differ from the actual size on the file system due to compression, support for sparse files, or other reasons. The size of files that are not @B_java#nio#file#Files#isRegularFile_E@ files is implementation specific and therefore unspecified.", "history": "Added in API level 26", "FullName": "public static long size (Path path)"}, "deleteIfExists(java.nio.file.Path)": {"Returns": [["boolean", "true if the file was deleted by this method; false if the file could not be deleted because it did not exist"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to delete"]], "Throws": [["@B_java#nio#file#DirectoryNotEmptyException_E@", "if the file is a directory and could not otherwise be deleted because the directory is not empty (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Deletes a file if it exists. As with the @B_java#nio#file#Files#delete_E@ method, an implementation may need to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link, then the symbolic link itself, not the final target of the link, is deleted. If the file is a directory then the directory must be empty. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.", "history": "Added in API level 26", "FullName": "public static boolean deleteIfExists (Path path)"}, "createTempFile(java.nio.file.Path,java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the newly created file that did not exist before this method was invoked"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to directory in which to create the file"], ["@B_java#lang#String_E@", "String: the prefix string to be used in generating the file's name; may be null"], ["@B_java#lang#String_E@", "String: the suffix string to be used in generating the file's name; may be null, in which case \".tmp\" is used"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix or suffix parameters cannot be used to generate a candidate file name"], ["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#io#IOException_E@", "if an I/O error occurs or dir does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new empty file in the specified directory, using the given prefix and suffix strings to generate its name. The resulting Path is associated with the same FileSystem as the given directory. The details as to how the name of the file is constructed is implementation dependent and therefore not specified. Where possible the prefix and suffix are used to construct candidate names in the same manner as the @B_java#io#File#createTempFile_E@ method. As with the File.createTempFile methods, this method is only part of a temporary-file facility. Where used as a work files, the resulting file may be opened using the @B_java#nio#file#StandardOpenOption#DELETE_ON_CLOSE_E@ option so that the file is deleted when the appropriate close method is invoked. Alternatively, a @B_java#lang#Runtime#addShutdownHook_E@, or the @B_java#io#File#deleteOnExit_E@ mechanism may be used to delete the file automatically. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the file. Each attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. When no file attributes are specified, then the resulting file may have more restrictive access permissions to files created by the @B_java#io#File#createTempFile_E@ method.", "history": "Added in API level 26", "FullName": "public static Path createTempFile (Path dir, String prefix, String suffix, FileAttribute...<?> attrs)"}, "readAttributes(java.nio.file.Path,java.lang.Class<A>,java.nio.file.LinkOption...)": {"Returns": [["A", "the file attributes"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Class_E@", "Class: the Class of the file attributes required to read"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if an attributes of the given type are not supported"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file. If this method is invoked to read security sensitive attributes then the security manager may be invoke to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a file's attributes as a bulk operation. The type parameter is the type of the attributes required and this method returns an instance of that type if supported. All implementations support a basic set of file attributes and so invoking this method with a type parameter of BasicFileAttributes.class will not throw UnsupportedOperationException. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. It is implementation specific if all file attributes are read as an atomic operation with respect to other file system operations.", "history": "Added in API level 26", "FullName": "public static A readAttributes (Path path, Class<A> type, LinkOption... options)"}, "getFileStore(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#FileStore_E@", "the file store where the file is stored"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file, and in addition it checks @B_java#lang#RuntimePermission_E@ (\"getFileStoreAttributes\")"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#nio#file#FileStore_E@ representing the file store where a file is located. Once a reference to the FileStore is obtained it is implementation specific if operations on the returned FileStore, or @B_java#nio#file#attribute#FileStoreAttributeView_E@ objects obtained from it, continue to depend on the existence of the file. In particular the behavior is not defined for the case that the file is deleted or moved to a different file store.", "history": "Added in API level 26", "FullName": "public static FileStore getFileStore (Path path)"}, "newDirectoryStream(java.nio.file.Path,java.lang.String)": {"Returns": [["@B_java#nio#file#DirectoryStream_E@", "a new and open DirectoryStream object"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the directory"], ["@B_java#lang#String_E@", "String: the glob pattern"]], "Throws": [["@B_java#util#regex#PatternSyntaxException_E@", "if the pattern is invalid"], ["@B_java#nio#file#NotDirectoryException_E@", "if the file could not otherwise be opened because it is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a directory, returning a @B_java#nio#file#DirectoryStream_E@ to iterate over the entries in the directory. The elements returned by the directory stream's @B_java#nio#file#DirectoryStream#iterator_E@ are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by @B_java#nio#file#Path#resolve_E@ the name of the directory entry against dir. The entries returned by the iterator are filtered by matching the String representation of their file names against the given globbing pattern. For example, suppose we want to iterate over the files ending with \".java\" in a directory: The globbing pattern is specified by the @B_java#nio#file#FileSystem#getPathMatcher_E@ method. When not using the try-with-resources construct, then directory stream's close method should be invoked after iteration is completed so as to free any resources held for the open directory. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a @B_java#nio#file#SecureDirectoryStream_E@.", "history": "Added in API level 26", "FullName": "public static DirectoryStream<Path> newDirectoryStream (Path dir, String glob)"}, "walk(java.nio.file.Path,int,java.nio.file.FileVisitOption...)": {"Returns": [["@B_java#util#stream#Stream_E@", "the @B_java#util#stream#Stream_E@ of @B_java#nio#file#Path_E@"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the starting file"], ["int", "int: the maximum number of directory levels to visit"], ["@B_java#nio#file#FileVisitOption_E@", "FileVisitOption: options to configure the traversal"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the maxDepth parameter is negative"], ["@B_java#lang#SecurityException_E@", "If the security manager denies access to the starting file. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."], ["@B_java#io#IOException_E@", "if an I/O error is thrown when accessing the starting file."]], "SeeAlso": [], "Permissions": [], "Description": "Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file. The file tree is traversed depth-first, the elements in the stream are @B_java#nio#file#Path_E@ objects that are obtained as if by @B_java#nio#file#Path#resolve_E@ the relative path against start. The stream walks the file tree as elements are consumed. The Stream returned is guaranteed to have at least one element, the starting file itself. For each file visited, the stream attempts to read its @B_java#nio#file#attribute#BasicFileAttributes_E@. If the file is a directory and can be opened successfully, entries in the directory, and their descendants will follow the directory in the stream as they are encountered. When all entries have been visited, then the directory is closed. The file tree walk then continues at the next sibling of the directory. The stream is By default, symbolic links are not automatically followed by this method. If the options parameter contains the @B_java#nio#file#FileVisitOption#FOLLOW_LINKS_E@ option then symbolic links are followed. When following links, and the attributes of the target cannot be read, then this method attempts to get the BasicFileAttributes of the link. If the options parameter contains the @B_java#nio#file#FileVisitOption#FOLLOW_LINKS_E@ option then the stream keeps track of directories visited so that cycles can be detected. A cycle arises when there is an entry in a directory that is an ancestor of the directory. Cycle detection is done by recording the @B_java#nio#file#attribute#BasicFileAttributes#fileKey_E@ of directories, or if file keys are not available, by invoking the @B_java#nio#file#Files#isSameFile_E@ method to test if a directory is the same file as an ancestor. When a cycle is detected it is treated as an I/O error with an instance of @B_java#nio#file#FileSystemLoopException_E@. The maxDepth parameter is the maximum number of levels of directories to visit. A value of 0 means that only the starting file is visited, unless denied by the security manager. A value of @B_java#lang#Integer#MAX_VALUE_E@ may be used to indicate that all levels should be visited. When a security manager is installed and it denies access to a file (or directory), then it is ignored and not included in the stream. The returned stream encapsulates one or more @B_java#nio#file#DirectoryStream_E@s. If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream's @B_java#util#stream#BaseStream#close_E@ method is invoked after the stream operations are completed. Operating on a closed stream will result in an @B_java#lang#IllegalStateException_E@. If an @B_java#io#IOException_E@ is thrown when accessing the directory after this method has returned, it is wrapped in an @B_java#io#UncheckedIOException_E@ which will be thrown from the method that caused the access to take place.", "history": "Added in API level 26", "FullName": "public static Stream<Path> walk (Path start, int maxDepth, FileVisitOption... options)"}, "move(java.nio.file.Path,java.nio.file.Path,java.nio.file.CopyOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the target file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to move"], ["@B_java#nio#file#Path_E@", "Path: the path to the target file (may be associated with a different provider to the source path)"], ["@B_java#nio#file#CopyOption_E@", "CopyOption: options specifying how the move should be done"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains a copy option that is not supported"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the target file exists but cannot be replaced because the REPLACE_EXISTING option is not specified (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "the REPLACE_EXISTING option is specified but the file cannot be replaced because it is a non-empty directory (optional specific exception)"], ["@B_java#nio#file#AtomicMoveNotSupportedException_E@", "if the options array contains the ATOMIC_MOVE option but the file cannot be moved as an atomic file system operation."], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to both the source and target file."]], "SeeAlso": [], "Permissions": [], "Description": "Move or rename a file to a target file. By default, this method attempts to move the file to the target file, failing if the target file exists except if the source and target are the @B_java#nio#file#Files#isSameFile_E@ file, in which case this method has no effect. If the file is a symbolic link then the symbolic link itself, not the target of the link, is moved. This method may be invoked to move an empty directory. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. When invoked to move a directory that is not empty then the directory is moved if it does not require moving the entries in the directory. For example, renaming a directory on the same @B_java#nio#file#FileStore_E@ will usually not require moving the entries in the directory. When moving a directory requires that its entries be moved then this method fails (by throwing an IOException). To move a @B_java#nio#file#Files#copy_E@ method in conjunction with the @B_java#nio#file#Files#walkFileTree_E@ utility method. The options parameter may include any of the following: An implementation of this interface may support additional implementation specific options. Moving a file will copy the @B_java#nio#file#attribute#BasicFileAttributes#lastModifiedTime_E@ to the target file if supported by both source and target file stores. Copying of file timestamps may result in precision loss. An implementation may also attempt to copy other file attributes but is not required to fail if the file attributes cannot be copied. When the move is performed as a non-atomic operation, and an IOException is thrown, then the state of the files is not defined. The original file and the target file may both exist, the target file may be incomplete or some of its file attributes may not been copied from the original file.", "history": "Added in API level 26", "FullName": "public static Path move (Path source, Path target, CopyOption... options)"}, "createDirectory(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the directory"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the directory to create"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the directory"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a directory could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs or the parent directory does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the new directory."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new directory. The check for the existence of the file and the creation of the directory if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the directory. The @B_java#nio#file#Files#createDirectories_E@ method should be used where it is required to create all nonexistent parent directories first. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the directory. Each attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.", "history": "Added in API level 26", "FullName": "public static Path createDirectory (Path dir, FileAttribute...<?> attrs)"}, "lines(java.nio.file.Path)": {"Returns": [["@B_java#util#stream#Stream_E@", "the lines from the file as a Stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening the file"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Read all lines from a file as a Stream. Bytes from the file are decoded into characters using the @B_java#nio#charset#StandardCharsets#UTF_8_E@ @B_java#nio#charset#Charset_E@. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static Stream<String> lines (Path path)"}, "isHidden(java.nio.file.Path)": {"Returns": [["boolean", "true if the file is considered hidden"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to test"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not a file is considered hidden. The exact definition of hidden is platform or provider dependent. On UNIX for example a file is considered to be hidden if its name begins with a period character ('.'). On Windows a file is considered hidden if it isn't a directory and the DOS @B_java#nio#file#attribute#DosFileAttributes#isHidden_E@ attribute is set. Depending on the implementation this method may require to access the file system to determine if the file is considered hidden.", "history": "Added in API level 26", "FullName": "public static boolean isHidden (Path path)"}, "delete(java.nio.file.Path)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to delete"]], "Throws": [["@B_java#nio#file#NoSuchFileException_E@", "if the file does not exist (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "if the file is a directory and could not otherwise be deleted because the directory is not empty (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access to the file"]], "SeeAlso": [], "Permissions": [], "Description": "Deletes a file. An implementation may require to examine the file to determine if the file is a directory. Consequently this method may not be atomic with respect to other file system operations. If the file is a symbolic link then the symbolic link itself, not the final target of the link, is deleted. If the file is a directory then the directory must be empty. In some implementations a directory has entries for special files or links that are created when the directory is created. In such implementations a directory is considered empty when only the special entries exist. This method can be used with the @B_java#nio#file#Files#walkFileTree_E@ method to delete a directory and all entries in the directory, or an entire On some operating systems it may not be possible to remove a file when it is open and in use by this Java virtual machine or other programs.", "history": "Added in API level 26", "FullName": "public static void delete (Path path)"}, "createTempDirectory(java.lang.String,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the newly created directory that did not exist before this method was invoked"]], "Parameters": [["@B_java#lang#String_E@", "String: the prefix string to be used in generating the directory's name; may be null"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the directory"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix cannot be used to generate a candidate directory name"], ["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#io#IOException_E@", "if an I/O error occurs or the temporary-file directory does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access when creating the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new directory in the default temporary-file directory, using the given prefix to generate its name. The resulting Path is associated with the default FileSystem. This method works in exactly the manner specified by @B_java#nio#file#Files#createTempDirectory_E@ method for the case that the dir parameter is the temporary-file directory.", "history": "Added in API level 26", "FullName": "public static Path createTempDirectory (String prefix, FileAttribute...<?> attrs)"}, "copy(java.nio.file.Path, java.io.OutputStream)": {"Returns": [["long", "the number of bytes read or written"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#io#OutputStream_E@", "OutputStream: the output stream to write to"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when reading or writing"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all bytes from a file to an output stream. If an I/O error occurs reading from the file or writing to the output stream, then it may do so after some bytes have been read or written. Consequently the output stream may be in an inconsistent state. It is strongly recommended that the output stream be promptly closed if an I/O error occurs. This method may block indefinitely writing to the output stream (or reading from the file). The behavior for the case that the output stream is Note that if the given output stream is @B_java#io#Flushable_E@ then its @B_java#io#Flushable#flush_E@ method may need to invoked after this method completes so as to flush any buffered output.", "history": "added in API level 26", "FullName": "public static long copy (Path source, OutputStream out)"}, "setOwner(java.nio.file.Path,java.nio.file.attribute.UserPrincipal)": {"Returns": [["@B_java#nio#file#Path_E@", "The path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the file"], ["@B_java#nio#file#attribute#UserPrincipal_E@", "UserPrincipal: The new file owner"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the associated file system does not support the FileOwnerAttributeView"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": ["@B_java#nio#file#FileSystem#getUserPrincipalLookupService_E@", "@B_java#nio#file#attribute#UserPrincipalLookupService_E@"], "Permissions": [], "Description": "Updates the file owner. The path parameter is associated with a file system that supports @B_java#nio#file#attribute#FileOwnerAttributeView_E@. This file attribute view provides access to a file attribute that is the owner of the file.", "history": "Added in API level 26", "FullName": "public static Path setOwner (Path path, UserPrincipal owner)"}, "readSymbolicLink(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "a Path object representing the target of the link"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the symbolic link"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support symbolic links"], ["@B_java#nio#file#NotLinkException_E@", "if the target could otherwise not be read because the file is not a symbolic link (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it checks that FilePermission has been granted with the \"readlink\" action to read the link."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the target of a symbolic link If the file system supports Path object will be associated with the same file system as link.", "history": "Added in API level 26", "FullName": "public static Path readSymbolicLink (Path link)"}, "lines(java.nio.file.Path,java.nio.charset.Charset)": {"Returns": [["@B_java#util#stream#Stream_E@", "the lines from the file as a Stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to use for decoding"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening the file"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": ["@B_java#nio#file#Files#readAllLines_E@", "@B_java#nio#file#Files#newBufferedReader_E@", "@B_java#io#BufferedReader#lines_E@"], "Permissions": [], "Description": "Read all lines from a file as a Stream. Unlike @B_java#nio#file#Files#readAllLines_E@, this method does not read all lines into a List, but instead populates lazily as the stream is consumed. Bytes from the file are decoded into characters using the specified charset and the same line terminators as specified by readAllLines are supported. After this method returns, then any subsequent I/O exception that occurs while reading from the file or when a malformed or unmappable byte sequence is read, is wrapped in an @B_java#io#UncheckedIOException_E@ that will be thrown from the @B_java#util#stream#Stream_E@ method that caused the read to take place. In case an IOException is thrown when closing the file, it is also wrapped as an UncheckedIOException. The returned stream encapsulates a @B_java#io#Reader_E@. If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream's @B_java#util#stream#BaseStream#close_E@ method is invoked after the stream operations are completed.", "history": "Added in API level 26", "FullName": "public static Stream<String> lines (Path path, Charset cs)"}, "isDirectory(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["boolean", "true if the file is a directory; false if the file does not exist, is not a directory, or it cannot be determined if the file is a directory or not."]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to test"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is a directory. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. Where it is required to distinguish an I/O exception from the case that the file is not a directory then the file attributes can be read with the @B_java#nio#file#Files#readAttributes_E@ method and the file type tested with the @B_java#nio#file#attribute#BasicFileAttributes#isDirectory_E@ method.", "history": "Added in API level 26", "FullName": "public static boolean isDirectory (Path path, LinkOption... options)"}, "createSymbolicLink(java.nio.file.Path,java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the symbolic link"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path of the symbolic link to create"], ["@B_java#nio#file#Path_E@", "Path: the target of the symbolic link"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: the array of attributes to set atomically when creating the symbolic link"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support symbolic links or the array contains an attribute that cannot be set atomically when creating the symbolic link"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file with the name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"symbolic\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the path of the symbolic link."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a symbolic link to a target The target parameter is the target of the link. It may be an @B_java#nio#file#Path#isAbsolute_E@ or relative path and may not exist. When the target is a relative path then file system operations on the resulting link are relative to the path of the link. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the link. Each attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. Where symbolic links are supported, but the underlying @B_java#nio#file#FileStore_E@ does not support symbolic links, then this may fail with an @B_java#io#IOException_E@. Additionally, some operating systems may require that the Java virtual machine be started with implementation specific privileges to create symbolic links, in which case this method may throw IOException.", "history": "Added in API level 26", "FullName": "public static Path createSymbolicLink (Path link, Path target, FileAttribute...<?> attrs)"}, "isExecutable(java.nio.file.Path)": {"Returns": [["boolean", "true if the file exists and is executable; false if the file does not exist, execute access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to check"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkExec_E@ is invoked to check execute access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is executable. This method checks that a file exists and that this Java virtual machine has appropriate privileges to @B_java#lang#Runtime#exec_E@ the file. The semantics may differ when checking access to a directory. For example, on UNIX systems, checking for execute access checks that the Java virtual machine has permission to search the directory in order to access file or subdirectories. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that the result of this method is immediately outdated, there is no guarantee that a subsequent attempt to execute the file will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.", "history": "Added in API level 26", "FullName": "public static boolean isExecutable (Path path)"}, "probeContentType(java.nio.file.Path)": {"Returns": [["@B_java#lang#String_E@", "The content type of the file, or null if the content type cannot be determined"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to probe"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is installed and it denies an unspecified permission required by a file type detector implementation."]], "SeeAlso": [], "Permissions": [], "Description": "Probes the content type of a file. This method uses the installed @B_java#nio#file#spi#FileTypeDetector_E@ implementations to probe the given file to determine its content type. Each file type detector's @B_java#nio#file#spi#FileTypeDetector#probeContentType_E@ is invoked, in turn, to probe the file type. If the file is recognized then the content type is returned. If the file is not recognized by any of the installed file type detectors then a system-default file type detector is invoked to guess the content type. A given invocation of the Java virtual machine maintains a system-wide list of file type detectors. Installed file type detectors are loaded using the service-provider loading facility defined by the @B_java#util#ServiceLoader_E@ class. Installed file type detectors are loaded using the system class loader. If the system class loader cannot be found then the extension class loader is used; If the extension class loader cannot be found then the bootstrap class loader is used. File type detectors are typically installed by placing them in a JAR file on the application class path or in the extension directory, the JAR file contains a provider-configuration file named java.nio.file.spi.FileTypeDetector in the resource directory META-INF/services, and the file lists one or more fully-qualified names of concrete subclass of FileTypeDetector that have a zero argument constructor. If the process of locating or instantiating the installed file type detectors fails then an unspecified error is thrown. The ordering that installed providers are located is implementation specific. The return value of this method is the string form of the value of a Multipurpose Internet Mail Extension (MIME) content type as defined by", "history": "Added in API level 26", "FullName": "public static String probeContentType (Path path)"}, "write(java.nio.file.Path,byte[],java.nio.file.OpenOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["byte[]", "byte: the byte array with the bytes to write"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs writing to or creating the file"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Writes bytes to a file. The options parameter specifies how the the file is created or opened. If no options are present then this method works as if the @B_java#nio#file#StandardOpenOption#CREATE_E@, @B_java#nio#file#StandardOpenOption#TRUNCATE_EXISTING_E@, and @B_java#nio#file#StandardOpenOption#WRITE_E@ options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing @B_java#nio#file#Files#isRegularFile_E@ to a size of 0. All bytes in the byte array are written to the file. The method ensures that the file is closed when all bytes have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.", "history": "Added in API level 26", "FullName": "public static Path write (Path path, byte[] bytes, OpenOption... options)"}, "newOutputStream(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#OutputStream_E@", "a new output stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open or create"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if options contains an invalid combination of options"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file. The @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check delete access if the file is opened with the DELETE_ON_CLOSE option."]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file, returning an output stream that may be used to write bytes to the file. The resulting stream will not be buffered. The stream will be safe for access by multiple concurrent threads. Whether the returned stream is This method opens or creates a file in exactly the manner specified by the @B_java#nio#file#Files#newByteChannel_E@ method with the exception that the @B_java#nio#file#StandardOpenOption#READ_E@ option may not be present in the array of options. If no options are present then this method works as if the @B_java#nio#file#StandardOpenOption#CREATE_E@, @B_java#nio#file#StandardOpenOption#TRUNCATE_EXISTING_E@, and @B_java#nio#file#StandardOpenOption#WRITE_E@ options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing @B_java#nio#file#Files#isRegularFile_E@ to a size of 0 if it exists.", "history": "Added in API level 26", "FullName": "public static OutputStream newOutputStream (Path path, OpenOption... options)"}, "newBufferedReader(java.nio.file.Path)": {"Returns": [["@B_java#io#BufferedReader_E@", "a new buffered reader, with default buffer size, to read text from the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening the file"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a file for reading, returning a BufferedReader to read text from the file in an efficient manner. Bytes from the file are decoded into characters using the @B_java#nio#charset#StandardCharsets#UTF_8_E@ @B_java#nio#charset#Charset_E@. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static BufferedReader newBufferedReader (Path path)"}, "walk(java.nio.file.Path,java.nio.file.FileVisitOption...)": {"Returns": [["@B_java#util#stream#Stream_E@", "the @B_java#util#stream#Stream_E@ of @B_java#nio#file#Path_E@"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the starting file"], ["@B_java#nio#file#FileVisitOption_E@", "FileVisitOption: options to configure the traversal"]], "Throws": [["@B_java#lang#SecurityException_E@", "If the security manager denies access to the starting file. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."], ["@B_java#io#IOException_E@", "if an I/O error is thrown when accessing the starting file."]], "SeeAlso": ["@B_java#nio#file#Files#walk_E@"], "Permissions": [], "Description": "Return a Stream that is lazily populated with Path by walking the file tree rooted at a given starting file. The file tree is traversed depth-first, the elements in the stream are @B_java#nio#file#Path_E@ objects that are obtained as if by @B_java#nio#file#Path#resolve_E@ the relative path against start. This method works as if invoking it were equivalent to evaluating the expression: The returned stream encapsulates one or more @B_java#nio#file#DirectoryStream_E@s. If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream's @B_java#util#stream#BaseStream#close_E@ method is invoked after the stream operations are completed. Operating on a closed stream will result in an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 26", "FullName": "public static Stream<Path> walk (Path start, FileVisitOption... options)"}, "createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to create"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the file"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs or the parent directory does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the new file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new and empty file, failing if the file already exists. The check for the existence of the file and the creation of the new file if it does not exist are a single operation that is atomic with respect to all other filesystem activities that might affect the directory. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the file. Each attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored.", "history": "Added in API level 26", "FullName": "public static Path createFile (Path path, FileAttribute...<?> attrs)"}, "setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)": {"Returns": [["@B_java#nio#file#Path_E@", "the path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#attribute#FileTime_E@", "FileTime: the new last modified time"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, the security manager's @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to file"]], "SeeAlso": ["@B_java#nio#file#attribute#BasicFileAttributeView#setTimes_E@"], "Permissions": [], "Description": "Updates a file's last modified time attribute. The file time is converted to the epoch and precision supported by the file system. Converting from finer to coarser granularities result in precision loss. The behavior of this method when attempting to set the last modified time when it is not supported by the file system or is outside the range supported by the underlying file store is not defined. It may or not fail by throwing an IOException.", "history": "Added in API level 26", "FullName": "public static Path setLastModifiedTime (Path path, FileTime time)"}, "newBufferedWriter(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#BufferedWriter_E@", "a new buffered writer, with default buffer size, to write text to the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening or creating the file"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Opens or creates a file for writing, returning a BufferedWriter to write text to the file in an efficient manner. The text is encoded into bytes for writing using the @B_java#nio#charset#StandardCharsets#UTF_8_E@ @B_java#nio#charset#Charset_E@. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static BufferedWriter newBufferedWriter (Path path, OpenOption... options)"}, "readAllLines(java.nio.file.Path)": {"Returns": [["@B_java#util#List_E@", "the lines from the file as a List; whether the List is modifiable or not is implementation dependent and therefore not specified"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Read all lines from a file. Bytes from the file are decoded into characters using the @B_java#nio#charset#StandardCharsets#UTF_8_E@ @B_java#nio#charset#Charset_E@. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static List<String> readAllLines (Path path)"}, "find(java.nio.file.Path,int,java.util.function.BiPredicate<java.nio.file.Path,java.nio.file.attribute.BasicFileAttributes>,java.nio.file.FileVisitOption...)": {"Returns": [["@B_java#util#stream#Stream_E@", "the @B_java#util#stream#Stream_E@ of @B_java#nio#file#Path_E@"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the starting file"], ["int", "int: the maximum number of directory levels to search"], ["@B_java#util#function#BiPredicate_E@", "BiPredicate: the function used to decide whether a file should be included in the returned stream"], ["@B_java#nio#file#FileVisitOption_E@", "FileVisitOption: options to configure the traversal"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the maxDepth parameter is negative"], ["@B_java#lang#SecurityException_E@", "If the security manager denies access to the starting file. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."], ["@B_java#io#IOException_E@", "if an I/O error is thrown when accessing the starting file."]], "SeeAlso": ["@B_java#nio#file#Files#walk_E@"], "Permissions": [], "Description": "Return a Stream that is lazily populated with Path by searching for files in a file tree rooted at a given starting file. This method walks the file tree in exactly the manner specified by the @B_java#nio#file#Files#walk_E@ method. For each file encountered, the given @B_java#util#function#BiPredicate_E@ is invoked with its @B_java#nio#file#Path_E@ and @B_java#nio#file#attribute#BasicFileAttributes_E@. The Path object is obtained as if by @B_java#nio#file#Path#resolve_E@ the relative path against start and is only included in the returned @B_java#util#stream#Stream_E@ if the BiPredicate returns true. Compare to calling @B_java#util#stream#Stream#filter_E@ on the Stream returned by walk method, this method may be more efficient by avoiding redundant retrieval of the BasicFileAttributes. The returned stream encapsulates one or more @B_java#nio#file#DirectoryStream_E@s. If timely disposal of file system resources is required, the try-with-resources construct should be used to ensure that the stream's @B_java#util#stream#BaseStream#close_E@ method is invoked after the stream operations are completed. Operating on a closed stream will result in an @B_java#lang#IllegalStateException_E@. If an @B_java#io#IOException_E@ is thrown when accessing the directory after returned from this method, it is wrapped in an @B_java#io#UncheckedIOException_E@ which will be thrown from the method that caused the access to take place.", "history": "Added in API level 26", "FullName": "public static Stream<Path> find (Path start, int maxDepth, BiPredicate<Path, BasicFileAttributes> matcher, FileVisitOption... options)"}, "write(java.nio.file.Path,java.lang.Iterable<?extendsjava.lang.CharSequence>,java.nio.file.OpenOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Iterable_E@", "Iterable: an object to iterate over the char sequences"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs writing to or creating the file, or the text cannot be encoded as UTF-8"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Write lines of text to a file. Characters are encoded into bytes using the @B_java#nio#charset#StandardCharsets#UTF_8_E@ @B_java#nio#charset#Charset_E@. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static Path write (Path path, Iterable<? extends CharSequence> lines, OpenOption... options)"}, "createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the directory"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the directory to create"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the directory"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if dir exists but is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "in the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked prior to attempting to create a directory and its @B_java#lang#SecurityManager#checkRead_E@ is invoked for each parent directory that is checked. If dir is not an absolute path then its @B_java#nio#file#Path#toAbsolutePath_E@ may need to be invoked to get its absolute path. This may invoke the security manager's @B_java#lang#SecurityManager#checkPropertyAccess_E@ method to check access to the system property user.dir"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a directory by creating all nonexistent parent directories first. Unlike the @B_java#nio#file#Files#createDirectory_E@ method, an exception is not thrown if the directory could not be created because it already exists. The attrs parameter is optional @B_java#nio#file#attribute#FileAttribute_E@ to set atomically when creating the nonexistent directories. Each file attribute is identified by its @B_java#nio#file#attribute#FileAttribute#name_E@. If more than one attribute of the same name is included in the array then all but the last occurrence is ignored. If this method fails, then it may do so after creating some, but not all, of the parent directories.", "history": "Added in API level 26", "FullName": "public static Path createDirectories (Path dir, FileAttribute...<?> attrs)"}, "write(java.nio.file.Path,java.lang.Iterable<?extendsjava.lang.CharSequence>,java.nio.charset.Charset,java.nio.file.OpenOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Iterable_E@", "Iterable: an object to iterate over the char sequences"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to use for encoding"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs writing to or creating the file, or the text cannot be encoded using the specified charset"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Write lines of text to a file. Each line is a char sequence and is written to the file in sequence with each line terminated by the platform's line separator, as defined by the system property line.separator. Characters are encoded into bytes using the specified charset. The options parameter specifies how the the file is created or opened. If no options are present then this method works as if the @B_java#nio#file#StandardOpenOption#CREATE_E@, @B_java#nio#file#StandardOpenOption#TRUNCATE_EXISTING_E@, and @B_java#nio#file#StandardOpenOption#WRITE_E@ options are present. In other words, it opens the file for writing, creating the file if it doesn't exist, or initially truncating an existing @B_java#nio#file#Files#isRegularFile_E@ to a size of 0. The method ensures that the file is closed when all lines have been written (or an I/O error or other runtime exception is thrown). If an I/O error occurs then it may do so after the file has created or truncated, or after some bytes have been written to the file.", "history": "Added in API level 26", "FullName": "public static Path write (Path path, Iterable<? extends CharSequence> lines, Charset cs, OpenOption... options)"}, "readAllLines(java.nio.file.Path,java.nio.charset.Charset)": {"Returns": [["@B_java#util#List_E@", "the lines from the file as a List; whether the List is modifiable or not is implementation dependent and therefore not specified"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to use for decoding"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs reading from the file or a malformed or unmappable byte sequence is read"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": ["@B_java#nio#file#Files#newBufferedReader_E@"], "Permissions": [], "Description": "Read all lines from a file. This method ensures that the file is closed when all bytes have been read or an I/O error, or other runtime exception, is thrown. Bytes from the file are decoded into characters using the specified charset. This method recognizes the following as line terminators: \\u000D followed by \\u000A, CARRIAGE RETURN followed by LINE FEED \\u000A, LINE FEED \\u000D, CARRIAGE RETURN Additional Unicode line terminators may be recognized in future releases. Note that this method is intended for simple cases where it is convenient to read all lines in a single operation. It is not intended for reading in large files.", "history": "Added in API level 26", "FullName": "public static List<String> readAllLines (Path path, Charset cs)"}, "isSymbolicLink(java.nio.file.Path)": {"Returns": [["boolean", "true if the file is a symbolic link; false if the file does not exist, is not a symbolic link, or it cannot be determined if the file is a symbolic link or not."]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the file"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is a symbolic link. Where it is required to distinguish an I/O exception from the case that the file is not a symbolic link then the file attributes can be read with the @B_java#nio#file#Files#readAttributes_E@ method and the file type tested with the @B_java#nio#file#attribute#BasicFileAttributes#isSymbolicLink_E@ method.", "history": "Added in API level 26", "FullName": "public static boolean isSymbolicLink (Path path)"}, "newDirectoryStream(java.nio.file.Path)": {"Returns": [["@B_java#nio#file#DirectoryStream_E@", "a new and open DirectoryStream object"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the directory"]], "Throws": [["@B_java#nio#file#NotDirectoryException_E@", "if the file could not otherwise be opened because it is not a directory (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a directory, returning a @B_java#nio#file#DirectoryStream_E@ to iterate over all entries in the directory. The elements returned by the directory stream's @B_java#nio#file#DirectoryStream#iterator_E@ are of type Path, each one representing an entry in the directory. The Path objects are obtained as if by @B_java#nio#file#Path#resolve_E@ the name of the directory entry against dir. When not using the try-with-resources construct, then directory stream's close method should be invoked after iteration is completed so as to free any resources held for the open directory. When an implementation supports operations on entries in the directory that execute in a race-free manner then the returned directory stream is a @B_java#nio#file#SecureDirectoryStream_E@.", "history": "Added in API level 26", "FullName": "public static DirectoryStream<Path> newDirectoryStream (Path dir)"}, "newInputStream(java.nio.file.Path,java.nio.file.OpenOption...)": {"Returns": [["@B_java#io#InputStream_E@", "a new input stream"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to open"], ["@B_java#nio#file#OpenOption_E@", "OpenOption: options specifying how the file is opened"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if an invalid combination of options is specified"], ["@B_java#lang#UnsupportedOperationException_E@", "if an unsupported option is specified"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a file, returning an input stream to read from the file. The stream will not be buffered, and is not required to support the @B_java#io#InputStream#mark_E@ or @B_java#io#InputStream#reset_E@ methods. The stream will be safe for access by multiple concurrent threads. Reading commences at the beginning of the file. Whether the returned stream is The options parameter determines how the file is opened. If no options are present then it is equivalent to opening the file with the @B_java#nio#file#StandardOpenOption#READ_E@ option. In addition to the READ option, an implementation may also support additional implementation specific options.", "history": "Added in API level 26", "FullName": "public static InputStream newInputStream (Path path, OpenOption... options)"}, "setPosixFilePermissions(java.nio.file.Path,java.util.Set<java.nio.file.attribute.PosixFilePermission>)": {"Returns": [["@B_java#nio#file#Path_E@", "The path"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the file"], ["@B_java#util#Set_E@", "Set: The new set of permissions"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the associated file system does not support the PosixFileAttributeView"], ["@B_java#lang#ClassCastException_E@", "if the sets contains elements that are not of type PosixFilePermission"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Sets a file's POSIX permissions. The path parameter is associated with a FileSystem that supports the @B_java#nio#file#attribute#PosixFileAttributeView_E@. This attribute view provides access to file attributes commonly associated with files on file systems used by operating systems that implement the Portable Operating System Interface (POSIX) family of standards.", "history": "Added in API level 26", "FullName": "public static Path setPosixFilePermissions (Path path, Set<PosixFilePermission> perms)"}, "copy(java.io.InputStream,java.nio.file.Path,java.nio.file.CopyOption...)": {"Returns": [["long", "the number of bytes read or written"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream to read from"], ["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#CopyOption_E@", "CopyOption: options specifying how the copy should be done"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when reading or writing"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the target file exists but cannot be replaced because the REPLACE_EXISTING option is not specified (optional specific exception)"], ["@B_java#nio#file#DirectoryNotEmptyException_E@", "the REPLACE_EXISTING option is specified but the file cannot be replaced because it is a non-empty directory (optional specific exception) *"], ["@B_java#lang#UnsupportedOperationException_E@", "if options contains a copy option that is not supported"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file. Where the REPLACE_EXISTING option is specified, the security manager's @B_java#lang#SecurityManager#checkDelete_E@ method is invoked to check that an existing file can be deleted."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all bytes from an input stream to a file. On return, the input stream will be at end of stream. By default, the copy fails if the target file already exists or is a symbolic link. If the @B_java#nio#file#StandardCopyOption#REPLACE_EXISTING_E@ option is specified, and the target file already exists, then it is replaced if it is not a non-empty directory. If the target file exists and is a symbolic link, then the symbolic link is replaced. In this release, the REPLACE_EXISTING option is the only option required to be supported by this method. Additional options may be supported in future releases. If an I/O error occurs reading from the input stream or writing to the file, then it may do so after the target file has been created and after some bytes have been read or written. Consequently the input stream may not be at end of stream and may be in an inconsistent state. It is strongly recommended that the input stream be promptly closed if an I/O error occurs. This method may block indefinitely reading from the input stream (or writing to the file). The behavior for the case that the input stream is", "history": "Added in API level 26", "FullName": "public static long copy (InputStream in, Path target, CopyOption... options)"}, "readAllBytes(java.nio.file.Path)": {"Returns": [["byte[]", "a byte array containing the bytes read from the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs reading from the stream"], ["@B_java#lang#OutOfMemoryError_E@", "if an array of the required size cannot be allocated, for example the file is larger that 2GB"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Reads all the bytes from a file. The method ensures that the file is closed when all bytes have been read or an I/O error, or other runtime exception, is thrown. Note that this method is intended for simple cases where it is convenient to read all bytes into a byte array. It is not intended for reading in large files.", "history": "Added in API level 26", "FullName": "public static byte[] readAllBytes (Path path)"}, "getLastModifiedTime(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["@B_java#nio#file#attribute#FileTime_E@", "a FileTime representing the time the file was last modified, or an implementation specific default when a time stamp to indicate the time of last modification is not supported by the file system"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": ["@B_java#nio#file#attribute#BasicFileAttributes#lastModifiedTime_E@"], "Permissions": [], "Description": "Returns a file's last modified time. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed.", "history": "Added in API level 26", "FullName": "public static FileTime getLastModifiedTime (Path path, LinkOption... options)"}, "getFileAttributeView(java.nio.file.Path,java.lang.Class<V>,java.nio.file.LinkOption...)": {"Returns": [["V", "a file attribute view of the specified type, or null if the attribute view type is not available"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#Class_E@", "Class: the Class object corresponding to the file attribute view"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a file attribute view of a given type. A file attribute view provides a read-only or updatable view of a set of file attributes. This method is intended to be used where the file attribute view defines type-safe methods to read or update the file attributes. The type parameter is the type of the attribute view required and the method returns an instance of that type if supported. The @B_java#nio#file#attribute#BasicFileAttributeView_E@ type supports access to the basic attributes of a file. Invoking this method to select a file attribute view of that type will always return an instance of that class. The options array may be used to indicate how symbolic links are handled by the resulting file attribute view for the case that the file is a symbolic link. By default, symbolic links are followed. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. This option is ignored by implementations that do not support symbolic links.", "history": "Added in API level 26", "FullName": "public static V getFileAttributeView (Path path, Class<V> type, LinkOption... options)"}, "createLink(java.nio.file.Path,java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the link (directory entry)"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the link (directory entry) to create"], ["@B_java#nio#file#Path_E@", "Path: a path to an existing file"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support adding an existing file to a directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the entry could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"hard\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to either the link or the existing file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new link (directory entry) for an existing file The link parameter locates the directory entry to create. The existing parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using link as the path. On some file systems this is known as creating a \"hard link\". Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.", "history": "Added in API level 26", "FullName": "public static Path createLink (Path link, Path existing)"}, "walkFileTree(java.nio.file.Path,java.nio.file.FileVisitor<?superjava.nio.file.Path>)": {"Returns": [["@B_java#nio#file#Path_E@", "the starting file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the starting file"], ["@B_java#nio#file#FileVisitor_E@", "FileVisitor: the file visitor to invoke for each file"]], "Throws": [["@B_java#lang#SecurityException_E@", "If the security manager denies access to the starting file. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."], ["@B_java#io#IOException_E@", "if an I/O error is thrown by a visitor method"]], "SeeAlso": [], "Permissions": [], "Description": "Walks a file tree. This method works as if invoking it were equivalent to evaluating the expression:", "history": "Added in API level 26", "FullName": "public static Path walkFileTree (Path start, FileVisitor<? super Path> visitor)"}, "createTempFile(java.lang.String,java.lang.String,java.nio.file.attribute.FileAttribute<?>...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the newly created file that did not exist before this method was invoked"]], "Parameters": [["@B_java#lang#String_E@", "String: the prefix string to be used in generating the file's name; may be null"], ["@B_java#lang#String_E@", "String: the suffix string to be used in generating the file's name; may be null, in which case \".tmp\" is used"], ["@B_java#nio#file#attribute#FileAttribute_E@", "FileAttribute: an optional list of file attributes to set atomically when creating the file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the prefix or suffix parameters cannot be used to generate a candidate file name"], ["@B_java#lang#UnsupportedOperationException_E@", "if the array contains an attribute that cannot be set atomically when creating the directory"], ["@B_java#io#IOException_E@", "if an I/O error occurs or the temporary-file directory does not exist"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ method is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty file in the default temporary-file directory, using the given prefix and suffix to generate its name. The resulting Path is associated with the default FileSystem. This method works in exactly the manner specified by the @B_java#nio#file#Files#createTempFile_E@ method for the case that the dir parameter is the temporary-file directory.", "history": "Added in API level 26", "FullName": "public static Path createTempFile (String prefix, String suffix, FileAttribute...<?> attrs)"}, "newBufferedReader(java.nio.file.Path,java.nio.charset.Charset)": {"Returns": [["@B_java#io#BufferedReader_E@", "a new buffered reader, with default buffer size, to read text from the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#charset#Charset_E@", "Charset: the charset to use for decoding"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening the file"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the file."]], "SeeAlso": ["@B_java#nio#file#Files#readAllLines_E@"], "Permissions": [], "Description": "Opens a file for reading, returning a BufferedReader that may be used to read text from the file in an efficient manner. Bytes from the file are decoded into characters using the specified charset. Reading commences at the beginning of the file. The Reader methods that read from the file throw IOException if a malformed or unmappable byte sequence is read.", "history": "Added in API level 26", "FullName": "public static BufferedReader newBufferedReader (Path path, Charset cs)"}, "isWritable(java.nio.file.Path)": {"Returns": [["boolean", "true if the file exists and is writable; false if the file does not exist, write access would be denied because the Java virtual machine has insufficient privileges, or access cannot be determined"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to check"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkWrite_E@ is invoked to check write access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is writable. This method checks that a file exists and that this Java virtual machine has appropriate privileges that would allow it open the file for writing. Depending on the implementation, this method may require to read file permissions, access control lists, or other file attributes in order to check the effective access to the file. Consequently, this method may not be atomic with respect to other file system operations. Note that result of this method is immediately outdated, there is no guarantee that a subsequent attempt to open the file for writing will succeed (or even that it will access the same file). Care should be taken when using this method in security sensitive applications.", "history": "Added in API level 26", "FullName": "public static boolean isWritable (Path path)"}, "getOwner(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["@B_java#nio#file#attribute#UserPrincipal_E@", "A user principal representing the owner of the file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: The path to the file"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the associated file system does not support the FileOwnerAttributeView"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#lang#RuntimePermission_E@(\"accessUserInformation\") or its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the owner of a file. The path parameter is associated with a file system that supports @B_java#nio#file#attribute#FileOwnerAttributeView_E@. This file attribute view provides access to a file attribute that is the owner of the file.", "history": "Added in API level 26", "FullName": "public static UserPrincipal getOwner (Path path, LinkOption... options)"}, "isSameFile(java.nio.file.Path,java.nio.file.Path)": {"Returns": [["boolean", "true if, and only if, the two paths locate the same file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: one path to the file"], ["@B_java#nio#file#Path_E@", "Path: the other path"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to both files."]], "SeeAlso": ["@B_java#nio#file#attribute#BasicFileAttributes#fileKey_E@"], "Permissions": [], "Description": "Tests if two paths locate the same file. If both Path objects are @B_java#nio#file#Path#equals_E@ then this method returns true without checking if the file exists. If the two Path objects are associated with different providers then this method returns false. Otherwise, this method checks if both Path objects locate the same file, and depending on the implementation, may require to open or access both files. If the file system and files remain static, then this method implements an equivalence relation for non-null Paths. It is Path f, isSameFile(f,f) should return true. It is Paths f and g, isSameFile(f,g) will equal isSameFile(g,f). It is Paths f, g, and h, if isSameFile(f,g) returns true and isSameFile(g,h) returns true, then isSameFile(f,h) will return return true.", "history": "Added in API level 26", "FullName": "public static boolean isSameFile (Path path, Path path2)"}, "isRegularFile(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["boolean", "true if the file is a regular file; false if the file does not exist, is not a regular file, or it cannot be determined if the file is a regular file or not."]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkRead_E@ method denies read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether a file is a regular file with opaque content. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is read. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. Where it is required to distinguish an I/O exception from the case that the file is not a regular file then the file attributes can be read with the @B_java#nio#file#Files#readAttributes_E@ method and the file type tested with the @B_java#nio#file#attribute#BasicFileAttributes#isRegularFile_E@ method.", "history": "Added in API level 26", "FullName": "public static boolean isRegularFile (Path path, LinkOption... options)"}, "notExists(java.nio.file.Path,java.nio.file.LinkOption...)": {"Returns": [["boolean", "true if the file does not exist; false if the file exists or its existence cannot be determined"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to test"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#SecurityException_E@", "In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ is invoked to check read access to the file."]], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the file located by this path does not exist. This method is intended for cases where it is required to take action when it can be confirmed that a file does not exist. The options parameter may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed. Note that this method is not the complement of the @B_java#nio#file#Files#exists_E@ method. Where it is not possible to determine if a file exists or not then both methods return false. As with the exists method, the result of this method is immediately outdated. If this method indicates the file does exist then there is no guarantee that a subsequence attempt to create the file will succeed. Care should be taken when using this method in security sensitive applications.", "history": "Added in API level 26", "FullName": "public static boolean notExists (Path path, LinkOption... options)"}, "walkFileTree(java.nio.file.Path,java.util.Set<java.nio.file.FileVisitOption>,int,java.nio.file.FileVisitor<?superjava.nio.file.Path>)": {"Returns": [["@B_java#nio#file#Path_E@", "the starting file"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the starting file"], ["@B_java#util#Set_E@", "Set: options to configure the traversal"], ["int", "int: the maximum number of directory levels to visit"], ["@B_java#nio#file#FileVisitor_E@", "FileVisitor: the file visitor to invoke for each file"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the maxDepth parameter is negative"], ["@B_java#lang#SecurityException_E@", "If the security manager denies access to the starting file. In the case of the default provider, the @B_java#lang#SecurityManager#checkRead_E@ method is invoked to check read access to the directory."], ["@B_java#io#IOException_E@", "if an I/O error is thrown by a visitor method"]], "SeeAlso": [], "Permissions": [], "Description": "Walks a file tree. This method walks a file tree rooted at a given starting file. The file tree traversal is depth-first with the given @B_java#nio#file#FileVisitor_E@ invoked for each file encountered. File tree traversal completes when all accessible files in the tree have been visited, or a visit method returns a result of @B_java#nio#file#FileVisitResult#TERMINATE_E@. Where a visit method terminates due an IOException, an uncaught error, or runtime exception, then the traversal is terminated and the error or exception is propagated to the caller of this method. For each file encountered this method attempts to read its @B_java#nio#file#attribute#BasicFileAttributes_E@. If the file is not a directory then the @B_java#nio#file#FileVisitor#visitFile_E@ method is invoked with the file attributes. If the file attributes cannot be read, due to an I/O exception, then the @B_java#nio#file#FileVisitor#visitFileFailed_E@ method is invoked with the I/O exception. Where the file is a directory, and the directory could not be opened, then the visitFileFailed method is invoked with the I/O exception, after which, the file tree walk continues, by default, at the next sibling of the directory. Where the directory is opened successfully, then the entries in the directory, and their descendants are visited. When all entries have been visited, or an I/O error occurs during iteration of the directory, then the directory is closed and the visitor's @B_java#nio#file#FileVisitor#postVisitDirectory_E@ method is invoked. The file tree walk then continues, by default, at the next sibling of the directory. By default, symbolic links are not automatically followed by this method. If the options parameter contains the @B_java#nio#file#FileVisitOption#FOLLOW_LINKS_E@ option then symbolic links are followed. When following links, and the attributes of the target cannot be read, then this method attempts to get the BasicFileAttributes of the link. If they can be read then the visitFile method is invoked with the attributes of the link (otherwise the visitFileFailed method is invoked as specified above). If the options parameter contains the @B_java#nio#file#FileVisitOption#FOLLOW_LINKS_E@ option then this method keeps track of directories visited so that cycles can be detected. A cycle arises when there is an entry in a directory that is an ancestor of the directory. Cycle detection is done by recording the @B_java#nio#file#attribute#BasicFileAttributes#fileKey_E@ of directories, or if file keys are not available, by invoking the @B_java#nio#file#Files#isSameFile_E@ method to test if a directory is the same file as an ancestor. When a cycle is detected it is treated as an I/O error, and the @B_java#nio#file#FileVisitor#visitFileFailed_E@ method is invoked with an instance of @B_java#nio#file#FileSystemLoopException_E@. The maxDepth parameter is the maximum number of levels of directories to visit. A value of 0 means that only the starting file is visited, unless denied by the security manager. A value of @B_java#lang#Integer#MAX_VALUE_E@ may be used to indicate that all levels should be visited. The visitFile method is invoked for all files, including directories, encountered at maxDepth, unless the basic file attributes cannot be read, in which case the visitFileFailed method is invoked. If a visitor returns a result of null then NullPointerException is thrown. When a security manager is installed and it denies access to a file (or directory), then it is ignored and the visitor is not invoked for that file (or directory).", "history": "Added in API level 26", "FullName": "public static Path walkFileTree (Path start, Set<FileVisitOption> options, int maxDepth, FileVisitor<? super Path> visitor)"}, "createLink(java.nio.file.Path, java.nio.file.Path)": {"Returns": [["@B_java#nio#file#Path_E@", "the path to the link (directory entry)"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the link (directory entry) to create"], ["@B_java#nio#file#Path_E@", "Path: a path to an existing file"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the implementation does not support adding an existing file to a directory"], ["@B_java#nio#file#FileAlreadyExistsException_E@", "if the entry could not otherwise be created because a file of that name already exists (optional specific exception)"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it denies @B_java#nio#file#LinkPermission_E@(\"hard\") or its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to either the link or the existing file."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new link (directory entry) for an existing file The link parameter locates the directory entry to create. The existing parameter is the path to an existing file. This method creates a new directory entry for the file so that it can be accessed using link as the path. On some file systems this is known as creating a \"hard link\". Whether the file attributes are maintained for the file or for each directory entry is file system specific and therefore not specified. Typically, a file system requires that all links (directory entries) for a file be on the same file system. Furthermore, on some platforms, the Java virtual machine may require to be started with implementation specific privileges to create hard links or to create links to directories.", "history": "added in API level 26", "FullName": "public static Path createLink (Path link, Path existing)"}, "setAttribute(java.nio.file.Path,java.lang.String,java.lang.Object,java.nio.file.LinkOption...)": {"Returns": [["@B_java#nio#file#Path_E@", "the path parameter"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#String_E@", "String: the attribute to set"], ["@B_java#lang#Object_E@", "Object: the attribute value"], ["@B_java#nio#file#LinkOption_E@", "LinkOption: options indicating how symbolic links are handled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available"], ["@B_java#lang#IllegalArgumentException_E@", "if the attribute name is not specified, or is not recognized, or the attribute value is of the correct type but has an inappropriate value"], ["@B_java#lang#ClassCastException_E@", "if the attribute value is not of the expected type or is a collection containing elements that are not of the expected type"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, its @B_java#lang#SecurityManager#checkWrite_E@ method denies write access to the file. If this method is invoked to set security sensitive attributes then the security manager may be invoked to check for additional permissions."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of a file attribute. The attribute parameter identifies the attribute to be set and takes the form: ':' stands for itself. @B_java#nio#file#attribute#AttributeView#name_E@ of a @B_java#nio#file#attribute#FileAttributeView_E@ that identifies a set of file attributes. If not specified then it defaults to \"basic\", the name of the file attribute view that identifies the basic set of file attributes common to many file systems. The options array may be used to indicate how symbolic links are handled for the case that the file is a symbolic link. By default, symbolic links are followed and the file attribute of the final target of the link is set. If the option @B_java#nio#file#LinkOption#NOFOLLOW_LINKS_E@ is present then symbolic links are not followed.", "history": "Added in API level 26", "FullName": "public static Path setAttribute (Path path, String attribute, Object value, LinkOption... options)"}}, "Inheritance": [], "ClassName": "java.nio.file.Files", "ClassDesc": "This class consists exclusively of static methods that operate on files, directories, or other types of files. In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations."}