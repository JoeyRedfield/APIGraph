{"Functions": {"insert(int,java.lang.CharSequence)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(where, where, text, 0, text.length());", "history": "Added in API level 1", "FullName": "public abstract Editable insert (int where, CharSequence text)"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#Editable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, start, end)", "history": "Added in API level 1", "FullName": "public abstract Editable append (CharSequence text, int start, int end)"}, "clearSpans()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all spans from the Editable, as if by calling @B_android#text#Spannable#removeSpan_E@ on each of them.", "history": "Added in API level 1", "FullName": "public abstract void clearSpans ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(0, length(), \"\", 0, 0). Note that this clears the text, not the spans; use @B_android#text#Editable#clearSpans_E@ if you need that.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "insert(int, java.lang.CharSequence)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(where, where, text, 0, text.length());", "history": "added in API level 1", "FullName": "public abstract Editable insert (int where, CharSequence text)"}, "delete(int,int)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(st, en, \"\", 0, 0)", "history": "Added in API level 1", "FullName": "public abstract Editable delete (int st, int en)"}, "setFilters(android.text.InputFilter[])": {"Returns": [], "Parameters": [["@B_android#text#InputFilter_E@", "InputFilter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the series of filters that will be called in succession whenever the text of this Editable is changed, each of which has the opportunity to limit or transform the text that is being inserted.", "history": "Added in API level 1", "FullName": "public abstract void setFilters (InputFilter[] filters)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_android#text#Editable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, start, end)", "history": "added in API level 1", "FullName": "public abstract Editable append (CharSequence text, int start, int end)"}, "delete(int, int)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(st, en, \"\", 0, 0)", "history": "added in API level 1", "FullName": "public abstract Editable delete (int st, int en)"}, "replace(int, int, java.lang.CharSequence)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(st, en, text, 0, text.length())", "history": "added in API level 1", "FullName": "public abstract Editable replace (int st, int en, CharSequence text)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_android#text#Editable_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this Appendable."]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, 0, text.length())", "history": "Added in API level 1", "FullName": "public abstract Editable append (CharSequence text)"}, "getFilters()": {"Returns": [["@B_android#text#InputFilter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the array of input filters that are currently applied to changes to this Editable.", "history": "Added in API level 1", "FullName": "public abstract InputFilter[] getFilters ()"}, "insert(int, java.lang.CharSequence, int, int)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(where, where, text, start, end)", "history": "added in API level 1", "FullName": "public abstract Editable insert (int where, CharSequence text, int start, int end)"}, "append(char)": {"Returns": [["@B_android#text#Editable_E@", "A reference to this Appendable"]], "Parameters": [["char", "char: The character to append"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for append(String.valueOf(text)).", "history": "Added in API level 1", "FullName": "public abstract Editable append (char text)"}, "replace(int,int,java.lang.CharSequence)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(st, en, text, 0, text.length())", "history": "Added in API level 1", "FullName": "public abstract Editable replace (int st, int en, CharSequence text)"}, "replace(int,int,java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#Editable_E@", "a reference to this object."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Spanned_E@"], "Permissions": [], "Description": "Replaces the specified range (st\u2026en) of text in this Editable with a copy of the slice start\u2026end from source. The destination slice may be empty, in which case the operation is an insertion, or the source slice may be empty, in which case the operation is a deletion. Before the change is committed, each filter that was set with @B_android#text#Editable#setFilters_E@ is given the opportunity to modify the source text. If source is Spanned, the spans from it are preserved into the Editable. Existing spans within the Editable that entirely cover the replaced range are retained, but any that were strictly within the range that was replaced are removed. If the source contains a span with @B_android#text#Spanned#SPAN_PARAGRAPH_E@ flag, and it does not satisfy the paragraph boundary constraint, it is not retained. As a special case, the cursor position is preserved even when the entire range where it is located is replaced.", "history": "Added in API level 1", "FullName": "public abstract Editable replace (int st, int en, CharSequence source, int start, int end)"}, "insert(int,java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#Editable_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#text#Editable#replace_E@"], "Permissions": [], "Description": "Convenience for replace(where, where, text, start, end)", "history": "Added in API level 1", "FullName": "public abstract Editable insert (int where, CharSequence text, int start, int end)"}}, "Inheritance": [], "ClassName": "android.text.Editable", "ClassDesc": "This is the interface for text whose content and markup can be changed (as opposed to immutable text like Strings). If you make a @B_android#text#DynamicLayout_E@ of an Editable, the layout will be reflowed as the text is changed."}