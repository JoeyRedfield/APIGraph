{"Functions": {"charsets()": {"Returns": [["@B_java#util#Iterator_E@", "The new iterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an iterator that iterates over the charsets supported by this provider. This method is used in the implementation of the @B_java#nio#charset#Charset#availableCharsets_E@ method.", "history": "Added in API level 1", "FullName": "public abstract Iterator<Charset> charsets ()"}, "charsetForName(java.lang.String)": {"Returns": [["@B_java#nio#charset#Charset_E@", "A charset object for the named charset, or null if the named charset is not supported by this provider"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the requested charset; may be either a canonical name or an alias"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a charset for the given charset name.", "history": "Added in API level 1", "FullName": "public abstract Charset charsetForName (String charsetName)"}, "CharsetProvider()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager has been installed and it denies @B_java#lang#RuntimePermission_E@(\"charsetProvider\")"]], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new charset provider.", "history": "Added in API level 1", "FullName": "protected CharsetProvider ()"}}, "Inheritance": [], "ClassName": "java.nio.charset.spi.CharsetProvider", "ClassDesc": "Charset service-provider class. A charset provider is a concrete subclass of this class that has a zero-argument constructor and some number of associated charset implementation classes. Charset providers may be installed in an instance of the Java platform as extensions, that is, jar files placed into any of the usual extension directories. Providers may also be made available by adding them to the applet or application class path or by some other platform-specific means. Charset providers are looked up via the current thread's @B_java#lang#Thread#getContextClassLoader_E@. A charset provider identifies itself with a provider-configuration file named If a particular concrete charset provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates will be ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible from the same class loader that was initially queried to locate the configuration file; this is not necessarily the class loader that loaded the file."}