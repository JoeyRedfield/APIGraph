{"Functions": {"getSpaceLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that does not allow any special characters except space (' '). Does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getSpaceLegal ()"}, "getAmpAndSpaceLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that does not allow any special characters except ampersand ('&') and space (' '). Does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAmpAndSpaceLegal ()"}, "getEffectiveValueSanitizer(java.lang.String)": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "the effective value sanitizer for a parameter."]], "Parameters": [["@B_java#lang#String_E@", "String: an unescaped parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the effective value sanitizer for a parameter. Like getValueSanitizer, except if there is no value sanitizer registered for a parameter, and unregistered parameters are allowed, then the default value sanitizer is returned.", "history": "Added in API level 1", "FullName": "public UrlQuerySanitizer.ValueSanitizer getEffectiveValueSanitizer (String parameter)"}, "parseEntry(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an escaped parameter"], ["@B_java#lang#String_E@", "String: an unsanitized escaped value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse an escaped parameter-value pair. The default implementation unescapes both the parameter and the value, then looks up the effective value sanitizer for the parameter and uses it to sanitize the value. If all goes well then addSanitizedValue is called with the unescaped parameter and the sanitized unescaped value.", "history": "Added in API level 1", "FullName": "protected void parseEntry (String parameter, String value)"}, "getPreferFirstRepeatedParameter()": {"Returns": [["boolean", "true if the first occurrence of a repeated parameter is preferred."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#setPreferFirstRepeatedParameter_E@"], "Permissions": [], "Description": "Get whether or not the first occurrence of a repeated parameter is preferred.", "history": "Added in API level 1", "FullName": "public boolean getPreferFirstRepeatedParameter ()"}, "registerParameters(java.lang.String[],android.net.UrlQuerySanitizer.ValueSanitizer)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: An array of unencoded parameter names."]], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#registerParameter_E@"], "Permissions": [], "Description": "Register a value sanitizer for an array of parameters.", "history": "Added in API level 1", "FullName": "public void registerParameters (String[] parameters, UrlQuerySanitizer.ValueSanitizer valueSanitizer)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the existing entries. Called to get ready to parse a new query string.", "history": "Added in API level 1", "FullName": "protected void clear ()"}, "decodeHexDigit(char)": {"Returns": [["int", "the integer value of the hexidecimal digit."]], "Parameters": [["char", "char: the hexidecimal digit."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert a character that represents a hexidecimal digit into an integer. If the character is not a hexidecimal digit, then -1 is returned. Both upper case and lower case hex digits are allowed.", "history": "Added in API level 1", "FullName": "protected int decodeHexDigit (char c)"}, "getUnregisteredParameterValueSanitizer()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "the current ValueSanitizer used to sanitize unregistered parameter values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the current value sanitizer used when processing unregistered parameter values.", "history": "Added in API level 1", "FullName": "public UrlQuerySanitizer.ValueSanitizer getUnregisteredParameterValueSanitizer ()"}, "getAllButNulAndAngleBracketsLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that allows any special characters except angle brackets ('') and Nul ('\\0'). Allows script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAllButNulAndAngleBracketsLegal ()"}, "getAllIllegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that does not allow any special characters, and also does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAllIllegal ()"}, "setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer.ValueSanitizer)": {"Returns": [], "Parameters": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "UrlQuerySanitizer.ValueSanitizer: set the ValueSanitizer used to sanitize unregistered parameter values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value sanitizer used when processing unregistered parameter values.", "history": "Added in API level 1", "FullName": "public void setUnregisteredParameterValueSanitizer (UrlQuerySanitizer.ValueSanitizer sanitizer)"}, "setPreferFirstRepeatedParameter(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the first repeated parameter is preferred."]], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#getPreferFirstRepeatedParameter_E@"], "Permissions": [], "Description": "Set whether or not the first occurrence of a repeated parameter is preferred. True means the first repeated parameter is preferred. False means that the last repeated parameter is preferred. The preferred parameter is the one that is returned when getParameter is called. defaults to false.", "history": "Added in API level 1", "FullName": "public void setPreferFirstRepeatedParameter (boolean preferFirstRepeatedParameter)"}, "getAllowUnregisteredParamaters()": {"Returns": [["boolean", "true if unregistered parameters are allowed."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#setAllowUnregisteredParamaters_E@"], "Permissions": [], "Description": "Get whether or not unregistered parameters are allowed. If not allowed, they will be dropped when a query is parsed.", "history": "Added in API level 1", "FullName": "public boolean getAllowUnregisteredParamaters ()"}, "getUrlAndSpaceLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that allows all the characters used by encoded URLs and allows spaces, which are not technically legal in encoded URLs, but commonly appear anyway. Does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getUrlAndSpaceLegal ()"}, "addSanitizedEntry(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an unescaped parameter"], ["@B_java#lang#String_E@", "String: a sanitized unescaped value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Record a sanitized parameter-value pair. Override if you want to do additional filtering or validation.", "history": "Added in API level 1", "FullName": "protected void addSanitizedEntry (String parameter, String value)"}, "getAllButNulLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that allows everything except Nul ('\\0') characters. Script URLs are allowed.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAllButNulLegal ()"}, "getUrlLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that allows all the characters used by encoded URLs. Does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getUrlLegal ()"}, "getValue(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the sanitized unencoded value of the parameter, or null if the parameter does not exist."]], "Parameters": [["@B_java#lang#String_E@", "String: the unencoded name of a parameter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the value for a parameter in the current sanitized query. Returns null if the parameter does not exit.", "history": "Added in API level 1", "FullName": "public String getValue (String parameter)"}, "isHexDigit(char)": {"Returns": [["boolean", "true if c is a hex digit."]], "Parameters": [["char", "char: the character to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Test if a character is a hexidecimal digit. Both upper case and lower case hex digits are allowed.", "history": "Added in API level 1", "FullName": "protected boolean isHexDigit (char c)"}, "getParameterList()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "An array list of all of the parameter-value pairs in the sanitized query, in the order they appeared in the query. May contain duplicate parameters.", "history": "Added in API level 1", "FullName": "public List<UrlQuerySanitizer.ParameterValuePair> getParameterList ()"}, "parseEntry(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an escaped parameter"], ["@B_java#lang#String_E@", "String: an unsanitzied escaped value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse an escaped parameter-value pair. The default implementation unescapes both the parameter and the value, then looks up the effective value sanitizer for the parameter and uses it to sanitize the value. If all goes well then addSanitizedValue is called with the unescaped parameter and the sanitized unescaped value.", "history": "added in API level 1", "FullName": "protected void parseEntry (String parameter, String value)"}, "parseUrl(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the encoded URL to parse."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse the query parameters out of an encoded URL. Works by extracting the query portion from the URL and then calling parseQuery(). If there is no query portion it is treated as if the query portion is an empty string.", "history": "Added in API level 1", "FullName": "public void parseUrl (String url)"}, "hasParameter(java.lang.String)": {"Returns": [["boolean", "true if the parameter exists in the current sanitized queary."]], "Parameters": [["@B_java#lang#String_E@", "String: the unencoded name of a parameter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if a parameter exists in the current sanitized query.", "history": "Added in API level 1", "FullName": "public boolean hasParameter (String parameter)"}, "getAllButWhitespaceLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that allows everything except Nul ('\\0') characters, space (' '), and other whitespace characters. Script URLs are allowed.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAllButWhitespaceLegal ()"}, "getParameterSet()": {"Returns": [["@B_java#util#Set_E@", "all the parameters found in the current query."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a set of all of the parameters found in the sanitized query. Note: Do not modify this set. Treat it as a read-only set.", "history": "Added in API level 1", "FullName": "public Set<String> getParameterSet ()"}, "parseQuery(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the query to parse."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse a query. A query string is any number of parameter-value clauses separated by any non-zero number of ampersands. A parameter-value clause is a parameter followed by an equal sign, followed by a value. If the equal sign is missing, the value is assumed to be the empty string.", "history": "Added in API level 1", "FullName": "public void parseQuery (String query)"}, "getValueSanitizer(java.lang.String)": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "the currently registered value sanitizer for this parameter."]], "Parameters": [["@B_java#lang#String_E@", "String: the unescaped parameter"]], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#registerParameter_E@"], "Permissions": [], "Description": "Get the value sanitizer for a parameter. Returns null if there is no value sanitizer registered for the parameter.", "history": "Added in API level 1", "FullName": "public UrlQuerySanitizer.ValueSanitizer getValueSanitizer (String parameter)"}, "UrlQuerySanitizer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a UrlQuerySanitizer. Defaults: unregistered parameters are not allowed. the last instance of a repeated parameter is preferred. The default value sanitizer is an AllIllegal value sanitizer.", "history": "Added in API level 1", "FullName": "public UrlQuerySanitizer ()"}, "UrlQuerySanitizer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a UrlQuerySanitizer and parses a URL. This constructor is provided for convenience when the default parsing behavior is acceptable. Because the URL is parsed before the constructor returns, there isn't a chance to configure the sanitizer to change the parsing behavior. UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(myUrl); String name = sanitizer.getValue(\"name\"); Defaults: unregistered parameters are allowed. the last instance of a repeated parameter is preferred. The default value sanitizer is an AllIllegal value sanitizer.", "history": "Added in API level 1", "FullName": "public UrlQuerySanitizer (String url)"}, "unescape(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String unescape (String string)"}, "registerParameter(java.lang.String,android.net.UrlQuerySanitizer.ValueSanitizer)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: an unencoded parameter name"], ["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "UrlQuerySanitizer.ValueSanitizer: the value sanitizer to use for a particular parameter. May be null in order to unregister that parameter."]], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#getAllowUnregisteredParamaters_E@"], "Permissions": [], "Description": "Register a value sanitizer for a particular parameter. Can also be used to replace or remove an already-set value sanitizer. Registering a non-null value sanitizer for a particular parameter makes that parameter a registered parameter.", "history": "Added in API level 1", "FullName": "public void registerParameter (String parameter, UrlQuerySanitizer.ValueSanitizer valueSanitizer)"}, "getAmpLegal()": {"Returns": [["@B_android#net#UrlQuerySanitizer#ValueSanitizer_E@", "a value sanitizer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a value sanitizer that does not allow any special characters except ampersand ('&'). Does not allow script URLs.", "history": "Added in API level 1", "FullName": "public static final UrlQuerySanitizer.ValueSanitizer getAmpLegal ()"}, "setAllowUnregisteredParamaters(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to allow unregistered parameters."]], "Throws": [], "SeeAlso": ["@B_android#net#UrlQuerySanitizer#getAllowUnregisteredParamaters_E@"], "Permissions": [], "Description": "Set whether or not unregistered parameters are allowed. If they are not allowed, then they will be dropped when a query is sanitized. Defaults to false.", "history": "Added in API level 1", "FullName": "public void setAllowUnregisteredParamaters (boolean allowUnregisteredParamaters)"}}, "Inheritance": [], "ClassName": "android.net.UrlQuerySanitizer", "ClassDesc": "Sanitizes the Query portion of a URL. Simple example: UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.setAllowUnregisteredParamaters(true); sanitizer.parseUrl(\"http://example.com/?name=Joe+User\"); String name = sanitizer.getValue(\"name\")); // name now contains \"Joe_User\" Register ValueSanitizers to customize the way individual parameters are sanitized: UrlQuerySanitizer sanitizer = new UrlQuerySanitizer(); sanitizer.registerParamater(\"name\", UrlQuerySanitizer.createSpaceLegal()); sanitizer.parseUrl(\"http://example.com/?name=Joe+User\"); String name = sanitizer.getValue(\"name\")); // name now contains \"Joe User\". (The string is first decoded, which // converts the '+' to a ' '. Then the string is sanitized, which // converts the ' ' to an '_'. (The ' ' is converted because the default unregistered parameter sanitizer does not allow any special characters, and ' ' is a special character.) There are several ways to create ValueSanitizers. In order of increasing sophistication:"}