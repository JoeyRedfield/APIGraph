{"Functions": {"onDisappear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["@B_android#animation#Animator_E@", "An Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy"], ["@B_android#view#View_E@", "View: The View to make disappear. This will be in the target scene's View hierarchy or in an @B_android#view#ViewGroupOverlay_E@ and will be VISIBLE."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the start scene"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the end scene"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation of this method returns a null Animator. Subclasses should override this method to make targets disappear with the desired transition. The method should only be called from @B_android#transition#Visibility#onDisappear_E@.", "history": "Added in API level 21", "FullName": "public Animator onDisappear (ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)"}, "createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["@B_android#animation#Animator_E@", "A Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for a specific target in the start scene."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for the target in the end scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. Subclasses of Transition should override this method. The method should only be called by the transition system; it is not intended to be called from external classes. This method is called by the transition's parent (all the way up to the topmost Transition in the hierarchy) with the sceneRoot and start/end values that the transition may need to set up initial target values and construct an appropriate animation. For example, if an overall Transition is a @B_android#transition#TransitionSet_E@ consisting of several child transitions in sequence, then some of the child transitions may want to set initial values on target views prior to the overall Transition commencing, to put them in an appropriate state for the delay between that start and the child Transition start time. For example, a transition that fades an item in may wish to set the starting alpha value to 0, to avoid it blinking in prior to the transition actually starting the animation. This is necessary because the scene change that triggers the Transition will automatically set the end-scene on all target views, so a Transition that wants to animate from a different value should set that value prior to returning from this method. Additionally, a Transition can perform logic to determine whether the transition needs to run on the given target and start/end values. For example, a transition that resizes objects on the screen may wish to avoid running for views which are not present in either the start or end scenes. If there is an animator created and returned from this method, the transition mechanism will apply any applicable duration, startDelay, and interpolator to that animation and start it. A return value of null indicates that no animation should run. The default implementation returns null. The method is called for every applicable target object, which is stored in the @B_android#transition#TransitionValues#view_E@ field.", "history": "Added in API level 19", "FullName": "public Animator createAnimator (ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)"}, "captureEndValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the end scene for the properties that this transition monitors. These values are then passed as the endValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureEndValues (TransitionValues transitionValues)"}, "getMode()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#transition#Visibility#MODE_IN_E@, @B_android#transition#Visibility#MODE_OUT_E@, @B_android#transition#Fade#IN_E@, and @B_android#transition#Fade#OUT_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether appearing and/or disappearing Views are supported. Returns whether appearing and/or disappearing Views are supported. A combination of @B_android#transition#Visibility#MODE_IN_E@ and @B_android#transition#Visibility#MODE_OUT_E@.", "history": "Added in API level 21", "FullName": "public int getMode ()"}, "captureStartValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the start scene for the properties that this transition monitors. These values are then passed as the startValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public void captureStartValues (TransitionValues transitionValues)"}, "onAppear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)": {"Returns": [["@B_android#animation#Animator_E@", "An Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the start scene"], ["int", "int: The target visibility in the start scene"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the end scene"], ["int", "int: The target visibility in the end scene"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation of this method calls @B_android#transition#Visibility#onAppear_E@. Subclasses should override this method or @B_android#transition#Visibility#onAppear_E@. if they need to create an Animator when targets appear. The method should only be called by the Visibility class; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public Animator onAppear (ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)"}, "isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: the values from captureStartValues, This may be null if the View did not exist in the start state. This value may be null."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: the values from captureEndValues. This may be null if the View did not exist in the end state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether or not the transition should create an Animator, based on the values captured during @B_android#transition#Transition#captureStartValues_E@ and @B_android#transition#Transition#captureEndValues_E@. The default implementation compares the property values returned from @B_android#transition#Transition#getTransitionProperties_E@, or all property values if getTransitionProperties() returns null. Subclasses may override this method to provide logic more specific to the transition implementation.", "history": "Added in API level 23", "FullName": "public boolean isTransitionRequired (TransitionValues startValues, TransitionValues newValues)"}, "onAppear(android.view.ViewGroup,android.view.View,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["@B_android#animation#Animator_E@", "An Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy"], ["@B_android#view#View_E@", "View: The View to make appear. This will be in the target scene's View hierarchy and will be VISIBLE."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the start scene"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the end scene"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The default implementation of this method returns a null Animator. Subclasses should override this method to make targets appear with the desired transition. The method should only be called from @B_android#transition#Visibility#onAppear_E@.", "history": "Added in API level 21", "FullName": "public Animator onAppear (ViewGroup sceneRoot, View view, TransitionValues startValues, TransitionValues endValues)"}, "getTransitionProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#transition#TransitionValues_E@. The default implementation returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names used stored in the @B_android#transition#TransitionValues_E@ object passed into @B_android#transition#Transition#captureStartValues_E@ that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.", "history": "Added in API level 19", "FullName": "public String[] getTransitionProperties ()"}, "onDisappear(android.view.ViewGroup,android.transition.TransitionValues,int,android.transition.TransitionValues,int)": {"Returns": [["@B_android#animation#Animator_E@", "An Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the start scene"], ["int", "int: The target visibility in the start scene"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The target values in the end scene"], ["int", "int: The target visibility in the end scene"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses should override this method or @B_android#transition#Visibility#onDisappear_E@ if they need to create an Animator when targets disappear. The method should only be called by the Visibility class; it is not intended to be called from external classes. The default implementation of this method attempts to find a View to use to call @B_android#transition#Visibility#onDisappear_E@, based on the situation of the View in the View hierarchy. For example, if a View was simply removed from its parent, then the View will be added into a @B_android#view#ViewGroupOverlay_E@ and passed as the view parameter in @B_android#transition#Visibility#onDisappear_E@. If a visible View is changed to be @B_android#view#View#GONE_E@ or @B_android#view#View#INVISIBLE_E@, then it can be used as the view and the visibility will be changed to @B_android#view#View#VISIBLE_E@ for the duration of the animation. However, if a View is in a hierarchy which is also altering its visibility, the situation can be more complicated. In general, if a view that is no longer in the hierarchy in the end scene still has a parent (so its parent hierarchy was removed, but it was not removed from its parent), then it will be left alone to avoid side-effects from improperly removing it from its parent. The only exception to this is if the previous @B_android#transition#Scene_E@ was @B_android#transition#Scene#getSceneForLayout_E@, then it is considered safe to un-parent the starting scene view in order to make it disappear.", "history": "Added in API level 19", "FullName": "public Animator onDisappear (ViewGroup sceneRoot, TransitionValues startValues, int startVisibility, TransitionValues endValues, int endVisibility)"}, "isVisible(android.transition.TransitionValues)": {"Returns": [["boolean", "True if the view reference by values is visible, false otherwise."]], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The TransitionValues object that holds the information by which visibility is determined."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the view is 'visible' according to the given values object. This is determined by testing the same properties in the values object that are used to determine whether the object is appearing or disappearing in the @B_android#transition#Transition#createAnimator_E@ method. This method can be called by, for example, subclasses that want to know whether the object is visible in the same way that Visibility determines it for the actual animation.", "history": "Added in API level 19", "FullName": "public boolean isVisible (TransitionValues values)"}, "Visibility()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 19", "FullName": "public Visibility ()"}, "Visibility(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Visibility (Context context, AttributeSet attrs)"}, "setMode(int)": {"Returns": [], "Parameters": [["int", "int: The behavior supported by this transition, a combination of @B_android#transition#Visibility#MODE_IN_E@ and @B_android#transition#Visibility#MODE_OUT_E@. Value is either 0 or a combination of @B_android#transition#Visibility#MODE_IN_E@, @B_android#transition#Visibility#MODE_OUT_E@, @B_android#transition#Fade#IN_E@, and @B_android#transition#Fade#OUT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the transition to support appearing and/or disappearing Views, depending on mode.", "history": "Added in API level 21", "FullName": "public void setMode (int mode)"}}, "Inheritance": ["@B_android#transition#Transition_E@"], "ClassName": "android.transition.Visibility", "ClassDesc": "This transition tracks changes to the visibility of target views in the start and end scenes. Visibility is determined not just by the @B_android#view#View#setVisibility_E@ state of views, but also whether views exist in the current view hierarchy. The class is intended to be a utility for subclasses such as @B_android#transition#Fade_E@, which use this visibility information to determine the specific animations to run when visibility changes occur. Subclasses should implement one or both of the methods @B_android#transition#Visibility#onAppear_E@, @B_android#transition#Visibility#onDisappear_E@ or @B_android#transition#Visibility#onAppear_E@, @B_android#transition#Visibility#onDisappear_E@."}