{"Functions": {"quitSafely()": {"Returns": [["boolean", "True if the looper looper has been asked to quit or false if the thread had not yet started running."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Quits the handler thread's looper safely. Causes the handler thread's looper to terminate as soon as all remaining messages in the message queue that are already due to be delivered have been handled. Pending delayed messages with due times in the future will not be delivered. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example, the @B_android#os#Handler#sendMessage_E@ method will return false. If the thread has not been started or has finished (that is if @B_android#os#HandlerThread#getLooper_E@ returns null), then false is returned. Otherwise the looper is asked to quit and true is returned.", "history": "Added in API level 18", "FullName": "public boolean quitSafely ()"}, "quit()": {"Returns": [["boolean", "True if the looper looper has been asked to quit or false if the thread had not yet started running."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#HandlerThread#quitSafely_E@"], "Permissions": [], "Description": "Quits the handler thread's looper. Causes the handler thread's looper to terminate without processing any more messages in the message queue. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example, the @B_android#os#Handler#sendMessage_E@ method will return false. Using this method may be unsafe because some messages may not be delivered before the looper terminates. Consider using @B_android#os#HandlerThread#quitSafely_E@ instead to ensure that all pending work is completed in an orderly manner.", "history": "Added in API level 5", "FullName": "public boolean quit ()"}, "HandlerThread(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public HandlerThread (String name)"}, "HandlerThread(java.lang.String, int)": {"Returns": [], "Parameters": [["int", "int: The priority to run the thread at. The value supplied must be from @B_android#os#Process_E@ and not from java.lang.Thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a HandlerThread.", "history": "added in API level 1", "FullName": "public HandlerThread (String name, int priority)"}, "HandlerThread(java.lang.String,int)": {"Returns": [], "Parameters": [["int", "int: The priority to run the thread at. The value supplied must be from @B_android#os#Process_E@ and not from java.lang.Thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a HandlerThread.", "history": "Added in API level 1", "FullName": "public HandlerThread (String name, int priority)"}, "onLooperPrepared()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call back method that can be explicitly overridden if needed to execute some setup before Looper loops.", "history": "Added in API level 1", "FullName": "protected void onLooperPrepared ()"}, "getLooper()": {"Returns": [["@B_android#os#Looper_E@", "The looper."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method returns the Looper associated with this thread. If this thread not been started or for any reason isAlive() returns false, this method will return null. If this thread has been started, this method will block until the looper has been initialized.", "history": "Added in API level 1", "FullName": "public Looper getLooper ()"}, "run()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this thread was constructed using a separate Runnable run object, then that Runnable object's run method is called; otherwise, this method does nothing and returns. Subclasses of Thread should override this method.", "history": "Added in API level 1", "FullName": "public void run ()"}, "getThreadId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier of this thread. See Process.myTid().", "history": "Added in API level 1", "FullName": "public int getThreadId ()"}}, "Inheritance": ["@B_java#lang#Thread_E@"], "ClassName": "android.os.HandlerThread", "ClassDesc": "A @B_java#lang#Thread_E@ that has a @B_android#os#Looper_E@. The @B_android#os#Looper_E@ can then be used to create @B_android#os#Handler_E@s. Note that just like with a regular @B_java#lang#Thread_E@, @B_java#lang#Thread#start_E@ must still be called."}