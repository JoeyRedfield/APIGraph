{"Functions": {"RGBToHSV(int, int, int, float[])": {"Returns": [], "Parameters": [["int", "int: red component value \\([0..255]\\)"], ["int", "int: green component value \\([0..255]\\)"], ["int", "int: blue component value \\([0..255]\\)"], ["float[]", "float: 3 element array which holds the resulting HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert RGB components to HSV. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\)", "history": "added in API level 1", "FullName": "public static void RGBToHSV (int red, int green, int blue, float[] hsv)"}, "luminance(int)": {"Returns": [["float", "a value between 0 (darkest black) and 1 (lightest white)"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the relative luminance of a color. Assumes sRGB encoding. Based on the formula for relative luminance defined in WCAG 2.0, W3C Recommendation 11 December 2008.", "history": "Added in API level 24", "FullName": "public static float luminance (int color)"}, "valueOf(float,float,float,float)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The alpha component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space with the specified red, green, blue and alpha component values. The component values must be in the range \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public static Color valueOf (float r, float g, float b, float a)"}, "pack(float,float,float,float)": {"Returns": [["long", "A color long"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The alpha component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Packs the sRGB color defined by the specified red, green, blue and alpha component values into an RGBA color long in the sRGB color space. See the documentation of this class for a description of the color long format.", "history": "Added in API level 26", "FullName": "public static long pack (float red, float green, float blue, float alpha)"}, "pack(float, float, float, float)": {"Returns": [["long", "A color long"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The alpha component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Packs the sRGB color defined by the specified red, green, blue and alpha component values into an RGBA color long in the sRGB color space. See the documentation of this class for a description of the color long format.", "history": "added in API level 26", "FullName": "public static long pack (float red, float green, float blue, float alpha)"}, "rgb(float,float,float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float: Red component \\([0..1]\\) of the color"], ["float", "float: Green component \\([0..1]\\) of the color"], ["float", "float: Blue component \\([0..1]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from red, green, blue float components in the range \\([0..1]\\). The alpha component is implicitly 1.0 (fully opaque). If the components are out of range, the returned color is undefined.", "history": "Added in API level 26", "FullName": "public static int rgb (float red, float green, float blue)"}, "HSVToColor(float[])": {"Returns": [["int", "the resulting argb color"]], "Parameters": [["float[]", "float: 3 element array which holds the input HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert HSV components to an ARGB color. Alpha set to 0xFF. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\) If hsv values are out of range, they are pinned.", "history": "Added in API level 1", "FullName": "public static int HSVToColor (float[] hsv)"}, "isWideGamut(long)": {"Returns": [["boolean", "True if the color is in a wide-gamut color space, false otherwise"]], "Parameters": [["long", "long: The color to test"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": ["@B_android#graphics#Color#isInColorSpace_E@", "@B_android#graphics#Color#isSrgb_E@", "@B_android#graphics#ColorSpace#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether the specified color is in a wide-gamut color space. See @B_android#graphics#ColorSpace#isWideGamut_E@ for a definition of a wide-gamut color space.", "history": "Added in API level 26", "FullName": "public static boolean isWideGamut (long color)"}, "blue(long)": {"Returns": [["float", "A float value with a range defined by the specified color's color space"]], "Parameters": [["long", "long: The color long whose blue channel to extract"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#colorSpace_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#alpha_E@"], "Permissions": [], "Description": "Returns the blue component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling @B_android#graphics#Color#colorSpace_E@.", "history": "Added in API level 26", "FullName": "public static float blue (long color)"}, "pack()": {"Returns": [["long", "A color long"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If this color's color space has the id @B_android#graphics#ColorSpace#MIN_ID_E@ or if this color has more than 4 components"]], "SeeAlso": [], "Permissions": [], "Description": "Packs this color into a color long. See the documentation of this class for a description of the color long format.", "history": "Added in API level 26", "FullName": "public long pack ()"}, "convert(android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null color instance in the specified color space"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space, cannot be null This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this color from its color space to the specified color space. The conversion is done using the default rendering intent as specified by @B_android#graphics#ColorSpace#connect_E@.", "history": "Added in API level 26", "FullName": "public Color convert (ColorSpace colorSpace)"}, "isSrgb(long)": {"Returns": [["boolean", "True if the color is in the sRGB color space, false otherwise"]], "Parameters": [["long", "long: The color to test"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": ["@B_android#graphics#Color#isInColorSpace_E@", "@B_android#graphics#Color#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether the specified color is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public static boolean isSrgb (long color)"}, "red(long)": {"Returns": [["float", "A float value with a range defined by the specified color's color space"]], "Parameters": [["long", "long: The color long whose red channel to extract"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#colorSpace_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#blue_E@", "@B_android#graphics#Color#alpha_E@"], "Permissions": [], "Description": "Returns the red component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling @B_android#graphics#Color#colorSpace_E@.", "history": "Added in API level 26", "FullName": "public static float red (long color)"}, "getModel()": {"Returns": [["@B_android#graphics#ColorSpace#Model_E@", "A non-null @B_android#graphics#ColorSpace#Model_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the color model of this color.", "history": "Added in API level 26", "FullName": "public ColorSpace.Model getModel ()"}, "isSrgb()": {"Returns": [["boolean", "True if this color is in the sRGB color space, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether this color is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public boolean isSrgb ()"}, "isInColorSpace(long, android.graphics.ColorSpace)": {"Returns": [["boolean", "True if the color is in the specified color space, false otherwise"]], "Parameters": [["long", "long: The color to test"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to test against"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#isSrgb_E@", "@B_android#graphics#Color#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether the specified color is in the specified color space.", "history": "added in API level 26", "FullName": "public static boolean isInColorSpace (long color, ColorSpace colorSpace)"}, "convert(long,android.graphics.ColorSpace)": {"Returns": [["long", "A color long in the destination color space"]], "Parameters": [["long", "long: The color long to convert"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified color long from its color space into the specified destination color space. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format. When converting several colors in a row, it is recommended to use @B_android#graphics#Color#convert_E@ instead to avoid the creation of a @B_android#graphics#ColorSpace#Connector_E@ on every invocation.", "history": "Added in API level 26", "FullName": "public static long convert (long color, ColorSpace colorSpace)"}, "luminance()": {"Returns": [["float", "A value between 0 (darkest black) and 1 (lightest white)"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the this color's color space does not use the @B_android#graphics#ColorSpace#Model#RGB_E@ color model"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the relative luminance of this color. Based on the formula for relative luminance defined in WCAG 2.0, W3C Recommendation 11 December 2008.", "history": "Added in API level 26", "FullName": "public float luminance ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "red()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#alpha_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#getComponents_E@"], "Permissions": [], "Description": "Returns the value of the red component in the range defined by this color's color space (see @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@). If this color's color model is not @B_android#graphics#ColorSpace#Model#RGB_E@, calling this method is equivalent to getComponent(0).", "history": "Added in API level 26", "FullName": "public float red ()"}, "colorSpace(long)": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A non-null color space instance"]], "Parameters": [["long", "long: The color long whose color space to extract"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": ["@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#blue_E@", "@B_android#graphics#Color#alpha_E@"], "Permissions": [], "Description": "Returns the color space encoded in the specified color long.", "history": "Added in API level 26", "FullName": "public static ColorSpace colorSpace (long color)"}, "getComponent(int)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["int", "int: Value is between 0 and 4 inclusive"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If the specified component index is < 0 or >= @B_android#graphics#Color#getComponentCount_E@"]], "SeeAlso": ["@B_android#graphics#Color#getComponents_E@"], "Permissions": [], "Description": "Returns the value of the specified component in the range defined by this color's color space (see @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@). If the requested component index is @B_android#graphics#Color#getComponentCount_E@, this method returns the alpha component, always in the range \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public float getComponent (int component)"}, "rgb(float, float, float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float: Red component \\([0..1]\\) of the color"], ["float", "float: Green component \\([0..1]\\) of the color"], ["float", "float: Blue component \\([0..1]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from red, green, blue float components in the range \\([0..1]\\). The alpha component is implicitly 1.0 (fully opaque). If the components are out of range, the returned color is undefined.", "history": "added in API level 26", "FullName": "public static int rgb (float red, float green, float blue)"}, "valueOf(float, float, float, float)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The alpha component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space with the specified red, green, blue and alpha component values. The component values must be in the range \\([0..1]\\).", "history": "added in API level 26", "FullName": "public static Color valueOf (float r, float g, float b, float a)"}, "valueOf(float[],android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float[]", "float: The components of the color to create, with alpha as the last component This value must never be null."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the color to create This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the array of components is smaller than required by the color space"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color in the specified color space with the specified component values. The range of the components is defined by @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@. The values passed to this method must be in the proper range. The alpha component is always in the range \\([0..1]\\). The length of the array of components must be at least ColorSpace#getComponentCount() + 1. The component at index @B_android#graphics#ColorSpace#getComponentCount_E@ is always alpha.", "history": "Added in API level 26", "FullName": "public static Color valueOf (float[] components, ColorSpace colorSpace)"}, "argb(int,int,int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: Alpha component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"], ["int", "int: Red component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"], ["int", "int: Green component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"], ["int", "int: Blue component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from alpha, red, green, blue components. These component values should be \\([0..255]\\), but there is no range check performed, so if they are out of range, the returned color is undefined.", "history": "Added in API level 1", "FullName": "public static int argb (int alpha, int red, int green, int blue)"}, "green(long)": {"Returns": [["float", "A float value with a range defined by the specified color's color space"]], "Parameters": [["long", "long: The color long whose green channel to extract"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#colorSpace_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#blue_E@", "@B_android#graphics#Color#alpha_E@"], "Permissions": [], "Description": "Returns the green component encoded in the specified color long. The range of the returned value depends on the color space associated with the specified color. The color space can be queried by calling @B_android#graphics#Color#colorSpace_E@.", "history": "Added in API level 26", "FullName": "public static float green (long color)"}, "getComponents(float[])": {"Returns": [["float[]", "The array passed as a parameter if not null, or a new array of length @B_android#graphics#Color#getComponentCount_E@"]], "Parameters": [["float[]", "float: An array of floats whose size must be at least @B_android#graphics#Color#getComponentCount_E@, can be null This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the specified array's length is less than @B_android#graphics#Color#getComponentCount_E@"]], "SeeAlso": ["@B_android#graphics#Color#getComponent_E@"], "Permissions": [], "Description": "Copies this color's components in the supplied array. The last element of the array is always the alpha component.", "history": "Added in API level 26", "FullName": "public float[] getComponents (float[] components)"}, "valueOf(long)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["long", "long: The color long to create a Color from"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color instance from a color long. The resulting color is in the same color space as the specified color long.", "history": "Added in API level 26", "FullName": "public static Color valueOf (long color)"}, "valueOf(int)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["int", "int: The ARGB color int to create a Color from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color instance from an ARGB color int. The resulting color is in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 26", "FullName": "public static Color valueOf (int color)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A non-null string representation of the object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. This method returns a string equal to the value of: For instance, the string representation of opaque black in the sRGB color space is equal to the following value:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "alpha()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#blue_E@", "@B_android#graphics#Color#getComponents_E@", "@B_android#graphics#Color#getComponent_E@"], "Permissions": [], "Description": "Returns the value of the alpha component in the range \\([0..1]\\). Calling this method is equivalent to getComponent(getComponentCount() - 1).", "history": "Added in API level 26", "FullName": "public float alpha ()"}, "argb(float,float,float,float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float: Alpha component \\([0..1]\\) of the color"], ["float", "float: Red component \\([0..1]\\) of the color"], ["float", "float: Green component \\([0..1]\\) of the color"], ["float", "float: Blue component \\([0..1]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from alpha, red, green, blue float components in the range \\([0..1]\\). If the components are out of range, the returned color is undefined.", "history": "Added in API level 26", "FullName": "public static int argb (float alpha, float red, float green, float blue)"}, "convert(int,android.graphics.ColorSpace)": {"Returns": [["long", "A color long in the destination color space"]], "Parameters": [["int", "int: The sRGB color int to convert"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified ARGB color int from the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space into the specified destination color space. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format.", "history": "Added in API level 26", "FullName": "public static long convert (int color, ColorSpace colorSpace)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "blue()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#alpha_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#getComponents_E@"], "Permissions": [], "Description": "Returns the value of the blue component in the range defined by this color's color space (see @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@). If this color's color model is not @B_android#graphics#ColorSpace#Model#RGB_E@, calling this method is equivalent to getComponent(2).", "history": "Added in API level 26", "FullName": "public float blue ()"}, "luminance(long)": {"Returns": [["float", "A value between 0 (darkest black) and 1 (lightest white)"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the specified color's color space is unknown or does not use the @B_android#graphics#ColorSpace#Model#RGB_E@ color model"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the relative luminance of a color. Based on the formula for relative luminance defined in WCAG 2.0, W3C Recommendation 11 December 2008.", "history": "Added in API level 26", "FullName": "public static float luminance (long color)"}, "colorToHSV(int, float[])": {"Returns": [], "Parameters": [["int", "int: the argb color to convert. The alpha component is ignored."], ["float[]", "float: 3 element array which holds the resulting HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the ARGB color to its HSV components. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\)", "history": "added in API level 1", "FullName": "public static void colorToHSV (int color, float[] hsv)"}, "RGBToHSV(int,int,int,float[])": {"Returns": [], "Parameters": [["int", "int: red component value \\([0..255]\\) Value is between 0 and 255 inclusive"], ["int", "int: green component value \\([0..255]\\) Value is between 0 and 255 inclusive"], ["int", "int: blue component value \\([0..255]\\) Value is between 0 and 255 inclusive"], ["float[]", "float: 3 element array which holds the resulting HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert RGB components to HSV. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\)", "history": "Added in API level 1", "FullName": "public static void RGBToHSV (int red, int green, int blue, float[] hsv)"}, "convert(long,android.graphics.ColorSpace.Connector)": {"Returns": [["long", "A color long in the destination color space of the connector"]], "Parameters": [["long", "long: The color long to convert"], ["@B_android#graphics#ColorSpace#Connector_E@", "ColorSpace.Connector: A color space connector, cannot be null This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified color long from a color space to another using the specified color space @B_android#graphics#ColorSpace#Connector_E@. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format. When converting several colors in a row, this method is preferable to @B_android#graphics#Color#convert_E@ as it prevents a new connector from being created on every invocation. The connector's source color space should match the color long's color space.", "history": "Added in API level 26", "FullName": "public static long convert (long color, ColorSpace.Connector connector)"}, "pack(int)": {"Returns": [["long", "A color long"]], "Parameters": [["int", "int: The ARGB color int to convert to an RGBA color long in sRGB"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified ARGB color int to an RGBA color long in the sRGB color space. See the documentation of this class for a description of the color long format.", "history": "Added in API level 26", "FullName": "public static long pack (int color)"}, "valueOf(float,float,float,float,android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float", "float: The red component of the color to create"], ["float", "float: The green component of the color to create"], ["float", "float: The blue component of the color to create"], ["float", "float: The alpha component of the color to create, in \\([0..1]\\)"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the color to create This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the specified color space uses a color model with more than 3 components"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color in the specified color space with the specified red, green, blue and alpha component values. The range of the components is defined by @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@. The values passed to this method must be in the proper range.", "history": "Added in API level 26", "FullName": "public static Color valueOf (float r, float g, float b, float a, ColorSpace colorSpace)"}, "valueOf(float,float,float)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float", "float: The red component of the opaque sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the opaque sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the opaque sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new opaque Color in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space with the specified red, green and blue component values. The component values must be in the range \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public static Color valueOf (float r, float g, float b)"}, "argb(float, float, float, float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["float", "float: Alpha component \\([0..1]\\) of the color"], ["float", "float: Red component \\([0..1]\\) of the color"], ["float", "float: Green component \\([0..1]\\) of the color"], ["float", "float: Blue component \\([0..1]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from alpha, red, green, blue float components in the range \\([0..1]\\). If the components are out of range, the returned color is undefined.", "history": "added in API level 26", "FullName": "public static int argb (float alpha, float red, float green, float blue)"}, "HSVToColor(int,float[])": {"Returns": [["int", "the resulting argb color"]], "Parameters": [["int", "int: the alpha component of the returned argb color. Value is between 0 and 255 inclusive"], ["float[]", "float: 3 element array which holds the input HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert HSV components to an ARGB color. The alpha component is passed through unchanged. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\) If hsv values are out of range, they are pinned.", "history": "Added in API level 1", "FullName": "public static int HSVToColor (int alpha, float[] hsv)"}, "HSVToColor(int, float[])": {"Returns": [["int", "the resulting argb color"]], "Parameters": [["int", "int: the alpha component of the returned argb color."], ["float[]", "float: 3 element array which holds the input HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert HSV components to an ARGB color. The alpha component is passed through unchanged. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\) If hsv values are out of range, they are pinned.", "history": "added in API level 1", "FullName": "public static int HSVToColor (int alpha, float[] hsv)"}, "getComponentCount()": {"Returns": [["int", "The integer 4 or 5 Value is between 4 and 5 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of components that form a color value according to this color space's color model, plus one extra component for alpha.", "history": "Added in API level 26", "FullName": "public int getComponentCount ()"}, "valueOf(float[], android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float[]", "float: The components of the color to create, with alpha as the last component"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space of the color to create"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the array of components is smaller than required by the color space"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Color in the specified color space with the specified component values. The range of the components is defined by @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@. The values passed to this method must be in the proper range. The alpha component is always in the range \\([0..1]\\). The length of the array of components must be at least ColorSpace.getComponentCount() + 1. The component at index @B_android#graphics#ColorSpace#getComponentCount_E@ is always alpha.", "history": "added in API level 26", "FullName": "public static Color valueOf (float[] components, ColorSpace colorSpace)"}, "alpha(long)": {"Returns": [["float", "A float value in the range \\([0..1]\\)"]], "Parameters": [["long", "long: The color long whose blue channel to extract"]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#colorSpace_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#blue_E@"], "Permissions": [], "Description": "Returns the alpha component encoded in the specified color long. The returned value is always in the range \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public static float alpha (long color)"}, "toArgb(long)": {"Returns": [["int", "An ARGB color in the sRGB color space"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified color long to an ARGB color int. A color int is always in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space. This implies a color space conversion is applied if needed.", "history": "Added in API level 26", "FullName": "public static int toArgb (long color)"}, "parseColor(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parse the color string, and return the corresponding color-int. If the string cannot be parsed, throws an IllegalArgumentException exception. Supported formats are: #RRGGBB #AARRGGBB The following names are also accepted: red, blue, green, black, white, gray, cyan, magenta, yellow, lightgray, darkgray, grey, lightgrey, darkgrey, aqua, fuchsia, lime, maroon, navy, olive, purple, silver, and teal.", "history": "Added in API level 1", "FullName": "public static int parseColor (String colorString)"}, "green()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#alpha_E@", "@B_android#graphics#Color#red_E@", "@B_android#graphics#Color#green_E@", "@B_android#graphics#Color#getComponents_E@"], "Permissions": [], "Description": "Returns the value of the green component in the range defined by this color's color space (see @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@). If this color's color model is not @B_android#graphics#ColorSpace#Model#RGB_E@, calling this method is equivalent to getComponent(1).", "history": "Added in API level 26", "FullName": "public float green ()"}, "blue(int)": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the blue component of a color int. This is the same as saying color & 0xFF", "history": "Added in API level 1", "FullName": "public static int blue (int color)"}, "argb(int, int, int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: Alpha component \\([0..255]\\) of the color"], ["int", "int: Red component \\([0..255]\\) of the color"], ["int", "int: Green component \\([0..255]\\) of the color"], ["int", "int: Blue component \\([0..255]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from alpha, red, green, blue components. These component values should be \\([0..255]\\), but there is no range check performed, so if they are out of range, the returned color is undefined.", "history": "added in API level 1", "FullName": "public static int argb (int alpha, int red, int green, int blue)"}, "isInColorSpace(long,android.graphics.ColorSpace)": {"Returns": [["boolean", "True if the color is in the specified color space, false otherwise"]], "Parameters": [["long", "long: The color to test"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to test against This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#isSrgb_E@", "@B_android#graphics#Color#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether the specified color is in the specified color space.", "history": "Added in API level 26", "FullName": "public static boolean isInColorSpace (long color, ColorSpace colorSpace)"}, "convert(int, android.graphics.ColorSpace)": {"Returns": [["long", "A color long in the destination color space"]], "Parameters": [["int", "int: The sRGB color int to convert"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified ARGB color int from the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space into the specified destination color space. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format.", "history": "added in API level 26", "FullName": "public static long convert (int color, ColorSpace colorSpace)"}, "isWideGamut()": {"Returns": [["boolean", "True if this color is in a wide-gamut color space, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#isSrgb_E@", "@B_android#graphics#ColorSpace#isWideGamut_E@"], "Permissions": [], "Description": "Indicates whether this color color is in a wide-gamut color space. See @B_android#graphics#ColorSpace#isWideGamut_E@ for a definition of a wide-gamut color space.", "history": "Added in API level 26", "FullName": "public boolean isWideGamut ()"}, "alpha(int)": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the alpha component of a color int. This is the same as saying color >>> 24", "history": "Added in API level 1", "FullName": "public static int alpha (int color)"}, "rgb(int,int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: Red component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"], ["int", "int: Green component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"], ["int", "int: Blue component \\([0..255]\\) of the color Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from red, green, blue components. The alpha component is implicitly 255 (fully opaque). These component values should be \\([0..255]\\), but there is no range check performed, so if they are out of range, the returned color is undefined.", "history": "Added in API level 1", "FullName": "public static int rgb (int red, int green, int blue)"}, "green(int)": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the green component of a color int. This is the same as saying (color >> 8) & 0xFF", "history": "Added in API level 1", "FullName": "public static int green (int color)"}, "convert(float,float,float,float,android.graphics.ColorSpace.Connector)": {"Returns": [["long", "A color long in the destination color space of the connector"]], "Parameters": [["float", "float: The red component of the color to convert"], ["float", "float: The green component of the color to convert"], ["float", "float: The blue component of the color to convert"], ["float", "float: The alpha component of the color to convert, in \\([0..1]\\)"], ["@B_android#graphics#ColorSpace#Connector_E@", "ColorSpace.Connector: A color space connector, cannot be null This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#convert_E@"], "Permissions": [], "Description": "Converts the specified 3 component color from a color space to another using the specified color space @B_android#graphics#ColorSpace#Connector_E@. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format. When converting several colors in a row, this method is preferable to @B_android#graphics#Color#convert_E@ as it prevents a new connector from being created on every invocation. The red, green and blue components must be in the range defined by the source color space of the connector. See @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@.", "history": "Added in API level 26", "FullName": "public static long convert (float r, float g, float b, float a, ColorSpace.Connector connector)"}, "getColorSpace()": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A non-null instance of @B_android#graphics#ColorSpace_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this color's color space.", "history": "Added in API level 26", "FullName": "public ColorSpace getColorSpace ()"}, "toArgb()": {"Returns": [["int", "An ARGB color in the sRGB color space"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this color to an ARGB color int. A color int is always in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space. This implies a color space conversion is applied if needed.", "history": "Added in API level 26", "FullName": "public int toArgb ()"}, "convert(long, android.graphics.ColorSpace)": {"Returns": [["long", "A color long in the destination color space"]], "Parameters": [["long", "long: The color long to convert"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the encoded color space is invalid or unknown"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the specified color long from its color space into the specified destination color space. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format. When converting several colors in a row, it is recommended to use @B_android#graphics#Color#convert_E@ instead to avoid the creation of a @B_android#graphics#ColorSpace#Connector_E@ on every invocation.", "history": "added in API level 26", "FullName": "public static long convert (long color, ColorSpace colorSpace)"}, "colorToHSV(int,float[])": {"Returns": [], "Parameters": [["int", "int: the argb color to convert. The alpha component is ignored."], ["float[]", "float: 3 element array which holds the resulting HSV components."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the ARGB color to its HSV components. hsv[0] is Hue \\([0..360[\\) hsv[1] is Saturation \\([0...1]\\) hsv[2] is Value \\([0...1]\\)", "history": "Added in API level 1", "FullName": "public static void colorToHSV (int color, float[] hsv)"}, "red(int)": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the red component of a color int. This is the same as saying (color >> 16) & 0xFF", "history": "Added in API level 1", "FullName": "public static int red (int color)"}, "pack(float,float,float)": {"Returns": [["long", "A color long"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Packs the sRGB color defined by the specified red, green and blue component values into an RGBA color long in the sRGB color space. The alpha component is set to 1.0. See the documentation of this class for a description of the color long format.", "history": "Added in API level 26", "FullName": "public static long pack (float red, float green, float blue)"}, "getComponents()": {"Returns": [["float[]", "A new, non-null array whose size is equal to @B_android#graphics#Color#getComponentCount_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#getComponent_E@"], "Permissions": [], "Description": "Returns this color's components as a new array. The last element of the array is always the alpha component.", "history": "Added in API level 26", "FullName": "public float[] getComponents ()"}, "convert(float,float,float,float,android.graphics.ColorSpace,android.graphics.ColorSpace)": {"Returns": [["long", "A color long in the destination color space"]], "Parameters": [["float", "float: The red component of the color to convert"], ["float", "float: The green component of the color to convert"], ["float", "float: The blue component of the color to convert"], ["float", "float: The alpha component of the color to convert, in \\([0..1]\\)"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The source color space, cannot be null This value must never be null."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The destination color space, cannot be null This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#convert_E@"], "Permissions": [], "Description": "Converts the specified 3 component color from the source color space to the destination color space. The resulting color is returned as a color long. See the documentation of this class for a description of the color long format. When converting multiple colors in a row, it is recommended to use @B_android#graphics#Color#convert_E@ instead to avoid the creation of a @B_android#graphics#ColorSpace#Connector_E@ on every invocation. The red, green and blue components must be in the range defined by the specified color space. See @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@.", "history": "Added in API level 26", "FullName": "public static long convert (float r, float g, float b, float a, ColorSpace source, ColorSpace destination)"}, "Color()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#Color#valueOf_E@"], "Permissions": [], "Description": "Creates a new color instance set to opaque black in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space.", "history": "Added in API level 1", "FullName": "public Color ()"}, "valueOf(float, float, float)": {"Returns": [["@B_android#graphics#Color_E@", "A non-null instance of @B_android#graphics#Color_E@"]], "Parameters": [["float", "float: The red component of the opaque sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the opaque sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the opaque sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new opaque Color in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space with the specified red, green and blue component values. The component values must be in the range \\([0..1]\\).", "history": "added in API level 26", "FullName": "public static Color valueOf (float r, float g, float b)"}, "pack(float, float, float)": {"Returns": [["long", "A color long"]], "Parameters": [["float", "float: The red component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The green component of the sRGB color to create, in \\([0..1]\\)"], ["float", "float: The blue component of the sRGB color to create, in \\([0..1]\\)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Packs the sRGB color defined by the specified red, green and blue component values into an RGBA color long in the sRGB color space. The alpha component is set to 1.0. See the documentation of this class for a description of the color long format.", "history": "added in API level 26", "FullName": "public static long pack (float red, float green, float blue)"}, "rgb(int, int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: Red component \\([0..255]\\) of the color"], ["int", "int: Green component \\([0..255]\\) of the color"], ["int", "int: Blue component \\([0..255]\\) of the color"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a color-int from red, green, blue components. The alpha component is implicitly 255 (fully opaque). These component values should be \\([0..255]\\), but there is no range check performed, so if they are out of range, the returned color is undefined.", "history": "added in API level 1", "FullName": "public static int rgb (int red, int green, int blue)"}, "pack(float,float,float,float,android.graphics.ColorSpace)": {"Returns": [["long", "A color long"]], "Parameters": [["float", "float: The red component of the color to create"], ["float", "float: The green component of the color to create"], ["float", "float: The blue component of the color to create"], ["float", "float: The alpha component of the color to create, in \\([0..1]\\)"], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the color space's id is @B_android#graphics#ColorSpace#MIN_ID_E@ or if the color space's color model has more than 3 components"]], "SeeAlso": [], "Permissions": [], "Description": "Packs the 3 component color defined by the specified red, green, blue and alpha component values into a color long in the specified color space. See the documentation of this class for a description of the color long format. The red, green and blue components must be in the range defined by the specified color space. See @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@.", "history": "Added in API level 26", "FullName": "public static long pack (float red, float green, float blue, float alpha, ColorSpace colorSpace)"}}, "Inheritance": [], "ClassName": "android.graphics.Color", "ClassDesc": "The Color class provides methods for creating, converting and manipulating colors. Colors have three different representations: Color ints, the most common representation Color longs Color instances The section below describe each representation in detail. Color ints are the most common representation of colors on Android and have been used since @B_android#os#Build#VERSION_CODES#BASE_E@. A color int always defines a color in the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space using 4 components packed in a single 32 bit integer value: The components in this table are listed in encoding order (see below), which is why color ints are called ARGB colors. To avoid confusing color ints with arbitrary integer values, it is a good practice to annotate them with the @ColorInt annotation found in the Android Support Library. The four components of a color int are encoded in the following way: Because of this encoding, color ints can easily be described as an integer constant in source. For instance, opaque blue is 0xff0000ff and yellow is 0xffffff00. To easily encode color ints, it is recommended to use the static methods @B_android#graphics#Color#argb_E@ and @B_android#graphics#Color#rgb_E@. The second method omits the alpha component and assumes the color is opaque (alpha is 255). As a convenience this class also offers methods to encode color ints from components defined in the \\([0..1]\\) range: @B_android#graphics#Color#argb_E@ and @B_android#graphics#Color#rgb_E@. Color longs (defined below) can be easily converted to color ints by invoking the @B_android#graphics#Color#toArgb_E@ method. This method performs a color space conversion if needed. It is also possible to create a color int by invoking the method @B_android#graphics#Color#toArgb_E@ on a color instance. The four ARGB components can be individually extracted from a color int using the following expressions: This class offers convenience methods to easily extract these components: @B_android#graphics#Color#alpha_E@ to extract the alpha component @B_android#graphics#Color#red_E@ to extract the red component @B_android#graphics#Color#green_E@ to extract the green component @B_android#graphics#Color#blue_E@ to extract the blue component Color longs are a representation introduced in @B_android#os#Build#VERSION_CODES#O_E@ to store colors in different @B_android#graphics#ColorSpace_E@, with more precision than color ints. A color long always defines a color using 4 components packed in a single 64 bit long value. One of these components is always alpha while the other three components depend on the color space's @B_android#graphics#ColorSpace#Model_E@. The most common color model is the @B_android#graphics#ColorSpace#Model#RGB_E@ model in which the components represent red, green and blue values. @B_android#graphics#ColorSpace#Named#DISPLAY_P3_E@ color space use the \\([0..1]\\) range. Please refer to the documentation of the various @B_android#graphics#ColorSpace#Named_E@ to find their respective ranges. @B_android#graphics#ColorSpace#Named#SRGB_E@ colors do not use the same encoding as other color longs. The components in this table are listed in encoding order (see below), which is why color longs in the RGB model are called RGBA colors (even if this doesn't quite hold for the special case of sRGB colors). The color long encoding relies on half-precision float values (fp16). If you wish to know more about the limitations of half-precision float values, please refer to the documentation of the @B_android#util#Half_E@ class. To avoid confusing color longs with arbitrary long values, it is a good practice to annotate them with the @ColorLong annotation found in the Android Support Library. Given the complex nature of color longs, it is strongly encouraged to use the various methods provided by this class to encode them. The most flexible way to encode a color long is to use the method @B_android#graphics#Color#pack_E@. This method allows you to specify three color components (typically RGB), an alpha component and a color space. To encode sRGB colors, use @B_android#graphics#Color#pack_E@ and @B_android#graphics#Color#pack_E@ which are the equivalent of @B_android#graphics#Color#rgb_E@ and @B_android#graphics#Color#argb_E@ for color ints. If you simply need to convert a color int into a color long, use @B_android#graphics#Color#pack_E@. It is also possible to create a color long value by invoking the method @B_android#graphics#Color#pack_E@ on a color instance. This class offers convenience methods to easily extract the components of a color long: @B_android#graphics#Color#alpha_E@ to extract the alpha component @B_android#graphics#Color#red_E@ to extract the red/X/L component @B_android#graphics#Color#green_E@ to extract the green/Y/a component @B_android#graphics#Color#blue_E@ to extract the blue/Z/b component The values returned by these methods depend on the color space encoded in the color long. The values are however typically in the \\([0..1]\\) range for RGB colors. Please refer to the documentation of the various @B_android#graphics#ColorSpace#Named_E@ for the exact ranges. Color instances are a representation introduced in @B_android#os#Build#VERSION_CODES#O_E@ to store colors in different @B_android#graphics#ColorSpace_E@, with more precision than both color ints and color longs. Color instances also offer the ability to store more than 4 components if necessary. Colors instances are immutable and can be created using one of the various valueOf methods. For instance: Color instances can be converted to color ints (@B_android#graphics#Color#toArgb_E@) or color longs (@B_android#graphics#Color#pack_E@). They also offer easy access to their various components using the following methods: @B_android#graphics#Color#alpha_E@, returns the alpha component value @B_android#graphics#Color#red_E@, returns the red component value (or first component value in non-RGB models) @B_android#graphics#Color#green_E@, returns the green component value (or second component value in non-RGB models) @B_android#graphics#Color#blue_E@, returns the blue component value (or third component value in non-RGB models) @B_android#graphics#Color#getComponent_E@, returns a specific component value @B_android#graphics#Color#getComponents_E@, returns all component values as an array You can convert colors from one color space to another using @B_android#graphics#ColorSpace#connect_E@ and its variants. However, the Color class provides a few convenience methods to simplify the process. Here is a brief description of some of them: @B_android#graphics#Color#convert_E@ to convert a color instance in a color space to a new color instance in a different color space @B_android#graphics#Color#convert_E@ to convert a color from a source color space to a destination color space @B_android#graphics#Color#convert_E@ to convert a color long from its built-in color space to a destination color space @B_android#graphics#Color#convert_E@ to convert a color int from sRGB to a destination color space Please refere to the @B_android#graphics#ColorSpace_E@ documentation for more information. The alpha component of a color defines the level of transparency of a color. When the alpha component is 0, the color is completely transparent. When the alpha is component is 1 (in the \\([0..1]\\) range) or 255 (in the \\([0..255]\\) range), the color is completely opaque. The color representations described above do not use pre-multiplied color components (a pre-multiplied color component is a color component that has been multiplied by the value of the alpha component). For instance, the color int representation of opaque red is 0xffff0000. For semi-transparent (50%) red, the representation becomes 0x80ff0000. The equivalent color instance representations would be (1.0, 0.0, 0.0, 1.0) and (1.0, 0.0, 0.0, 0.5)."}