{"Functions": {"registerSystemCodeForService(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether the registration was successful."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"], ["@B_java#lang#String_E@", "String: The System Code to be registered"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Registers a System Code for the specified service. The System Code must be in range from \"4000\" to \"4FFF\" (excluding \"4*FF\"). If a System Code was previously registered for this service (either statically through the manifest, or dynamically by using this API), it will be replaced with this one. Even if the same System Code is already registered for another service, this method succeeds in registering the System Code. Note that you can only register a System Code for a service that is running under the same UID as the caller of this API. Typically this means you need to call this from the same package as the service itself, though UIDs can also be shared between packages using shared UIDs.", "history": "Added in API level 24", "FullName": "public boolean registerSystemCodeForService (ComponentName service, String systemCode)"}, "getSystemCodeForService(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "the current System Code"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current System Code for the specified service. Before calling @B_android#nfc#cardemulation#NfcFCardEmulation#registerSystemCodeForService_E@, the System Code contained in the Manifest file is returned. After calling @B_android#nfc#cardemulation#NfcFCardEmulation#registerSystemCodeForService_E@, the System Code registered there is returned. After calling @B_android#nfc#cardemulation#NfcFCardEmulation#unregisterSystemCodeForService_E@, \"null\" is returned.", "history": "Added in API level 24", "FullName": "public String getSystemCodeForService (ComponentName service)"}, "getNfcid2ForService(android.content.ComponentName)": {"Returns": [["@B_java#lang#String_E@", "the current NFCID2"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the current NFCID2 for the specified service. Before calling @B_android#nfc#cardemulation#NfcFCardEmulation#setNfcid2ForService_E@, the NFCID2 contained in the Manifest file is returned. If \"random\" is specified in the Manifest file, a random number assigned by the system at installation time is returned. After setting an NFCID2 with @B_android#nfc#cardemulation#NfcFCardEmulation#setNfcid2ForService_E@, this NFCID2 is returned.", "history": "Added in API level 24", "FullName": "public String getNfcid2ForService (ComponentName service)"}, "enableService(android.app.Activity,android.content.ComponentName)": {"Returns": [["boolean", "whether the registration was successful"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity which prefers this service to be invoked"], ["@B_android#content#ComponentName_E@", "ComponentName: The service to be preferred while this activity is in the foreground"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Allows a foreground application to specify which card emulation service should be enabled while a specific Activity is in the foreground. The specified HCE-F service is only enabled when the corresponding application is in the foreground and this method has been called. When the application is moved to the background, @B_android#nfc#cardemulation#NfcFCardEmulation#disableService_E@ is called, or NFCID2 or System Code is replaced, the HCE-F service is disabled. The specified Activity must currently be in resumed state. A good paradigm is to call this method in your @B_android#app#Activity#onResume_E@, and to call @B_android#nfc#cardemulation#NfcFCardEmulation#disableService_E@ in your @B_android#app#Activity#onPause_E@. Note that this preference is not persisted by the OS, and hence must be called every time the Activity is resumed.", "history": "Added in API level 24", "FullName": "public boolean enableService (Activity activity, ComponentName service)"}, "disableService(android.app.Activity)": {"Returns": [["boolean", "true when successful"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity which the service was registered for"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Disables the service for the specified Activity. Note that the specified Activity must still be in resumed state at the time of this call. A good place to call this method is in your @B_android#app#Activity#onPause_E@ implementation.", "history": "Added in API level 24", "FullName": "public boolean disableService (Activity activity)"}, "setNfcid2ForService(android.content.ComponentName,java.lang.String)": {"Returns": [["boolean", "whether the setting was successful."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"], ["@B_java#lang#String_E@", "String: The NFCID2 to be registered"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set a NFCID2 for the specified service. The NFCID2 must be in range from \"02FE000000000000\" to \"02FEFFFFFFFFFFFF\". If a NFCID2 was previously set for this service (either statically through the manifest, or dynamically by using this API), it will be replaced. Note that you can only set the NFCID2 for a service that is running under the same UID as the caller of this API. Typically this means you need to call this from the same package as the service itself, though UIDs can also be shared between packages using shared UIDs.", "history": "Added in API level 24", "FullName": "public boolean setNfcid2ForService (ComponentName service, String nfcid2)"}, "unregisterSystemCodeForService(android.content.ComponentName)": {"Returns": [["boolean", "whether the System Code was successfully removed."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The component name of the service"]], "Throws": [["@B_java#lang#RuntimeException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes a registered System Code for the specified service.", "history": "Added in API level 24", "FullName": "public boolean unregisterSystemCodeForService (ComponentName service)"}, "getInstance(android.nfc.NfcAdapter)": {"Returns": [["@B_android#nfc#cardemulation#NfcFCardEmulation_E@", "no returns description in source"]], "Parameters": [["@B_android#nfc#NfcAdapter_E@", "NfcAdapter: A reference to an NfcAdapter object."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to get an instance of this class.", "history": "Added in API level 24", "FullName": "public static NfcFCardEmulation getInstance (NfcAdapter adapter)"}}, "Inheritance": [], "ClassName": "android.nfc.cardemulation.NfcFCardEmulation", "ClassDesc": "This class can be used to query the state of NFC-F card emulation services. For a general introduction into NFC card emulation, please read the Use of this class requires the @B_android#content#pm#PackageManager#FEATURE_NFC_HOST_CARD_EMULATION_NFCF_E@ to be present on the device."}