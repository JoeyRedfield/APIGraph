{"Functions": {"setForceDucking(boolean)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance This value will never be null."]], "Parameters": [["boolean", "boolean: true to force ducking"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this focus request as forcing ducking, regardless of the conditions in which the system would or would not enforce ducking. Forcing ducking will only be honored when requesting AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK with an @B_android#media#AudioAttributes_E@ usage of @B_android#media#AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY_E@, coming from an accessibility service, and will be ignored otherwise.", "history": "Added in API level 28", "FullName": "public AudioFocusRequest.Builder setForceDucking (boolean forceDucking)"}, "setAcceptsDelayedFocusGain(boolean)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance This value will never be null."]], "Parameters": [["boolean", "boolean: use true if the application supports delayed focus. If true, note that you must also set a focus listener to be notified of delayed focus gain, with @B_android#media#AudioFocusRequest#Builder#setOnAudioFocusChangeListener_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this focus request as compatible with delayed focus. See more details about delayed focus in the @B_android#media#AudioFocusRequest_E@ class documentation.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setAcceptsDelayedFocusGain (boolean acceptsDelayedFocusGain)"}, "setFocusGain(int)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance This value will never be null."]], "Parameters": [["int", "int: the type of audio focus gain that will be requested."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when an invalid focus gain type is used"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the type of focus gain that will be requested. Use this method to replace the focus gain when building a request by modifying an existing AudioFocusRequest instance.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setFocusGain (int focusGain)"}, "AudioFocusRequest.Builder(android.media.AudioFocusRequest)": {"Returns": [], "Parameters": [["@B_android#media#AudioFocusRequest_E@", "AudioFocusRequest: the non-null AudioFocusRequest to build a duplicate from. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when a null AudioFocusRequest is used."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Builder with all the properties of the AudioFocusRequest passed as parameter. Use this method when you want a new request to differ only by some properties.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder (AudioFocusRequest requestToCopy)"}, "setAudioAttributes(android.media.AudioAttributes)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance."]], "Parameters": [["@B_android#media#AudioAttributes_E@", "AudioAttributes: the @B_android#media#AudioAttributes_E@ for the focus request. This value must never be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown when using null for the attributes."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#media#AudioAttributes_E@ to be associated with the focus request, and which describe the use case for which focus is requested. As the focus requests typically precede audio playback, this information is used on certain platforms to declare the subsequent playback use case. It is therefore good practice to use in this method the same AudioAttributes as used for playback, see for example @B_android#media#MediaPlayer#setAudioAttributes_E@ in MediaPlayer or @B_android#media#AudioTrack#Builder#setAudioAttributes_E@ in AudioTrack.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setAudioAttributes (AudioAttributes attributes)"}, "setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener,android.os.Handler)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance."]], "Parameters": [["@B_android#media#AudioManager#OnAudioFocusChangeListener_E@", "AudioManager.OnAudioFocusChangeListener: the listener receiving the focus change notifications. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ for the thread on which to execute the notifications. This value must never be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown when a null focus listener or handler is used."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener called when audio focus changes after being requested with @B_android#media#AudioManager#requestAudioFocus_E@, and until being abandoned with @B_android#media#AudioManager#abandonAudioFocusRequest_E@. Note that only focus changes (gains and losses) affecting the focus owner are reported, not gains and losses of other focus requesters in the system.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setOnAudioFocusChangeListener (AudioManager.OnAudioFocusChangeListener listener, Handler handler)"}, "setOnAudioFocusChangeListener(android.media.AudioManager.OnAudioFocusChangeListener)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance."]], "Parameters": [["@B_android#media#AudioManager#OnAudioFocusChangeListener_E@", "AudioManager.OnAudioFocusChangeListener: the listener receiving the focus change notifications. This value must never be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown when a null focus listener is used."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener called when audio focus changes after being requested with @B_android#media#AudioManager#requestAudioFocus_E@, and until being abandoned with @B_android#media#AudioManager#abandonAudioFocusRequest_E@. Note that only focus changes (gains and losses) affecting the focus owner are reported, not gains and losses of other focus requesters in the system. Notifications are delivered on the @B_android#os#Looper_E@ associated with the one of the creation of the @B_android#media#AudioManager_E@ used to request focus (see @B_android#media#AudioManager#requestAudioFocus_E@).", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setOnAudioFocusChangeListener (AudioManager.OnAudioFocusChangeListener listener)"}, "setWillPauseWhenDucked(boolean)": {"Returns": [["@B_android#media#AudioFocusRequest#Builder_E@", "this Builder instance. This value will never be null."]], "Parameters": [["boolean", "boolean: use true if the application intends to pause audio playback when losing focus with @B_android#media#AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK_E@. If true, note that you must also set a focus listener to receive such an event, with @B_android#media#AudioFocusRequest#Builder#setOnAudioFocusChangeListener_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Declare the intended behavior of the application with regards to audio ducking. See more details in the @B_android#media#AudioFocusRequest_E@ class documentation.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder setWillPauseWhenDucked (boolean pauseOnDuck)"}, "AudioFocusRequest.Builder(int)": {"Returns": [], "Parameters": [["int", "int: the type of audio focus gain that will be requested"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when an invalid focus gain type is used"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Builder, and specifies how audio focus will be requested. Valid values for focus requests are @B_android#media#AudioManager#AUDIOFOCUS_GAIN_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_E@, @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK_E@, and @B_android#media#AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE_E@. By default there is no focus change listener, delayed focus is not supported, ducking is suitable for the application, and the AudioAttributes have a usage of @B_android#media#AudioAttributes#USAGE_MEDIA_E@.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest.Builder (int focusGain)"}, "build()": {"Returns": [["@B_android#media#AudioFocusRequest_E@", "the AudioFocusRequest instance qualified by all the properties set on this Builder."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "thrown when attempting to build a focus request that is set to accept delayed focus, or to pause on duck, but no focus change listener was set."]], "SeeAlso": [], "Permissions": [], "Description": "Builds a new AudioFocusRequest instance combining all the information gathered by this Builder's configuration methods.", "history": "Added in API level 26", "FullName": "public AudioFocusRequest build ()"}}, "Inheritance": [], "ClassName": "android.media.AudioFocusRequest.Builder", "ClassDesc": "Builder class for @B_android#media#AudioFocusRequest_E@ objects. See @B_android#media#AudioFocusRequest_E@ for an example of building an instance with this builder. The default values for the instance to be built are:"}