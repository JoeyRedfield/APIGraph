{"Functions": {"PropertyResourceBundle(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream that represents a property file to read from."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "if stream is null"], ["@B_java#lang#IllegalArgumentException_E@", "if stream contains a malformed Unicode escape sequence."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a property resource bundle from an @B_java#io#InputStream_E@. The property file read with this constructor must be encoded in ISO-8859-1.", "history": "Added in API level 1", "FullName": "public PropertyResourceBundle (InputStream stream)"}, "getKeys()": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration of the keys contained in this ResourceBundle and its parent bundles."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ResourceBundle#keySet_E@"], "Permissions": [], "Description": "Returns an Enumeration of the keys contained in this ResourceBundle and its parent bundles.", "history": "Added in API level 1", "FullName": "public Enumeration<String> getKeys ()"}, "PropertyResourceBundle(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: a Reader that represents a property file to read from."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "if reader is null"], ["@B_java#lang#IllegalArgumentException_E@", "if a malformed Unicode escape sequence appears from reader."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a property resource bundle from a @B_java#io#Reader_E@. Unlike the constructor @B_java#util#PropertyResourceBundle#PropertyResourceBundle_E@, there is no limitation as to the encoding of the input property file.", "history": "Added in API level 9", "FullName": "public PropertyResourceBundle (Reader reader)"}, "handleKeySet()": {"Returns": [["@B_java#util#Set_E@", "a Set of the keys contained only in this ResourceBundle"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#ResourceBundle#keySet_E@"], "Permissions": [], "Description": "Returns a Set of the keys contained only in this ResourceBundle.", "history": "Added in API level 9", "FullName": "protected Set<String> handleKeySet ()"}, "handleGetObject(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the object for the given key, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: the key for the desired object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an object for the given key from this resource bundle. Returns null if this resource bundle does not contain an object for the given key.", "history": "Added in API level 1", "FullName": "public Object handleGetObject (String key)"}}, "Inheritance": ["@B_java#util#ResourceBundle_E@"], "ClassName": "java.util.PropertyResourceBundle", "ClassDesc": "PropertyResourceBundle is a concrete subclass of ResourceBundle that manages resources for a locale using a set of static strings from a property file. See @B_java#util#ResourceBundle_E@ for more information about resource bundles. Unlike other types of resource bundle, you don't subclass PropertyResourceBundle. Instead, you supply properties files containing the resource data. ResourceBundle.getBundle will automatically look for the appropriate properties file and create a PropertyResourceBundle that refers to it. See @B_java#util#ResourceBundle#getBundle_E@ for a complete description of the search and instantiation strategy. The following PropertyResourceBundle, and the text therefore is the content of the file \"MyResources_de.properties\" (a related ListResourceBundle). The keys in this example are of the form \"s1\" etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive. The implementation of a PropertyResourceBundle subclass must be thread-safe if it's simultaneously used by multiple threads. The default implementations of the non-abstract methods in this class are thread-safe."}