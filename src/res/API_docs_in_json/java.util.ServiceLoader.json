{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "A descriptive string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this service.", "history": "Added in API level 9", "FullName": "public String toString ()"}, "reload()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear this loader's provider cache so that all providers will be reloaded. After invoking this method, subsequent invocations of the @B_java#util#ServiceLoader#iterator_E@ method will lazily look up and instantiate providers from scratch, just as is done by a newly-created loader. This method is intended for use in situations in which new providers can be installed into a running Java virtual machine.", "history": "Added in API level 9", "FullName": "public void reload ()"}, "load(java.lang.Class<S>, java.lang.ClassLoader)": {"Returns": [["@B_java#util#ServiceLoader_E@", "A new service loader"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The interface or abstract class representing the service"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: The class loader to be used to load provider-configuration files and provider classes, or null if the system class loader (or, failing that, the bootstrap class loader) is to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new service loader for the given service type and class loader.", "history": "added in API level 9", "FullName": "public static ServiceLoader<S> load (Class<S> service, ClassLoader loader)"}, "load(java.lang.Class<S>)": {"Returns": [["@B_java#util#ServiceLoader_E@", "A new service loader"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The interface or abstract class representing the service"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new service loader for the given service type, using the current thread's An invocation of this convenience method of the form", "history": "Added in API level 9", "FullName": "public static ServiceLoader<S> load (Class<S> service)"}, "load(java.lang.Class<S>,java.lang.ClassLoader)": {"Returns": [["@B_java#util#ServiceLoader_E@", "A new service loader"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The interface or abstract class representing the service"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: The class loader to be used to load provider-configuration files and provider classes, or null if the system class loader (or, failing that, the bootstrap class loader) is to be used"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new service loader for the given service type and class loader.", "history": "Added in API level 9", "FullName": "public static ServiceLoader<S> load (Class<S> service, ClassLoader loader)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "An iterator that lazily loads providers for this loader's service"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Lazily loads the available providers of this loader's service. The iterator returned by this method first yields all of the elements of the provider cache, in instantiation order. It then lazily loads and instantiates any remaining providers, adding each one to the cache in turn. To achieve laziness the actual work of parsing the available provider-configuration files and instantiating providers must be done by the iterator itself. Its @B_java#util#Iterator#hasNext_E@ and @B_java#util#Iterator#next_E@ methods can therefore throw a @B_java#util#ServiceConfigurationError_E@ if a provider-configuration file violates the specified format, or if it names a provider class that cannot be found and instantiated, or if the result of instantiating the class is not assignable to the service type, or if any other kind of exception or error is thrown as the next provider is located and instantiated. To write robust code it is only necessary to catch @B_java#util#ServiceConfigurationError_E@ when using a service iterator. If such an error is thrown then subsequent invocations of the iterator will make a best effort to locate and instantiate the next available provider, but in general such recovery cannot be guaranteed. The iterator returned by this method does not support removal. Invoking its @B_java#util#Iterator#remove_E@ method will cause an @B_java#lang#UnsupportedOperationException_E@ to be thrown.", "history": "Added in API level 9", "FullName": "public Iterator<S> iterator ()"}, "loadInstalled(java.lang.Class<S>)": {"Returns": [["@B_java#util#ServiceLoader_E@", "A new service loader"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The interface or abstract class representing the service"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new service loader for the given service type, using the extension class loader. This convenience method simply locates the extension class loader, call it If the extension class loader cannot be found then the system class loader is used; if there is no system class loader then the bootstrap class loader is used. This method is intended for use when only installed providers are desired. The resulting service will only find and load providers that have been installed into the current Java virtual machine; providers on the application's class path will be ignored.", "history": "Added in API level 9", "FullName": "public static ServiceLoader<S> loadInstalled (Class<S> service)"}}, "Inheritance": [], "ClassName": "java.util.ServiceLoader<S>", "ClassDesc": "A simple service-provider loading facility. A For the purpose of loading, a service is represented by a single type, that is, a single interface or abstract class. (A concrete class can be used, but this is not recommended.) A provider of a given service contains one or more concrete classes that extend this If a particular concrete provider class is named in more than one configuration file, or is named in the same configuration file more than once, then the duplicates are ignored. The configuration file naming a particular provider need not be in the same jar file or other distribution unit as the provider itself. The provider must be accessible from the same class loader that was initially queried to locate the configuration file; note that this is not necessarily the class loader from which the file was actually loaded. Providers are located and instantiated lazily, that is, on demand. A service loader maintains a cache of the providers that have been loaded so far. Each invocation of the @B_java#util#ServiceLoader#iterator_E@ method returns an iterator that first yields all of the elements of the cache, in instantiation order, and then lazily locates and instantiates any remaining providers, adding each one to the cache in turn. The cache can be cleared via the @B_java#util#ServiceLoader#reload_E@ method. Service loaders always execute in the security context of the caller. Trusted system code should typically invoke the methods in this class, and the methods of the iterators which they return, from within a privileged security context. Instances of this class are not safe for use by multiple concurrent threads. Unless otherwise specified, passing a @B_java#lang#NullPointerException_E@ to be thrown. If This file contains the single line: The To locate an encoder for a given encoding name it defines a static factory method which iterates through the known and available providers, returning only when it has located a suitable encoder or has run out of providers. A This activity is normal, although it may cause puzzling entries to be created in web-server logs. If a web server is not configured correctly, however, then this activity may cause the provider-loading algorithm to fail spuriously. A web server should return an HTTP 404 (Not Found) response when a requested resource does not exist. Sometimes, however, web servers are erroneously configured to return an HTTP 200 (OK) response along with a helpful HTML error page in such cases. This will cause a @B_java#util#ServiceConfigurationError_E@ to be thrown when this class attempts to parse the HTML page as a provider-configuration file. The best solution to this problem is to fix the misconfigured web server to return the correct response code (HTTP 404) along with the HTML error page."}