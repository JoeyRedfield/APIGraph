{"Functions": {"getLifecycleStageOf(android.app.Activity)": {"Returns": [["@B_android#support#test#runner#lifecycle#Stage_E@", "the lifecycle stage this activity is in."]], "Parameters": [["Activity", "Activity: an activity in this application."]], "Throws": [["IllegalArgumentException", "if activity is unknown to the monitor."], ["NullPointerException", "if activity is null."], ["IllegalStateException", "if called off the main thread."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current lifecycle stage of a given activity. This method can only return a consistant and correct answer from the main thread, therefore callers should always invoke it from the main thread and implementors are free to throw an exception if the call is not made on the main thread. Implementors should ensure this method returns a consistant response if called from a lifecycle callback also registered with this monitor (eg: it would be horriblely wrong if a callback sees PAUSED and calls this method with the same activity and gets RESUMED.", "history": "", "FullName": "Stage getLifecycleStageOf (Activity activity)"}}, "Inheritance": [], "ClassName": "android.support.test.runner.lifecycle.ActivityLifecycleMonitor", "ClassDesc": "Interface for tests to use when they need to query the activity lifecycle state. Activity lifecycle changes occur only on the UI thread - therefore listeners registered with an ActivityLifecycleMonitor should expect to be invoked on the UI thread. The direct query methods can only be called on the UI thread because otherwise they would not be able to return consistent responses. Retrieve instances of the monitor through @B_android#support#test#runner#lifecycle#ActivityLifecycleMonitorRegistry_E@. Detecting these lifecycle states requires support from Instrumentation, therefore do not expect an instance to be present under any arbitrary instrumentation."}