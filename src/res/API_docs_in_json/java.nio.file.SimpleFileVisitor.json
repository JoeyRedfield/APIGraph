{"Functions": {"postVisitDirectory(T, java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#io#IOException_E@", "IOException: null if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited. Unless overridden, this method returns @B_java#nio#file#FileVisitResult#CONTINUE_E@ if the directory iteration completes without an I/O exception; otherwise this method re-throws the I/O exception that caused the iteration of the directory to terminate prematurely.", "history": "added in API level 26", "FullName": "public FileVisitResult postVisitDirectory (T dir, IOException exc)"}, "postVisitDirectory(T,java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#io#IOException_E@", "IOException: null if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited. Unless overridden, this method returns @B_java#nio#file#FileVisitResult#CONTINUE_E@ if the directory iteration completes without an I/O exception; otherwise this method re-throws the I/O exception that caused the iteration of the directory to terminate prematurely.", "history": "Added in API level 26", "FullName": "public FileVisitResult postVisitDirectory (T dir, IOException exc)"}, "visitFile(T,java.nio.file.attribute.BasicFileAttributes)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#nio#file#attribute#BasicFileAttributes_E@", "BasicFileAttributes: the file's basic attributes"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file in a directory. Unless overridden, this method returns @B_java#nio#file#FileVisitResult#CONTINUE_E@.", "history": "Added in API level 26", "FullName": "public FileVisitResult visitFile (T file, BasicFileAttributes attrs)"}, "visitFileFailed(T,java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#io#IOException_E@", "IOException: the I/O exception that prevented the file from being visited"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file that could not be visited. Unless overridden, this method re-throws the I/O exception that prevented the file from being visited.", "history": "Added in API level 26", "FullName": "public FileVisitResult visitFileFailed (T file, IOException exc)"}, "preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#nio#file#attribute#BasicFileAttributes_E@", "BasicFileAttributes: the directory's basic attributes"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory before entries in the directory are visited. Unless overridden, this method returns @B_java#nio#file#FileVisitResult#CONTINUE_E@.", "history": "Added in API level 26", "FullName": "public FileVisitResult preVisitDirectory (T dir, BasicFileAttributes attrs)"}, "visitFileFailed(T, java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#io#IOException_E@", "IOException: the I/O exception that prevented the file from being visited"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file that could not be visited. Unless overridden, this method re-throws the I/O exception that prevented the file from being visited.", "history": "added in API level 26", "FullName": "public FileVisitResult visitFileFailed (T file, IOException exc)"}, "SimpleFileVisitor()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected SimpleFileVisitor ()"}}, "Inheritance": [], "ClassName": "java.nio.file.SimpleFileVisitor<T>", "ClassDesc": "A simple visitor of files with default behavior to visit all files and to re-throw I/O errors. Methods in this class may be overridden subject to their general contract."}