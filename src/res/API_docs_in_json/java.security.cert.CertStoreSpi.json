{"Functions": {"CertStoreSpi(java.security.cert.CertStoreParameters)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertStoreParameters_E@", "CertStoreParameters: the initialization parameters (may be null)"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the initialization parameters are inappropriate for this CertStoreSpi"]], "SeeAlso": [], "Permissions": [], "Description": "The sole constructor.", "history": "Added in API level 1", "FullName": "public CertStoreSpi (CertStoreParameters params)"}, "engineGetCertificates(java.security.cert.CertSelector)": {"Returns": [["@B_java#util#Collection_E@", "A Collection of Certificates that match the specified selector (never null)"]], "Parameters": [["@B_java#security#cert#CertSelector_E@", "CertSelector: A CertSelector used to select which Certificates should be returned. Specify null to return all Certificates (if supported)."]], "Throws": [["@B_java#security#cert#CertStoreException_E@", "if an exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collection of Certificates that match the specified selector. If no Certificates match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain Certificates that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the Certificates it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CertSelector is provided that includes specific criteria that can be used to find the certificates. Issuer and/or subject names are especially useful criteria.", "history": "Added in API level 1", "FullName": "public abstract Collection<? extends Certificate> engineGetCertificates (CertSelector selector)"}, "engineGetCRLs(java.security.cert.CRLSelector)": {"Returns": [["@B_java#util#Collection_E@", "A Collection of CRLs that match the specified selector (never null)"]], "Parameters": [["@B_java#security#cert#CRLSelector_E@", "CRLSelector: A CRLSelector used to select which CRLs should be returned. Specify null to return all CRLs (if supported)."]], "Throws": [["@B_java#security#cert#CertStoreException_E@", "if an exception occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a Collection of CRLs that match the specified selector. If no CRLs match the selector, an empty Collection will be returned. For some CertStore types, the resulting Collection may not contain CRLs that match the selector. For instance, an LDAP CertStore may not search all entries in the directory. Instead, it may just search entries that are likely to contain the CRLs it is looking for. Some CertStore implementations (especially LDAP CertStores) may throw a CertStoreException unless a non-null CRLSelector is provided that includes specific criteria that can be used to find the CRLs. Issuer names and/or the certificate to be checked are especially useful.", "history": "Added in API level 1", "FullName": "public abstract Collection<? extends CRL> engineGetCRLs (CRLSelector selector)"}}, "Inheritance": [], "ClassName": "java.security.cert.CertStoreSpi", "ClassDesc": "The @B_java#security#cert#CertStore_E@ class. All CertStore implementations must include a class (the SPI class) that extends this class (CertStoreSpi), provides a constructor with a single argument of type CertStoreParameters, and implements all of its methods. In general, instances of this class should only be accessed through the CertStore class. For details, see the Java Cryptography Architecture. The public methods of all CertStoreSpi objects must be thread-safe. That is, multiple threads may concurrently invoke these methods on a single CertStoreSpi object (or more than one) with no ill effects. This allows a CertPathBuilder to search for a CRL while simultaneously searching for further certificates, for instance. Simple CertStoreSpi implementations will probably ensure thread safety by adding a synchronized keyword to their engineGetCertificates and engineGetCRLs methods. More sophisticated ones may allow truly concurrent access."}