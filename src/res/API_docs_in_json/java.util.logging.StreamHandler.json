{"Functions": {"setEncoding(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of a supported character encoding. May be null, to indicate the default platform encoding."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."], ["@B_java#io#UnsupportedEncodingException_E@", "if the named encoding is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Set (or change) the character encoding used by this The encoding should be set before any", "history": "Added in API level 1", "FullName": "public void setEncoding (String encoding)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flush any buffered messages.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "publish(java.util.logging.LogRecord)": {"Returns": [], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: description of the log event. A null record is silently ignored and is not published"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format and publish a The If this is the first", "history": "Added in API level 1", "FullName": "public void publish (LogRecord record)"}, "StreamHandler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a", "history": "Added in API level 1", "FullName": "public StreamHandler ()"}, "isLoggable(java.util.logging.LogRecord)": {"Returns": [["boolean", "true if the LogRecord would be logged."]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: a LogRecord"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this This method checks if the", "history": "Added in API level 1", "FullName": "public boolean isLoggable (LogRecord record)"}, "StreamHandler(java.io.OutputStream,java.util.logging.Formatter)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the target output stream"], ["@B_java#util#logging#Formatter_E@", "Formatter: Formatter to be used to format output"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a", "history": "Added in API level 1", "FullName": "public StreamHandler (OutputStream out, Formatter formatter)"}, "setOutputStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: New output stream. May not be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Change the output stream. If there is a current output stream then the", "history": "Added in API level 1", "FullName": "protected void setOutputStream (OutputStream out)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and if the caller does not have LoggingPermission(\"control\")."]], "SeeAlso": [], "Permissions": [], "Description": "Close the current output stream. The", "history": "Added in API level 1", "FullName": "public void close ()"}}, "Inheritance": ["@B_java#util#logging#Handler_E@"], "ClassName": "java.util.logging.StreamHandler", "ClassDesc": "Stream based logging This is primarily intended as a base class or support class to be used in implementing other logging <handler-name>.level specifies the default level for the <handler-name>.filter specifies the name of a <handler-name>.formatter specifies the name of a <handler-name>.encoding the name of the character set encoding to use (defaults to the default platform encoding). For example, the properties for StreamHandler would be: java.util.logging.StreamHandler.level=INFO java.util.logging.StreamHandler.formatter=java.util.logging.SimpleFormatter For a custom handler, e.g. com.foo.MyHandler, the properties would be: com.foo.MyHandler.level=INFO com.foo.MyHandler.formatter=java.util.logging.SimpleFormatter"}