{"Functions": {"onCustomAction(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The action that was originally sent in the @B_android#media#session#PlaybackState#CustomAction_E@. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Optional extras specified by the @B_android#media#session#MediaController_E@. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a @B_android#media#session#MediaController_E@ wants a @B_android#media#session#PlaybackState#CustomAction_E@ to be performed.", "history": "Added in API level 21", "FullName": "public void onCustomAction (String action, Bundle extras)"}, "onMediaButtonEvent(android.content.Intent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: an intent containing the KeyEvent as an extra This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a media button is pressed and this session has the highest priority or a controller sends a media button event to the session. The default behavior will call the relevant method if the action for it was set. The intent will be of type @B_android#content#Intent#ACTION_MEDIA_BUTTON_E@ with a KeyEvent in @B_android#content#Intent#EXTRA_KEY_EVENT_E@", "history": "Added in API level 21", "FullName": "public boolean onMediaButtonEvent (Intent mediaButtonIntent)"}, "onPlay()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to begin playback.", "history": "Added in API level 21", "FullName": "public void onPlay ()"}, "onPrepareFromUri(android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to prepare a specific media item represented by a URI. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to @B_android#media#session#PlaybackState#STATE_PAUSED_E@ after the preparation is done. The playback of the prepared content should start in the implementation of @B_android#media#session#MediaSession#Callback#onPlay_E@. Override @B_android#media#session#MediaSession#Callback#onPlayFromUri_E@ to handle requests for starting playback without preparation.", "history": "Added in API level 24", "FullName": "public void onPrepareFromUri (Uri uri, Bundle extras)"}, "onCommand(java.lang.String,android.os.Bundle,android.os.ResultReceiver)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The command name. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Optional parameters for the command, may be null. This value may be null."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: A result receiver to which a result may be sent by the command, may be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a controller has sent a command to this session. The owner of the session may handle custom commands but is not required to.", "history": "Added in API level 21", "FullName": "public void onCommand (String command, Bundle args, ResultReceiver cb)"}, "onSetRating(android.media.Rating)": {"Returns": [], "Parameters": [["@B_android#media#Rating_E@", "Rating: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle the item being rated.", "history": "Added in API level 21", "FullName": "public void onSetRating (Rating rating)"}, "onFastForward()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to fast forward.", "history": "Added in API level 21", "FullName": "public void onFastForward ()"}, "onPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to pause playback.", "history": "Added in API level 21", "FullName": "public void onPause ()"}, "onPlayFromUri(android.net.Uri, android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to play a specific media item represented by a URI.", "history": "added in API level 23", "FullName": "public void onPlayFromUri (Uri uri, Bundle extras)"}, "onSetPlaybackSpeed(float)": {"Returns": [], "Parameters": [["float", "float: the playback speed"]], "Throws": [], "SeeAlso": ["@B_android#media#session#MediaSession#setPlaybackState_E@", "@B_android#media#session#PlaybackState#Builder#setState_E@"], "Permissions": [], "Description": "Override to handle the playback speed change. To update the new playback speed, create a new @B_android#media#session#PlaybackState_E@ by using @B_android#media#session#PlaybackState#Builder#setState_E@, and set it with @B_android#media#session#MediaSession#setPlaybackState_E@. A value of 1.0f is the default playback value, and a negative value indicates reverse playback. The speed will not be equal to zero.", "history": "Added in API level 29", "FullName": "public void onSetPlaybackSpeed (float speed)"}, "onPlayFromSearch(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to begin playback from a search query. An empty query indicates that the app may play any music. The implementation should attempt to make a smart choice about what to play.", "history": "Added in API level 21", "FullName": "public void onPlayFromSearch (String query, Bundle extras)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to stop playback.", "history": "Added in API level 21", "FullName": "public void onStop ()"}, "onPrepare()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to prepare playback. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to @B_android#media#session#PlaybackState#STATE_PAUSED_E@ after the preparation is done.", "history": "Added in API level 24", "FullName": "public void onPrepare ()"}, "onPrepareFromSearch(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to prepare playback from a search query. An empty query indicates that the app may prepare any music. The implementation should attempt to make a smart choice about what to play. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to @B_android#media#session#PlaybackState#STATE_PAUSED_E@ after the preparation is done. The playback of the prepared content should start in the implementation of @B_android#media#session#MediaSession#Callback#onPlay_E@. Override @B_android#media#session#MediaSession#Callback#onPlayFromSearch_E@ to handle requests for starting playback without preparation.", "history": "Added in API level 24", "FullName": "public void onPrepareFromSearch (String query, Bundle extras)"}, "onSkipToQueueItem(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to play an item with a given id from the play queue.", "history": "Added in API level 21", "FullName": "public void onSkipToQueueItem (long id)"}, "onSeekTo(long)": {"Returns": [], "Parameters": [["long", "long: New position to move to, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to seek to a specific position in ms.", "history": "Added in API level 21", "FullName": "public void onSeekTo (long pos)"}, "MediaSession.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public MediaSession.Callback ()"}, "onPrepareFromMediaId(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to prepare for playing a specific mediaId that was provided by your app's @B_android#service#media#MediaBrowserService_E@. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to @B_android#media#session#PlaybackState#STATE_PAUSED_E@ after the preparation is done. The playback of the prepared content should start in the implementation of @B_android#media#session#MediaSession#Callback#onPlay_E@. Override @B_android#media#session#MediaSession#Callback#onPlayFromMediaId_E@ to handle requests for starting playback without preparation.", "history": "Added in API level 24", "FullName": "public void onPrepareFromMediaId (String mediaId, Bundle extras)"}, "onPlayFromMediaId(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to play a specific mediaId that was provided by your app's @B_android#service#media#MediaBrowserService_E@.", "history": "Added in API level 21", "FullName": "public void onPlayFromMediaId (String mediaId, Bundle extras)"}, "onPlayFromUri(android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"], ["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to play a specific media item represented by a URI.", "history": "Added in API level 23", "FullName": "public void onPlayFromUri (Uri uri, Bundle extras)"}, "onSkipToNext()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to skip to the next media item.", "history": "Added in API level 21", "FullName": "public void onSkipToNext ()"}, "onRewind()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to rewind.", "history": "Added in API level 21", "FullName": "public void onRewind ()"}, "onSkipToPrevious()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to handle requests to skip to the previous media item.", "history": "Added in API level 21", "FullName": "public void onSkipToPrevious ()"}}, "Inheritance": [], "ClassName": "android.media.session.MediaSession.Callback", "ClassDesc": "Receives media buttons, transport controls, and commands from controllers and the system. A callback may be set using @B_android#media#session#MediaSession#setCallback_E@."}