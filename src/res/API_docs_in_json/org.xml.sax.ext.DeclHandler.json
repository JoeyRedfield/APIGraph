{"Functions": {"elementDecl(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The element type name."], ["@B_java#lang#String_E@", "String: The content model as a normalized string."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "The application may raise an exception."]], "SeeAlso": [], "Permissions": [], "Description": "Report an element type declaration. The content model will consist of the string \"EMPTY\", the string \"ANY\", or a parenthesised group, optionally followed by an occurrence indicator. The model will be normalized so that all parameter entities are fully resolved and all whitespace is removed,and will include the enclosing parentheses. Other normalization (such as removing redundant parentheses or simplifying occurrence indicators) is at the discretion of the parser.", "history": "Added in API level 1", "FullName": "public abstract void elementDecl (String name, String model)"}, "attributeDecl(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the associated element."], ["@B_java#lang#String_E@", "String: The name of the attribute."], ["@B_java#lang#String_E@", "String: A string representing the attribute type."], ["@B_java#lang#String_E@", "String: A string representing the attribute defaulting mode (\"#IMPLIED\", \"#REQUIRED\", or \"#FIXED\") or null if none of these applies."], ["@B_java#lang#String_E@", "String: A string representing the attribute's default value, or null if there is none."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "The application may raise an exception."]], "SeeAlso": [], "Permissions": [], "Description": "Report an attribute type declaration. Only the effective (first) declaration for an attribute will be reported. The type will be one of the strings \"CDATA\", \"ID\", \"IDREF\", \"IDREFS\", \"NMTOKEN\", \"NMTOKENS\", \"ENTITY\", \"ENTITIES\", a parenthesized token group with the separator \"|\" and all whitespace removed, or the word \"NOTATION\" followed by a space followed by a parenthesized token group with all whitespace removed. The value will be the value as reported to applications, appropriately normalized and with entity and character references expanded.", "history": "Added in API level 1", "FullName": "public abstract void attributeDecl (String eName, String aName, String type, String mode, String value)"}, "externalEntityDecl(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the entity. If it is a parameter entity, the name will begin with '%'."], ["@B_java#lang#String_E@", "String: The entity's public identifier, or null if none was given."], ["@B_java#lang#String_E@", "String: The entity's system identifier."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "The application may raise an exception."]], "SeeAlso": ["@B_org#xml#sax#ext#DeclHandler#internalEntityDecl_E@", "@B_org#xml#sax#DTDHandler#unparsedEntityDecl_E@"], "Permissions": [], "Description": "Report a parsed external entity declaration. Only the effective (first) declaration for each entity will be reported. If the system identifier is a URL, the parser must resolve it fully before passing it to the application.", "history": "Added in API level 1", "FullName": "public abstract void externalEntityDecl (String name, String publicId, String systemId)"}, "internalEntityDecl(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the entity. If it is a parameter entity, the name will begin with '%'."], ["@B_java#lang#String_E@", "String: The replacement text of the entity."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "The application may raise an exception."]], "SeeAlso": ["@B_org#xml#sax#ext#DeclHandler#externalEntityDecl_E@", "@B_org#xml#sax#DTDHandler#unparsedEntityDecl_E@"], "Permissions": [], "Description": "Report an internal entity declaration. Only the effective (first) declaration for each entity will be reported. All parameter entities in the value will be expanded, but general entities will not.", "history": "Added in API level 1", "FullName": "public abstract void internalEntityDecl (String name, String value)"}, "elementDecl(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The element type name."], ["@B_java#lang#String_E@", "String: The content model as a normalized string."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "The application may raise an exception."]], "SeeAlso": [], "Permissions": [], "Description": "Report an element type declaration. The content model will consist of the string \"EMPTY\", the string \"ANY\", or a parenthesised group, optionally followed by an occurrence indicator. The model will be normalized so that all parameter entities are fully resolved and all whitespace is removed,and will include the enclosing parentheses. Other normalization (such as removing redundant parentheses or simplifying occurrence indicators) is at the discretion of the parser.", "history": "added in API level 1", "FullName": "public abstract void elementDecl (String name, String model)"}}, "Inheritance": [], "ClassName": "org.xml.sax.ext.DeclHandler", "ClassDesc": "SAX2 extension handler for DTD declaration events. This is an optional extension handler for SAX2 to provide more complete information about DTD declarations in an XML document. XML readers are not required to recognize this handler, and it is not part of core-only SAX2 distributions. Note that data-related DTD declarations (unparsed entities and notations) are already reported through the @B_org#xml#sax#DTDHandler_E@ interface. If you are using the declaration handler together with a lexical handler, all of the events will occur between the @B_org#xml#sax#ext#LexicalHandler#startDTD_E@ and the @B_org#xml#sax#ext#LexicalHandler#endDTD_E@ events. To set the DeclHandler for an XML reader, use the @B_org#xml#sax#XMLReader#setProperty_E@ method with the property name http://xml.org/sax/properties/declaration-handler and an object implementing this interface (or null) as the value. If the reader does not report declaration events, it will throw a @B_org#xml#sax#SAXNotRecognizedException_E@ when you attempt to register the handler."}