{"Functions": {"StatFs(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: path in the desired file system to stat."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the file system access fails"]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new StatFs for looking at the stats of the filesystem at path. Upon construction, the stat of the file system will be performed, and the values retrieved available from the methods on this class.", "history": "Added in API level 1", "FullName": "public StatFs (String path)"}, "getFreeBytes()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of bytes that are free on the file system, including reserved blocks (that are not available to normal applications). Most applications will want to use @B_android#os#StatFs#getAvailableBytes_E@ instead.", "history": "Added in API level 18", "FullName": "public long getFreeBytes ()"}, "getTotalBytes()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The total number of bytes supported by the file system.", "history": "Added in API level 18", "FullName": "public long getTotalBytes ()"}, "getBlockSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#os#StatFs#getBlockSizeLong_E@ instead.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public int getBlockSize ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Since: API Level 1", "FullName": "protected void finalize ()"}, "restat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the file system access fails"]], "SeeAlso": [], "Permissions": [], "Description": "Perform a restat of the file system referenced by this object. This is the same as re-constructing the object with the same file system path, and the new stat values are available upon return.", "history": "Added in API level 1", "FullName": "public void restat (String path)"}, "getFreeBlocksLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The total number of blocks that are free on the file system, including reserved blocks (that are not available to normal applications). This corresponds to the Unix statvfs.f_bfree field. Most applications will want to use @B_android#os#StatFs#getAvailableBlocks_E@ instead.", "history": "Added in API level 18", "FullName": "public long getFreeBlocksLong ()"}, "getAvailableBlocks()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#os#StatFs#getAvailableBlocksLong_E@ instead.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public int getAvailableBlocks ()"}, "getBlockCountLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The total number of blocks on the file system. This corresponds to the Unix statvfs.f_blocks field.", "history": "Added in API level 18", "FullName": "public long getBlockCountLong ()"}, "getFreeBlocks()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#os#StatFs#getFreeBlocksLong_E@ instead.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public int getFreeBlocks ()"}, "getBlockCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#os#StatFs#getBlockCountLong_E@ instead.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public int getBlockCount ()"}, "getAvailableBlocksLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of blocks that are free on the file system and available to applications. This corresponds to the Unix statvfs.f_bavail field.", "history": "Added in API level 18", "FullName": "public long getAvailableBlocksLong ()"}, "getBlockSizeLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The size, in bytes, of a block on the file system. This corresponds to the Unix statvfs.f_frsize field.", "history": "Added in API level 18", "FullName": "public long getBlockSizeLong ()"}, "getAvailableBytes()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of bytes that are free on the file system and available to applications.", "history": "Added in API level 18", "FullName": "public long getAvailableBytes ()"}}, "Inheritance": [], "ClassName": "android.os.StatFs", "ClassDesc": "Retrieve overall information about the space on a filesystem. This is a wrapper for Unix statvfs()."}