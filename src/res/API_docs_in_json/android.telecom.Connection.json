{"Functions": {"setRinging()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to ringing (e.g., an inbound ringing connection).", "history": "Added in API level 23", "FullName": "public final void setRinging ()"}, "onAnswer(int)": {"Returns": [], "Parameters": [["int", "int: The video state in which to answer the connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection, which is in @B_android#telecom#Connection#STATE_RINGING_E@, of a request to accept. For managed @B_android#telecom#ConnectionService_E@s, this will be called when the user answers a call via the default dialer's @B_android#telecom#InCallService_E@. Although a self-managed @B_android#telecom#ConnectionService_E@ provides its own incoming call UI, the Telecom framework may request that the call is answered in the following circumstances: The user chooses to answer an incoming call via a Bluetooth device. A car mode @B_android#telecom#InCallService_E@ is in use which has declared @B_android#telecom#TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS_E@ in its manifest. Such an @B_android#telecom#InCallService_E@ will be able to see calls from self-managed @B_android#telecom#ConnectionService_E@s, and will be able to display an incoming call UI on their behalf.", "history": "Added in API level 23", "FullName": "public void onAnswer (int videoState)"}, "propertiesToString(int)": {"Returns": [["@B_java#lang#String_E@", "A human readable string representation."]], "Parameters": [["int", "int: A property bit field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders a set of property bits (PROPERTY_*) as a human readable string.", "history": "Added in API level 25", "FullName": "public static String propertiesToString (int properties)"}, "setInitializing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to initializing (this Connection is not yet ready to be used).", "history": "Added in API level 23", "FullName": "public final void setInitializing ()"}, "getConnectionProperties()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the connection's properties, as a bit mask of the PROPERTY_* constants.", "history": "Added in API level 25", "FullName": "public final int getConnectionProperties ()"}, "setOnHold()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to be on hold.", "history": "Added in API level 23", "FullName": "public final void setOnHold ()"}, "setNextPostDialChar(char)": {"Returns": [], "Parameters": [["char", "char: The DTMF character that was just processed by the Connection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that this Connection has processed a character in the post-dial started state. This is done when (a) the Connection is issuing a DTMF sequence; and (b) it wishes to signal Telecom to play the corresponding DTMF tone locally.", "history": "Added in API level 23", "FullName": "public final void setNextPostDialChar (char nextChar)"}, "sendRttSessionRemotelyTerminated()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that a currently active RTT session has been terminated by the remote side of the coll.", "history": "Added in API level 28", "FullName": "public final void sendRttSessionRemotelyTerminated ()"}, "getCallAudioState()": {"Returns": [["@B_android#telecom#CallAudioState_E@", "The audio state of the connection, describing how its audio is currently being routed by the system. This is null if this Connection does not directly know about its audio state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final CallAudioState getCallAudioState ()"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "The extras associated with this connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extras associated with this connection. Extras should be updated using @B_android#telecom#Connection#putExtras_E@. Telecom or an @B_android#telecom#InCallService_E@ can also update the extras via @B_android#telecom#Call#putExtras_E@, and @B_android#telecom#Call#removeExtras_E@. The connection is notified of changes to the extras made by Telecom or an @B_android#telecom#InCallService_E@ by @B_android#telecom#Connection#onExtrasChanged_E@.", "history": "Added in API level 23", "FullName": "public final Bundle getExtras ()"}, "onStopDtmfTone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to stop any currently playing DTMF tones.", "history": "Added in API level 23", "FullName": "public void onStopDtmfTone ()"}, "onDisconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to disconnect.", "history": "Added in API level 23", "FullName": "public void onDisconnect ()"}, "setStatusHints(android.telecom.StatusHints)": {"Returns": [], "Parameters": [["@B_android#telecom#StatusHints_E@", "StatusHints: The status label and icon to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the label and icon status to display in the in-call UI.", "history": "Added in API level 23", "FullName": "public final void setStatusHints (StatusHints statusHints)"}, "getConnectionCapabilities()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the connection's capabilities, as a bit mask of the CAPABILITY_* constants.", "history": "Added in API level 23", "FullName": "public final int getConnectionCapabilities ()"}, "onHandoverComplete()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this @B_android#telecom#Connection_E@ that a handover has completed. A handover is initiated with @B_android#telecom#Call#handoverTo_E@ on the initiating side of the handover, and @B_android#telecom#TelecomManager#acceptHandover_E@.", "history": "Added in API level 28", "FullName": "public void onHandoverComplete ()"}, "setPulling()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to pulling (e.g. the connection is being pulled to the local device from another device). Only applicable for @B_android#telecom#Connection_E@s with @B_android#telecom#Connection#PROPERTY_IS_EXTERNAL_CALL_E@ and @B_android#telecom#Connection#CAPABILITY_CAN_PULL_CALL_E@.", "history": "Added in API level 25", "FullName": "public final void setPulling ()"}, "getConference()": {"Returns": [["@B_android#telecom#Conference_E@", "The conference that this connection is a part of. Null if it is not part of any conference."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final Conference getConference ()"}, "setAudioRoute(int)": {"Returns": [], "Parameters": [["int", "int: The audio route to use (one of @B_android#telecom#CallAudioState#ROUTE_BLUETOOTH_E@, @B_android#telecom#CallAudioState#ROUTE_EARPIECE_E@, @B_android#telecom#CallAudioState#ROUTE_SPEAKER_E@, or @B_android#telecom#CallAudioState#ROUTE_WIRED_HEADSET_E@)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the audio route (speaker, bluetooth, etc...). When this request is honored, there will be change to the @B_android#telecom#Connection#getCallAudioState_E@. Used by self-managed @B_android#telecom#ConnectionService_E@s which wish to change the audio route for a self-managed @B_android#telecom#Connection_E@ (see @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@.) See also @B_android#telecom#InCallService#setAudioRoute_E@.", "history": "Added in API level 26", "FullName": "public final void setAudioRoute (int route)"}, "onAnswer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection, which is in @B_android#telecom#Connection#STATE_RINGING_E@, of a request to accept. For managed @B_android#telecom#ConnectionService_E@s, this will be called when the user answers a call via the default dialer's @B_android#telecom#InCallService_E@. Although a self-managed @B_android#telecom#ConnectionService_E@ provides its own incoming call UI, the Telecom framework may request that the call is answered in the following circumstances: The user chooses to answer an incoming call via a Bluetooth device. A car mode @B_android#telecom#InCallService_E@ is in use which has declared @B_android#telecom#TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS_E@ in its manifest. Such an @B_android#telecom#InCallService_E@ will be able to see calls from self-managed @B_android#telecom#ConnectionService_E@s, and will be able to display an incoming call UI on their behalf.", "history": "Added in API level 23", "FullName": "public void onAnswer ()"}, "onExtrasChanged(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The new extras bundle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this @B_android#telecom#Connection_E@ of a change to the extras made outside the @B_android#telecom#ConnectionService_E@. These extras changes can originate from Telecom itself, or from an @B_android#telecom#InCallService_E@ via the @B_android#telecom#Call#putExtras_E@ and @B_android#telecom#Call#removeExtras_E@.", "history": "Added in API level 25", "FullName": "public void onExtrasChanged (Bundle extras)"}, "onDeflect(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection, which is in @B_android#telecom#Connection#STATE_RINGING_E@, of a request to deflect.", "history": "Added in API level 28", "FullName": "public void onDeflect (Uri address)"}, "getCallerDisplayNamePresentation()": {"Returns": [["int", "The presentation requirements for the handle. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final int getCallerDisplayNamePresentation ()"}, "setConferenceableConnections(java.util.List<android.telecom.Connection>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The set of connections this connection can conference with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the connections with which this connection can be conferenced.", "history": "Added in API level 23", "FullName": "public final void setConferenceableConnections (List<Connection> conferenceableConnections)"}, "setDisconnected(android.telecom.DisconnectCause)": {"Returns": [], "Parameters": [["@B_android#telecom#DisconnectCause_E@", "DisconnectCause: The reason for the disconnection, as specified by @B_android#telecom#DisconnectCause_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to disconnected.", "history": "Added in API level 23", "FullName": "public final void setDisconnected (DisconnectCause disconnectCause)"}, "getState()": {"Returns": [["int", "The state of this Connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final int getState ()"}, "setInitialized()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to initialized (the Connection has been set up and is now ready to be used).", "history": "Added in API level 23", "FullName": "public final void setInitialized ()"}, "onShowIncomingCallUi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this @B_android#telecom#Connection_E@ that its @B_android#telecom#ConnectionService_E@ is responsible for displaying its incoming call user interface for the @B_android#telecom#Connection_E@. Will only be called for incoming calls added via a self-managed @B_android#telecom#ConnectionService_E@ (see @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@), where the @B_android#telecom#ConnectionService_E@ should show its own incoming call user interface. Where there are ongoing calls in other self-managed @B_android#telecom#ConnectionService_E@s, or in a regular @B_android#telecom#ConnectionService_E@, and it is not possible to hold these other calls, the Telecom framework will display its own incoming call user interface to allow the user to choose whether to answer the new incoming call and disconnect other ongoing calls, or to reject the new incoming call. You should trigger the display of the incoming call user interface for your application by showing a @B_android#app#Notification_E@ with a full-screen @B_android#content#Intent_E@ specified. In your application code, you should create a @B_android#app#NotificationChannel_E@ for incoming call notifications from your app: @B_android#app#NotificationChannel_E@.", "history": "Added in API level 26", "FullName": "public void onShowIncomingCallUi ()"}, "setVideoProvider(android.telecom.Connection.VideoProvider)": {"Returns": [], "Parameters": [["@B_android#telecom#Connection#VideoProvider_E@", "Connection.VideoProvider: The video provider."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the video connection provider.", "history": "Added in API level 23", "FullName": "public final void setVideoProvider (Connection.VideoProvider videoProvider)"}, "onCallEvent(java.lang.String, android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The call event."], ["@B_android#os#Bundle_E@", "Bundle: Extras associated with the call event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a @B_android#telecom#Call_E@ event initiated from an @B_android#telecom#InCallService_E@. The @B_android#telecom#InCallService_E@ issues a Call event via @B_android#telecom#Call#sendCallEvent_E@. Where possible, the Connection should make an attempt to handle @B_android#telecom#Call_E@ events which are part of the android.telecom.* namespace. The Connection should ignore any events it does not wish to handle. Unexpected events should be handled gracefully, as it is possible that a @B_android#telecom#InCallService_E@ has defined its own Call events which a Connection is not aware of. See also @B_android#telecom#Call#sendCallEvent_E@.", "history": "added in API level 25", "FullName": "public void onCallEvent (String event, Bundle extras)"}, "setActive()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to active (e.g., an ongoing connection where two or more parties can actively communicate).", "history": "Added in API level 23", "FullName": "public final void setActive ()"}, "onUnhold()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to exit a hold state.", "history": "Added in API level 23", "FullName": "public void onUnhold ()"}, "getVideoProvider()": {"Returns": [["@B_android#telecom#Connection#VideoProvider_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final Connection.VideoProvider getVideoProvider ()"}, "sendRemoteRttRequest()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that the remote side of the call has requested an upgrade to include an RTT session in the call.", "history": "Added in API level 28", "FullName": "public final void sendRemoteRttRequest ()"}, "getCallerDisplayName()": {"Returns": [["@B_java#lang#String_E@", "The caller display name (CNAP)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final String getCallerDisplayName ()"}, "onCallEvent(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The call event."], ["@B_android#os#Bundle_E@", "Bundle: Extras associated with the call event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a @B_android#telecom#Call_E@ event initiated from an @B_android#telecom#InCallService_E@. The @B_android#telecom#InCallService_E@ issues a Call event via @B_android#telecom#Call#sendCallEvent_E@. Where possible, the Connection should make an attempt to handle @B_android#telecom#Call_E@ events which are part of the android.telecom.* namespace. The Connection should ignore any events it does not wish to handle. Unexpected events should be handled gracefully, as it is possible that a @B_android#telecom#InCallService_E@ has defined its own Call events which a Connection is not aware of. See also @B_android#telecom#Call#sendCallEvent_E@.", "history": "Added in API level 25", "FullName": "public void onCallEvent (String event, Bundle extras)"}, "setDialing()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to dialing (e.g., dialing an outbound connection).", "history": "Added in API level 23", "FullName": "public final void setDialing ()"}, "stateToString(int)": {"Returns": [["@B_java#lang#String_E@", "A string representation of the value."]], "Parameters": [["int", "int: An integer value of a STATE_* constant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public static String stateToString (int state)"}, "sendConnectionEvent(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The connection event."], ["@B_android#os#Bundle_E@", "Bundle: Optional bundle containing extra information associated with the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an event associated with this Connection with associated event extras to the @B_android#telecom#InCallService_E@. Connection events are used to communicate point in time information from a @B_android#telecom#ConnectionService_E@ to a @B_android#telecom#InCallService_E@ implementations. An example of a custom connection event includes notifying the UI when a WIFI call has been handed over to LTE, which the InCall UI might use to inform the user that billing charges may apply. The Android Telephony framework will send the @B_android#telecom#Connection#EVENT_CALL_MERGE_FAILED_E@ connection event when a call to @B_android#telecom#Call#mergeConference_E@ has failed to complete successfully. A connection event could also be used to trigger UI in the @B_android#telecom#InCallService_E@ which prompts the user to make a choice (e.g. whether they want to incur roaming costs for making a call), which is communicated back via @B_android#telecom#Call#sendCallEvent_E@. Events are exposed to @B_android#telecom#InCallService_E@ implementations via @B_android#telecom#Call#Callback#onConnectionEvent_E@. No assumptions should be made as to how an In-Call UI or service will handle these events. The @B_android#telecom#ConnectionService_E@ must assume that the In-Call UI could even chose to ignore some events altogether. Events should be fully qualified (e.g. com.example.event.MY_EVENT) to avoid conflicts between @B_android#telecom#ConnectionService_E@ implementations. Further, custom @B_android#telecom#ConnectionService_E@ implementations shall not re-purpose events in the android.* namespace, nor shall they define new event types in this namespace. When defining a custom event type, ensure the contents of the extras @B_android#os#Bundle_E@ is clearly defined. Extra keys for this bundle should be named similar to the event type (e.g. com.example.extra.MY_EXTRA). When defining events and the associated extras, it is important to keep their behavior consistent when the associated @B_android#telecom#ConnectionService_E@ is updated. Support for deprecated events/extras should me maintained to ensure backwards compatibility with older @B_android#telecom#InCallService_E@ implementations which were built to support the older behavior.", "history": "Added in API level 25", "FullName": "public void sendConnectionEvent (String event, Bundle extras)"}, "onSilence()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to silence the ringer. The ringer may be silenced by any of the following methods: @B_android#telecom#TelecomManager#silenceRinger_E@ The user presses the volume-down button while a call is ringing. Self-managed @B_android#telecom#ConnectionService_E@ implementations should override this method in their @B_android#telecom#Connection_E@ implementation and implement logic to silence their app's ringtone. If your app set the ringtone as part of the incoming call @B_android#app#Notification_E@ (see @B_android#telecom#Connection#onShowIncomingCallUi_E@), it should re-post the notification now, except call @B_android#app#Notification#Builder#setOnlyAlertOnce_E@ with true. This will ensure the ringtone sound associated with your @B_android#app#NotificationChannel_E@ stops playing.", "history": "Added in API level 29", "FullName": "public void onSilence ()"}, "setConnectionProperties(int)": {"Returns": [], "Parameters": [["int", "int: The new connection properties."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the connection's properties as a bit mask of the PROPERTY_* constants.", "history": "Added in API level 25", "FullName": "public final void setConnectionProperties (int connectionProperties)"}, "onStopRtt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this @B_android#telecom#Connection_E@ that it should terminate any existing RTT communication channel. No response to Telecom is needed for this method.", "history": "Added in API level 28", "FullName": "public void onStopRtt ()"}, "Connection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new Connection.", "history": "Added in API level 23", "FullName": "public Connection ()"}, "setAudioModeIsVoip(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the audio mode is VOIP."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests that the framework use VOIP audio mode for this connection.", "history": "Added in API level 23", "FullName": "public final void setAudioModeIsVoip (boolean isVoip)"}, "removeExtras(java.lang.String...)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The keys of the extras to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes extras from this Connection.", "history": "Added in API level 25", "FullName": "public final void removeExtras (String... keys)"}, "createCanceledConnection()": {"Returns": [["@B_android#telecom#Connection_E@", "A Connection which indicates that the underlying connection should be canceled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a Connection which represents a canceled connection attempt. The returned Connection will have state @B_android#telecom#Connection#STATE_DISCONNECTED_E@, and cannot be moved out of that state. This connection should not be used for anything, and no other Connections should be attempted. so users of this method need not maintain a reference to its return value to destroy it.", "history": "Added in API level 23", "FullName": "public static Connection createCanceledConnection ()"}, "onStateChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new state, one of the STATE_* constants."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of an internal state change. This method is called after the state is changed.", "history": "Added in API level 23", "FullName": "public void onStateChanged (int state)"}, "handleRttUpgradeResponse(android.telecom.Connection.RttTextStream)": {"Returns": [], "Parameters": [["@B_android#telecom#Connection#RttTextStream_E@", "Connection.RttTextStream: The object that should be used to send text to or receive text from the in-call app. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this connection of a response to a previous remotely-initiated RTT upgrade request sent via @B_android#telecom#Connection#sendRemoteRttRequest_E@. Acceptance of the request is indicated by the supplied @B_android#telecom#Connection#RttTextStream_E@ being non-null, and rejection is indicated by rttTextStream being null", "history": "Added in API level 28", "FullName": "public void handleRttUpgradeResponse (Connection.RttTextStream rttTextStream)"}, "setRingbackRequested(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the ringback tone is to be played."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests that the framework play a ringback tone. This is to be invoked by implementations that do not play a ringback tone themselves in the connection's audio stream.", "history": "Added in API level 23", "FullName": "public final void setRingbackRequested (boolean ringback)"}, "createFailedConnection(android.telecom.DisconnectCause)": {"Returns": [["@B_android#telecom#Connection_E@", "A Connection which indicates failure."]], "Parameters": [["@B_android#telecom#DisconnectCause_E@", "DisconnectCause: The disconnect cause, ()."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a Connection which represents a failed connection attempt. The returned Connection will have a @B_android#telecom#DisconnectCause_E@ and as specified, and a @B_android#telecom#Connection#getState_E@ of @B_android#telecom#Connection#STATE_DISCONNECTED_E@. The returned Connection can be assumed to @B_android#telecom#Connection#destroy_E@ itself when appropriate, so users of this method need not maintain a reference to its return value to destroy it.", "history": "Added in API level 23", "FullName": "public static Connection createFailedConnection (DisconnectCause disconnectCause)"}, "onPostDialContinue(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection whether the user wishes to proceed with the post-dial DTMF codes.", "history": "Added in API level 23", "FullName": "public void onPostDialContinue (boolean proceed)"}, "sendRttInitiationFailure(int)": {"Returns": [], "Parameters": [["int", "int: One of the reason codes defined in @B_android#telecom#Connection#RttModifyStatus_E@, with the exception of @B_android#telecom#Connection#RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that a previously requested RTT session via @B_android#telecom#ConnectionRequest#isRequestingRtt_E@ or @B_android#telecom#Connection#onStartRtt_E@ has failed.", "history": "Added in API level 28", "FullName": "public final void sendRttInitiationFailure (int reason)"}, "setConferenceables(java.util.List<android.telecom.Conferenceable>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The conferenceables."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#telecom#Connection#setConferenceableConnections_E@, sets a list of connections or conferences with which this connection can be conferenced.", "history": "Added in API level 23", "FullName": "public final void setConferenceables (List<Conferenceable> conferenceables)"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tears down the Connection object.", "history": "Added in API level 23", "FullName": "public final void destroy ()"}, "setPostDialWait(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The DTMF character sequence remaining to be emitted once the @B_android#telecom#Connection#onPostDialContinue_E@ is received, including any \"wait\" characters that remaining sequence may contain."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that this Connection is in a post-dial wait state. This is done when (a) the Connection is issuing a DTMF sequence; (b) it has encountered a \"wait\" character; and (c) it wishes to inform the In-Call app that it is waiting for the end-user to send an @B_android#telecom#Connection#onPostDialContinue_E@ signal.", "history": "Added in API level 23", "FullName": "public final void setPostDialWait (String remaining)"}, "getConferenceables()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the connections or conferences with which this connection can be conferenced.", "history": "Added in API level 23", "FullName": "public final List<Conferenceable> getConferenceables ()"}, "onStartRtt(android.telecom.Connection.RttTextStream)": {"Returns": [], "Parameters": [["@B_android#telecom#Connection#RttTextStream_E@", "Connection.RttTextStream: The object that should be used to send text to or receive text from the in-call app. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this @B_android#telecom#Connection_E@ that the user has requested an RTT session. The connection service should call @B_android#telecom#Connection#sendRttInitiationSuccess_E@ or @B_android#telecom#Connection#sendRttInitiationFailure_E@ to inform Telecom of the success or failure of the request, respectively.", "history": "Added in API level 28", "FullName": "public void onStartRtt (Connection.RttTextStream rttTextStream)"}, "onReject()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection, which is in @B_android#telecom#Connection#STATE_RINGING_E@, of a request to reject. For managed @B_android#telecom#ConnectionService_E@s, this will be called when the user rejects a call via the default dialer's @B_android#telecom#InCallService_E@. Although a self-managed @B_android#telecom#ConnectionService_E@ provides its own incoming call UI, the Telecom framework may request that the call is rejected in the following circumstances: The user chooses to reject an incoming call via a Bluetooth device. A car mode @B_android#telecom#InCallService_E@ is in use which has declared @B_android#telecom#TelecomManager#METADATA_INCLUDE_SELF_MANAGED_CALLS_E@ in its manifest. Such an @B_android#telecom#InCallService_E@ will be able to see calls from self-managed @B_android#telecom#ConnectionService_E@s, and will be able to display an incoming call UI on their behalf.", "history": "Added in API level 23", "FullName": "public void onReject ()"}, "isRingbackRequested()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this connection is requesting that the system play a ringback tone on its behalf.", "history": "Added in API level 23", "FullName": "public final boolean isRingbackRequested ()"}, "setAddress(android.net.Uri,int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The new address."], ["int", "int: The presentation requirements for the address. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the @B_android#telecom#Connection#getAddress_E@ property.", "history": "Added in API level 23", "FullName": "public final void setAddress (Uri address, int presentation)"}, "sendRttInitiationSuccess()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs listeners that a previously requested RTT session via @B_android#telecom#ConnectionRequest#isRequestingRtt_E@ or @B_android#telecom#Connection#onStartRtt_E@ has succeeded.", "history": "Added in API level 28", "FullName": "public final void sendRttInitiationSuccess ()"}, "capabilitiesToString(int)": {"Returns": [["@B_java#lang#String_E@", "A human readable string representation."]], "Parameters": [["int", "int: A capability bit field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renders a set of capability bits (CAPABILITY_*) as a human readable string.", "history": "Added in API level 23", "FullName": "public static String capabilitiesToString (int capabilities)"}, "onPullExternalCall()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to pull an external call to the local device. The @B_android#telecom#InCallService_E@ issues a request to pull an external call to the local device via @B_android#telecom#Call#pullExternalCall_E@. For a Connection to be pulled, both the @B_android#telecom#Connection#CAPABILITY_CAN_PULL_CALL_E@ capability and @B_android#telecom#Connection#PROPERTY_IS_EXTERNAL_CALL_E@ property bits must be set. For more information on external calls, see @B_android#telecom#Connection#PROPERTY_IS_EXTERNAL_CALL_E@.", "history": "Added in API level 25", "FullName": "public void onPullExternalCall ()"}, "setAddress(android.net.Uri, int)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The new address."], ["int", "int: The presentation requirements for the address. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the value of the @B_android#telecom#Connection#getAddress_E@ property.", "history": "added in API level 23", "FullName": "public final void setAddress (Uri address, int presentation)"}, "getAddress()": {"Returns": [["@B_android#net#Uri_E@", "The address (e.g., phone number) to which this Connection is currently communicating."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final Uri getAddress ()"}, "onHold()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to hold.", "history": "Added in API level 23", "FullName": "public void onHold ()"}, "getAddressPresentation()": {"Returns": [["int", "The presentation requirements for the address. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final int getAddressPresentation ()"}, "setCallerDisplayName(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new display name."], ["int", "int: The presentation requirements for the handle. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the caller display name (CNAP).", "history": "Added in API level 23", "FullName": "public final void setCallerDisplayName (String callerDisplayName, int presentation)"}, "onPlayDtmfTone(char)": {"Returns": [], "Parameters": [["char", "char: A DTMF character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to play a DTMF tone.", "history": "Added in API level 23", "FullName": "public void onPlayDtmfTone (char c)"}, "onAbort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to abort.", "history": "Added in API level 23", "FullName": "public void onAbort ()"}, "putExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The extras to add. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds some extras to this Connection. Existing keys are replaced and new ones are added. No assumptions should be made as to how an In-Call UI or service will handle these extras. Keys should be fully qualified (e.g., com.example.MY_EXTRA) to avoid conflicts.", "history": "Added in API level 25", "FullName": "public final void putExtras (Bundle extras)"}, "getDisconnectCause()": {"Returns": [["@B_android#telecom#DisconnectCause_E@", "The @B_android#telecom#DisconnectCause_E@ for this connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final DisconnectCause getDisconnectCause ()"}, "setVideoState(int)": {"Returns": [], "Parameters": [["int", "int: The new video state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the video state for the connection. Valid values: @B_android#telecom#VideoProfile#STATE_AUDIO_ONLY_E@, @B_android#telecom#VideoProfile#STATE_BIDIRECTIONAL_E@, @B_android#telecom#VideoProfile#STATE_TX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_RX_ENABLED_E@.", "history": "Added in API level 23", "FullName": "public final void setVideoState (int videoState)"}, "setConnectionCapabilities(int)": {"Returns": [], "Parameters": [["int", "int: The new connection capabilities."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the connection's capabilities as a bit mask of the CAPABILITY_* constants.", "history": "Added in API level 23", "FullName": "public final void setConnectionCapabilities (int connectionCapabilities)"}, "getAudioModeIsVoip()": {"Returns": [["boolean", "True if the connection's audio mode is VOIP."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final boolean getAudioModeIsVoip ()"}, "requestBluetoothAudio(android.bluetooth.BluetoothDevice)": {"Returns": [], "Parameters": [["@B_android#bluetooth#BluetoothDevice_E@", "BluetoothDevice: The bluetooth device to connect to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request audio routing to a specific bluetooth device. Calling this method may result in the device routing audio to a different bluetooth device than the one specified if the bluetooth stack is unable to route audio to the requested device. A list of available devices can be obtained via @B_android#telecom#CallAudioState#getSupportedBluetoothDevices_E@ Used by self-managed @B_android#telecom#ConnectionService_E@s which wish to use bluetooth audio for a self-managed @B_android#telecom#Connection_E@ (see @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@.) See also @B_android#telecom#InCallService#requestBluetoothAudio_E@", "history": "Added in API level 28", "FullName": "public void requestBluetoothAudio (BluetoothDevice bluetoothDevice)"}, "setCallerDisplayName(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new display name."], ["int", "int: The presentation requirements for the handle. See @B_android#telecom#TelecomManager_E@ for valid values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the caller display name (CNAP).", "history": "added in API level 23", "FullName": "public final void setCallerDisplayName (String callerDisplayName, int presentation)"}, "getStatusHints()": {"Returns": [["@B_android#telecom#StatusHints_E@", "The status hints for this connection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public final StatusHints getStatusHints ()"}, "setExtras(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The extras associated with this Connection. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set some extras that can be associated with this Connection. New or existing keys are replaced in the Connection extras. Keys which are no longer in the new extras, but were present the last time setExtras was called are removed. Alternatively you may use the @B_android#telecom#Connection#putExtras_E@, and @B_android#telecom#Connection#removeExtras_E@ methods to modify the extras. No assumptions should be made as to how an In-Call UI or service will handle these extras. Keys should be fully qualified (e.g., com.example.MY_EXTRA) to avoid conflicts.", "history": "Added in API level 23", "FullName": "public final void setExtras (Bundle extras)"}, "removeExtras(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The keys of the extras to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes extras from this Connection.", "history": "Added in API level 25", "FullName": "public final void removeExtras (List<String> keys)"}, "onReject(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection, which is in @B_android#telecom#Connection#STATE_RINGING_E@, of a request to reject with a message.", "history": "Added in API level 24", "FullName": "public void onReject (String replyMessage)"}, "onSeparate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection of a request to separate from its parent conference.", "history": "Added in API level 23", "FullName": "public void onSeparate ()"}, "onCallAudioStateChanged(android.telecom.CallAudioState)": {"Returns": [], "Parameters": [["@B_android#telecom#CallAudioState_E@", "CallAudioState: The new connection audio state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies this Connection that the @B_android#telecom#Connection#getCallAudioState_E@ property has a new value.", "history": "Added in API level 23", "FullName": "public void onCallAudioStateChanged (CallAudioState state)"}}, "Inheritance": ["@B_android#telecom#Conferenceable_E@"], "ClassName": "android.telecom.Connection", "ClassDesc": "Represents a phone call or connection to a remote endpoint that carries voice and/or video traffic. Implementations create a custom subclass of Connection and return it to the framework as the return value of @B_android#telecom#ConnectionService#onCreateIncomingConnection_E@ or @B_android#telecom#ConnectionService#onCreateOutgoingConnection_E@. Implementations are then responsible for updating the state of the Connection, and must call @B_android#telecom#Connection#destroy_E@ to signal to the framework that the Connection is no longer used and associated resources may be recovered. Subclasses of Connection override the on* methods to provide the the @B_android#telecom#ConnectionService_E@'s implementation of calling functionality. The on* methods are called by Telecom to inform an instance of a Connection of actions specific to that Connection instance. Basic call support requires overriding the following methods: @B_android#telecom#Connection#onAnswer_E@, @B_android#telecom#Connection#onDisconnect_E@, @B_android#telecom#Connection#onReject_E@, @B_android#telecom#Connection#onAbort_E@ Where a Connection has @B_android#telecom#Connection#CAPABILITY_SUPPORT_HOLD_E@, the @B_android#telecom#Connection#onHold_E@ and @B_android#telecom#Connection#onUnhold_E@ methods should be overridden to provide hold support for the Connection. Where a Connection supports a variation of video calling (e.g. the CAPABILITY_SUPPORTS_VT_* capability bits), @B_android#telecom#Connection#onAnswer_E@ should be overridden to support answering a call as a video call. Where a Connection has @B_android#telecom#Connection#PROPERTY_IS_EXTERNAL_CALL_E@ and @B_android#telecom#Connection#CAPABILITY_CAN_PULL_CALL_E@, @B_android#telecom#Connection#onPullExternalCall_E@ should be overridden to provide support for pulling the external call. Where a Connection supports conference calling @B_android#telecom#Connection#onSeparate_E@ should be overridden. There are a number of other on* methods which a Connection can choose to implement, depending on whether it is concerned with the associated calls from Telecom. If, for example, call events from a @B_android#telecom#InCallService_E@ are handled, @B_android#telecom#Connection#onCallEvent_E@ should be overridden. Another example is @B_android#telecom#Connection#onExtrasChanged_E@, which should be overridden if the Connection wishes to make use of extra information provided via the @B_android#telecom#Call#putExtras_E@ and @B_android#telecom#Call#removeExtras_E@ methods."}