{"Functions": {"remove()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this queue is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue. This method differs from @B_java#util#Queue#poll_E@ only in that it throws an exception if this queue is empty.", "history": "Added in API level 1", "FullName": "public abstract E remove ()"}, "poll()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public abstract E poll ()"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this queue does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available.", "history": "Added in API level 1", "FullName": "public abstract boolean add (E e)"}, "peek()": {"Returns": [["E", "the head of this queue, or null if this queue is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.", "history": "Added in API level 1", "FullName": "public abstract E peek ()"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this queue, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this queue does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. When using a capacity-restricted queue, this method is generally preferable to @B_java#util#Queue#add_E@, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 1", "FullName": "public abstract boolean offer (E e)"}, "element()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this queue is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of this queue. This method differs from @B_java#util#Queue#peek_E@ only in that it throws an exception if this queue is empty.", "history": "Added in API level 1", "FullName": "public abstract E element ()"}}, "Inheritance": [], "ClassName": "java.util.Queue<E>", "ClassDesc": "A collection designed for holding elements prior to processing. Besides basic @B_java#util#Collection_E@ operations, queues provide additional insertion, extraction, and inspection operations. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either null or false, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted Queue implementations; in most implementations, insert operations cannot fail. Queues typically, but do not necessarily, order elements in a FIFO (first-in-first-out) manner. Among the exceptions are priority queues, which order elements according to a supplied comparator, or the elements' natural ordering, and LIFO queues (or stacks) which order the elements LIFO (last-in-first-out). Whatever the ordering used, the head of the queue is that element which would be removed by a call to @B_java#util#Queue#remove_E@ or @B_java#util#Queue#poll_E@. In a FIFO queue, all new elements are inserted at the tail of the queue. Other kinds of queues may use different placement rules. Every Queue implementation must specify its ordering properties. The @B_java#util#Queue#offer_E@ method inserts an element if possible, otherwise returning false. This differs from the @B_java#util#Collection#add_E@ method, which can fail to add an element only by throwing an unchecked exception. The offer method is designed for use when failure is a normal, rather than exceptional occurrence, for example, in fixed-capacity (or \"bounded\") queues. The @B_java#util#Queue#remove_E@ and @B_java#util#Queue#poll_E@ methods remove and return the head of the queue. Exactly which element is removed from the queue is a function of the queue's ordering policy, which differs from implementation to implementation. The remove() and poll() methods differ only in their behavior when the queue is empty: the remove() method throws an exception, while the poll() method returns null. The @B_java#util#Queue#element_E@ and @B_java#util#Queue#peek_E@ methods return, but do not remove, the head of the queue. The Queue interface does not define the @B_java#util#concurrent#BlockingQueue_E@ interface, which extends this interface. Queue implementations generally do not allow insertion of null elements, although some implementations, such as @B_java#util#LinkedList_E@, do not prohibit insertion of null. Even in the implementations that permit it, null should not be inserted into a Queue, as null is also used as a special return value by the poll method to indicate that the queue contains no elements. Queue implementations generally do not define element-based versions of methods equals and hashCode but instead inherit the identity based versions from class Object, because element-based equality is not always well-defined for queues with the same elements but different ordering properties."}