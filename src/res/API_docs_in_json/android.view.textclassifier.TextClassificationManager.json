{"Functions": {"getTextClassifier()": {"Returns": [["@B_android#view#textclassifier#TextClassifier_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#textclassifier#TextClassificationManager#setTextClassifier_E@"], "Permissions": [], "Description": "Returns the text classifier that was set via @B_android#view#textclassifier#TextClassificationManager#setTextClassifier_E@. If this is null, this method returns a default text classifier (i.e. either the system text classifier if one exists, or a local text classifier running in this process.) Note that requests to the TextClassifier may be handled in an OEM-provided process rather than in the calling app's process.", "history": "Added in API level 26", "FullName": "public TextClassifier getTextClassifier ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 26", "FullName": "protected void finalize ()"}, "createTextClassificationSession(android.view.textclassifier.TextClassificationContext)": {"Returns": [["@B_android#view#textclassifier#TextClassifier_E@", "An instance to perform classification in the given context This value will never be null."]], "Parameters": [["@B_android#view#textclassifier#TextClassificationContext_E@", "TextClassificationContext: The context in which classification would occur This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method to start a text classification session with the given context. A session is created with a context helping the classifier better understand what the user needs and consists of queries and feedback events. The queries are directly related to providing useful functionality to the user and the events are a feedback loop back to the classifier helping it learn and better serve future queries. All interactions with the returned classifier are considered part of a single session and are logically grouped. For example, when a text widget is focused all user interactions around text editing (selection, editing, etc) can be grouped together to allow the classifier get better.", "history": "Added in API level 28", "FullName": "public TextClassifier createTextClassificationSession (TextClassificationContext classificationContext)"}, "setTextClassificationSessionFactory(android.view.textclassifier.TextClassificationSessionFactory)": {"Returns": [], "Parameters": [["@B_android#view#textclassifier#TextClassificationSessionFactory_E@", "TextClassificationSessionFactory: the textClassification session factory. If this is null, the default factory will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a TextClassificationSessionFactory to be used to create session-aware TextClassifiers.", "history": "Added in API level 28", "FullName": "public void setTextClassificationSessionFactory (TextClassificationSessionFactory factory)"}, "setTextClassifier(android.view.textclassifier.TextClassifier)": {"Returns": [], "Parameters": [["@B_android#view#textclassifier#TextClassifier_E@", "TextClassifier: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text classifier. Set to null to use the system default text classifier. Set to @B_android#view#textclassifier#TextClassifier#NO_OP_E@ to disable text classifier features.", "history": "Added in API level 26", "FullName": "public void setTextClassifier (TextClassifier textClassifier)"}}, "Inheritance": [], "ClassName": "android.view.textclassifier.TextClassificationManager", "ClassDesc": "Interface to the text classification service."}