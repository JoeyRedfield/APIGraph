{"Functions": {"equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this Object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare this instance with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See equals method. The general contract for the equals and @B_java#lang#Object#hashCode_E@ methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them.", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object another)"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}}, "Inheritance": [], "ClassName": "java.security.acl.Permission", "ClassDesc": "Legacy security code; do not use."}