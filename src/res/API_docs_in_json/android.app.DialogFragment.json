{"Functions": {"getDialog()": {"Returns": [["@B_android#app#Dialog_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public Dialog getDialog ()"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Fragments's state into the given stream.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "setCancelable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the dialog is cancelable. The default is true."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the shown Dialog is cancelable. Use this instead of directly calling @B_android#app#Dialog#setCancelable_E@, because DialogFragment needs to change its behavior based on this.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setCancelable (boolean cancelable)"}, "onDismiss(android.content.DialogInterface)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface_E@", "DialogInterface: the dialog that was dismissed will be passed into the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be invoked when the dialog is dismissed.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDismiss (DialogInterface dialog)"}, "dismiss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss the fragment and its dialog. If the fragment was added to the back stack, all back stack state up to and including this entry will be popped. Otherwise, a new transaction will be committed to remove the fragment.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void dismiss ()"}, "DialogFragment()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public DialogFragment ()"}, "onDestroyView()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove dialog.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDestroyView ()"}, "onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is visible to the user. This is generally tied to @B_android#app#Activity#onStart_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStart ()"}, "getTheme()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public int getTheme ()"}, "isCancelable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current value of @B_android#app#DialogFragment#setCancelable_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean isCancelable ()"}, "show(android.app.FragmentTransaction,java.lang.String)": {"Returns": [["int", "Returns the identifier of the committed transaction, as per @B_android#app#FragmentTransaction#commit_E@."]], "Parameters": [["@B_android#app#FragmentTransaction_E@", "FragmentTransaction: An existing transaction in which to add the fragment."], ["@B_java#lang#String_E@", "String: The tag for this fragment, as per @B_android#app#FragmentTransaction#add_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Display the dialog, adding the fragment using an existing transaction and then committing the transaction.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public int show (FragmentTransaction transaction, String tag)"}, "onCancel(android.content.DialogInterface)": {"Returns": [], "Parameters": [["@B_android#content#DialogInterface_E@", "DialogInterface: the dialog that was canceled will be passed into the method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be invoked when the dialog is canceled.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCancel (DialogInterface dialog)"}, "onDetach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment is no longer attached to its activity. This is called after @B_android#app#Fragment#onDestroy_E@, except in the cases where the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@), in which case it is called after @B_android#app#Fragment#onStop_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onDetach ()"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the Fragment is no longer started. This is generally tied to @B_android#app#Activity#onStop_E@ of the containing Activity's lifecycle. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onStop ()"}, "setStyle(int,int)": {"Returns": [], "Parameters": [["int", "int: Selects a standard style: may be @B_android#app#DialogFragment#STYLE_NORMAL_E@, @B_android#app#DialogFragment#STYLE_NO_TITLE_E@, @B_android#app#DialogFragment#STYLE_NO_FRAME_E@, or @B_android#app#DialogFragment#STYLE_NO_INPUT_E@."], ["int", "int: Optional custom theme. If 0, an appropriate theme (based on the style) will be selected for you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call to customize the basic appearance and behavior of the fragment's dialog. This can be used for some common dialog behaviors, taking care of selecting flags, theme, and other options for you. The same effect can be achieve by manually setting Dialog and Window attributes yourself. Calling this after the fragment's Dialog is created will have no effect.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setStyle (int style, int theme)"}, "show(android.app.FragmentManager,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#app#FragmentManager_E@", "FragmentManager: The FragmentManager this fragment will be added to."], ["@B_java#lang#String_E@", "String: The tag for this fragment, as per @B_android#app#FragmentTransaction#add_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Display the dialog, adding the fragment to the given FragmentManager. This is a convenience for explicitly creating a transaction, adding the fragment to it with the given tag, and committing it. This does not add the transaction to the back stack. When the fragment is dismissed, a new transaction will be executed to remove it from the activity.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void show (FragmentManager manager, String tag)"}, "dismissAllowingStateLoss()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Version of @B_android#app#DialogFragment#dismiss_E@ that uses @B_android#app#FragmentTransaction#commitAllowingStateLoss_E@. See linked documentation for further details.", "history": "Added in API level 12 Deprecated in API level 28", "FullName": "public void dismissAllowingStateLoss ()"}, "onAttach(android.app.Activity)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public void onAttach (Activity activity)"}, "onActivityCreated(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the fragment's activity has been created and this fragment's view hierarchy instantiated. It can be used to do final initialization once these pieces are in place, such as retrieving views or restoring state. It is also useful for fragments that use @B_android#app#Fragment#setRetainInstance_E@ to retain their instance, as this callback tells the fragment when it is fully associated with the new activity instance. This is called after @B_android#app#Fragment#onCreateView_E@ and before @B_android#app#Fragment#onViewStateRestored_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onActivityCreated (Bundle savedInstanceState)"}, "onSaveInstanceState(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: Bundle in which to place your saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to ask the fragment to save its current dynamic state, so it can later be reconstructed in a new instance of its process is restarted. If a new instance of the fragment later needs to be created, the data you place in the Bundle here will be available in the Bundle given to @B_android#app#Fragment#onCreate_E@, @B_android#app#Fragment#onCreateView_E@, and @B_android#app#Fragment#onActivityCreated_E@. This corresponds to @B_android#app#Activity#onSaveInstanceState_E@ and most of the discussion there applies here as well. Note however: this method may be called at any time before @B_android#app#Fragment#onDestroy_E@. There are many situations where a fragment may be mostly torn down (such as when placed on the back stack with no UI showing), but its state will not be saved until its owning activity actually needs to save its state.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onSaveInstanceState (Bundle outState)"}, "onCreateDialog(android.os.Bundle)": {"Returns": [["@B_android#app#Dialog_E@", "Return a new Dialog instance to be displayed by the Fragment."]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The last saved instance state of the Fragment, or null if this is a freshly created Fragment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override to build your own custom Dialog container. This is typically used to show an AlertDialog instead of a generic Dialog; when doing so, @B_android#app#Fragment#onCreateView_E@ does not need to be implemented since the AlertDialog takes care of its own content. This method will be called after @B_android#app#DialogFragment#onCreate_E@ and before @B_android#app#Fragment#onCreateView_E@. The default implementation simply instantiates and returns a @B_android#app#Dialog_E@ class. Note: DialogFragment own the @B_android#app#Dialog#setOnCancelListener_E@ and @B_android#app#Dialog#setOnDismissListener_E@ callbacks. You must not set them yourself. To find out about these events, override @B_android#app#DialogFragment#onCancel_E@ and @B_android#app#DialogFragment#onDismiss_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public Dialog onCreateDialog (Bundle savedInstanceState)"}, "getShowsDialog()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current value of @B_android#app#DialogFragment#setShowsDialog_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public boolean getShowsDialog ()"}, "onAttach(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a fragment is first attached to its context. @B_android#app#Fragment#onCreate_E@ will be called after this. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 23 Deprecated in API level 28", "FullName": "public void onAttach (Context context)"}, "setShowsDialog(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the fragment will be displayed in a Dialog. If false, no Dialog will be created and the fragment's view hierarchly left undisturbed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether this fragment should be shown in a dialog. If not set, no Dialog will be created in @B_android#app#DialogFragment#onActivityCreated_E@, and the fragment's view hierarchy will thus not be added to it. This allows you to instead use it as a normal fragment (embedded inside of its activity). This is normally set for you based on whether the fragment is associated with a container view ID passed to @B_android#app#FragmentTransaction#add_E@. If the fragment was added with a container, setShowsDialog will be initialized to false; otherwise, it will be true.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setShowsDialog (boolean showsDialog)"}, "setStyle(int, int)": {"Returns": [], "Parameters": [["int", "int: Selects a standard style: may be @B_android#app#DialogFragment#STYLE_NORMAL_E@, @B_android#app#DialogFragment#STYLE_NO_TITLE_E@, @B_android#app#DialogFragment#STYLE_NO_FRAME_E@, or @B_android#app#DialogFragment#STYLE_NO_INPUT_E@."], ["int", "int: Optional custom theme. If 0, an appropriate theme (based on the style) will be selected for you."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call to customize the basic appearance and behavior of the fragment's dialog. This can be used for some common dialog behaviors, taking care of selecting flags, theme, and other options for you. The same effect can be achieve by manually setting Dialog and Window attributes yourself. Calling this after the fragment's Dialog is created will have no effect.", "history": "added in API level 11", "FullName": "public void setStyle (int style, int theme)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If the fragment is being re-created from a previous saved state, this is the state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to do initial creation of a fragment. This is called after @B_android#app#Fragment#onAttach_E@ and before @B_android#app#Fragment#onCreateView_E@, but is not called if the fragment instance is retained across Activity re-creation (see @B_android#app#Fragment#setRetainInstance_E@). Note that this can be called while the fragment's activity is still in the process of being created. As such, you can not rely on things like the activity's content view hierarchy being initialized at this point. If you want to do work once the activity itself is created, see @B_android#app#Fragment#onActivityCreated_E@. If your app's targetSdkVersion is @B_android#os#Build#VERSION_CODES#M_E@ or lower, child fragments being restored from the savedInstanceState are restored after onCreate returns. When targeting @B_android#os#Build#VERSION_CODES#N_E@ or above and running on an N or newer platform version they are restored by Fragment.onCreate. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCreate (Bundle savedInstanceState)"}}, "Inheritance": ["@B_android#app#Fragment_E@"], "ClassName": "android.app.DialogFragment", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#DialogFragment_E@ for consistent behavior across all devices and access to A fragment that displays a dialog window, floating on top of its activity's window. This fragment contains a Dialog object, which it displays as appropriate based on the fragment's state. Control of the dialog (deciding when to show, hide, dismiss it) should be done through the API here, not with direct calls on the dialog. Implementations should override this class and implement @B_android#app#Fragment#onCreateView_E@ to supply the content of the dialog. Alternatively, they can override @B_android#app#DialogFragment#onCreateDialog_E@ to create an entirely custom dialog, such as an AlertDialog, with its own content. Topics covered here: DialogFragment does various things to keep the fragment's lifecycle driving it, instead of the Dialog. Note that dialogs are generally autonomous entities -- they are their own window, receiving their own input events, and often deciding on their own when to disappear (by receiving a back key event or the user clicking on a button). DialogFragment needs to ensure that what is happening with the Fragment and Dialog states remains consistent. To do this, it watches for dismiss events from the dialog and takes care of removing its own state when they happen. This means you should use @B_android#app#DialogFragment#show_E@ or @B_android#app#DialogFragment#show_E@ to add an instance of DialogFragment to your UI, as these keep track of how DialogFragment should remove itself when the dialog is dismissed. The simplest use of DialogFragment is as a floating container for the fragment's view hierarchy. A simple implementation may look like this: An example showDialog() method on the Activity could be: This removes any currently shown dialog, creates a new DialogFragment with an argument, and shows it as a new state on the back stack. When the transaction is popped, the current DialogFragment and its Dialog will be destroyed, and the previous one (if any) re-shown. Note that in this case DialogFragment will take care of popping the transaction of the Dialog is dismissed separately from it. Instead of (or in addition to) implementing @B_android#app#Fragment#onCreateView_E@ to generate the view hierarchy inside of a dialog, you may implement @B_android#app#DialogFragment#onCreateDialog_E@ to create your own custom Dialog object. This is most useful for creating an @B_android#app#AlertDialog_E@, allowing you to display standard alerts to the user that are managed by a fragment. A simple example implementation of this is: The activity creating this fragment may have the following methods to show the dialog and receive results from it: Note that in this case the fragment is not placed on the back stack, it is just added as an indefinitely running fragment. Because dialogs normally are modal, this will still operate as a back stack, since the dialog will capture user input until it is dismissed. When it is dismissed, DialogFragment will take care of removing itself from its fragment manager. A DialogFragment can still optionally be used as a normal fragment, if desired. This is useful if you have a fragment that in some cases should be shown as a dialog and others embedded in a larger UI. This behavior will normally be automatically selected for you based on how you are using the fragment, but can be customized with @B_android#app#DialogFragment#setShowsDialog_E@. For example, here is a simple dialog fragment: An instance of this fragment can be created and shown as a dialog: It can also be added as content in a view hierarchy:"}