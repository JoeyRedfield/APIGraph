{"Functions": {"setTextOn(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text for when the button is in the checked state.", "history": "Added in API level 1", "FullName": "public void setTextOn (CharSequence textOn)"}, "ToggleButton(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ToggleButton (Context context)"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void drawableStateChanged ()"}, "ToggleButton(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ToggleButton (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "ToggleButton(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ToggleButton (Context context, AttributeSet attrs, int defStyleAttr)"}, "getTextOff()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text for when the button is not in the checked state.", "history": "Added in API level 1", "FullName": "public CharSequence getTextOff ()"}, "setBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#View#setBackground_E@ instead", "history": "Added in API level 1", "FullName": "public void setBackgroundDrawable (Drawable d)"}, "getTextOn()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text for when the button is in the checked state.", "history": "Added in API level 1", "FullName": "public CharSequence getTextOn ()"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to check the button, false to uncheck it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Changes the checked state of this button.", "history": "Added in API level 1", "FullName": "public void setChecked (boolean checked)"}, "onFinishInflate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finalize inflating a view from XML. This is called as the last phase of inflation, after all child views have been added. Even if the subclass overrides onFinishInflate, they should always be sure to call the super method, so that we get called. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFinishInflate ()"}, "getDisabledAlpha()": {"Returns": [["float", "the alpha value, 0.0-1.0 Value is between 0.0 and 1.0 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alpha value of the button when it is disabled", "history": "Added in API level 29", "FullName": "public float getDisabledAlpha ()"}, "setTextOff(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text for when the button is not in the checked state.", "history": "Added in API level 1", "FullName": "public void setTextOff (CharSequence textOff)"}, "ToggleButton(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ToggleButton (Context context, AttributeSet attrs)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@", "@B_android#widget#Button_E@", "@B_android#widget#CompoundButton_E@"], "ClassName": "android.widget.ToggleButton", "ClassDesc": "Displays checked/unchecked states as a button with a \"light\" indicator and by default accompanied with the text \"ON\" or \"OFF\". See the"}