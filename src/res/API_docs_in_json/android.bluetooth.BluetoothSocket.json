{"Functions": {"getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "OutputStream"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Get the output stream associated with this socket. The output stream will be returned even if the socket is not yet connected, but operations on that stream will throw IOException until the associated socket is connected.", "history": "Added in API level 5", "FullName": "public OutputStream getOutputStream ()"}, "isConnected()": {"Returns": [["boolean", "true if connected false if not connected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the connection status of this socket, ie, whether there is an active connection with remote device.", "history": "Added in API level 14", "FullName": "public boolean isConnected ()"}, "getMaxReceivePacketSize()": {"Returns": [["int", "the maximum supported Receive packet size for the underlying transport."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the maximum supported Receive packet size for the underlying transport. Use this to optimize the reads done on the input stream, as any call to read will return a maximum of this amount of bytes - or for some transports a multiple of this value.", "history": "Added in API level 23", "FullName": "public int getMaxReceivePacketSize ()"}, "getMaxTransmitPacketSize()": {"Returns": [["int", "the maximum supported Transmit packet size for the underlying transport."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the maximum supported Transmit packet size for the underlying transport. Use this to optimize the writes done to the output socket, to avoid sending half full packets.", "history": "Added in API level 23", "FullName": "public int getMaxTransmitPacketSize ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "on error, for example connection failure"]], "SeeAlso": [], "Permissions": [], "Description": "Attempt to connect to a remote device. This method will block until a connection is made or the connection fails. If this method returns without an exception then this socket is now connected. Creating new connections to remote Bluetooth devices should not be attempted while device discovery is in progress. Device discovery is a heavyweight procedure on the Bluetooth adapter and will significantly slow a device connection. Use @B_android#bluetooth#BluetoothAdapter#cancelDiscovery_E@ to cancel an ongoing discovery. Discovery is not managed by the Activity, but is run as a system service, so an application should always call @B_android#bluetooth#BluetoothAdapter#cancelDiscovery_E@ even if it did not directly request a discovery, just to be sure. @B_android#bluetooth#BluetoothSocket#close_E@ can be used to abort this call from another thread.", "history": "Added in API level 5", "FullName": "public void connect ()"}, "getRemoteDevice()": {"Returns": [["@B_android#bluetooth#BluetoothDevice_E@", "remote device"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the remote device this socket is connecting, or connected, to.", "history": "Added in API level 5", "FullName": "public BluetoothDevice getRemoteDevice ()"}, "getConnectionType()": {"Returns": [["int", "one of @B_android#bluetooth#BluetoothSocket#TYPE_RFCOMM_E@, @B_android#bluetooth#BluetoothSocket#TYPE_SCO_E@ or @B_android#bluetooth#BluetoothSocket#TYPE_L2CAP_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the type of the underlying connection.", "history": "Added in API level 23", "FullName": "public int getConnectionType ()"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "InputStream"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Get the input stream associated with this socket. The input stream will be returned even if the socket is not yet connected, but operations on that stream will throw IOException until the associated socket is connected.", "history": "Added in API level 5", "FullName": "public InputStream getInputStream ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect. As noted in @B_java#lang#AutoCloseable#close_E@, cases where the close may fail require careful attention. It is strongly advised to relinquish the underlying resources and to internally mark the Closeable as closed, prior to throwing the IOException.", "history": "Added in API level 5", "FullName": "public void close ()"}}, "Inheritance": [], "ClassName": "android.bluetooth.BluetoothSocket", "ClassDesc": "A connected or connecting Bluetooth socket. The interface for Bluetooth Sockets is similar to that of TCP sockets: @B_java#net#Socket_E@ and @B_java#net#ServerSocket_E@. On the server side, use a @B_android#bluetooth#BluetoothServerSocket_E@ to create a listening server socket. When a connection is accepted by the @B_android#bluetooth#BluetoothServerSocket_E@, it will return a new @B_android#bluetooth#BluetoothSocket_E@ to manage the connection. On the client side, use a single @B_android#bluetooth#BluetoothSocket_E@ to both initiate an outgoing connection and to manage the connection. The most common type of Bluetooth socket is RFCOMM, which is the type supported by the Android APIs. RFCOMM is a connection-oriented, streaming transport over Bluetooth. It is also known as the Serial Port Profile (SPP). To create a @B_android#bluetooth#BluetoothSocket_E@ for connecting to a known device, use @B_android#bluetooth#BluetoothDevice#createRfcommSocketToServiceRecord_E@. Then call @B_android#bluetooth#BluetoothSocket#connect_E@ to attempt a connection to the remote device. This call will block until a connection is established or the connection fails. To create a @B_android#bluetooth#BluetoothSocket_E@ as a server (or \"host\"), see the @B_android#bluetooth#BluetoothServerSocket_E@ documentation. Once the socket is connected, whether initiated as a client or accepted as a server, open the IO streams by calling @B_android#bluetooth#BluetoothSocket#getInputStream_E@ and @B_android#bluetooth#BluetoothSocket#getOutputStream_E@ in order to retrieve @B_java#io#InputStream_E@ and @B_java#io#OutputStream_E@ objects, respectively, which are automatically connected to the socket. @B_android#bluetooth#BluetoothSocket_E@ is thread safe. In particular, @B_android#bluetooth#BluetoothSocket#close_E@ will always immediately abort ongoing operations and close the socket. @B_android#Manifest#permission#BLUETOOTH_E@ permission."}