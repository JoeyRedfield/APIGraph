{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this lock, as well as its lock state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this lock, as well as its lock state. The state, in brackets includes either the String \"Unlocked\" or the String \"Locked by\" followed by the", "history": "Added in API level 1", "FullName": "public String toString ()"}, "newCondition()": {"Returns": [["@B_java#util#concurrent#locks#Condition_E@", "the Condition object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#concurrent#locks#Condition_E@ instance for use with this @B_java#util#concurrent#locks#Lock_E@ instance. The returned @B_java#util#concurrent#locks#Condition_E@ instance supports the same usages as do the @B_java#lang#Object_E@ monitor methods (@B_java#lang#Object#wait_E@, @B_java#lang#Object#notify_E@, and @B_java#lang#Object#notifyAll_E@) when used with the built-in monitor lock. If this write lock is not held when any @B_java#util#concurrent#locks#Condition_E@ method is called then an @B_java#lang#IllegalMonitorStateException_E@ is thrown. (Read locks are held independently of write locks, so are not checked or affected. However it is essentially always an error to invoke a condition waiting method when the current thread has also acquired read locks, since other threads that could unblock it will not be able to acquire the write lock.) When the condition If a thread is @B_java#lang#InterruptedException_E@ will be thrown, and the thread's interrupted status will be cleared. Waiting threads are signalled in FIFO order. The ordering of lock reacquisition for threads returning from waiting methods is the same as for threads initially acquiring the lock, which is in the default case not specified, but for fair locks favors those threads that have been waiting the longest.", "history": "Added in API level 1", "FullName": "public Condition newCondition ()"}, "tryLock()": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the write lock only if it is not held by another thread at the time of invocation. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value true, setting the write lock hold count to one. Even when this lock has been set to use a fair ordering policy, a call to tryLock() will immediately acquire the lock if it is available, whether or not other threads are currently waiting for the write lock. This \"barging\" behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use @B_java#util#concurrent#locks#ReentrantReadWriteLock#WriteLock#tryLock_E@ which is almost equivalent (it also detects interruption). If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then this method will return immediately with the value false.", "history": "Added in API level 1", "FullName": "public boolean tryLock ()"}, "unlock()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the current thread does not hold this lock"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to release this lock. If the current thread is the holder of this lock then the hold count is decremented. If the hold count is now zero then the lock is released. If the current thread is not the holder of this lock then @B_java#lang#IllegalMonitorStateException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public void unlock ()"}, "lockInterruptibly()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the write lock unless the current thread is Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. If the current thread already holds this lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The write lock is acquired by the current thread; or Some other thread If the write lock is acquired by the current thread then the lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.", "history": "Added in API level 1", "FullName": "public void lockInterruptibly ()"}, "lock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the write lock. Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately, setting the write lock hold count to one. If the current thread already holds the write lock then the hold count is incremented by one and the method returns immediately. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the write lock has been acquired, at which time the write lock hold count is set to one.", "history": "Added in API level 1", "FullName": "public void lock ()"}, "isHeldByCurrentThread()": {"Returns": [["boolean", "true if the current thread holds this lock and false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this write lock is held by the current thread. Identical in effect to @B_java#util#concurrent#locks#ReentrantReadWriteLock#isWriteLockedByCurrentThread_E@.", "history": "Added in API level 9", "FullName": "public boolean isHeldByCurrentThread ()"}, "ReentrantReadWriteLock.WriteLock(java.util.concurrent.locks.ReentrantReadWriteLock)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#locks#ReentrantReadWriteLock_E@", "ReentrantReadWriteLock: the outer lock object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the lock is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructor for use by subclasses.", "history": "Added in API level 1", "FullName": "protected ReentrantReadWriteLock.WriteLock (ReentrantReadWriteLock lock)"}, "tryLock(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and false if the waiting time elapsed before the lock could be acquired."]], "Parameters": [["long", "long: the time to wait for the write lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value true, setting the write lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the write lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantReadWriteLock#WriteLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The write lock is acquired by the current thread; or Some other thread The specified waiting time elapses If the write lock is acquired then the value true is returned and the write lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "Added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}, "tryLock(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the lock was free and was acquired by the current thread, or the write lock was already held by the current thread; and false if the waiting time elapsed before the lock could be acquired."]], "Parameters": [["long", "long: the time to wait for the write lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the write lock if it is not held by another thread within the given waiting time and the current thread has not been Acquires the write lock if neither the read nor write lock are held by another thread and returns immediately with the value true, setting the write lock hold count to one. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the write lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantReadWriteLock#WriteLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the current thread already holds this lock then the hold count is incremented by one and the method returns true. If the lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The write lock is acquired by the current thread; or Some other thread The specified waiting time elapses If the write lock is acquired then the value true is returned and the write lock hold count is set to one. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}, "getHoldCount()": {"Returns": [["int", "the number of holds on this lock by the current thread, or zero if this lock is not held by the current thread"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the number of holds on this write lock by the current thread. A thread has a hold on a lock for each lock action that is not matched by an unlock action. Identical in effect to @B_java#util#concurrent#locks#ReentrantReadWriteLock#getWriteHoldCount_E@.", "history": "Added in API level 9", "FullName": "public int getHoldCount ()"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock", "ClassDesc": "The lock returned by method @B_java#util#concurrent#locks#ReentrantReadWriteLock#writeLock_E@."}