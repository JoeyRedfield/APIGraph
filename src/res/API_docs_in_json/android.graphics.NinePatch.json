{"Functions": {"getTransparentRegion(android.graphics.Rect)": {"Returns": [["@B_android#graphics#Region_E@", "null if the NinePatch has no transparent region to report, else a @B_android#graphics#Region_E@ holding the parts of the specified bounds that are transparent."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The location and size of the NinePatch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#graphics#Region_E@ representing the parts of the NinePatch that are completely transparent.", "history": "Added in API level 1", "FullName": "public final Region getTransparentRegion (Rect bounds)"}, "hasAlpha()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this NinePatch contains transparent or translucent pixels. This is equivalent to calling getBitmap().hasAlpha() on this NinePatch.", "history": "Added in API level 1", "FullName": "public final boolean hasAlpha ()"}, "NinePatch(android.graphics.Bitmap, byte[])": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap describing the patches."], ["byte[]", "byte: The 9-patch data chunk describing how the underlying bitmap is split apart and drawn."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable projection from a bitmap to nine patches.", "history": "added in API level 19", "FullName": "public NinePatch (Bitmap bitmap, byte[] chunk)"}, "draw(android.graphics.Canvas,android.graphics.RectF)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: A container for the current matrix and clip used to draw the NinePatch."], ["@B_android#graphics#RectF_E@", "RectF: Where to draw the NinePatch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws the NinePatch. This method will use the paint returned by @B_android#graphics#NinePatch#getPaint_E@.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas, RectF location)"}, "draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: A container for the current matrix and clip used to draw the NinePatch."], ["@B_android#graphics#Rect_E@", "Rect: Where to draw the NinePatch."], ["@B_android#graphics#Paint_E@", "Paint: The Paint to draw through."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws the NinePatch. This method will ignore the paint returned by @B_android#graphics#NinePatch#getPaint_E@ and use the specified paint instead.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas, Rect location, Paint paint)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "NinePatch(android.graphics.Bitmap,byte[])": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap describing the patches."], ["byte[]", "byte: The 9-patch data chunk describing how the underlying bitmap is split apart and drawn."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable projection from a bitmap to nine patches.", "history": "Added in API level 19", "FullName": "public NinePatch (Bitmap bitmap, byte[] chunk)"}, "getBitmap()": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bitmap used to draw this NinePatch.", "history": "Added in API level 19", "FullName": "public Bitmap getBitmap ()"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the intrinsic height, in pixels, of this NinePatch. This is equivalent to querying the height of the underlying bitmap returned by @B_android#graphics#NinePatch#getBitmap_E@.", "history": "Added in API level 1", "FullName": "public int getHeight ()"}, "NinePatch(android.graphics.Bitmap,byte[],java.lang.String)": {"Returns": [], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap describing the patches."], ["byte[]", "byte: The 9-patch data chunk describing how the underlying bitmap is split apart and drawn."], ["@B_java#lang#String_E@", "String: The name of the source for the bitmap. Might be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a drawable projection from a bitmap to nine patches.", "history": "Added in API level 1", "FullName": "public NinePatch (Bitmap bitmap, byte[] chunk, String srcName)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this NinePatch object if one was specified when calling the constructor.", "history": "Added in API level 19", "FullName": "public String getName ()"}, "getDensity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the underlying bitmap's density, as per @B_android#graphics#Bitmap#getDensity_E@.", "history": "Added in API level 4", "FullName": "public int getDensity ()"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the intrinsic width, in pixels, of this NinePatch. This is equivalent to querying the width of the underlying bitmap returned by @B_android#graphics#NinePatch#getBitmap_E@.", "history": "Added in API level 1", "FullName": "public int getWidth ()"}, "draw(android.graphics.Canvas,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: A container for the current matrix and clip used to draw the NinePatch."], ["@B_android#graphics#Rect_E@", "Rect: Where to draw the NinePatch."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws the NinePatch. This method will use the paint returned by @B_android#graphics#NinePatch#getPaint_E@.", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas, Rect location)"}, "getPaint()": {"Returns": [["@B_android#graphics#Paint_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#NinePatch#setPaint_E@", "@B_android#graphics#NinePatch#draw_E@"], "Permissions": [], "Description": "Returns the paint used to draw this NinePatch. The paint can be null.", "history": "Added in API level 19", "FullName": "public Paint getPaint ()"}, "setPaint(android.graphics.Paint)": {"Returns": [], "Parameters": [["@B_android#graphics#Paint_E@", "Paint: The paint that will be used to draw this NinePatch."]], "Throws": [], "SeeAlso": ["@B_android#graphics#NinePatch#getPaint_E@", "@B_android#graphics#NinePatch#draw_E@"], "Permissions": [], "Description": "Sets the paint to use when drawing the NinePatch.", "history": "Added in API level 1", "FullName": "public void setPaint (Paint p)"}, "isNinePatchChunk(byte[])": {"Returns": [["boolean", "True if the specified byte array represents a 9-patch data chunk, false otherwise."]], "Parameters": [["byte[]", "byte: A byte array representing a 9-patch data chunk."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Verifies that the specified byte array is a valid 9-patch data chunk.", "history": "Added in API level 1", "FullName": "public static boolean isNinePatchChunk (byte[] chunk)"}}, "Inheritance": [], "ClassName": "android.graphics.NinePatch", "ClassDesc": "The NinePatch class permits drawing a bitmap in nine or more sections. Essentially, it allows the creation of custom graphics that will scale the way that you define, when content added within the image exceeds the normal bounds of the graphic. For a thorough explanation of a NinePatch image, read the discussion in the The"}