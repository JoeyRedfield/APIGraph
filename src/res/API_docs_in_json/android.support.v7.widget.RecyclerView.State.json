{"Functions": {"getItemCount()": {"Returns": [["int", "The number of items currently available"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getItemCount_E@"], "Permissions": [], "Description": "Returns the total number of items that can be laid out. Note that this number is not necessarily equal to the number of items in the adapter, so you should always use this number for your position calculations and never access the adapter directly. RecyclerView listens for Adapter's notify events and calculates the effects of adapter data changes on existing Views. These calculations are used to decide which animations should be run. To support predictive animations, RecyclerView may rewrite or reorder Adapter changes to present the correct state to LayoutManager in pre-layout pass. For example, a newly added item is not included in pre-layout item count because pre-layout reflects the contents of the adapter before the item is added. Behind the scenes, RecyclerView offsets @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@ calls such that LayoutManager does not know about the new item's existence in pre-layout. The item will be available in second layout pass and will be included in the item count. Similar adjustments are made for moved and removed items as well. You can get the adapter's item count via @B_android#support#v7#widget#RecyclerView#LayoutManager#getItemCount_E@ method.", "history": "added in version 22.0.0", "FullName": "int getItemCount ()"}, "RecyclerView.State()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "RecyclerView.State ()"}, "put(int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: Id of the resource you want to add. It is suggested to use R.id.* to preserve cross functionality and avoid conflicts."], ["@B_java#lang#Object_E@", "Object: The data you want to associate with the resourceId."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping from the specified id to the specified value, replacing the previous mapping from the specified key if there was one.", "history": "added in version 22.0.0", "FullName": "void put (int resourceId, Object data)"}, "willRunSimpleAnimations()": {"Returns": [["boolean", "true if RecyclerView is calculating simple animations to be run at the end of the layout pass."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether RecyclerView will run simple animations in this layout pass or not.", "history": "added in version 22.0.0", "FullName": "boolean willRunSimpleAnimations ()"}, "getTargetScrollPosition()": {"Returns": [["int", "Adapter index of the target item or @B_android#support#v7#widget#RecyclerView#NO_POSITION_E@ if there is no target position."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If scroll is triggered to make a certain item visible, this value will return the adapter index of that item.", "history": "added in version 22.0.0", "FullName": "int getTargetScrollPosition ()"}, "hasTargetScrollPosition()": {"Returns": [["boolean", "true if scroll is being triggered to make a certain position visible"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#State#getTargetScrollPosition_E@"], "Permissions": [], "Description": "Returns if current scroll has a target position.", "history": "added in version 22.0.0", "FullName": "boolean hasTargetScrollPosition ()"}, "willRunPredictiveAnimations()": {"Returns": [["boolean", "true if RecyclerView is calculating predictive animations to be run at the end of the layout pass."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether RecyclerView will run predictive animations in this layout pass or not.", "history": "added in version 22.0.0", "FullName": "boolean willRunPredictiveAnimations ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "get(int)": {"Returns": [["T", "no returns description in source"]], "Parameters": [["int", "int: Id of the resource you want to remove. It is suggested to use R.id.* to preserve cross functionality and avoid conflicts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Object mapped from the specified id, or null if no such data exists.", "history": "added in version 22.0.0", "FullName": "T get (int resourceId)"}, "getRemainingScrollVertical()": {"Returns": [["int", "Remaining vertical scroll distance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns remaining vertical scroll distance of an ongoing scroll animation(fling/ smoothScrollTo/SmoothScroller) in pixels. Returns zero if @B_android#support#v7#widget#RecyclerView#getScrollState_E@ is other than @B_android#support#v7#widget#RecyclerView#SCROLL_STATE_SETTLING_E@.", "history": "added in version 26.0.0-beta2", "FullName": "int getRemainingScrollVertical ()"}, "didStructureChange()": {"Returns": [["boolean", "true if the structure of the data set has changed since the last call to onLayoutChildren, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "boolean didStructureChange ()"}, "getRemainingScrollHorizontal()": {"Returns": [["int", "Remaining horizontal scroll distance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns remaining horizontal scroll distance of an ongoing scroll animation(fling/ smoothScrollTo/SmoothScroller) in pixels. Returns zero if @B_android#support#v7#widget#RecyclerView#getScrollState_E@ is other than @B_android#support#v7#widget#RecyclerView#SCROLL_STATE_SETTLING_E@.", "history": "added in version 26.0.0-beta2", "FullName": "int getRemainingScrollHorizontal ()"}, "isPreLayout()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if", "history": "added in version 22.0.0", "FullName": "boolean isPreLayout ()"}, "isMeasuring()": {"Returns": [["boolean", "True if the RecyclerView is currently calculating its bounds, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the RecyclerView is currently measuring the layout. This value is true only if the LayoutManager opted into the auto measure API and RecyclerView has non-exact measurement specs. Note that if the LayoutManager supports predictive animations and it is calculating the pre-layout step, this value will be false even if the RecyclerView is in onMeasure call. This is because pre-layout means the previous state of the RecyclerView and measurements made for that state cannot change the RecyclerView's size. LayoutManager is always guaranteed to receive another call to @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ when this happens.", "history": "added in version 23.2.0", "FullName": "boolean isMeasuring ()"}, "remove(int)": {"Returns": [], "Parameters": [["int", "int: Id of the resource you want to remove. It is suggested to use R.id.* to preserve cross functionality and avoid conflicts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping from the specified id, if there was any.", "history": "added in version 22.0.0", "FullName": "void remove (int resourceId)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.widget.RecyclerView.State", "ClassDesc": "Contains useful information about the current RecyclerView state like target scroll position or view focus. State object can also keep arbitrary data, identified by resource ids. Often times, RecyclerView components will need to pass information between each other. To provide a well defined data bus between components, RecyclerView passes the same State object to component callbacks and these components can use it to exchange data. If you implement custom components, you can use State's put/get/remove methods to pass data between your components without needing to manage their lifecycles."}