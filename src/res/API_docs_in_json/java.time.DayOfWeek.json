{"Functions": {"of(int)": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week singleton, not null"]], "Parameters": [["int", "int: the day-of-week to represent, from 1 (Monday) to 7 (Sunday)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-week is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of DayOfWeek from an int value. DayOfWeek is an enum representing the 7 days of the week. This factory allows the enum to be obtained from the int value. The int value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).", "history": "Added in API level 26", "FullName": "public static DayOfWeek of (int dayOfWeek)"}, "getDisplayName(java.time.format.TextStyle,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the text value of the day-of-week, not null"]], "Parameters": [["@B_java#time#format#TextStyle_E@", "TextStyle: the length of the text required, not null"], ["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the textual representation, such as 'Mon' or 'Friday'. This returns the textual name used to identify the day-of-week, suitable for presentation to the user. The parameters control the style of the returned text and the locale. If no textual mapping is found then the @B_java#time#DayOfWeek#getValue_E@ is returned.", "history": "Added in API level 26", "FullName": "public String getDisplayName (TextStyle style, Locale locale)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this day-of-week using the specified query. This queries this day-of-week using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this day-of-week, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this day-of-week can be queried for the specified field. If false, then calling the @B_java#time#DayOfWeek#range_E@ and @B_java#time#DayOfWeek#get_E@ methods will throw an exception. If the field is @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ then this method returns true. All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This day-of-week is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ then the range of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have this day-of-week. This returns a temporal object of the same observable type as the input with the day-of-week changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ passing @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ as the field. Note that this adjusts forwards or backwards within a Monday to Sunday week. See @B_java#time#temporal#WeekFields#dayOfWeek_E@ for localized week start days. See TemporalAdjuster for other adjusters with more control, such as next(MONDAY). In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: For example, given a date that is a Wednesday, the following are output: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a DayOfWeek"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of DayOfWeek from a temporal object. This obtains a day-of-week based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of DayOfWeek. The conversion extracts the @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ field. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, DayOfWeek::from.", "history": "Added in API level 26", "FullName": "public static DayOfWeek from (TemporalAccessor temporal)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field, within the valid range of values"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this day-of-week as an int. This queries this day-of-week for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ then the value of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this day-of-week as a long. This queries this day-of-week for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ then the value of the day-of-week, from 1 to 7, will be returned. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "valueOf(java.lang.String)": {"Returns": [["@B_java#time#DayOfWeek_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static DayOfWeek valueOf (String name)"}, "values()": {"Returns": [["@B_java#time#DayOfWeek_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 26", "FullName": "public static final DayOfWeek[] values ()"}, "minus(long)": {"Returns": [["@B_java#time#DayOfWeek_E@", "the resulting day-of-week, not null"]], "Parameters": [["long", "long: the days to subtract, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the day-of-week that is the specified number of days before this one. The calculation rolls around the start of the year from Monday to Sunday. The specified period may be negative. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public DayOfWeek minus (long days)"}, "getValue()": {"Returns": [["int", "the day-of-week, from 1 (Monday) to 7 (Sunday)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-week int value. The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). See @B_java#time#temporal#WeekFields#dayOfWeek_E@ for localized week-numbering.", "history": "Added in API level 26", "FullName": "public int getValue ()"}, "plus(long)": {"Returns": [["@B_java#time#DayOfWeek_E@", "the resulting day-of-week, not null"]], "Parameters": [["long", "long: the days to add, positive or negative"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the day-of-week that is the specified number of days after this one. The calculation rolls around the end of the week from Sunday to Monday. The specified period may be negative. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public DayOfWeek plus (long days)"}}, "Inheritance": ["@B_java#lang#Enum_E@"], "ClassName": "java.time.DayOfWeek", "ClassDesc": "A day-of-week, such as 'Tuesday'. DayOfWeek is an enum representing the 7 days of the week - Monday, Tuesday, Wednesday, Thursday, Friday, Saturday and Sunday. In addition to the textual enum name, each day-of-week has an int value. The int value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday). It is recommended that applications use the enum rather than the int value to ensure code clarity. This enum provides access to the localized textual form of the day-of-week. Some locales also assign different numeric values to the days, declaring Sunday to have the value 1, however this class provides no support for this. See @B_java#time#temporal#WeekFields_E@ for localized week-numbering. This enum represents a common concept that is found in many calendar systems. As such, this enum may be used by any calendar system that has the day-of-week concept defined exactly equivalent to the ISO calendar system."}