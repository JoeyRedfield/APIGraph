{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 24", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getSystemIcon(android.content.Context,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "The pointer icon."]], "Parameters": [["@B_android#content#Context_E@", "Context: The context. This value must never be null."], ["int", "int: The pointer icon type."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if context is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a system pointer icon for the given type. If typeis not recognized, returns the default pointer icon.", "history": "Added in API level 24", "FullName": "public static PointerIcon getSystemIcon (Context context, int type)"}, "load(android.content.res.Resources, int)": {"Returns": [["@B_android#view#PointerIcon_E@", "The pointer icon."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The resources object.This value must never be null."], ["int", "int: The resource id."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if resources is null."], ["", "if the resource was not found or the drawable linked in the resource was not found."]], "SeeAlso": [], "Permissions": [], "Description": "Loads a custom pointer icon from an XML resource. The XML resource should have the following form: <?xml version=\"1.0\" encoding=\"utf-8\"?> <pointer-icon xmlns:android=\"http://schemas.android.com/apk/res/android\" android:bitmap=\"@drawable/my_pointer_bitmap\" android:hotSpotX=\"24\" android:hotSpotY=\"24\" />", "history": "added in API level 24", "FullName": "public static PointerIcon load (Resources resources, int resourceId)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object other)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 24", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getSystemIcon(android.content.Context, int)": {"Returns": [["@B_android#view#PointerIcon_E@", "The pointer icon."]], "Parameters": [["@B_android#content#Context_E@", "Context: The context.This value must never be null."], ["int", "int: The pointer icon type."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if context is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a system pointer icon for the given type. If typeis not recognized, returns the default pointer icon.", "history": "added in API level 24", "FullName": "public static PointerIcon getSystemIcon (Context context, int type)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 24", "FullName": "public int describeContents ()"}, "create(android.graphics.Bitmap, float, float)": {"Returns": [["@B_android#view#PointerIcon_E@", "A pointer icon for this bitmap."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap for the icon.This value must never be null."], ["float", "float: The X offset of the pointer icon hotspot in the bitmap. Must be within the [0, bitmap.getWidth()) range."], ["float", "float: The Y offset of the pointer icon hotspot in the bitmap. Must be within the [0, bitmap.getHeight()) range."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bitmap is null, or if the x/y hotspot parameters are invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a custom pointer icon from the given bitmap and hotspot information.", "history": "added in API level 24", "FullName": "public static PointerIcon create (Bitmap bitmap, float hotSpotX, float hotSpotY)"}, "load(android.content.res.Resources,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "The pointer icon."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: The resources object. This value must never be null."], ["int", "int: The resource id."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if resources is null."], ["@B_android#content#res#Resources#NotFoundException_E@", "if the resource was not found or the drawable linked in the resource was not found."]], "SeeAlso": [], "Permissions": [], "Description": "Loads a custom pointer icon from an XML resource. The XML resource should have the following form: <?xml version=\"1.0\" encoding=\"utf-8\"?> <pointer-icon xmlns:android=\"http://schemas.android.com/apk/res/android\" android:bitmap=\"@drawable/my_pointer_bitmap\" android:hotSpotX=\"24\" android:hotSpotY=\"24\" />", "history": "Added in API level 24", "FullName": "public static PointerIcon load (Resources resources, int resourceId)"}, "create(android.graphics.Bitmap,float,float)": {"Returns": [["@B_android#view#PointerIcon_E@", "A pointer icon for this bitmap."]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap: The bitmap for the icon. This value must never be null."], ["float", "float: The X offset of the pointer icon hotspot in the bitmap. Must be within the [0, bitmap.getWidth()) range."], ["float", "float: The Y offset of the pointer icon hotspot in the bitmap. Must be within the [0, bitmap.getHeight()) range."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bitmap is null, or if the x/y hotspot parameters are invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a custom pointer icon from the given bitmap and hotspot information.", "history": "Added in API level 24", "FullName": "public static PointerIcon create (Bitmap bitmap, float hotSpotX, float hotSpotY)"}}, "Inheritance": [], "ClassName": "android.view.PointerIcon", "ClassDesc": "Represents an icon that can be used as a mouse pointer. Pointer icons can be provided either by the system using system types, or by applications using bitmaps or application resources."}