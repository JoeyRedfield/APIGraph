{"Functions": {"query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time. This queries this date-time using the specified query strategy object. Queries are a key tool for extracting information from date-times. They exists to externalize the process of querying, permitting different approaches, as per the strategy design pattern. Examples might be a query that checks if the date is the day before February 29th in a leap year, or calculates the number of days to your next birthday. The most common query implementations are method references, such as LocalDate::from and ZoneId::from. Additional implementations are provided as static methods on @B_java#time#temporal#TemporalQuery_E@.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field, within the valid range of values"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field as an int. This queries the date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If the date-time cannot return the value, because the field is unsupported or for some other reason, an exception will be thrown.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if this date-time can be queried for the field, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if the date-time can be queried for the specified field. If false, then calling the @B_java#time#temporal#TemporalAccessor#range_E@ and @B_java#time#temporal#TemporalAccessor#get_E@ methods will throw an exception.", "history": "Added in API level 26", "FullName": "public abstract boolean isSupported (TemporalField field)"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field as a long. This queries the date-time for the value of the specified field. The returned value may be outside the valid range of values for the field. If the date-time cannot return the value, because the field is unsupported or for some other reason, an exception will be thrown.", "history": "Added in API level 26", "FullName": "public abstract long getLong (TemporalField field)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. All fields can be expressed as a long integer. This method returns an object that describes the valid range for that value. The value of this temporal object is used to enhance the accuracy of the returned range. If the date-time cannot return the range, because the field is unsupported or for some other reason, an exception will be thrown. Note that the result only describes the minimum and maximum valid values and it is important not to read too much into them. For example, there could be values within the range that are invalid for the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}}, "Inheritance": [], "ClassName": "java.time.temporal.TemporalAccessor", "ClassDesc": "Framework-level interface defining read-only access to a temporal object, such as a date, time, offset or some combination of these. This is the base interface type for date, time and offset objects. It is implemented by those classes that can provide information as Most date and time information can be represented as a number. These are modeled using TemporalField with the number held using a long to handle large values. Year, month and day-of-month are simple examples of fields, but they also include instant and offsets. See @B_java#time#temporal#ChronoField_E@ for the standard set of fields. Two pieces of date/time information cannot be represented by numbers, the @B_java#time#temporal#TemporalQuery_E@. A sub-interface, @B_java#time#temporal#Temporal_E@, extends this definition to one that also supports adjustment and manipulation on more complete temporal objects. This interface is a framework-level interface that should not be widely used in application code. Instead, applications should create and pass around instances of concrete types, such as LocalDate. There are many reasons for this, part of which is that implementations of this interface may be in calendar systems other than ISO. See @B_java#time#chrono#ChronoLocalDate_E@ for a fuller discussion of the issues."}