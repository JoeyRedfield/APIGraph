{"Functions": {"formatMessage(java.util.logging.LogRecord)": {"Returns": [["@B_java#lang#String_E@", "a localized and formatted message"]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: the log record containing the raw message"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Localize and format the message string from a log record. This method is provided as a convenience for Formatter subclasses to use when they are performing formatting. The message string is first localized to a format string using the record's ResourceBundle. (If there is no ResourceBundle, or if the message key is not found, then the key is used as the format string.) The format String uses java.text style formatting. If there are no parameters, no formatter is used. Otherwise, if the string contains \"{0\" then java.text.MessageFormat is used to format the string. Otherwise no formatting is performed.", "history": "Added in API level 1", "FullName": "public String formatMessage (LogRecord record)"}, "Formatter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new formatter.", "history": "Added in API level 1", "FullName": "protected Formatter ()"}, "format(java.util.logging.LogRecord)": {"Returns": [["@B_java#lang#String_E@", "the formatted log record"]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: the log record to be formatted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format the given log record and return the formatted string. The resulting formatted String will normally include a localized and formatted version of the LogRecord's message field. It is recommended to use the @B_java#util#logging#Formatter#formatMessage_E@ convenience method to localize and format the message field.", "history": "Added in API level 1", "FullName": "public abstract String format (LogRecord record)"}, "getTail(java.util.logging.Handler)": {"Returns": [["@B_java#lang#String_E@", "tail string"]], "Parameters": [["@B_java#util#logging#Handler_E@", "Handler: The target handler (can be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the tail string for a set of formatted records. This base class returns an empty string, but this may be overridden by subclasses.", "history": "Added in API level 1", "FullName": "public String getTail (Handler h)"}, "getHead(java.util.logging.Handler)": {"Returns": [["@B_java#lang#String_E@", "header string"]], "Parameters": [["@B_java#util#logging#Handler_E@", "Handler: The target handler (can be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the header string for a set of formatted records. This base class returns an empty string, but this may be overridden by subclasses.", "history": "Added in API level 1", "FullName": "public String getHead (Handler h)"}}, "Inheritance": [], "ClassName": "java.util.logging.Formatter", "ClassDesc": "A Formatter provides support for formatting LogRecords. Typically each logging Handler will have a Formatter associated with it. The Formatter takes a LogRecord and converts it to a string. Some formatters (such as the XMLFormatter) need to wrap head and tail strings around a set of formatted records. The getHeader and getTail methods can be used to obtain these strings."}