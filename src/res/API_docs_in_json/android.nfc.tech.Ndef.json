{"Functions": {"get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#Ndef_E@", "Ndef object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an NDEF compatible tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#Ndef_E@ for the given tag. Returns null if @B_android#nfc#tech#Ndef_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@. This indicates the tag is not NDEF formatted, or that this tag is NDEF formatted but under a vendor specification that this Android device does not implement. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public static Ndef get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 10", "FullName": "public boolean isConnected ()"}, "isWritable()": {"Returns": [["boolean", "true if the tag is writable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Determine if the tag is writable. NFC Forum tags can be in read-only or read-write states. Does not cause any RF activity and does not block. Requires @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public boolean isWritable ()"}, "getCachedNdefMessage()": {"Returns": [["@B_android#nfc#NdefMessage_E@", "NDEF Message read from the tag at discovery time, can be null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#NdefMessage_E@ that was read from the tag at discovery time. If the NDEF Message is modified by an I/O operation then it will not be updated here, this function only returns what was discovered when the tag entered the field. Note that this method may return null if the tag was in the INITIALIZED state as defined by NFC Forum, as in this state the tag is formatted to support NDEF but does not contain a message yet. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public NdefMessage getCachedNdefMessage ()"}, "canMakeReadOnly()": {"Returns": [["boolean", "true if it is possible to make this tag read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether a tag can be made read-only with @B_android#nfc#tech#Ndef#makeReadOnly_E@. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public boolean canMakeReadOnly ()"}, "getNdefMessage()": {"Returns": [["@B_android#nfc#NdefMessage_E@", "the NDEF Message, can be null"]], "Parameters": [], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"], ["@B_android#nfc#FormatException_E@", "if the NDEF Message on the tag is malformed"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Read the current @B_android#nfc#NdefMessage_E@ on this tag. This always reads the current NDEF Message stored on the tag. Note that this method may return null if the tag was in the INITIALIZED state as defined by NFC Forum, as in that state the tag is formatted to support NDEF but does not contain a message yet. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#Ndef#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public NdefMessage getNdefMessage ()"}, "writeNdefMessage(android.nfc.NdefMessage)": {"Returns": [], "Parameters": [["@B_android#nfc#NdefMessage_E@", "NdefMessage: the NDEF Message to write, must not be null"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"], ["@B_android#nfc#FormatException_E@", "if the NDEF Message to write is malformed"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Overwrite the @B_android#nfc#NdefMessage_E@ on this tag. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#Ndef#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void writeNdefMessage (NdefMessage msg)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void close ()"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 10", "FullName": "public Tag getTag ()"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "a string representing the NDEF tag type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the NDEF tag type. Returns one of @B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_1_E@, @B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_2_E@, @B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_3_E@, @B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_4_E@, @B_android#nfc#tech#Ndef#MIFARE_CLASSIC_E@ or another NDEF tag type that has not yet been formalized in this Android API. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public String getType ()"}, "makeReadOnly()": {"Returns": [["boolean", "true on success, false if it is not possible to make this tag read-only"]], "Parameters": [], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Make a tag read-only. This sets the CC field to indicate the tag is read-only, and where possible permanently sets the lock bits to prevent any further modification of the memory. This is a one-way process and cannot be reverted! This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#Ndef#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public boolean makeReadOnly ()"}, "getMaxSize()": {"Returns": [["int", "size in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the maximum NDEF message size in bytes. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getMaxSize ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void connect ()"}}, "Inheritance": [], "ClassName": "android.nfc.tech.Ndef", "ClassDesc": "Provides access to NDEF content and operations on a @B_android#nfc#Tag_E@. Acquire a @B_android#nfc#tech#Ndef_E@ object using @B_android#nfc#tech#Ndef#get_E@. NDEF is an NFC Forum data format. The data formats are implemented in @B_android#nfc#NdefMessage_E@ and @B_android#nfc#NdefRecord_E@. This class provides methods to retrieve and modify the @B_android#nfc#NdefMessage_E@ on a tag. There are currently four NFC Forum standardized tag types that can be formatted to contain NDEF data. NFC Forum Type 1 Tag (@B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_1_E@), such as the Innovision Topaz NFC Forum Type 2 Tag (@B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_2_E@), such as the NXP MIFARE Ultralight NFC Forum Type 3 Tag (@B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_3_E@), such as Sony Felica NFC Forum Type 4 Tag (@B_android#nfc#tech#Ndef#NFC_FORUM_TYPE_4_E@), such as NXP MIFARE Desfire It is mandatory for all Android devices with NFC to correctly enumerate @B_android#nfc#tech#Ndef_E@ on NFC Forum Tag Types 1-4, and implement all NDEF operations as defined in this class. Some vendors have their own well defined specifications for storing NDEF data on tags that do not fall into the above categories. Android devices with NFC should enumerate and implement @B_android#nfc#tech#Ndef_E@ under these vendor specifications where possible, but it is not mandatory. @B_android#nfc#tech#Ndef#getType_E@ returns a String describing this specification, for example @B_android#nfc#tech#Ndef#MIFARE_CLASSIC_E@ is com.nxp.ndef.mifareclassic. Android devices that support MIFARE Classic must also correctly implement @B_android#nfc#tech#Ndef_E@ on MIFARE Classic tags formatted to NDEF. For guaranteed compatibility across all Android devices with NFC, it is recommended to use NFC Forum Types 1-4 in new deployments of NFC tags with NDEF payload. Vendor NDEF formats will not work on all Android devices. @B_android#Manifest#permission#NFC_E@ permission."}