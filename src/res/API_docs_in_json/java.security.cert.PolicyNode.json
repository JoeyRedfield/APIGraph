{"Functions": {"getPolicyQualifiers()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of PolicyQualifierInfos. For the root node, this is always an empty Set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of policy qualifiers associated with the valid policy represented by this node.", "history": "Added in API level 1", "FullName": "public abstract Set<? extends PolicyQualifierInfo> getPolicyQualifiers ()"}, "getExpectedPolicies()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of expected policy String OIDs. For the root node, this method always returns a Set with one element, the special anyPolicy OID: \"2.5.29.32.0\"."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of expected policies that would satisfy this node's valid policy in the next certificate to be processed.", "history": "Added in API level 1", "FullName": "public abstract Set<String> getExpectedPolicies ()"}, "isCritical()": {"Returns": [["boolean", "true if extension marked critical, false otherwise. For the root node, false is always returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the criticality indicator of the certificate policy extension in the most recently processed certificate.", "history": "Added in API level 1", "FullName": "public abstract boolean isCritical ()"}, "getValidPolicy()": {"Returns": [["@B_java#lang#String_E@", "the String OID of the valid policy represented by this node. For the root node, this method always returns the special anyPolicy OID: \"2.5.29.32.0\"."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the valid policy represented by this node.", "history": "Added in API level 1", "FullName": "public abstract String getValidPolicy ()"}, "getChildren()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the children of this node"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the children of this node. Any attempts to modify the children of this node through the Iterator's remove method must throw an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public abstract Iterator<? extends PolicyNode> getChildren ()"}, "getParent()": {"Returns": [["@B_java#security#cert#PolicyNode_E@", "the parent of this node, or null if this is the root node"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent of this node, or null if this is the root node.", "history": "Added in API level 1", "FullName": "public abstract PolicyNode getParent ()"}, "getDepth()": {"Returns": [["int", "the depth of this node (0 for the root node, 1 for its children, and so on)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the depth of this node in the valid policy tree.", "history": "Added in API level 1", "FullName": "public abstract int getDepth ()"}}, "Inheritance": [], "ClassName": "java.security.cert.PolicyNode", "ClassDesc": "An immutable valid policy tree node as defined by the PKIX certification path validation algorithm. One of the outputs of the PKIX certification path validation algorithm is a valid policy tree, which includes the policies that were determined to be valid, how this determination was reached, and any policy qualifiers encountered. This tree is of depth Most applications will not need to examine the valid policy tree. They can achieve their policy processing goals by setting the policy-related parameters in PKIXParameters. However, the valid policy tree is available for more sophisticated applications, especially those that process policy qualifiers. @B_java#security#cert#PKIXCertPathValidatorResult#getPolicyTree_E@ returns the root node of the valid policy tree. The tree can be traversed using the @B_java#security#cert#PolicyNode#getChildren_E@ and @B_java#security#cert#PolicyNode#getParent_E@ methods. Data about a particular node can be retrieved using other methods of PolicyNode. All PolicyNode objects must be immutable and thread-safe. Multiple threads may concurrently invoke the methods defined in this class on a single PolicyNode object (or more than one) with no ill effects. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses."}