{"Functions": {"createSession(android.view.inputmethod.InputMethod.SessionCallback)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputMethod#SessionCallback_E@", "InputMethod.SessionCallback: Interface that is called with the newly created session."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#view#inputmethod#InputMethodSession_E@ that can be handed to client applications for interacting with the input method. You can later use @B_android#view#inputmethod#InputMethod#revokeSession_E@ to destroy the session so that it can no longer be used by any clients. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void createSession (InputMethod.SessionCallback callback)"}, "revokeSession(android.view.inputmethod.InputMethodSession)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputMethodSession_E@", "InputMethodSession: The @B_android#view#inputmethod#InputMethodSession_E@ previously provided through SessionCallback.sessionCreated() that is to be revoked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disable and destroy a session that was previously created with @B_android#view#inputmethod#InputMethod#createSession_E@. After this call, the given session interface is no longer active and calls on it will fail. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void revokeSession (InputMethodSession session)"}, "showSoftInput(int,android.os.ResultReceiver)": {"Returns": [], "Parameters": [["int", "int: Provides additional information about the show request. Currently may be 0 or have the bit @B_android#view#inputmethod#InputMethod#SHOW_EXPLICIT_E@ set."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: The client requesting the show may wish to be told the impact of their request, which should be supplied here. The result code should be @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that any soft input part of the input method be shown to the user. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void showSoftInput (int flags, ResultReceiver resultReceiver)"}, "bindInput(android.view.inputmethod.InputBinding)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputBinding_E@", "InputBinding: Information about the application window that is binding to the input method."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#InputBinding_E@", "@B_android#view#inputmethod#InputMethod#unbindInput_E@"], "Permissions": [], "Description": "Bind a new application environment in to the input method, so that it can later start and stop input processing. Typically this method is called when this input method is enabled in an application for the first time. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void bindInput (InputBinding binding)"}, "hideSoftInput(int, android.os.ResultReceiver)": {"Returns": [], "Parameters": [["int", "int: Provides additional information about the show request. Currently always 0."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: The client requesting the show may wish to be told the impact of their request, which should be supplied here. The result code should be @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that any soft input part of the input method be hidden from the user.This method must be called from the", "history": "added in API level 3", "FullName": "public abstract void hideSoftInput (int flags, ResultReceiver resultReceiver)"}, "unbindInput()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unbind an application environment, called when the information previously set by @B_android#view#inputmethod#InputMethod#bindInput_E@ is no longer valid for this input method. Typically this method is called when the application changes to be non-foreground. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void unbindInput ()"}, "showSoftInput(int, android.os.ResultReceiver)": {"Returns": [], "Parameters": [["int", "int: Provides additional information about the show request. Currently may be 0 or have the bit @B_android#view#inputmethod#InputMethod#SHOW_EXPLICIT_E@ set."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: The client requesting the show may wish to be told the impact of their request, which should be supplied here. The result code should be @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that any soft input part of the input method be shown to the user.This method must be called from the", "history": "added in API level 3", "FullName": "public abstract void showSoftInput (int flags, ResultReceiver resultReceiver)"}, "setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputMethodSession_E@", "InputMethodSession: The @B_android#view#inputmethod#InputMethodSession_E@ previously provided through SessionCallback.sessionCreated() that is to be changed."], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether a particular input method session is active. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void setSessionEnabled (InputMethodSession session, boolean enabled)"}, "hideSoftInput(int,android.os.ResultReceiver)": {"Returns": [], "Parameters": [["int", "int: Provides additional information about the show request. Currently always 0."], ["@B_android#os#ResultReceiver_E@", "ResultReceiver: The client requesting the show may wish to be told the impact of their request, which should be supplied here. The result code should be @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_SHOWN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_UNCHANGED_HIDDEN_E@, @B_android#view#inputmethod#InputMethodManager#RESULT_SHOWN_E@, or @B_android#view#inputmethod#InputMethodManager#RESULT_HIDDEN_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that any soft input part of the input method be hidden from the user. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void hideSoftInput (int flags, ResultReceiver resultReceiver)"}, "restartInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputConnection_E@", "InputConnection: Optional specific input connection for communicating with the text box; if null, you should use the generic bound input connection."], ["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: The attribute of the text box (typically, a EditText) that requests input."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "This method is called when the state of this input method needs to be reset. Typically, this method is called when the input focus is moved from one text box to another. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void restartInput (InputConnection inputConnection, EditorInfo attribute)"}, "attachToken(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called first thing after an input method is created, this supplies a unique token for the session it has with the system service. It is needed to identify itself with the service to validate its operations. This token The system guarantees that this method is called back between @B_android#inputmethodservice#InputMethodService#onCreate_E@ and @B_android#inputmethodservice#InputMethodService#onDestroy_E@ at most once. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void attachToken (IBinder token)"}, "startInput(android.view.inputmethod.InputConnection,android.view.inputmethod.EditorInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputConnection_E@", "InputConnection: Optional specific input connection for communicating with the text box; if null, you should use the generic bound input connection."], ["@B_android#view#inputmethod#EditorInfo_E@", "EditorInfo: Information about the text box (typically, an EditText) that requests input."]], "Throws": [], "SeeAlso": ["@B_android#view#inputmethod#EditorInfo_E@"], "Permissions": [], "Description": "This method is called when the application starts to receive text and it is ready for this input method to process received events and send result text back to the application. This method must be called from the", "history": "Added in API level 3", "FullName": "public abstract void startInput (InputConnection inputConnection, EditorInfo info)"}, "changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputMethodSubtype_E@", "InputMethodSubtype: New subtype of the notified input method"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify that the input method subtype is being changed in the same input method. This method must be called from the", "history": "Added in API level 11", "FullName": "public abstract void changeInputMethodSubtype (InputMethodSubtype subtype)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.InputMethod", "ClassDesc": "The InputMethod interface represents an input method which can generate key events and text, such as digital, email addresses, CJK characters, other language characters, and etc., while handling various input events, and send the text back to the application that requests text input. See @B_android#view#inputmethod#InputMethodManager_E@ for more general information about the architecture. Applications will not normally use this interface themselves, instead relying on the standard interaction provided by @B_android#widget#TextView_E@ and @B_android#widget#EditText_E@. Those implementing input methods should normally do so by deriving from @B_android#inputmethodservice#InputMethodService_E@ or one of its subclasses. When implementing an input method, the service component containing it must also supply a @B_android#view#inputmethod#InputMethod#SERVICE_META_DATA_E@ meta-data field, referencing an XML resource providing details about the input method. All input methods also must require that clients hold the @B_android#Manifest#permission#BIND_INPUT_METHOD_E@ in order to interact with the service; if this is not required, the system will not use that input method, because it can not trust that it is not compromised. The InputMethod interface is actually split into two parts: the interface here is the top-level interface to the input method, providing all access to it, which only the system can access (due to the BIND_INPUT_METHOD permission requirement). In addition its method @B_android#view#inputmethod#InputMethod#createSession_E@ can be called to instantate a secondary @B_android#view#inputmethod#InputMethodSession_E@ interface which is what clients use to communicate with the input method."}