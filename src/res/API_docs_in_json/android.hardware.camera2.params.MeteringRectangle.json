{"Functions": {"MeteringRectangle(android.graphics.Point,android.util.Size,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Point_E@", "Point: a non-null @B_android#graphics#Point_E@ with both x,y >= 0"], ["@B_android#util#Size_E@", "Size: a non-null @B_android#util#Size_E@ with width, height >= 0"], ["int", "int: weight >= 0"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters were negative"], ["@B_java#lang#NullPointerException_E@", "if any of the arguments were null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new metering rectangle. The point xy's data is copied; the reference is not retained.", "history": "Added in API level 21", "FullName": "public MeteringRectangle (Point xy, Size dimensions, int meteringWeight)"}, "getX()": {"Returns": [["int", "x coordinate >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the X coordinate of the left side of the rectangle.", "history": "Added in API level 21", "FullName": "public int getX ()"}, "getY()": {"Returns": [["int", "y coordinate >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Y coordinate of the upper side of the rectangle.", "history": "Added in API level 21", "FullName": "public int getY ()"}, "equals(android.hardware.camera2.params.MeteringRectangle)": {"Returns": [["boolean", "true if the metering rectangles are equal, false otherwise"]], "Parameters": [["@B_android#hardware#camera2#params#MeteringRectangle_E@", "MeteringRectangle: Another MeteringRectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare two metering rectangles to see if they are equal. Two weighted rectangles are only considered equal if each of their components (x, y, width, height, weight) is respectively equal.", "history": "Added in API level 21", "FullName": "public boolean equals (MeteringRectangle other)"}, "MeteringRectangle(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: coordinate >= 0"], ["int", "int: coordinate >= 0"], ["int", "int: width >= 0"], ["int", "int: height >= 0"], ["int", "int: weight between @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MIN_E@ and @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MAX_E@ inclusively"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters were negative"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new metering rectangle.", "history": "added in API level 21", "FullName": "public MeteringRectangle (int x, int y, int width, int height, int meteringWeight)"}, "MeteringRectangle(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: coordinate >= 0"], ["int", "int: coordinate >= 0"], ["int", "int: width >= 0"], ["int", "int: height >= 0"], ["int", "int: weight between @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MIN_E@ and @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MAX_E@ inclusively"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters were negative"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new metering rectangle.", "history": "Added in API level 21", "FullName": "public MeteringRectangle (int x, int y, int width, int height, int meteringWeight)"}, "MeteringRectangle(android.graphics.Rect,int)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: a non-null rectangle with all x,y,w,h dimensions >= 0"], ["int", "int: weight >= 0"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters were negative"], ["@B_java#lang#NullPointerException_E@", "if any of the arguments were null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new metering rectangle. The rectangle data is copied; the reference is not retained.", "history": "Added in API level 21", "FullName": "public MeteringRectangle (Rect rect, int meteringWeight)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of the metering rectangle"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the metering rectangle as a string representation \"(x:%d, y:%d, w:%d, h:%d, wt:%d)\" where each %d respectively represents the x, y, width, height, and weight points.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getMeteringWeight()": {"Returns": [["int", "weight >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the metering weight of the rectangle.", "history": "Added in API level 21", "FullName": "public int getMeteringWeight ()"}, "getUpperLeftPoint()": {"Returns": [["@B_android#graphics#Point_E@", "a new (x,y) @B_android#graphics#Point_E@ with both x,y >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to create the upper-left (X,Y) coordinate as a @B_android#graphics#Point_E@.", "history": "Added in API level 21", "FullName": "public Point getUpperLeftPoint ()"}, "MeteringRectangle(android.graphics.Rect, int)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: a non-null rectangle with all x,y,w,h dimensions >= 0"], ["int", "int: weight >= 0"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters were negative"], ["@B_java#lang#NullPointerException_E@", "if any of the arguments were null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a new metering rectangle. The rectangle data is copied; the reference is not retained.", "history": "added in API level 21", "FullName": "public MeteringRectangle (Rect rect, int meteringWeight)"}, "getHeight()": {"Returns": [["int", "height >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the height of the rectangle.", "history": "Added in API level 21", "FullName": "public int getHeight ()"}, "getSize()": {"Returns": [["@B_android#util#Size_E@", "a new @B_android#util#Size_E@ with non-negative width and height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to create the size from this metering rectangle. This strips away the X,Y,weight from the rectangle.", "history": "Added in API level 21", "FullName": "public Size getSize ()"}, "getRect()": {"Returns": [["@B_android#graphics#Rect_E@", "a new @B_android#graphics#Rect_E@ with non-negative x1, y1, x2, y2"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to create a @B_android#graphics#Rect_E@ from this metering rectangle. This strips away the weight from the rectangle.", "history": "Added in API level 21", "FullName": "public Rect getRect ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object other)"}, "getWidth()": {"Returns": [["int", "width >= 0"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the rectangle.", "history": "Added in API level 21", "FullName": "public int getWidth ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.MeteringRectangle", "ClassDesc": "An immutable class to represent a rectangle (x, y, width, height) with an additional weight component. The rectangle is defined to be inclusive of the specified coordinates. When used with a @B_android#hardware#camera2#CaptureRequest_E@, the coordinate system is based on the active pixel array, with (0,0) being the top-left pixel in the @B_android#hardware#camera2#CameraCharacteristics#SENSOR_INFO_ACTIVE_ARRAY_SIZE_E@, and (android.sensor.info.activeArraySize.width - 1, android.sensor.info.activeArraySize.height - 1) being the bottom-right pixel in the active pixel array. The weight must range from @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MIN_E@ to @B_android#hardware#camera2#params#MeteringRectangle#METERING_WEIGHT_MAX_E@ inclusively, and represents a weight for every pixel in the area. This means that a large metering area with the same weight as a smaller area will have more effect in the metering result. Metering areas can partially overlap and the camera device will add the weights in the overlap rectangle. If all rectangles have 0 weight, then no specific metering area needs to be used by the camera device. If the metering rectangle is outside the used android.scaler.cropRegion returned in capture result metadata, the camera device will ignore the sections outside the rectangle and output the used sections in the result metadata."}