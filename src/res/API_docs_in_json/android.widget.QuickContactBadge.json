{"Functions": {"assignContactFromEmail(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The email address of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on an email address. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the email.", "history": "Added in API level 5", "FullName": "public void assignContactFromEmail (String emailAddress, boolean lazyLookup)"}, "setImageToDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the contact photo to the default state.", "history": "Added in API level 11", "FullName": "public void setImageToDefault ()"}, "onClick(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that was clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view has been clicked.", "history": "Added in API level 5", "FullName": "public void onClick (View v)"}, "assignContactUri(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: Either a @B_android#provider#ContactsContract#Contacts#CONTENT_URI_E@ or @B_android#provider#ContactsContract#Contacts#CONTENT_LOOKUP_URI_E@ style URI."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign the contact uri that this QuickContactBadge should be associated with. Note that this is only used for displaying the QuickContact window and won't bind the contact's photo for you. Call @B_android#widget#ImageView#setImageDrawable_E@ to set the photo.", "history": "Added in API level 5", "FullName": "public void assignContactUri (Uri contactUri)"}, "drawableHotspotChanged(float, float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function.", "history": "added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "assignContactFromPhone(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The phone number of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on a phone number. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the phone number.", "history": "Added in API level 5", "FullName": "public void assignContactFromPhone (String phoneNumber, boolean lazyLookup)"}, "QuickContactBadge(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public QuickContactBadge (Context context, AttributeSet attrs, int defStyleAttr)"}, "setMode(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This call has no effect anymore, as there is only one QuickContact mode", "history": "Added in API level 5", "FullName": "public void setMode (int size)"}, "drawableHotspotChanged(float,float)": {"Returns": [], "Parameters": [["float", "float: hotspot x coordinate"], ["float", "float: hotspot y coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the view hotspot changes and needs to be propagated to drawables or child views managed by the view. Dispatching to child views is handled by @B_android#view#View#dispatchDrawableHotspotChanged_E@. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 21", "FullName": "public void drawableHotspotChanged (float x, float y)"}, "assignContactFromPhone(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The phone number of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on a phone number. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the phone number.", "history": "added in API level 5", "FullName": "public void assignContactFromPhone (String phoneNumber, boolean lazyLookup)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 5", "FullName": "protected void onDraw (Canvas canvas)"}, "QuickContactBadge(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public QuickContactBadge (Context context, AttributeSet attrs)"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 5", "FullName": "protected void drawableStateChanged ()"}, "setExcludeMimes(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a list of specific MIME-types to exclude and not display. For example, this can be used to hide the @B_android#provider#ContactsContract#Contacts#CONTENT_ITEM_TYPE_E@ profile icon.", "history": "Added in API level 5", "FullName": "public void setExcludeMimes (String[] excludeMimes)"}, "assignContactFromEmail(java.lang.String,boolean,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The email address of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."], ["@B_android#os#Bundle_E@", "Bundle: A bundle of extras to populate the contact edit page with if the contact is not found and the user chooses to add the email address to an existing contact or create a new contact. Uses the same string constants as those found in @B_android#provider#ContactsContract#Intents#Insert_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on an email address. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the email.", "history": "Added in API level 18", "FullName": "public void assignContactFromEmail (String emailAddress, boolean lazyLookup, Bundle extras)"}, "assignContactFromEmail(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The email address of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on an email address. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the email.", "history": "added in API level 5", "FullName": "public void assignContactFromEmail (String emailAddress, boolean lazyLookup)"}, "QuickContactBadge(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public QuickContactBadge (Context context)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 5", "FullName": "protected void onAttachedToWindow ()"}, "QuickContactBadge(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public QuickContactBadge (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setPrioritizedMimeType(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set which mimetype should be prioritized in the QuickContacts UI. For example, passing the value @B_android#provider#ContactsContract#CommonDataKinds#Email#CONTENT_ITEM_TYPE_E@ can cause emails to be displayed more prominently in QuickContacts.", "history": "Added in API level 23", "FullName": "public void setPrioritizedMimeType (String prioritizedMimeType)"}, "assignContactFromPhone(java.lang.String,boolean,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The phone number of the contact."], ["boolean", "boolean: If this is true, the lookup query will not be performed until this view is clicked."], ["@B_android#os#Bundle_E@", "Bundle: A bundle of extras to populate the contact edit page with if the contact is not found and the user chooses to add the phone number to an existing contact or create a new contact. Uses the same string constants as those found in @B_android#provider#ContactsContract#Intents#Insert_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a contact based on a phone number. This should only be used when the contact's URI is not available, as an extra query will have to be performed to lookup the URI based on the phone number.", "history": "Added in API level 18", "FullName": "public void assignContactFromPhone (String phoneNumber, boolean lazyLookup, Bundle extras)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setOverlay(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: Drawable to be drawn over the assigned contact photo. Must have a non-zero instrinsic width and height."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the drawable that is to be drawn on top of the assigned contact photo.", "history": "Added in API level 21", "FullName": "public void setOverlay (Drawable overlay)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#ImageView_E@"], "ClassName": "android.widget.QuickContactBadge", "ClassDesc": "Widget used to show an image with the standard QuickContact badge and on-click behavior."}