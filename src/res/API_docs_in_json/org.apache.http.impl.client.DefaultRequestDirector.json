{"Functions": {"DefaultRequestDirector(org.apache.http.protocol.HttpRequestExecutor, org.apache.http.conn.ClientConnectionManager, org.apache.http.ConnectionReuseStrategy, org.apache.http.conn.ConnectionKeepAliveStrategy, org.apache.http.conn.routing.HttpRoutePlanner, org.apache.http.protocol.HttpProcessor, org.apache.http.client.HttpRequestRetryHandler, org.apache.http.client.RedirectHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.AuthenticationHandler, org.apache.http.client.UserTokenHandler, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DefaultRequestDirector (HttpRequestExecutor requestExec, ClientConnectionManager conman, ConnectionReuseStrategy reustrat, ConnectionKeepAliveStrategy kastrat, HttpRoutePlanner rouplan, HttpProcessor httpProcessor, HttpRequestRetryHandler retryHandler, RedirectHandler redirectHandler, AuthenticationHandler targetAuthHandler, AuthenticationHandler proxyAuthHandler, UserTokenHandler userTokenHandler, HttpParams params)"}, "execute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the final response to the request. This is never an intermediate response with status code 1xx."]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for executing the request"]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Executes a request. HttpMethodDirector in HttpClient 3.", "history": "Added in API level 1", "FullName": "public HttpResponse execute (HttpHost target, HttpRequest request, HttpContext context)"}, "rewriteRequestURI(org.apache.http.impl.client.RequestWrapper, org.apache.http.conn.routing.HttpRoute)": {"Returns": [], "Parameters": [], "Throws": [["@B_org#apache#http#ProtocolException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void rewriteRequestURI (RequestWrapper request, HttpRoute route)"}, "createTunnelToTarget(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)": {"Returns": [["", "true if the tunnelled route is secure, false otherwise. The implementation here always returns false, but derived classes may override."]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route to establish"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for request execution"]], "Throws": [["@B_org#apache#http#HttpException_E@", "in case of a problem"], ["@B_java#io#IOException_E@", "in case of an IO problem"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a tunnel to the target server. The connection must be established to the (last) proxy. A CONNECT request for tunnelling through the proxy will be created and sent, the response received and checked. This method does", "history": "Added in API level 1", "FullName": "protected boolean createTunnelToTarget (HttpRoute route, HttpContext context)"}, "createConnectRequest(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the CONNECT request for tunnelling"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route to establish"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for request execution"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the CONNECT request for tunnelling. Called by @B_org#apache#http#impl#client#DefaultRequestDirector#createTunnelToTarget_E@.", "history": "Added in API level 1", "FullName": "protected HttpRequest createConnectRequest (HttpRoute route, HttpContext context)"}, "establishRoute(org.apache.http.conn.routing.HttpRoute, org.apache.http.protocol.HttpContext)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route to establish"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for the request execution"]], "Throws": [["@B_org#apache#http#HttpException_E@", "in case of a problem"], ["@B_java#io#IOException_E@", "in case of an IO problem"]], "SeeAlso": [], "Permissions": [], "Description": "Establishes the target route.", "history": "Added in API level 1", "FullName": "protected void establishRoute (HttpRoute route, HttpContext context)"}, "handleResponse(org.apache.http.impl.client.RoutedRequest, org.apache.http.HttpResponse, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the followup request and route if there is a followup, or null if the response should be returned as is"]], "Parameters": [["@B_org#apache#http#impl#client#RoutedRequest_E@", "the request and route."], ["@B_org#apache#http#HttpResponse_E@", "the response to analayze"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context used for the current request execution"]], "Throws": [["@B_org#apache#http#HttpException_E@", "in case of a problem"], ["@B_java#io#IOException_E@", "in case of an IO problem"]], "SeeAlso": [], "Permissions": [], "Description": "Analyzes a response to check need for a followup.", "history": "Added in API level 1", "FullName": "protected RoutedRequest handleResponse (RoutedRequest roureq, HttpResponse response, HttpContext context)"}, "determineRoute(org.apache.http.HttpHost, org.apache.http.HttpRequest, org.apache.http.protocol.HttpContext)": {"Returns": [["", "the route the request should take"]], "Parameters": [["@B_org#apache#http#HttpHost_E@", "the target host for the request. Implementations may accept null if they can still determine a route, for example to a default target or by inspecting the request."], ["@B_org#apache#http#HttpRequest_E@", "the request to execute"], ["@B_org#apache#http#protocol#HttpContext_E@", "the context to use for the execution, never null"]], "Throws": [["@B_org#apache#http#HttpException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Determines the route for a request. Called by @B_org#apache#http#impl#client#DefaultRequestDirector#execute_E@ to determine the route for either the original or a followup request.", "history": "Added in API level 1", "FullName": "protected HttpRoute determineRoute (HttpHost target, HttpRequest request, HttpContext context)"}, "releaseConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the connection back to the connection manager and prepares for retrieving a new connection during the next request.", "history": "Added in API level 1", "FullName": "protected void releaseConnection ()"}, "createTunnelToProxy(org.apache.http.conn.routing.HttpRoute, int, org.apache.http.protocol.HttpContext)": {"Returns": [["", "true if the partially tunnelled connection is secure, false otherwise."]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route to establish"], ["int", "the hop in the route to establish now. route.getHopTarget(hop) will return the proxy to tunnel to."], ["@B_org#apache#http#protocol#HttpContext_E@", "the context for request execution"]], "Throws": [["@B_org#apache#http#HttpException_E@", "in case of a problem"], ["@B_java#io#IOException_E@", "in case of an IO problem"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a tunnel to an intermediate proxy. This method is", "history": "Added in API level 1", "FullName": "protected boolean createTunnelToProxy (HttpRoute route, int hop, HttpContext context)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.client.DefaultRequestDirector", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Default implementation of @B_org#apache#http#client#RequestDirector_E@. This class replaces the HttpMethodDirector in HttpClient 3."}