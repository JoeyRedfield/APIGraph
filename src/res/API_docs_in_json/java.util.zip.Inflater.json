{"Functions": {"Inflater()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new decompressor.", "history": "Added in API level 1", "FullName": "public Inflater ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the decompressor when garbage is collected.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "inflate(byte[], int, int)": {"Returns": [["int", "the actual number of uncompressed bytes"]], "Parameters": [["byte[]", "byte: the buffer for the uncompressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of uncompressed bytes"]], "Throws": [["@B_java#util#zip#DataFormatException_E@", "if the compressed data format is invalid"]], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@", "@B_java#util#zip#Inflater#needsDictionary_E@"], "Permissions": [], "Description": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required.", "history": "added in API level 1", "FullName": "public int inflate (byte[] b, int off, int len)"}, "Inflater(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true then support GZIP compatible compression"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new decompressor. If the parameter 'nowrap' is true then the ZLIB header and checksum fields will not be used. This provides compatibility with the compression format used by both GZIP and PKZIP. Note: When using the 'nowrap' option it is also necessary to provide an extra \"dummy\" byte as input. This is required by the ZLIB native library in order to support certain optimizations.", "history": "Added in API level 1", "FullName": "public Inflater (boolean nowrap)"}, "needsDictionary()": {"Returns": [["boolean", "true if a preset dictionary is needed for decompression"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#setDictionary_E@"], "Permissions": [], "Description": "Returns true if a preset dictionary is needed for decompression.", "history": "Added in API level 1", "FullName": "public boolean needsDictionary ()"}, "setDictionary(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsDictionary_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.", "history": "Added in API level 1", "FullName": "public void setDictionary (byte[] b)"}, "needsInput()": {"Returns": [["boolean", "true if no data remains in the input buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if no data remains in the input buffer. This can be used to determine if #setInput should be called in order to provide more input.", "history": "Added in API level 1", "FullName": "public boolean needsInput ()"}, "getAdler()": {"Returns": [["int", "the ADLER-32 value of the uncompressed data"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ADLER-32 value of the uncompressed data.", "history": "Added in API level 1", "FullName": "public int getAdler ()"}, "inflate(byte[])": {"Returns": [["int", "the actual number of uncompressed bytes"]], "Parameters": [["byte[]", "byte: the buffer for the uncompressed data"]], "Throws": [["@B_java#util#zip#DataFormatException_E@", "if the compressed data format is invalid"]], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@", "@B_java#util#zip#Inflater#needsDictionary_E@"], "Permissions": [], "Description": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required.", "history": "Added in API level 1", "FullName": "public int inflate (byte[] b)"}, "finished()": {"Returns": [["boolean", "true if the end of the compressed data stream has been reached"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the end of the compressed data stream has been reached.", "history": "Added in API level 1", "FullName": "public boolean finished ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets inflater so that a new set of input data can be processed.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setInput(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for decompression. Should be called whenever needsInput() returns true indicating that more input data is required.", "history": "Added in API level 1", "FullName": "public void setInput (byte[] b)"}, "setInput(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"], ["int", "int: the start offset of the input data"], ["int", "int: the length of the input data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for decompression. Should be called whenever needsInput() returns true indicating that more input data is required.", "history": "added in API level 1", "FullName": "public void setInput (byte[] b, int off, int len)"}, "setDictionary(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsDictionary_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.", "history": "added in API level 1", "FullName": "public void setDictionary (byte[] b, int off, int len)"}, "getTotalIn()": {"Returns": [["int", "the total number of compressed bytes input so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of compressed bytes input so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the @B_java#util#zip#Inflater#getBytesRead_E@ method is now the preferred means of obtaining this information.", "history": "Added in API level 1", "FullName": "public int getTotalIn ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the decompressor and discards any unprocessed input. This method should be called when the decompressor is no longer being used, but will also be called automatically by the finalize() method. Once this method is called, the behavior of the Inflater object is undefined.", "history": "Added in API level 1", "FullName": "public void end ()"}, "getBytesWritten()": {"Returns": [["long", "the total (non-negative) number of uncompressed bytes output so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of uncompressed bytes output so far.", "history": "Added in API level 1", "FullName": "public long getBytesWritten ()"}, "getBytesRead()": {"Returns": [["long", "the total (non-negative) number of compressed bytes input so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of compressed bytes input so far.", "history": "Added in API level 1", "FullName": "public long getBytesRead ()"}, "setDictionary(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the dictionary data bytes"], ["int", "int: the start offset of the data"], ["int", "int: the length of the data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsDictionary_E@", "@B_java#util#zip#Inflater#getAdler_E@"], "Permissions": [], "Description": "Sets the preset dictionary to the given array of bytes. Should be called when inflate() returns 0 and needsDictionary() returns true indicating that a preset dictionary is required. The method getAdler() can be used to get the Adler-32 value of the dictionary needed.", "history": "Added in API level 1", "FullName": "public void setDictionary (byte[] b, int off, int len)"}, "setInput(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the input data bytes"], ["int", "int: the start offset of the input data"], ["int", "int: the length of the input data"]], "Throws": [], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@"], "Permissions": [], "Description": "Sets input data for decompression. Should be called whenever needsInput() returns true indicating that more input data is required.", "history": "Added in API level 1", "FullName": "public void setInput (byte[] b, int off, int len)"}, "inflate(byte[],int,int)": {"Returns": [["int", "the actual number of uncompressed bytes"]], "Parameters": [["byte[]", "byte: the buffer for the uncompressed data"], ["int", "int: the start offset of the data"], ["int", "int: the maximum number of uncompressed bytes"]], "Throws": [["@B_java#util#zip#DataFormatException_E@", "if the compressed data format is invalid"]], "SeeAlso": ["@B_java#util#zip#Inflater#needsInput_E@", "@B_java#util#zip#Inflater#needsDictionary_E@"], "Permissions": [], "Description": "Uncompresses bytes into specified buffer. Returns actual number of bytes uncompressed. A return value of 0 indicates that needsInput() or needsDictionary() should be called in order to determine if more input data or a preset dictionary is required. In the latter case, getAdler() can be used to get the Adler-32 value of the dictionary required.", "history": "Added in API level 1", "FullName": "public int inflate (byte[] b, int off, int len)"}, "getRemaining()": {"Returns": [["int", "the total number of bytes remaining in the input buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of bytes remaining in the input buffer. This can be used to find out what bytes still remain in the input buffer after decompression has finished.", "history": "Added in API level 1", "FullName": "public int getRemaining ()"}, "getTotalOut()": {"Returns": [["int", "the total number of uncompressed bytes output so far"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of uncompressed bytes output so far. Since the number of bytes may be greater than Integer.MAX_VALUE, the @B_java#util#zip#Inflater#getBytesWritten_E@ method is now the preferred means of obtaining this information.", "history": "Added in API level 1", "FullName": "public int getTotalOut ()"}}, "Inheritance": [], "ClassName": "java.util.zip.Inflater", "ClassDesc": "This class provides support for general purpose decompression using the popular ZLIB compression library. The ZLIB compression library was initially developed as part of the PNG graphics standard and is not protected by patents. It is fully described in the specifications at the The following code fragment demonstrates a trivial compression and decompression of a string using"}