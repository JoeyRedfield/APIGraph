{"Functions": {"setExplicitPolicyRequired(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if explicit policy is to be required, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the ExplicitPolicyRequired flag. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired flag is false.", "history": "Added in API level 1", "FullName": "public void setExplicitPolicyRequired (boolean val)"}, "setPolicyQualifiersRejected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the PolicyQualifiersRejected flag"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getPolicyQualifiersRejected_E@", "@B_java#security#cert#PolicyQualifierInfo_E@"], "Permissions": [], "Description": "Sets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. If the flag is false, certificates are not rejected on this basis. When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false. Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and validated. Otherwise the certification path must be rejected. If the policyQualifiersRejected flag is set to false, it is up to the application to validate all policy qualifiers in this manner in order to be PKIX compliant.", "history": "Added in API level 1", "FullName": "public void setPolicyQualifiersRejected (boolean qualifiersRejected)"}, "getPolicyQualifiersRejected()": {"Returns": [["boolean", "the current value of the PolicyQualifiersRejected flag"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setPolicyQualifiersRejected_E@"], "Permissions": [], "Description": "Gets the PolicyQualifiersRejected flag. If this flag is true, certificates that include policy qualifiers in a certificate policies extension that is marked critical are rejected. If the flag is false, certificates are not rejected on this basis. When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common (and simplest) strategy for processing policy qualifiers. Applications that want to use a more sophisticated policy must set this flag to false.", "history": "Added in API level 1", "FullName": "public boolean getPolicyQualifiersRejected ()"}, "isExplicitPolicyRequired()": {"Returns": [["boolean", "true if explicit policy is required, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if explicit policy is required. If this flag is true, an acceptable policy needs to be explicitly identified in every certificate. By default, the ExplicitPolicyRequired flag is false.", "history": "Added in API level 1", "FullName": "public boolean isExplicitPolicyRequired ()"}, "getDate()": {"Returns": [["@B_java#util#Date_E@", "the Date, or null if not set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setDate_E@"], "Permissions": [], "Description": "Returns the time for which the validity of the certification path should be determined. If null, the current time is used. Note that the Date returned is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public Date getDate ()"}, "setTargetCertConstraints(java.security.cert.CertSelector)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertSelector_E@", "CertSelector: a CertSelector specifying the constraints on the target certificate (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getTargetCertConstraints_E@"], "Permissions": [], "Description": "Sets the required constraints on the target certificate. The constraints are specified as an instance of CertSelector. If null, no constraints are defined. Note that the CertSelector specified is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setTargetCertConstraints (CertSelector selector)"}, "isRevocationEnabled()": {"Returns": [["boolean", "the current value of the RevocationEnabled flag"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks the RevocationEnabled flag. If this flag is true, the default revocation checking mechanism of the underlying PKIX service provider will be used. If this flag is false, the default revocation checking mechanism will be disabled (not used). See the @B_java#security#cert#PKIXParameters#setRevocationEnabled_E@ method for more details on setting the value of this flag.", "history": "Added in API level 1", "FullName": "public boolean isRevocationEnabled ()"}, "setPolicyMappingInhibited(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if policy mapping is to be inhibited, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the PolicyMappingInhibited flag. If this flag is true, policy mapping is inhibited. By default, policy mapping is not inhibited (the flag is false).", "history": "Added in API level 1", "FullName": "public void setPolicyMappingInhibited (boolean val)"}, "getTargetCertConstraints()": {"Returns": [["@B_java#security#cert#CertSelector_E@", "a CertSelector specifying the constraints on the target certificate (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setTargetCertConstraints_E@"], "Permissions": [], "Description": "Returns the required constraints on the target certificate. The constraints are returned as an instance of CertSelector. If null, no constraints are defined. Note that the CertSelector returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public CertSelector getTargetCertConstraints ()"}, "isPolicyMappingInhibited()": {"Returns": [["boolean", "true if policy mapping is inhibited, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if policy mapping is inhibited. If this flag is true, policy mapping is inhibited. By default, policy mapping is not inhibited (the flag is false).", "history": "Added in API level 1", "FullName": "public boolean isPolicyMappingInhibited ()"}, "getCertStores()": {"Returns": [["@B_java#util#List_E@", "an immutable List of CertStores (may be empty, but never null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setCertStores_E@"], "Permissions": [], "Description": "Returns an immutable List of CertStores that are used to find certificates and CRLs.", "history": "Added in API level 1", "FullName": "public List<CertStore> getCertStores ()"}, "getInitialPolicies()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of initial policy OIDs in String format, or an empty Set (implying any policy is acceptable). Never returns null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setInitialPolicies_E@"], "Permissions": [], "Description": "Returns an immutable Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. The default return value is an empty Set, which is interpreted as meaning that any policy would be acceptable.", "history": "Added in API level 1", "FullName": "public Set<String> getInitialPolicies ()"}, "addCertPathChecker(java.security.cert.PKIXCertPathChecker)": {"Returns": [], "Parameters": [["@B_java#security#cert#PKIXCertPathChecker_E@", "PKIXCertPathChecker: a PKIXCertPathChecker to add to the list of checks. If null, the checker is ignored (not added to list)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a PKIXCertPathChecker to the list of certification path checkers. See the @B_java#security#cert#PKIXParameters#setCertPathCheckers_E@ method for more details. Note that the PKIXCertPathChecker is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void addCertPathChecker (PKIXCertPathChecker checker)"}, "setDate(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the Date, or null for the current time"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getDate_E@"], "Permissions": [], "Description": "Sets the time for which the validity of the certification path should be determined. If null, the current time is used. Note that the Date supplied here is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setDate (Date date)"}, "isAnyPolicyInhibited()": {"Returns": [["boolean", "true if the any policy OID is inhibited, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the any policy OID should be processed if it is included in a certificate.", "history": "Added in API level 1", "FullName": "public boolean isAnyPolicyInhibited ()"}, "setRevocationEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value of the RevocationEnabled flag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the RevocationEnabled flag. If this flag is true, the default revocation checking mechanism of the underlying PKIX service provider will be used. If this flag is false, the default revocation checking mechanism will be disabled (not used). When a PKIXParameters object is created, this flag is set to true. This setting reflects the most common strategy for checking revocation, since each service provider must support revocation checking to be PKIX compliant. Sophisticated applications should set this flag to false when it is not practical to use a PKIX service provider's default revocation checking mechanism or when an alternative revocation checking mechanism is to be substituted (by also calling the @B_java#security#cert#PKIXParameters#addCertPathChecker_E@ or @B_java#security#cert#PKIXParameters#setCertPathCheckers_E@ methods).", "history": "Added in API level 1", "FullName": "public void setRevocationEnabled (boolean val)"}, "setSigProvider(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the signature provider's name (or null)"]], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getSigProvider_E@"], "Permissions": [], "Description": "Sets the signature provider's name. The specified provider will be preferred when creating @B_java#security#Signature_E@ objects. If null or not set, the first provider found supporting the algorithm will be used.", "history": "Added in API level 1", "FullName": "public void setSigProvider (String sigProvider)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a copy of this PKIXParameters object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes a copy of this PKIXParameters object. Changes to the copy will not affect the original and vice versa.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a formatted string describing the parameters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a formatted string describing the parameters.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getTrustAnchors()": {"Returns": [["@B_java#util#Set_E@", "an immutable Set of TrustAnchors (never null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setTrustAnchors_E@"], "Permissions": [], "Description": "Returns an immutable Set of the most-trusted CAs.", "history": "Added in API level 1", "FullName": "public Set<TrustAnchor> getTrustAnchors ()"}, "PKIXParameters(java.util.Set<java.security.cert.TrustAnchor>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a Set of TrustAnchors"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified Set is empty (trustAnchors.isEmpty() == true)"], ["@B_java#lang#NullPointerException_E@", "if the specified Set is null"], ["@B_java#lang#ClassCastException_E@", "if any of the elements in the Set are not of type java.security.cert.TrustAnchor"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of PKIXParameters with the specified Set of most-trusted CAs. Each element of the set is a @B_java#security#cert#TrustAnchor_E@. Note that the Set is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public PKIXParameters (Set<TrustAnchor> trustAnchors)"}, "setCertPathCheckers(java.util.List<java.security.cert.PKIXCertPathChecker>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: a List of PKIXCertPathCheckers. May be null, in which case no additional checkers will be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if any of the elements in the list are not of type java.security.cert.PKIXCertPathChecker"]], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getCertPathCheckers_E@"], "Permissions": [], "Description": "Sets a List of additional certification path checkers. If the specified List contains an object that is not a PKIXCertPathChecker, it is ignored. Each PKIXCertPathChecker specified implements additional checks on a certificate. Typically, these are checks to process and verify private extensions contained in certificates. Each PKIXCertPathChecker should be instantiated with any initialization parameters needed to execute the check. This method allows sophisticated applications to extend a PKIX CertPathValidator or CertPathBuilder. Each of the specified PKIXCertPathCheckers will be called, in turn, by a PKIX CertPathValidator or CertPathBuilder for each certificate processed or validated. Regardless of whether these additional PKIXCertPathCheckers are set, a PKIX CertPathValidator or CertPathBuilder must perform all of the required PKIX checks on each certificate. The one exception to this rule is if the RevocationEnabled flag is set to false (see the @B_java#security#cert#PKIXParameters#setRevocationEnabled_E@ method). Note that the List supplied here is copied and each PKIXCertPathChecker in the list is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setCertPathCheckers (List<PKIXCertPathChecker> checkers)"}, "addCertStore(java.security.cert.CertStore)": {"Returns": [], "Parameters": [["@B_java#security#cert#CertStore_E@", "CertStore: the CertStore to add. If null, the store is ignored (not added to list)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a CertStore to the end of the list of CertStores used in finding certificates and CRLs.", "history": "Added in API level 1", "FullName": "public void addCertStore (CertStore store)"}, "setInitialPolicies(java.util.Set<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a Set of initial policy OIDs in String format (or null)"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if any of the elements in the set are not of type String"]], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getInitialPolicies_E@"], "Permissions": [], "Description": "Sets the Set of initial policy identifiers (OID strings), indicating that any one of these policies would be acceptable to the certificate user for the purposes of certification path processing. By default, any policy is acceptable (i.e. all policies), so a user that wants to allow any policy as acceptable does not need to call this method, or can call it with an empty Set (or null). Note that the Set is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setInitialPolicies (Set<String> initialPolicies)"}, "setAnyPolicyInhibited(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the any policy OID is to be inhibited, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets state to determine if the any policy OID should be processed if it is included in a certificate. By default, the any policy OID is not inhibited (@B_java#security#cert#PKIXParameters#isAnyPolicyInhibited_E@ returns false).", "history": "Added in API level 1", "FullName": "public void setAnyPolicyInhibited (boolean val)"}, "setTrustAnchors(java.util.Set<java.security.cert.TrustAnchor>)": {"Returns": [], "Parameters": [["@B_java#util#Set_E@", "Set: a Set of TrustAnchors"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the specified Set is empty (trustAnchors.isEmpty() == true)"], ["@B_java#lang#NullPointerException_E@", "if the specified Set is null"], ["@B_java#lang#ClassCastException_E@", "if any of the elements in the set are not of type java.security.cert.TrustAnchor"]], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getTrustAnchors_E@"], "Permissions": [], "Description": "Sets the Set of most-trusted CAs. Note that the Set is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setTrustAnchors (Set<TrustAnchor> trustAnchors)"}, "getCertPathCheckers()": {"Returns": [["@B_java#util#List_E@", "an immutable List of PKIXCertPathCheckers (may be empty, but not null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setCertPathCheckers_E@"], "Permissions": [], "Description": "Returns the List of certification path checkers. The returned List is immutable, and each PKIXCertPathChecker in the List is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public List<PKIXCertPathChecker> getCertPathCheckers ()"}, "getSigProvider()": {"Returns": [["@B_java#lang#String_E@", "the signature provider's name (or null)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#PKIXParameters#setSigProvider_E@"], "Permissions": [], "Description": "Returns the signature provider's name, or null if not set.", "history": "Added in API level 1", "FullName": "public String getSigProvider ()"}, "setCertStores(java.util.List<java.security.cert.CertStore>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: a List of CertStores (or null)"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if any of the elements in the list are not of type java.security.cert.CertStore"]], "SeeAlso": ["@B_java#security#cert#PKIXParameters#getCertStores_E@"], "Permissions": [], "Description": "Sets the list of CertStores to be used in finding certificates and CRLs. May be null, in which case no CertStores will be used. The first CertStores in the list may be preferred to those that appear later. Note that the List is copied to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public void setCertStores (List<CertStore> stores)"}, "PKIXParameters(java.security.KeyStore)": {"Returns": [], "Parameters": [["@B_java#security#KeyStore_E@", "KeyStore: a KeyStore from which the set of most-trusted CAs will be populated"]], "Throws": [["@B_java#security#KeyStoreException_E@", "if the keystore has not been initialized"], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the keystore does not contain at least one trusted certificate entry"], ["@B_java#lang#NullPointerException_E@", "if the keystore is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of PKIXParameters that populates the set of most-trusted CAs from the trusted certificate entries contained in the specified KeyStore. Only keystore entries that contain trusted X509Certificates are considered; all other certificate types are ignored.", "history": "Added in API level 1", "FullName": "public PKIXParameters (KeyStore keystore)"}}, "Inheritance": [], "ClassName": "java.security.cert.PKIXParameters", "ClassDesc": "Parameters used as input for the PKIX CertPathValidator algorithm. A PKIX CertPathValidator uses these parameters to validate a CertPath according to the PKIX certification path validation algorithm. To instantiate a PKIXParameters object, an application must specify one or more @B_java#security#cert#PKIXParameters#PKIXParameters_E@, specifying a Set of TrustAnchor objects, each of which identify a most-trusted CA. Alternatively, an application can call @B_java#security#cert#PKIXParameters#PKIXParameters_E@, specifying a KeyStore instance containing trusted certificate entries, each of which will be considered as a most-trusted CA. Once a PKIXParameters object has been created, other parameters can be specified (by calling @B_java#security#cert#PKIXParameters#setInitialPolicies_E@ or @B_java#security#cert#PKIXParameters#setDate_E@, for instance) and then the PKIXParameters is passed along with the CertPath to be validated to @B_java#security#cert#CertPathValidator#validate_E@. Any parameter that is not set (or is set to null) will be set to the default value for that parameter. The default value for the date parameter is null, which indicates the current time when the path is validated. The default for the remaining parameters is the least constrained. Unless otherwise specified, the methods defined in this class are not thread-safe. Multiple threads that need to access a single object concurrently should synchronize amongst themselves and provide the necessary locking. Multiple threads each manipulating separate objects need not synchronize."}