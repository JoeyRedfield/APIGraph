{"Functions": {"reportActivityStart(android.app.Activity)": {"Returns": [], "Parameters": [["Activity", "the @B_android#app#Activity_E@ that is to be tracked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report the start of an @B_android#app#Activity_E@, so that it can be tracked by any @B_com#google#android#gms#analytics#Tracker_E@s that have enabled auto activity tracking (see @B_com#google#android#gms#analytics#Tracker#enableAutoActivityTracking_E@.) This will also start a new session if necessary. This method should be called from the @B_android#app#Activity#onStart_E@ method in each @B_android#app#Activity_E@ in your application that you'd like to track. If auto activity reports are enabled (see @B_com#google#android#gms#analytics#GoogleAnalytics#enableAutoActivityReports_E@) on a device running API level 14 or above, this method will be a noop.", "history": "", "FullName": "public void reportActivityStart (Activity activity)"}, "getAppOptOut()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the state of the application-level opt is on.", "history": "", "FullName": "public boolean getAppOptOut ()"}, "isDryRunEnabled()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether dry run mode is on.", "history": "", "FullName": "public boolean isDryRunEnabled ()"}, "dispatchLocalHits()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatches hits queued in the application store (views, events, or transactions) to Google Analytics if a network connection is available. This method only works when Google Play service is not available on the device and local dispatching is used. In general, applications should not rely on the ability to dispatch hits manually.", "history": "", "FullName": "public void dispatchLocalHits ()"}, "setAppOptOut(boolean)": {"Returns": [], "Parameters": [["boolean", "true if application-level opt out should be enforced."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets or resets the application-level opt out flag. If set, no hits will be sent to Google Analytics. The value of this flag will", "history": "", "FullName": "public void setAppOptOut (boolean optOut)"}, "reportActivityStop(android.app.Activity)": {"Returns": [], "Parameters": [["Activity", "the @B_android#app#Activity_E@ that is to be tracked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report the end of an @B_android#app#Activity_E@. Note that this method should be called from the @B_android#app#Activity#onStop_E@ method in each @B_android#app#Activity_E@ in your application that you'd like to track. For proper operation, this method must be called in all Activities where @B_com#google#android#gms#analytics#GoogleAnalytics#reportActivityStart_E@ is called. If auto activity reports are enabled (see @B_com#google#android#gms#analytics#GoogleAnalytics#enableAutoActivityReports_E@) on a device running API level 14 or above, this method will be a noop.", "history": "", "FullName": "public void reportActivityStop (Activity activity)"}, "newTracker(int)": {"Returns": [], "Parameters": [["int", "The resource id of your tracker configuration file. See @B_com#google#android#gms#analytics#Tracker_E@ for more information about what configuration elements can be included in that file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_com#google#android#gms#analytics#Tracker_E@ instance preconfigured with the values specified in configResId. Calling newTracker() multiple times with the same trackingId will create multiple Tracker objects with the same configuration. If the trackingId is empty, you can still get a tracker, but you must set the tracking id before sending any hits. This is useful if you do not know the tracking id at the time of tracker creation, or if you want to use the same tracker instance to track multiple tracking ids. Using the same instance to track multiple tracking ids is not recommended since you need to be careful about not mixing the data you are sending to multiple profiles. It can be useful if you have a lot of tracking ids and you want to avoid object creation overhead involved in instantiating one tracker per tracking id.", "history": "", "FullName": "public Tracker newTracker (int configResId)"}, "newTracker(java.lang.String)": {"Returns": [], "Parameters": [["String", "string of the form UA-xxxx-y"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_com#google#android#gms#analytics#Tracker_E@ instance with the given trackingId. If the given trackingId is not null or empty, it will be set on the tracker and it is ready to send hits. Calling newTracker() multiple times with the same trackingId will create multiple Tracker objects with the same trackingId. If the trackingId is empty, you can still get a tracker, but you must set the tracking id before sending any hits. This is useful if you do not know the tracking id at the time of tracker creation, or if you want to use the same tracker instance to track multiple tracking ids. Using the same instance to track multiple tracking ids is not recommended since you need to be careful about not mixing the data you are sending to multiple profiles. It can be useful if you have a lot of tracking ids and you want to avoid object creation overhead involved in instantiating one tracker per tracking id.", "history": "", "FullName": "public Tracker newTracker (String trackingId)"}, "setLocalDispatchPeriod(int)": {"Returns": [], "Parameters": [["int", "the new dispatch period in seconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets dispatch period for the local dispatcher. The dispatcher will check for hits to dispatch every dispatchPeriod seconds. If zero or a negative dispatch period is given, automatic dispatch will be disabled, and the application will need to dispatch events manually using @B_com#google#android#gms#analytics#GoogleAnalytics#dispatchLocalHits_E@. This method only works if local dispatching is in use. Local dispatching is only used in the absence of Google Play services on the device. In general, applications should not rely on the ability to dispatch hits manually.", "history": "", "FullName": "public void setLocalDispatchPeriod (int dispatchPeriodInSeconds)"}, "GoogleAnalytics(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected GoogleAnalytics (Context context)"}, "setDryRun(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Toggles dry run mode. In dry run mode, the normal code paths are executed locally, but hits are not sent to Google Analytics servers. This is useful for debugging calls to the Google Analytics SDK without polluting recorded data. By default, this flag is disabled.", "history": "", "FullName": "public void setDryRun (boolean dryRun)"}, "getInstance(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the instance of the @B_com#google#android#gms#analytics#GoogleAnalytics_E@, creating it when necessary. It is safe to call this method from any thread.", "history": "", "FullName": "public static GoogleAnalytics getInstance (Context context)"}, "setLogger(com.google.android.gms.analytics.Logger)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#analytics#Logger_E@", "The @B_com#google#android#gms#analytics#Logger_E@ implementation to use for logging."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current @B_com#google#android#gms#analytics#Logger_E@ implementation in use. If no @B_com#google#android#gms#analytics#Logger_E@ has been set, a default @B_com#google#android#gms#analytics#Logger_E@ is provided that logs to @B_android#util#Log_E@ with @B_com#google#android#gms#analytics#Logger#LogLevel_E@ set to @B_com#google#android#gms#analytics#Logger#LogLevel#WARNING_E@.", "history": "", "FullName": "public void setLogger (Logger logger)"}, "getLogger()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current @B_com#google#android#gms#analytics#Logger_E@ implementation in use. If no @B_com#google#android#gms#analytics#Logger_E@ has been set, a default @B_com#google#android#gms#analytics#Logger_E@ is provided that logs to @B_android#util#Log_E@ with @B_com#google#android#gms#analytics#Logger#LogLevel_E@ set to @B_com#google#android#gms#analytics#Logger#LogLevel#WARNING_E@.", "history": "", "FullName": "public Logger getLogger ()"}, "enableAutoActivityReports(android.app.Application)": {"Returns": [], "Parameters": [["Application", "The @B_android#app#Application_E@ whose activities starts and stops should be automatically reported."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "On devices running API level 14 (ICE_CREAM_SANDWICH) or above, applications can call this method in lieu of making explicit calls to @B_com#google#android#gms#analytics#GoogleAnalytics#reportActivityStart_E@ and @B_com#google#android#gms#analytics#GoogleAnalytics#reportActivityStop_E@. This method is a noop if called on a device running API level less than 14.", "history": "", "FullName": "public void enableAutoActivityReports (Application application)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.analytics.GoogleAnalytics", "ClassDesc": "The top level Google Analytics singleton that provides methods for configuring Google Analytics and creating @B_com#google#android#gms#analytics#Tracker_E@ objects. Applications can get an instance of this class by calling @B_com#google#android#gms#analytics#GoogleAnalytics#getInstance_E@. @B_com#google#android#gms#analytics#GoogleAnalytics#getInstance_E@ is thread safe and can be called from any thread. It is recommended that Google Analytics be initialized early in the application lifecycle to correctly report unhandled exceptions. Application.@B_android#app#Application#onCreate_E@ is the recommended place for configuring Google Analytics. A basic configuration of Google Analytics look like this: Applications can optionally provide a metadata reference to a global configuration XML resource file in the <application> element of their AndroidManifest.xml: ga_logLevel setting is deprecated. See @B_com#google#android#gms#analytics#Logger_E@ interface for details."}