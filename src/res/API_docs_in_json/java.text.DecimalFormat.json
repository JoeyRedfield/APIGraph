{"Functions": {"setMaximumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMaximumFractionDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 340 is used. Negative input values are replaced with 0.", "history": "Added in API level 1", "FullName": "public void setMaximumFractionDigits (int newValue)"}, "setMinimumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 309 is used. Negative input values are replaced with 0.", "history": "Added in API level 1", "FullName": "public void setMinimumIntegerDigits (int newValue)"}, "setMinimumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMinimumFractionDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 340 is used. Negative input values are replaced with 0.", "history": "Added in API level 1", "FullName": "public void setMinimumFractionDigits (int newValue)"}, "getCurrency()": {"Returns": [["@B_java#util#Currency_E@", "the currency used by this decimal format, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the currency used by this decimal format when formatting currency values. The currency is obtained by calling @B_java#text#DecimalFormatSymbols#getCurrency_E@ on this number format's symbols.", "history": "Added in API level 1", "FullName": "public Currency getCurrency ()"}, "getMultiplier()": {"Returns": [["int", "the multiplier"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setMultiplier_E@"], "Permissions": [], "Description": "Gets the multiplier for use in percent, per mille, and similar formats.", "history": "Added in API level 1", "FullName": "public int getMultiplier ()"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the value passed in as toAppendTo"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the number to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: the StringBuffer to which the formatted text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if number is null or not an instance of Number."], ["@B_java#lang#NullPointerException_E@", "if toAppendTo or pos is null"], ["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#FieldPosition_E@"], "Permissions": [], "Description": "Formats a number and appends the resulting text to the given string buffer. The number can be of any subclass of @B_java#lang#Number_E@. This implementation uses the maximum precision permitted.", "history": "Added in API level 1", "FullName": "public final StringBuffer format (Object number, StringBuffer toAppendTo, FieldPosition pos)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "isParseIntegerOnly()": {"Returns": [["boolean", "true if numbers should be parsed as integers only; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string \"1234.\" would be parsed as the integer value 1234 and parsing would stop at the \".\" character. Of course, the exact format accepted by the parse operation is locale dependant and determined by sub-classes of NumberFormat.", "history": "Added in API level 1", "FullName": "public boolean isParseIntegerOnly ()"}, "setRoundingMode(java.math.RoundingMode)": {"Returns": [], "Parameters": [["@B_java#math#RoundingMode_E@", "RoundingMode: The RoundingMode to be used"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if roundingMode is null."]], "SeeAlso": ["@B_java#text#DecimalFormat#getRoundingMode_E@"], "Permissions": [], "Description": "Sets the @B_java#math#RoundingMode_E@ used in this DecimalFormat.", "history": "Added in API level 9", "FullName": "public void setRoundingMode (RoundingMode roundingMode)"}, "DecimalFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a non-localized pattern string."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid."]], "SeeAlso": ["@B_java#text#NumberFormat#getInstance_E@", "@B_java#text#NumberFormat#getNumberInstance_E@", "@B_java#text#NumberFormat#getCurrencyInstance_E@", "@B_java#text#NumberFormat#getPercentInstance_E@"], "Permissions": [], "Description": "Creates a DecimalFormat using the given pattern and the symbols for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is a convenient way to obtain a DecimalFormat when internationalization is not the main concern. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getNumberInstance. These factories will return the most appropriate sub-class of NumberFormat for a given locale.", "history": "Added in API level 1", "FullName": "public DecimalFormat (String pattern)"}, "setParseBigDecimal(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parse method returns BigDecimal; false otherwise"]], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#isParseBigDecimal_E@"], "Permissions": [], "Description": "Sets whether the @B_java#text#DecimalFormat#parse_E@ method returns BigDecimal.", "history": "Added in API level 1", "FullName": "public void setParseBigDecimal (boolean newValue)"}, "applyPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a new pattern"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Apply the given pattern to this Format object. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example \"#,#00.0#\" \u2192 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: \"#,#00.0#;(#,#00.0#)\" for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.", "history": "Added in API level 1", "FullName": "public void applyPattern (String pattern)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides hashCode", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "DecimalFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#getInstance_E@", "@B_java#text#NumberFormat#getNumberInstance_E@", "@B_java#text#NumberFormat#getCurrencyInstance_E@", "@B_java#text#NumberFormat#getPercentInstance_E@"], "Permissions": [], "Description": "Creates a DecimalFormat using the default pattern and symbols for the default @B_java#util#Locale#Category#FORMAT_E@ locale. This is a convenient way to obtain a DecimalFormat when internationalization is not the main concern. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getNumberInstance. These factories will return the most appropriate sub-class of NumberFormat for a given locale.", "history": "Added in API level 1", "FullName": "public DecimalFormat ()"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "format(long,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "The formatted number string"]], "Parameters": [["long", "long: The long to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: where the text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#FieldPosition_E@"], "Permissions": [], "Description": "Format a long to produce a string.", "history": "Added in API level 1", "FullName": "public StringBuffer format (long number, StringBuffer result, FieldPosition fieldPosition)"}, "setPositivePrefix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new positive prefix"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the positive prefix. Examples: +123, $123, sFr123", "history": "Added in API level 1", "FullName": "public void setPositivePrefix (String newValue)"}, "getDecimalFormatSymbols()": {"Returns": [["@B_java#text#DecimalFormatSymbols_E@", "a copy of the desired DecimalFormatSymbols"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Returns a copy of the decimal format symbols, which is generally not changed by the programmer or user.", "history": "Added in API level 1", "FullName": "public DecimalFormatSymbols getDecimalFormatSymbols ()"}, "setMultiplier(int)": {"Returns": [], "Parameters": [["int", "int: the new multiplier"]], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#getMultiplier_E@"], "Permissions": [], "Description": "Sets the multiplier for use in percent, per mille, and similar formats. For a percent format, set the multiplier to 100 and the suffixes to have '%' (for Arabic, use the Arabic percent sign). For a per mille format, set the multiplier to 1000 and the suffixes to have '\\u2030'. Example: with multiplier 100, 1.23 is formatted as \"123\", and \"123\" is parsed into 1.23.", "history": "Added in API level 1", "FullName": "public void setMultiplier (int newValue)"}, "isParseBigDecimal()": {"Returns": [["boolean", "true if the parse method returns BigDecimal; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setParseBigDecimal_E@"], "Permissions": [], "Description": "Returns whether the @B_java#text#DecimalFormat#parse_E@ method returns BigDecimal. The default value is false.", "history": "Added in API level 1", "FullName": "public boolean isParseBigDecimal ()"}, "toLocalizedPattern()": {"Returns": [["@B_java#lang#String_E@", "a localized pattern string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#applyPattern_E@"], "Permissions": [], "Description": "Synthesizes a localized pattern string that represents the current state of this Format object.", "history": "Added in API level 1", "FullName": "public String toLocalizedPattern ()"}, "getMaximumFractionDigits()": {"Returns": [["int", "the maximum number of digits."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setMaximumFractionDigits_E@"], "Permissions": [], "Description": "Gets the maximum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 340 is used.", "history": "Added in API level 1", "FullName": "public int getMaximumFractionDigits ()"}, "DecimalFormat(java.lang.String,java.text.DecimalFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a non-localized pattern string"], ["@B_java#text#DecimalFormatSymbols_E@", "DecimalFormatSymbols: the set of symbols to be used"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any of the given arguments is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid"]], "SeeAlso": ["@B_java#text#NumberFormat#getInstance_E@", "@B_java#text#NumberFormat#getNumberInstance_E@", "@B_java#text#NumberFormat#getCurrencyInstance_E@", "@B_java#text#NumberFormat#getPercentInstance_E@", "@B_java#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Creates a DecimalFormat using the given pattern and symbols. Use this constructor when you need to completely customize the behavior of the format. To obtain standard formats for a given locale, use the factory methods on NumberFormat such as getInstance or getCurrencyInstance. If you need only minor adjustments to a standard format, you can modify the format returned by a NumberFormat factory method.", "history": "Added in API level 1", "FullName": "public DecimalFormat (String pattern, DecimalFormatSymbols symbols)"}, "setGroupingSize(int)": {"Returns": [], "Parameters": [["int", "int: the new grouping size"]], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#getGroupingSize_E@", "@B_java#text#NumberFormat#setGroupingUsed_E@", "@B_java#text#DecimalFormatSymbols#setGroupingSeparator_E@"], "Permissions": [], "Description": "Set the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number \"123,456.78\", the grouping size is 3. The value passed in is converted to a byte, which may lose information.", "history": "Added in API level 1", "FullName": "public void setGroupingSize (int newValue)"}, "setDecimalSeparatorAlwaysShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the decimal separator is always shown; false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows you to set the behavior of the decimal separator with integers. (The decimal separator will always appear with decimals.) Example: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345", "history": "Added in API level 1", "FullName": "public void setDecimalSeparatorAlwaysShown (boolean newValue)"}, "applyLocalizedPattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a new pattern"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pattern is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the given pattern is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Apply the given pattern to this Format object. The pattern is assumed to be in a localized notation. A pattern is a short-hand specification for the various formatting properties. These properties can also be changed individually through the various setter methods. There is no limit to integer digits set by this routine, since that is the typical end-user desire; use setMaximumInteger if you want to set a real value. For negative numbers, use a second pattern, separated by a semicolon Example \"#,#00.0#\" \u2192 1,234.56 This means a minimum of 2 integer digits, 1 fraction digit, and a maximum of 2 fraction digits. Example: \"#,#00.0#;(#,#00.0#)\" for negatives in parentheses. In negative patterns, the minimum and maximum counts are ignored; these are presumed to be set in the positive pattern.", "history": "Added in API level 1", "FullName": "public void applyLocalizedPattern (String pattern)"}, "isGroupingUsed()": {"Returns": [["boolean", "true if grouping is used; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if grouping is used in this format. For example, in the English locale, with grouping on, the number 1234567 might be formatted as \"1,234,567\". The grouping separator as well as the size of each group is locale dependant and is determined by sub-classes of NumberFormat.", "history": "Added in API level 1", "FullName": "public boolean isGroupingUsed ()"}, "format(double,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "The formatted number string"]], "Parameters": [["double", "double: The double to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: where the text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: On input: an alignment field, if desired. On output: the offsets of the alignment field."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": ["@B_java#text#FieldPosition_E@"], "Permissions": [], "Description": "Formats a double to produce a string.", "history": "Added in API level 1", "FullName": "public StringBuffer format (double number, StringBuffer result, FieldPosition fieldPosition)"}, "getPositivePrefix()": {"Returns": [["@B_java#lang#String_E@", "the positive prefix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the positive prefix. Examples: +123, $123, sFr123", "history": "Added in API level 1", "FullName": "public String getPositivePrefix ()"}, "getMinimumFractionDigits()": {"Returns": [["int", "the minimum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setMinimumFractionDigits_E@"], "Permissions": [], "Description": "Gets the minimum number of digits allowed in the fraction portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 340 is used.", "history": "Added in API level 1", "FullName": "public int getMinimumFractionDigits ()"}, "setPositiveSuffix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new positive suffix"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the positive suffix. Example: 123%", "history": "Added in API level 1", "FullName": "public void setPositiveSuffix (String newValue)"}, "getMinimumIntegerDigits()": {"Returns": [["int", "the minimum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Gets the minimum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 309 is used.", "history": "Added in API level 1", "FullName": "public int getMinimumIntegerDigits ()"}, "setNegativeSuffix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new negative suffix"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the negative suffix. Examples: 123%", "history": "Added in API level 1", "FullName": "public void setNegativeSuffix (String newValue)"}, "isDecimalSeparatorAlwaysShown()": {"Returns": [["boolean", "true if the decimal separator is always shown; false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows you to get the behavior of the decimal separator with integers. (The decimal separator will always appear with decimals.) Example: Decimal ON: 12345 \u2192 12345.; OFF: 12345 \u2192 12345", "history": "Added in API level 1", "FullName": "public boolean isDecimalSeparatorAlwaysShown ()"}, "getMaximumIntegerDigits()": {"Returns": [["int", "the maximum number of digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Gets the maximum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of the return value and 309 is used.", "history": "Added in API level 1", "FullName": "public int getMaximumIntegerDigits ()"}, "getRoundingMode()": {"Returns": [["@B_java#math#RoundingMode_E@", "The RoundingMode used for this DecimalFormat."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setRoundingMode_E@"], "Permissions": [], "Description": "Gets the @B_java#math#RoundingMode_E@ used in this DecimalFormat.", "history": "Added in API level 9", "FullName": "public RoundingMode getRoundingMode ()"}, "getNegativePrefix()": {"Returns": [["@B_java#lang#String_E@", "the negative prefix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the negative prefix. Examples: -123, ($123) (with negative suffix), sFr-123", "history": "Added in API level 1", "FullName": "public String getNegativePrefix ()"}, "setMaximumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of integer digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the integer portion of a number. For formatting numbers other than BigInteger and BigDecimal objects, the lower of newValue and 309 is used. Negative input values are replaced with 0.", "history": "Added in API level 1", "FullName": "public void setMaximumIntegerDigits (int newValue)"}, "getGroupingSize()": {"Returns": [["int", "the grouping size"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#setGroupingSize_E@", "@B_java#text#NumberFormat#isGroupingUsed_E@", "@B_java#text#DecimalFormatSymbols#getGroupingSeparator_E@"], "Permissions": [], "Description": "Return the grouping size. Grouping size is the number of digits between grouping separators in the integer portion of a number. For example, in the number \"123,456.78\", the grouping size is 3.", "history": "Added in API level 1", "FullName": "public int getGroupingSize ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard override; no change in semantics.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "the parsed value, or null if the parse fails"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if text or pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. The subclass returned depends on the value of @B_java#text#DecimalFormat#isParseBigDecimal_E@ as well as on the string being parsed. If isParseBigDecimal() is false (the default), most integer values are returned as Long objects, no matter how they are written: \"17\" and \"17.000\" both parse to Long(17). Values that cannot fit into a Long are returned as Doubles. This includes values with a fractional part, infinite values, NaN, and the value -0.0. DecimalFormat does not decide whether to return a Double or a Long based on the presence of a decimal separator in the source string. Doing so would prevent integers that overflow the mantissa of a double, such as \"-9,223,372,036,854,775,808.00\", from being parsed accurately. Callers may use the Number methods doubleValue, longValue, etc., to obtain the type they want. If isParseBigDecimal() is true, values are returned as BigDecimal objects. The values are the ones constructed by @B_java#math#BigDecimal#BigDecimal_E@ for corresponding strings in locale-independent format. The special cases negative and positive infinity and NaN are returned as Double instances holding the values of the corresponding Double constants. DecimalFormat parses all Unicode characters that represent decimal digits, as defined by Character.digit(). In addition, DecimalFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object.", "history": "added in API level 1", "FullName": "public Number parse (String text, ParsePosition pos)"}, "setDecimalFormatSymbols(java.text.DecimalFormatSymbols)": {"Returns": [], "Parameters": [["@B_java#text#DecimalFormatSymbols_E@", "DecimalFormatSymbols: desired DecimalFormatSymbols"]], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormatSymbols_E@"], "Permissions": [], "Description": "Sets the decimal format symbols, which is generally not changed by the programmer or user.", "history": "Added in API level 1", "FullName": "public void setDecimalFormatSymbols (DecimalFormatSymbols newSymbols)"}, "setNegativePrefix(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new negative prefix"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the negative prefix. Examples: -123, ($123) (with negative suffix), sFr-123", "history": "Added in API level 1", "FullName": "public void setNegativePrefix (String newValue)"}, "getNegativeSuffix()": {"Returns": [["@B_java#lang#String_E@", "the negative suffix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the negative suffix. Examples: -123%, ($123) (with positive suffixes)", "history": "Added in API level 1", "FullName": "public String getNegativeSuffix ()"}, "formatToCharacterIterator(java.lang.Object)": {"Returns": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator describing the formatted value."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if obj is null."], ["@B_java#lang#IllegalArgumentException_E@", "when the Format cannot format the given object."], ["@B_java#lang#ArithmeticException_E@", "if rounding is needed with rounding mode being set to RoundingMode.UNNECESSARY"]], "SeeAlso": [], "Permissions": [], "Description": "Formats an Object producing an AttributedCharacterIterator. You can use the returned AttributedCharacterIterator to build the resulting String, as well as to determine information about the resulting String. Each attribute key of the AttributedCharacterIterator will be of type NumberFormat.Field, with the attribute value being the same as the attribute key.", "history": "Added in API level 1", "FullName": "public AttributedCharacterIterator formatToCharacterIterator (Object obj)"}, "setGroupingUsed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if grouping is used; false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether or not grouping will be used in this format.", "history": "Added in API level 1", "FullName": "public void setGroupingUsed (boolean newValue)"}, "setParseIntegerOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if numbers should be parsed as integers only; false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether or not numbers should be parsed as integers only.", "history": "Added in API level 1", "FullName": "public void setParseIntegerOnly (boolean value)"}, "toPattern()": {"Returns": [["@B_java#lang#String_E@", "a pattern string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormat#applyPattern_E@"], "Permissions": [], "Description": "Synthesizes a pattern string that represents the current state of this Format object.", "history": "Added in API level 1", "FullName": "public String toPattern ()"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "the parsed value, or null if the parse fails"]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be parsed"], ["@B_java#text#ParsePosition_E@", "ParsePosition: A ParsePosition object with index and error index information as described above."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if text or pos is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses text from a string to produce a Number. The method attempts to parse text starting at the index given by pos. If parsing succeeds, then the index of pos is updated to the index after the last character used (parsing does not necessarily use all characters up to the end of the string), and the parsed number is returned. The updated pos can be used to indicate the starting point for the next call to this method. If an error occurs, then the index of pos is not changed, the error index of pos is set to the index of the character where the error occurred, and null is returned. The subclass returned depends on the value of @B_java#text#DecimalFormat#isParseBigDecimal_E@ as well as on the string being parsed. If isParseBigDecimal() is false (the default), most integer values are returned as Long objects, no matter how they are written: \"17\" and \"17.000\" both parse to Long(17). Values that cannot fit into a Long are returned as Doubles. This includes values with a fractional part, infinite values, NaN, and the value -0.0. DecimalFormat does not decide whether to return a Double or a Long based on the presence of a decimal separator in the source string. Doing so would prevent integers that overflow the mantissa of a double, such as \"-9,223,372,036,854,775,808.00\", from being parsed accurately. Callers may use the Number methods doubleValue, longValue, etc., to obtain the type they want. If isParseBigDecimal() is true, values are returned as BigDecimal objects. The values are the ones constructed by @B_java#math#BigDecimal#BigDecimal_E@ for corresponding strings in locale-independent format. The special cases negative and positive infinity and NaN are returned as Double instances holding the values of the corresponding Double constants. DecimalFormat parses all Unicode characters that represent decimal digits, as defined by Character.digit(). In addition, DecimalFormat also recognizes as digits the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object.", "history": "Added in API level 1", "FullName": "public Number parse (String text, ParsePosition pos)"}, "setCurrency(java.util.Currency)": {"Returns": [], "Parameters": [["@B_java#util#Currency_E@", "Currency: the new currency to be used by this decimal format"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if currency is null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the currency used by this number format when formatting currency values. This does not update the minimum or maximum number of fraction digits used by the number format. The currency is set by calling @B_java#text#DecimalFormatSymbols#setCurrency_E@ on this number format's symbols.", "history": "Added in API level 1", "FullName": "public void setCurrency (Currency currency)"}, "getPositiveSuffix()": {"Returns": [["@B_java#lang#String_E@", "the positive suffix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the positive suffix. Example: 123%", "history": "Added in API level 1", "FullName": "public String getPositiveSuffix ()"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_java#text#NumberFormat_E@"], "ClassName": "java.text.DecimalFormat", "ClassDesc": "DecimalFormat is a concrete subclass of NumberFormat that formats decimal numbers. It has a variety of features designed to make it possible to parse and format numbers in any locale, including support for Western, Arabic, and Indic digits. It also supports different kinds of numbers, including integers (123), fixed-point numbers (123.4), scientific notation (1.23E4), percentages (12%), and currency amounts ($123). All of these can be localized. To obtain a NumberFormat for a specific locale, including the default locale, call one of NumberFormat's factory methods, such as getInstance(). In general, do not call the DecimalFormat constructors directly, since the NumberFormat factory methods may return subclasses other than DecimalFormat. If you need to customize the format object, do something like this: A DecimalFormat comprises a pattern and a set of symbols. The pattern may be set directly using applyPattern(), or indirectly using the API methods. The symbols are stored in a DecimalFormatSymbols object. When using the NumberFormat factory methods, the pattern and symbols are read from localized ResourceBundles. DecimalFormat patterns have the following syntax: A DecimalFormat pattern contains a positive and negative subpattern, for example, \"#,##0.00;(#,##0.00)\". Each subpattern has a prefix, numeric part, and suffix. The negative subpattern is optional; if absent, then the positive subpattern prefixed with the localized minus sign ('-' in most locales) is used as the negative subpattern. That is, \"0.00\" alone is equivalent to \"0.00;-0.00\". If there is an explicit negative subpattern, it serves only to specify the negative prefix and suffix; the number of digits, minimal digits, and other characteristics are all the same as the positive pattern. That means that \"#,##0.0#;(#)\" produces precisely the same behavior as \"#,##0.0#;(#,##0.0#)\". The prefixes, suffixes, and various symbols used for infinity, digits, thousands separators, decimal separators, etc. may be set to arbitrary values, and they will appear properly during formatting. However, care must be taken that the symbols and strings do not conflict, or parsing will be unreliable. For example, either the positive and negative prefixes or the suffixes must be distinct for DecimalFormat.parse() to be able to distinguish positive from negative values. (If they are identical, then DecimalFormat will behave as if no negative subpattern was specified.) Another example is that the decimal separator and thousands separator should be distinct characters, or parsing will be impossible. The grouping separator is commonly used for thousands, but in some countries it separates ten-thousands. The grouping size is a constant number of digits between the grouping characters, such as 3 for 100,000,000 or 4 for 1,0000,0000. If you supply a pattern with multiple grouping characters, the interval between the last one and the end of the integer is the one that is used. So \"#,##,###,####\" == \"######,####\" == \"##,####,####\". Many characters in a pattern are taken literally; they are matched during parsing and output unchanged during formatting. Special characters, on the other hand, stand for other characters, strings, or classes of characters. They must be quoted, unless noted otherwise, if they are to appear in the prefix or suffix as literals. The characters listed here are used in non-localized patterns. Localized patterns use the corresponding characters taken from this formatter's DecimalFormatSymbols object instead, and these characters lose their special status. Two exceptions are the currency sign and quote, which are not localized. Numbers in scientific notation are expressed as the product of a mantissa and a power of ten, for example, 1234 can be expressed as 1.234 x 10^3. The mantissa is often in the range 1.0 \u2264 x < 10.0, but it need not be. DecimalFormat can be instructed to format and parse scientific notation only via a pattern; there is currently no factory method that creates a scientific notation format. In a pattern, the exponent character immediately followed by one or more digit characters indicates scientific notation. Example: \"0.###E0\" formats the number 1234 as \"1.234E3\". The number of digit characters after the exponent character gives the minimum exponent digit count. There is no maximum. Negative exponents are formatted using the localized minus sign, not the prefix and suffix from the pattern. This allows patterns such as \"0.###E0 m/s\". The minimum and maximum number of integer digits are interpreted together: If the maximum number of integer digits is greater than their minimum number and greater than 1, it forces the exponent to be a multiple of the maximum number of integer digits, and the minimum number of integer digits to be interpreted as 1. The most common use of this is to generate engineering notation, in which the exponent is a multiple of three, e.g., \"##0.#####E0\". Using this pattern, the number 12345 formats to \"12.345E3\", and 123456 formats to \"123.456E3\". Otherwise, the minimum number of integer digits is achieved by adjusting the exponent. Example: 0.00123 formatted with \"00.###E0\" yields \"12.3E-4\". The number of significant digits in the mantissa is the sum of the minimum integer and maximum fraction digits, and is unaffected by the maximum integer digits. For example, 12345 formatted with \"##0.##E0\" is \"12.3E3\". To show all digits, set the significant digits count to zero. The number of significant digits does not affect parsing. Exponential patterns may not contain grouping separators. DecimalFormat provides rounding modes defined in @B_java#math#RoundingMode_E@ for formatting. By default, it uses @B_java#math#RoundingMode#HALF_EVEN_E@. DecimalFormat uses the ten consecutive characters starting with the localized zero digit defined in the DecimalFormatSymbols object as digits. For parsing, these digits as well as all Unicode decimal digits, as defined by @B_java#lang#Character#digit_E@, are recognized. NaN is formatted as a string, which typically has a single character \\uFFFD. This string is determined by the DecimalFormatSymbols object. This is the only value for which the prefixes and suffixes are not used. Infinity is formatted as a string, which typically has a single character \\u221E, with the positive or negative prefixes and suffixes applied. The infinity string is determined by the DecimalFormatSymbols object. Negative zero (\"-0\") parses to BigDecimal(0) if isParseBigDecimal() is true, Long(0) if isParseBigDecimal() is false and isParseIntegerOnly() is true, Double(-0.0) if both isParseBigDecimal() and isParseIntegerOnly() are false. Decimal formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally."}