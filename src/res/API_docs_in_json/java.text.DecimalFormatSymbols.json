{"Functions": {"getExponentSeparator()": {"Returns": [["@B_java#lang#String_E@", "the exponent separator string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormatSymbols#setExponentSeparator_E@"], "Permissions": [], "Description": "Returns the string used to separate the mantissa from the exponent. Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.", "history": "Added in API level 9", "FullName": "public String getExponentSeparator ()"}, "DecimalFormatSymbols(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Create a DecimalFormatSymbols object for the given locale. It is recommended that the @B_java#text#DecimalFormatSymbols#getInstance_E@ method is used instead. If the specified locale contains the @B_java#util#Locale#UNICODE_LOCALE_EXTENSION_E@ for the numbering system, the instance is initialized with the specified numbering system if the JRE implementation supports it. For example, NumberFormat instance with the Thai numbering system, instead of the Latin numbering system.", "history": "Added in API level 1", "FullName": "public DecimalFormatSymbols (Locale locale)"}, "getInfinity()": {"Returns": [["@B_java#lang#String_E@", "the string representing infinity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the string used to represent infinity. Almost always left unchanged.", "history": "Added in API level 1", "FullName": "public String getInfinity ()"}, "setInternationalCurrencySymbol(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the currency code"]], "Throws": [], "SeeAlso": ["@B_java#text#DecimalFormatSymbols#setCurrency_E@", "@B_java#text#DecimalFormatSymbols#setCurrencySymbol_E@"], "Permissions": [], "Description": "Sets the ISO 4217 currency code of the currency of these DecimalFormatSymbols. If the currency code is valid (as defined by @B_java#util#Currency#getInstance_E@), this also sets the currency attribute to the corresponding Currency instance and the currency symbol attribute to the currency's symbol in the DecimalFormatSymbols' locale. If the currency code is not valid, then the currency attribute is set to null and the currency symbol attribute is not modified.", "history": "Added in API level 1", "FullName": "public void setInternationalCurrencySymbol (String currencyCode)"}, "setNaN(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string representing \"not a number\""]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the string used to represent \"not a number\". Almost always left unchanged.", "history": "Added in API level 1", "FullName": "public void setNaN (String NaN)"}, "setGroupingSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the grouping separator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for thousands separator. Different for French, etc.", "history": "Added in API level 1", "FullName": "public void setGroupingSeparator (char groupingSeparator)"}, "getZeroDigit()": {"Returns": [["char", "the character used for zero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for zero. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public char getZeroDigit ()"}, "setPatternSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the pattern separator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used to separate positive and negative subpatterns in a pattern.", "history": "Added in API level 1", "FullName": "public void setPatternSeparator (char patternSeparator)"}, "getPatternSeparator()": {"Returns": [["char", "the pattern separator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used to separate positive and negative subpatterns in a pattern.", "history": "Added in API level 1", "FullName": "public char getPatternSeparator ()"}, "setMinusSign(char)": {"Returns": [], "Parameters": [["char", "char: the character representing minus sign"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.", "history": "Added in API level 1", "FullName": "public void setMinusSign (char minusSign)"}, "setDecimalSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the character used for decimal sign"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for decimal sign. Different for French, etc.", "history": "Added in API level 1", "FullName": "public void setDecimalSeparator (char decimalSeparator)"}, "getInstance()": {"Returns": [["@B_java#text#DecimalFormatSymbols_E@", "a DecimalFormatSymbols instance."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Gets the DecimalFormatSymbols instance for the default locale. This is equivalent to calling @B_java#text#DecimalFormatSymbols#getInstance_E@.", "history": "Added in API level 9", "FullName": "public static final DecimalFormatSymbols getInstance ()"}, "getCurrency()": {"Returns": [["@B_java#util#Currency_E@", "the currency used, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the currency of these DecimalFormatSymbols. May be null if the currency symbol attribute was previously set to a value that's not a valid ISO 4217 currency code.", "history": "Added in API level 1", "FullName": "public Currency getCurrency ()"}, "getMonetaryDecimalSeparator()": {"Returns": [["char", "the monetary decimal separator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the monetary decimal separator.", "history": "Added in API level 1", "FullName": "public char getMonetaryDecimalSeparator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override equals.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "setMonetaryDecimalSeparator(char)": {"Returns": [], "Parameters": [["char", "char: the monetary decimal separator"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the monetary decimal separator.", "history": "Added in API level 1", "FullName": "public void setMonetaryDecimalSeparator (char sep)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard override.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "setPercent(char)": {"Returns": [], "Parameters": [["char", "char: the character used for percent sign"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for percent sign. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public void setPercent (char percent)"}, "setExponentSeparator(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the exponent separator string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if exp is null"]], "SeeAlso": ["@B_java#text#DecimalFormatSymbols#getExponentSeparator_E@"], "Permissions": [], "Description": "Sets the string used to separate the mantissa from the exponent. Examples: \"x10^\" for 1.23x10^4, \"E\" for 1.23E4.", "history": "Added in API level 9", "FullName": "public void setExponentSeparator (String exp)"}, "getMinusSign()": {"Returns": [["char", "the character representing minus sign"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used to represent minus sign. If no explicit negative format is specified, one is formed by prefixing minusSign to the positive format.", "history": "Added in API level 1", "FullName": "public char getMinusSign ()"}, "setPerMill(char)": {"Returns": [], "Parameters": [["char", "char: the character used for per mille sign"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for per mille sign. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public void setPerMill (char perMill)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "setCurrencySymbol(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the currency symbol"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currency symbol for the currency of these DecimalFormatSymbols in their locale.", "history": "Added in API level 1", "FullName": "public void setCurrencySymbol (String currency)"}, "getDigit()": {"Returns": [["char", "the character used for a digit in a pattern"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for a digit in a pattern.", "history": "Added in API level 1", "FullName": "public char getDigit ()"}, "getNaN()": {"Returns": [["@B_java#lang#String_E@", "the string representing \"not a number\""]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the string used to represent \"not a number\". Almost always left unchanged.", "history": "Added in API level 1", "FullName": "public String getNaN ()"}, "getPercent()": {"Returns": [["char", "the character used for percent sign"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for percent sign. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public char getPercent ()"}, "setDigit(char)": {"Returns": [], "Parameters": [["char", "char: the character used for a digit in a pattern"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for a digit in a pattern.", "history": "Added in API level 1", "FullName": "public void setDigit (char digit)"}, "setInfinity(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string representing infinity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the string used to represent infinity. Almost always left unchanged.", "history": "Added in API level 1", "FullName": "public void setInfinity (String infinity)"}, "getDecimalSeparator()": {"Returns": [["char", "the character used for decimal sign"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for decimal sign. Different for French, etc.", "history": "Added in API level 1", "FullName": "public char getDecimalSeparator ()"}, "getInternationalCurrencySymbol()": {"Returns": [["@B_java#lang#String_E@", "the currency code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ISO 4217 currency code of the currency of these DecimalFormatSymbols.", "history": "Added in API level 1", "FullName": "public String getInternationalCurrencySymbol ()"}, "setCurrency(java.util.Currency)": {"Returns": [], "Parameters": [["@B_java#util#Currency_E@", "Currency: the new currency to be used"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if currency is null"]], "SeeAlso": ["@B_java#text#DecimalFormatSymbols#setCurrencySymbol_E@", "@B_java#text#DecimalFormatSymbols#setInternationalCurrencySymbol_E@"], "Permissions": [], "Description": "Sets the currency of these DecimalFormatSymbols. This also sets the currency symbol attribute to the currency's symbol in the DecimalFormatSymbols' locale, and the international currency symbol attribute to the currency's ISO 4217 currency code.", "history": "Added in API level 1", "FullName": "public void setCurrency (Currency currency)"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getGroupingSeparator()": {"Returns": [["char", "the grouping separator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for thousands separator. Different for French, etc.", "history": "Added in API level 1", "FullName": "public char getGroupingSeparator ()"}, "getCurrencySymbol()": {"Returns": [["@B_java#lang#String_E@", "the currency symbol"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the currency symbol for the currency of these DecimalFormatSymbols in their locale.", "history": "Added in API level 1", "FullName": "public String getCurrencySymbol ()"}, "DecimalFormatSymbols()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_java#util#Locale#Category_E@"], "Permissions": [], "Description": "Create a DecimalFormatSymbols object for the default @B_java#util#Locale#Category#FORMAT_E@ locale. It is recommended that the @B_java#text#DecimalFormatSymbols#getInstance_E@ method is used instead. This is equivalent to calling @B_java#text#DecimalFormatSymbols#DecimalFormatSymbols_E@.", "history": "Added in API level 1", "FullName": "public DecimalFormatSymbols ()"}, "setZeroDigit(char)": {"Returns": [], "Parameters": [["char", "char: the character used for zero"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the character used for zero. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public void setZeroDigit (char zeroDigit)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "an array of locales for which localized DecimalFormatSymbols instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances.", "history": "Added in API level 9", "FullName": "public static Locale[] getAvailableLocales ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_java#text#DecimalFormatSymbols_E@", "a DecimalFormatSymbols instance."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if locale is null"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the DecimalFormatSymbols instance for the specified locale. If the specified locale contains the @B_java#util#Locale#UNICODE_LOCALE_EXTENSION_E@ for the numbering system, the instance is initialized with the specified numbering system if the JRE implementation supports it. For example, NumberFormat instance with the Thai numbering system, instead of the Latin numbering system.", "history": "Added in API level 9", "FullName": "public static final DecimalFormatSymbols getInstance (Locale locale)"}, "getPerMill()": {"Returns": [["char", "the character used for per mille sign"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the character used for per mille sign. Different for Arabic, etc.", "history": "Added in API level 1", "FullName": "public char getPerMill ()"}}, "Inheritance": [], "ClassName": "java.text.DecimalFormatSymbols", "ClassDesc": "This class represents the set of symbols (such as the decimal separator, the grouping separator, and so on) needed by DecimalFormat to format numbers. DecimalFormat creates for itself an instance of DecimalFormatSymbols from its locale data. If you need to change any of these symbols, you can get the DecimalFormatSymbols object from your DecimalFormat and modify it."}