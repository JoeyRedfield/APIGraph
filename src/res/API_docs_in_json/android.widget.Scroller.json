{"Functions": {"getStartY()": {"Returns": [["int", "The start Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start Y offset in the scroll.", "history": "Added in API level 3", "FullName": "public final int getStartY ()"}, "startScroll(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."], ["int", "int: Duration of the scroll in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point, the distance to travel, and the duration of the scroll.", "history": "Added in API level 1", "FullName": "public void startScroll (int startX, int startY, int dx, int dy, int duration)"}, "computeScrollOffset()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when you want to know the new location. If it returns true, the animation is not yet finished.", "history": "Added in API level 1", "FullName": "public boolean computeScrollOffset ()"}, "getFinalY()": {"Returns": [["int", "The final Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "history": "Added in API level 1", "FullName": "public final int getFinalY ()"}, "getCurrX()": {"Returns": [["int", "The new X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current X offset in the scroll.", "history": "Added in API level 1", "FullName": "public final int getCurrX ()"}, "getDuration()": {"Returns": [["int", "The duration of the scroll in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns how long the scroll event will take, in milliseconds.", "history": "Added in API level 1", "FullName": "public final int getDuration ()"}, "startScroll(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."], ["int", "int: Duration of the scroll in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point, the distance to travel, and the duration of the scroll.", "history": "added in API level 1", "FullName": "public void startScroll (int startX, int startY, int dx, int dy, int duration)"}, "setFinalX(int)": {"Returns": [], "Parameters": [["int", "int: The new X offset as an absolute distance from the origin."]], "Throws": [], "SeeAlso": ["@B_android#widget#Scroller#extendDuration_E@", "@B_android#widget#Scroller#setFinalY_E@"], "Permissions": [], "Description": "Sets the final position (X) for this scroller.", "history": "Added in API level 1", "FullName": "public void setFinalX (int newX)"}, "timePassed()": {"Returns": [["int", "The elapsed time in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time elapsed since the beginning of the scrolling.", "history": "Added in API level 1", "FullName": "public int timePassed ()"}, "setFinalY(int)": {"Returns": [], "Parameters": [["int", "int: The new Y offset as an absolute distance from the origin."]], "Throws": [], "SeeAlso": ["@B_android#widget#Scroller#extendDuration_E@", "@B_android#widget#Scroller#setFinalX_E@"], "Permissions": [], "Description": "Sets the final position (Y) for this scroller.", "history": "Added in API level 1", "FullName": "public void setFinalY (int newY)"}, "setFriction(float)": {"Returns": [], "Parameters": [["float", "float: A scalar dimension-less value representing the coefficient of friction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of friction applied to flings. The default value is @B_android#view#ViewConfiguration#getScrollFriction_E@.", "history": "Added in API level 11", "FullName": "public final void setFriction (float friction)"}, "abortAnimation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Scroller#forceFinished_E@"], "Permissions": [], "Description": "Stops the animation. Contrary to @B_android#widget#Scroller#forceFinished_E@, aborting the animating cause the scroller to move to the final x and y position", "history": "Added in API level 1", "FullName": "public void abortAnimation ()"}, "getCurrY()": {"Returns": [["int", "The new Y offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current Y offset in the scroll.", "history": "Added in API level 1", "FullName": "public final int getCurrY ()"}, "getFinalX()": {"Returns": [["int", "The final X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns where the scroll will end. Valid only for \"fling\" scrolls.", "history": "Added in API level 1", "FullName": "public final int getFinalX ()"}, "forceFinished(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: The new finished value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Force the finished field to a particular value.", "history": "Added in API level 1", "FullName": "public final void forceFinished (boolean finished)"}, "Scroller(android.content.Context,android.view.animation.Interpolator,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#view#animation#Interpolator_E@", "Interpolator no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Scroller with the specified interpolator. If the interpolator is null, the default (viscous) interpolator will be used. Specify whether or not to support progressive \"flywheel\" behavior in flinging.", "history": "Added in API level 11", "FullName": "public Scroller (Context context, Interpolator interpolator, boolean flywheel)"}, "fling(int, int, int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting point of the scroll (X)"], ["int", "int: Starting point of the scroll (Y)"], ["int", "int: Initial velocity of the fling (X) measured in pixels per second."], ["int", "int: Initial velocity of the fling (Y) measured in pixels per second"], ["int", "int: Minimum X value. The scroller will not scroll past this point."], ["int", "int: Maximum X value. The scroller will not scroll past this point."], ["int", "int: Minimum Y value. The scroller will not scroll past this point."], ["int", "int: Maximum Y value. The scroller will not scroll past this point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling based on a fling gesture. The distance travelled will depend on the initial velocity of the fling.", "history": "added in API level 1", "FullName": "public void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)"}, "getCurrVelocity()": {"Returns": [["float", "The original velocity less the deceleration. Result may be negative."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current velocity.", "history": "Added in API level 14", "FullName": "public float getCurrVelocity ()"}, "extendDuration(int)": {"Returns": [], "Parameters": [["int", "int: Additional time to scroll in milliseconds."]], "Throws": [], "SeeAlso": ["@B_android#widget#Scroller#setFinalX_E@", "@B_android#widget#Scroller#setFinalY_E@"], "Permissions": [], "Description": "Extend the scroll animation. This allows a running animation to scroll further and longer, when used with @B_android#widget#Scroller#setFinalX_E@ or @B_android#widget#Scroller#setFinalY_E@.", "history": "Added in API level 1", "FullName": "public void extendDuration (int extend)"}, "isFinished()": {"Returns": [["boolean", "True if the scroller has finished scrolling, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the scroller has finished scrolling.", "history": "Added in API level 1", "FullName": "public final boolean isFinished ()"}, "fling(int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting point of the scroll (X)"], ["int", "int: Starting point of the scroll (Y)"], ["int", "int: Initial velocity of the fling (X) measured in pixels per second."], ["int", "int: Initial velocity of the fling (Y) measured in pixels per second"], ["int", "int: Minimum X value. The scroller will not scroll past this point."], ["int", "int: Maximum X value. The scroller will not scroll past this point."], ["int", "int: Minimum Y value. The scroller will not scroll past this point."], ["int", "int: Maximum Y value. The scroller will not scroll past this point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling based on a fling gesture. The distance travelled will depend on the initial velocity of the fling.", "history": "Added in API level 1", "FullName": "public void fling (int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY)"}, "Scroller(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Scroller with the default duration and interpolator.", "history": "Added in API level 1", "FullName": "public Scroller (Context context)"}, "getStartX()": {"Returns": [["int", "The start X offset as an absolute distance from the origin."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start X offset in the scroll.", "history": "Added in API level 3", "FullName": "public final int getStartX ()"}, "startScroll(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.", "history": "Added in API level 1", "FullName": "public void startScroll (int startX, int startY, int dx, int dy)"}, "Scroller(android.content.Context,android.view.animation.Interpolator)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#view#animation#Interpolator_E@", "Interpolator no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Scroller with the specified interpolator. If the interpolator is null, the default (viscous) interpolator will be used. \"Flywheel\" behavior will be in effect for apps targeting Honeycomb or newer.", "history": "Added in API level 1", "FullName": "public Scroller (Context context, Interpolator interpolator)"}, "startScroll(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Starting horizontal scroll offset in pixels. Positive numbers will scroll the content to the left."], ["int", "int: Starting vertical scroll offset in pixels. Positive numbers will scroll the content up."], ["int", "int: Horizontal distance to travel. Positive numbers will scroll the content to the left."], ["int", "int: Vertical distance to travel. Positive numbers will scroll the content up."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start scrolling by providing a starting point and the distance to travel. The scroll will use the default value of 250 milliseconds for the duration.", "history": "added in API level 1", "FullName": "public void startScroll (int startX, int startY, int dx, int dy)"}}, "Inheritance": [], "ClassName": "android.widget.Scroller", "ClassDesc": "This class encapsulates scrolling. You can use scrollers (@B_android#widget#Scroller_E@ or @B_android#widget#OverScroller_E@) to collect the data you need to produce a scrolling animation\u2014for example, in response to a fling gesture. Scrollers track scroll offsets for you over time, but they don't automatically apply those positions to your view. It's your responsibility to get and apply new coordinates at a rate that will make the scrolling animation look smooth. Here is a simple example: To track the changing positions of the x/y coordinates, use @B_android#widget#Scroller#computeScrollOffset_E@. The method returns a boolean to indicate whether the scroller is finished. If it isn't, it means that a fling or programmatic pan operation is still in progress. You can use this method to find the current offsets of the x and y coordinates, for example:"}