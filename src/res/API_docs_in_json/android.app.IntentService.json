{"Functions": {"setIntentRedelivery(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets intent redelivery preferences. Usually called from the constructor with your preferred semantics. If enabled is true, @B_android#app#IntentService#onStartCommand_E@ will return @B_android#app#Service#START_REDELIVER_INTENT_E@, so if this process dies before @B_android#app#IntentService#onHandleIntent_E@ returns, the process will be restarted and the intent redelivered. If multiple Intents have been sent, only the most recent one is guaranteed to be redelivered. If enabled is false (the default), @B_android#app#IntentService#onStartCommand_E@ will return @B_android#app#Service#START_NOT_STICKY_E@, and if the process dies, the Intent dies along with it.", "history": "Added in API level 5", "FullName": "public void setIntentRedelivery (boolean enabled)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the service is first created. Do not call this method directly.", "history": "Added in API level 3", "FullName": "public void onCreate ()"}, "onStart(android.content.Intent,int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement @B_android#app#Service#onStartCommand_E@ instead.", "history": "Added in API level 3", "FullName": "public void onStart (Intent intent, int startId)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system to notify a Service that it is no longer used and is being removed. The service should clean up any resources it holds (threads, registered receivers, etc) at this point. Upon return, there will be no more calls in to this Service object and it is effectively dead. Do not call this method directly.", "history": "Added in API level 3", "FullName": "public void onDestroy ()"}, "IntentService(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Used to name the worker thread, important only for debugging."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an IntentService. Invoked by your subclass's constructor.", "history": "Added in API level 3", "FullName": "public IntentService (String name)"}, "onHandleIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The value passed to @B_android#content#Context#startService_E@. This may be null if the service is being restarted after its process has gone away; see @B_android#app#Service#onStartCommand_E@ for details. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is invoked on the worker thread with a request to process. Only one Intent is processed at a time, but the processing happens on a worker thread that runs independently from other application logic. So, if this code takes a long time, it will hold up other requests to the same IntentService, but it will not hold up anything else. When all requests have been handled, the IntentService stops itself, so you should not call @B_android#app#Service#stopSelf_E@. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 3", "FullName": "protected abstract void onHandleIntent (Intent intent)"}, "onStartCommand(android.content.Intent, int, int)": {"Returns": [["int", "The return value indicates what semantics the system should use for the service's current started state. It may be one of the constants associated with the @B_android#app#Service#START_CONTINUATION_MASK_E@ bits."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent supplied to @B_android#content#Context#startService_E@, as given. This may be null if the service is being restarted after its process has gone away, and it had previously returned anything except @B_android#app#Service#START_STICKY_COMPATIBILITY_E@."], ["int", "int: Additional data about this start request."], ["int", "int: A unique integer representing this specific request to start. Use with @B_android#app#Service#stopSelfResult_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#Service#onStartCommand_E@"], "Permissions": [], "Description": "You should not override this method for your IntentService. Instead, override @B_android#app#IntentService#onHandleIntent_E@, which the system calls when the IntentService receives a start request.", "history": "added in API level 5", "FullName": "public int onStartCommand (Intent intent, int flags, int startId)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": ["@B_android#app#Service#onBind_E@"], "Permissions": [], "Description": "Unless you provide binding for your service, you don't need to implement this method, because the default implementation returns null.", "history": "Added in API level 3", "FullName": "public IBinder onBind (Intent intent)"}, "onStart(android.content.Intent, int)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement @B_android#app#Service#onStartCommand_E@ instead.", "history": "added in API level 3", "FullName": "public void onStart (Intent intent, int startId)"}, "onStartCommand(android.content.Intent,int,int)": {"Returns": [["int", "The return value indicates what semantics the system should use for the service's current started state. It may be one of the constants associated with the @B_android#app#Service#START_CONTINUATION_MASK_E@ bits. Value is @B_android#app#Service#START_STICKY_COMPATIBILITY_E@, @B_android#app#Service#START_STICKY_E@, @B_android#app#Service#START_NOT_STICKY_E@, or @B_android#app#Service#START_REDELIVER_INTENT_E@"]], "Parameters": [["@B_android#content#Intent_E@", "Intent: This value may be null."], ["int", "int: Additional data about this start request. Value is either 0 or a combination of @B_android#app#Service#START_FLAG_REDELIVERY_E@, and @B_android#app#Service#START_FLAG_RETRY_E@"], ["int", "int: A unique integer representing this specific request to start. Use with @B_android#app#Service#stopSelfResult_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#Service#onStartCommand_E@"], "Permissions": [], "Description": "You should not override this method for your IntentService. Instead, override @B_android#app#IntentService#onHandleIntent_E@, which the system calls when the IntentService receives a start request.", "history": "Added in API level 5", "FullName": "public int onStartCommand (Intent intent, int flags, int startId)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.app.IntentService", "ClassDesc": "IntentService is a base class for @B_android#app#Service_E@s that handle asynchronous requests (expressed as @B_android#content#Intent_E@s) on demand. Clients send requests through @B_android#content#Context#startService_E@ calls; the service is started as needed, handles each Intent in turn using a worker thread, and stops itself when it runs out of work. This \"work queue processor\" pattern is commonly used to offload tasks from an application's main thread. The IntentService class exists to simplify this pattern and take care of the mechanics. To use it, extend IntentService and implement @B_android#app#IntentService#onHandleIntent_E@. IntentService will receive the Intents, launch a worker thread, and stop the service as appropriate. All requests are handled on a single worker thread -- they may take as long as necessary (and will not block the application's main loop), but only one request will be processed at a time. https:##developer#android#com@B_android#support#v4#app#JobIntentService_E@, which uses jobs instead of services when running on Android 8.0 or higher."}