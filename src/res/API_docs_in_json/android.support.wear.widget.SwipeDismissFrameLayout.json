{"Functions": {"onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "SwipeDismissFrameLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The @B_android#content#Context_E@ the view is running in, through which it can access the current theme, resources, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simple constructor to use when creating a view from code.", "history": "added in version 26.0.0-beta1", "FullName": "SwipeDismissFrameLayout (Context context)"}, "setSwipeable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the layout should react to the swipe gesture"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the layout to swipeable or not. This effectively turns the functionality of this layout on or off.", "history": "", "FullName": "void setSwipeable (boolean swipeable)"}, "requestDisallowInterceptTouchEvent(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the child does not want the parent to intercept touch events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a child does not want this parent and its ancestors to intercept touch events with @B_android#view#ViewGroup#onInterceptTouchEvent_E@. This parent should pass this call onto its parents. This parent must obey this request for the duration of the touch (that is, only clear the flag after this parent has received an up or a cancel.", "history": "", "FullName": "void requestDisallowInterceptTouchEvent (boolean disallowIntercept)"}, "getDismissMinDragWidthRatio()": {"Returns": [["float", "the current ratio of te screen at which the swipe gesture is treated as swipe-to-dismiss"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current ratio of te screen at which the swipe gesture is treated as swipe-to-dismiss.", "history": "", "FullName": "float getDismissMinDragWidthRatio ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "canScrollHorizontally(int)": {"Returns": [["boolean", "true if this view can be scrolled in the specified direction, false otherwise."]], "Parameters": [["int", "int: Negative to check scrolling left, positive to check scrolling right."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this view can be scrolled horizontally in a certain direction.", "history": "", "FullName": "boolean canScrollHorizontally (int direction)"}, "setDismissMinDragWidthRatio(float)": {"Returns": [], "Parameters": [["float", "float: the ratio of the screen at which the swipe gesture is treated as swipe-to-dismiss. should be provided as a fraction of the screen"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum ratio of the screen after which the swipe gesture is treated as swipe-to- dismiss.", "history": "", "FullName": "void setDismissMinDragWidthRatio (float ratio)"}, "isSwipeable()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the layout reacts to swipe gestures.", "history": "", "FullName": "boolean isSwipeable ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.wear.widget.SwipeDismissFrameLayout", "ClassDesc": "A layout enabling left-to-right swipe-to-dismiss, intended for use within an activity. At least one listener must be @B_android#support#wear#widget#SwipeDismissFrameLayout#addCallback_E@ to act on a dismissal action. A listener will typically remove a containing view or fragment from the current activity. To suppress a swipe-dismiss gesture, at least one contained view must be scrollable, indicating that it would like to consume any horizontal touch gestures in that direction. In this case this view will only allow swipe-to-dismiss on the very edge of the left-hand-side of the screen. If you wish to entirely disable the swipe-to-dismiss gesture, @B_android#support#wear#widget#SwipeDismissFrameLayout#setSwipeable_E@ can be used for more direct control over the feature."}