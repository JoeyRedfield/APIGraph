{"Functions": {"setUseLineSpacingFromFallbacks(boolean)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["boolean", "boolean: whether to expand linespacing based on fallback fonts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether to respect the ascent and descent of the fallback fonts that are used in displaying the text (which is needed to avoid text from consecutive lines running into each other). If set, fallback fonts that end up getting used can increase the ascent and descent of the lines that they are used on. For backward compatibility reasons, the default is false, but setting this to true is strongly recommended. It is required to be true if text could be in languages like Burmese or Tibetan where text is typically much taller or deeper than Latin text.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setUseLineSpacingFromFallbacks (boolean useLineSpacingFromFallbacks)"}, "setAlignment(android.text.Layout.Alignment)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["@B_android#text#Layout#Alignment_E@", "Layout.Alignment: Alignment for the resulting @B_android#text#DynamicLayout_E@ This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the alignment. The default is @B_android#text#Layout#Alignment#ALIGN_NORMAL_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setAlignment (Layout.Alignment alignment)"}, "setEllipsizedWidth(int)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: width used for ellipsizing, in pixels Value is 0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setEllipsize_E@"], "Permissions": [], "Description": "Set the width as used for ellipsizing purposes, if it differs from the normal layout width. The default is the width passed to @B_android#text#DynamicLayout#Builder#obtain_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setEllipsizedWidth (int ellipsizedWidth)"}, "obtain(java.lang.CharSequence,android.text.TextPaint,int)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: This value must never be null."], ["@B_android#text#TextPaint_E@", "TextPaint: This value must never be null."], ["int", "int: Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a builder for constructing DynamicLayout objects.", "history": "Added in API level 28", "FullName": "public static DynamicLayout.Builder obtain (CharSequence base, TextPaint paint, int width)"}, "setEllipsize(android.text.TextUtils.TruncateAt)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining"]], "Parameters": [["@B_android#text#TextUtils#TruncateAt_E@", "TextUtils.TruncateAt: type of ellipsis behavior This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setEllipsize_E@"], "Permissions": [], "Description": "Set ellipsizing on the layout. Causes words that are longer than the view is wide, or exceeding the number of lines (see #setMaxLines) in the case of @B_android#text#TextUtils#TruncateAt#END_E@ or @B_android#text#TextUtils#TruncateAt#MARQUEE_E@, to be ellipsized instead of broken. The default is null, indicating no ellipsis is to be applied.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setEllipsize (TextUtils.TruncateAt ellipsize)"}, "setJustificationMode(int)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining. This value will never be null."]], "Parameters": [["int", "int: justification mode for the paragraph. Value is @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_NONE_E@, or @B_android#graphics#text#LineBreaker#JUSTIFICATION_MODE_INTER_WORD_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set paragraph justification mode. The default value is @B_android#text#Layout#JUSTIFICATION_MODE_NONE_E@. If the last line is too short for justification, the last line will be displayed with the alignment set by @B_android#text#DynamicLayout#Builder#setAlignment_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setJustificationMode (int justificationMode)"}, "setIncludePad(boolean)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["boolean", "boolean: whether to include padding"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setIncludeFontPadding_E@"], "Permissions": [], "Description": "Set whether to include extra space beyond font ascent and descent (which is needed to avoid clipping in some languages, such as Arabic and Kannada). The default is true.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setIncludePad (boolean includePad)"}, "setBreakStrategy(int)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: break strategy for paragraph layout Value is @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_SIMPLE_E@, @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_HIGH_QUALITY_E@, or @B_android#graphics#text#LineBreaker#BREAK_STRATEGY_BALANCED_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setBreakStrategy_E@"], "Permissions": [], "Description": "Set break strategy, useful for selecting high quality or balanced paragraph layout options. The default is @B_android#text#Layout#BREAK_STRATEGY_SIMPLE_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setBreakStrategy (int breakStrategy)"}, "setTextDirection(android.text.TextDirectionHeuristic)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["@B_android#text#TextDirectionHeuristic_E@", "TextDirectionHeuristic: text direction heuristic for resolving bidi behavior. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the text direction heuristic. The text direction heuristic is used to resolve text direction per-paragraph based on the input text. The default is @B_android#text#TextDirectionHeuristics#FIRSTSTRONG_LTR_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setTextDirection (TextDirectionHeuristic textDir)"}, "setLineSpacing(float, float)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chainingThis value will never be null."]], "Parameters": [["float", "float: the amount of line spacing addition"], ["float", "float: the line spacing multiplierValue is 0.0 or greater."]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@"], "Permissions": [], "Description": "Set line spacing parameters. Each line will have its line spacing multiplied by spacingMult and then increased by spacingAdd. The default is 0.0 for spacingAdd and 1.0 for spacingMult.", "history": "added in API level 28", "FullName": "public DynamicLayout.Builder setLineSpacing (float spacingAdd, float spacingMult)"}, "setLineSpacing(float,float)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["float", "float: the amount of line spacing addition"], ["float", "float: the line spacing multiplier Value is 0.0 or greater"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setLineSpacing_E@"], "Permissions": [], "Description": "Set line spacing parameters. Each line will have its line spacing multiplied by spacingMult and then increased by spacingAdd. The default is 0.0 for spacingAdd and 1.0 for spacingMult.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setLineSpacing (float spacingAdd, float spacingMult)"}, "setHyphenationFrequency(int)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["int", "int: hyphenation frequency for the paragraph Value is @B_android#text#Layout#HYPHENATION_FREQUENCY_NORMAL_E@, @B_android#text#Layout#HYPHENATION_FREQUENCY_FULL_E@, or @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setHyphenationFrequency_E@"], "Permissions": [], "Description": "Set hyphenation frequency, to control the amount of automatic hyphenation used. The possible values are defined in @B_android#text#Layout_E@, by constants named with the pattern HYPHENATION_FREQUENCY_*. The default is @B_android#text#Layout#HYPHENATION_FREQUENCY_NONE_E@.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setHyphenationFrequency (int hyphenationFrequency)"}, "build()": {"Returns": [["@B_android#text#DynamicLayout_E@", "the newly constructed @B_android#text#DynamicLayout_E@ object This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Build the @B_android#text#DynamicLayout_E@ after options have been set. Note: the builder object must not be reused in any way after calling this method. Setting parameters after calling this method, or calling it a second time on the same builder object, will likely lead to unexpected results.", "history": "Added in API level 28", "FullName": "public DynamicLayout build ()"}, "setDisplayText(java.lang.CharSequence)": {"Returns": [["@B_android#text#DynamicLayout#Builder_E@", "this builder, useful for chaining This value will never be null."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the transformed text This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the transformed text (password transformation being the primary example of a transformation) that will be updated as the base text is changed. The default is the 'base' text passed to the builder's constructor.", "history": "Added in API level 28", "FullName": "public DynamicLayout.Builder setDisplayText (CharSequence display)"}}, "Inheritance": [], "ClassName": "android.text.DynamicLayout.Builder", "ClassDesc": "Builder for dynamic layouts. The builder is the preferred pattern for constructing DynamicLayout objects and should be preferred over the constructors, particularly to access newer features. To build a dynamic layout, first call @B_android#text#DynamicLayout#Builder#obtain_E@ with the required arguments (base, paint, and width), then call setters for optional parameters, and finally @B_android#text#DynamicLayout#Builder#build_E@ to build the DynamicLayout object. Parameters not explicitly set will get default values."}