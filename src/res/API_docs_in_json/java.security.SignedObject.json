{"Functions": {"SignedObject(java.io.Serializable,java.security.PrivateKey,java.security.Signature)": {"Returns": [], "Parameters": [["@B_java#io#Serializable_E@", "Serializable: the object to be signed."], ["@B_java#security#PrivateKey_E@", "PrivateKey: the private key for signing."], ["@B_java#security#Signature_E@", "Signature: the signature signing engine."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during serialization"], ["@B_java#security#InvalidKeyException_E@", "if the key is invalid."], ["@B_java#security#SignatureException_E@", "if signing fails."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SignedObject from any Serializable object. The given object is signed with the given signing key, using the designated signature engine.", "history": "Added in API level 1", "FullName": "public SignedObject (Serializable object, PrivateKey signingKey, Signature signingEngine)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of the signature algorithm.", "history": "Added in API level 1", "FullName": "public String getAlgorithm ()"}, "verify(java.security.PublicKey,java.security.Signature)": {"Returns": [["boolean", "true if the signature is valid, false otherwise"]], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the public key for verification."], ["@B_java#security#Signature_E@", "Signature: the signature verification engine."]], "Throws": [["@B_java#security#SignatureException_E@", "if signature verification failed."], ["@B_java#security#InvalidKeyException_E@", "if the verification key is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that the signature in this SignedObject is the valid signature for the object stored inside, with the given verification key, using the designated verification engine.", "history": "Added in API level 1", "FullName": "public boolean verify (PublicKey verificationKey, Signature verificationEngine)"}, "getSignature()": {"Returns": [["byte[]", "the signature. Returns a new array each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the signature on the signed object, in the form of a byte array.", "history": "Added in API level 1", "FullName": "public byte[] getSignature ()"}, "getObject()": {"Returns": [["@B_java#lang#Object_E@", "the encapsulated object."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during de-serialization"], ["@B_java#lang#ClassNotFoundException_E@", "if an error occurs during de-serialization"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the encapsulated object. The encapsulated object is de-serialized before it is returned.", "history": "Added in API level 1", "FullName": "public Object getObject ()"}}, "Inheritance": [], "ClassName": "java.security.SignedObject", "ClassDesc": "SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected. More specifically, a SignedObject contains another Serializable object, the (to-be-)signed object and its signature. The signed object is a \"deep copy\" (in serialized form) of an original object. Once the copy is made, further manipulation of the original object has no side effect on the copy. The underlying signing algorithm is designated by the Signature object passed to the constructor and the verify method. A typical usage for signing is the following: A typical usage for verification is the following (having received SignedObject so): Several points are worth noting. First, there is no need to initialize the signing or verification engine, as it will be re-initialized inside the constructor and the verify method. Secondly, for verification to succeed, the specified public key must be the public key corresponding to the private key used to generate the SignedObject. More importantly, for flexibility reasons, the constructor and verify method allow for customized signature engines, which can implement signature algorithms that are not installed formally as part of a crypto provider. However, it is crucial that the programmer writing the verifier code be aware what Signature engine is being used, as its own implementation of the verify method is invoked to verify a signature. In other words, a malicious Signature may choose to always return true on verification in an attempt to bypass a security check. The signature algorithm can be, among others, the NIST standard DSA, using DSA and SHA-1. The algorithm is specified using the same convention as that for signatures. The DSA algorithm using the SHA-1 message digest algorithm can be specified, for example, as \"SHA/DSA\" or \"SHA-1/DSA\" (they are equivalent). In the case of RSA, there are multiple choices for the message digest algorithm, so the signing algorithm could be specified as, for example, \"MD2/RSA\", \"MD5/RSA\" or \"SHA-1/RSA\". The algorithm name must be specified, as there is no default. The name of the Cryptography Package Provider is designated also by the Signature parameter to the constructor and the verify method. If the provider is not specified, the default provider is used. Each installation can be configured to use a particular provider as default. Potential applications of SignedObject include: It can be used internally to any Java runtime as an unforgeable authorization token -- one that can be passed around without the fear that the token can be maliciously modified without being detected. It can be used to sign and serialize data/object for storage outside the Java runtime (e.g., storing critical access control data on disk). Nested SignedObjects can be used to construct a logical sequence of signatures, resembling a chain of authorization and delegation."}