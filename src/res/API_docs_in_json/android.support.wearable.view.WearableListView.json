{"Functions": {"isAtTop()": {"Returns": [["boolean", "true if the list is scrolled all the way to the top."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean isAtTop ()"}, "getBaseline()": {"Returns": [["int", "the position of the center child's baseline; -1 if no center child exists or if the center child does not return a valid baseline."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "int getBaseline ()"}, "getChildViewHolder(android.view.View)": {"Returns": [["@B_android#support#wearable#view#WearableListView#ViewHolder_E@", "no returns description in source"]], "Parameters": [["View", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WearableListView.ViewHolder getChildViewHolder (View child)"}, "getMaximizeSingleItem()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if, when there is only one item in the WearableListView, that the single item is laid out so that it's height fills the entire WearableListView.", "history": "", "FullName": "boolean getMaximizeSingleItem ()"}, "getCentralViewTop()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns top of the central View in the list when such view is fully centered. This is a more or a less a static value that you can use to align other views with the central one.", "history": "", "FullName": "int getCentralViewTop ()"}, "WearableListView(android.content.Context)": {"Returns": [], "Parameters": [["Context", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "WearableListView (Context context)"}, "isGestureNavigationEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if navigation of list with wrist gestures is enabled.", "history": "", "FullName": "boolean isGestureNavigationEnabled ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onAttachedToWindow ()"}, "animateToCenter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically starts an animation that snaps the list to center on the element closest to the middle.", "history": "", "FullName": "void animateToCenter ()"}, "setMaximizeSingleItem(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to true, if there is only one item in the WearableListView, it will fill the entire WearableListView. When set to false, the default behavior will be used and the single item will fill only a third of the screen.", "history": "", "FullName": "void setMaximizeSingleItem (boolean maximizeSingleItem)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["KeyEvent", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onKeyDown (int keyCode, KeyEvent event)"}, "setEnableGestureNavigation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether navigation of list with wrist gestures is enabled.", "history": "", "FullName": "void setEnableGestureNavigation (boolean enabled)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["MotionEvent", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onTouchEvent (MotionEvent event)"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["MotionEvent", "MotionEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent event)"}, "setGreedyTouchMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true it will intercept all touch events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether WearableListView should intercept all touch events and also prevent the parent from receiving them.", "history": "", "FullName": "void setGreedyTouchMode (boolean greedy)"}, "resetLayoutManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the state of the layout manager that positions list items.", "history": "", "FullName": "void resetLayoutManager ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "void onDetachedFromWindow ()"}, "setInitialOffset(int)": {"Returns": [], "Parameters": [["int", "int: How far the elements should be pushed down."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "By default the first element of the list is initially positioned in the center of the screen. This method allows the developer to specify a different offset, e.g. to hide the WearableListView before the user is allowed to use it.", "history": "", "FullName": "void setInitialOffset (int top)"}, "fling(int, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "boolean fling (int velocityX, int velocityY)"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "http:##developer#android#com@B_android#view#View_E@", "http:##developer#android#com@B_android#view#ViewGroup_E@", "android.support.v7.widget.RecyclerView"], "ClassName": "android.support.wearable.view.WearableListView", "ClassDesc": "for centering and snapping your list items consider using the https:##developer#android#com@B_android#support#wearable#view#WearableRecyclerView_E@ supported by a https:##developer#android#com@B_android#support#v7#widget#SnapHelper_E@ or the https:##developer#android#com@B_android#support#v7#widget#LinearSnapHelper_E@. For scaling and otherwise modifying the list items based on their location on the screen consider using an https:##developer#android#com@B_android#support#wearable#view#WearableRecyclerView#ChildLayoutManager_E@ or the https:##developer#android#com@B_android#support#wearable#view#CurvedChildLayoutManager_E@. An alternative version of ListView that is optimized for ease of use on small screen wearable devices. It displays a vertically scrollable list of items, and automatically snaps to the nearest item when the user stops scrolling. For a quick start, you will need to implement a subclass of https:##developer#android#com@B_android#support#wearable#view#WearableListView#Adapter_E@, which will create and bind your views to the https:##developer#android#com@B_android#support#wearable#view#WearableListView#ViewHolder_E@ objects. If you want to add more visual treatment to your views when they become the central items of the WearableListView, have them implement the https:##developer#android#com@B_android#support#wearable#view#WearableListView#OnCenterProximityListener_E@ interface."}