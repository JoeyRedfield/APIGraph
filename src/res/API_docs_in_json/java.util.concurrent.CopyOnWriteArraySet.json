{"Functions": {"removeIf(java.util.function.Predicate<? super E>)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArraySet#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set if they're not already present. If the specified collection is also a set, the addAll operation effectively modifies this set so that its value is the", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "removeIf(java.util.function.Predicate<?superE>)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#util#function#Predicate_E@", "Predicate no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean removeIf (Predicate<? super E> filter)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this set is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArraySet#remove_E@"], "Permissions": [], "Description": "Removes from this set all of its elements that are contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "CopyOnWriteArraySet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an empty set.", "history": "Added in API level 1", "FullName": "public CopyOnWriteArraySet ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this set. The set will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this set in the order in which these elements were added. The Spliterator reports @B_java#util#Spliterator#IMMUTABLE_E@, @B_java#util#Spliterator#DISTINCT_E@, @B_java#util#Spliterator#SIZED_E@, and @B_java#util#Spliterator#SUBSIZED_E@. The spliterator provides a snapshot of the state of the set when the spliterator was constructed. No synchronization is needed while operating on the spliterator.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements contained in this set in the order in which these elements were added. The returned iterator provides a snapshot of the state of the set when the iterator was constructed. No synchronization is needed while traversing the iterator. The iterator does NOT support the remove method.", "history": "Added in API level 1", "FullName": "public Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this set"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this set for equality. Returns true if the specified object is the same object as this object, or if it is also a @B_java#util#Set_E@ and the elements returned by an e1 returned by the iterator over the specified set, there is an element e2 returned by the iterator over this set such that Objects.equals(e1, e2).", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set contains all of the elements of the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArraySet#contains_E@"], "Permissions": [], "Description": "Returns true if this set contains all of the elements of the specified collection. If the specified collection is also a set, this method returns true if it is a", "history": "Added in API level 1", "FullName": "public boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of an element of this set is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArraySet#remove_E@"], "Permissions": [], "Description": "Retains only the elements in this set that are contained in the specified collection. In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this set. (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this set.", "history": "Added in API level 1", "FullName": "public int size ()"}, "forEach(java.util.function.Consumer<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "isEmpty()": {"Returns": [["boolean", "true if this set contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains no elements.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this set contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be removed from this set, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified element from this set if it is present. More formally, removes an element e such that Objects.equals(o, e), if this set contains such an element. Returns true if this set contained the element (or equivalently, if this set changed as a result of the call). (This set will not contain the element once the call returns.)", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "CopyOnWriteArraySet(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a set containing all of the elements of the specified collection.", "history": "Added in API level 1", "FullName": "public CopyOnWriteArraySet (Collection<? extends E> c)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all the elements in this set"]], "Parameters": [["T[]", "T: the array into which the elements of this set are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array. If the set fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this set. If this set fits in the specified array with room to spare (i.e., the array has more elements than this set), the element in the array immediately following the end of the set is set to null. (This is useful in determining the length of this set If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#concurrent#CopyOnWriteArraySet#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a set known to contain only strings. The following code can be used to dump the set into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": ["@B_java#util#concurrent#CopyOnWriteArraySet#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set if they're not already present. If the specified collection is also a set, the addAll operation effectively modifies this set so that its value is the", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "forEach(java.util.function.Consumer<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#function#Consumer_E@", "Consumer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void forEach (Consumer<? super E> action)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this set contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this set is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this set contains the specified element. More formally, returns true if and only if this set contains an element e such that Objects.equals(o, e).", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true if this set did not already contain the specified element"]], "Parameters": [["E", "E: element to be added to this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this set if it is not already present. More formally, adds the specified element e to this set if the set contains no element e2 such that Objects.equals(e, e2). If this set already contains the element, the call leaves the set unchanged and returns false.", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@", "@B_java#util#AbstractSet_E@"], "ClassName": "java.util.concurrent.CopyOnWriteArraySet<E>", "ClassDesc": "A @B_java#util#Set_E@ that uses an internal @B_java#util#concurrent#CopyOnWriteArrayList_E@ for all of its operations. Thus, it shares the same basic properties: It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal. It is thread-safe. Mutative operations (add, set, remove, etc.) are expensive since they usually entail copying the entire underlying array. Iterators do not support the mutative remove operation. Traversal via iterators is fast and cannot encounter interference from other threads. Iterators rely on unchanging snapshots of the array at the time the iterators were constructed."}