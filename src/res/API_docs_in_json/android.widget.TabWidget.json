{"Functions": {"TabWidget(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public TabWidget (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setRightStripDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the right strip drawable This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#getRightStripDrawable_E@"], "Permissions": [], "Description": "Sets the drawable to use as the right part of the strip below the tab indicators.", "history": "Added in API level 8", "FullName": "public void setRightStripDrawable (Drawable drawable)"}, "setStripEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the bottom strips should be drawn."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controls whether the bottom strips on the tab indicators are drawn or not. The default is to draw them. If the user specifies a custom view for the tab indicators, then the TabHost class calls this method to disable drawing of the bottom strips.", "history": "Added in API level 8", "FullName": "public void setStripEnabled (boolean stripEnabled)"}, "setDividerDrawable(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable to use as a divider"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable to use as a divider between the tab indicators.", "history": "Added in API level 4", "FullName": "public void setDividerDrawable (int resId)"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "getChildDrawingOrder(int, int)": {"Returns": [["int", "The index of the child to draw this iteration."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: The current iteration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the child to draw for this iteration. Override this if you want to change the drawing order of children. By default, it returns i. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "added in API level 1", "FullName": "protected int getChildDrawingOrder (int childCount, int i)"}, "getLeftStripDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable used as the left part of the strip below the tab indicators, may be null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#setLeftStripDrawable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Drawable getLeftStripDrawable ()"}, "TabWidget(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabWidget (Context context, AttributeSet attrs, int defStyleAttr)"}, "isStripEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the bottom strips on the tab indicators are drawn or not.", "history": "Added in API level 8", "FullName": "public boolean isStripEnabled ()"}, "setDividerDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the divider drawable This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable to use as a divider between the tab indicators.", "history": "Added in API level 4", "FullName": "public void setDividerDrawable (Drawable drawable)"}, "setCurrentTab(int)": {"Returns": [], "Parameters": [["int", "int: the index of the tab that you want to indicate as the selected tab (tab brought to the front of the widget)"]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#focusCurrentTab_E@"], "Permissions": [], "Description": "Sets the current tab. This method is used to bring a tab to the front of the Widget, and is used to post to the rest of the UI that a different tab has been brought to the foreground. Note, this is separate from the traditional \"focus\" that is employed from the view logic. For instance, if we have a list in a tabbed view, a user may be navigating up and down the list, moving the UI focus (orange highlighting) through the list items. The cursor movement does not effect the \"selected\" tab though, because what is being scrolled through is all on the same tab. The selected tab only changes when we navigate between tabs (moving from the list view to the next tabbed view, in this example). To move both the focus AND the selected tab at once, please use @B_android#widget#TabWidget#focusCurrentTab_E@. Normally, the view logic takes care of adjusting the focus, so unless you're circumventing the UI, you'll probably just focus your interest here.", "history": "Added in API level 1", "FullName": "public void setCurrentTab (int index)"}, "getTabCount()": {"Returns": [["int", "the number of tab indicator views"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of tab indicator views.", "history": "Added in API level 4", "FullName": "public int getTabCount ()"}, "onFocusChange(android.view.View,boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose state has changed."], ["boolean", "boolean: The new focus state of v."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the focus state of a view has changed.", "history": "Added in API level 1", "FullName": "public void onFocusChange (View v, boolean hasFocus)"}, "onSizeChanged(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "Added in API level 1", "FullName": "protected void onSizeChanged (int w, int h, int oldw, int oldh)"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Added in API level 1", "FullName": "public void dispatchDraw (Canvas canvas)"}, "onResolvePointerIcon(android.view.MotionEvent,int)": {"Returns": [["@B_android#view#PointerIcon_E@", "no returns description in source"]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The MotionEvent from a mouse"], ["int", "int: The index of the pointer for which to retrieve the @B_android#view#PointerIcon_E@. This will be between 0 and @B_android#view#MotionEvent#getPointerCount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pointer icon for the motion event, or null if it doesn't specify the icon. The default implementation does not care the location or event types, but some subclasses may use it (such as WebViews).", "history": "Added in API level 24", "FullName": "public PointerIcon onResolvePointerIcon (MotionEvent event, int pointerIndex)"}, "setRightStripDrawable(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable to use as the right strip drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#getRightStripDrawable_E@"], "Permissions": [], "Description": "Sets the drawable to use as the right part of the strip below the tab indicators.", "history": "Added in API level 8", "FullName": "public void setRightStripDrawable (int resId)"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 1", "FullName": "public void setEnabled (boolean enabled)"}, "onFocusChange(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose state has changed."], ["boolean", "boolean: The new focus state of v."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the focus state of a view has changed.", "history": "added in API level 1", "FullName": "public void onFocusChange (View v, boolean hasFocus)"}, "addView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child)"}, "getChildDrawingOrder(int,int)": {"Returns": [["int", "the container position of a child for this drawing order position."]], "Parameters": [["int", "int no parameter comment"], ["int", "int: the drawing order position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts drawing order position to container position. Override this if you want to change the drawing order of children. By default, it returns drawingPosition. NOTE: In order for this method to be called, you must enable child ordering first by calling @B_android#view#ViewGroup#setChildrenDrawingOrderEnabled_E@.", "history": "Added in API level 1", "FullName": "protected int getChildDrawingOrder (int childCount, int i)"}, "childDrawableStateChanged(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The child whose drawable state has changed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If @B_android#view#ViewGroup#addStatesFromChildren_E@ is true, refreshes this group's drawable state (to include the states from its children).", "history": "Added in API level 1", "FullName": "public void childDrawableStateChanged (View child)"}, "setLeftStripDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the left strip drawable This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#getLeftStripDrawable_E@"], "Permissions": [], "Description": "Sets the drawable to use as the left part of the strip below the tab indicators.", "history": "Added in API level 8", "FullName": "public void setLeftStripDrawable (Drawable drawable)"}, "TabWidget(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabWidget (Context context)"}, "focusCurrentTab(int)": {"Returns": [], "Parameters": [["int", "int: The tab that you want focused (highlighted in orange) and selected (tab brought to the front of the widget)"]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#setCurrentTab_E@"], "Permissions": [], "Description": "Sets the current tab and focuses the UI on it. This method makes sure that the focused tab matches the selected tab, normally at @B_android#widget#TabWidget#setCurrentTab_E@. Normally this would not be an issue if we go through the UI, since the UI is responsible for calling TabWidget.onFocusChanged(), but in the case where we are selecting the tab programmatically, we'll need to make sure focus keeps up.", "history": "Added in API level 1", "FullName": "public void focusCurrentTab (int index)"}, "removeAllViews()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method to remove all child views from the ViewGroup. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void removeAllViews ()"}, "getRightStripDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the drawable used as the right part of the strip below the tab indicators, may be null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#setRightStripDrawable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public Drawable getRightStripDrawable ()"}, "TabWidget(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public TabWidget (Context context, AttributeSet attrs)"}, "setLeftStripDrawable(int)": {"Returns": [], "Parameters": [["int", "int: the resource identifier of the drawable to use as the left strip drawable"]], "Throws": [], "SeeAlso": ["@B_android#widget#TabWidget#getLeftStripDrawable_E@"], "Permissions": [], "Description": "Sets the drawable to use as the left part of the strip below the tab indicators.", "history": "Added in API level 8", "FullName": "public void setLeftStripDrawable (int resId)"}, "getChildTabViewAt(int)": {"Returns": [["@B_android#view#View_E@", "the tab indicator view at the given index"]], "Parameters": [["int", "int: the zero-based index of the tab indicator view to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tab indicator view at the given index.", "history": "Added in API level 4", "FullName": "public View getChildTabViewAt (int index)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.TabWidget", "ClassDesc": "Displays a list of tab labels representing each page in the parent's tab collection. The container object for this widget is @B_android#widget#TabHost_E@. When the user selects a tab, this object sends a message to the parent container, TabHost, to tell it to switch the displayed page. You typically won't use many methods directly on this object. The container TabHost is used to add labels, add the callback handler, and manage callbacks. You might call this object to iterate the list of tabs, or to tweak the layout of the tab list, but most methods should be called on the containing TabHost object."}