{"Functions": {"HostApduService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 19", "FullName": "public HostApduService ()"}, "processCommandApdu(byte[], android.os.Bundle)": {"Returns": [["byte[]", "a byte-array containing the response APDU, or null if no response APDU can be sent at this point."]], "Parameters": [["byte[]", "byte: The APDU that was received from the remote device"], ["@B_android#os#Bundle_E@", "Bundle: A bundle containing extra data. May be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when a command APDU has been received from a remote device. A response APDU can be provided directly by returning a byte-array in this method. Note that in general response APDUs must be sent as quickly as possible, given the fact that the user is likely holding his device over an NFC reader when this method is called. If there are multiple services that have registered for the same AIDs in their meta-data entry, you will only get called if the user has explicitly selected your service, either as a default or just for the next tap. This method is running on the main thread of your application. If you cannot return a response APDU immediately, return null and use the @B_android#nfc#cardemulation#HostApduService#sendResponseApdu_E@ method later.", "history": "added in API level 19", "FullName": "public abstract byte[] processCommandApdu (byte[] commandApdu, Bundle extras)"}, "sendResponseApdu(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: A byte-array containing the reponse APDU."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a response APDU back to the remote device. Note: this method may be called from any thread and will not block.", "history": "Added in API level 19", "FullName": "public final void sendResponseApdu (byte[] responseApdu)"}, "processCommandApdu(byte[],android.os.Bundle)": {"Returns": [["byte[]", "a byte-array containing the response APDU, or null if no response APDU can be sent at this point."]], "Parameters": [["byte[]", "byte: The APDU that was received from the remote device"], ["@B_android#os#Bundle_E@", "Bundle: A bundle containing extra data. May be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when a command APDU has been received from a remote device. A response APDU can be provided directly by returning a byte-array in this method. Note that in general response APDUs must be sent as quickly as possible, given the fact that the user is likely holding his device over an NFC reader when this method is called. If there are multiple services that have registered for the same AIDs in their meta-data entry, you will only get called if the user has explicitly selected your service, either as a default or just for the next tap. This method is running on the main thread of your application. If you cannot return a response APDU immediately, return null and use the @B_android#nfc#cardemulation#HostApduService#sendResponseApdu_E@ method later.", "history": "Added in API level 19", "FullName": "public abstract byte[] processCommandApdu (byte[] commandApdu, Bundle extras)"}, "notifyUnhandled()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calling this method allows the service to tell the OS that it won't be able to complete this transaction - for example, because it requires data connectivity that is not present at that moment. The OS may use this indication to give the user a list of alternative applications that can handle the last AID that was selected. If the user would select an application from the list, that action by itself will not cause the default to be changed; the selected application will be invoked for the next tap only. If there are no other applications that can handle this transaction, the OS will show an error dialog indicating your service could not complete the transaction. Note: this method may be called anywhere between the first @B_android#nfc#cardemulation#HostApduService#processCommandApdu_E@ call and a @B_android#nfc#cardemulation#HostApduService#onDeactivated_E@ call.", "history": "Added in API level 19", "FullName": "public final void notifyUnhandled ()"}, "onDeactivated(int)": {"Returns": [], "Parameters": [["int", "int: Either @B_android#nfc#cardemulation#HostApduService#DEACTIVATION_LINK_LOSS_E@ or @B_android#nfc#cardemulation#HostApduService#DEACTIVATION_DESELECTED_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called in two possible scenarios: The NFC link has been deactivated or lost A different AID has been selected and was resolved to a different service component", "history": "Added in API level 19", "FullName": "public abstract void onDeactivated (int reason)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 19", "FullName": "public final IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.nfc.cardemulation.HostApduService", "ClassDesc": "HostApduService is a convenience @B_android#app#Service_E@ class that can be extended to emulate an NFC card inside an Android service component. Cards emulated by this class are based on the NFC-Forum ISO-DEP protocol (based on ISO/IEC 14443-4) and support processing command Application Protocol Data Units (APDUs) as defined in the ISO/IEC 7816-4 specification. When a remote NFC device wants to talk to your service, it sends a so-called \"SELECT AID\" APDU as defined in the ISO/IEC 7816-4 specification. The AID is an application identifier defined in ISO/IEC 7816-4. The registration procedure for AIDs is defined in the ISO/IEC 7816-5 specification. If you don't want to register an AID, you are free to use AIDs in the proprietary range: bits 8-5 of the first byte must each be set to '1'. For example, \"0xF00102030405\" is a proprietary AID. If you do use proprietary AIDs, it is recommended to choose an AID of at least 6 bytes, to reduce the risk of collisions with other applications that might be using proprietary AIDs as well. In some cases, a service may need to register multiple AIDs to implement a certain application, and it needs to be sure that it is the default handler for all of these AIDs (as opposed to some AIDs in the group going to another service). An AID group is a list of AIDs that should be considered as belonging together by the OS. For all AIDs in an AID group, the OS will guarantee one of the following: All AIDs in the group are routed to this service No AIDs in the group are routed to this service In other words, there is no in-between state, where some AIDs in the group can be routed to this service, and some to another. Each AID group can be associated with a category. This allows the Android OS to classify services, and it allows the user to set defaults at the category level instead of the AID level. You can use @B_android#nfc#cardemulation#CardEmulation#isDefaultServiceForCategory_E@ to determine if your service is the default handler for a category. In this version of the platform, the only known categories are @B_android#nfc#cardemulation#CardEmulation#CATEGORY_PAYMENT_E@ and @B_android#nfc#cardemulation#CardEmulation#CATEGORY_OTHER_E@. AID groups without a category, or with a category that is not recognized by the current platform version, will automatically be grouped into the @B_android#nfc#cardemulation#CardEmulation#CATEGORY_OTHER_E@ category. To tell the platform which AIDs groups are requested by this service, a @B_android#nfc#cardemulation#HostApduService#SERVICE_META_DATA_E@ entry must be included in the declaration of the service. An example of a HostApduService manifest declaration is shown below: The @B_android#R#styleable#HostApduService_E@ is required to contain a @B_android#R#styleable#HostApduService_description_E@ attribute that contains a user-friendly description of the service that may be shown in UI. The @B_android#R#styleable#HostApduService_requireDeviceUnlock_E@ attribute can be used to specify that the device must be unlocked before this service can be invoked to handle APDUs. The @B_android#R#styleable#HostApduService_E@ must contain one or more @B_android#R#styleable#AidGroup_E@ tags. Each @B_android#R#styleable#AidGroup_E@ must contain one or more @B_android#R#styleable#AidFilter_E@ tags, each of which contains a single AID. The AID must be specified in hexadecimal format, and contain an even number of characters. @B_android#nfc#cardemulation#CardEmulation#getSelectionModeForCategory_E@. Once the platform has resolved a \"SELECT AID\" command APDU to a specific service component, the \"SELECT AID\" command APDU and all subsequent command APDUs will be sent to that service through @B_android#nfc#cardemulation#HostApduService#processCommandApdu_E@, until either: The NFC link is broken A \"SELECT AID\" APDU is received which resolves to another service These two scenarios are indicated by a call to @B_android#nfc#cardemulation#HostApduService#onDeactivated_E@. Use of this class requires the @B_android#content#pm#PackageManager#FEATURE_NFC_HOST_CARD_EMULATION_E@ to be present on the device."}