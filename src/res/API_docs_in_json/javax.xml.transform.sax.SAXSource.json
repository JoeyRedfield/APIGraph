{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "Base URL for the Source, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the base ID (URI or system ID) from where URIs will be resolved.", "history": "Added in API level 8", "FullName": "public String getSystemId ()"}, "SAXSource(org.xml.sax.XMLReader,org.xml.sax.InputSource)": {"Returns": [], "Parameters": [["@B_org#xml#sax#XMLReader_E@", "XMLReader: An XMLReader to be used for the parse."], ["@B_org#xml#sax#InputSource_E@", "InputSource: A SAX input source reference that must be non-null and that will be passed to the reader parse method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a SAXSource, using an @B_org#xml#sax#XMLReader_E@ and a SAX InputSource. The @B_javax#xml#transform#Transformer_E@ or @B_javax#xml#transform#sax#SAXTransformerFactory_E@ will set itself to be the reader's @B_org#xml#sax#ContentHandler_E@, and then will call reader.parse(inputSource).", "history": "Added in API level 8", "FullName": "public SAXSource (XMLReader reader, InputSource inputSource)"}, "setXMLReader(org.xml.sax.XMLReader)": {"Returns": [], "Parameters": [["@B_org#xml#sax#XMLReader_E@", "XMLReader: A valid XMLReader or XMLFilter reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the XMLReader to be used for the Source.", "history": "Added in API level 8", "FullName": "public void setXMLReader (XMLReader reader)"}, "SAXSource(org.xml.sax.InputSource)": {"Returns": [], "Parameters": [["@B_org#xml#sax#InputSource_E@", "InputSource: An input source reference that must be non-null and that will be passed to the parse method of the reader."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a SAXSource, using a SAX InputSource. The @B_javax#xml#transform#Transformer_E@ or @B_javax#xml#transform#sax#SAXTransformerFactory_E@ creates a reader via @B_org#xml#sax#helpers#XMLReaderFactory_E@ (if setXMLReader is not used), sets itself as the reader's @B_org#xml#sax#ContentHandler_E@, and calls reader.parse(inputSource).", "history": "Added in API level 8", "FullName": "public SAXSource (InputSource inputSource)"}, "setInputSource(org.xml.sax.InputSource)": {"Returns": [], "Parameters": [["@B_org#xml#sax#InputSource_E@", "InputSource: A valid InputSource reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the SAX InputSource to be used for the Source.", "history": "Added in API level 8", "FullName": "public void setInputSource (InputSource inputSource)"}, "getInputSource()": {"Returns": [["@B_org#xml#sax#InputSource_E@", "A valid InputSource reference, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the SAX InputSource to be used for the Source.", "history": "Added in API level 8", "FullName": "public InputSource getInputSource ()"}, "setSystemId(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The system identifier as a URI string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the system identifier for this Source. If an input source has already been set, it will set the system ID or that input source, otherwise it will create a new input source. The system identifier is optional if there is a byte stream or a character stream, but it is still useful to provide one, since the application can use it to resolve relative URIs and can include it in error messages and warnings (the parser will attempt to open a connection to the URI only if no byte stream or character stream is specified).", "history": "Added in API level 8", "FullName": "public void setSystemId (String systemId)"}, "sourceToInputSource(javax.xml.transform.Source)": {"Returns": [["@B_org#xml#sax#InputSource_E@", "An InputSource, or null if Source can not be converted."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: Must be a non-null Source reference."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to obtain a SAX InputSource object from a Source object.", "history": "Added in API level 8", "FullName": "public static InputSource sourceToInputSource (Source source)"}, "SAXSource()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#xml#transform#Transformer#transform_E@"], "Permissions": [], "Description": "Zero-argument default constructor. If this constructor is used, and no SAX source is set using @B_javax#xml#transform#sax#SAXSource#setInputSource_E@ , then the Transformer will create an empty source @B_org#xml#sax#InputSource_E@ using @B_org#xml#sax#InputSource#InputSource_E@.", "history": "Added in API level 8", "FullName": "public SAXSource ()"}, "getXMLReader()": {"Returns": [["@B_org#xml#sax#XMLReader_E@", "A valid XMLReader or XMLFilter reference, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the XMLReader to be used for the Source.", "history": "Added in API level 8", "FullName": "public XMLReader getXMLReader ()"}}, "Inheritance": [], "ClassName": "javax.xml.transform.sax.SAXSource", "ClassDesc": "Acts as an holder for SAX-style Source. Note that XSLT requires namespace support. Attempting to transform an input source that is not generated with a namespace-aware parser may result in errors. Parsers can be made namespace aware by calling the @B_javax#xml#parsers#SAXParserFactory#setNamespaceAware_E@ method."}