{"Functions": {"endDocument()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Finish writing. All unclosed start tags will be closed and output will be flushed. After calling this method no more output can be serialized until next call to setOutput()", "history": "Added in API level 1", "FullName": "public abstract void endDocument ()"}, "text(char[],int,int)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["char[]", "char no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes text, where special XML chars are escaped automatically", "history": "Added in API level 1", "FullName": "public abstract XmlSerializer text (char[] buf, int start, int len)"}, "startDocument(java.lang.String,java.lang.Boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Boolean_E@", "Boolean no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write <?xml declaration with encoding (if encoding not null) and standalone flag (if standalone not null) This method can only be called just after setOutput.", "history": "Added in API level 1", "FullName": "public abstract void startDocument (String encoding, Boolean standalone)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The value of named property."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of property to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the value of a property. The property name is any fully-qualified URI. I", "history": "Added in API level 1", "FullName": "public abstract Object getProperty (String name)"}, "endTag(java.lang.String, java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write end tag. Repetition of namespace and name is just for avoiding errors.", "history": "added in API level 1", "FullName": "public abstract XmlSerializer endTag (String namespace, String name)"}, "startTag(java.lang.String,java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a start tag with the given namespace and name. If there is no prefix defined for the given namespace, a prefix will be defined automatically. The explicit prefixes for namespaces can be established by calling setPrefix() immediately before this method. If namespace is null no namespace prefix is printed but just name. If namespace is empty string then serializer will make sure that default empty namespace is declared (in XML 1.0 xmlns='') or throw IllegalStateException if default namespace is already bound to non-empty string.", "history": "Added in API level 1", "FullName": "public abstract XmlSerializer startTag (String namespace, String name)"}, "getPrefix(java.lang.String, boolean)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return namespace that corresponds to given prefix If there is no prefix bound to this namespace return null but if generatePrefix is false then return generated prefix.", "history": "added in API level 1", "FullName": "public abstract String getPrefix (String namespace, boolean generatePrefix)"}, "docdecl(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void docdecl (String text)"}, "ignorableWhitespace(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void ignorableWhitespace (String text)"}, "startDocument(java.lang.String, java.lang.Boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Boolean_E@", "Boolean no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write <?xml declaration with encoding (if encoding not null) and standalone flag (if standalone not null) This method can only be called just after setOutput.", "history": "added in API level 1", "FullName": "public abstract void startDocument (String encoding, Boolean standalone)"}, "entityRef(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void entityRef (String text)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write all pending output to the stream. If method startTag() or attribute() was called then start tag is closed (final >) before flush() is called on underlying output stream.", "history": "Added in API level 1", "FullName": "public abstract void flush ()"}, "processingInstruction(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void processingInstruction (String text)"}, "getPrefix(java.lang.String,boolean)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return namespace that corresponds to given prefix If there is no prefix bound to this namespace return null but if generatePrefix is false then return generated prefix.", "history": "Added in API level 1", "FullName": "public abstract String getPrefix (String namespace, boolean generatePrefix)"}, "setProperty(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the property is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. (the property name is recommended to be URI for uniqueness). Some well known optional properties are defined in", "history": "Added in API level 1", "FullName": "public abstract void setProperty (String name, Object value)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "namespace set by startTag() that is currently in scope"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the current element as set by startTag(). It can only be null before first call to startTag() or when last endTag() is called to close first startTag().", "history": "Added in API level 1", "FullName": "public abstract String getName ()"}, "setPrefix(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: must be not null (or IllegalArgumentException is thrown)"], ["@B_java#lang#String_E@", "String: must be not null"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the given prefix to the given namespace. This call is valid for the next element including child elements. The prefix and namespace MUST be always declared even if prefix is not used in element (startTag() or attribute()) - for XML 1.0 it must result in declaring xmlns:prefix='namespace' (or xmlns:prefix=\"namespace\" depending what character is used to quote attribute value).", "history": "Added in API level 1", "FullName": "public abstract void setPrefix (String prefix, String namespace)"}, "setPrefix(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: must be not null (or IllegalArgumentException is thrown)"], ["@B_java#lang#String_E@", "String: must be not null"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Binds the given prefix to the given namespace. This call is valid for the next element including child elements. The prefix and namespace MUST be always declared even if prefix is not used in element (startTag() or attribute()) - for XML 1.0 it must result in declaring xmlns:prefix='namespace' (or xmlns:prefix=\"namespace\" depending what character is used to quote attribute value).", "history": "added in API level 1", "FullName": "public abstract void setPrefix (String prefix, String namespace)"}, "setOutput(java.io.OutputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set to use binary output stream with given encoding.", "history": "Added in API level 1", "FullName": "public abstract void setOutput (OutputStream os, String encoding)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the feature is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set feature identified by name (recommended to be URI for uniqueness). Some well known optional features are defined in", "history": "added in API level 1", "FullName": "public abstract void setFeature (String name, boolean state)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "The value of named feature."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of feature to be retrieved."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if feature string is null"]], "SeeAlso": [], "Permissions": [], "Description": "Return the current value of the feature with given name.", "history": "Added in API level 1", "FullName": "public abstract boolean getFeature (String name)"}, "setProperty(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the property is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. (the property name is recommended to be URI for uniqueness). Some well known optional properties are defined in", "history": "added in API level 1", "FullName": "public abstract void setProperty (String name, Object value)"}, "text(char[], int, int)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["char[]", "char no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes text, where special XML chars are escaped automatically", "history": "added in API level 1", "FullName": "public abstract XmlSerializer text (char[] buf, int start, int len)"}, "endTag(java.lang.String,java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write end tag. Repetition of namespace and name is just for avoiding errors.", "history": "Added in API level 1", "FullName": "public abstract XmlSerializer endTag (String namespace, String name)"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the feature is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set feature identified by name (recommended to be URI for uniqueness). Some well known optional features are defined in", "history": "Added in API level 1", "FullName": "public abstract void setFeature (String name, boolean state)"}, "getNamespace()": {"Returns": [["@B_java#lang#String_E@", "namespace set by startTag() that is currently in scope"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the namespace URI of the current element as set by startTag(). if there was startTag(\"\", ...) then getNamespace() returns \"\" if there was startTag(null, ...) then getNamespace() returns null", "history": "Added in API level 1", "FullName": "public abstract String getNamespace ()"}, "attribute(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Write an attribute. Calls to attribute() MUST follow a call to startTag() immediately. If there is no prefix defined for the given namespace, a prefix will be defined automatically. If namespace is null or empty string no namespace prefix is printed but just name.", "history": "Added in API level 1", "FullName": "public abstract XmlSerializer attribute (String namespace, String name, String value)"}, "text(java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes text, where special XML chars are escaped automatically", "history": "Added in API level 1", "FullName": "public abstract XmlSerializer text (String text)"}, "setOutput(java.io.Writer)": {"Returns": [], "Parameters": [["@B_java#io#Writer_E@", "Writer no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the output to the given writer.", "history": "Added in API level 1", "FullName": "public abstract void setOutput (Writer writer)"}, "comment(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void comment (String text)"}, "cdsect(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract void cdsect (String text)"}, "getDepth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current depth of the element. Outside the root element, the depth is 0. The depth is incremented by 1 when startTag() is called. The depth is decremented after the call to endTag() event was observed.", "history": "Added in API level 1", "FullName": "public abstract int getDepth ()"}, "setOutput(java.io.OutputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set to use binary output stream with given encoding.", "history": "added in API level 1", "FullName": "public abstract void setOutput (OutputStream os, String encoding)"}, "startTag(java.lang.String, java.lang.String)": {"Returns": [["@B_org#xmlpull#v1#XmlSerializer_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a start tag with the given namespace and name. If there is no prefix defined for the given namespace, a prefix will be defined automatically. The explicit prefixes for namespaces can be established by calling setPrefix() immediately before this method. If namespace is null no namespace prefix is printed but just name. If namespace is empty string then serializer will make sure that default empty namespace is declared (in XML 1.0 xmlns='') or throw IllegalStateException if default namespace is already bound to non-empty string.", "history": "added in API level 1", "FullName": "public abstract XmlSerializer startTag (String namespace, String name)"}}, "Inheritance": [], "ClassName": "org.xmlpull.v1.XmlSerializer", "ClassDesc": "Define an interface to serialization of XML Infoset. This interface abstracts away if serialized XML is XML 1.0 compatible text or other formats of XML 1.0 serializations (such as binary XML for example with WBXML). Exceptions that may be thrown are: IOException or runtime exception (more runtime exceptions can be thrown but are not declared and as such have no semantics defined for this interface): IllegalArgumentException - for almost all methods to signal that argument is illegal IllegalStateException - to signal that call has good arguments but is not expected here (violation of contract) and for features/properties when requesting setting unimplemented feature/property (UnsupportedOperationException would be better but it is not in MIDP)"}