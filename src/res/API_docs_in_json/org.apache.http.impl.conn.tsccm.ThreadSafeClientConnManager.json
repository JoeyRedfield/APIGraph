{"Functions": {"getConnectionsInPool(org.apache.http.conn.routing.HttpRoute)": {"Returns": [["", "the total number of pooled connections for that route"]], "Parameters": [["@B_org#apache#http#conn#routing#HttpRoute_E@", "the route in question"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total number of pooled connections for the given route. This is the total number of connections that have been created and are still in use by this connection manager for the route. This value will not exceed the maximum number of connections per host.", "history": "Added in API level 1", "FullName": "public int getConnectionsInPool (HttpRoute route)"}, "ThreadSafeClientConnManager(org.apache.http.params.HttpParams, org.apache.http.conn.scheme.SchemeRegistry)": {"Returns": [], "Parameters": [["@B_org#apache#http#params#HttpParams_E@", "the parameters for this manager"], ["@B_org#apache#http#conn#scheme#SchemeRegistry_E@", "the scheme registry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new thread safe connection manager.", "history": "Added in API level 1", "FullName": "public ThreadSafeClientConnManager (HttpParams params, SchemeRegistry schreg)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the garbage collector has detected that this instance is no longer reachable. The default implementation does nothing, but this method can be overridden to free resources. Note that objects that override finalize are significantly more expensive than objects that don't. Finalizers may be run a long time after the object is no longer reachable, depending on memory pressure, so it's a bad idea to rely on them for cleanup. Note also that finalizers are run on a single VM-wide finalizer thread, so doing blocking work in a finalizer is a bad idea. A finalizer is usually only necessary for a class that has a native peer and needs to call a native method to destroy that peer. Even then, it's better to provide an explicit close method (and implement @B_java#io#Closeable_E@), and insist that callers manually dispose of instances. This works well for something like files, but less well for something like a BigInteger where typical calling code would have to deal with lots of temporaries. Unfortunately, code that creates lots of temporaries is the worst kind of code from the point of view of the single finalizer thread. If you @B_java#lang#ref#ReferenceQueue_E@ and having your own thread process that queue. Unlike constructors, finalizers are not automatically chained. You are responsible for calling super.finalize() yourself. Uncaught exceptions thrown by finalizers are ignored and do not terminate the finalizer thread. See", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "createConnectionOperator(org.apache.http.conn.scheme.SchemeRegistry)": {"Returns": [["", "the connection operator to use"]], "Parameters": [["@B_org#apache#http#conn#scheme#SchemeRegistry_E@", "the scheme registry to use, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook for creating the connection operator. It is called by the constructor. Derived classes can override this method to change the instantiation of the operator. The default implementation here instantiates @B_org#apache#http#impl#conn#DefaultClientConnectionOperator_E@.", "history": "Added in API level 1", "FullName": "protected ClientConnectionOperator createConnectionOperator (SchemeRegistry schreg)"}, "releaseConnection(org.apache.http.conn.ManagedClientConnection, long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#ManagedClientConnection_E@", "the connection to release"], ["long", "the duration of time this connection is valid for reuse"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit of time validDuration is measured in"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases a connection for use by others. You may optionally specify how long the connection is valid to be reused. Values <= 0 are considered to be valid forever. If the connection is not marked as reusable, the connection will not be reused regardless of the valid duration. If the connection has been released before, the call will be ignored.", "history": "Added in API level 1", "FullName": "public void releaseConnection (ManagedClientConnection conn, long validDuration, TimeUnit timeUnit)"}, "closeIdleConnections(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [["long", "the idle time of connections to be closed"], ["@B_java#util#concurrent#TimeUnit_E@", "the unit for the idletime"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes idle connections in the pool. Open connections in the pool that have not been used for the timespan given by the argument will be closed. Currently allocated connections are not subject to this method. Times will be checked with milliseconds precision All expired connections will also be closed.", "history": "Added in API level 1", "FullName": "public void closeIdleConnections (long idleTimeout, TimeUnit tunit)"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shuts down this connection manager and releases allocated resources. This includes closing all connections, whether they are currently used or not.", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "requestConnection(org.apache.http.conn.routing.HttpRoute, java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new @B_org#apache#http#conn#ClientConnectionRequest_E@, from which a @B_org#apache#http#conn#ManagedClientConnection_E@ can be obtained or the request can be aborted.", "history": "Added in API level 1", "FullName": "public ClientConnectionRequest requestConnection (HttpRoute route, Object state)"}, "closeExpiredConnections()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes all expired connections in the pool. Open connections in the pool that have not been used for the timespan defined when the connection was released will be closed. Currently allocated connections are not subject to this method. Times will be checked with milliseconds precision.", "history": "Added in API level 1", "FullName": "public void closeExpiredConnections ()"}, "getSchemeRegistry()": {"Returns": [["", "the scheme registry, never null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the scheme registry used by this manager.", "history": "Added in API level 1", "FullName": "public SchemeRegistry getSchemeRegistry ()"}, "getConnectionsInPool()": {"Returns": [["", "the total number of pooled connections"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total number of pooled connections. This is the total number of connections that have been created and are still in use by this connection manager. This value will not exceed the maximum number of connections in total.", "history": "Added in API level 1", "FullName": "public int getConnectionsInPool ()"}, "createConnectionPool(org.apache.http.params.HttpParams)": {"Returns": [["", "the connection pool to use"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook for creating the connection pool.", "history": "Added in API level 1", "FullName": "protected AbstractConnPool createConnectionPool (HttpParams params)"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Manages a pool of @B_org#apache#http#conn#OperatedClientConnection_E@. This class is derived from MultiThreadedHttpConnectionManager in HttpClient 3. See there for original authors."}