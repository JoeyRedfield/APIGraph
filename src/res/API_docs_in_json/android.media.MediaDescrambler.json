{"Functions": {"descramble(java.nio.ByteBuffer,java.nio.ByteBuffer,android.media.MediaCodec.CryptoInfo)": {"Returns": [["int", "number of bytes that have been successfully descrambled, with negative values indicating errors."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: ByteBuffer containing the scrambled data, which starts at srcBuf.position(). This value must never be null."], ["@B_java#nio#ByteBuffer_E@", "ByteBuffer: ByteBuffer to hold the descrambled data, which starts at dstBuf.position(). This value must never be null."], ["@B_android#media#MediaCodec#CryptoInfo_E@", "MediaCodec.CryptoInfo: a @B_android#media#MediaCodec#CryptoInfo_E@ structure describing the subsamples contained in srcBuf. The iv and mode fields in CryptoInfo are not used. key[0] contains the MPEG2TS scrambling control bits (as defined in ETSI TS 100 289 (2011): \"Digital Video Broadcasting (DVB); Support for use of the DVB Scrambling Algorithm version 3 within digital broadcasting systems\"), and the value must be one of @B_android#media#MediaDescrambler#SCRAMBLE_CONTROL_UNSCRAMBLED_E@, @B_android#media#MediaDescrambler#SCRAMBLE_CONTROL_RESERVED_E@, @B_android#media#MediaDescrambler#SCRAMBLE_CONTROL_EVEN_KEY_E@ or @B_android#media#MediaDescrambler#SCRAMBLE_CONTROL_ODD_KEY_E@. key[1] is a set of bit flags, with the only possible bit being @B_android#media#MediaDescrambler#SCRAMBLE_FLAG_PES_HEADER_E@ currently. key[2~15] are not used. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the descrambler instance is not valid."], ["@B_android#media#MediaCasStateException_E@", "for CAS-specific state exceptions."]], "SeeAlso": [], "Permissions": [], "Description": "Descramble a ByteBuffer of data described by a @B_android#media#MediaCodec#CryptoInfo_E@ structure.", "history": "Added in API level 26", "FullName": "public int descramble (ByteBuffer srcBuf, ByteBuffer dstBuf, MediaCodec.CryptoInfo cryptoInfo)"}, "requiresSecureDecoderComponent(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The mime type of the media data This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the descrambler instance is not valid."]], "SeeAlso": [], "Permissions": [], "Description": "Query if the scrambling scheme requires the use of a secure decoder to decode data of the given mime type.", "history": "Added in API level 26", "FullName": "public boolean requiresSecureDecoderComponent (String mime)"}, "MediaDescrambler(int)": {"Returns": [], "Parameters": [["int", "int: The system id of the scrambling scheme."]], "Throws": [["@B_android#media#MediaCasException#UnsupportedCasException_E@", "if the scrambling scheme is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Instantiate a MediaDescrambler.", "history": "Added in API level 26", "FullName": "public MediaDescrambler (int CA_system_id)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 26", "FullName": "protected void finalize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this resource, relinquishing any underlying resources. This method is invoked automatically on objects managed by the try-with-resources statement. While this interface method is declared to throw Exception, implementers are strongly encouraged to declare concrete implementations of the close method to throw more specific exceptions, or to throw no exception at all if the close operation cannot fail. Cases where the close operation may fail require careful attention by implementers. It is strongly advised to relinquish the underlying resources and to internally mark the resource as closed, prior to throwing the exception. The close method is unlikely to be invoked more than once and so this ensures that the resources are released in a timely manner. Furthermore it reduces problems that could arise when the resource wraps, or is wrapped, by another resource. Implementers of this interface are also strongly advised to not have the close method throw @B_java#lang#InterruptedException_E@. This exception interacts with a thread's interrupted status, and runtime misbehavior is likely to occur if an InterruptedException is AutoCloseable.close method should not throw it. Note that unlike the @B_java#io#Closeable#close_E@ method of @B_java#io#Closeable_E@, this close method is not required to be idempotent. In other words, calling this close method more than once may have some visible side effect, unlike Closeable.close which is required to have no effect if called more than once. However, implementers of this interface are strongly encouraged to make their close methods idempotent.", "history": "Added in API level 26", "FullName": "public void close ()"}, "setMediaCasSession(android.media.MediaCas.Session)": {"Returns": [], "Parameters": [["@B_android#media#MediaCas#Session_E@", "MediaCas.Session: the MediaCas session to associate with this MediaDescrambler instance. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the descrambler instance is not valid."], ["@B_android#media#MediaCasStateException_E@", "for CAS-specific state exceptions."]], "SeeAlso": [], "Permissions": [], "Description": "Associate a MediaCas session with this MediaDescrambler instance. The MediaCas session is used to securely load decryption keys for the descrambler. The crypto keys loaded through the MediaCas session may be selected for use during the descrambling operation performed by @B_android#media#MediaExtractor_E@ by specifying even or odd key in the @B_android#media#MediaCodec#CryptoInfo#key_E@ field.", "history": "Added in API level 26", "FullName": "public void setMediaCasSession (MediaCas.Session session)"}}, "Inheritance": [], "ClassName": "android.media.MediaDescrambler", "ClassDesc": "MediaDescrambler class can be used in conjunction with @B_android#media#MediaCodec_E@ and @B_android#media#MediaExtractor_E@ to decode media data scrambled by conditional access (CA) systems such as those in the ISO/IEC13818-1. A MediaDescrambler object is initialized from a session opened by a MediaCas object, and can be used to descramble media streams scrambled with that session's keys. Scrambling schemes are identified by 16-bit unsigned integer as in CA_system_id."}