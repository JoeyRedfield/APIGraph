{"Functions": {"setParameter(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter, which may begin with a namespace URI in curly braces ({})."], ["@B_java#lang#Object_E@", "Object: The value object. This can be any valid Java object. It is up to the processor to provide the proper object coercion or to simply pass the object on for use in an extension."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If value is null."]], "SeeAlso": [], "Permissions": [], "Description": "Add a parameter for the transformation. Pass a qualified name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a '{' character. For example, if a URI and local name were obtained from an element defined with <xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/>, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used.", "history": "added in API level 8", "FullName": "public abstract void setParameter (String name, Object value)"}, "getParameter(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "A parameter that has been set with setParameter."]], "Parameters": [["@B_java#lang#String_E@", "String: of Object to get"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a parameter that was explicitly set with setParameter. This method does not return a default parameter value, which cannot be determined until the node context is evaluated during the transformation process.", "history": "Added in API level 8", "FullName": "public abstract Object getParameter (String name)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset this Transformer to its original configuration. Transformer is reset to the same state as when it was created with @B_javax#xml#transform#TransformerFactory#newTransformer_E@, @B_javax#xml#transform#TransformerFactory#newTransformer_E@ or @B_javax#xml#transform#Templates#newTransformer_E@. reset() is designed to allow the reuse of existing Transformers thus saving resources associated with the creation of new Transformers. The reset Transformer is not guaranteed to have the same @B_javax#xml#transform#URIResolver_E@ or @B_javax#xml#transform#ErrorListener_E@ Objects, e.g. @B_java#lang#Object#equals_E@. It is guaranteed to have a functionally equal URIResolver and ErrorListener.", "history": "Added in API level 8", "FullName": "public void reset ()"}, "clearParameters()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear all parameters set with setParameter.", "history": "Added in API level 8", "FullName": "public abstract void clearParameters ()"}, "transform(javax.xml.transform.Source,javax.xml.transform.Result)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: The XML input to transform."], ["@B_javax#xml#transform#Result_E@", "Result: The Result of transforming the xmlSource."]], "Throws": [["@B_javax#xml#transform#TransformerException_E@", "If an unrecoverable error occurs during the course of the transformation."]], "SeeAlso": [], "Permissions": [], "Description": "Transform the XML Source to a Result. Specific transformation behavior is determined by the settings of the TransformerFactory in effect when the Transformer was instantiated and any modifications made to the Transformer instance. An empty Source is represented as an empty document as constructed by @B_javax#xml#parsers#DocumentBuilder#newDocument_E@. The result of transforming an empty Source depends on the transformation behavior; it is not always an empty Result.", "history": "Added in API level 8", "FullName": "public abstract void transform (Source xmlSource, Result outputTarget)"}, "Transformer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor is protected on purpose.", "history": "Added in API level 8", "FullName": "protected Transformer ()"}, "getErrorListener()": {"Returns": [["@B_javax#xml#transform#ErrorListener_E@", "The current error handler, which should never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the error event handler in effect for the transformation. Implementations must provide a default error listener.", "history": "Added in API level 8", "FullName": "public abstract ErrorListener getErrorListener ()"}, "getOutputProperties()": {"Returns": [["@B_java#util#Properties_E@", "A copy of the set of output properties in effect for the next transformation."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#xml#transform#OutputKeys_E@", "@B_java#util#Properties_E@"], "Permissions": [], "Description": "Get a copy of the output properties for the transformation. The properties returned should contain properties set by the user, and properties set by the stylesheet, and these properties are \"defaulted\" by default properties specified by @B_javax#xml#transform#Transformer#setOutputProperty_E@, @B_javax#xml#transform#Transformer#setOutputProperties_E@, in the stylesheet, or the default properties, while getOutputProperties().get(String key) will only retrieve properties that were explicitly set by @B_javax#xml#transform#Transformer#setOutputProperty_E@, @B_javax#xml#transform#Transformer#setOutputProperties_E@, or in the stylesheet. Note that mutation of the Properties object returned will not effect the properties that the transformer contains. If any of the argument keys are not recognized and are not namespace qualified, the property will be ignored and not returned. In other words the behavior is not orthogonal with @B_javax#xml#transform#Transformer#setOutputProperties_E@.", "history": "Added in API level 8", "FullName": "public abstract Properties getOutputProperties ()"}, "setParameter(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the parameter, which may begin with a namespace URI in curly braces ({})."], ["@B_java#lang#Object_E@", "Object: The value object. This can be any valid Java object. It is up to the processor to provide the proper object coercion or to simply pass the object on for use in an extension."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If value is null."]], "SeeAlso": [], "Permissions": [], "Description": "Add a parameter for the transformation. Pass a qualified name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a '{' character. For example, if a URI and local name were obtained from an element defined with <xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/>, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used.", "history": "Added in API level 8", "FullName": "public abstract void setParameter (String name, Object value)"}, "getURIResolver()": {"Returns": [["@B_javax#xml#transform#URIResolver_E@", "An object that implements the URIResolver interface, or null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an object that will be used to resolve URIs used in document().", "history": "Added in API level 8", "FullName": "public abstract URIResolver getURIResolver ()"}, "setErrorListener(javax.xml.transform.ErrorListener)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#ErrorListener_E@", "ErrorListener: The new error listener."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if listener is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the error event listener in effect for the transformation.", "history": "Added in API level 8", "FullName": "public abstract void setErrorListener (ErrorListener listener)"}, "setOutputProperty(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A non-null String that specifies an output property name, which may be namespace qualified."], ["@B_java#lang#String_E@", "String: The non-null string value of the output property."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the property is not supported, and is not qualified with a namespace."]], "SeeAlso": ["@B_javax#xml#transform#OutputKeys_E@"], "Permissions": [], "Description": "Set an output property that will be in effect for the transformation. Pass a qualified property name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a '{' character. For example, if a URI and local name were obtained from an element defined with <xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/>, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used. The Properties object that was passed to @B_javax#xml#transform#Transformer#setOutputProperties_E@ won't be effected by calling this method.", "history": "Added in API level 8", "FullName": "public abstract void setOutputProperty (String name, String value)"}, "getOutputProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The string value of the output property, or null if no property was found."]], "Parameters": [["@B_java#lang#String_E@", "String: A non-null String that specifies an output property name, which may be namespace qualified."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the property is not supported."]], "SeeAlso": ["@B_javax#xml#transform#OutputKeys_E@"], "Permissions": [], "Description": "Get an output property that is in effect for the transformer. The property specified may be a property that was set with setOutputProperty, or it may be a property specified in the stylesheet.", "history": "Added in API level 8", "FullName": "public abstract String getOutputProperty (String name)"}, "setOutputProperties(java.util.Properties)": {"Returns": [], "Parameters": [["@B_java#util#Properties_E@", "Properties: A set of output properties that will be used to override any of the same properties in affect for the transformation."]], "Throws": [], "SeeAlso": ["@B_javax#xml#transform#OutputKeys_E@", "@B_java#util#Properties_E@"], "Permissions": [], "Description": "Set the output properties for the transformation. These properties will override properties set in the Templates with xsl:output. If argument to this function is null, any properties previously set are removed, and the value will revert to the value defined in the templates object. Pass a qualified property key name as a two-part string, the namespace URI enclosed in curly braces ({}), followed by the local name. If the name has a null URL, the String only contain the local name. An application can safely check for a non-null URI by testing to see if the first character of the name is a '{' character. For example, if a URI and local name were obtained from an element defined with <xyz:foo xmlns:xyz=\"http://xyz.foo.com/yada/baz.html\"/>, then the qualified name would be \"{http://xyz.foo.com/yada/baz.html}foo\". Note that no prefix is used. An IllegalArgumentException is thrown if any of the argument keys are not recognized and are not namespace qualified.", "history": "Added in API level 8", "FullName": "public abstract void setOutputProperties (Properties oformat)"}, "setURIResolver(javax.xml.transform.URIResolver)": {"Returns": [], "Parameters": [["@B_javax#xml#transform#URIResolver_E@", "URIResolver: An object that implements the URIResolver interface, or null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an object that will be used to resolve URIs used in document(). If the resolver argument is null, the URIResolver value will be cleared and the transformer will no longer have a resolver.", "history": "Added in API level 8", "FullName": "public abstract void setURIResolver (URIResolver resolver)"}}, "Inheritance": [], "ClassName": "javax.xml.transform.Transformer", "ClassDesc": "An instance of this abstract class can transform a source tree into a result tree. An instance of this class can be obtained with the @B_javax#xml#transform#TransformerFactory#newTransformer_E@ method. This instance may then be used to process XML from a variety of sources and write the transformation output to a variety of sinks. An object of this class may not be used in multiple threads running concurrently. Different Transformers may be used concurrently by different threads. A Transformer may be used multiple times. Parameters and output properties are preserved across transformations."}