{"Functions": {"shutdownService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the necessary calls to stop (or unbind) the service under test, and calls onDestroy(). Ordinarily this is called automatically (by @B_android#test#ServiceTestCase#tearDown_E@, but you can call it directly from your test in order to check for proper shutdown behavior.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void shutdownService ()"}, "tearDown()": {"Returns": [], "Parameters": [], "Throws": [["", "java.lang.Exception"], ["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Shuts down the service under test. Ensures all resources are cleaned up and garbage collected before moving on to the next test. This method is called after each test method. Subclasses that override this method must call super.tearDown() as their last statement.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void tearDown ()"}, "ServiceTestCase(java.lang.Class<T>)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class: The type of the service under test."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor", "history": "Added in API level 1", "FullName": "public ServiceTestCase (Class<T> serviceClass)"}, "getApplication()": {"Returns": [["@B_android#app#Application_E@", "The application object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#test#ServiceTestCase#setApplication_E@"], "Permissions": [], "Description": "Returns the Application object in use by the service under test.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public Application getApplication ()"}, "startService(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: An Intent that identifies a service, of the same form as the Intent passed to @B_android#content#Context#startService_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the service under test, in the same way as if it were started by @B_android#content#Context#startService_E@ with an @B_android#content#Intent_E@ that identifies a service. If you use this method to start the service, it is automatically stopped by @B_android#test#ServiceTestCase#tearDown_E@.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void startService (Intent intent)"}, "setupService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the service under test and attaches all injected dependencies (Context, Application) to it. This is called automatically by @B_android#test#ServiceTestCase#startService_E@ or by @B_android#test#ServiceTestCase#bindService_E@. If you need to call @B_android#test#AndroidTestCase#setContext_E@ or @B_android#test#ServiceTestCase#setApplication_E@, do so before calling this method.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void setupService ()"}, "testServiceTestCaseSetUpProperly()": {"Returns": [], "Parameters": [], "Throws": [["", "java.lang.Exception"], ["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Tests that @B_android#test#ServiceTestCase#setupService_E@ runs correctly and issues an @B_junit#framework#Assert#assertNotNull_E@ if it does. You can override this test method if you wish.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void testServiceTestCaseSetUpProperly ()"}, "getSystemContext()": {"Returns": [["@B_android#content#Context_E@", "A normal system context."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the real system context that is saved by @B_android#test#ServiceTestCase#setUp_E@. Use it to create mock or other types of context objects for the service under test.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public Context getSystemContext ()"}, "getService()": {"Returns": [["T", "An instance of the service under test. This instance is created automatically when a test calls @B_android#test#ServiceTestCase#startService_E@ or @B_android#test#ServiceTestCase#bindService_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public T getService ()"}, "setUp()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets the current system context and stores it. Extend this method to do your own test initialization. If you do so, you must call super.setUp() as the first statement in your override. The method is called before each test method is executed.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected void setUp ()"}, "setApplication(android.app.Application)": {"Returns": [], "Parameters": [["@B_android#app#Application_E@", "Application: The Application object that is used by the service under test."]], "Throws": [], "SeeAlso": ["@B_android#test#ServiceTestCase#getApplication_E@"], "Permissions": [], "Description": "Sets the application that is used during the test. If you do not call this method, a new @B_android#test#mock#MockApplication_E@ object is used.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "public void setApplication (Application application)"}, "bindService(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "An object whose type is a subclass of IBinder, for making further calls into the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: An Intent object of the form expected by @B_android#content#Context#bindService_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the service under test, in the same way as if it were started by @B_android#content#Context#bindService_E@ with an @B_android#content#Intent_E@ that identifies a service. Notice that the parameters are different. You do not provide a @B_android#content#ServiceConnection_E@ object or the flags parameter. Instead, you only provide the Intent. The method returns an object whose type is a subclass of @B_android#os#IBinder_E@, or null if the method fails. An IBinder object refers to a communication channel between the application and the service. The flag is assumed to be @B_android#content#Context#BIND_AUTO_CREATE_E@. See Note: To be able to use bindService in a test, the service must implement getService() method. An example of this is in the ApiDemos sample application, in the LocalService demo.", "history": "Added in API level 1 Deprecated in API level 24", "FullName": "protected IBinder bindService (Intent intent)"}}, "Inheritance": ["@B_junit#framework#Assert_E@", "@B_junit#framework#TestCase_E@", "@B_android#test#AndroidTestCase_E@"], "ClassName": "@B_android#app#Service_E@", "ClassDesc": "Use This test case provides a framework in which you can test Service classes in a controlled environment. It provides basic support for the lifecycle of a Service, and hooks with which you can inject various dependencies and control the environment in which your Service is tested. ServiceTestCase enforces this protocol: The @B_android#test#ServiceTestCase#setUp_E@ method is called before each test method. The base implementation gets the system context. If you override setUp(), you must call super.setUp() as the first statement in your override. The test case waits to call @B_android#app#Service#onCreate_E@ until one of your test methods calls @B_android#test#ServiceTestCase#startService_E@ or @B_android#test#ServiceTestCase#bindService_E@. This gives you an opportunity to set up or adjust any additional framework or test logic before you test the running service. When one of your test methods calls @B_android#test#ServiceTestCase#startService_E@ or @B_android#test#ServiceTestCase#bindService_E@, the test case calls @B_android#app#Service#onCreate_E@ and then calls either @B_android#content#ContextWrapper#startService_E@ or @B_android#content#ContextWrapper#bindService_E@, as appropriate. It also stores values needed to track and support the lifecycle. After each test method finishes, the test case calls the @B_android#test#ServiceTestCase#tearDown_E@ method. This method stops and destroys the service with the appropriate calls, depending on how the service was started. If you override tearDown(), your must call the super.tearDown() as the last statement in your override. @B_android#content#Context_E@ and its associated @B_android#app#Application_E@. The ServiceTestCase framework allows you to inject modified, mock, or isolated replacements for these dependencies, and thus perform unit tests with controlled dependencies in an isolated environment. By default, the test case is injected with a full system context and a generic @B_android#test#mock#MockApplication_E@ object. You can inject alternatives to either of these by invoking @B_android#test#AndroidTestCase#setContext_E@ or @B_android#test#ServiceTestCase#setApplication_E@. You must do this before calling startService() or bindService(). The test framework provides a number of alternatives for Context, including @B_android#test#mock#MockContext_E@, @B_android#test#RenamingDelegatingContext_E@, @B_android#content#ContextWrapper_E@, and @B_android#test#IsolatedContext_E@."}