{"Functions": {"nextLong(long, long)": {"Returns": [["long", "a pseudorandom long value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the least value returned"], ["long", "long: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "added in API level 24", "FullName": "public long nextLong (long origin, long bound)"}, "ints(int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "ints(long, int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}, "longs(long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it.", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize)"}, "SplittableRandom(long)": {"Returns": [], "Parameters": [["long", "long: the initial seed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SplittableRandom instance using the specified initial seed. SplittableRandom instances created with the same seed in the same program generate identical sequences of values.", "history": "Added in API level 24", "FullName": "public SplittableRandom (long seed)"}, "ints(int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public IntStream ints (int randomNumberOrigin, int randomNumberBound)"}, "doubles(long)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of double values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize)"}, "nextLong()": {"Returns": [["long", "a pseudorandom long value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value.", "history": "Added in API level 24", "FullName": "public long nextLong ()"}, "nextDouble(double, double)": {"Returns": [["double", "a pseudorandom double value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the least value returned"], ["double", "double: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public double nextDouble (double origin, double bound)"}, "longs(long, long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "ints()": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom int values from this generator and/or one split from it.", "history": "Added in API level 24", "FullName": "public IntStream ints ()"}, "doubles(double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "doubles(long, double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "longs()": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it.", "history": "Added in API level 24", "FullName": "public LongStream longs ()"}, "nextDouble(double,double)": {"Returns": [["double", "a pseudorandom double value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the least value returned"], ["double", "double: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between the specified origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public double nextDouble (double origin, double bound)"}, "nextDouble()": {"Returns": [["double", "a pseudorandom double value between zero (inclusive) and one (exclusive)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between zero (inclusive) and one (exclusive).", "history": "Added in API level 24", "FullName": "public double nextDouble ()"}, "ints(long)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values"]], "Parameters": [["long", "long: the number of values to generate"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it.", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize)"}, "SplittableRandom()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new SplittableRandom instance that is likely to generate sequences of values that are statistically independent of those of any other instances in the current program; and may, and typically does, vary across program invocations.", "history": "Added in API level 24", "FullName": "public SplittableRandom ()"}, "nextDouble(double)": {"Returns": [["double", "a pseudorandom double value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["double", "double: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom double value between 0.0 (inclusive) and the specified bound (exclusive).", "history": "Added in API level 24", "FullName": "public double nextDouble (double bound)"}, "nextInt(int, int)": {"Returns": [["int", "a pseudorandom int value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the least value returned"], ["int", "int: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "added in API level 24", "FullName": "public int nextInt (int origin, int bound)"}, "nextInt(int,int)": {"Returns": [["int", "a pseudorandom int value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the least value returned"], ["int", "int: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "Added in API level 24", "FullName": "public int nextInt (int origin, int bound)"}, "longs(long, long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "doubles(double, double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "added in API level 24", "FullName": "public DoubleStream doubles (double randomNumberOrigin, double randomNumberBound)"}, "split()": {"Returns": [["@B_java#util#SplittableRandom_E@", "the new SplittableRandom instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a new SplittableRandom instance that shares no mutable state with this instance. However, with very high probability, the set of values collectively generated by the two objects has the same statistical properties as if the same quantity of values were generated by a single thread using a single SplittableRandom object. Either or both of the two objects may be further split using the split() method, and the same expected statistical properties apply to the entire set of generators constructed by such recursive splitting.", "history": "Added in API level 24", "FullName": "public SplittableRandom split ()"}, "doubles(long,double,double)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["double", "double: the origin (inclusive) of each random value"], ["double", "double: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero"], ["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom double values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles (long streamSize, double randomNumberOrigin, double randomNumberBound)"}, "nextInt()": {"Returns": [["int", "a pseudorandom int value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value.", "history": "Added in API level 24", "FullName": "public int nextInt ()"}, "nextLong(long,long)": {"Returns": [["long", "a pseudorandom long value between the origin (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the least value returned"], ["long", "long: the upper bound (exclusive)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if origin is greater than or equal to bound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between the specified origin (inclusive) and the specified bound (exclusive).", "history": "Added in API level 24", "FullName": "public long nextLong (long origin, long bound)"}, "longs(long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public LongStream longs (long randomNumberOrigin, long randomNumberBound)"}, "nextLong(long)": {"Returns": [["long", "a pseudorandom long value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["long", "long: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom long value between zero (inclusive) and the specified bound (exclusive).", "history": "Added in API level 24", "FullName": "public long nextLong (long bound)"}, "nextBoolean()": {"Returns": [["boolean", "a pseudorandom boolean value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom boolean value.", "history": "Added in API level 24", "FullName": "public boolean nextBoolean ()"}, "nextInt(int)": {"Returns": [["int", "a pseudorandom int value between zero (inclusive) and the bound (exclusive)"]], "Parameters": [["int", "int: the upper bound (exclusive). Must be positive."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bound is not positive"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a pseudorandom int value between zero (inclusive) and the specified bound (exclusive).", "history": "Added in API level 24", "FullName": "public int nextInt (int bound)"}, "doubles()": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a stream of pseudorandom double values"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an effectively unlimited stream of pseudorandom double values from this generator and/or one split from it; each value is between zero (inclusive) and one (exclusive).", "history": "Added in API level 24", "FullName": "public DoubleStream doubles ()"}, "longs(long,long,long)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a stream of pseudorandom long values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["long", "long: the origin (inclusive) of each random value"], ["long", "long: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom long values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public LongStream longs (long streamSize, long randomNumberOrigin, long randomNumberBound)"}, "ints(long,int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "a stream of pseudorandom int values, each with the given origin (inclusive) and bound (exclusive)"]], "Parameters": [["long", "long: the number of values to generate"], ["int", "int: the origin (inclusive) of each random value"], ["int", "int: the bound (exclusive) of each random value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if streamSize is less than zero, or randomNumberOrigin is greater than or equal to randomNumberBound"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a stream producing the given streamSize number of pseudorandom int values from this generator and/or one split from it; each value conforms to the given origin (inclusive) and bound (exclusive).", "history": "Added in API level 24", "FullName": "public IntStream ints (long streamSize, int randomNumberOrigin, int randomNumberBound)"}}, "Inheritance": [], "ClassName": "java.util.SplittableRandom", "ClassDesc": "A generator of uniform pseudorandom values applicable for use in (among other contexts) isolated parallel computations that may generate subtasks. Class SplittableRandom supports methods for producing pseudorandom numbers of type int, long, and double with similar usages as for class @B_java#util#Random_E@ but differs in the following ways: Series of generated values pass the DieHarder suite testing independence and uniformity properties of random number generators. (Most recently validated with period (length of any series of generated values before it repeats) is at least 2Method @B_java#util#SplittableRandom#split_E@ constructs and returns a new SplittableRandom instance that shares no mutable state with the current instance. However, with very high probability, the values collectively generated by the two objects have the same statistical properties as if the same quantity of values were generated by a single thread using a single SplittableRandom object. Instances of SplittableRandom are not thread-safe. They are designed to be split, not shared, across threads. For example, a @B_java#util#concurrent#ForkJoinTask_E@ computation using random numbers might include a construction of the form new Subtask(aSplittableRandom.split()).fork(). This class provides additional methods for generating random streams, that employ the above techniques when used in stream.parallel() mode. Instances of SplittableRandom are not cryptographically secure. Consider instead using @B_java#security#SecureRandom_E@ in security-sensitive applications. Additionally, default-constructed instances do not use a cryptographically random seed unless the java.util.secureRandomSeed is set to true."}