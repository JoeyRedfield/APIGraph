{"Functions": {"updateAppWidgetOptions(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The bundle of options information."]], "Throws": [], "SeeAlso": ["@B_android#appwidget#AppWidgetProvider#onAppWidgetOptionsChanged_E@"], "Permissions": [], "Description": "Specify some extra information for the widget provider. Causes a callback to the AppWidgetProvider.", "history": "Added in API level 16", "FullName": "public void updateAppWidgetOptions (Bundle options)"}, "dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The SparseArray which holds previously saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#restoreHierarchyState_E@ to retrieve the state for this view and its children. May be overridden to modify how restoring happens to a view's children; for example, some views may want to not store state for their children.", "history": "Added in API level 3", "FullName": "protected void dispatchRestoreInstanceState (SparseArray<Parcelable> container)"}, "updateAppWidgetSize(android.os.Bundle,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: The bundle of options, in addition to the size information, can be null."], ["int", "int: The minimum width in dips that the widget will be displayed at."], ["int", "int: The maximum height in dips that the widget will be displayed at."], ["int", "int: The maximum width in dips that the widget will be displayed at."], ["int", "int: The maximum height in dips that the widget will be displayed at."]], "Throws": [], "SeeAlso": ["@B_android#appwidget#AppWidgetProvider#onAppWidgetOptionsChanged_E@"], "Permissions": [], "Description": "Provide guidance about the size of this widget to the AppWidgetManager. The widths and heights should correspond to the full area the AppWidgetHostView is given. Padding added by the framework will be accounted for automatically. This information gets embedded into the AppWidget options and causes a callback to the AppWidgetProvider.", "history": "Added in API level 16", "FullName": "public void updateAppWidgetSize (Bundle newOptions, int minWidth, int minHeight, int maxWidth, int maxHeight)"}, "setAppWidget(int,android.appwidget.AppWidgetProviderInfo)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#appwidget#AppWidgetProviderInfo_E@", "AppWidgetProviderInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the AppWidget that will be displayed by this view. This method also adds default padding to widgets, as described in @B_android#appwidget#AppWidgetHostView#getDefaultPaddingForWidget_E@ and can be overridden in order to add custom padding.", "history": "Added in API level 3", "FullName": "public void setAppWidget (int appWidgetId, AppWidgetProviderInfo info)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 3", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setOnLightBackground(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#RemoteViews#setLightBackgroundLayoutId_E@"], "Permissions": [], "Description": "Sets whether the widget is being displayed on a light/white background and use an alternate UI if available.", "history": "Added in API level 29", "FullName": "public void setOnLightBackground (boolean onLightBackground)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#FrameLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 3", "FullName": "public FrameLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getAppWidgetId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getAppWidgetId ()"}, "prepareView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Prepare the given view to be shown. This might include adjusting @B_android#widget#FrameLayout#LayoutParams_E@ before inserting.", "history": "Added in API level 3", "FullName": "protected void prepareView (View view)"}, "dispatchSaveInstanceState(android.util.SparseArray<android.os.Parcelable>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The SparseArray in which to save the view's state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#saveHierarchyState_E@ to store the state for this view and its children. May be overridden to modify how freezing happens to a view's children; for example, some views may want to not store state for their children.", "history": "Added in API level 3", "FullName": "protected void dispatchSaveInstanceState (SparseArray<Parcelable> container)"}, "AppWidgetHostView(android.content.Context,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["int", "int: Resource ID of in animation to use"], ["int", "int: Resource ID of out animation to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a host view. Uses specified animations when pushing @B_android#appwidget#AppWidgetHostView#updateAppWidget_E@.", "history": "Added in API level 3", "FullName": "public AppWidgetHostView (Context context, int animationIn, int animationOut)"}, "getDefaultPaddingForWidget(android.content.Context,android.content.ComponentName,android.graphics.Rect)": {"Returns": [["@B_android#graphics#Rect_E@", "default padding for this widget, in pixels"]], "Parameters": [["@B_android#content#Context_E@", "Context: the current context"], ["@B_android#content#ComponentName_E@", "ComponentName: the component name of the widget"], ["@B_android#graphics#Rect_E@", "Rect: Rect in which to place the output, if null, a new Rect will be allocated and returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of ICE_CREAM_SANDWICH we are automatically adding padding to widgets targeting ICE_CREAM_SANDWICH and higher. The new widget design guidelines strongly recommend that widget developers do not add extra padding to their widgets. This will help achieve consistency among widgets. Note: this method is only needed by developers of AppWidgetHosts. The method is provided in order for the AppWidgetHost to account for the automatic padding when computing the number of cells to allocate to a particular widget.", "history": "Added in API level 15", "FullName": "public static Rect getDefaultPaddingForWidget (Context context, ComponentName component, Rect padding)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 3", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "getErrorView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate and return a view that represents an error state.", "history": "Added in API level 3", "FullName": "protected View getErrorView ()"}, "getDefaultView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate and return the default layout requested by AppWidget provider.", "history": "Added in API level 3", "FullName": "protected View getDefaultView ()"}, "getAppWidgetInfo()": {"Returns": [["@B_android#appwidget#AppWidgetProviderInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public AppWidgetProviderInfo getAppWidgetInfo ()"}, "AppWidgetHostView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a host view. Uses default fade animations.", "history": "Added in API level 3", "FullName": "public AppWidgetHostView (Context context)"}, "updateAppWidget(android.widget.RemoteViews)": {"Returns": [], "Parameters": [["@B_android#widget#RemoteViews_E@", "RemoteViews no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process a set of @B_android#widget#RemoteViews_E@ coming in as an update from the AppWidget provider. Will animate into these new views as needed", "history": "Added in API level 3", "FullName": "public void updateAppWidget (RemoteViews remoteViews)"}, "setExecutor(java.util.concurrent.Executor)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use or null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets an executor which can be used for asynchronously inflating. CPU intensive tasks like view inflation or loading images will be performed on the executor. The updates will still be applied on the UI thread.", "history": "Added in API level 26", "FullName": "public void setExecutor (Executor executor)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#FrameLayout_E@"], "ClassName": "android.appwidget.AppWidgetHostView", "ClassDesc": "Provides the glue to show AppWidget views. This class offers automatic animation between updates, and will try recycling old views for each incoming @B_android#widget#RemoteViews_E@."}