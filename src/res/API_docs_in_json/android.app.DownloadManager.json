{"Functions": {"query(android.app.DownloadManager.Query)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor over the result set of downloads, with columns consisting of all the COLUMN_* constants."]], "Parameters": [["@B_android#app#DownloadManager#Query_E@", "DownloadManager.Query: parameters specifying filters for this query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query the download manager about downloads that have been requested.", "history": "Added in API level 9", "FullName": "public Cursor query (DownloadManager.Query query)"}, "remove(long...)": {"Returns": [["int", "the number of downloads actually removed"]], "Parameters": [["long...", "long: the IDs of the downloads to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel downloads and remove them from the download manager. Each download will be stopped if it was running, and it will no longer be accessible through the download manager. If there is a downloaded file, partial or complete, it is deleted.", "history": "Added in API level 9", "FullName": "public int remove (long... ids)"}, "getMaxBytesOverMobile(android.content.Context)": {"Returns": [["@B_java#lang#Long_E@", "maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no limit"]], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@ to use for accessing the @B_android#content#ContentResolver_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no limit", "history": "Added in API level 11", "FullName": "public static Long getMaxBytesOverMobile (Context context)"}, "getUriForDownloadedFile(long)": {"Returns": [["@B_android#net#Uri_E@", "the @B_android#net#Uri_E@ of the given downloaded file id, if download was successful. null otherwise."]], "Parameters": [["long", "long: the id of the downloaded file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#net#Uri_E@ of the given downloaded file id, if the file is downloaded successfully. Otherwise, null is returned.", "history": "Added in API level 11", "FullName": "public Uri getUriForDownloadedFile (long id)"}, "enqueue(android.app.DownloadManager.Request)": {"Returns": [["long", "an ID for the download, unique across the system. This ID is used to make future calls related to this download."]], "Parameters": [["@B_android#app#DownloadManager#Request_E@", "DownloadManager.Request: the parameters specifying this download"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enqueue a new download. The download will start automatically once the download manager is ready to execute it and connectivity is available.", "history": "Added in API level 9", "FullName": "public long enqueue (DownloadManager.Request request)"}, "addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)": {"Returns": [["long", "an ID for the download entry added to the downloads app, unique across the system This ID is used to make future calls related to this download."]], "Parameters": [["@B_java#lang#String_E@", "String: the title that would appear for this file in Downloads App."], ["@B_java#lang#String_E@", "String: the description that would appear for this file in Downloads App."], ["boolean", "boolean: true if the file is to be scanned by MediaScanner. Files scanned by MediaScanner appear in the applications used to view media (for example, Gallery app)."], ["@B_java#lang#String_E@", "String: mimetype of the file."], ["@B_java#lang#String_E@", "String: absolute pathname to the file. The file should be world-readable, so that it can be managed by the Downloads App and any other app that is used to read it (for example, Gallery app to display the file, if the file contents represent a video/image)."], ["long", "long: length of the downloaded file"], ["boolean", "boolean: true if a notification is to be sent, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead contribute files to @B_android#provider#MediaStore#Downloads_E@ collection to make them available to user as part of Downloads. Adds a file to the downloads database system, so it could appear in Downloads App (and thus become eligible for management by the Downloads App). It is helpful to make the file scannable by MediaScanner by setting the param isMediaScannerScannable to true. It makes the file visible in media managing applications such as Gallery App, which could be a useful purpose of using this API. For applications targeting @B_android#os#Build#VERSION_CODES#Q_E@ or above, path must be within directories owned by the application {e.g. @B_android#content#Context#getExternalFilesDir_E@} or if the application is running under the legacy storage model (see @B_android#R#styleable#AndroidManifestApplication_requestLegacyExternalStorage_E@), path can also be within the top-level Downloads directory (as returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@ with @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@).", "history": "Added in API level 12 Deprecated in API level 29", "FullName": "public long addCompletedDownload (String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification)"}, "openDownloadedFile(long)": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "a read-only @B_android#os#ParcelFileDescriptor_E@"]], "Parameters": [["long", "long: the ID of the download"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the destination file does not already exist"]], "SeeAlso": [], "Permissions": [], "Description": "Open a downloaded file for reading. The download must have completed.", "history": "Added in API level 9", "FullName": "public ParcelFileDescriptor openDownloadedFile (long id)"}, "addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean,android.net.Uri,android.net.Uri)": {"Returns": [["long", "an ID for the download entry added to the downloads app, unique across the system This ID is used to make future calls related to this download."]], "Parameters": [["@B_java#lang#String_E@", "String: the title that would appear for this file in Downloads App."], ["@B_java#lang#String_E@", "String: the description that would appear for this file in Downloads App."], ["boolean", "boolean: true if the file is to be scanned by MediaScanner. Files scanned by MediaScanner appear in the applications used to view media (for example, Gallery app)."], ["@B_java#lang#String_E@", "String: mimetype of the file."], ["@B_java#lang#String_E@", "String: absolute pathname to the file. The file should be world-readable, so that it can be managed by the Downloads App and any other app that is used to read it (for example, Gallery app to display the file, if the file contents represent a video/image)."], ["long", "long: length of the downloaded file"], ["boolean", "boolean: true if a notification is to be sent, false otherwise"], ["@B_android#net#Uri_E@", "Uri: the original HTTP URI of the download"], ["@B_android#net#Uri_E@", "Uri: the HTTP Referer for the download"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Apps should instead contribute files to @B_android#provider#MediaStore#Downloads_E@ collection to make them available to user as part of Downloads. Adds a file to the downloads database system, so it could appear in Downloads App (and thus become eligible for management by the Downloads App). It is helpful to make the file scannable by MediaScanner by setting the param isMediaScannerScannable to true. It makes the file visible in media managing applications such as Gallery App, which could be a useful purpose of using this API. For applications targeting @B_android#os#Build#VERSION_CODES#Q_E@ or above, path must be within directories owned by the application {e.g. @B_android#content#Context#getExternalFilesDir_E@} or if the application is running under the legacy storage model (see @B_android#R#styleable#AndroidManifestApplication_requestLegacyExternalStorage_E@), path can also be within the top-level Downloads directory (as returned by @B_android#os#Environment#getExternalStoragePublicDirectory_E@ with @B_android#os#Environment#DIRECTORY_DOWNLOADS_E@).", "history": "Added in API level 24 Deprecated in API level 29", "FullName": "public long addCompletedDownload (String title, String description, boolean isMediaScannerScannable, String mimeType, String path, long length, boolean showNotification, Uri uri, Uri referer)"}, "getMimeTypeForDownloadedFile(long)": {"Returns": [["@B_java#lang#String_E@", "the media type of the given downloaded file id, if download was successful. null otherwise."]], "Parameters": [["long", "long: the id of the downloaded file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the media type of the given downloaded file id, if the file was downloaded successfully. Otherwise, null is returned.", "history": "Added in API level 11", "FullName": "public String getMimeTypeForDownloadedFile (long id)"}, "getRecommendedMaxBytesOverMobile(android.content.Context)": {"Returns": [["@B_java#lang#Long_E@", "recommended maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no recommended limit."]], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@ to use for accessing the @B_android#content#ContentResolver_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns recommended maximum size, in bytes, of downloads that may go over a mobile connection; or null if there's no recommended limit. The user will have the option to bypass this limit.", "history": "Added in API level 11", "FullName": "public static Long getRecommendedMaxBytesOverMobile (Context context)"}}, "Inheritance": [], "ClassName": "android.app.DownloadManager", "ClassDesc": "The download manager is a system service that handles long-running HTTP downloads. Clients may request that a URI be downloaded to a particular destination file. The download manager will conduct the download in the background, taking care of HTTP interactions and retrying downloads after failures or across connectivity changes and system reboots. Apps that request downloads through this API should register a broadcast receiver for @B_android#app#DownloadManager#ACTION_NOTIFICATION_CLICKED_E@ to appropriately handle when the user clicks on a running download in a notification or from the downloads UI. Note that the application must have the @B_android#Manifest#permission#INTERNET_E@ permission to use this class."}