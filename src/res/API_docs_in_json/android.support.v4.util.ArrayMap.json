{"Functions": {"ArrayMap(android.support.v4.util.SimpleArrayMap)": {"Returns": [], "Parameters": [["@B_android#support#v4#util#SimpleArrayMap_E@", "SimpleArrayMap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with the mappings from the given ArrayMap.", "history": "added in version 22.0.0", "FullName": "ArrayMap (SimpleArrayMap map)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any keys were removed from the array map, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to determine which keys to keep."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all keys in the array map that do", "history": "added in version 22.0.0", "FullName": "boolean retainAll (Collection<?> collection)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Collection_E@ for iterating over and interacting with all values in the array map.", "history": "added in version 22.0.0", "FullName": "Collection<V> values ()"}, "ArrayMap(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with a given initial capacity.", "history": "added in version 22.0.0", "FullName": "ArrayMap (int capacity)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Set_E@ for iterating over and interacting with all keys in the array map.", "history": "added in version 22.0.0", "FullName": "Set<K> keySet ()"}, "ArrayMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "ArrayMap ()"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: The map whose contents are to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a @B_android#support#v4#util#SimpleArrayMap#put_E@ of all key/value pairs in", "history": "added in version 22.0.0", "FullName": "void putAll (Map<? extends K, ? extends V> map)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_java#util#Set_E@ for iterating over and interacting with all mappings in the array map. the semantics of this Set are subtly different than that of a @B_java#util#HashMap_E@: most important, the @B_java#util#Map#Entry_E@ object returned by its iterator is a single object that exists for the entire iterator, so you can @B_java#util#Iterator#next_E@.", "history": "added in version 22.0.0", "FullName": "Set<Entry<K, V>> entrySet ()"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if this array map contains a key for every entry in collection, else returns false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be checked against."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if the array map contains all of the keys in the given collection.", "history": "added in version 22.0.0", "FullName": "boolean containsAll (Collection<?> collection)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "Returns true if any keys were removed from the array map, else false."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: The collection whose contents are to be used to remove keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all keys in the array map that exist in the given collection.", "history": "added in version 22.0.0", "FullName": "boolean removeAll (Collection<?> collection)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#util#SimpleArrayMap_E@"], "ClassName": "android.support.v4.util.ArrayMap<K, V>", "ClassDesc": "ArrayMap is a generic key->value mapping data structure that is designed to be more memory efficient than a traditional @B_java#util#HashMap_E@, this implementation is a version of the platform's android.util.ArrayMap that can be used on older versions of the platform. It keeps its mappings in an array data structure -- an integer array of hash codes for each item, and an Object array of the key/value pairs. This allows it to avoid having to create an extra object for every entry put in to the map, and it also tries to control the growth of the size of these arrays more aggressively (since growing them only requires copying the entries in the array, not rebuilding a hash map). If you don't need the standard Java container APIs provided here (iterators etc), consider using @B_android#support#v4#util#SimpleArrayMap_E@ instead. Note that this implementation is not intended to be appropriate for data structures that may contain large numbers of items. It is generally slower than a traditional HashMap, since lookups require a binary search and adds and removes require inserting and deleting entries in the array. For containers holding up to hundreds of items, the performance difference is not significant, less than 50%. Because this container is intended to better balance memory use, unlike most other standard Java containers it will shrink its array as items are removed from it. Currently you have no control over this shrinking -- if you set a capacity and then remove an item, it may reduce the capacity to better match the current size. In the future an explicit call to set the capacity should turn off this aggressive shrinking behavior."}