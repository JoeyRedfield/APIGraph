{"Functions": {"getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if this map contains a mapping for the specified key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "added in API level 26", "FullName": "public boolean remove (Object key, Object value)"}, "HashMap(int, float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "added in API level 1", "FullName": "public HashMap (int initialCapacity, float loadFactor)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "Added in API level 24", "FullName": "public V putIfAbsent (K key, V value)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map. The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "HashMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "Added in API level 1", "FullName": "public HashMap ()"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping: @B_java#util#Map#merge_E@ is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "HashMap(int)": {"Returns": [], "Parameters": [["int", "int: the initial capacity."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "Added in API level 1", "FullName": "public HashMap (int initialCapacity)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [], "SeeAlso": ["@B_java#util#HashMap#put_E@"], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key==null ? k==null : key.equals(k)), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not null. The @B_java#util#HashMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map.", "history": "Added in API level 1", "FullName": "public int size ()"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if no value is associated with the key"]], "Parameters": [["K", "K: key with which the resulting value is to be associated"], ["V", "V: the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to recompute a value if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping: If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean remove (Object key, Object value)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose mapping is to be removed from the map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for the specified key from this map if present.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "HashMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new", "history": "Added in API level 1", "FullName": "public HashMap (Map<? extends K, ? extends V> m)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "added in API level 26", "FullName": "public V putIfAbsent (K key, V value)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "Added in API level 24", "FullName": "public V replace (K key, V value)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the mapping function to compute a value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: Or to implement a multi-value map, Map<K,Collection<V>>, supporting multiple values per key: The mapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "added in API level 26", "FullName": "public V replace (K key, V value)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "added in API level 26", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "HashMap(int,float)": {"Returns": [], "Parameters": [["int", "int: the initial capacity"], ["float", "float: the load factor"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the initial capacity is negative or the load factor is nonpositive"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty", "history": "Added in API level 1", "FullName": "public HashMap (int initialCapacity, float loadFactor)"}, "HashMap(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new", "history": "added in API level 1", "FullName": "public HashMap (Map<? extends K, ? extends V> m)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.HashMap<K, V>", "ClassDesc": "Hash table based implementation of the This implementation provides constant-time performance for the basic operations (An instance of As a general rule, the default load factor (.75) offers a good tradeoff between time and space costs. Higher values decrease the space overhead but increase the lookup cost (reflected in most of the operations of the If many mappings are to be stored in a hashCode() is a sure way to slow down performance of any hash table. To ameliorate impact, when keys are @B_java#lang#Comparable_E@, this class may use comparison order among keys to help break ties. @B_java#util#Collections#synchronizedMap_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the map:The iterators returned by all of this class's \"collection view methods\" are @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw This class is a member of the"}