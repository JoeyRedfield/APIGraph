{"Functions": {"getAnimatedFraction()": {"Returns": [["float", "Elapsed/interpolated fraction of the animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current animation fraction, which is the elapsed/interpolated fraction used in the most recent frame update on the animation.", "history": "Added in API level 12", "FullName": "public float getAnimatedFraction ()"}, "setFloatValues(float...)": {"Returns": [], "Parameters": [["float...", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets float values that will be animated between. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects.", "history": "Added in API level 11", "FullName": "public void setFloatValues (float... values)"}, "getCurrentPlayTime()": {"Returns": [["long", "The current position in time of the animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current position of the animation in time, which is equal to the current time minus the time that the animation started. An animation that is not yet started will return a value of zero, unless the animation has has its play time set via @B_android#animation#ValueAnimator#setCurrentPlayTime_E@ or @B_android#animation#ValueAnimator#setCurrentFraction_E@, in which case it will return the time that was set.", "history": "Added in API level 11", "FullName": "public long getCurrentPlayTime ()"}, "setStartDelay(long)": {"Returns": [], "Parameters": [["long", "long: The amount of the delay, in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay starting the animation after @B_android#animation#ValueAnimator#start_E@ is called. Note that the start delay should always be non-negative. Any negative start delay will be clamped to 0 on N and above.", "history": "Added in API level 11", "FullName": "public void setStartDelay (long startDelay)"}, "removeAllUpdateListeners()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all listeners from the set listening to frame updates for this animation.", "history": "Added in API level 11", "FullName": "public void removeAllUpdateListeners ()"}, "reverse()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays the ValueAnimator in reverse. If the animation is already running, it will stop itself and play backwards from the point reached when reverse was called. If the animation is not currently running, then it will start from the end and play backwards. This behavior is only set for the current animation; future playing of the animation will use the default behavior of playing forward.", "history": "Added in API level 11", "FullName": "public void reverse ()"}, "setFrameDelay(long)": {"Returns": [], "Parameters": [["long", "long: the requested time between frames, in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, between each frame of the animation. This is a requested time that the animation will attempt to honor, but the actual delay between frames may be different, depending on system load and capabilities. This is a static function because the same delay will be applied to all animations, since they are all run off of a single timing loop. The frame delay may be ignored when the animation system uses an external timing source, such as the display refresh rate (vsync), to govern animations. Note that this method should be called from the same thread that @B_android#animation#ValueAnimator#start_E@ is called in order to have the new frame delay take effect on that animation. A runtime exception will be thrown if the calling thread does not have a Looper.", "history": "Added in API level 11", "FullName": "public static void setFrameDelay (long frameDelay)"}, "isRunning()": {"Returns": [["boolean", "Whether the Animator is running."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this Animator is currently running (having been started and gone past any initial startDelay period and not yet ended).", "history": "Added in API level 11", "FullName": "public boolean isRunning ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to @B_android#animation#Animator#AnimatorListener#onAnimationStart_E@ for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy.", "history": "Added in API level 11", "FullName": "public void start ()"}, "setCurrentFraction(float)": {"Returns": [], "Parameters": [["float", "float: The fraction to which the animation is advanced or rewound. Values outside the range of 0 to the maximum fraction for the animator will be clamped to the correct range."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the animation to the specified fraction. This fraction should be between 0 and the total fraction of the animation, including any repetition. That is, a fraction of 0 will position the animation at the beginning, a value of 1 at the end, and a value of 2 at the end of a reversing animator that repeats once. If the animation has not yet been started, then it will not advance forward after it is set to this fraction; it will simply set the fraction to this value and perform any appropriate actions based on that fraction. If the animation is already running, then setCurrentFraction() will set the current fraction to this value and continue playing from that point. @B_android#animation#Animator#AnimatorListener_E@ events are not called due to changing the fraction; those events are only processed while the animation is running.", "history": "Added in API level 22", "FullName": "public void setCurrentFraction (float fraction)"}, "setIntValues(int...)": {"Returns": [], "Parameters": [["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets int values that will be animated between. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects.", "history": "Added in API level 11", "FullName": "public void setIntValues (int... values)"}, "setRepeatMode(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#animation#ValueAnimator#RESTART_E@ or @B_android#animation#ValueAnimator#REVERSE_E@ Value is @B_android#animation#ValueAnimator#RESTART_E@, or @B_android#animation#ValueAnimator#REVERSE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines what this animation should do when it reaches the end. This setting is applied only when the repeat count is either greater than 0 or @B_android#animation#ValueAnimator#INFINITE_E@. Defaults to @B_android#animation#ValueAnimator#RESTART_E@.", "history": "Added in API level 11", "FullName": "public void setRepeatMode (int value)"}, "setEvaluator(android.animation.TypeEvaluator)": {"Returns": [], "Parameters": [["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: the evaluator to be used this animation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The type evaluator to be used when calculating the animated values of this animation. The system will automatically assign a float or int evaluator based on the type of startValue and endValue in the constructor. But if these values are not one of these primitive types, or if different evaluation is desired (such as is necessary with int values that represent colors), a custom evaluator needs to be assigned. For example, when running an animation on color values, the @B_android#animation#ArgbEvaluator_E@ should be used to get correct RGB color interpolation. If this ValueAnimator has only one set of values being animated between, this evaluator will be used for that set. If there are several sets of values being animated, which is the case if PropertyValuesHolder objects were set on the ValueAnimator, then the evaluator is assigned just to the first PropertyValuesHolder object.", "history": "Added in API level 11", "FullName": "public void setEvaluator (TypeEvaluator value)"}, "getAnimatedValue(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "animatedValue The value most recently calculated for the named property by this ValueAnimator."]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The most recent value calculated by this ValueAnimator for propertyName. The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to @B_android#animation#ValueAnimator#AnimatorUpdateListener#onAnimationUpdate_E@, which is called during each animation frame, immediately after the value is calculated.", "history": "Added in API level 11", "FullName": "public Object getAnimatedValue (String propertyName)"}, "setValues(android.animation.PropertyValuesHolder...)": {"Returns": [], "Parameters": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder: The set of values, per property, being animated between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values, per property, being animated between. This function is called internally by the constructors of ValueAnimator that take a list of values. But a ValueAnimator can be constructed without values and this method can be called to set the values manually instead.", "history": "Added in API level 11", "FullName": "public void setValues (PropertyValuesHolder... values)"}, "ofFloat(float...)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "A ValueAnimator object that is set up to animate between the given values."]], "Parameters": [["float...", "float: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a ValueAnimator that animates between float values. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values.", "history": "Added in API level 11", "FullName": "public static ValueAnimator ofFloat (float... values)"}, "setRepeatCount(int)": {"Returns": [], "Parameters": [["int", "int: the number of times the animation should be repeated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets how many times the animation should be repeated. If the repeat count is 0, the animation is never repeated. If the repeat count is greater than 0 or @B_android#animation#ValueAnimator#INFINITE_E@, the repeat mode will be taken into account. The repeat count is 0 by default.", "history": "Added in API level 11", "FullName": "public void setRepeatCount (int value)"}, "setDuration(long)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "ValueAnimator The object called with setDuration(). This return value makes it easier to compose statements together that construct and then set the duration, as in ValueAnimator.ofInt(0, 10).setDuration(500).start()."]], "Parameters": [["long", "long: The length of the animation, in milliseconds. This value cannot be negative."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of the animation. The default duration is 300 milliseconds.", "history": "Added in API level 11", "FullName": "public ValueAnimator setDuration (long duration)"}, "isStarted()": {"Returns": [["boolean", "Whether the Animator has been started and not yet ended."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this Animator has been started and not yet ended. For reusable Animators (which most Animators are, apart from the one-shot animator produced by @B_android#view#ViewAnimationUtils#createCircularReveal_E@), this state is a superset of @B_android#animation#Animator#isRunning_E@, because an Animator with a nonzero @B_android#animation#Animator#getStartDelay_E@ will return true for @B_android#animation#Animator#isStarted_E@ during the delay phase, whereas @B_android#animation#Animator#isRunning_E@ will return true only after the delay phase is complete. Non-reusable animators will always return true after they have been started, because they cannot return to a non-started state.", "history": "Added in API level 14", "FullName": "public boolean isStarted ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "getValues()": {"Returns": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder[] An array of PropertyValuesHolder objects which hold the values, per property, that define the animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the values that this ValueAnimator animates between. These values are stored in PropertyValuesHolder objects, even if the ValueAnimator was created with a simple list of value objects instead.", "history": "Added in API level 11", "FullName": "public PropertyValuesHolder[] getValues ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ends the animation. This causes the animation to assign the end value of the property being animated, then calling the @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ method on its listeners. This method must be called on the thread that is running the animation.", "history": "Added in API level 11", "FullName": "public void end ()"}, "ofObject(android.animation.TypeEvaluator,java.lang.Object...)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "A ValueAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_android#animation#TypeEvaluator_E@", "TypeEvaluator: A TypeEvaluator that will be called on each animation frame to provide the ncessry interpolation between the Object values to derive the animated value."], ["@B_java#lang#Object_E@", "Object: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a ValueAnimator that animates between Object values. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. Since ValueAnimator does not know how to animate between arbitrary Objects, this factory method also takes a TypeEvaluator object that the ValueAnimator will use to perform that interpolation.", "history": "Added in API level 11", "FullName": "public static ValueAnimator ofObject (TypeEvaluator evaluator, Object... values)"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes a paused animation, causing the animator to pick up where it left off when it was paused. This method should only be called on the same thread on which the animation was started. Calls to resume() on an animator that is not currently paused will be ignored.", "history": "Added in API level 19", "FullName": "public void resume ()"}, "setCurrentPlayTime(long)": {"Returns": [], "Parameters": [["long", "long: The time, in milliseconds, to which the animation is advanced or rewound."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the animation to the specified point in time. This time should be between 0 and the total duration of the animation, including any repetition. If the animation has not yet been started, then it will not advance forward after it is set to this time; it will simply set the time to this value and perform any appropriate actions based on that time. If the animation is already running, then setCurrentPlayTime() will set the current playing time to this value and continue playing from that point.", "history": "Added in API level 11", "FullName": "public void setCurrentPlayTime (long playTime)"}, "ValueAnimator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new ValueAnimator object. This default constructor is primarily for use internally; the factory methods which take parameters are more generally useful.", "history": "Added in API level 11", "FullName": "public ValueAnimator ()"}, "pause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pauses a running animation. This method should only be called on the same thread on which the animation was started. If the animation has not yet been @B_android#animation#Animator#isStarted_E@ or has since ended, then the call is ignored. Paused animations can be resumed by calling @B_android#animation#Animator#resume_E@.", "history": "Added in API level 19", "FullName": "public void pause ()"}, "getRepeatMode()": {"Returns": [["int", "either one of @B_android#animation#ValueAnimator#REVERSE_E@ or @B_android#animation#ValueAnimator#RESTART_E@ Value is @B_android#animation#ValueAnimator#RESTART_E@, or @B_android#animation#ValueAnimator#REVERSE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines what this animation should do when it reaches the end.", "history": "Added in API level 11", "FullName": "public int getRepeatMode ()"}, "ofArgb(int...)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "A ValueAnimator object that is set up to animate between the given values."]], "Parameters": [["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a ValueAnimator that animates between color values. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values.", "history": "Added in API level 21", "FullName": "public static ValueAnimator ofArgb (int... values)"}, "getDuration()": {"Returns": [["long", "The length of the animation, in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the length of the animation. The default duration is 300 milliseconds.", "history": "Added in API level 11", "FullName": "public long getDuration ()"}, "getAnimatedValue()": {"Returns": [["@B_java#lang#Object_E@", "animatedValue The value most recently calculated by this ValueAnimator for the single property being animated. If there are several properties being animated (specified by several PropertyValuesHolder objects in the constructor), this function returns the animated value for the first of those objects."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The most recent value calculated by this ValueAnimator when there is just one property being animated. This value is only sensible while the animation is running. The main purpose for this read-only property is to retrieve the value from the ValueAnimator during a call to @B_android#animation#ValueAnimator#AnimatorUpdateListener#onAnimationUpdate_E@, which is called during each animation frame, immediately after the value is calculated.", "history": "Added in API level 11", "FullName": "public Object getAnimatedValue ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels the animation. Unlike @B_android#animation#Animator#end_E@, cancel() causes the animation to stop in its tracks, sending an @B_android#animation#Animator#AnimatorListener#onAnimationCancel_E@ to its listeners, followed by an @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ message. This method must be called on the thread that is running the animation.", "history": "Added in API level 11", "FullName": "public void cancel ()"}, "ofPropertyValuesHolder(android.animation.PropertyValuesHolder...)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "A ValueAnimator object that is set up to animate between the given values."]], "Parameters": [["@B_android#animation#PropertyValuesHolder_E@", "PropertyValuesHolder: A set of PropertyValuesHolder objects whose values will be animated between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a ValueAnimator that animates between the values specified in the PropertyValuesHolder objects.", "history": "Added in API level 11", "FullName": "public static ValueAnimator ofPropertyValuesHolder (PropertyValuesHolder... values)"}, "getFrameDelay()": {"Returns": [["long", "the requested time between frames, in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, between each frame of the animation. This is a requested time that the animation will attempt to honor, but the actual delay between frames may be different, depending on system load and capabilities. This is a static function because the same delay will be applied to all animations, since they are all run off of a single timing loop. The frame delay may be ignored when the animation system uses an external timing source, such as the display refresh rate (vsync), to govern animations. Note that this method should be called from the same thread that @B_android#animation#ValueAnimator#start_E@ is called in order to check the frame delay for that animation. A runtime exception will be thrown if the calling thread does not have a Looper.", "history": "Added in API level 11", "FullName": "public static long getFrameDelay ()"}, "setObjectValues(java.lang.Object...)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The set of values to animate between."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values to animate between for this animation. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values. If there are already multiple sets of values defined for this ValueAnimator via more than one PropertyValuesHolder object, this method will set the values for the first of those objects. There should be a TypeEvaluator set on the ValueAnimator that knows how to interpolate between these value objects. ValueAnimator only knows how to interpolate between the primitive types specified in the other setValues() methods.", "history": "Added in API level 11", "FullName": "public void setObjectValues (Object... values)"}, "getRepeatCount()": {"Returns": [["int", "the number of times the animation should repeat, or @B_android#animation#ValueAnimator#INFINITE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines how many times the animation should repeat. The default value is 0.", "history": "Added in API level 11", "FullName": "public int getRepeatCount ()"}, "clone()": {"Returns": [["@B_android#animation#ValueAnimator_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public ValueAnimator clone ()"}, "addUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)": {"Returns": [], "Parameters": [["@B_android#animation#ValueAnimator#AnimatorUpdateListener_E@", "ValueAnimator.AnimatorUpdateListener: the listener to be added to the current set of listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a listener to the set of listeners that are sent update events through the life of an animation. This method is called on all listeners for every frame of the animation, after the values for the animation have been calculated.", "history": "Added in API level 11", "FullName": "public void addUpdateListener (ValueAnimator.AnimatorUpdateListener listener)"}, "removeUpdateListener(android.animation.ValueAnimator.AnimatorUpdateListener)": {"Returns": [], "Parameters": [["@B_android#animation#ValueAnimator#AnimatorUpdateListener_E@", "ValueAnimator.AnimatorUpdateListener: the listener to be removed from the current set of update listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a listener from the set listening to frame updates for this animation.", "history": "Added in API level 11", "FullName": "public void removeUpdateListener (ValueAnimator.AnimatorUpdateListener listener)"}, "getTotalDuration()": {"Returns": [["long", "Total time an animation takes to finish, starting from the time @B_android#animation#Animator#start_E@ is called. @B_android#animation#Animator#DURATION_INFINITE_E@ will be returned if the animation or any child animation repeats infinite times."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating. Return @B_android#animation#Animator#DURATION_INFINITE_E@ if the duration is infinite.", "history": "Added in API level 24", "FullName": "public long getTotalDuration ()"}, "areAnimatorsEnabled()": {"Returns": [["boolean", "boolean Whether animators are currently enabled. The default value is true."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether animators are currently enabled, system-wide. By default, all animators are enabled. This can change if either the user sets a Developer Option to set the animator duration scale to 0 or by Battery Savery mode being enabled (which disables all animations). Developers should not typically need to call this method, but should an app wish to show a different experience when animators are disabled, this return value can be used as a decider of which experience to offer.", "history": "Added in API level 26", "FullName": "public static boolean areAnimatorsEnabled ()"}, "ofInt(int...)": {"Returns": [["@B_android#animation#ValueAnimator_E@", "A ValueAnimator object that is set up to animate between the given values."]], "Parameters": [["int...", "int: A set of values that the animation will animate between over time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs and returns a ValueAnimator that animates between int values. A single value implies that that value is the one being animated to. However, this is not typically useful in a ValueAnimator object because there is no way for the object to determine the starting value for the animation (unlike ObjectAnimator, which can derive that value from the target object and property being animated). Therefore, there should typically be two or more values.", "history": "Added in API level 11", "FullName": "public static ValueAnimator ofInt (int... values)"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: the interpolator to be used by this animation. A value of null will result in linear interpolation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The time interpolator used in calculating the elapsed fraction of this animation. The interpolator determines whether the animation runs with linear or non-linear motion, such as acceleration and deceleration. The default value is @B_android#view#animation#AccelerateDecelerateInterpolator_E@", "history": "Added in API level 11", "FullName": "public void setInterpolator (TimeInterpolator value)"}, "getStartDelay()": {"Returns": [["long", "the number of milliseconds to delay running the animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay starting the animation after @B_android#animation#ValueAnimator#start_E@ is called.", "history": "Added in API level 11", "FullName": "public long getStartDelay ()"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The timing interpolator for this ValueAnimator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timing interpolator that this ValueAnimator uses.", "history": "Added in API level 11", "FullName": "public TimeInterpolator getInterpolator ()"}}, "Inheritance": ["@B_android#animation#Animator_E@"], "ClassName": "android.animation.ValueAnimator", "ClassDesc": "This class provides a simple timing engine for running animations which calculate animated values and set them on target objects. There is a single timing pulse that all animations use. It runs in a custom handler to ensure that property changes happen on the UI thread. By default, ValueAnimator uses non-linear time interpolation, via the @B_android#view#animation#AccelerateDecelerateInterpolator_E@ class, which accelerates into and decelerates out of an animation. This behavior can be changed by calling @B_android#animation#ValueAnimator#setInterpolator_E@. Animators can be created from either code or resource files. Here is an example of a ValueAnimator resource file: Starting from API 23, it is also possible to use a combination of @B_android#animation#PropertyValuesHolder_E@ and @B_android#animation#Keyframe_E@ resource tags to create a multi-step animation. Note that you can specify explicit fractional values (from 0 to 1) for each keyframe to determine when, in the overall duration, the animation should arrive at that value. Alternatively, you can leave the fractions off and the keyframes will be equally distributed within the total duration:"}