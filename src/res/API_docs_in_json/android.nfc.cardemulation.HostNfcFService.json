{"Functions": {"sendResponsePacket(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: A byte-array containing the response packet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends a response packet back to the remote device. Note: this method may be called from any thread and will not block.", "history": "Added in API level 24", "FullName": "public final void sendResponsePacket (byte[] responsePacket)"}, "processNfcFPacket(byte[], android.os.Bundle)": {"Returns": [["byte[]", "a byte-array containing the response packet, or null if no response packet can be sent at this point."]], "Parameters": [["byte[]", "byte: The NFC-F packet that was received from the remote device"], ["@B_android#os#Bundle_E@", "Bundle: A bundle containing extra data. May be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when a NFC-F packet has been received from a remote device. A response packet can be provided directly by returning a byte-array in this method. Note that in general response packets must be sent as quickly as possible, given the fact that the user is likely holding his device over an NFC reader when this method is called. This method is running on the main thread of your application. If you cannot return a response packet immediately, return null and use the @B_android#nfc#cardemulation#HostNfcFService#sendResponsePacket_E@ method later.", "history": "added in API level 24", "FullName": "public abstract byte[] processNfcFPacket (byte[] commandPacket, Bundle extras)"}, "processNfcFPacket(byte[],android.os.Bundle)": {"Returns": [["byte[]", "a byte-array containing the response packet, or null if no response packet can be sent at this point."]], "Parameters": [["byte[]", "byte: The NFC-F packet that was received from the remote device"], ["@B_android#os#Bundle_E@", "Bundle: A bundle containing extra data. May be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called when a NFC-F packet has been received from a remote device. A response packet can be provided directly by returning a byte-array in this method. Note that in general response packets must be sent as quickly as possible, given the fact that the user is likely holding his device over an NFC reader when this method is called. This method is running on the main thread of your application. If you cannot return a response packet immediately, return null and use the @B_android#nfc#cardemulation#HostNfcFService#sendResponsePacket_E@ method later.", "history": "Added in API level 24", "FullName": "public abstract byte[] processNfcFPacket (byte[] commandPacket, Bundle extras)"}, "onDeactivated(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#nfc#cardemulation#HostNfcFService#DEACTIVATION_LINK_LOSS_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method will be called in following possible scenarios: The NFC link has been lost", "history": "Added in API level 24", "FullName": "public abstract void onDeactivated (int reason)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 24", "FullName": "public final IBinder onBind (Intent intent)"}, "HostNfcFService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public HostNfcFService ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.nfc.cardemulation.HostNfcFService", "ClassDesc": "HostNfcFService is a convenience @B_android#app#Service_E@ class that can be extended to emulate an NFC-F card inside an Android service component. Cards emulated by this class are based on the NFC-Forum NFC-F protocol (based on the JIS-X 6319-4 specification.) A @B_android#nfc#cardemulation#HostNfcFService_E@ can register exactly one System Code and one NFCID2. For details about the use of System Code and NFCID2, see the NFC Forum Digital specification. To statically register a System Code and NFCID2 with the service, a @B_android#nfc#cardemulation#HostNfcFService#SERVICE_META_DATA_E@ entry must be included in the declaration of the service. All @B_android#nfc#cardemulation#HostNfcFService_E@ declarations in the manifest must require the @B_android#Manifest#permission#BIND_NFC_SERVICE_E@ permission in their <service> tag, to ensure that only the platform can bind to your service. An example of a HostNfcFService manifest declaration is shown below: The @B_android#R#styleable#HostNfcFService_E@ is required to contain a @B_android#R#styleable#HostApduService_description_E@ attribute that contains a user-friendly description of the service that may be shown in UI. The @B_android#R#styleable#HostNfcFService_E@ must contain: Exactly one @B_android#R#styleable#SystemCodeFilter_E@ tag. Exactly one @B_android#R#styleable#Nfcid2Filter_E@ tag. Zero or one @B_android#R#styleable#T3tPmmFilter_E@ tag. Alternatively, the System Code and NFCID2 can be dynamically registererd for a service by using the @B_android#nfc#cardemulation#NfcFCardEmulation#registerSystemCodeForService_E@ and @B_android#nfc#cardemulation#NfcFCardEmulation#setNfcid2ForService_E@ methods. When a remote NFC devices wants to communicate with your service, it sends a SENSF_REQ command to the NFC controller, requesting a System Code. If a @B_android#nfc#cardemulation#NfcFCardEmulation_E@ has registered this system code and has been enabled by the foreground application, the NFC controller will respond with the NFCID2 that is registered for this service. The reader can then continue data exchange with this service by using the NFCID2. After service selection, all frames addressed to the NFCID2 of this service will be sent through @B_android#nfc#cardemulation#HostNfcFService#processNfcFPacket_E@, until the NFC link is broken. When the NFC link is broken, @B_android#nfc#cardemulation#HostNfcFService#onDeactivated_E@ will be called."}