{"Functions": {"pollFirst(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 9", "FullName": "public abstract E pollFirst (long timeout, TimeUnit unit)"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E poll (long timeout, TimeUnit unit)"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#putLast_E@.", "history": "Added in API level 9", "FullName": "public abstract void put (E e)"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public abstract boolean removeLastOccurrence (Object o)"}, "pollLast(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the tail of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 9", "FullName": "public abstract E pollLast (long timeout, TimeUnit unit)"}, "putLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public abstract void putLast (E e)"}, "offerLast(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#addLast_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public abstract boolean offerLast (E e)"}, "offerLast(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public abstract boolean offerLast (E e, long timeout, TimeUnit unit)"}, "takeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting if necessary until an element becomes available.", "history": "Added in API level 9", "FullName": "public abstract E takeLast ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean offer (E e, long timeout, TimeUnit unit)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#concurrent#BlockingDeque#offer_E@. This method is equivalent to @B_java#util#concurrent#BlockingDeque#addLast_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean add (E e)"}, "offerFirst(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "added in API level 9", "FullName": "public abstract boolean offerFirst (E e, long timeout, TimeUnit unit)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail).", "history": "Added in API level 9", "FullName": "public abstract Iterator<E> iterator ()"}, "poll()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E poll ()"}, "pollFirst(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 9", "FullName": "public abstract E pollFirst (long timeout, TimeUnit unit)"}, "offerFirst(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#addFirst_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public abstract boolean offerFirst (E e)"}, "offerFirst(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public abstract boolean offerFirst (E e, long timeout, TimeUnit unit)"}, "element()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#concurrent#BlockingDeque#peek_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#getFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E element ()"}, "size()": {"Returns": [["int", "the number of elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this deque.", "history": "Added in API level 9", "FullName": "public abstract int size ()"}, "pollLast(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the tail of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 9", "FullName": "public abstract E pollLast (long timeout, TimeUnit unit)"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#concurrent#BlockingDeque#offerFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract void addFirst (E e)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#concurrent#BlockingDeque#add_E@ method, which can fail to insert an element only by throwing an exception. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean offer (E e)"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public abstract void addLast (E e)"}, "peek()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#peekFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this deque changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to @B_java#util#concurrent#BlockingDeque#removeFirstOccurrence_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean remove (Object o)"}, "offerLast(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque, waiting up to the specified wait time if necessary for space to become available.", "history": "added in API level 9", "FullName": "public abstract boolean offerLast (E e, long timeout, TimeUnit unit)"}, "remove()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#concurrent#BlockingDeque#poll_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E remove ()"}, "take()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting if necessary until an element becomes available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#takeFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E take ()"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [["@B_java#lang#IllegalStateException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#addFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract void push (E e)"}, "takeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, waiting if necessary until an element becomes available.", "history": "Added in API level 9", "FullName": "public abstract E takeFirst ()"}, "putFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque, waiting if necessary for space to become available.", "history": "Added in API level 9", "FullName": "public abstract void putFirst (E e)"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public abstract boolean removeFirstOccurrence (Object o)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque), waiting up to the specified wait time if necessary for space to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#offerLast_E@.", "history": "added in API level 9", "FullName": "public abstract boolean offer (E e, long timeout, TimeUnit unit)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this deque contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this deque"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e).", "history": "Added in API level 9", "FullName": "public abstract boolean contains (Object o)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this deque, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), waiting up to the specified wait time if necessary for an element to become available. This method is equivalent to @B_java#util#concurrent#BlockingDeque#pollFirst_E@.", "history": "added in API level 9", "FullName": "public abstract E poll (long timeout, TimeUnit unit)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.BlockingDeque<E>", "ClassDesc": "A @B_java#util#Deque_E@ that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element. BlockingDeque methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either null or false, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: Like any @B_java#util#concurrent#BlockingQueue_E@, a BlockingDeque is thread safe, does not permit null elements, and may (or may not) be capacity-constrained. A BlockingDeque implementation may be used directly as a FIFO BlockingQueue. The methods inherited from the BlockingQueue interface are precisely equivalent to BlockingDeque methods as indicated in the following table: Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a BlockingDeque BlockingDeque in another thread. This interface is a member of the"}