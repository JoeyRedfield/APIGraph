{"Functions": {"makeMovementFlags(int, int)": {"Returns": [["int", "Returns an integer composed of the given drag and swipe flags."]], "Parameters": [["int", "int: The directions in which the item can be dragged."], ["int", "int: The directions in which the item can be swiped."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to create movement flags. For instance, if you want to let your items be drag & dropped vertically and swiped left to be dismissed, you can call this method with: makeMovementFlags(UP | DOWN, LEFT);", "history": "added in version 22.2.0", "FullName": "int makeMovementFlags (int dragFlags, int swipeFlags)"}, "getSwipeEscapeVelocity(float)": {"Returns": [["float", "The minimum swipe velocity. The default implementation returns the defaultValue parameter."]], "Parameters": [["float", "float: The default value (in pixels per second) used by the ItemTouchHelper."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#helper#ItemTouchHelper#Callback#getSwipeVelocityThreshold_E@", "@B_android#support#v7#widget#helper#ItemTouchHelper#Callback#getSwipeThreshold_E@"], "Permissions": [], "Description": "Defines the minimum velocity which will be considered as a swipe action by the user. You can increase this value to make it harder to swipe or decrease it to make it easier. Keep in mind that ItemTouchHelper also checks the perpendicular velocity and makes sure current direction velocity is larger then the perpendicular one. Otherwise, user's movement is ambiguous. You can change the threshold by overriding @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#getSwipeVelocityThreshold_E@. The velocity is calculated in pixels per second. The default framework value is passed as a parameter so that you can modify it with a multiplier.", "history": "added in version 23.2.0", "FullName": "float getSwipeEscapeVelocity (float defaultValue)"}, "convertToRelativeDirection(int, int)": {"Returns": [["int", "Updated flags which uses relative flags (@B_android#support#v7#widget#helper#ItemTouchHelper#START_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#END_E@) instead of @B_android#support#v7#widget#helper#ItemTouchHelper#LEFT_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#RIGHT_E@."]], "Parameters": [["int", "int: The flag value that include any number of movement flags."], ["int", "int: The layout direction of the View. Can be obtained from @B_android#support#v4#view#ViewCompat#getLayoutDirection_E@."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#helper#ItemTouchHelper#Callback#convertToAbsoluteDirection_E@"], "Permissions": [], "Description": "Replaces a movement direction with its relative version by taking layout direction into account.", "history": "added in version 22.2.0", "FullName": "int convertToRelativeDirection (int flags, int layoutDirection)"}, "getSwipeVelocityThreshold(float)": {"Returns": [["float", "The velocity cap for pointer movements. The default implementation returns the defaultValue parameter."]], "Parameters": [["float", "float: The default value(in pixels per second) used by the ItemTouchHelper."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#helper#ItemTouchHelper#Callback#getSwipeEscapeVelocity_E@"], "Permissions": [], "Description": "Defines the maximum velocity ItemTouchHelper will ever calculate for pointer movements. To consider a movement as swipe, ItemTouchHelper requires it to be larger than the perpendicular movement. If both directions reach to the max threshold, none of them will be considered as a swipe because it is usually an indication that user rather tried to scroll then swipe. The velocity is calculated in pixels per second. You can customize this behavior by changing this method. If you increase the value, it will be easier for the user to swipe diagonally and if you decrease the value, user will need to make a rather straight finger movement to trigger a swipe.", "history": "added in version 23.2.0", "FullName": "float getSwipeVelocityThreshold (float defaultValue)"}, "makeFlag(int, int)": {"Returns": [["int", "And integer that represents the given directions in the provided actionState."]], "Parameters": [["int", "int: The action state you want to get flags in. Should be one of @B_android#support#v7#widget#helper#ItemTouchHelper#ACTION_STATE_IDLE_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#ACTION_STATE_SWIPE_E@ or @B_android#support#v7#widget#helper#ItemTouchHelper#ACTION_STATE_DRAG_E@."], ["int", "int: The direction flags. Can be composed from @B_android#support#v7#widget#helper#ItemTouchHelper#UP_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#DOWN_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#RIGHT_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#LEFT_E@ @B_android#support#v7#widget#helper#ItemTouchHelper#START_E@ and @B_android#support#v7#widget#helper#ItemTouchHelper#END_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Shifts the given direction flags to the offset of the given action state.", "history": "added in version 22.2.0", "FullName": "int makeFlag (int actionState, int directions)"}, "isItemViewSwipeEnabled()": {"Returns": [["boolean", "True if ItemTouchHelper should start swiping an item when user swipes a pointer over the View, false otherwise. Default value is true."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#helper#ItemTouchHelper#startSwipe_E@"], "Permissions": [], "Description": "Returns whether ItemTouchHelper should start a swipe operation if a pointer is swiped over the View. Default value returns true but you may want to disable this if you want to start swiping on a custom view touch using @B_android#support#v7#widget#helper#ItemTouchHelper#startSwipe_E@.", "history": "added in version 22.2.0", "FullName": "boolean isItemViewSwipeEnabled ()"}, "convertToAbsoluteDirection(int, int)": {"Returns": [["int", "Updated flags which includes only absolute direction values."]], "Parameters": [["int", "int: The flag value that include any number of movement flags."], ["int", "int: The layout direction of the RecyclerView."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a given set of flags to absolution direction which means @B_android#support#v7#widget#helper#ItemTouchHelper#START_E@ and @B_android#support#v7#widget#helper#ItemTouchHelper#END_E@ are replaced with @B_android#support#v7#widget#helper#ItemTouchHelper#LEFT_E@ and @B_android#support#v7#widget#helper#ItemTouchHelper#RIGHT_E@ depending on the layout direction.", "history": "added in version 22.2.0", "FullName": "int convertToAbsoluteDirection (int flags, int layoutDirection)"}, "ItemTouchHelper.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.2.0", "FullName": "ItemTouchHelper.Callback ()"}, "getDefaultUIUtil()": {"Returns": [["@B_android#support#v7#widget#helper#ItemTouchUIUtil_E@", "The @B_android#support#v7#widget#helper#ItemTouchUIUtil_E@ instance that is used by the @B_android#support#v7#widget#helper#ItemTouchHelper#Callback_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#support#v7#widget#helper#ItemTouchUIUtil_E@ that is used by the @B_android#support#v7#widget#helper#ItemTouchHelper#Callback_E@ class for visual changes on Views in response to user interactions. @B_android#support#v7#widget#helper#ItemTouchUIUtil_E@ has different implementations for different platform versions. By default, @B_android#support#v7#widget#helper#ItemTouchHelper#Callback_E@ applies these changes on @B_android#support#v7#widget#RecyclerView#ViewHolder#itemView_E@. For example, if you have a use case where you only want the text to move when user swipes over the view, you can do the following:", "history": "added in version 22.2.0", "FullName": "ItemTouchUIUtil getDefaultUIUtil ()"}, "getBoundingBoxMargin()": {"Returns": [["int", "The extra margin to be added to the hit box of the dragged View."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When finding views under a dragged view, by default, ItemTouchHelper searches for views that overlap with the dragged View. By overriding this method, you can extend or shrink the search box.", "history": "added in version 22.2.0", "FullName": "int getBoundingBoxMargin ()"}, "isLongPressDragEnabled()": {"Returns": [["boolean", "True if ItemTouchHelper should start dragging an item when it is long pressed, false otherwise. Default value is true."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#helper#ItemTouchHelper#startDrag_E@"], "Permissions": [], "Description": "Returns whether ItemTouchHelper should start a drag and drop operation if an item is long pressed. Default value returns true but you may want to disable this if you want to start dragging on a custom view touch using @B_android#support#v7#widget#helper#ItemTouchHelper#startDrag_E@.", "history": "added in version 22.2.0", "FullName": "boolean isLongPressDragEnabled ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.widget.helper.ItemTouchHelper.Callback", "ClassDesc": "This class is the contract between ItemTouchHelper and your application. It lets you control which touch behaviors are enabled per each ViewHolder and also receive callbacks when user performs these actions. To control which actions user can take on each view, you should override @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#getMovementFlags_E@ and return appropriate set of direction flags. (@B_android#support#v7#widget#helper#ItemTouchHelper#LEFT_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#RIGHT_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#START_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#END_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#UP_E@, @B_android#support#v7#widget#helper#ItemTouchHelper#DOWN_E@). You can use @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#makeMovementFlags_E@ to easily construct it. Alternatively, you can use @B_android#support#v7#widget#helper#ItemTouchHelper#SimpleCallback_E@. If user drags an item, ItemTouchHelper will call @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onMove_E@. Upon receiving this callback, you should move the item from the old position (dragged.getAdapterPosition()) to new position (target.getAdapterPosition()) in your adapter and also call @B_android#support#v7#widget#RecyclerView#Adapter#notifyItemMoved_E@. To control where a View can be dropped, you can override @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#canDropOver_E@. When a dragging View overlaps multiple other views, Callback chooses the closest View with which dragged View might have changed positions. Although this approach works for many use cases, if you have a custom LayoutManager, you can override @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#chooseDropTarget_E@ to select a custom drop target. When a View is swiped, ItemTouchHelper animates it until it goes out of bounds, then calls @B_android#support#v7#widget#helper#ItemTouchHelper#Callback#onSwiped_E@. At this point, you should update your adapter (e.g. remove the item) and call related Adapter#notify event."}