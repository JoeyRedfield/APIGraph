{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Setting a color filter via @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isStateful()": {"Returns": [["", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "setPivotX(float)": {"Returns": [], "Parameters": [["float", "float: X position around which to rotate"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setPivotXRelative_E@"], "Permissions": [], "Description": "Sets the X position around which the drawable is rotated. If the X pivot is relative (as specified by @B_android#graphics#drawable#RotateDrawable#setPivotXRelative_E@), then the position represents a fraction of the drawable width. Otherwise, the position represents an absolute value in pixels.", "history": "Added in API level 21", "FullName": "public void setPivotX (float pivotX)"}, "getIntrinsicWidth()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the intrinsic width of the underlying drawable object. Returns -1 if it has no intrinsic width, such as with a solid color.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "setPivotYRelative(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the Y pivot represents a fraction of the drawable height, or false if it represents an absolute value in pixels"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#isPivotYRelative_E@"], "Permissions": [], "Description": "Sets whether the Y pivot value represents a fraction of the drawable height or an absolute value in pixels.", "history": "Added in API level 21", "FullName": "public void setPivotYRelative (boolean relative)"}, "setDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "The drawable to rotate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the drawable rotated by this RotateDrawable.", "history": "Added in API level 21", "FullName": "public void setDrawable (Drawable drawable)"}, "setPivotXRelative(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the X pivot represents a fraction of the drawable width, or false if it represents an absolute value in pixels"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#isPivotXRelative_E@"], "Permissions": [], "Description": "Sets whether the X pivot value represents a fraction of the drawable width or an absolute value in pixels.", "history": "Added in API level 21", "FullName": "public void setPivotXRelative (boolean relative)"}, "getDrawable()": {"Returns": [["", "The drawable rotated by this RotateDrawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public Drawable getDrawable ()"}, "getIntrinsicHeight()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the intrinsic height of the underlying drawable object. Returns -1 if it has no intrinsic height, such as with a solid color.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "setPivotY(float)": {"Returns": [], "Parameters": [["float", "float: Y position around which to rotate"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#getPivotY_E@"], "Permissions": [], "Description": "Sets the Y position around which the drawable is rotated. If the Y pivot is relative (as specified by @B_android#graphics#drawable#RotateDrawable#setPivotYRelative_E@), then the position represents a fraction of the drawable height. Otherwise, the position represents an absolute value in pixels.", "history": "Added in API level 21", "FullName": "public void setPivotY (float pivotY)"}, "getChangingConfigurations()": {"Returns": [["", "Returns a mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "mutate()": {"Returns": [["", "This drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "the color filter to apply, or null to remove the existing color filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. Pass null to remove any existing color filter.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter cf)"}, "getAlpha()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getConstantState()": {"Returns": [["", "The ConstantState associated to that Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["", "int The opacity class of the Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods.", "history": "Added in API level 1", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "setFromDegrees(float)": {"Returns": [], "Parameters": [["float", "float: starting angle in degrees"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#getFromDegrees_E@"], "Permissions": [], "Description": "Sets the start angle for rotation.", "history": "Added in API level 21", "FullName": "public void setFromDegrees (float fromDegrees)"}, "isPivotYRelative()": {"Returns": [["boolean", "true if the Y pivot represents a fraction of the drawable height, or false if it represents an absolute value in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setPivotYRelative_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isPivotYRelative ()"}, "setToDegrees(float)": {"Returns": [], "Parameters": [["float", "float: ending angle in degrees"]], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#getToDegrees_E@"], "Permissions": [], "Description": "Sets the end angle for rotation.", "history": "Added in API level 21", "FullName": "public void setToDegrees (float toDegrees)"}, "setAlpha(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 1", "FullName": "public void setAlpha (int alpha)"}, "getToDegrees()": {"Returns": [["float", "ending angle for rotation in degrees"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setToDegrees_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public float getToDegrees ()"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 1", "FullName": "protected void onBoundsChange (Rect bounds)"}, "onStateChange(int[])": {"Returns": [["", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] state)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "getPadding(android.graphics.Rect)": {"Returns": [["", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "RotateDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new rotating drawable with no wrapped drawable.", "history": "Added in API level 1", "FullName": "public RotateDrawable ()"}, "getPivotX()": {"Returns": [["float", "X position around which to rotate"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setPivotX_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public float getPivotX ()"}, "isPivotXRelative()": {"Returns": [["boolean", "true if the X pivot represents a fraction of the drawable width, or false if it represents an absolute value in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setPivotXRelative_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean isPivotXRelative ()"}, "getFromDegrees()": {"Returns": [["float", "starting angle for rotation in degrees"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setFromDegrees_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public float getFromDegrees ()"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 1", "FullName": "protected boolean onLevelChange (int level)"}, "canApplyTheme()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "getPivotY()": {"Returns": [["float", "Y position around which to rotate"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#drawable#RotateDrawable#setPivotY_E@"], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public float getPivotY ()"}, "setVisible(boolean, boolean)": {"Returns": [["", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "Set to true if visible, false if not."], ["boolean", "You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "Color state list to use for tinting this drawable, or null to clear the tint"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint for this drawable as a color state list. Setting a color filter via @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@", "@B_android#graphics#drawable#DrawableWrapper_E@"], "ClassName": "android.graphics.drawable.RotateDrawable", "ClassDesc": "A Drawable that can rotate another Drawable based on the current level value. The start and end angles of rotation can be controlled to map any circular arc to the level values range. It can be defined in an XML file with the <rotate> element. For more information, see the guide to"}