{"Functions": {"MulticastSocket()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while creating the MulticastSocket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#DatagramSocket#setReuseAddress_E@"], "Permissions": [], "Description": "Create a multicast socket. If there is a security manager, its checkListen method is first called with 0 as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the @B_java#net#DatagramSocket#setReuseAddress_E@ method is called to enable the SO_REUSEADDR socket option.", "history": "Added in API level 1", "FullName": "public MulticastSocket ()"}, "getTTL()": {"Returns": [["byte", "the default time-to-live value"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while getting the default time-to-live value"]], "SeeAlso": ["@B_java#net#MulticastSocket#setTTL_E@"], "Permissions": [], "Description": "use the getTimeToLive method instead, which returns an Get the default time-to-live for multicast packets sent out on the socket.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public byte getTTL ()"}, "MulticastSocket(java.net.SocketAddress)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: Socket address to bind to, or null for an unbound socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while creating the MulticastSocket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#DatagramSocket#setReuseAddress_E@"], "Permissions": [], "Description": "Create a MulticastSocket bound to the specified socket address. Or, if the address is null, create an unbound socket. If there is a security manager, its checkListen method is first called with the SocketAddress port as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the @B_java#net#DatagramSocket#setReuseAddress_E@ method is called to enable the SO_REUSEADDR socket option.", "history": "Added in API level 1", "FullName": "public MulticastSocket (SocketAddress bindaddr)"}, "setTimeToLive(int)": {"Returns": [], "Parameters": [["int", "int: the time-to-live"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while setting the default time-to-live value"]], "SeeAlso": ["@B_java#net#MulticastSocket#getTimeToLive_E@"], "Permissions": [], "Description": "Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl 0 <= ttl <= 255 or an IllegalArgumentException will be thrown. Multicast packets sent with a TTL of 0 are not transmitted on the network but may be delivered locally.", "history": "Added in API level 1", "FullName": "public void setTimeToLive (int ttl)"}, "getLoopbackMode()": {"Returns": [["boolean", "true if the LoopbackMode has been disabled"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an error occurs while getting the value"]], "SeeAlso": ["@B_java#net#MulticastSocket#setLoopbackMode_E@"], "Permissions": [], "Description": "Get the setting for local loopback of multicast datagrams.", "history": "Added in API level 1", "FullName": "public boolean getLoopbackMode ()"}, "getInterface()": {"Returns": [["@B_java#net#InetAddress_E@", "An InetAddress representing the address of the network interface used for multicast packets."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#MulticastSocket#setInterface_E@"], "Permissions": [], "Description": "Retrieve the address of the network interface used for multicast packets.", "history": "Added in API level 1", "FullName": "public InetAddress getInterface ()"}, "joinGroup(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: is the multicast address to join"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error joining or when the address is not a multicast address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast method doesn't allow the join."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkMulticast_E@"], "Permissions": [], "Description": "Joins a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.", "history": "Added in API level 1", "FullName": "public void joinGroup (InetAddress mcastaddr)"}, "joinGroup(java.net.SocketAddress,java.net.NetworkInterface)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: is the multicast address to join"], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: specifies the local interface to receive multicast datagram packets, or null to defer to the interface set by @B_java#net#MulticastSocket#setInterface_E@ or @B_java#net#MulticastSocket#setNetworkInterface_E@"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error joining or when the address is not a multicast address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast method doesn't allow the join."], ["@B_java#lang#IllegalArgumentException_E@", "if mcastaddr is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkMulticast_E@"], "Permissions": [], "Description": "Joins the specified multicast group at the specified interface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.", "history": "Added in API level 1", "FullName": "public void joinGroup (SocketAddress mcastaddr, NetworkInterface netIf)"}, "leaveGroup(java.net.SocketAddress,java.net.NetworkInterface)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: is the multicast address to leave"], ["@B_java#net#NetworkInterface_E@", "NetworkInterface: specifies the local interface or null to defer to the interface set by @B_java#net#MulticastSocket#setInterface_E@ or @B_java#net#MulticastSocket#setNetworkInterface_E@"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error leaving or when the address is not a multicast address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if mcastaddr is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkMulticast_E@"], "Permissions": [], "Description": "Leave a multicast group on a specified local interface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.", "history": "Added in API level 1", "FullName": "public void leaveGroup (SocketAddress mcastaddr, NetworkInterface netIf)"}, "setInterface(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the InetAddress"]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#MulticastSocket#getInterface_E@"], "Permissions": [], "Description": "Set the multicast network interface used by methods whose behavior would be affected by the value of the network interface. Useful for multihomed hosts.", "history": "Added in API level 1", "FullName": "public void setInterface (InetAddress inf)"}, "send(java.net.DatagramPacket,byte)": {"Returns": [], "Parameters": [["@B_java#net#DatagramPacket_E@", "DatagramPacket: is the packet to be sent. The packet should contain the destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets to a destination multicast address."], ["byte", "byte: optional time to live for multicast packet. default ttl is 1."]], "Throws": [["@B_java#io#IOException_E@", "is raised if an error occurs i.e error while setting ttl."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast or checkConnect method doesn't allow the send."]], "SeeAlso": ["@B_java#net#DatagramSocket#send_E@", "@B_java#net#DatagramSocket#receive_E@", "@B_java#lang#SecurityManager#checkMulticast_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use the following code or its equivalent instead: ...... int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ...... Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket. This method need only be used in instances where a particular TTL is desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets. This method does setInterface. If there is a security manager, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager's checkMulticast method with p.getAddress() and ttl as its arguments. If the evaluation of that expression is false, this method instead calls the security manager's checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void send (DatagramPacket p, byte ttl)"}, "leaveGroup(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: is the multicast address to leave"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error leaving or when the address is not a multicast address."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkMulticast_E@"], "Permissions": [], "Description": "Leave a multicast group. Its behavior may be affected by setInterface or setNetworkInterface. If there is a security manager, this method first calls its checkMulticast method with the mcastaddr argument as its argument.", "history": "Added in API level 1", "FullName": "public void leaveGroup (InetAddress mcastaddr)"}, "setTTL(byte)": {"Returns": [], "Parameters": [["byte", "byte: the time-to-live"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while setting the default time-to-live value"]], "SeeAlso": ["@B_java#net#MulticastSocket#getTTL_E@"], "Permissions": [], "Description": "use the setTimeToLive method instead, which uses Set the default time-to-live for multicast packets sent out on this MulticastSocket in order to control the scope of the multicasts. The ttl is an 0 <= ttl <= 0xFF .", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setTTL (byte ttl)"}, "getTimeToLive()": {"Returns": [["int", "the default time-to-live value"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while getting the default time-to-live value"]], "SeeAlso": ["@B_java#net#MulticastSocket#setTimeToLive_E@"], "Permissions": [], "Description": "Get the default time-to-live for multicast packets sent out on the socket.", "history": "Added in API level 1", "FullName": "public int getTimeToLive ()"}, "setLoopbackMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to disable the LoopbackMode"]], "Throws": [["@B_java#net#SocketException_E@", "if an error occurs while setting the value"]], "SeeAlso": ["@B_java#net#MulticastSocket#getLoopbackMode_E@"], "Permissions": [], "Description": "Disable/Enable local loopback of multicast datagrams The option is used by the platform's networking code as a hint for setting whether multicast data will be looped back to the local socket. Because this option is a hint, applications that want to verify what loopback mode is set to should call @B_java#net#MulticastSocket#getLoopbackMode_E@", "history": "Added in API level 1", "FullName": "public void setLoopbackMode (boolean disable)"}, "getNetworkInterface()": {"Returns": [["@B_java#net#NetworkInterface_E@", "the multicast NetworkInterface currently set"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#MulticastSocket#setNetworkInterface_E@"], "Permissions": [], "Description": "Get the multicast network interface set.", "history": "Added in API level 1", "FullName": "public NetworkInterface getNetworkInterface ()"}, "setNetworkInterface(java.net.NetworkInterface)": {"Returns": [], "Parameters": [["@B_java#net#NetworkInterface_E@", "NetworkInterface: the interface"]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#MulticastSocket#getNetworkInterface_E@"], "Permissions": [], "Description": "Specify the network interface for outgoing multicast datagrams sent on this socket.", "history": "Added in API level 1", "FullName": "public void setNetworkInterface (NetworkInterface netIf)"}, "MulticastSocket(int)": {"Returns": [], "Parameters": [["int", "int: port to use"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O exception occurs while creating the MulticastSocket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#DatagramSocket#setReuseAddress_E@"], "Permissions": [], "Description": "Create a multicast socket and bind it to a specific port. If there is a security manager, its checkListen method is first called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. When the socket is created the @B_java#net#DatagramSocket#setReuseAddress_E@ method is called to enable the SO_REUSEADDR socket option.", "history": "Added in API level 1", "FullName": "public MulticastSocket (int port)"}, "send(java.net.DatagramPacket, byte)": {"Returns": [], "Parameters": [["@B_java#net#DatagramPacket_E@", "DatagramPacket: is the packet to be sent. The packet should contain the destination multicast ip address and the data to be sent. One does not need to be the member of the group to send packets to a destination multicast address."], ["byte", "byte: optional time to live for multicast packet. default ttl is 1."]], "Throws": [["@B_java#io#IOException_E@", "is raised if an error occurs i.e error while setting ttl."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkMulticast or checkConnect method doesn't allow the send."]], "SeeAlso": ["@B_java#net#DatagramSocket#send_E@", "@B_java#net#DatagramSocket#receive_E@", "@B_java#lang#SecurityManager#checkMulticast_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use the following code or its equivalent instead: ...... int ttl = mcastSocket.getTimeToLive(); mcastSocket.setTimeToLive(newttl); mcastSocket.send(p); mcastSocket.setTimeToLive(ttl); ...... Sends a datagram packet to the destination, with a TTL (time- to-live) other than the default for the socket. This method need only be used in instances where a particular TTL is desired; otherwise it is preferable to set a TTL once on the socket, and use that default TTL for all packets. This method does setInterface. If there is a security manager, this method first performs some security checks. First, if p.getAddress().isMulticastAddress() is true, this method calls the security manager's checkMulticast method with p.getAddress() and ttl as its arguments. If the evaluation of that expression is false, this method instead calls the security manager's checkConnect method with arguments p.getAddress().getHostAddress() and p.getPort(). Each call to a security manager method could result in a SecurityException if the operation is not allowed.", "history": "added in API level 1", "FullName": "public void send (DatagramPacket p, byte ttl)"}}, "Inheritance": ["@B_java#net#DatagramSocket_E@"], "ClassName": "java.net.MulticastSocket", "ClassDesc": "The multicast datagram socket class is useful for sending and receiving IP multicast packets. A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for joining \"groups\" of other multicast hosts on the internet. A multicast group is specified by a class D IP address and by a standard UDP port number. Class D IP addresses are in the range 224.0.0.0 to 239.255.255.255, inclusive. The address 224.0.0.0 is reserved and should not be used. One would join a multicast group by first creating a MulticastSocket with the desired port, then invoking the joinGroup(InetAddress groupAddr) method: When a socket subscribes to a multicast group/port, it receives datagrams sent by other hosts to the group/port, as do all other members of the group and port. A socket relinquishes membership in a group by the leaveGroup(InetAddress addr) method. Currently applets are not allowed to use multicast sockets."}