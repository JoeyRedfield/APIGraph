{"Functions": {"getDeclaredAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if directly present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.)", "history": "Added in API level 24", "FullName": "public T getDeclaredAnnotation (Class<T> annotationClass)"}, "isAccessible()": {"Returns": [["boolean", "the value of the object's accessible flag"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the value of the accessible flag for this object.", "history": "Added in API level 1", "FullName": "public boolean isAccessible ()"}, "getDeclaredAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present. This method ignores inherited annotations. If there are no specified annotations directly or indirectly present on this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getDeclaredAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation if one is present. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 24", "FullName": "public T[] getDeclaredAnnotationsByType (Class<T> annotationClass)"}, "setAccessible(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: the new value for the accessible flag"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the request is denied."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Set the accessible flag for this object to the indicated boolean value. A value of true indicates that the reflected object should suppress Java language access checking when it is used. A value of false indicates that the reflected object should enforce Java language access checks. First, if there is a security manager, its checkPermission method is called with a ReflectPermission(\"suppressAccessChecks\") permission. A SecurityException is raised if flag is true but accessibility of this object may not be changed (for example, if this element object is a @B_java#lang#reflect#Constructor_E@ object for the class @B_java#lang#Class_E@). A SecurityException is raised if this object is a @B_java#lang#reflect#Constructor_E@ object for the class java.lang.Class, and flag is true.", "history": "Added in API level 1", "FullName": "public void setAccessible (boolean flag)"}, "setAccessible(java.lang.reflect.AccessibleObject[],boolean)": {"Returns": [], "Parameters": [["@B_java#lang#reflect#AccessibleObject_E@", "AccessibleObject: the array of AccessibleObjects"], ["boolean", "boolean: the new value for the accessible flag in each object"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the request is denied."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Convenience method to set the accessible flag for an array of objects with a single security check (for efficiency). First, if there is a security manager, its checkPermission method is called with a ReflectPermission(\"suppressAccessChecks\") permission. A SecurityException is raised if flag is true but accessibility of any of the elements of the input array may not be changed (for example, if the element object is a @B_java#lang#reflect#Constructor_E@ object for the class @B_java#lang#Class_E@). In the event of such a SecurityException, the accessibility of objects is set to flag for array elements upto (and excluding) the element for which the exception occurred; the accessibility of elements beyond (and including) the element for which the exception occurred is unchanged.", "history": "Added in API level 1", "FullName": "public static void setAccessible (AccessibleObject[] array, boolean flag)"}, "AccessibleObject()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor: only used by the Java Virtual Machine.", "history": "Added in API level 1", "FullName": "protected AccessibleObject ()"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 24", "FullName": "public T[] getAnnotationsByType (Class<T> annotationClass)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 1", "FullName": "public Annotation[] getAnnotations ()"}, "isAnnotationPresent(java.lang.Class<?extendsjava.lang.annotation.Annotation>)": {"Returns": [["boolean", "true if an annotation for the specified annotation type is present on this element, else false"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if an annotation for the specified type is present on this element, else false. This method is designed primarily for convenient access to marker annotations. The truth value returned by this method is equivalent to: getAnnotation(annotationClass) != null The body of the default method is specified to be the code above.", "history": "Added in API level 1", "FullName": "public boolean isAnnotationPresent (Class<? extends Annotation> annotationClass)"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 1", "FullName": "public T getAnnotation (Class<T> annotationClass)"}}, "Inheritance": [], "ClassName": "java.lang.reflect.AccessibleObject", "ClassDesc": "The AccessibleObject class is the base class for Field, Method and Constructor objects. It provides the ability to flag a reflected object as suppressing default Java language access control checks when it is used. The access checks--for public, default (package) access, protected, and private members--are performed when Fields, Methods or Constructors are used to set or get fields, to invoke methods, or to create and initialize new instances of classes, respectively. Setting the accessible flag in a reflected object permits sophisticated applications with sufficient privilege, such as Java Object Serialization or other persistence mechanisms, to manipulate objects in a manner that would normally be prohibited. By default, a reflected object is not accessible."}