{"Functions": {"baseIsLeftToRight()": {"Returns": [["boolean", "true if the base direction is left-to-right"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the base direction is left-to-right.", "history": "Added in API level 1", "FullName": "public boolean baseIsLeftToRight ()"}, "requiresBidi(char[], int, int)": {"Returns": [["boolean", "true if the range of characters requires bidi analysis"]], "Parameters": [["char[]", "char: the text containing the characters to test"], ["int", "int: the start of the range of characters to test"], ["int", "int: the limit of the range of characters to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the specified text requires bidi analysis. If this returns false, the text will display left-to-right. Clients can then avoid constructing a Bidi object. Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped and ordered for display, and so will not cause this function to return true.", "history": "added in API level 1", "FullName": "public static boolean requiresBidi (char[] text, int start, int limit)"}, "isMixed()": {"Returns": [["boolean", "true if the line is not left-to-right or right-to-left."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the line is not left-to-right or right-to-left. This means it either has mixed runs of left-to-right and right-to-left text, or the base direction differs from the direction of the only run of text.", "history": "Added in API level 1", "FullName": "public boolean isMixed ()"}, "getLength()": {"Returns": [["int", "the length of text in the line"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the length of text in the line.", "history": "Added in API level 1", "FullName": "public int getLength ()"}, "Bidi(char[], int, byte[], int, int, int)": {"Returns": [], "Parameters": [["char[]", "char: an array containing the paragraph of text to process."], ["int", "int: the index into the text array of the start of the paragraph."], ["byte[]", "byte: an array containing embedding values for each character in the paragraph. This can be null, in which case it is assumed that there is no external embedding information."], ["int", "int: the index into the embedding array of the start of the paragraph."], ["int", "int: the length of the paragraph in the text and embeddings arrays."], ["int", "int: a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create Bidi from the given text, embedding, and direction information. The embeddings array may be null. If present, the values represent embedding level information. Negative values from -1 to -61 indicate overrides at the absolute value of the level. Positive values from 1 to 61 indicate embeddings. Where values are zero, the base embedding level as determined by the base direction is assumed.", "history": "added in API level 1", "FullName": "public Bidi (char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags)"}, "isRightToLeft()": {"Returns": [["boolean", "true if the line is all right-to-left text, and the base direction is right-to-left"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the line is all right-to-left text, and the base direction is right-to-left.", "history": "Added in API level 1", "FullName": "public boolean isRightToLeft ()"}, "Bidi(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a paragraph of text"], ["int", "int: a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create Bidi from the given paragraph of text and base direction.", "history": "added in API level 1", "FullName": "public Bidi (String paragraph, int flags)"}, "Bidi(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a paragraph of text"], ["int", "int: a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create Bidi from the given paragraph of text and base direction.", "history": "Added in API level 1", "FullName": "public Bidi (String paragraph, int flags)"}, "getRunCount()": {"Returns": [["int", "the number of level runs"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of level runs.", "history": "Added in API level 1", "FullName": "public int getRunCount ()"}, "createLineBidi(int, int)": {"Returns": [["@B_java#text#Bidi_E@", "a Bidi object"]], "Parameters": [["int", "int: the offset from the start of the paragraph to the start of the line."], ["int", "int: the offset from the start of the paragraph to the limit of the line."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi. This call is not required if the entire paragraph fits on one line.", "history": "added in API level 1", "FullName": "public Bidi createLineBidi (int lineStart, int lineLimit)"}, "getRunStart(int)": {"Returns": [["int", "the start of the run"]], "Parameters": [["int", "int: the index of the run, between 0 and getRunCount()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the index of the character at the start of the nth logical run in this line, as an offset from the start of the line.", "history": "Added in API level 1", "FullName": "public int getRunStart (int run)"}, "reorderVisually(byte[],int,java.lang.Object[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: an array representing the bidi level of each object"], ["int", "int: the start position in the levels array"], ["@B_java#lang#Object_E@", "Object: the array of objects to be reordered into visual order"], ["int", "int: the start position in the objects array"], ["int", "int: the number of objects to reorder"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reorder the objects in the array into visual order based on their levels. This is a utility function to use when you have a collection of objects representing runs of text in logical order, each run containing text at a single level. The elements at index from objectStart up to objectStart + count in the objects array will be reordered into visual order assuming each run of text has the level indicated by the corresponding element in the levels array (at index - objectStart + levelStart).", "history": "Added in API level 1", "FullName": "public static void reorderVisually (byte[] levels, int levelStart, Object[] objects, int objectStart, int count)"}, "getRunLimit(int)": {"Returns": [["int", "limit the limit of the run"]], "Parameters": [["int", "int: the index of the run, between 0 and getRunCount()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the index of the character past the end of the nth logical run in this line, as an offset from the start of the line. For example, this will return the length of the line for the last run on the line.", "history": "Added in API level 1", "FullName": "public int getRunLimit (int run)"}, "Bidi(char[],int,byte[],int,int,int)": {"Returns": [], "Parameters": [["char[]", "char: an array containing the paragraph of text to process."], ["int", "int: the index into the text array of the start of the paragraph."], ["byte[]", "byte: an array containing embedding values for each character in the paragraph. This can be null, in which case it is assumed that there is no external embedding information."], ["int", "int: the index into the embedding array of the start of the paragraph."], ["int", "int: the length of the paragraph in the text and embeddings arrays."], ["int", "int: a collection of flags that control the algorithm. The algorithm understands the flags DIRECTION_LEFT_TO_RIGHT, DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create Bidi from the given text, embedding, and direction information. The embeddings array may be null. If present, the values represent embedding level information. Negative values from -1 to -61 indicate overrides at the absolute value of the level. Positive values from 1 to 61 indicate embeddings. Where values are zero, the base embedding level as determined by the base direction is assumed.", "history": "Added in API level 1", "FullName": "public Bidi (char[] text, int textStart, byte[] embeddings, int embStart, int paragraphLength, int flags)"}, "createLineBidi(int,int)": {"Returns": [["@B_java#text#Bidi_E@", "a Bidi object"]], "Parameters": [["int", "int: the offset from the start of the paragraph to the start of the line."], ["int", "int: the offset from the start of the paragraph to the limit of the line."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a Bidi object representing the bidi information on a line of text within the paragraph represented by the current Bidi. This call is not required if the entire paragraph fits on one line.", "history": "Added in API level 1", "FullName": "public Bidi createLineBidi (int lineStart, int lineLimit)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Display the bidi internal state, used in debugging.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getLevelAt(int)": {"Returns": [["int", "the resolved level of the character at offset"]], "Parameters": [["int", "int: the index of the character for which to return the level"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the resolved level of the character at offset. If offset is < 0 or \u2265 the length of the line, return the base direction level.", "history": "Added in API level 1", "FullName": "public int getLevelAt (int offset)"}, "requiresBidi(char[],int,int)": {"Returns": [["boolean", "true if the range of characters requires bidi analysis"]], "Parameters": [["char[]", "char: the text containing the characters to test"], ["int", "int: the start of the range of characters to test"], ["int", "int: the limit of the range of characters to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the specified text requires bidi analysis. If this returns false, the text will display left-to-right. Clients can then avoid constructing a Bidi object. Text in the Arabic Presentation Forms area of Unicode is presumed to already be shaped and ordered for display, and so will not cause this function to return true.", "history": "Added in API level 1", "FullName": "public static boolean requiresBidi (char[] text, int start, int limit)"}, "isLeftToRight()": {"Returns": [["boolean", "true if the line is all left-to-right text and the base direction is left-to-right"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the line is all left-to-right text and the base direction is left-to-right.", "history": "Added in API level 1", "FullName": "public boolean isLeftToRight ()"}, "getRunLevel(int)": {"Returns": [["int", "the level of the run"]], "Parameters": [["int", "int: the index of the run, between 0 and getRunCount()"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the level of the nth logical run in this line.", "history": "Added in API level 1", "FullName": "public int getRunLevel (int run)"}, "Bidi(java.text.AttributedCharacterIterator)": {"Returns": [], "Parameters": [["@B_java#text#AttributedCharacterIterator_E@", "AttributedCharacterIterator: a paragraph of text with optional character and paragraph attribute information"]], "Throws": [], "SeeAlso": ["@B_java#awt#font#TextAttribute_E@"], "Permissions": [], "Description": "Create Bidi from the given paragraph of text. The RUN_DIRECTION attribute in the text, if present, determines the base direction (left-to-right or right-to-left). If not present, the base direction is computes using the Unicode Bidirectional Algorithm, defaulting to left-to-right if there are no strong directional characters in the text. This attribute, if present, must be applied to all the text in the paragraph. The BIDI_EMBEDDING attribute in the text, if present, represents embedding level information. Negative values from -1 to -62 indicate overrides at the absolute value of the level. Positive values from 1 to 62 indicate embeddings. Where values are zero or not defined, the base embedding level as determined by the base direction is assumed. The NUMERIC_SHAPING attribute in the text, if present, converts European digits to other decimal digits before running the bidi algorithm. This attribute, if present, must be applied to all the text in the paragraph.", "history": "Added in API level 1", "FullName": "public Bidi (AttributedCharacterIterator paragraph)"}, "getBaseLevel()": {"Returns": [["int", "the base level"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the base level (0 if left-to-right, 1 if right-to-left).", "history": "Added in API level 1", "FullName": "public int getBaseLevel ()"}}, "Inheritance": [], "ClassName": "java.text.Bidi", "ClassDesc": "This class implements the Unicode Bidirectional Algorithm. A Bidi object provides information on the bidirectional reordering of the text used to create it. This is required, for example, to properly display Arabic or Hebrew text. These languages are inherently mixed directional, as they order numbers from left-to-right while ordering most other text from right-to-left. Once created, a Bidi object can be queried to see if the text it represents is all left-to-right or all right-to-left. Such objects are very lightweight and this text is relatively easy to process. If there are multiple runs of text, information about the runs can be accessed by indexing to get the start, limit, and level of a run. The level represents both the direction and the 'nesting level' of a directional run. Odd levels are right-to-left, while even levels are left-to-right. So for example level 0 represents left-to-right text, while level 1 represents right-to-left text, and level 2 represents left-to-right text embedded in a right-to-left run."}