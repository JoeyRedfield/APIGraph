{"Functions": {"setParallaxDistance(int)": {"Returns": [], "Parameters": [["int", "int: Distance to parallax by in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a distance to parallax the lower pane by when the upper pane is in its fully closed state. The lower pane will scroll between this position and its fully open state.", "history": "added in version 22.0.0", "FullName": "void setParallaxDistance (int parallaxBy)"}, "setCoveredFadeColor(int)": {"Returns": [], "Parameters": [["int", "int: An ARGB-packed color value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color used to fade the pane covered by the sliding pane out when the pane will become fully covered in the closed state.", "history": "added in version 22.0.0", "FullName": "void setCoveredFadeColor (int color)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas c)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "", "FullName": "void computeScroll ()"}, "onSizeChanged(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Current width of this view."], ["int", "int: Current height of this view."], ["int", "int: Old width of this view."], ["int", "int: Old height of this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called during layout when the size of this view has changed. If you were just added to the view hierarchy, you're called with the old values of 0.", "history": "", "FullName": "void onSizeChanged (int w, int h, int oldw, int oldh)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "ViewGroup.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "setShadowResource(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renamed to @B_android#support#v4#widget#SlidingPaneLayout#setShadowResourceLeft_E@ to support LTR (left to right language) and @B_android#support#v4#widget#SlidingPaneLayout#setShadowResourceRight_E@ to support RTL (right to left language) during opening/closing. Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing.", "history": "added in version 22.0.0", "FullName": "void setShadowResource (int resId)"}, "SlidingPaneLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "SlidingPaneLayout (Context context)"}, "isSlideable()": {"Returns": [["boolean", "true if content in this layout can be slid open and closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the content in this layout cannot fully fit side by side and therefore the content pane can be slid back and forth.", "history": "added in version 22.0.0", "FullName": "boolean isSlideable ()"}, "smoothSlideClosed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renamed to @B_android#support#v4#widget#SlidingPaneLayout#closePane_E@ - this method is going away soon!", "history": "added in version 22.0.0", "FullName": "void smoothSlideClosed ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 22.0.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "setShadowResourceRight(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a drawable to use as a shadow cast by the left pane onto the right pane during opening/closing to support right to left language.", "history": "added in version 22.0.0", "FullName": "void setShadowResourceRight (int resId)"}, "getSliderFadeColor()": {"Returns": [["int", "The ARGB-packed color value used to fade the sliding pane"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getSliderFadeColor ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "", "FullName": "boolean onInterceptTouchEvent (MotionEvent ev)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}, "setSliderFadeColor(int)": {"Returns": [], "Parameters": [["int", "int: An ARGB-packed color value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color used to fade the sliding pane out when it is slid most of the way offscreen.", "history": "added in version 22.0.0", "FullName": "void setSliderFadeColor (int color)"}, "setShadowResourceLeft(int)": {"Returns": [], "Parameters": [["int", "int: Resource ID of a drawable to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a drawable to use as a shadow cast by the right pane onto the left pane during opening/closing.", "history": "added in version 22.0.0", "FullName": "void setShadowResourceLeft (int resId)"}, "getCoveredFadeColor()": {"Returns": [["int", "The ARGB-packed color value used to fade the fixed pane"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getCoveredFadeColor ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#v4#widget#SlidingPaneLayout#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "closePane()": {"Returns": [["boolean", "true if the pane was slideable and is now closed/in the process of closing"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the sliding pane if it is currently slideable. If first layout has already completed this will animate.", "history": "added in version 22.0.0", "FullName": "boolean closePane ()"}, "isOpen()": {"Returns": [["boolean", "true if sliding panels are completely open"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the layout is completely open. It can be open either because the slider itself is open revealing the left pane, or if all content fits without sliding.", "history": "added in version 22.0.0", "FullName": "boolean isOpen ()"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "", "FullName": "boolean onTouchEvent (MotionEvent ev)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of default layout parameters. These parameters are requested when the View passed to @B_android#view#ViewGroup#addView_E@ has no layout parameters already set. If null is returned, an exception is thrown from addView.", "history": "", "FullName": "ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "smoothSlideOpen()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renamed to @B_android#support#v4#widget#SlidingPaneLayout#openPane_E@ - this method is going away soon!", "history": "added in version 22.0.0", "FullName": "void smoothSlideOpen ()"}, "getParallaxDistance()": {"Returns": [["int", "The distance the lower pane will parallax by when the upper pane is fully closed."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#SlidingPaneLayout#setParallaxDistance_E@"], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getParallaxDistance ()"}, "canSlide()": {"Returns": [["boolean", "true if content in this layout can be slid open and closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Renamed to @B_android#support#v4#widget#SlidingPaneLayout#isSlideable_E@ - this method is going away soon!", "history": "added in version 22.0.0", "FullName": "boolean canSlide ()"}, "openPane()": {"Returns": [["boolean", "true if the pane was slideable and is now open/in the process of opening"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the sliding pane if it is currently slideable. If first layout has already completed this will animate.", "history": "added in version 22.0.0", "FullName": "boolean openPane ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v4.widget.SlidingPaneLayout", "ClassDesc": "SlidingPaneLayout provides a horizontal, multi-pane layout for use at the top level of a UI. A left (or first) pane is treated as a content list or browser, subordinate to a primary detail view for displaying content. Child views may overlap if their combined width exceeds the available width in the SlidingPaneLayout. When this occurs the user may slide the topmost view out of the way by dragging it, or by navigating in the direction of the overlapped view using a keyboard. If the content of the dragged child view is itself horizontally scrollable, the user may grab it by the very edge. Thanks to this sliding behavior, SlidingPaneLayout may be suitable for creating layouts that can smoothly adapt across many different screen sizes, expanding out fully on larger screens and collapsing on smaller screens. SlidingPaneLayout is distinct from a navigation drawer as described in the design guide and should not be used in the same scenarios. SlidingPaneLayout should be thought of only as a way to allow a two-pane layout normally used on larger screens to adapt to smaller screens in a natural way. The interaction patterns expressed by SlidingPaneLayout imply a physicality and direct information hierarchy between panes that does not necessarily exist in a scenario where a navigation drawer should be used instead. Appropriate uses of SlidingPaneLayout include pairings of panes such as a contact list and subordinate interactions with those contacts, or an email thread list with the content pane displaying the contents of the selected thread. Inappropriate uses of SlidingPaneLayout include switching between disparate functions of your app, such as jumping from a social stream view to a view of your personal profile - cases such as this should use the navigation drawer pattern instead. (@B_android#support#v4#widget#DrawerLayout_E@ implements this pattern.) Like https:##developer#android#com@B_android#widget#LinearLayout_E@, SlidingPaneLayout supports the use of the layout parameter layout_weight on child views to determine how to divide leftover space after measurement is complete. It is only relevant for width. When views do not overlap weight behaves as it does in a LinearLayout. When views do overlap, weight on a slideable pane indicates that the pane should be sized to fill all available space in the closed state. Weight on a pane that becomes covered indicates that the pane should be sized to fill all available space except a small minimum strip that the user may use to grab the slideable view and pull it back over into a closed state."}