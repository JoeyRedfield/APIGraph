{"Functions": {"newSAXParser()": {"Returns": [["@B_javax#xml#parsers#SAXParser_E@", "A new instance of a SAXParser."]], "Parameters": [], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if a parser cannot be created which satisfies the requested configuration."], ["@B_org#xml#sax#SAXException_E@", "for SAX errors."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of a SAXParser using the currently configured factory parameters.", "history": "Added in API level 1", "FullName": "public abstract SAXParser newSAXParser ()"}, "setXIncludeAware(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set XInclude processing to true or false"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Set state of XInclude processing. If XInclude markup is found in the document instance, should it be processed as specified in XInclude processing defaults to false.", "history": "Added in API level 1", "FullName": "public void setXIncludeAware (boolean state)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "Value of the requested property."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property to be retrieved."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if a parser cannot be created which satisfies the requested configuration."], ["@B_org#xml#sax#SAXNotRecognizedException_E@", "When the underlying XMLReader does not recognize the property name."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the underlying XMLReader recognizes the property name but doesn't support the property."]], "SeeAlso": ["@B_org#xml#sax#XMLReader#getProperty_E@"], "Permissions": [], "Description": "Returns the particular property requested for in the underlying implementation of org.xml.sax.XMLReader.", "history": "Added in API level 1", "FullName": "public abstract boolean getFeature (String name)"}, "isXIncludeAware()": {"Returns": [["boolean", "current state of XInclude processing"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Get state of XInclude processing.", "history": "Added in API level 1", "FullName": "public boolean isXIncludeAware ()"}, "getSchema()": {"Returns": [["@B_javax#xml#validation#Schema_E@", "the @B_javax#xml#validation#Schema_E@ object that was last set through the @B_javax#xml#parsers#SAXParserFactory#setSchema_E@ method, or null if the method was not invoked since a @B_javax#xml#parsers#SAXParserFactory_E@ is created."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_javax#xml#validation#Schema_E@ object specified through the @B_javax#xml#parsers#SAXParserFactory#setSchema_E@ method.", "history": "Added in API level 8", "FullName": "public Schema getSchema ()"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the feature to be set."], ["boolean", "boolean: The value of the feature to be set."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if a parser cannot be created which satisfies the requested configuration."], ["@B_org#xml#sax#SAXNotRecognizedException_E@", "When the underlying XMLReader does not recognize the property name."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the underlying XMLReader recognizes the property name but doesn't support the property."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": ["@B_org#xml#sax#XMLReader#setFeature_E@"], "Permissions": [], "Description": "Sets the particular feature in the underlying implementation of org.xml.sax.XMLReader. A list of the core features and properties can be found at All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#parsers#SAXParser_E@ parse methods for handler specification. When the feature is false, the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "Added in API level 1", "FullName": "public abstract void setFeature (String name, boolean value)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the feature to be set."], ["boolean", "boolean: The value of the feature to be set."]], "Throws": [["@B_javax#xml#parsers#ParserConfigurationException_E@", "if a parser cannot be created which satisfies the requested configuration."], ["@B_org#xml#sax#SAXNotRecognizedException_E@", "When the underlying XMLReader does not recognize the property name."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the underlying XMLReader recognizes the property name but doesn't support the property."], ["@B_java#lang#NullPointerException_E@", "If the name parameter is null."]], "SeeAlso": ["@B_org#xml#sax#XMLReader#setFeature_E@"], "Permissions": [], "Description": "Sets the particular feature in the underlying implementation of org.xml.sax.XMLReader. A list of the core features and properties can be found at All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#parsers#SAXParser_E@ parse methods for handler specification. When the feature is false, the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "added in API level 1", "FullName": "public abstract void setFeature (String name, boolean value)"}, "newInstance()": {"Returns": [["@B_javax#xml#parsers#SAXParserFactory_E@", "a new SAXParserFactory."]], "Parameters": [], "Throws": [["@B_javax#xml#parsers#FactoryConfigurationError_E@", "never. Included for API compatibility with other Java implementations."]], "SeeAlso": [], "Permissions": [], "Description": "Returns Android's implementation of SAXParserFactory. Unlike other Java implementations, this method does not consult system properties, property files, or the services API.", "history": "Added in API level 1", "FullName": "public static SAXParserFactory newInstance ()"}, "setNamespaceAware(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced by this code will provide support for XML namespaces; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will provide support for XML namespaces. By default the value of this is set to false.", "history": "Added in API level 1", "FullName": "public void setNamespaceAware (boolean awareness)"}, "isValidating()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which validate the XML content during parse; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which validate the XML content during parse.", "history": "Added in API level 1", "FullName": "public boolean isValidating ()"}, "SAXParserFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected constructor to force use of @B_javax#xml#parsers#SAXParserFactory#newInstance_E@.", "history": "Added in API level 1", "FullName": "protected SAXParserFactory ()"}, "setValidating(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the parser produced by this code will validate documents as they are parsed; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies that the parser produced by this code will validate documents as they are parsed. By default the value of this is set to false. Note that \"the validation\" here means To use modern schema languages such as W3C XML Schema or RELAX NG instead of DTD, you can configure your parser to be a non-validating parser by leaving the @B_javax#xml#parsers#SAXParserFactory#setValidating_E@ method @B_javax#xml#parsers#SAXParserFactory#setSchema_E@ method to associate a schema to a parser.", "history": "Added in API level 1", "FullName": "public void setValidating (boolean validating)"}, "setSchema(javax.xml.validation.Schema)": {"Returns": [], "Parameters": [["@B_javax#xml#validation#Schema_E@", "Schema: Schema to use, null to remove a schema."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_javax#xml#validation#Schema_E@ to be used by parsers created from this factory. When a @B_javax#xml#validation#Schema_E@ is non-null, a parser will use a validator created from it to validate documents before it passes information down to the application. When warnings/errors/fatal errors are found by the validator, the parser must handle them as if those errors were found by the parser itself. In other words, if the user-specified @B_org#xml#sax#ErrorHandler_E@ is set, it must receive those errors, and if not, they must be treated according to the implementation specific default error handling rules. A validator may modify the SAX event stream (for example by adding default values that were missing in documents), and a parser is responsible to make sure that the application will receive those modified event stream. Initially, null is set as the @B_javax#xml#validation#Schema_E@. This processing will take effect even if the @B_javax#xml#parsers#SAXParserFactory#isValidating_E@ method returns false. It is an error to use the http://java.sun.com/xml/jaxp/properties/schemaSource property and/or the http://java.sun.com/xml/jaxp/properties/schemaLanguage property in conjunction with a non-null @B_javax#xml#validation#Schema_E@ object. Such configuration will cause a @B_org#xml#sax#SAXException_E@ exception when those properties are set on a @B_javax#xml#parsers#SAXParser_E@. A parser must be able to work with any @B_javax#xml#validation#Schema_E@ implementation. However, parsers and schemas are allowed to use implementation-specific custom mechanisms as long as they yield the result described in the specification.", "history": "Added in API level 8", "FullName": "public void setSchema (Schema schema)"}, "newInstance(java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_javax#xml#parsers#SAXParserFactory_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [["@B_javax#xml#parsers#FactoryConfigurationError_E@", "if factoryClassName is not available or cannot be instantiated."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of the named implementation of SAXParserFactory.", "history": "Added in API level 9", "FullName": "public static SAXParserFactory newInstance (String factoryClassName, ClassLoader classLoader)"}, "isNamespaceAware()": {"Returns": [["boolean", "true if the factory is configured to produce parsers which are namespace aware; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not the factory is configured to produce parsers which are namespace aware.", "history": "Added in API level 1", "FullName": "public boolean isNamespaceAware ()"}}, "Inheritance": [], "ClassName": "javax.xml.parsers.SAXParserFactory", "ClassDesc": "Defines a factory API that enables applications to configure and obtain a SAX based parser to parse XML documents."}