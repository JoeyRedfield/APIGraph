{"Functions": {"removeChildSessionId(int)": {"Returns": [], "Parameters": [["int", "int: the session ID to remove from this multi-package session."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a session ID from the set of sessions that will be committed atomically when this session is committed.", "history": "Added in API level 29", "FullName": "public void removeChildSessionId (int sessionId)"}, "transfer(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The package of the new owner. Needs to hold the INSTALL_PACKAGES permission. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", "if the new owner could not be found."], ["@B_java#lang#SecurityException_E@", "if called after the session has been committed or abandoned."], ["@B_java#lang#SecurityException_E@", "if the session does not update the original installer"], ["@B_java#lang#SecurityException_E@", "if streams opened through {@link #openWrite(java.lang.String,long,long) are still open."]], "SeeAlso": [], "Permissions": [], "Description": "Transfer the session to a new owner. Only sessions that update the installing app can be transferred. After the transfer to a package with a different uid all method calls on the session will cause @B_java#lang#SecurityException_E@s. Once this method is called, the session is sealed and no additional mutations beside committing it may be performed on the session.", "history": "Added in API level 27", "FullName": "public void transfer (String packageName)"}, "isStaged()": {"Returns": [["boolean", "true if this session will be staged and applied at next reboot."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isStaged ()"}, "removeSplit(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes a split. Split removals occur prior to adding new APKs. If upgrading a feature split, it is not expected nor desirable to remove the split prior to upgrading. When split removal is bundled with new APKs, the packageName must be identical.", "history": "Added in API level 24", "FullName": "public void removeSplit (String splitName)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Release this session object. You can open the session again if it hasn't been finalized.", "history": "Added in API level 21", "FullName": "public void close ()"}, "addChildSessionId(int)": {"Returns": [], "Parameters": [["int", "int: the session ID to add to this multi-package session."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a session ID to the set of sessions that will be committed atomically when this session is committed. If the parent is staged or has rollback enabled, all children must have the same properties.", "history": "Added in API level 29", "FullName": "public void addChildSessionId (int sessionId)"}, "setStagingProgress(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set current progress of staging this session. Valid values are anywhere between 0 and 1. Note that this progress may not directly correspond to the value reported by @B_android#content#pm#PackageInstaller#SessionCallback#onProgressChanged_E@, as the system may carve out a portion of the overall progress to represent its own internal installation work.", "history": "Added in API level 21", "FullName": "public void setStagingProgress (float progress)"}, "isMultiPackage()": {"Returns": [["boolean", "true if this session will commit more than one package when it is committed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public boolean isMultiPackage ()"}, "abandon()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Completely abandon this session, destroying all staged data and rendering it invalid. Abandoned sessions will be reported to @B_android#content#pm#PackageInstaller#SessionCallback_E@ listeners as failures. This is equivalent to opening the session and calling @B_android#content#pm#PackageInstaller#Session#abandon_E@.", "history": "Added in API level 21", "FullName": "public void abandon ()"}, "commit(android.content.IntentSender)": {"Returns": [], "Parameters": [["@B_android#content#IntentSender_E@", "IntentSender: Called when the state of the session changes. Intents sent to this receiver contain @B_android#content#pm#PackageInstaller#EXTRA_STATUS_E@. Refer to the individual status codes on how to handle them. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if streams opened through @B_android#content#pm#PackageInstaller#Session#openWrite_E@ are still open."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager_E@"], "Permissions": [], "Description": "Attempt to commit everything staged in this session. This may require user intervention, and so it may not happen immediately. The final result of the commit will be reported through the given callback. Once this method is called, the session is sealed and no additional mutations may be performed on the session. If the device reboots before the session has been finalized, you may commit the session again. If the installer is the device owner or the affiliated profile owner, there will be no user intervention.", "history": "Added in API level 21", "FullName": "public void commit (IntentSender statusReceiver)"}, "openWrite(java.lang.String,long,long)": {"Returns": [["@B_java#io#OutputStream_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: arbitrary, unique name of your choosing to identify the APK being written. You can open a file again for additional writes (such as after a reboot) by using the same name. This name is only meaningful within the context of a single install session. This value must never be null."], ["long", "long: offset into the file to begin writing at, or 0 to start at the beginning of the file."], ["long", "long: total size of the file being written, used to preallocate the underlying disk space, or -1 if unknown. The system may clear various caches as needed to allocate this space."]], "Throws": [["@B_java#io#IOException_E@", "if trouble opening the file for writing, such as lack of disk space or unavailable media."], ["@B_java#lang#SecurityException_E@", "if called after the session has been sealed or abandoned"]], "SeeAlso": [], "Permissions": [], "Description": "Open a stream to write an APK file into the session. The returned stream will start writing data at the requested offset in the underlying file, which can be used to resume a partially written file. If a valid file length is specified, the system will preallocate the underlying disk space to optimize placement on disk. It's strongly recommended to provide a valid file length when known. You can write data into the returned stream, optionally call @B_android#content#pm#PackageInstaller#Session#fsync_E@ as needed to ensure bytes have been persisted to disk, and then close when finished. All streams must be closed before calling @B_android#content#pm#PackageInstaller#Session#commit_E@.", "history": "Added in API level 21", "FullName": "public OutputStream openWrite (String name, long offsetBytes, long lengthBytes)"}, "fsync(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Ensure that any outstanding data for given stream has been committed to disk. This is only valid for streams returned from @B_android#content#pm#PackageInstaller#Session#openWrite_E@.", "history": "Added in API level 21", "FullName": "public void fsync (OutputStream out)"}, "openRead(java.lang.String)": {"Returns": [["@B_java#io#InputStream_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if called after the session has been committed or abandoned."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Open a stream to read an APK file from the session. This is only valid for names which have been previously written through @B_android#content#pm#PackageInstaller#Session#openWrite_E@ as part of this session. For example, this stream may be used to calculate a @B_java#security#MessageDigest_E@ of a written APK before committing.", "history": "Added in API level 21", "FullName": "public InputStream openRead (String name)"}, "getParentSessionId()": {"Returns": [["int", "the session ID of the multi-package session that this belongs to or @B_android#content#pm#PackageInstaller#SessionInfo#INVALID_ID_E@ if it does not belong to a multi-package session."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public int getParentSessionId ()"}, "getChildSessionIds()": {"Returns": [["int[]", "the set of session IDs that will be committed atomically when this session is committed if this is a multi-package session or null if none exist."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public int[] getChildSessionIds ()"}, "openWrite(java.lang.String, long, long)": {"Returns": [["@B_java#io#OutputStream_E@", "no returns description in source This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: arbitrary, unique name of your choosing to identify the APK being written. You can open a file again for additional writes (such as after a reboot) by using the same name. This name is only meaningful within the context of a single install session.This value must never be null."], ["long", "long: offset into the file to begin writing at, or 0 to start at the beginning of the file."], ["long", "long: total size of the file being written, used to preallocate the underlying disk space, or -1 if unknown. The system may clear various caches as needed to allocate this space."]], "Throws": [["@B_java#io#IOException_E@", "if trouble opening the file for writing, such as lack of disk space or unavailable media."], ["@B_java#lang#SecurityException_E@", "if called after the session has been sealed or abandoned"]], "SeeAlso": [], "Permissions": [], "Description": "Open a stream to write an APK file into the session. The returned stream will start writing data at the requested offset in the underlying file, which can be used to resume a partially written file. If a valid file length is specified, the system will preallocate the underlying disk space to optimize placement on disk. It's strongly recommended to provide a valid file length when known. You can write data into the returned stream, optionally call @B_android#content#pm#PackageInstaller#Session#fsync_E@ as needed to ensure bytes have been persisted to disk, and then close when finished. All streams must be closed before calling @B_android#content#pm#PackageInstaller#Session#commit_E@.", "history": "added in API level 21", "FullName": "public OutputStream openWrite (String name, long offsetBytes, long lengthBytes)"}, "getNames()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if called after the session has been committed or abandoned."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Return all APK names contained in this session. This returns all names which have been previously written through @B_android#content#pm#PackageInstaller#Session#openWrite_E@ as part of this session.", "history": "Added in API level 21", "FullName": "public String[] getNames ()"}}, "Inheritance": [], "ClassName": "android.content.pm.PackageInstaller.Session", "ClassDesc": "An installation that is being actively staged. For an install to succeed, all existing and new packages must have identical package names, version codes, and signing certificates. A session may contain any number of split packages. If the application does not yet exist, this session must include a base package. If an APK included in this session is already defined by the existing installation (for example, the same split name), the APK in this session will replace the existing APK. In such a case that multiple packages need to be committed simultaneously, multiple sessions can be referenced by a single multi-package session. This session is created with no package name and calling @B_android#content#pm#PackageInstaller#SessionParams#setMultiPackage_E@. The individual session IDs can be added with @B_android#content#pm#PackageInstaller#Session#addChildSessionId_E@ and commit of the multi-package session will result in all child sessions being committed atomically."}