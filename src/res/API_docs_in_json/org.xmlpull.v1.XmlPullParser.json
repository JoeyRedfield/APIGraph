{"Functions": {"require(int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Test if the current event is of the given type and if the namespace and name do match. null will match any namespace and any name. If the test is not passed, an exception is thrown. The exception text indicates the parser position, the expected event and the current event that is not meeting the requirement. Essentially it does this", "history": "Added in API level 1", "FullName": "public abstract void require (int type, String namespace, String name)"}, "isWhitespace()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the current TEXT event contains only whitespace characters. For IGNORABLE_WHITESPACE, this is always true. For TEXT and CDSECT, false is returned when the current event text contains at least one non-white space character. For any other event type an exception is thrown.", "history": "Added in API level 1", "FullName": "public abstract boolean isWhitespace ()"}, "setProperty(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If the property is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", "If string with the property name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI.", "history": "added in API level 1", "FullName": "public abstract void setProperty (String name, Object value)"}, "getAttributeValue(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "value of attribute or null if attribute with given name does not exist"]], "Parameters": [["@B_java#lang#String_E@", "String: Namespace of the attribute if namespaces are enabled otherwise must be null"], ["@B_java#lang#String_E@", "String: If namespaces enabled local name of attribute otherwise just attribute name"]], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#defineEntityReplacementText_E@"], "Permissions": [], "Description": "Returns the attributes value identified by namespace URI and namespace localName. If namespaces are disabled namespace must be null. If current event type is not START_TAG then IndexOutOfBoundsException will be thrown.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeValue (String namespace, String name)"}, "getNamespaceUri(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the namespace URI for the given position in the namespace stack If the position is out of range, an exception is thrown.", "history": "Added in API level 1", "FullName": "public abstract String getNamespaceUri (int pos)"}, "getNamespace()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the namespace URI of the current element. The default namespace is represented as empty string. If namespaces are not enabled, an empty String (\"\") is always returned. The current event must be START_TAG or END_TAG; otherwise, null is returned.", "history": "Added in API level 1", "FullName": "public abstract String getNamespace ()"}, "getDepth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current depth of the element. Outside the root element, the depth is 0. The depth is incremented by 1 when a start tag is reached. The depth is decremented AFTER the end tag event was observed.", "history": "Added in API level 1", "FullName": "public abstract int getDepth ()"}, "next()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#isEmptyElementTag_E@", "@B_org#xmlpull#v1#XmlPullParser_E@"], "Permissions": [], "Description": "Get next parsing event - element content will be coalesced and only one TEXT event must be returned for whole element content (comments and processing instructions will be ignored and entity references must be expanded or exception must be thrown if entity reference can not be expanded). If element content is empty (content is \"\") then no TEXT event will be reported.", "history": "Added in API level 1", "FullName": "public abstract int next ()"}, "getAttributeName(int)": {"Returns": [["@B_java#lang#String_E@", "attribute name (null is never returned)"]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the local name of the specified attribute if namespaces are enabled or just attribute name if namespaces are disabled. Throws an IndexOutOfBoundsException if the index is out of range or current event type is not START_TAG.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeName (int index)"}, "require(int, java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Test if the current event is of the given type and if the namespace and name do match. null will match any namespace and any name. If the test is not passed, an exception is thrown. The exception text indicates the parser position, the expected event and the current event that is not meeting the requirement. Essentially it does this", "history": "added in API level 1", "FullName": "public abstract void require (int type, String namespace, String name)"}, "getNamespaceCount(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#getNamespacePrefix_E@", "@B_org#xmlpull#v1#XmlPullParser#getNamespaceUri_E@", "@B_org#xmlpull#v1#XmlPullParser#getNamespace_E@"], "Permissions": [], "Description": "Returns the numbers of elements in the namespace stack for the given depth. If namespaces are not enabled, 0 is returned.", "history": "Added in API level 1", "FullName": "public abstract int getNamespaceCount (int depth)"}, "getTextCharacters(int[])": {"Returns": [["char[]", "char buffer that contains the text of the current event (null if the current event has no text associated)."]], "Parameters": [["int[]", "int: Must hold an 2-element int array into which the start offset and length values will be written."]], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#getText_E@", "@B_org#xmlpull#v1#XmlPullParser#next_E@", "@B_org#xmlpull#v1#XmlPullParser#nextToken_E@"], "Permissions": [], "Description": "Returns the buffer that contains the text of the current event, as well as the start offset and length relevant for the current event. See getText(), next() and nextToken() for description of possible returned values.", "history": "Added in API level 1", "FullName": "public abstract char[] getTextCharacters (int[] holderForStartAndLength)"}, "getEventType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#next_E@", "@B_org#xmlpull#v1#XmlPullParser#nextToken_E@"], "Permissions": [], "Description": "Returns the type of the current event (START_TAG, END_TAG, TEXT, etc.)", "history": "Added in API level 1", "FullName": "public abstract int getEventType ()"}, "nextText()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "If current event is START_TAG then if next element is TEXT then element content is returned or if next event is END_TAG then empty string is returned, otherwise exception is thrown. After calling this function successfully parser will be positioned on END_TAG. The motivation for this function is to allow to parse consistently both empty elements and elements that has non empty content, for example for input:", "history": "Added in API level 1", "FullName": "public abstract String nextText ()"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If the feature is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", "If string with the feature name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Use this call to change the general behaviour of the parser, such as namespace processing or doctype declaration handling. This method must be called before the first call to next or nextToken. Otherwise, an exception is thrown. Example: call setFeature(FEATURE_PROCESS_NAMESPACES, true) in order to switch on namespace processing. The initial settings correspond to the properties requested from the XML Pull Parser factory. If none were requested, all features are deactivated by default.", "history": "Added in API level 1", "FullName": "public abstract void setFeature (String name, boolean state)"}, "getPositionDescription()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a short text describing the current parser state, including the position, a description of the current event and the data source if known. This method is especially useful to provide meaningful error messages and for debugging purposes.", "history": "Added in API level 1", "FullName": "public abstract String getPositionDescription ()"}, "getNamespacePrefix(int)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the namespace prefix for the given position in the namespace stack. Default namespace declaration (xmlns='...') will have null as prefix. If the given index is out of range, an exception is thrown.", "history": "Added in API level 1", "FullName": "public abstract String getNamespacePrefix (int pos)"}, "getAttributeCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#getAttributeNamespace_E@", "@B_org#xmlpull#v1#XmlPullParser#getAttributeName_E@", "@B_org#xmlpull#v1#XmlPullParser#getAttributePrefix_E@", "@B_org#xmlpull#v1#XmlPullParser#getAttributeValue_E@"], "Permissions": [], "Description": "Returns the number of attributes of the current start tag, or -1 if the current event type is not START_TAG", "history": "Added in API level 1", "FullName": "public abstract int getAttributeCount ()"}, "isAttributeDefault(int)": {"Returns": [["boolean", "false if attribute was in input"]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the specified attribute was not in input was declared in XML. If parser is non-validating it MUST always return false. This information is part of XML infoset:", "history": "Added in API level 1", "FullName": "public abstract boolean isAttributeDefault (int index)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For START_TAG or END_TAG events, the (local) name of the current element is returned when namespaces are enabled. When namespace processing is disabled, the raw name is returned. For ENTITY_REF events, the entity name is returned. If the current event is not START_TAG, END_TAG, or ENTITY_REF, null is returned.", "history": "Added in API level 1", "FullName": "public abstract String getName ()"}, "getNamespace(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#getNamespaceCount_E@", "@B_org#xmlpull#v1#XmlPullParser#getNamespacePrefix_E@", "@B_org#xmlpull#v1#XmlPullParser#getNamespaceUri_E@"], "Permissions": [], "Description": "Returns the URI corresponding to the given prefix, depending on current state of the parser. If the prefix was not declared in the current scope, null is returned. The default namespace is included in the namespace table and is available via getNamespace (null). This method is a convenience method for", "history": "Added in API level 1", "FullName": "public abstract String getNamespace (String prefix)"}, "getInputEncoding()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input encoding if known, null otherwise. If setInput(InputStream, inputEncoding) was called with an inputEncoding value other than null, this value must be returned from this method. Otherwise, if inputEncoding is null and the parser supports the encoding detection feature (http://xmlpull.org/v1/doc/features.html#detect-encoding), it must return the detected encoding. If setInput(Reader) was called, null is returned. After first call to next if XML declaration was present this method will return encoding declared.", "history": "Added in API level 1", "FullName": "public abstract String getInputEncoding ()"}, "getAttributeNamespace(int)": {"Returns": [["@B_java#lang#String_E@", "attribute namespace, empty string (\"\") is returned if namespaces processing is not enabled or namespaces processing is enabled but attribute has no namespace (it has no prefix)."]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the namespace URI of the attribute with the given index (starts from 0). Returns an empty string (\"\") if namespaces are not enabled or the attribute has no namespace. Throws an IndexOutOfBoundsException if the index is out of range or the current event type is not START_TAG.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeNamespace (int index)"}, "getLineNumber()": {"Returns": [["int", "current line number or -1 if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current line number, starting from 1. When the parser does not know the current line number or can not determine it, -1 is returned (e.g. for WBXML).", "history": "Added in API level 1", "FullName": "public abstract int getLineNumber ()"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If the feature is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", "If string with the feature name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Use this call to change the general behaviour of the parser, such as namespace processing or doctype declaration handling. This method must be called before the first call to next or nextToken. Otherwise, an exception is thrown. Example: call setFeature(FEATURE_PROCESS_NAMESPACES, true) in order to switch on namespace processing. The initial settings correspond to the properties requested from the XML Pull Parser factory. If none were requested, all features are deactivated by default.", "history": "added in API level 1", "FullName": "public abstract void setFeature (String name, boolean state)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "The value of the feature."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of feature to be retrieved."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if string the feature name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the given feature.", "history": "Added in API level 1", "FullName": "public abstract boolean getFeature (String name)"}, "getColumnNumber()": {"Returns": [["int", "current column number or -1 if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current column number, starting from 0. When the parser does not know the current column number or can not determine it, -1 is returned (e.g. for WBXML).", "history": "Added in API level 1", "FullName": "public abstract int getColumnNumber ()"}, "setInput(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Set the input source for parser to the given reader and resets the parser. The event type is set to the initial value START_DOCUMENT. Setting the reader to null will just stop parsing and reset parser state, allowing the parser to free internal resources such as parsing buffers.", "history": "Added in API level 1", "FullName": "public abstract void setInput (Reader in)"}, "getAttributeValue(int)": {"Returns": [["@B_java#lang#String_E@", "value of attribute (null is never returned)"]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#defineEntityReplacementText_E@"], "Permissions": [], "Description": "Returns the given attributes value. Throws an IndexOutOfBoundsException if the index is out of range or current event type is not START_TAG.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeValue (int index)"}, "setInput(java.io.InputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: contains a raw byte input stream of possibly unknown encoding (when inputEncoding is null)."], ["@B_java#lang#String_E@", "String: if not null it MUST be used as encoding for inputStream"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the input stream the parser is going to process. This call resets the parser state and sets the event type to the initial value START_DOCUMENT.", "history": "added in API level 1", "FullName": "public abstract void setInput (InputStream inputStream, String inputEncoding)"}, "getText()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#getEventType_E@", "@B_org#xmlpull#v1#XmlPullParser#next_E@", "@B_org#xmlpull#v1#XmlPullParser#nextToken_E@"], "Permissions": [], "Description": "Returns the text content of the current event as String. The value returned depends on current event type, for example for TEXT event it is element content (this is typical case when next() is used). See description of nextToken() for detailed description of possible returned values for different types of events.", "history": "Added in API level 1", "FullName": "public abstract String getText ()"}, "defineEntityReplacementText(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#setInput_E@", "@B_org#xmlpull#v1#XmlPullParser_E@"], "Permissions": [], "Description": "Set new value for entity replacement text as defined in The motivation for this function is to allow very small implementations of XMLPULL that will work in J2ME environments. Though these implementations may not be able to process the document type declaration, they still can work with known DTDs by using this function.", "history": "Added in API level 1", "FullName": "public abstract void defineEntityReplacementText (String entityName, String replacementText)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The value of named property."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of property to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Look up the value of a property. The property name is any fully-qualified URI.", "history": "Added in API level 1", "FullName": "public abstract Object getProperty (String name)"}, "nextToken()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": ["@B_org#xmlpull#v1#XmlPullParser#next_E@", "@B_org#xmlpull#v1#XmlPullParser_E@"], "Permissions": [], "Description": "This method works similarly to next() but will expose additional event types (COMMENT, CDSECT, DOCDECL, ENTITY_REF, PROCESSING_INSTRUCTION, or IGNORABLE_WHITESPACE) if they are available in input. If special feature Here is the list of tokens that can be returned from nextToken() and what getText() and getTextCharacters() returns:", "history": "Added in API level 1", "FullName": "public abstract int nextToken ()"}, "getAttributeType(int)": {"Returns": [["@B_java#lang#String_E@", "attribute type (null is never returned)"]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of the specified attribute If parser is non-validating it MUST return CDATA.", "history": "Added in API level 1", "FullName": "public abstract String getAttributeType (int index)"}, "nextTag()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Call next() and return event if it is START_TAG or END_TAG otherwise throw an exception. It will skip whitespace TEXT before actual tag if any. essentially it does this", "history": "Added in API level 1", "FullName": "public abstract int nextTag ()"}, "isEmptyElementTag()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current event is START_TAG and the tag is degenerated (e.g. <foobar/>).", "history": "Added in API level 1", "FullName": "public abstract boolean isEmptyElementTag ()"}, "getPrefix()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the prefix of the current element. If the element is in the default namespace (has no prefix), null is returned. If namespaces are not enabled, or the current event is not START_TAG or END_TAG, null is returned.", "history": "Added in API level 1", "FullName": "public abstract String getPrefix ()"}, "setProperty(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", "If the property is not supported or can not be set"], ["@B_java#lang#IllegalArgumentException_E@", "If string with the property name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI.", "history": "Added in API level 1", "FullName": "public abstract void setProperty (String name, Object value)"}, "setInput(java.io.InputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: contains a raw byte input stream of possibly unknown encoding (when inputEncoding is null)."], ["@B_java#lang#String_E@", "String: if not null it MUST be used as encoding for inputStream"]], "Throws": [["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the input stream the parser is going to process. This call resets the parser state and sets the event type to the initial value START_DOCUMENT.", "history": "Added in API level 1", "FullName": "public abstract void setInput (InputStream inputStream, String inputEncoding)"}, "getAttributePrefix(int)": {"Returns": [["@B_java#lang#String_E@", "attribute prefix or null if namespaces processing is not enabled."]], "Parameters": [["int", "int: zero-based index of attribute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the prefix of the specified attribute Returns null if the element has no prefix. If namespaces are disabled it will always return null. Throws an IndexOutOfBoundsException if the index is out of range or current event type is not START_TAG.", "history": "Added in API level 1", "FullName": "public abstract String getAttributePrefix (int index)"}}, "Inheritance": [], "ClassName": "org.xmlpull.v1.XmlPullParser", "ClassDesc": "XML Pull Parser is an interface that defines parsing functionality provided in There are following different kinds of parser depending on which features are set: when FEATURE_PROCESS_DOCDECL is false (this is default and if different value is required necessary must be changed before parsing is started) then parser behaves like XML 1.0 compliant non-validating parser under condition that no DOCDECL is present in XML documents (internal entites can still be defined with defineEntityReplacementText()). This mode of operation is intended There are two key methods: next() and nextToken(). While next() provides access to high level parsing events, nextToken() allows access to lower level tokens. The current event state of the parser can be determined by calling the The method Th following event types are seen by next()after first next() or nextToken() (or any other next*() method) is called user application can obtain XML version, standalone and encoding from XML declaration in following ways: A minimal example for using this API may look as follows: The above example will generate the following output: For more details on API usage, please refer to the quick Introduction available at"}