{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Throwable#printStackTrace_E@"], "Permissions": [], "Description": "Returns a string representation of this stack trace element. The format of this string depends on the implementation, but the following examples may be regarded as typical: \"MyClass.mash(MyClass.java:9)\" - Here, \"MyClass\" is the \"mash\" is the name of the method containing the execution point, \"MyClass.java\" is the source file containing the execution point, and \"9\" is the line number of the source line containing the execution point. \"MyClass.mash(MyClass.java)\" - As above, but the line number is unavailable. \"MyClass.mash(Unknown Source)\" - As above, but neither the file name nor the line number are available. \"MyClass.mash(Native Method)\" - As above, but neither the file name nor the line number are available, and the method containing the execution point is known to be a native method.", "history": "added in API level 1", "FullName": "public String toString ()"}, "StackTraceElement(java.lang.String, java.lang.String, java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the fully qualified name of the class containing the execution point represented by the stack trace element"], ["@B_java#lang#String_E@", "String: the name of the method containing the execution point represented by the stack trace element"], ["@B_java#lang#String_E@", "String: the name of the file containing the execution point represented by the stack trace element, or null if this information is unavailable"], ["int", "int: the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable. A value of -2 indicates that the method containing the execution point is a native method"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if declaringClass or methodName is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a stack trace element representing the specified execution point.", "history": "added in API level 1", "FullName": "public StackTraceElement (String declaringClass, String methodName, String fileName, int lineNumber)"}, "getLineNumber()": {"Returns": [["int", "the line number of the source line containing the execution point represented by this stack trace element, or a negative number if this information is unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the line number of the source line containing the execution point represented by this stack trace element. Generally, this is derived from the LineNumberTable attribute of the relevant class file (as per", "history": "added in API level 1", "FullName": "public int getLineNumber ()"}, "getClassName()": {"Returns": [["@B_java#lang#String_E@", "the fully qualified name of the Class containing the execution point represented by this stack trace element."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the fully qualified name of the class containing the execution point represented by this stack trace element.", "history": "added in API level 1", "FullName": "public String getClassName ()"}, "isNativeMethod()": {"Returns": [["boolean", "true if the method containing the execution point represented by this stack trace element is a native method."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the method containing the execution point represented by this stack trace element is a native method.", "history": "added in API level 1", "FullName": "public boolean isNativeMethod ()"}, "getMethodName()": {"Returns": [["@B_java#lang#String_E@", "the name of the method containing the execution point represented by this stack trace element."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the method containing the execution point represented by this stack trace element. If the execution point is contained in an instance or class initializer, this method will return the appropriate <init> or <clinit>, as per Section 3.9 of", "history": "added in API level 1", "FullName": "public String getMethodName ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is another StackTraceElement instance representing the same execution point as this instance."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared with this stack trace element."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified object is another StackTraceElement instance representing the same execution point as this instance. Two stack trace elements a and b are equal if and only if: equals has the semantics of @B_java#util#Objects#equals_E@.", "history": "added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getFileName()": {"Returns": [["@B_java#lang#String_E@", "the name of the file containing the execution point represented by this stack trace element, or null if this information is unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the source file containing the execution point represented by this stack trace element. Generally, this corresponds to the SourceFile attribute of the relevant class file (as per", "history": "added in API level 1", "FullName": "public String getFileName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for this stack trace element.", "history": "added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.lang.StackTraceElement", "ClassDesc": "An element in a stack trace, as returned by @B_java#lang#Throwable#getStackTrace_E@. Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created."}