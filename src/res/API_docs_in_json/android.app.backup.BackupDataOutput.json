{"Functions": {"writeEntityHeader(java.lang.String,int)": {"Returns": [["int", "The number of bytes written to the backup stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A string key that uniquely identifies the data record within the application. Keys whose first character is \uff00 or higher are not valid."], ["int", "int: The size in bytes of this record's data. Passing a dataSize of -1 indicates that the record under this key should be deleted."]], "Throws": [["@B_java#io#IOException_E@", "if the write failed"]], "SeeAlso": [], "Permissions": [], "Description": "Mark the beginning of one record in the backup data stream. This must be called before @B_android#app#backup#BackupDataOutput#writeEntityData_E@.", "history": "Added in API level 8", "FullName": "public int writeEntityHeader (String key, int dataSize)"}, "writeEntityHeader(java.lang.String, int)": {"Returns": [["int", "The number of bytes written to the backup stream"]], "Parameters": [["@B_java#lang#String_E@", "String: A string key that uniquely identifies the data record within the application. Keys whose first character is \uff00 or higher are not valid."], ["int", "int: The size in bytes of this record's data. Passing a dataSize of -1 indicates that the record under this key should be deleted."]], "Throws": [["@B_java#io#IOException_E@", "if the write failed"]], "SeeAlso": [], "Permissions": [], "Description": "Mark the beginning of one record in the backup data stream. This must be called before @B_android#app#backup#BackupDataOutput#writeEntityData_E@.", "history": "added in API level 8", "FullName": "public int writeEntityHeader (String key, int dataSize)"}, "writeEntityData(byte[], int)": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["byte[]", "byte: A raw data buffer to send"], ["int", "int: The number of bytes to be sent in this chunk"]], "Throws": [["@B_java#io#IOException_E@", "if the write failed"]], "SeeAlso": [], "Permissions": [], "Description": "Write a chunk of data under the current entity to the backup transport.", "history": "added in API level 8", "FullName": "public int writeEntityData (byte[] data, int size)"}, "writeEntityData(byte[],int)": {"Returns": [["int", "the number of bytes written"]], "Parameters": [["byte[]", "byte: A raw data buffer to send"], ["int", "int: The number of bytes to be sent in this chunk"]], "Throws": [["@B_java#io#IOException_E@", "if the write failed"]], "SeeAlso": [], "Permissions": [], "Description": "Write a chunk of data under the current entity to the backup transport.", "history": "Added in API level 8", "FullName": "public int writeEntityData (byte[] data, int size)"}, "getTransportFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#backup#FullBackupDataOutput#getTransportFlags_E@"], "Permissions": [], "Description": "Returns flags with additional information about the backup transport. For supported flags see @B_android#app#backup#BackupAgent_E@", "history": "Added in API level 28", "FullName": "public int getTransportFlags ()"}, "getQuota()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#backup#FullBackupDataOutput#getQuota_E@"], "Permissions": [], "Description": "Returns the quota in bytes for the application's current backup operation. The value can vary for each operation.", "history": "Added in API level 26", "FullName": "public long getQuota ()"}}, "Inheritance": [], "ClassName": "android.app.backup.BackupDataOutput", "ClassDesc": "Provides the structured interface through which a @B_android#app#backup#BackupAgent_E@ commits information to the backup data set, via its @B_android#app#backup#BackupAgent#onBackup_E@ method. Data written for backup is presented as a set of \"entities,\" key/value pairs in which each binary data record \"value\" is named with a string \"key.\" To commit a data record to the backup transport, the agent's @B_android#app#backup#BackupAgent#onBackup_E@ method first writes an \"entity header\" that supplies the key string for the record and the total size of the binary value for the record. After the header has been written, the agent then writes the binary entity value itself. The entity value can be written in multiple chunks if desired, as long as the total count of bytes written matches what was supplied to @B_android#app#backup#BackupDataOutput#writeEntityHeader_E@. Entity key strings are considered to be unique within a given application's backup data set. If a backup agent writes a new entity under an existing key string, its value will replace any previous value in the transport's remote data store. You can remove a record entirely from the remote data set by writing a new entity header using the existing record's key, but supplying a negative dataSize parameter. When you do so, the agent does not need to call @B_android#app#backup#BackupDataOutput#writeEntityData_E@. Here is an example illustrating a way to back up the value of a String variable called mStringToBackUp:"}