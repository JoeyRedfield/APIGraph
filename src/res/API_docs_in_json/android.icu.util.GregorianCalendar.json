{"Functions": {"getActualMinimum(int)": {"Returns": [["int", "the minimum of the given field for the current date of this calendar"]], "Parameters": [["int", "int: the field whose actual minimum value is desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the minimum value that this field could have, given the current date. For the Gregorian calendar, this is the same as getMinimum() and getGreatestMinimum().", "history": "Added in API level 24", "FullName": "public int getActualMinimum (int field)"}, "GregorianCalendar(android.icu.util.TimeZone,java.util.Locale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public GregorianCalendar (TimeZone zone, Locale aLocale)"}, "isLeapYear(int)": {"Returns": [["boolean", "true if the given year is a leap year; false otherwise."]], "Parameters": [["int", "int: the given year."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if the given year is a leap year. Returns true if the given year is a leap year.", "history": "Added in API level 24", "FullName": "public boolean isLeapYear (int year)"}, "handleGetLimit(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "added in API level 24", "FullName": "protected int handleGetLimit (int field, int limitType)"}, "isEquivalentTo(android.icu.util.Calendar)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: the Calendar to be compared with this Calendar"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the given Calendar object is equivalent to this one. Calendar override.", "history": "Added in API level 24", "FullName": "public boolean isEquivalentTo (Calendar other)"}, "setGregorianChange(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the given Gregorian cutover date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the GregorianCalendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582. Previous to this, dates will be in the Julian calendar. To obtain a pure Julian calendar, set the change date to Date(Long.MAX_VALUE). To obtain a pure Gregorian calendar, set the change date to Date(Long.MIN_VALUE).", "history": "Added in API level 24", "FullName": "public void setGregorianChange (Date date)"}, "handleComputeMonthStart(int,int,boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return JD of start of given month/year", "history": "Added in API level 24", "FullName": "protected int handleComputeMonthStart (int eyear, int month, boolean useMonth)"}, "GregorianCalendar()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a default GregorianCalendar using the current time in the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar ()"}, "roll(int, int)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["int", "int: the amount by which the field should be rolled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Roll a field by a signed amount.", "history": "added in API level 24", "FullName": "public void roll (int field, int amount)"}, "GregorianCalendar(int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY time field in the calendar."], ["int", "int: the value used to set the MINUTE time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date, int hour, int minute)"}, "GregorianCalendar(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the default time zone with the given locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (Locale aLocale)"}, "GregorianCalendar(int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date set in the default time zone with the default FORMAT locale.", "history": "added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date)"}, "handleGetMonthLength(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "handleGetMonthLength(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "GregorianCalendar(android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public GregorianCalendar (ULocale locale)"}, "handleComputeMonthStart(int, int, boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return JD of start of given month/year", "history": "added in API level 24", "FullName": "protected int handleComputeMonthStart (int eyear, int month, boolean useMonth)"}, "handleComputeJulianDay(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses may override this. This method calls handleGetMonthLength() to obtain the calendar-specific month length.", "history": "Added in API level 24", "FullName": "protected int handleComputeJulianDay (int bestField)"}, "handleGetExtendedYear()": {"Returns": [["int", "the extended year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extended year defined by the current fields. This will use the EXTENDED_YEAR field or the YEAR and supra-year fields (such as ERA) specific to the calendar system, depending on which set of fields is newer.", "history": "Added in API level 24", "FullName": "protected int handleGetExtendedYear ()"}, "getGregorianChange()": {"Returns": [["@B_java#util#Date_E@", "the Gregorian cutover date for this calendar."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Gregorian Calendar change date. This is the point when the switch from Julian dates to Gregorian dates occurred. Default is October 15, 1582. Previous to this, dates will be in the Julian calendar.", "history": "Added in API level 24", "FullName": "public final Date getGregorianChange ()"}, "roll(int,int)": {"Returns": [], "Parameters": [["int", "int: the calendar field to roll."], ["int", "int: the amount by which the field should be rolled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Roll a field by a signed amount.", "history": "Added in API level 24", "FullName": "public void roll (int field, int amount)"}, "GregorianCalendar(android.icu.util.TimeZone,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the given time zone with the given locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (TimeZone zone, ULocale locale)"}, "handleGetLimit(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "Added in API level 24", "FullName": "protected int handleGetLimit (int field, int limitType)"}, "handleGetYearLength(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetYearLength (int eyear)"}, "GregorianCalendar(android.icu.util.TimeZone)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar based on the current time in the given time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (TimeZone zone)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode. Generates the hash code for the GregorianCalendar object", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "GregorianCalendar(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY time field in the calendar."], ["int", "int: the value used to set the MINUTE time field in the calendar."], ["int", "int: the value used to set the SECOND time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date, int hour, int minute, int second)"}, "GregorianCalendar(int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY time field in the calendar."], ["int", "int: the value used to set the MINUTE time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date, int hour, int minute)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "legacy calendar type name string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See type=\"old type name\" for the calendar attribute of locale IDs at http://www.unicode.org/reports/tr35/#Key_Type_Definitions", "history": "Added in API level 24", "FullName": "public String getType ()"}, "handleComputeFields(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override Calendar to compute several fields specific to the hybrid Gregorian-Julian calendar system. These are: ERA YEAR MONTH DAY_OF_MONTH DAY_OF_YEAR EXTENDED_YEAR", "history": "Added in API level 24", "FullName": "protected void handleComputeFields (int julianDay)"}, "GregorianCalendar(int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date set in the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date)"}, "getActualMaximum(int)": {"Returns": [["int", "the maximum of the given field for the current date of this calendar"]], "Parameters": [["int", "int: the field whose maximum is desired"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum value that this field could have, given the current date. For example, with the date \"Feb 3, 1997\" and the DAY_OF_MONTH field, the actual maximum would be 28; for \"Feb 3, 1996\" it s 29. Similarly for a Hebrew calendar, for some years the actual maximum for MONTH is 12, and for others 13.", "history": "Added in API level 24", "FullName": "public int getActualMaximum (int field)"}, "GregorianCalendar(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: the value used to set the YEAR time field in the calendar."], ["int", "int: the value used to set the MONTH time field in the calendar. Month value is 0-based. e.g., 0 for January."], ["int", "int: the value used to set the DATE time field in the calendar."], ["int", "int: the value used to set the HOUR_OF_DAY time field in the calendar."], ["int", "int: the value used to set the MINUTE time field in the calendar."], ["int", "int: the value used to set the SECOND time field in the calendar."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a GregorianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public GregorianCalendar (int year, int month, int date, int hour, int minute, int second)"}}, "Inheritance": ["@B_android#icu#util#Calendar_E@"], "ClassName": "android.icu.util.GregorianCalendar", "ClassDesc": "@B_java#util#GregorianCalendar_E@. Methods, fields, and other functionality specific to ICU are labeled 'GregorianCalendar is a concrete subclass of @B_android#icu#util#Calendar_E@ and provides the standard calendar used by most of the world. The standard (Gregorian) calendar has 2 eras, BC and AD. This implementation handles a single discontinuity, which corresponds by default to the date the Gregorian calendar was instituted (October 15, 1582 in some countries, later in others). The cutover date may be changed by the caller by calling setGregorianChange(). Historically, in those countries which adopted the Gregorian calendar first, October 4, 1582 was thus followed by October 15, 1582. This calendar models this correctly. Before the Gregorian cutover, GregorianCalendar implements the Julian calendar. The only difference between the Gregorian and the Julian calendar is the leap year rule. The Julian calendar specifies leap years every four years, whereas the Gregorian calendar omits century years which are not divisible by 400. GregorianCalendar implements proleptic Gregorian and Julian calendars. That is, dates are computed by extrapolating the current rules indefinitely far backward and forward in time. As a result, GregorianCalendar may be used for all years to generate meaningful and consistent results. However, dates obtained using GregorianCalendar are historically accurate only from March 1, 4 AD onward, when modern Julian calendar rules were adopted. Before this date, leap year rules were applied irregularly, and before 45 BC the Julian calendar did not even exist. Prior to the institution of the Gregorian calendar, New Year's Day was March 25. To avoid confusion, this calendar always uses January 1. A manual adjustment may be made if desired for dates that are prior to the Gregorian changeover and which fall between January 1 and March 24. Values calculated for the WEEK_OF_YEAR field range from 1 to 53. Week 1 for a year is the earliest seven day period starting on getFirstDayOfWeek() that contains at least getMinimalDaysInFirstWeek() days from that year. It thus depends on the values of getMinimalDaysInFirstWeek(), getFirstDayOfWeek(), and the day of the week of January 1. Weeks between week 1 of one year and week 1 of the following year are numbered sequentially from 2 to 52 or 53 (as needed). For example, January 1, 1998 was a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (these are the values reflecting ISO 8601 and many national standards), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three days of 1998 then are part of week 53 of 1997. Values calculated for the WEEK_OF_MONTH field range from 0 or 1 to 4 or 5. Week 1 of a month (the days with WEEK_OF_MONTH = 1) is the earliest set of at least getMinimalDaysInFirstWeek() contiguous days in that month, ending on the day before getFirstDayOfWeek(). Unlike week 1 of a year, week 1 of a month may be shorter than 7 days, need not start on getFirstDayOfWeek(), and will not include days of the previous month. Days of a month before week 1 have a WEEK_OF_MONTH of 0. For example, if getFirstDayOfWeek() is SUNDAY and getMinimalDaysInFirstWeek() is 4, then the first week of January 1998 is Sunday, January 4 through Saturday, January 10. These days have a WEEK_OF_MONTH of 1. Thursday, January 1 through Saturday, January 3 have a WEEK_OF_MONTH of 0. If getMinimalDaysInFirstWeek() is changed to 3, then January 1 through January 3 have a WEEK_OF_MONTH of 1. GregorianCalendar usually should be instantiated using @B_android#icu#util#Calendar#getInstance_E@ passing in a ULocale with the tag \"@calendar=gregorian\"."}