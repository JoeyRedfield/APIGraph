{"Functions": {"put(int,byte)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the byte will be written"], ["byte", "byte: The byte value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given byte into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer put (int index, byte b)"}, "putInt(int,int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["int", "int: The int value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes four bytes containing the given int value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putInt (int index, int value)"}, "putInt(int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The int value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than four bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes four bytes containing the given int value, in the current byte order, into this buffer at the current position, and then increments the position by four.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putInt (int value)"}, "putFloat(int, float)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["float", "float: The float value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes four bytes containing the given float value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putFloat (int index, float value)"}, "hasArray()": {"Returns": [["boolean", "true if, and only if, this buffer is backed by an array and is not read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is backed by an accessible byte array. If this method returns @B_java#nio#ByteBuffer#array_E@ and @B_java#nio#ByteBuffer#arrayOffset_E@ methods may safely be invoked.", "history": "Added in API level 1", "FullName": "public final boolean hasArray ()"}, "wrap(byte[])": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [["byte[]", "byte: The array that will back this buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps a byte array into a buffer. The new buffer will be backed by the given byte array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity and limit will be @B_java#nio#ByteBuffer#array_E@ will be the given array, and its @B_java#nio#ByteBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static ByteBuffer wrap (byte[] array)"}, "getDouble()": {"Returns": [["double", "The double value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than eight bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next eight bytes at this buffer's current position, composing them into a double value according to the current byte order, and then increments the position by eight.", "history": "Added in API level 1", "FullName": "public abstract double getDouble ()"}, "putLong(int, long)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["long", "long: The long value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes eight bytes containing the given long value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putLong (int index, long value)"}, "putShort(int, short)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["short", "short: The short value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes two bytes containing the given short value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putShort (int index, short value)"}, "putShort(int,short)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["short", "short: The short value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes two bytes containing the given short value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putShort (int index, short value)"}, "get(byte[],int,int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The array into which bytes are to be written"], ["int", "int: The offset within the array of the first byte to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of bytes to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length bytes remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers bytes from this buffer into the given destination array. If there are fewer bytes remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public ByteBuffer get (byte[] dst, int offset, int length)"}, "duplicate()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new byte buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer duplicate ()"}, "getShort()": {"Returns": [["short", "The short value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than two bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next two bytes at this buffer's current position, composing them into a short value according to the current byte order, and then increments the position by two.", "history": "Added in API level 1", "FullName": "public abstract short getShort ()"}, "getLong(int)": {"Returns": [["long", "The long value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads eight bytes at the given index, composing them into a long value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract long getLong (int index)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, this buffer is equal to the given object"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to which this buffer is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is equal to another object. Two byte buffers are equal if, and only if, A byte buffer is not equal to any other type of object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object ob)"}, "getInt()": {"Returns": [["int", "The int value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than four bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next four bytes at this buffer's current position, composing them into an int value according to the current byte order, and then increments the position by four.", "history": "Added in API level 1", "FullName": "public abstract int getInt ()"}, "getShort(int)": {"Returns": [["short", "The short value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads two bytes at the given index, composing them into a short value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract short getShort (int index)"}, "getChar()": {"Returns": [["char", "The char value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than two bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next two bytes at this buffer's current position, composing them into a char value according to the current byte order, and then increments the position by two.", "history": "Added in API level 1", "FullName": "public abstract char getChar ()"}, "asLongBuffer()": {"Returns": [["@B_java#nio#LongBuffer_E@", "A new long buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as a long buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by eight, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract LongBuffer asLongBuffer ()"}, "hashCode()": {"Returns": [["int", "The current hash code of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current hash code of this buffer. The hash code of a byte buffer depends only upon its remaining elements; that is, upon the elements from Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "put(byte[])": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The source array"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the entire content of the given source byte array into this buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final ByteBuffer put (byte[] src)"}, "put(int, byte)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the byte will be written"], ["byte", "byte: The byte value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given byte into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer put (int index, byte b)"}, "putFloat(float)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["float", "float: The float value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than four bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes four bytes containing the given float value, in the current byte order, into this buffer at the current position, and then increments the position by four.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putFloat (float value)"}, "putInt(int, int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["int", "int: The int value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes four bytes containing the given int value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putInt (int index, int value)"}, "getInt(int)": {"Returns": [["int", "The int value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads four bytes at the given index, composing them into a int value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract int getInt (int index)"}, "putLong(long)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["long", "long: The long value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than eight bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes eight bytes containing the given long value, in the current byte order, into this buffer at the current position, and then increments the position by eight.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putLong (long value)"}, "putDouble(int, double)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["double", "double: The double value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes eight bytes containing the given double value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putDouble (int index, double value)"}, "wrap(byte[],int,int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [["byte[]", "byte: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a byte array into a buffer. The new buffer will be backed by the given byte array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#ByteBuffer#array_E@ will be the given array, and its @B_java#nio#ByteBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static ByteBuffer wrap (byte[] array, int offset, int length)"}, "allocate(int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [["int", "int: The new buffer's capacity, in bytes"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the capacity is a negative integer"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new byte buffer. The new buffer's position will be zero, its limit will be its capacity, its mark will be undefined, and each of its elements will be initialized to zero. It will have a @B_java#nio#ByteBuffer#array_E@, and its @B_java#nio#ByteBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static ByteBuffer allocate (int capacity)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A summary string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string summarizing the state of this buffer.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "get(int)": {"Returns": [["byte", "The byte at the given index"]], "Parameters": [["int", "int: The index from which the byte will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute", "history": "Added in API level 1", "FullName": "public abstract byte get (int index)"}, "limit(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new limit value; must be non-negative and no larger than this buffer's capacity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer limit (int newLimit)"}, "put(byte[], int, int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The array from which bytes are to be read"], ["int", "int: The offset within the array of the first byte to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of bytes to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers bytes into this buffer from the given source array. If there are more bytes to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public ByteBuffer put (byte[] src, int offset, int length)"}, "put(java.nio.ByteBuffer)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The source buffer from which bytes are to be read; must not be this buffer"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer for the remaining bytes in the source buffer"], ["@B_java#lang#IllegalArgumentException_E@", "If the source buffer is this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the bytes remaining in the given source buffer into this buffer. If there are more bytes remaining in the source buffer than in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public ByteBuffer put (ByteBuffer src)"}, "array()": {"Returns": [["byte[]", "The array that backs this buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the byte array that backs this buffer Modifications to this buffer's content will cause the returned array's content to be modified, and vice versa. Invoke the @B_java#nio#ByteBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final byte[] array ()"}, "wrap(byte[], int, int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [["byte[]", "byte: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a byte array into a buffer. The new buffer will be backed by the given byte array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#ByteBuffer#array_E@ will be the given array, and its @B_java#nio#ByteBuffer#arrayOffset_E@ will be zero.", "history": "added in API level 1", "FullName": "public static ByteBuffer wrap (byte[] array, int offset, int length)"}, "putDouble(int,double)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["double", "double: The double value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes eight bytes containing the given double value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putDouble (int index, double value)"}, "position(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new position value; must be non-negative and no larger than the current limit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's position. If the mark is defined and larger than the new position then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer position (int newPosition)"}, "putChar(int,char)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["char", "char: The char value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes two bytes containing the given char value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putChar (int index, char value)"}, "putDouble(double)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["double", "double: The double value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than eight bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes eight bytes containing the given double value, in the current byte order, into this buffer at the current position, and then increments the position by eight.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putDouble (double value)"}, "order()": {"Returns": [["@B_java#nio#ByteOrder_E@", "This buffer's byte order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this buffer's byte order. The byte order is used when reading or writing multibyte values, and when creating buffers that are views of this byte buffer. The order of a newly-created byte buffer is always @B_java#nio#ByteOrder#BIG_ENDIAN_E@.", "history": "Added in API level 1", "FullName": "public final ByteOrder order ()"}, "putChar(int, char)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["char", "char: The char value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes two bytes containing the given char value, in the current byte order, into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract ByteBuffer putChar (int index, char value)"}, "getChar(int)": {"Returns": [["char", "The char value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus one"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads two bytes at the given index, composing them into a char value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract char getChar (int index)"}, "order(java.nio.ByteOrder)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["@B_java#nio#ByteOrder_E@", "ByteOrder: The new byte order, either @B_java#nio#ByteOrder#BIG_ENDIAN_E@ or @B_java#nio#ByteOrder#LITTLE_ENDIAN_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Modifies this buffer's byte order.", "history": "Added in API level 1", "FullName": "public final ByteBuffer order (ByteOrder bo)"}, "getFloat()": {"Returns": [["float", "The float value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than four bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next four bytes at this buffer's current position, composing them into a float value according to the current byte order, and then increments the position by four.", "history": "Added in API level 1", "FullName": "public abstract float getFloat ()"}, "put(byte)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte", "byte: The byte to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If this buffer's current position is not smaller than its limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes the given byte into this buffer at the current position, and then increments the position.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer put (byte b)"}, "clear()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.", "history": "Added in API level 1", "FullName": "public Buffer clear ()"}, "flip()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or This method is often used in conjunction with the @B_java#nio#ByteBuffer#compact_E@ method when transferring data from one place to another.", "history": "Added in API level 1", "FullName": "public Buffer flip ()"}, "asIntBuffer()": {"Returns": [["@B_java#nio#IntBuffer_E@", "A new int buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as an int buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by four, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract IntBuffer asIntBuffer ()"}, "asFloatBuffer()": {"Returns": [["@B_java#nio#FloatBuffer_E@", "A new float buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as a float buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by four, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer asFloatBuffer ()"}, "get()": {"Returns": [["byte", "The byte at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If the buffer's current position is not smaller than its limit"]], "SeeAlso": [], "Permissions": [], "Description": "Relative", "history": "Added in API level 1", "FullName": "public abstract byte get ()"}, "asShortBuffer()": {"Returns": [["@B_java#nio#ShortBuffer_E@", "A new short buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as a short buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by two, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract ShortBuffer asShortBuffer ()"}, "getDouble(int)": {"Returns": [["double", "The double value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads eight bytes at the given index, composing them into a double value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract double getDouble (int index)"}, "slice()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new byte buffer whose content is a shared subsequence of this buffer's content. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer slice ()"}, "arrayOffset()": {"Returns": [["int", "The offset within this buffer's array of the first element of the buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset within this buffer's backing array of the first element of the buffer If this buffer is backed by an array then buffer position Invoke the @B_java#nio#ByteBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final int arrayOffset ()"}, "asReadOnlyBuffer()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new, read-only byte buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, read-only byte buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer; the new buffer itself, however, will be read-only and will not allow the shared content to be modified. The two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. If this buffer is itself read-only then this method behaves in exactly the same way as the @B_java#nio#ByteBuffer#duplicate_E@ method.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer asReadOnlyBuffer ()"}, "isDirect()": {"Returns": [["boolean", "true if, and only if, this buffer is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this byte buffer is direct.", "history": "Added in API level 1", "FullName": "public abstract boolean isDirect ()"}, "reset()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this buffer's position to the previously-marked position. Invoking this method neither changes nor discards the mark's value.", "history": "Added in API level 1", "FullName": "public Buffer reset ()"}, "getFloat(int)": {"Returns": [["float", "The float value at the given index"]], "Parameters": [["int", "int: The index from which the bytes will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Reads four bytes at the given index, composing them into a float value according to the current byte order.", "history": "Added in API level 1", "FullName": "public abstract float getFloat (int index)"}, "putFloat(int,float)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["float", "float: The float value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus three"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes four bytes containing the given float value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putFloat (int index, float value)"}, "rewind()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or", "history": "Added in API level 1", "FullName": "public Buffer rewind ()"}, "getLong()": {"Returns": [["long", "The long value at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than eight bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Reads the next eight bytes at this buffer's current position, composing them into a long value according to the current byte order, and then increments the position by eight.", "history": "Added in API level 1", "FullName": "public abstract long getLong ()"}, "get(byte[])": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The destination array"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length bytes remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers bytes from this buffer into the given destination array. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public ByteBuffer get (byte[] dst)"}, "putChar(char)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["char", "char: The char value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than two bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes two bytes containing the given char value, in the current byte order, into this buffer at the current position, and then increments the position by two.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putChar (char value)"}, "compareTo(java.nio.ByteBuffer)": {"Returns": [["int", "A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this buffer to another. Two byte buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its corresponding buffer. Pairs of byte elements are compared as if by invoking @B_java#lang#Byte#compare_E@. A byte buffer is not comparable to any other type of object.", "history": "Added in API level 1", "FullName": "public int compareTo (ByteBuffer that)"}, "putLong(int,long)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the bytes will be written"], ["long", "long: The long value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit, minus seven"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes eight bytes containing the given long value, in the current byte order, into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putLong (int index, long value)"}, "put(byte[],int,int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The array from which bytes are to be read"], ["int", "int: The offset within the array of the first byte to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of bytes to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers bytes into this buffer from the given source array. If there are more bytes to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public ByteBuffer put (byte[] src, int offset, int length)"}, "get(byte[], int, int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["byte[]", "byte: The array into which bytes are to be written"], ["int", "int: The offset within the array of the first byte to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of bytes to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length bytes remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers bytes from this buffer into the given destination array. If there are fewer bytes remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public ByteBuffer get (byte[] dst, int offset, int length)"}, "asDoubleBuffer()": {"Returns": [["@B_java#nio#DoubleBuffer_E@", "A new double buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as a double buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by eight, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract DoubleBuffer asDoubleBuffer ()"}, "putShort(short)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [["short", "short: The short value to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there are fewer than two bytes remaining in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes two bytes containing the given short value, in the current byte order, into this buffer at the current position, and then increments the position by two.", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer putShort (short value)"}, "allocateDirect(int)": {"Returns": [["@B_java#nio#ByteBuffer_E@", "The new byte buffer"]], "Parameters": [["int", "int: The new buffer's capacity, in bytes"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the capacity is a negative integer"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new direct byte buffer. The new buffer's position will be zero, its limit will be its capacity, its mark will be undefined, and each of its elements will be initialized to zero. Whether or not it has a @B_java#nio#ByteBuffer#hasArray_E@ is unspecified.", "history": "Added in API level 1", "FullName": "public static ByteBuffer allocateDirect (int capacity)"}, "mark()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's mark at its position.", "history": "Added in API level 1", "FullName": "public Buffer mark ()"}, "compact()": {"Returns": [["@B_java#nio#ByteBuffer_E@", "This buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Compacts this buffer The bytes between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the byte at index The buffer's position is set to the number of bytes copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative Invoke this method after writing data from a buffer in case the write was incomplete. The following loop, for example, copies bytes from one channel to another via the buffer", "history": "Added in API level 1", "FullName": "public abstract ByteBuffer compact ()"}, "asCharBuffer()": {"Returns": [["@B_java#nio#CharBuffer_E@", "A new char buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a view of this byte buffer as a char buffer. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of bytes remaining in this buffer divided by two, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract CharBuffer asCharBuffer ()"}}, "Inheritance": ["@B_java#nio#Buffer_E@"], "ClassName": "java.nio.ByteBuffer", "ClassDesc": "A byte buffer. This class defines six categories of operations upon byte buffers: Absolute and relative @B_java#nio#ByteBuffer#get_E@ and @B_java#nio#ByteBuffer#put_E@ methods that read and write single bytes; Relative @B_java#nio#ByteBuffer#get_E@ methods that transfer contiguous sequences of bytes from this buffer into an array; Relative @B_java#nio#ByteBuffer#put_E@ methods that transfer contiguous sequences of bytes from a byte array or some other byte buffer into this buffer; Absolute and relative @B_java#nio#ByteBuffer#getChar_E@ and @B_java#nio#ByteBuffer#putChar_E@ methods that read and write values of other primitive types, translating them to and from sequences of bytes in a particular byte order; Methods for creating Methods for @B_java#nio#ByteBuffer#compact_E@, @B_java#nio#ByteBuffer#duplicate_E@, and @B_java#nio#ByteBuffer#slice_E@ a byte buffer. Byte buffers can be created either by @B_java#nio#ByteBuffer#allocate_E@, which allocates space for the buffer's content, or by @B_java#nio#ByteBuffer#wrap_E@ an existing byte array into a buffer. A byte buffer is either A direct byte buffer may be created by invoking the @B_java#nio#ByteBuffer#allocateDirect_E@ factory method of this class. The buffers returned by this method typically have somewhat higher allocation and deallocation costs than non-direct buffers. The contents of direct buffers may reside outside of the normal garbage-collected heap, and so their impact upon the memory footprint of an application might not be obvious. It is therefore recommended that direct buffers be allocated primarily for large, long-lived buffers that are subject to the underlying system's native I/O operations. In general it is best to allocate direct buffers only when they yield a measureable gain in program performance. A direct byte buffer may also be created by @B_java#nio#channels#FileChannel#map_E@ a region of a file directly into memory. An implementation of the Java platform may optionally support the creation of direct byte buffers from native code via JNI. If an instance of one of these kinds of buffers refers to an inaccessible region of memory then an attempt to access that region will not change the buffer's content and will cause an unspecified exception to be thrown either at the time of the access or at some later time. Whether a byte buffer is direct or non-direct may be determined by invoking its @B_java#nio#ByteBuffer#isDirect_E@ method. This method is provided so that explicit buffer management can be done in performance-critical code. This class defines methods for reading and writing values of all other primitive types, except @B_java#nio#ByteBuffer#order_E@ methods. Specific byte orders are represented by instances of the @B_java#nio#ByteOrder_E@ class. The initial order of a byte buffer is always @B_java#nio#ByteOrder#BIG_ENDIAN_E@. For access to heterogeneous binary data, that is, sequences of values of different types, this class defines a family of absolute and relative Corresponding methods are defined for the types For access to homogeneous binary data, that is, sequences of values of the same type, this class defines methods that can create @B_java#nio#ByteBuffer#asFloatBuffer_E@ method, for example, creates an instance of the @B_java#nio#FloatBuffer_E@ class that is backed by the byte buffer upon which the method is invoked. Corresponding view-creation methods are defined for the types View buffers have three important advantages over the families of type-specific A view buffer is indexed not in terms of bytes but rather in terms of the type-specific size of its values; A view buffer provides relative bulk A view buffer is potentially much more efficient because it will be direct if, and only if, its backing byte buffer is direct. The byte order of a view buffer is fixed to be that of its byte buffer at the time that the view is created. Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained. The sequence of statements"}