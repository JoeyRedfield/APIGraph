{"Functions": {"getScanCode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the hardware key id of this key event. These values are not reliable and vary from device to device. Mostly this is here for debugging purposes.", "history": "Added in API level 1", "FullName": "public final int getScanCode ()"}, "getUnicodeChar()": {"Returns": [["int", "The associated character or combining accent, or 0 if none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see @B_android#text#method#MetaKeyKeyListener_E@) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit @B_android#view#KeyCharacterMap#COMBINING_ACCENT_E@ set, the key is a \"dead key\" that should be combined with another to actually produce a character -- see @B_android#view#KeyCharacterMap#getDeadChar_E@ -- after masking with @B_android#view#KeyCharacterMap#COMBINING_ACCENT_MASK_E@.", "history": "Added in API level 1", "FullName": "public int getUnicodeChar ()"}, "KeyEvent(int,int)": {"Returns": [], "Parameters": [["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 1", "FullName": "public KeyEvent (int action, int code)"}, "getAction()": {"Returns": [["int", "The event action: ACTION_DOWN, ACTION_UP, or ACTION_MULTIPLE."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the action of this key event. May be either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@.", "history": "Added in API level 1", "FullName": "public final int getAction ()"}, "dispatch(android.view.KeyEvent.Callback,android.view.KeyEvent.DispatcherState,java.lang.Object)": {"Returns": [["boolean", "The return value from the Callback method that was called."]], "Parameters": [["@B_android#view#KeyEvent#Callback_E@", "KeyEvent.Callback: The Callback that will be given the event."], ["@B_android#view#KeyEvent#DispatcherState_E@", "KeyEvent.DispatcherState: State information retained across events."], ["@B_java#lang#Object_E@", "Object: The target of the dispatch, for use in tracking."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deliver this key event to a @B_android#view#KeyEvent#Callback_E@ interface. If this is an ACTION_MULTIPLE event and it is not handled, then an attempt will be made to deliver a single normal event.", "history": "Added in API level 5", "FullName": "public final boolean dispatch (KeyEvent.Callback receiver, KeyEvent.DispatcherState state, Object target)"}, "getEventTime()": {"Returns": [["long", "Returns the time this event occurred, in the @B_android#os#SystemClock#uptimeMillis_E@ time base."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the time this event occurred, in the @B_android#os#SystemClock#uptimeMillis_E@ time base.", "history": "Added in API level 1", "FullName": "public final long getEventTime ()"}, "getDeadChar(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character that is produced by putting accent on the character c. For example, getDeadChar('`', 'e') returns \u00e8.", "history": "added in API level 1", "FullName": "public static int getDeadChar (int accent, int c)"}, "KeyEvent(android.view.KeyEvent,long,int)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied."], ["long", "long: The new event time (in @B_android#os#SystemClock#uptimeMillis_E@) of the event."], ["int", "int: The new repeat count of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#KeyEvent#changeTimeRepeat_E@ instead. Copy an existing key event, modifying its time and repeat count.", "history": "Added in API level 1", "FullName": "public KeyEvent (KeyEvent origEvent, long eventTime, int newRepeat)"}, "isShiftPressed()": {"Returns": [["boolean", "true if the SHIFT key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the SHIFT meta key.", "history": "Added in API level 1", "FullName": "public final boolean isShiftPressed ()"}, "getNumber()": {"Returns": [["char", "The associated numeric or symbolic character, or 0 if none."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number or symbol associated with the key. The character value is returned, not the numeric value. If the key is not a number, but is a symbol, the symbol is retuned. This method is intended to to support dial pads and other numeric or symbolic entry on keyboards where certain keys serve dual function as alphabetic and symbolic keys. This method returns the number or symbol associated with the key independent of whether the user has pressed the required modifier. For example, on one particular keyboard the keys on the top QWERTY row generate numbers when ALT is pressed such that ALT-Q maps to '1'. So for that keyboard when @B_android#view#KeyEvent#getNumber_E@ is called with @B_android#view#KeyEvent#KEYCODE_Q_E@ it returns '1' so that the user can type numbers without pressing ALT when it makes sense.", "history": "Added in API level 1", "FullName": "public char getNumber ()"}, "getMetaState()": {"Returns": [["int", "an integer in which each bit set to 1 represents a pressed meta key"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#isAltPressed_E@", "@B_android#view#KeyEvent#isShiftPressed_E@", "@B_android#view#KeyEvent#isSymPressed_E@", "@B_android#view#KeyEvent#isCtrlPressed_E@", "@B_android#view#KeyEvent#isMetaPressed_E@", "@B_android#view#KeyEvent#isFunctionPressed_E@", "@B_android#view#KeyEvent#isCapsLockOn_E@", "@B_android#view#KeyEvent#isNumLockOn_E@", "@B_android#view#KeyEvent#isScrollLockOn_E@", "@B_android#view#KeyEvent_E@", "@B_android#view#KeyEvent#getModifiers_E@"], "Permissions": [], "Description": "Returns the state of the meta keys.", "history": "Added in API level 1", "FullName": "public final int getMetaState ()"}, "changeFlags(android.view.KeyEvent, int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["int", "int: The new flags constant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose flags are replaced with the given value.", "history": "added in API level 3", "FullName": "public static KeyEvent changeFlags (KeyEvent event, int flags)"}, "normalizeMetaState(int)": {"Returns": [["int", "The normalized meta state."]], "Parameters": [["int", "int: The meta state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Normalizes the specified meta state. The meta state is normalized such that if either the left or right modifier meta state bits are set then the result will also include the universal bit for that modifier. If the specified meta state contains @B_android#view#KeyEvent#META_ALT_LEFT_ON_E@ then the result will also contain @B_android#view#KeyEvent#META_ALT_ON_E@ in addition to @B_android#view#KeyEvent#META_ALT_LEFT_ON_E@ and the other bits that were specified in the input. The same is process is performed for shift, control and meta. If the specified meta state contains synthetic meta states defined by @B_android#text#method#MetaKeyKeyListener_E@, then those states are translated here and the original synthetic meta states are removed from the result. @B_android#text#method#MetaKeyKeyListener#META_CAP_LOCKED_E@ is translated to @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@. @B_android#text#method#MetaKeyKeyListener#META_ALT_LOCKED_E@ is translated to @B_android#view#KeyEvent#META_ALT_ON_E@. @B_android#text#method#MetaKeyKeyListener#META_SYM_LOCKED_E@ is translated to @B_android#view#KeyEvent#META_SYM_ON_E@. Undefined meta state bits are removed.", "history": "Added in API level 11", "FullName": "public static int normalizeMetaState (int metaState)"}, "isModifierKey(int)": {"Returns": [["boolean", "True if the key code is one of @B_android#view#KeyEvent#KEYCODE_SHIFT_LEFT_E@ @B_android#view#KeyEvent#KEYCODE_SHIFT_RIGHT_E@, @B_android#view#KeyEvent#KEYCODE_ALT_LEFT_E@, @B_android#view#KeyEvent#KEYCODE_ALT_RIGHT_E@, @B_android#view#KeyEvent#KEYCODE_CTRL_LEFT_E@, @B_android#view#KeyEvent#KEYCODE_CTRL_RIGHT_E@, @B_android#view#KeyEvent#KEYCODE_META_LEFT_E@, or @B_android#view#KeyEvent#KEYCODE_META_RIGHT_E@, @B_android#view#KeyEvent#KEYCODE_SYM_E@, @B_android#view#KeyEvent#KEYCODE_NUM_E@, @B_android#view#KeyEvent#KEYCODE_FUNCTION_E@."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this key code is a modifier key. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function return false for those keys.", "history": "Added in API level 1", "FullName": "public static boolean isModifierKey (int keyCode)"}, "KeyEvent(long,long,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."], ["int", "int: The device ID that generated the key event."], ["int", "int: Raw device scan code of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode)"}, "getCharacters()": {"Returns": [["@B_java#lang#String_E@", "Returns a String of 1 or more characters associated with the event."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "no longer used by the input system. For the special case of a @B_android#view#KeyEvent#ACTION_MULTIPLE_E@ event with key code of @B_android#view#KeyEvent#KEYCODE_UNKNOWN_E@, this is a raw string of characters associated with the event. In all other cases it is null.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public final String getCharacters ()"}, "changeTimeRepeat(android.view.KeyEvent, long, int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["long", "long: The new event time (in @B_android#os#SystemClock#uptimeMillis_E@) of the event."], ["int", "int: The new repeat count of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value.", "history": "added in API level 3", "FullName": "public static KeyEvent changeTimeRepeat (KeyEvent event, long eventTime, int newRepeat)"}, "isPrintingKey()": {"Returns": [["boolean", "True if the key is a printing key."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this key produces a glyph.", "history": "Added in API level 1", "FullName": "public boolean isPrintingKey ()"}, "KeyEvent(android.view.KeyEvent, long, int)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied."], ["long", "long: The new event time (in @B_android#os#SystemClock#uptimeMillis_E@) of the event."], ["int", "int: The new repeat count of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#KeyEvent#changeTimeRepeat_E@ instead. Copy an existing key event, modifying its time and repeat count.", "history": "added in API level 1", "FullName": "public KeyEvent (KeyEvent origEvent, long eventTime, int newRepeat)"}, "keyCodeToString(int)": {"Returns": [["@B_java#lang#String_E@", "The symbolic name of the specified keycode."]], "Parameters": [["int", "int: The key code."]], "Throws": [], "SeeAlso": ["@B_android#view#KeyCharacterMap#getDisplayLabel_E@"], "Permissions": [], "Description": "Returns a string that represents the symbolic name of the specified keycode such as \"KEYCODE_A\", \"KEYCODE_DPAD_UP\", or an equivalent numeric constant such as \"1001\" if unknown. This function is intended to be used mostly for debugging, logging, and testing. It is not locale-specific and is not intended to be used in a user-facing manner.", "history": "Added in API level 12", "FullName": "public static String keyCodeToString (int keyCode)"}, "KeyEvent(long,long,int,int,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState)"}, "isFunctionPressed()": {"Returns": [["boolean", "true if the FUNCTION key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the FUNCTION meta key.", "history": "Added in API level 11", "FullName": "public final boolean isFunctionPressed ()"}, "KeyEvent(long,long,int,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."], ["int", "int: The device ID that generated the key event."], ["int", "int: Raw device scan code of the event."], ["int", "int: The flags for this key event"], ["int", "int: The input source such as @B_android#view#InputDevice#SOURCE_KEYBOARD_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 9", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags, int source)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getKeyCharacterMap()": {"Returns": [["@B_android#view#KeyCharacterMap_E@", "The associated key character map."]], "Parameters": [], "Throws": [["", "android.view.KeyCharacterMap.UnavailableException KeyCharacterMap.UnavailableException} if the key character map could not be loaded because it was malformed or the default key character map is missing from the system."]], "SeeAlso": ["@B_android#view#KeyCharacterMap#load_E@"], "Permissions": [], "Description": "Gets the @B_android#view#KeyCharacterMap_E@ associated with the keyboard device.", "history": "Added in API level 11", "FullName": "public final KeyCharacterMap getKeyCharacterMap ()"}, "isAltPressed()": {"Returns": [["boolean", "true if the ALT key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the ALT meta key.", "history": "Added in API level 1", "FullName": "public final boolean isAltPressed ()"}, "KeyEvent(long,long,int,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat)"}, "isCanceled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For @B_android#view#KeyEvent#ACTION_UP_E@ events, indicates that the event has been canceled as per @B_android#view#KeyEvent#FLAG_CANCELED_E@.", "history": "Added in API level 5", "FullName": "public final boolean isCanceled ()"}, "KeyEvent(long, long, int, int, int, int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState)"}, "dispatch(android.view.KeyEvent.Callback)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent#Callback_E@", "KeyEvent.Callback no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#KeyEvent#dispatch_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final boolean dispatch (KeyEvent.Callback receiver)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "changeAction(android.view.KeyEvent, int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["int", "int: The new action code of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose action is replaced with the given value.", "history": "added in API level 3", "FullName": "public static KeyEvent changeAction (KeyEvent event, int action)"}, "KeyEvent(long, long, int, int, int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat)"}, "getDeviceId()": {"Returns": [["int", "The device id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id for the device that this event came from. An id of zero indicates that the event didn't come from a physical device and maps to the default keymap. The other numbers are arbitrary and you shouldn't depend on the values.", "history": "Added in API level 1", "FullName": "public final int getDeviceId ()"}, "isSymPressed()": {"Returns": [["boolean", "true if the SYM key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the SYM meta key.", "history": "Added in API level 1", "FullName": "public final boolean isSymPressed ()"}, "KeyEvent(long,java.lang.String,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event occured."], ["@B_java#lang#String_E@", "String: The string of characters."], ["int", "int: The device ID that generated the key event."], ["int", "int: The flags for this key event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event for a string of characters. The key code, action, repeat count and source will automatically be set to @B_android#view#KeyEvent#KEYCODE_UNKNOWN_E@, @B_android#view#KeyEvent#ACTION_MULTIPLE_E@, 0, and @B_android#view#InputDevice#SOURCE_KEYBOARD_E@ for you.", "history": "Added in API level 3", "FullName": "public KeyEvent (long time, String characters, int deviceId, int flags)"}, "metaStateHasNoModifiers(int)": {"Returns": [["boolean", "True if no modifier keys are pressed."]], "Parameters": [["int", "int: The meta state to consider."]], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#hasNoModifiers_E@"], "Permissions": [], "Description": "Returns true if no modifiers keys are pressed according to the specified meta state. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function ignores @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. The meta state is normalized prior to comparison using @B_android#view#KeyEvent#normalizeMetaState_E@.", "history": "Added in API level 11", "FullName": "public static boolean metaStateHasNoModifiers (int metaState)"}, "getKeyCode()": {"Returns": [["int", "The key code of the event."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the key code of the key event. This is the physical key that was pressed, not the Unicode character.", "history": "Added in API level 1", "FullName": "public final int getKeyCode ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "KeyEvent(long, long, int, int, int, int, int, int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."], ["int", "int: The device ID that generated the key event."], ["int", "int: Raw device scan code of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode)"}, "getDeadChar(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character that is produced by putting accent on the character c. For example, getDeadChar('`', 'e') returns \u00e8.", "history": "Added in API level 1", "FullName": "public static int getDeadChar (int accent, int c)"}, "isTracking()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For @B_android#view#KeyEvent#ACTION_UP_E@ events, indicates that the event is still being tracked from its initial down event as per @B_android#view#KeyEvent#FLAG_TRACKING_E@.", "history": "Added in API level 5", "FullName": "public final boolean isTracking ()"}, "isGamepadButton(int)": {"Returns": [["boolean", "True if the keycode is a gamepad button, such as @B_android#view#KeyEvent#KEYCODE_BUTTON_A_E@."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified keycode is a gamepad button.", "history": "Added in API level 12", "FullName": "public static final boolean isGamepadButton (int keyCode)"}, "getFlags()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the flags for this key event.", "history": "Added in API level 1", "FullName": "public final int getFlags ()"}, "isLongPress()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For @B_android#view#KeyEvent#ACTION_DOWN_E@ events, indicates that the event has been canceled as per @B_android#view#KeyEvent#FLAG_LONG_PRESS_E@.", "history": "Added in API level 5", "FullName": "public final boolean isLongPress ()"}, "isScrollLockOn()": {"Returns": [["boolean", "true if the SCROLL LOCK key is on, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the locked state of the SCROLL LOCK meta key.", "history": "Added in API level 11", "FullName": "public final boolean isScrollLockOn ()"}, "isSystem()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is this a system key? System keys can not be used for menu shortcuts.", "history": "Added in API level 1", "FullName": "public final boolean isSystem ()"}, "isMetaPressed()": {"Returns": [["boolean", "true if the META key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the META meta key.", "history": "Added in API level 11", "FullName": "public final boolean isMetaPressed ()"}, "getSource()": {"Returns": [["int", "The event source or @B_android#view#InputDevice#SOURCE_UNKNOWN_E@ if unknown."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the source of the event.", "history": "Added in API level 9", "FullName": "public final int getSource ()"}, "getMatch(char[],int)": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["char[]", "char: The array of matching characters to consider."], ["int", "int: The preferred meta key modifier state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. If there are multiple choices, prefers the one that would be generated with the specified meta key modifier state.", "history": "Added in API level 1", "FullName": "public char getMatch (char[] chars, int metaState)"}, "getKeyData(android.view.KeyCharacterMap.KeyData)": {"Returns": [["boolean", "True if the key was mapped. If the key was not mapped, results is not modified."]], "Parameters": [["@B_android#view#KeyCharacterMap#KeyData_E@", "KeyCharacterMap.KeyData: A @B_android#view#KeyCharacterMap#KeyData_E@ instance that will be filled with the results."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use @B_android#view#KeyEvent#getDisplayLabel_E@, @B_android#view#KeyEvent#getNumber_E@ or @B_android#view#KeyEvent#getUnicodeChar_E@. Get the character conversion data for a given key code.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean getKeyData (KeyCharacterMap.KeyData results)"}, "metaStateHasModifiers(int, int)": {"Returns": [["boolean", "True if only the specified modifier keys are pressed."]], "Parameters": [["int", "int: The meta state to consider."], ["int", "int: The meta state of the modifier keys to check. May be a combination of modifier meta states as defined by @B_android#view#KeyEvent#getModifierMetaStateMask_E@. May be 0 to ensure that no modifier keys are pressed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the modifiers parameter contains invalid modifiers"]], "SeeAlso": ["@B_android#view#KeyEvent#hasModifiers_E@"], "Permissions": [], "Description": "Returns true if only the specified modifier keys are pressed according to the specified meta state. Returns false if a different combination of modifier keys are pressed. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function ignores @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. If the specified modifier mask includes directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@, then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@ and @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method throws an illegal argument exception.", "history": "added in API level 11", "FullName": "public static boolean metaStateHasModifiers (int metaState, int modifiers)"}, "isCapsLockOn()": {"Returns": [["boolean", "true if the CAPS LOCK key is on, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the locked state of the CAPS LOCK meta key.", "history": "Added in API level 11", "FullName": "public final boolean isCapsLockOn ()"}, "getDownTime()": {"Returns": [["long", "Returns the most recent key down time, in the @B_android#os#SystemClock#uptimeMillis_E@ time base"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the time of the most recent key down event, in the @B_android#os#SystemClock#uptimeMillis_E@ time base. If this is a down event, this will be the same as @B_android#view#KeyEvent#getEventTime_E@. Note that when chording keys, this value is the down time of the most recently pressed key, which may not be the same physical key of this event.", "history": "Added in API level 1", "FullName": "public final long getDownTime ()"}, "getUnicodeChar(int)": {"Returns": [["int", "The associated character or combining accent, or 0 if none."]], "Parameters": [["int", "int: The meta key modifier state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see @B_android#text#method#MetaKeyKeyListener_E@) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit @B_android#view#KeyCharacterMap#COMBINING_ACCENT_E@ set, the key is a \"dead key\" that should be combined with another to actually produce a character -- see @B_android#view#KeyCharacterMap#getDeadChar_E@ -- after masking with @B_android#view#KeyCharacterMap#COMBINING_ACCENT_MASK_E@.", "history": "Added in API level 1", "FullName": "public int getUnicodeChar (int metaState)"}, "changeAction(android.view.KeyEvent,int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["int", "int: The new action code of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose action is replaced with the given value.", "history": "Added in API level 3", "FullName": "public static KeyEvent changeAction (KeyEvent event, int action)"}, "metaStateHasModifiers(int,int)": {"Returns": [["boolean", "True if only the specified modifier keys are pressed."]], "Parameters": [["int", "int: The meta state to consider."], ["int", "int: The meta state of the modifier keys to check. May be a combination of modifier meta states as defined by @B_android#view#KeyEvent#getModifierMetaStateMask_E@. May be 0 to ensure that no modifier keys are pressed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the modifiers parameter contains invalid modifiers"]], "SeeAlso": ["@B_android#view#KeyEvent#hasModifiers_E@"], "Permissions": [], "Description": "Returns true if only the specified modifier keys are pressed according to the specified meta state. Returns false if a different combination of modifier keys are pressed. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function ignores @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. If the specified modifier mask includes directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@, then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@ and @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method throws an illegal argument exception.", "history": "Added in API level 11", "FullName": "public static boolean metaStateHasModifiers (int metaState, int modifiers)"}, "startTracking()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this during @B_android#view#KeyEvent#Callback#onKeyDown_E@ to have the system track the key through its final up (possibly including a long press). Note that only one key can be tracked at a time -- if another key down event is received while a previous one is being tracked, tracking is stopped on the previous event.", "history": "Added in API level 5", "FullName": "public final void startTracking ()"}, "getRepeatCount()": {"Returns": [["int", "The number of times the key has repeated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the repeat count of the event. For key down events, this is the number of times the key has repeated with the first down starting at 0 and counting up from there. For key up events, this is always equal to zero. For multiple key events, this is the number of down/up pairs that have occurred.", "history": "Added in API level 1", "FullName": "public final int getRepeatCount ()"}, "changeFlags(android.view.KeyEvent,int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["int", "int: The new flags constant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose flags are replaced with the given value.", "history": "Added in API level 3", "FullName": "public static KeyEvent changeFlags (KeyEvent event, int flags)"}, "isCtrlPressed()": {"Returns": [["boolean", "true if the CTRL key is pressed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the pressed state of the CTRL meta key.", "history": "Added in API level 11", "FullName": "public final boolean isCtrlPressed ()"}, "isNumLockOn()": {"Returns": [["boolean", "true if the NUM LOCK key is on, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent_E@"], "Permissions": [], "Description": "Returns the locked state of the NUM LOCK meta key.", "history": "Added in API level 11", "FullName": "public final boolean isNumLockOn ()"}, "hasModifiers(int)": {"Returns": [["boolean", "True if only the specified modifier keys are pressed."]], "Parameters": [["int", "int: The meta state of the modifier keys to check. May be a combination of modifier meta states as defined by @B_android#view#KeyEvent#getModifierMetaStateMask_E@. May be 0 to ensure that no modifier keys are pressed."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the modifiers parameter contains invalid modifiers"]], "SeeAlso": ["@B_android#view#KeyEvent#metaStateHasModifiers_E@"], "Permissions": [], "Description": "Returns true if only the specified modifiers keys are pressed. Returns false if a different combination of modifier keys are pressed. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function ignores @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. If the specified modifier mask includes directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method ensures that the modifier is pressed on that side. If the specified modifier mask includes non-directional modifiers, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@, then this method ensures that the modifier is pressed on either side. If the specified modifier mask includes both directional and non-directional modifiers for the same type of key, such as @B_android#view#KeyEvent#META_SHIFT_ON_E@ and @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, then this method throws an illegal argument exception.", "history": "Added in API level 11", "FullName": "public final boolean hasModifiers (int modifiers)"}, "KeyEvent(int, int)": {"Returns": [], "Parameters": [["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "added in API level 1", "FullName": "public KeyEvent (int action, int code)"}, "changeTimeRepeat(android.view.KeyEvent,long,int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["long", "long: The new event time (in @B_android#os#SystemClock#uptimeMillis_E@) of the event."], ["int", "int: The new repeat count of the event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value.", "history": "Added in API level 3", "FullName": "public static KeyEvent changeTimeRepeat (KeyEvent event, long eventTime, int newRepeat)"}, "KeyEvent(long,long,int,int,int,int,int,int,int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this key code originally went down."], ["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event happened."], ["int", "int: Action code: either @B_android#view#KeyEvent#ACTION_DOWN_E@, @B_android#view#KeyEvent#ACTION_UP_E@, or @B_android#view#KeyEvent#ACTION_MULTIPLE_E@."], ["int", "int: The key code."], ["int", "int: A repeat count for down events (> 0 if this is after the initial down) or event count for multiple events."], ["int", "int: Flags indicating which meta keys are currently pressed."], ["int", "int: The device ID that generated the key event."], ["int", "int: Raw device scan code of the event."], ["int", "int: The flags for this key event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event.", "history": "Added in API level 1", "FullName": "public KeyEvent (long downTime, long eventTime, int action, int code, int repeat, int metaState, int deviceId, int scancode, int flags)"}, "keyCodeFromString(java.lang.String)": {"Returns": [["int", "The keycode or @B_android#view#KeyEvent#KEYCODE_UNKNOWN_E@ if not found."]], "Parameters": [["@B_java#lang#String_E@", "String: The symbolic name of the keycode. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#keyCodeToString_E@"], "Permissions": [], "Description": "Gets a keycode by its symbolic name such as \"KEYCODE_A\" or an equivalent numeric constant such as \"29\". For symbolic names, starting in @B_android#os#Build#VERSION_CODES#Q_E@ the prefix \"KEYCODE_\" is optional.", "history": "Added in API level 12", "FullName": "public static int keyCodeFromString (String symbolicName)"}, "setSource(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public final void setSource (int source)"}, "changeTimeRepeat(android.view.KeyEvent,long,int,int)": {"Returns": [["@B_android#view#KeyEvent_E@", "no returns description in source"]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The existing event to be copied. This is not modified."], ["long", "long: The new event time (in @B_android#os#SystemClock#uptimeMillis_E@) of the event."], ["int", "int: The new repeat count of the event."], ["int", "int: New flags for the event, replacing the entire value in the original event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event that is the same as the given one, but whose event time and repeat count are replaced with the given value.", "history": "Added in API level 5", "FullName": "public static KeyEvent changeTimeRepeat (KeyEvent event, long eventTime, int newRepeat, int newFlags)"}, "KeyEvent(long, java.lang.String, int, int)": {"Returns": [], "Parameters": [["long", "long: The time (in @B_android#os#SystemClock#uptimeMillis_E@) at which this event occured."], ["@B_java#lang#String_E@", "String: The string of characters."], ["int", "int: The device ID that generated the key event."], ["int", "int: The flags for this key event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new key event for a string of characters. The key code, action, repeat count and source will automatically be set to @B_android#view#KeyEvent#KEYCODE_UNKNOWN_E@, @B_android#view#KeyEvent#ACTION_MULTIPLE_E@, 0, and @B_android#view#InputDevice#SOURCE_KEYBOARD_E@ for you.", "history": "added in API level 3", "FullName": "public KeyEvent (long time, String characters, int deviceId, int flags)"}, "getMaxKeyCode()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum keycode.", "history": "Added in API level 3", "FullName": "public static int getMaxKeyCode ()"}, "getMatch(char[])": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["char[]", "char: The array of matching characters to consider."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. This is a convenience function that returns the same value as @B_android#view#KeyEvent#getMatch_E@.", "history": "Added in API level 1", "FullName": "public char getMatch (char[] chars)"}, "hasNoModifiers()": {"Returns": [["boolean", "True if no modifier keys are pressed."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#metaStateHasNoModifiers_E@"], "Permissions": [], "Description": "Returns true if no modifier keys are pressed. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function ignores @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. The meta state is normalized prior to comparison using @B_android#view#KeyEvent#normalizeMetaState_E@.", "history": "Added in API level 11", "FullName": "public final boolean hasNoModifiers ()"}, "getDisplayLabel()": {"Returns": [["char", "The display label character, or 0 if none (eg. for non-printing keys)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the primary character for this key. In other words, the label that is physically printed on it.", "history": "Added in API level 1", "FullName": "public char getDisplayLabel ()"}, "getModifierMetaStateMask()": {"Returns": [["int", "The modifier meta state mask which is a combination of @B_android#view#KeyEvent#META_SHIFT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_LEFT_ON_E@, @B_android#view#KeyEvent#META_SHIFT_RIGHT_ON_E@, @B_android#view#KeyEvent#META_ALT_ON_E@, @B_android#view#KeyEvent#META_ALT_LEFT_ON_E@, @B_android#view#KeyEvent#META_ALT_RIGHT_ON_E@, @B_android#view#KeyEvent#META_CTRL_ON_E@, @B_android#view#KeyEvent#META_CTRL_LEFT_ON_E@, @B_android#view#KeyEvent#META_CTRL_RIGHT_ON_E@, @B_android#view#KeyEvent#META_META_ON_E@, @B_android#view#KeyEvent#META_META_LEFT_ON_E@, @B_android#view#KeyEvent#META_META_RIGHT_ON_E@, @B_android#view#KeyEvent#META_SYM_ON_E@, @B_android#view#KeyEvent#META_FUNCTION_ON_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a mask that includes all valid modifier key meta state bits. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, the mask specifically excludes @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@.", "history": "Added in API level 11", "FullName": "public static int getModifierMetaStateMask ()"}, "getModifiers()": {"Returns": [["int", "An integer in which each bit set to 1 represents a pressed modifier key."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyEvent#getMetaState_E@"], "Permissions": [], "Description": "Returns the state of the modifier keys. For the purposes of this function, @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@, @B_android#view#KeyEvent#KEYCODE_SCROLL_LOCK_E@, and @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are not considered modifier keys. Consequently, this function specifically masks out @B_android#view#KeyEvent#META_CAPS_LOCK_ON_E@, @B_android#view#KeyEvent#META_SCROLL_LOCK_ON_E@ and @B_android#view#KeyEvent#META_NUM_LOCK_ON_E@. The value returned consists of the meta state (from @B_android#view#KeyEvent#getMetaState_E@) normalized using @B_android#view#KeyEvent#normalizeMetaState_E@ and then masked with @B_android#view#KeyEvent#getModifierMetaStateMask_E@ so that only valid modifier bits are retained.", "history": "Added in API level 13", "FullName": "public final int getModifiers ()"}, "getMatch(char[], int)": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["char[]", "char: The array of matching characters to consider."], ["int", "int: The preferred meta key modifier state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. If there are multiple choices, prefers the one that would be generated with the specified meta key modifier state.", "history": "added in API level 1", "FullName": "public char getMatch (char[] chars, int metaState)"}, "KeyEvent(android.view.KeyEvent)": {"Returns": [], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make an exact copy of an existing key event.", "history": "Added in API level 3", "FullName": "public KeyEvent (KeyEvent origEvent)"}}, "Inheritance": ["@B_android#view#InputEvent_E@"], "ClassName": "android.view.KeyEvent", "ClassDesc": "Object used to report key and button events. Each key press is described by a sequence of key events. A key press starts with a key event with @B_android#view#KeyEvent#ACTION_DOWN_E@. If the key is held sufficiently long that it repeats, then the initial down is followed additional key events with @B_android#view#KeyEvent#ACTION_DOWN_E@ and a non-zero value for @B_android#view#KeyEvent#getRepeatCount_E@. The last key event is a @B_android#view#KeyEvent#ACTION_UP_E@ for the key up. If the key press is canceled, the key up event will have the @B_android#view#KeyEvent#FLAG_CANCELED_E@ flag set. Key events are generally accompanied by a key code (@B_android#view#KeyEvent#getKeyCode_E@), scan code (@B_android#view#KeyEvent#getScanCode_E@) and meta state (@B_android#view#KeyEvent#getMetaState_E@). Key code constants are defined in this class. Scan code constants are raw device-specific codes obtained from the OS and so are not generally meaningful to applications unless interpreted using the @B_android#view#KeyCharacterMap_E@. Meta states describe the pressed state of key modifiers such as @B_android#view#KeyEvent#META_SHIFT_ON_E@ or @B_android#view#KeyEvent#META_ALT_ON_E@. Key codes typically correspond one-to-one with individual keys on an input device. Many keys and key combinations serve quite different functions on different input devices so care must be taken when interpreting them. Always use the @B_android#view#KeyCharacterMap_E@ associated with the input device when mapping keys to characters. Be aware that there may be multiple key input devices active at the same time and each will have its own key character map. As soft input methods can use multiple and inventive ways of inputting text, there is no guarantee that any key press on a soft keyboard will generate a key event: this is left to the IME's discretion, and in fact sending such events is discouraged. You should never rely on receiving KeyEvents for any key on a soft input method. In particular, the default software keyboard will never send any key event to any application targetting Jelly Bean or later, and will only send events for some presses of the delete and return keys to applications targetting Ice Cream Sandwich or earlier. Be aware that other software input methods may never send key events regardless of the version. Consider using editor actions like @B_android#view#inputmethod#EditorInfo#IME_ACTION_DONE_E@ if you need specific interaction with the software keyboard, as it gives more visibility to the user as to how your application will react to key presses. When interacting with an IME, the framework may deliver key events with the special action @B_android#view#KeyEvent#ACTION_MULTIPLE_E@ that either specifies that single repeated key code or a sequence of characters to insert. In general, the framework cannot guarantee that the key events it delivers to a view always constitute complete key sequences since some events may be dropped or modified by containing views before they are delivered. The view implementation should be prepared to handle @B_android#view#KeyEvent#FLAG_CANCELED_E@ and should tolerate anomalous situations such as receiving a new @B_android#view#KeyEvent#ACTION_DOWN_E@ without first having received an @B_android#view#KeyEvent#ACTION_UP_E@ for the prior key press. Refer to @B_android#view#InputDevice_E@ for more information about how different kinds of input devices and sources represent keys and buttons."}