{"Functions": {"setLowerCaseFirst(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true for sorting lower cased characters before upper cased characters, false to ignore case preferences."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#isUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setCaseFirstDefault_E@"], "Permissions": [], "Description": "Sets the orders of lower cased characters to sort before upper cased characters, in strength TERTIARY. The default mode is false. If true is set, the RuleBasedCollator will sort lower cased characters before the upper cased ones. Otherwise, if false is set, the RuleBasedCollator will ignore case preferences.", "history": "Added in API level 24", "FullName": "public void setLowerCaseFirst (boolean lowerfirst)"}, "setReorderCodes(int...)": {"Returns": [], "Parameters": [["int...", "int: the reordering codes to apply to this collator; if this is null or an empty array then this clears any existing reordering"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the reordering codes are malformed in any way (e.g. duplicates, multiple reset codes, overlapping equivalent scripts)"]], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getReorderCodes_E@", "@B_android#icu#text#Collator#getEquivalentReorderCodes_E@", "@B_android#icu#text#Collator#ReorderCodes_E@", "@B_android#icu#lang#UScript_E@"], "Permissions": [], "Description": "Sets the reordering codes for this collator. Collation reordering allows scripts and some other groups of characters to be moved relative to each other. This reordering is done on top of the DUCET/CLDR standard collation order. Reordering can specify groups to be placed at the start and/or the end of the collation order. These groups are specified using UScript codes and @B_android#icu#text#Collator#ReorderCodes_E@ entries. By default, reordering codes specified for the start of the order are placed in the order given after several special non-script blocks. These special groups of characters are space, punctuation, symbol, currency, and digit. These special groups are represented with @B_android#icu#text#Collator#ReorderCodes_E@ entries. Script groups can be intermingled with these special non-script groups if those special groups are explicitly specified in the reordering. The special code @B_android#icu#text#Collator#ReorderCodes#OTHERS_E@ stands for any script that is not explicitly mentioned in the list of reordering codes given. Anything that is after OTHERS will go at the very end of the reordering in the order given. The special reorder code @B_android#icu#text#Collator#ReorderCodes#DEFAULT_E@ will reset the reordering for this collator to the default for this collator. The default reordering may be the DUCET/CLDR order or may be a reordering that was specified when this collator was created from resource data or from rules. The DEFAULT code @B_java#lang#IllegalArgumentException_E@ will be thrown. The special reorder code @B_android#icu#text#Collator#ReorderCodes#NONE_E@ will remove any reordering for this collator. The result of setting no reordering will be to have the DUCET/CLDR ordering used. The NONE code", "history": "Added in API level 24", "FullName": "public void setReorderCodes (int... order)"}, "setNumericCollationDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getNumericCollation_E@", "@B_android#icu#text#RuleBasedCollator#setNumericCollation_E@"], "Permissions": [], "Description": "Method to set numeric collation to its default value.", "history": "Added in API level 24", "FullName": "public void setNumericCollationDefault ()"}, "setMaxVariable(int)": {"Returns": [["@B_android#icu#text#RuleBasedCollator_E@", "this"]], "Parameters": [["int", "int: one of Collator.ReorderCodes.SPACE, Collator.ReorderCodes.PUNCTUATION, Collator.ReorderCodes.SYMBOL, Collator.ReorderCodes.CURRENCY; or Collator.ReorderCodes.DEFAULT to restore the default max variable group"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getMaxVariable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public RuleBasedCollator setMaxVariable (int group)"}, "RuleBasedCollator(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the collation rules to build the collation table from."]], "Throws": [["@B_java#text#ParseException_E@", "and IOException thrown. ParseException thrown when argument rules have an invalid syntax. IOException thrown when an error occurred while reading internal data."], ["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Constructor that takes the argument rules for customization. The collator will be based on the CLDR root collation, with the attributes and re-ordering of the characters specified in the argument rules. See the User Guide's section on", "history": "Added in API level 24", "FullName": "public RuleBasedCollator (String rules)"}, "getRules(boolean)": {"Returns": [["@B_java#lang#String_E@", "the current rules that defines this Collator."]], "Parameters": [["boolean", "boolean: true if the rules that defines the full set of collation order is required, otherwise false for returning only the tailored rules"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getRules_E@"], "Permissions": [], "Description": "Returns current rules. The argument defines whether full rules (root collation + tailored) rules are returned or just the tailoring. The root collation rules are an @B_android#icu#text#RuleBasedCollator#getRules_E@ should normally be used instead.", "history": "Added in API level 24", "FullName": "public String getRules (boolean fullrules)"}, "isLowerCaseFirst()": {"Returns": [["boolean", "true lower cased characters are sorted before upper cased characters, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#isUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setCaseFirstDefault_E@"], "Permissions": [], "Description": "Return true if a lowercase character is sorted before the corresponding uppercase character. See setCaseFirst(boolean) for details.", "history": "Added in API level 24", "FullName": "public boolean isLowerCaseFirst ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this Collator has exactly the same collation behavior as obj, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Collator to compare to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the equality of two Collator objects. Collator objects are equal if they have the same collation (sorting & searching) behavior. The base class checks for null and for equal types. Subclasses should override.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "getVariableTop()": {"Returns": [["int", "the variable top primary weight"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getMaxVariable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getVariableTop ()"}, "isFrozen()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the object has been frozen or not. An unfrozen Collator is mutable and not thread-safe. A frozen Collator is immutable and thread-safe.", "history": "Added in API level 24", "FullName": "public boolean isFrozen ()"}, "getTailoredSet()": {"Returns": [["@B_android#icu#text#UnicodeSet_E@", "a pointer to a UnicodeSet object containing all the code points and sequences that may sort differently than in the root collator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a UnicodeSet that contains all the characters and sequences tailored in this collator.", "history": "Added in API level 24", "FullName": "public UnicodeSet getTailoredSet ()"}, "getCollationKey(java.lang.String)": {"Returns": [["@B_android#icu#text#CollationKey_E@", "the CollationKey for the given String based on this RuleBasedCollator's collation rules. If the source String is null, a null CollationKey is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the text String to be transformed into a collation key."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#RuleBasedCollator#compare_E@"], "Permissions": [], "Description": "Get a Collation key for the argument String source from this RuleBasedCollator. General recommendation: If comparison are to be done to the same String multiple times, it would be more efficient to generate CollationKeys for the Strings and use CollationKey.compareTo(CollationKey) for the comparisons. If the each Strings are compared to only once, using the method RuleBasedCollator.compare(String, String) will have a better performance. See the class documentation for an explanation about CollationKeys.", "history": "Added in API level 24", "FullName": "public CollationKey getCollationKey (String source)"}, "setStrengthDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setStrength_E@", "@B_android#icu#text#RuleBasedCollator#getStrength_E@"], "Permissions": [], "Description": "Sets the collation strength to the initial mode set during the construction of the RuleBasedCollator. See setStrength(int) for more details.", "history": "Added in API level 24", "FullName": "public void setStrengthDefault ()"}, "cloneAsThawed()": {"Returns": [["@B_android#icu#text#RuleBasedCollator_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides for the clone operation. Any clone is initially unfrozen.", "history": "Added in API level 24", "FullName": "public RuleBasedCollator cloneAsThawed ()"}, "setAlternateHandlingDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setAlternateHandlingShifted_E@", "@B_android#icu#text#RuleBasedCollator#isAlternateHandlingShifted_E@"], "Permissions": [], "Description": "Sets the alternate handling mode to the initial mode set during construction of the RuleBasedCollator. See setAlternateHandling(boolean) for more details.", "history": "Added in API level 24", "FullName": "public void setAlternateHandlingDefault ()"}, "getStrength()": {"Returns": [["int", "this Collator's current strength attribute."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setStrength_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Returns this Collator's strength attribute. The strength attribute determines the minimum level of difference considered significant. See the Collator class description for more details.", "history": "Added in API level 24", "FullName": "public int getStrength ()"}, "freeze()": {"Returns": [["@B_android#icu#text#Collator_E@", "the collator itself."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freezes the collator.", "history": "Added in API level 24", "FullName": "public Collator freeze ()"}, "compare(java.lang.String,java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source text String."], ["@B_java#lang#String_E@", "String: the target text String."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#RuleBasedCollator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source text String to the target text String according to the collation rules, strength and decomposition mode for this RuleBasedCollator. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target String. See the Collator class description for an example of use. General recommendation: If comparison are to be done to the same String multiple times, it would be more efficient to generate CollationKeys for the Strings and use CollationKey.compareTo(CollationKey) for the comparisons. If speed performance is critical and object instantiation is to be reduced, further optimization may be achieved by generating a simpler key of the form RawCollationKey and reusing this RawCollationKey object with the method RuleBasedCollator.getRawCollationKey. Internal byte representation can be directly accessed via RawCollationKey and stored for future use. Like CollationKey, RawCollationKey provides a method RawCollationKey.compareTo for key comparisons. If the each Strings are compared to only once, using the method RuleBasedCollator.compare(String, String) will have a better performance.", "history": "Added in API level 24", "FullName": "public int compare (String source, String target)"}, "isFrenchCollation()": {"Returns": [["boolean", "true if French Collation is set to true, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setFrenchCollation_E@", "@B_android#icu#text#RuleBasedCollator#setFrenchCollationDefault_E@"], "Permissions": [], "Description": "Checks if French Collation is set to true. See setFrenchCollation(boolean) for details.", "history": "Added in API level 24", "FullName": "public boolean isFrenchCollation ()"}, "getRules()": {"Returns": [["@B_java#lang#String_E@", "the collation tailoring rules"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getRules_E@"], "Permissions": [], "Description": "Gets the collation tailoring rules for this RuleBasedCollator. Equivalent to String getRules(false). On Android, the returned string will be empty unless this instance was constructed using @B_android#icu#text#RuleBasedCollator#RuleBasedCollator_E@.", "history": "Added in API level 24", "FullName": "public String getRules ()"}, "setCaseLevelDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setCaseLevel_E@", "@B_android#icu#text#RuleBasedCollator#isCaseLevel_E@"], "Permissions": [], "Description": "Sets the case level mode to the initial mode set during construction of the RuleBasedCollator. See setCaseLevel(boolean) for more details.", "history": "Added in API level 24", "FullName": "public void setCaseLevelDefault ()"}, "compare(java.lang.String, java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source text String."], ["@B_java#lang#String_E@", "String: the target text String."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#RuleBasedCollator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source text String to the target text String according to the collation rules, strength and decomposition mode for this RuleBasedCollator. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target String. See the Collator class description for an example of use. General recommendation: If comparison are to be done to the same String multiple times, it would be more efficient to generate CollationKeys for the Strings and use CollationKey.compareTo(CollationKey) for the comparisons. If speed performance is critical and object instantiation is to be reduced, further optimization may be achieved by generating a simpler key of the form RawCollationKey and reusing this RawCollationKey object with the method RuleBasedCollator.getRawCollationKey. Internal byte representation can be directly accessed via RawCollationKey and stored for future use. Like CollationKey, RawCollationKey provides a method RawCollationKey.compareTo for key comparisons. If the each Strings are compared to only once, using the method RuleBasedCollator.compare(String, String) will have a better performance.", "history": "added in API level 24", "FullName": "public int compare (String source, String target)"}, "setDecompositionDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getDecomposition_E@", "@B_android#icu#text#RuleBasedCollator#setDecomposition_E@"], "Permissions": [], "Description": "Sets the decomposition mode to the initial mode set during construction of the RuleBasedCollator. See setDecomposition(int) for more details.", "history": "Added in API level 24", "FullName": "public void setDecompositionDefault ()"}, "setStrength(int)": {"Returns": [], "Parameters": [["int", "int: the new strength value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the new strength value is not one of PRIMARY, SECONDARY, TERTIARY, QUATERNARY or IDENTICAL."]], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getStrength_E@", "@B_android#icu#text#RuleBasedCollator#setStrengthDefault_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Sets this Collator's strength attribute. The strength attribute determines the minimum level of difference considered significant during comparison. See the Collator class description for an example of use.", "history": "Added in API level 24", "FullName": "public void setStrength (int newStrength)"}, "hashCode()": {"Returns": [["int", "the unique hash code for this Collator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a unique hash code for this RuleBasedCollator.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "setNumericCollation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to turn numeric collation on and false to turn it off"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getNumericCollation_E@", "@B_android#icu#text#RuleBasedCollator#setNumericCollationDefault_E@"], "Permissions": [], "Description": "This is a way to get '100' to sort AFTER '2'. Note that the longest digit substring that can be treated as a single unit is 254 digits (not counting leading zeros). If a digit substring is longer than that, the digits beyond the limit will be treated as a separate digit substring. A \"digit\" in this sense is a code point with General_Category=Nd, which does not include circled numbers, roman numerals, etc. Only a contiguous digit substring is considered, that is, non-negative integers without separators. There is no support for plus/minus signs, decimals, exponents, etc.", "history": "Added in API level 24", "FullName": "public void setNumericCollation (boolean flag)"}, "getNumericCollation()": {"Returns": [["boolean", "true if numeric collation is turned on, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setNumericCollation_E@", "@B_android#icu#text#RuleBasedCollator#setNumericCollationDefault_E@"], "Permissions": [], "Description": "Method to retrieve the numeric collation value. When numeric collation is turned on, this Collator generates a collation key for the numeric value of substrings of digits. This is a way to get '100' to sort AFTER '2'", "history": "Added in API level 24", "FullName": "public boolean getNumericCollation ()"}, "isCaseLevel()": {"Returns": [["boolean", "the case level mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setCaseLevelDefault_E@", "@B_android#icu#text#RuleBasedCollator#isCaseLevel_E@", "@B_android#icu#text#RuleBasedCollator#setCaseLevel_E@"], "Permissions": [], "Description": "Checks if case level is set to true. See setCaseLevel(boolean) for details.", "history": "Added in API level 24", "FullName": "public boolean isCaseLevel ()"}, "isAlternateHandlingShifted()": {"Returns": [["boolean", "true or false"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setAlternateHandlingShifted_E@", "@B_android#icu#text#RuleBasedCollator#setAlternateHandlingDefault_E@"], "Permissions": [], "Description": "Checks if the alternate handling behavior is the UCA defined SHIFTED or NON_IGNORABLE. If return value is true, then the alternate handling attribute for the Collator is SHIFTED. Otherwise if return value is false, then the alternate handling attribute for the Collator is NON_IGNORABLE See setAlternateHandlingShifted(boolean) for more details.", "history": "Added in API level 24", "FullName": "public boolean isAlternateHandlingShifted ()"}, "getCollationElementIterator(java.text.CharacterIterator)": {"Returns": [["@B_android#icu#text#CollationElementIterator_E@", "no returns description in source"]], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationElementIterator_E@"], "Permissions": [], "Description": "Return a CollationElementIterator for the given CharacterIterator. The source iterator's integrity will be preserved since a new copy will be created for use.", "history": "Added in API level 24", "FullName": "public CollationElementIterator getCollationElementIterator (CharacterIterator source)"}, "isUpperCaseFirst()": {"Returns": [["boolean", "true if upper cased characters are sorted before lower cased characters, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#isLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setCaseFirstDefault_E@"], "Permissions": [], "Description": "Return true if an uppercase character is sorted before the corresponding lowercase character. See setCaseFirst(boolean) for details.", "history": "Added in API level 24", "FullName": "public boolean isUpperCaseFirst ()"}, "setFrenchCollation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to set the French collation on, false to set it off"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isFrenchCollation_E@", "@B_android#icu#text#RuleBasedCollator#setFrenchCollationDefault_E@"], "Permissions": [], "Description": "Sets the mode for the direction of SECONDARY weights to be used in French collation. The default value is false, which treats SECONDARY weights in the order they appear. If set to true, the SECONDARY weights will be sorted backwards. See the section on", "history": "Added in API level 24", "FullName": "public void setFrenchCollation (boolean flag)"}, "getReorderCodes()": {"Returns": [["int[]", "a copy of the reordering codes for this collator; if none are set then returns an empty array"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setReorderCodes_E@", "@B_android#icu#text#Collator#getEquivalentReorderCodes_E@"], "Permissions": [], "Description": "Retrieves the reordering codes for this collator. These reordering codes are a combination of UScript codes and ReorderCodes.", "history": "Added in API level 24", "FullName": "public int[] getReorderCodes ()"}, "setCaseLevel(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if case level sorting is required, false otherwise"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setCaseLevelDefault_E@", "@B_android#icu#text#RuleBasedCollator#isCaseLevel_E@"], "Permissions": [], "Description": "When case level is set to true, an additional weight is formed between the SECONDARY and TERTIARY weight, known as the case level. The case level is used to distinguish large and small Japanese Kana characters. Case level could also be used in other situations. For example to distinguish certain Pinyin characters. The default value is false, which means the case level is not generated. The contents of the case level are affected by the case first mode. A simple way to ignore accent differences in a string is to set the strength to PRIMARY and enable case level. See the section on", "history": "Added in API level 24", "FullName": "public void setCaseLevel (boolean flag)"}, "setUpperCaseFirst(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to sort uppercase characters before lowercase characters, false to sort lowercase characters before uppercase characters"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#isUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setCaseFirstDefault_E@"], "Permissions": [], "Description": "Sets whether uppercase characters sort before lowercase characters or vice versa, in strength TERTIARY. The default mode is false, and so lowercase characters sort before uppercase characters. If true, sort upper case characters first.", "history": "Added in API level 24", "FullName": "public void setUpperCaseFirst (boolean upperfirst)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a new instance of this RuleBasedCollator object"]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Clones the RuleBasedCollator", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "getDecomposition()": {"Returns": [["int", "the decomposition mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setDecomposition_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Returns the decomposition mode of this Collator. The decomposition mode determines how Unicode composed characters are handled. See the Collator class description for more details.", "history": "Added in API level 24", "FullName": "public int getDecomposition ()"}, "setCaseFirstDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#isUpperCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setLowerCaseFirst_E@", "@B_android#icu#text#RuleBasedCollator#setUpperCaseFirst_E@"], "Permissions": [], "Description": "Sets the case first mode to the initial mode set during construction of the RuleBasedCollator. See setUpperCaseFirst(boolean) and setLowerCaseFirst(boolean) for more details.", "history": "Added in API level 24", "FullName": "public void setCaseFirstDefault ()"}, "setAlternateHandlingShifted(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if SHIFTED behavior for alternate handling is desired, false for the NON_IGNORABLE behavior."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isAlternateHandlingShifted_E@", "@B_android#icu#text#RuleBasedCollator#setAlternateHandlingDefault_E@"], "Permissions": [], "Description": "Sets the alternate handling for QUATERNARY strength to be either shifted or non-ignorable. See the UCA definition on", "history": "Added in API level 24", "FullName": "public void setAlternateHandlingShifted (boolean shifted)"}, "getContractionsAndExpansions(android.icu.text.UnicodeSet,android.icu.text.UnicodeSet,boolean)": {"Returns": [], "Parameters": [["@B_android#icu#text#UnicodeSet_E@", "UnicodeSet: if not null, set to contain contractions"], ["@B_android#icu#text#UnicodeSet_E@", "UnicodeSet: if not null, set to contain expansions"], ["boolean", "boolean: add the prefix contextual elements to contractions"]], "Throws": [["@B_java#lang#Exception_E@", "Throws an exception if any errors occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Gets unicode sets containing contractions and/or expansions of a collator", "history": "Added in API level 24", "FullName": "public void getContractionsAndExpansions (UnicodeSet contractions, UnicodeSet expansions, boolean addPrefixes)"}, "getVersion()": {"Returns": [["@B_android#icu#util#VersionInfo_E@", "the version object associated with this collator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the version of this collator object.", "history": "Added in API level 24", "FullName": "public VersionInfo getVersion ()"}, "setDecomposition(int)": {"Returns": [], "Parameters": [["int", "int: the new decomposition mode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given value is not a valid decomposition mode."]], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#getDecomposition_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Sets the decomposition mode of this Collator. Setting this decomposition attribute with CANONICAL_DECOMPOSITION allows the Collator to handle un-normalized text properly, producing the same results as if the text were normalized. If NO_DECOMPOSITION is set, it is the user's responsibility to insure that all text is already in the appropriate form before a comparison or before getting a CollationKey. Adjusting decomposition mode allows the user to select between faster and more complete collation behavior. Since a great many of the world's languages do not require text normalization, most locales set NO_DECOMPOSITION as the default decomposition mode. The default decompositon mode for the Collator is NO_DECOMPOSITON, unless specified otherwise by the locale used to create the Collator. See getDecomposition for a description of decomposition mode.", "history": "Added in API level 24", "FullName": "public void setDecomposition (int decomposition)"}, "getCollationElementIterator(android.icu.text.UCharacterIterator)": {"Returns": [["@B_android#icu#text#CollationElementIterator_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#text#UCharacterIterator_E@", "UCharacterIterator no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationElementIterator_E@"], "Permissions": [], "Description": "Return a CollationElementIterator for the given UCharacterIterator. The source iterator's integrity will be preserved since a new copy will be created for use.", "history": "Added in API level 24", "FullName": "public CollationElementIterator getCollationElementIterator (UCharacterIterator source)"}, "getUCAVersion()": {"Returns": [["@B_android#icu#util#VersionInfo_E@", "the version object associated with this collator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the UCA version of this collator object.", "history": "Added in API level 24", "FullName": "public VersionInfo getUCAVersion ()"}, "getMaxVariable()": {"Returns": [["int", "the maximum variable reordering group."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#setMaxVariable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public int getMaxVariable ()"}, "setFrenchCollationDefault()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#RuleBasedCollator#isFrenchCollation_E@", "@B_android#icu#text#RuleBasedCollator#setFrenchCollation_E@"], "Permissions": [], "Description": "Sets the French collation mode to the initial mode set during construction of the RuleBasedCollator. See setFrenchCollation(boolean) for more details.", "history": "Added in API level 24", "FullName": "public void setFrenchCollationDefault ()"}, "getCollationElementIterator(java.lang.String)": {"Returns": [["@B_android#icu#text#CollationElementIterator_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationElementIterator_E@"], "Permissions": [], "Description": "Return a CollationElementIterator for the given String.", "history": "Added in API level 24", "FullName": "public CollationElementIterator getCollationElementIterator (String source)"}}, "Inheritance": ["@B_android#icu#text#Collator_E@"], "ClassName": "android.icu.text.RuleBasedCollator", "ClassDesc": "RuleBasedCollator is a concrete subclass of Collator. It allows customization of the Collator via user-specified rule sets. RuleBasedCollator is designed to be fully compliant to the A Collator is thread-safe only when frozen. See {@B_android#icu#text#RuleBasedCollator#isFrozen_E@ and @B_android#icu#util#Freezable_E@. Users are strongly encouraged to read the Create a RuleBasedCollator from a locale by calling the getInstance(Locale) factory method in the base class Collator. Collator.getInstance(Locale) creates a RuleBasedCollator object based on the collation rules defined by the argument locale. If a customized collation ordering or attributes is required, use the RuleBasedCollator(String) constructor with the appropriate rules. The customized RuleBasedCollator will base its ordering on the CLDR root collation, while re-adjusting the attributes and orders of the characters in the specified rule accordingly. RuleBasedCollator provides correct collation orders for most locales supported in ICU. If specific data for a locale is not available, the orders eventually falls back to the For information about the collation rule syntax and details about customization, please refer to the According to the JDK documentation: ICU4J's RuleBasedCollator does not support turning off the Thai/Lao vowel-consonant swapping, since the UCA clearly states that it has to be supported to ensure a correct sorting order. If a '!' is encountered, it is ignored. As mentioned in the documentation of the base class Collator, compatibility decomposition mode is not supported. Creating Customized RuleBasedCollators: Collators: Collator object, by appending changes to the existing rule: Collator: This class is not subclassable"}