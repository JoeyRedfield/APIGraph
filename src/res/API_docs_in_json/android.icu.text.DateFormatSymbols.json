{"Functions": {"setZodiacNames(java.lang.String[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new zodiac name strings."], ["int", "int: The usage context: FORMAT, STANDALONE (currently only FORMAT is supported)."], ["int", "int: The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets calendar zodiac name strings, for example: \"Rat\", \"Ox\", \"Tiger\", etc.", "history": "Added in API level 24", "FullName": "public void setZodiacNames (String[] zodiacNames, int context, int width)"}, "setShortMonths(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new short month strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets short month strings. For example: \"Jan\", \"Feb\", etc.", "history": "Added in API level 24", "FullName": "public void setShortMonths (String[] newShortMonths)"}, "getQuarters(int, int)": {"Returns": [["@B_java#lang#String_E@", "the quarter strings."]], "Parameters": [["int", "int: The quarter context, FORMAT or STANDALONE."], ["int", "int: The width or the returned quarter string, either WIDE or ABBREVIATED. There are no NARROW quarters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public String[] getQuarters (int context, int width)"}, "getEraNames()": {"Returns": [["@B_java#lang#String_E@", "the era strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String[] getEraNames ()"}, "getMonths(int, int)": {"Returns": [["@B_java#lang#String_E@", "the month strings."]], "Parameters": [["int", "int: The month context, FORMAT or STANDALONE."], ["int", "int: The width or the returned month string, either WIDE, ABBREVIATED, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns month strings. For example: \"January\", \"February\", etc.", "history": "added in API level 24", "FullName": "public String[] getMonths (int context, int width)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "setYearNames(java.lang.String[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new cyclic year name strings."], ["int", "int: The usage context: FORMAT, STANDALONE (currently only FORMAT is supported)."], ["int", "int: The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets cyclic year name strings, for example: \"jia-zi\", \"yi-chou\", etc.", "history": "Added in API level 24", "FullName": "public void setYearNames (String[] yearNames, int context, int width)"}, "DateFormatSymbols(android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [["@B_java#util#MissingResourceException_E@", "if the resources for the specified locale cannot be found or cannot be loaded."]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (ULocale locale)"}, "setEras(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new era strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets era strings. For example: \"AD\" and \"BC\".", "history": "Added in API level 24", "FullName": "public void setEras (String[] newEras)"}, "getWeekdays(int, int)": {"Returns": [["@B_java#lang#String_E@", "the weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [["int", "int: Formatting context, either FORMAT or STANDALONE."], ["int", "int: Width of strings to be returned, either WIDE, ABBREVIATED, SHORT, or NARROW"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "added in API level 24", "FullName": "public String[] getWeekdays (int context, int width)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override hashCode. Generates a hash code for the DateFormatSymbols object.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "setYearNames(java.lang.String[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new cyclic year name strings."], ["int", "int: The usage context: FORMAT, STANDALONE (currently only FORMAT is supported)."], ["int", "int: The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets cyclic year name strings, for example: \"jia-zi\", \"yi-chou\", etc.", "history": "added in API level 24", "FullName": "public void setYearNames (String[] yearNames, int context, int width)"}, "setLocalPatternChars(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new localized date-time pattern characters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets localized date-time pattern characters. For example: 'u', 't', etc.", "history": "Added in API level 24", "FullName": "public void setLocalPatternChars (String newLocalPatternChars)"}, "setZodiacNames(java.lang.String[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new zodiac name strings."], ["int", "int: The usage context: FORMAT, STANDALONE (currently only FORMAT is supported)."], ["int", "int: The name width: WIDE, ABBREVIATED, NARROW (currently only ABBREVIATED is supported)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets calendar zodiac name strings, for example: \"Rat\", \"Ox\", \"Tiger\", etc.", "history": "added in API level 24", "FullName": "public void setZodiacNames (String[] zodiacNames, int context, int width)"}, "getAmPmStrings()": {"Returns": [["@B_java#lang#String_E@", "the weekday strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns am/pm strings. For example: \"AM\" and \"PM\".", "history": "Added in API level 24", "FullName": "public String[] getAmPmStrings ()"}, "setMonths(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new month strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets month strings. For example: \"January\", \"February\", etc.", "history": "Added in API level 24", "FullName": "public void setMonths (String[] newMonths)"}, "getZodiacNames(int, int)": {"Returns": [["@B_java#lang#String_E@", "The zodiac name strings, or null if they are not available for this calendar."]], "Parameters": [["int", "int: The usage context: FORMAT, STANDALONE."], ["int", "int: The requested name width: WIDE, ABBREVIATED, SHORT, NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns calendar zodiac name strings if the calendar has them, for example: \"Rat\", \"Ox\", \"Tiger\", etc.", "history": "added in API level 24", "FullName": "public String[] getZodiacNames (int context, int width)"}, "setWeekdays(java.lang.String[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new weekday strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the strings, either WIDE, ABBREVIATED, SHORT, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "added in API level 24", "FullName": "public void setWeekdays (String[] newWeekdays, int context, int width)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides clone.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "setEraNames(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new era strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setEraNames (String[] newEraNames)"}, "getShortWeekdays()": {"Returns": [["@B_java#lang#String_E@", "the abbreviated weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns abbreviated weekday strings; for example: \"Sun\", \"Mon\", etc. (Note: the method name is misleading; it does not get the CLDR-style \"short\" weekday strings, e.g. \"Su\", \"Mo\", etc.)", "history": "Added in API level 24", "FullName": "public String[] getShortWeekdays ()"}, "getEras()": {"Returns": [["@B_java#lang#String_E@", "the era strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns era strings. For example: \"AD\" and \"BC\".", "history": "Added in API level 24", "FullName": "public String[] getEras ()"}, "DateFormatSymbols()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "if the resources for the default locale cannot be found or cannot be loaded."]], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a DateFormatSymbols object by loading format data from resources for the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#DateFormatSymbols_E@", "A DateFormatSymbols instance."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DateFormatSymbols instance for the given locale. java.text.DateFormatSymbols#getInstance, this method simply returns new android.icu.text.DateFormatSymbols(locale). ICU does not support DateFormatSymbolsProvider introduced in Java 6 or its equivalent implementation for now.", "history": "Added in API level 24", "FullName": "public static DateFormatSymbols getInstance (Locale locale)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of Locales for which localized DateFormatSymbols instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances. java.text.DateFormatSymbols#getAvailableLocales, this method simply returns the array of Locales available in this class. ICU does not support DateFormatSymbolsProvider introduced in Java 6 or its equivalent implementation for now.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}, "setQuarters(java.lang.String[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new quarter strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the quarter string, either WIDE or ABBREVIATED. There are no NARROW quarters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setQuarters (String[] newQuarters, int context, int width)"}, "DateFormatSymbols(java.util.ResourceBundle,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#ResourceBundle_E@", "ResourceBundle no parameter comment"], ["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Fetches a custom calendar's DateFormatSymbols out of the given resource bundle. Symbols that are not overridden are inherited from the default DateFormatSymbols for the locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (ResourceBundle bundle, Locale locale)"}, "setZoneStrings(java.lang.String[][])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new time zone strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets time zone strings. @B_android#icu#text#SimpleDateFormat_E@ no longer uses the zone strings stored in a DateFormatSymbols. Therefore, the time zone strings set by this method have no effects in an instance of SimpleDateFormat for formatting time zones. If you want to customize time zone display names formatted by SimpleDateFormat, you should customize @B_android#icu#text#TimeZoneFormat_E@ and set the instance by @B_android#icu#text#SimpleDateFormat#setTimeZoneFormat_E@ instead.", "history": "Added in API level 24", "FullName": "public void setZoneStrings (String[][] newZoneStrings)"}, "DateFormatSymbols(android.icu.util.Calendar,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system whose date format symbols are desired."], ["@B_android#icu#util#ULocale_E@", "ULocale: The ulocale whose symbols are desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Returns the @B_android#icu#text#DateFormatSymbols_E@ object that should be used to format a calendar system's dates in the given locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (Calendar cal, ULocale locale)"}, "setWeekdays(java.lang.String[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The new weekday strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the strings, either WIDE, ABBREVIATED, SHORT, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 24", "FullName": "public void setWeekdays (String[] newWeekdays, int context, int width)"}, "getZodiacNames(int,int)": {"Returns": [["@B_java#lang#String_E@", "The zodiac name strings, or null if they are not available for this calendar."]], "Parameters": [["int", "int: The usage context: FORMAT, STANDALONE."], ["int", "int: The requested name width: WIDE, ABBREVIATED, SHORT, NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns calendar zodiac name strings if the calendar has them, for example: \"Rat\", \"Ox\", \"Tiger\", etc.", "history": "Added in API level 24", "FullName": "public String[] getZodiacNames (int context, int width)"}, "getShortMonths()": {"Returns": [["@B_java#lang#String_E@", "the short month strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns short month strings. For example: \"Jan\", \"Feb\", etc.", "history": "Added in API level 24", "FullName": "public String[] getShortMonths ()"}, "getWeekdays(int,int)": {"Returns": [["@B_java#lang#String_E@", "the weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [["int", "int: Formatting context, either FORMAT or STANDALONE."], ["int", "int: Width of strings to be returned, either WIDE, ABBREVIATED, SHORT, or NARROW"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 24", "FullName": "public String[] getWeekdays (int context, int width)"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#DateFormatSymbols_E@", "A DateFormatSymbols instance."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "java.text.DateFormatSymbols#getInstance, this method simply returns new android.icu.text.DateFormatSymbols(locale). ICU does not support DateFormatSymbolsProvider introduced in Java 6 or its equivalent implementation for now.", "history": "Added in API level 24", "FullName": "public static DateFormatSymbols getInstance (ULocale locale)"}, "DateFormatSymbols(android.icu.util.Calendar,java.util.Locale)": {"Returns": [], "Parameters": [["@B_android#icu#util#Calendar_E@", "Calendar: The calendar system whose date format symbols are desired."], ["@B_java#util#Locale_E@", "Locale: The locale whose symbols are desired."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Returns the @B_android#icu#text#DateFormatSymbols_E@ object that should be used to format a calendar system's dates in the given locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (Calendar cal, Locale locale)"}, "initializeData(android.icu.util.ULocale,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: The locale whose symbols are desired."], ["@B_java#lang#String_E@", "String: The calendar type whose date format symbols are desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes format symbols for the locale and calendar type", "history": "Added in API level 24", "FullName": "protected void initializeData (ULocale desiredLocale, String type)"}, "setWeekdays(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets wide weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 24", "FullName": "public void setWeekdays (String[] newWeekdays)"}, "DateFormatSymbols(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [["@B_java#util#MissingResourceException_E@", "if the resources for the specified locale cannot be found or cannot be loaded."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DateFormatSymbols object by loading format data from resources for the given locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (Locale locale)"}, "getZoneStrings()": {"Returns": [["@B_java#lang#String_E@", "the time zone strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns time zone strings. The array returned by this API is a two dimensional String array and each row contains at least following strings: ZoneStrings[n][0] - System time zone ID ZoneStrings[n][1] - Long standard time display name ZoneStrings[n][2] - Short standard time display name ZoneStrings[n][3] - Long daylight saving time display name ZoneStrings[n][4] - Short daylight saving time display name When a localized display name is not available, the corresponding array element will be null. @B_java#text#DateFormatSymbols#getZoneStrings_E@. For accessing the full set of time zone string data used by ICU implementation, you should use @B_android#icu#text#TimeZoneNames_E@ APIs instead.", "history": "Added in API level 24", "FullName": "public String[][] getZoneStrings ()"}, "DateFormatSymbols(java.lang.Class<?extendsandroid.icu.util.Calendar>,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"], ["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Variant of DateFormatSymbols(Calendar, ULocale) that takes the Calendar class instead of a Calendar instance.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (Class<? extends Calendar> calendarClass, ULocale locale)"}, "getInstance()": {"Returns": [["@B_android#icu#text#DateFormatSymbols_E@", "A DateFormatSymbols instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a DateFormatSymbols instance for the default locale. java.text.DateFormatSymbols#getInstance, this method simply returns new android.icu.text.DateFormatSymbols(). ICU does not support DateFormatSymbolsProvider introduced in Java 6 or its equivalent implementation for now.", "history": "Added in API level 24", "FullName": "public static DateFormatSymbols getInstance ()"}, "getQuarters(int,int)": {"Returns": [["@B_java#lang#String_E@", "the quarter strings."]], "Parameters": [["int", "int: The quarter context, FORMAT or STANDALONE."], ["int", "int: The width or the returned quarter string, either WIDE or ABBREVIATED. There are no NARROW quarters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String[] getQuarters (int context, int width)"}, "setMonths(java.lang.String[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new month strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the month string, either WIDE, ABBREVIATED, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets month strings. For example: \"January\", \"February\", etc.", "history": "added in API level 24", "FullName": "public void setMonths (String[] newMonths, int context, int width)"}, "setMonths(java.lang.String[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new month strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the month string, either WIDE, ABBREVIATED, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets month strings. For example: \"January\", \"February\", etc.", "history": "Added in API level 24", "FullName": "public void setMonths (String[] newMonths, int context, int width)"}, "setQuarters(java.lang.String[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new quarter strings."], ["int", "int: The formatting context, FORMAT or STANDALONE."], ["int", "int: The width of the quarter string, either WIDE or ABBREVIATED. There are no NARROW quarters."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public void setQuarters (String[] newQuarters, int context, int width)"}, "getYearNames(int, int)": {"Returns": [["@B_java#lang#String_E@", "The year name strings, or null if they are not available for this calendar."]], "Parameters": [["int", "int: The usage context: FORMAT, STANDALONE."], ["int", "int: The requested name width: WIDE, ABBREVIATED, SHORT, NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns cyclic year name strings if the calendar has them, for example: \"jia-zi\", \"yi-chou\", etc.", "history": "added in API level 24", "FullName": "public String[] getYearNames (int context, int width)"}, "DateFormatSymbols(java.lang.Class<?extendsandroid.icu.util.Calendar>,java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#lang#Class_E@", "Class no parameter comment"], ["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Variant of DateFormatSymbols(Calendar, Locale) that takes the Calendar class instead of a Calendar instance.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (Class<? extends Calendar> calendarClass, Locale locale)"}, "DateFormatSymbols(java.util.ResourceBundle,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_java#util#ResourceBundle_E@", "ResourceBundle no parameter comment"], ["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#DateFormatSymbols#DateFormatSymbols_E@"], "Permissions": [], "Description": "Fetches a custom calendar's DateFormatSymbols out of the given resource bundle. Symbols that are not overridden are inherited from the default DateFormatSymbols for the locale.", "history": "Added in API level 24", "FullName": "public DateFormatSymbols (ResourceBundle bundle, ULocale locale)"}, "setAmPmStrings(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new ampm strings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets am/pm strings. For example: \"AM\" and \"PM\".", "history": "Added in API level 24", "FullName": "public void setAmPmStrings (String[] newAmpms)"}, "getMonths()": {"Returns": [["@B_java#lang#String_E@", "the month strings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns month strings. For example: \"January\", \"February\", etc.", "history": "Added in API level 24", "FullName": "public String[] getMonths ()"}, "getWeekdays()": {"Returns": [["@B_java#lang#String_E@", "the weekday strings. Use Calendar.SUNDAY, Calendar.MONDAY, etc. to index the result array."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns wide weekday strings. For example: \"Sunday\", \"Monday\", etc.", "history": "Added in API level 24", "FullName": "public String[] getWeekdays ()"}, "getYearNames(int,int)": {"Returns": [["@B_java#lang#String_E@", "The year name strings, or null if they are not available for this calendar."]], "Parameters": [["int", "int: The usage context: FORMAT, STANDALONE."], ["int", "int: The requested name width: WIDE, ABBREVIATED, SHORT, NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns cyclic year name strings if the calendar has them, for example: \"jia-zi\", \"yi-chou\", etc.", "history": "Added in API level 24", "FullName": "public String[] getYearNames (int context, int width)"}, "setShortWeekdays(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new abbreviated weekday strings. The array should be indexed by Calendar.SUNDAY, Calendar.MONDAY, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets abbreviated weekday strings; for example: \"Sun\", \"Mon\", etc. (Note: the method name is misleading; it does not set the CLDR-style \"short\" weekday strings, e.g. \"Su\", \"Mo\", etc.)", "history": "Added in API level 24", "FullName": "public void setShortWeekdays (String[] newAbbrevWeekdays)"}, "getMonths(int,int)": {"Returns": [["@B_java#lang#String_E@", "the month strings."]], "Parameters": [["int", "int: The month context, FORMAT or STANDALONE."], ["int", "int: The width or the returned month string, either WIDE, ABBREVIATED, or NARROW."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns month strings. For example: \"January\", \"February\", etc.", "history": "Added in API level 24", "FullName": "public String[] getMonths (int context, int width)"}, "getLocalPatternChars()": {"Returns": [["@B_java#lang#String_E@", "the localized date-time pattern characters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns localized date-time pattern characters. For example: 'u', 't', etc. Note: ICU no longer provides localized date-time pattern characters for a locale starting ICU 3.8. This method returns the non-localized date-time pattern characters unless user defined localized data is set by setLocalPatternChars.", "history": "Added in API level 24", "FullName": "public String getLocalPatternChars ()"}}, "Inheritance": [], "ClassName": "android.icu.text.DateFormatSymbols", "ClassDesc": "@B_java#text#DateFormatSymbols_E@. Methods, fields, and other functionality specific to ICU are labeled 'DateFormatSymbols is a public class for encapsulating localizable date-time formatting data, such as the names of the months, the names of the days of the week, and the time zone data. DateFormat and SimpleDateFormat both use DateFormatSymbols to encapsulate this information. Typically you shouldn't use DateFormatSymbols directly. Rather, you are encouraged to create a date-time formatter with the DateFormat class's factory methods: getTimeInstance, getDateInstance, or getDateTimeInstance. These methods automatically create a DateFormatSymbols for the formatter so that you don't have to. After the formatter is created, you may modify its format pattern using the setPattern method. For more information about creating formatters using DateFormat's factory methods, see @B_android#icu#text#DateFormat_E@. If you decide to create a date-time formatter with a specific format pattern for a specific locale, you can do so with: DateFormatSymbols objects are clonable. When you obtain a DateFormatSymbols object, feel free to modify the date-time formatting data. For instance, you can replace the localized date-time format pattern characters with the ones that you feel easy to remember. Or you can change the representative cities to your favorite ones. New DateFormatSymbols subclasses may be added to support SimpleDateFormat for date-time formatting for additional locales."}