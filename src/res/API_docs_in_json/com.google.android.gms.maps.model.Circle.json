{"Functions": {"getFillColor()": {"Returns": [["", "The fill color of the circle in ARGB format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the fill color of this Circle.", "history": "", "FullName": "public int getFillColor ()"}, "getStrokeWidth()": {"Returns": [["", "The width in screen pixels."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the stroke width.", "history": "", "FullName": "public float getStrokeWidth ()"}, "isVisible()": {"Returns": [["", "True if the circle is visible; false if it is invisible."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the circle is visible.", "history": "", "FullName": "public boolean isVisible ()"}, "setStrokeColor(int)": {"Returns": [], "Parameters": [["int", "The stroke color in the @B_android#graphics#Color_E@ format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the stroke color. The stroke color is the color of this circle's outline, in the integer format specified by @B_android#graphics#Color_E@. If TRANSPARENT is used then no outline is drawn.", "history": "", "FullName": "public void setStrokeColor (int color)"}, "setZIndex(float)": {"Returns": [], "Parameters": [["float", "The zIndex value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the zIndex. Overlays (such as circles) with higher zIndices are drawn above those with lower indices.", "history": "", "FullName": "public void setZIndex (float zIndex)"}, "setStrokeWidth(float)": {"Returns": [], "Parameters": [["float", "The stroke width, in screen pixels."]], "Throws": [["IllegalArgumentException", "if width is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the stroke width. The stroke width is the width (in screen pixels) of the circle's outline. It must be zero or greater. If it is zero then no outline is drawn. The default value is 10.", "history": "", "FullName": "public void setStrokeWidth (float width)"}, "setRadius(double)": {"Returns": [], "Parameters": [["double", "The radius, in meters."]], "Throws": [["IllegalArgumentException", "if radius is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the radius in meters. The radius must be zero or greater.", "history": "", "FullName": "public void setRadius (double radius)"}, "setVisible(boolean)": {"Returns": [], "Parameters": [["boolean", "false to make this circle invisible."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visibility of the circle. If this circle is not visible then it will not be drawn. All other state is preserved. Defaults to True.", "history": "", "FullName": "public void setVisible (boolean visible)"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes this circle from the map.", "history": "", "FullName": "public void remove ()"}, "getStrokeColor()": {"Returns": [["", "The color of the circle in ARGB format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the stroke color.", "history": "", "FullName": "public int getStrokeColor ()"}, "setCenter(com.google.android.gms.maps.model.LatLng)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#model#LatLng_E@", "The geographic center of the circle, specified as a @B_com#google#android#gms#maps#model#LatLng_E@."]], "Throws": [["NullPointerException", "if center is null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the center using a @B_com#google#android#gms#maps#model#LatLng_E@. The center must not be null, as there is no default value.", "history": "", "FullName": "public void setCenter (LatLng center)"}, "getZIndex()": {"Returns": [["", "The zIndex of this circle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the zIndex.", "history": "", "FullName": "public float getZIndex ()"}, "getId()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets this circle's id. The id will be unique amongst all Circles on a map.", "history": "", "FullName": "public String getId ()"}, "getCenter()": {"Returns": [["", "The geographic center as a @B_com#google#android#gms#maps#model#LatLng_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the center as a @B_com#google#android#gms#maps#model#LatLng_E@.", "history": "", "FullName": "public LatLng getCenter ()"}, "setFillColor(int)": {"Returns": [], "Parameters": [["int", "The color in the @B_android#graphics#Color_E@ format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fill color. The fill color is the color inside the circle, in the integer format specified by @B_android#graphics#Color_E@. If TRANSPARENT is used then no fill is drawn.", "history": "", "FullName": "public void setFillColor (int color)"}, "getRadius()": {"Returns": [["", "The radius in meters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the circle's radius, in meters.", "history": "", "FullName": "public double getRadius ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.model.Circle", "ClassDesc": "A circle on the earth's surface (spherical cap). A circle has the following properties. Methods that modify a Circle must be called on the main thread. If not, an @B_java#lang#IllegalStateException_E@ will be thrown at runtime. Note that the current map renderer is unable to draw the circle fill if the circle encompasses either the North or South pole. However, the outline will still be drawn correctly. For more information, read the"}