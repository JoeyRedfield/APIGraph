{"Functions": {"onMenuItemSelected(int,android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "Added in API level 1", "FullName": "public abstract boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onCreatePanelMenu(int,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "Added in API level 1", "FullName": "public abstract boolean onCreatePanelMenu (int featureId, Menu menu)"}, "dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)": {"Returns": [["boolean", "boolean Return true if event population was completed."]], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process population of @B_android#view#accessibility#AccessibilityEvent_E@s.", "history": "Added in API level 4", "FullName": "public abstract boolean dispatchPopulateAccessibilityEvent (AccessibilityEvent event)"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "added in API level 1", "FullName": "public abstract void onPanelClosed (int featureId, Menu menu)"}, "onMenuOpened(int, android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "added in API level 1", "FullName": "public abstract boolean onMenuOpened (int featureId, Menu menu)"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the content view of the screen changes (due to a call to @B_android#view#Window#setContentView_E@ or @B_android#view#Window#addContentView_E@).", "history": "Added in API level 1", "FullName": "public abstract void onContentChanged ()"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process key events. At the very least your implementation must call @B_android#view#Window#superDispatchKeyEvent_E@ to do the standard key processing.", "history": "Added in API level 1", "FullName": "public abstract boolean dispatchKeyEvent (KeyEvent event)"}, "onPreparePanel(int,android.view.View,android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#View_E@", "View: The View that was returned by onCreatePanelView(). This value may be null."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#Callback#onCreatePanelView_E@"], "Permissions": [], "Description": "Prepare a panel to be displayed. This is called right before the panel window is shown, every time it is shown.", "history": "Added in API level 1", "FullName": "public abstract boolean onPreparePanel (int featureId, View view, Menu menu)"}, "onMenuOpened(int,android.view.Menu)": {"Returns": [["boolean", "Return true to allow the menu to open, or false to prevent the menu from opening."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#Menu_E@", "Menu: The menu that is opened. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "Added in API level 1", "FullName": "public abstract boolean onMenuOpened (int featureId, Menu menu)"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the window now has focus."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This hook is called whenever the window focus changes. See @B_android#view#View#onWindowFocusChanged_E@ for more information.", "history": "Added in API level 1", "FullName": "public abstract void onWindowFocusChanged (boolean hasFocus)"}, "onPanelClosed(int,android.view.Menu)": {"Returns": [], "Parameters": [["int", "int: The panel that is being displayed."], ["@B_android#view#Menu_E@", "Menu: If onCreatePanelView() returned null, this is the Menu being displayed in the panel. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel is being closed. If another logical subsequent panel is being opened (and this panel is being closed to make room for the subsequent panel), this method will NOT be called.", "history": "Added in API level 1", "FullName": "public abstract void onPanelClosed (int featureId, Menu menu)"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["boolean", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "int: The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "MenuItem: The menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu item has been selected by the user.", "history": "added in API level 1", "FullName": "public abstract boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onWindowStartingActionMode(android.view.ActionMode.Callback,int)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"], ["int", "int: One of @B_android#view#ActionMode#TYPE_PRIMARY_E@ or @B_android#view#ActionMode#TYPE_FLOATING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all.", "history": "Added in API level 23", "FullName": "public abstract ActionMode onWindowStartingActionMode (ActionMode.Callback callback, int type)"}, "onSearchRequested()": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onSearchRequested_E@"], "Permissions": [], "Description": "Called when the user signals the desire to start a search.", "history": "Added in API level 1", "FullName": "public abstract boolean onSearchRequested ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been detached from the window manager. See @B_android#view#View#onDetachedFromWindow_E@ for more information.", "history": "Added in API level 5", "FullName": "public abstract void onDetachedFromWindow ()"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch screen event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process touch screen events. At the very least your implementation must call @B_android#view#Window#superDispatchTouchEvent_E@ to do the standard touch screen processing.", "history": "Added in API level 1", "FullName": "public abstract boolean dispatchTouchEvent (MotionEvent event)"}, "dispatchKeyShortcutEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if this event was consumed."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key shortcut event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process a key shortcut event. At the very least your implementation must call @B_android#view#Window#superDispatchKeyShortcutEvent_E@ to do the standard key shortcut processing.", "history": "Added in API level 11", "FullName": "public abstract boolean dispatchKeyShortcutEvent (KeyEvent event)"}, "onProvideKeyboardShortcuts(java.util.List<android.view.KeyboardShortcutGroup>,android.view.Menu,int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The data list to populate with shortcuts."], ["@B_android#view#Menu_E@", "Menu: The current menu, which may be null. This value may be null."], ["int", "int: The id for the connected device the shortcuts should be provided for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when Keyboard Shortcuts are requested for the current window.", "history": "Added in API level 24", "FullName": "public void onProvideKeyboardShortcuts (List<KeyboardShortcutGroup> data, Menu menu, int deviceId)"}, "onActionModeFinished(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The mode that was just finished."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been finished. The appropriate mode callback method will have already been invoked.", "history": "Added in API level 11", "FullName": "public abstract void onActionModeFinished (ActionMode mode)"}, "onSearchRequested(android.view.SearchEvent)": {"Returns": [["boolean", "true if search launched, false if activity refuses (blocks)"]], "Parameters": [["@B_android#view#SearchEvent_E@", "SearchEvent: A @B_android#view#SearchEvent_E@ describing the signal to start a search."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the user signals the desire to start a search.", "history": "Added in API level 23", "FullName": "public abstract boolean onSearchRequested (SearchEvent searchEvent)"}, "onCreatePanelMenu(int, android.view.Menu)": {"Returns": [["boolean", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "int: The panel being created."], ["@B_android#view#Menu_E@", "Menu: The menu inside the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the contents of the menu for panel 'featureId'. This is called if onCreatePanelView() returns null, giving you a standard menu in which you can place your items. It is only called once for the panel, the first time it is shown. You can safely hold on to", "history": "added in API level 1", "FullName": "public abstract boolean onCreatePanelMenu (int featureId, Menu menu)"}, "onActionModeStarted(android.view.ActionMode)": {"Returns": [], "Parameters": [["@B_android#view#ActionMode_E@", "ActionMode: The new mode that has just been started."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode has been started. The appropriate mode callback method will have already been invoked.", "history": "Added in API level 11", "FullName": "public abstract void onActionModeStarted (ActionMode mode)"}, "onWindowAttributesChanged(android.view.WindowManager.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#WindowManager#LayoutParams_E@", "WindowManager.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called whenever the current window attributes change.", "history": "Added in API level 1", "FullName": "public abstract void onWindowAttributesChanged (WindowManager.LayoutParams attrs)"}, "onCreatePanelView(int)": {"Returns": [["@B_android#view#View_E@", "view The top-level view to place in the panel."]], "Parameters": [["int", "int: Which panel is being created."]], "Throws": [], "SeeAlso": ["@B_android#view#Window#Callback#onPreparePanel_E@"], "Permissions": [], "Description": "Instantiate the view to display in the panel for 'featureId'. You can return null, in which case the default content (typically a menu) will be created for you.", "history": "Added in API level 1", "FullName": "public abstract View onCreatePanelView (int featureId)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window has been attached to the window manager. See @B_android#view#View#onAttachedToWindow_E@ for more information.", "history": "Added in API level 5", "FullName": "public abstract void onAttachedToWindow ()"}, "dispatchGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The generic motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process generic motion events. At the very least your implementation must call @B_android#view#Window#superDispatchGenericMotionEvent_E@ to do the standard processing.", "history": "Added in API level 12", "FullName": "public abstract boolean dispatchGenericMotionEvent (MotionEvent event)"}, "onWindowStartingActionMode(android.view.ActionMode.Callback)": {"Returns": [["@B_android#view#ActionMode_E@", "The ActionMode that was started, or null if the system should present it"]], "Parameters": [["@B_android#view#ActionMode#Callback_E@", "ActionMode.Callback: Callback to control the lifecycle of this action mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when an action mode is being started for this window. Gives the callback an opportunity to handle the action mode in its own unique and beautiful way. If this method returns null the system can choose a way to present the mode or choose not to start the mode at all. This is equivalent to @B_android#view#Window#Callback#onWindowStartingActionMode_E@ with type @B_android#view#ActionMode#TYPE_PRIMARY_E@.", "history": "Added in API level 11", "FullName": "public abstract ActionMode onWindowStartingActionMode (ActionMode.Callback callback)"}, "dispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "boolean Return true if this event was consumed."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The trackball event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to process trackball events. At the very least your implementation must call @B_android#view#Window#superDispatchTrackballEvent_E@ to do the standard trackball processing.", "history": "Added in API level 1", "FullName": "public abstract boolean dispatchTrackballEvent (MotionEvent event)"}, "onPointerCaptureChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window has pointer capture."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when pointer capture is enabled or disabled for the current window.", "history": "Added in API level 26", "FullName": "public void onPointerCaptureChanged (boolean hasCapture)"}}, "Inheritance": [], "ClassName": "android.view.Window.Callback", "ClassDesc": "API from a Window back to its caller. This allows the client to intercept key dispatching, panels and menus, etc."}