{"Functions": {"getFileSystem(java.net.URI)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "the reference to the file system"]], "Parameters": [["@B_java#net#URI_E@", "URI: the URI to locate the file system"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pre-conditions for the uri parameter are not met"], ["@B_java#nio#file#FileSystemNotFoundException_E@", "if the file system, identified by the URI, does not exist"], ["@B_java#nio#file#ProviderNotFoundException_E@", "if a provider supporting the URI scheme is not installed"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a reference to an existing FileSystem. This method iterates over the @B_java#nio#file#spi#FileSystemProvider#installedProviders_E@ providers to locate the provider that is identified by the URI @B_java#net#URI#getScheme_E@ of the given URI. URI schemes are compared without regard to case. The exact form of the URI is highly provider dependent. If found, the provider's @B_java#nio#file#spi#FileSystemProvider#getFileSystem_E@ method is invoked to obtain a reference to the FileSystem. Once a file system created by this provider is @B_java#nio#file#FileSystem#close_E@ it is provider-dependent if this method returns a reference to the closed file system or throws @B_java#nio#file#FileSystemNotFoundException_E@. If the provider allows a new file system to be created with the same URI as a file system it previously created then this method throws the exception if invoked after the file system is closed (and before a new instance is created by the @B_java#nio#file#FileSystems#newFileSystem_E@ method). If a security manager is installed then a provider implementation may require to check a permission before returning a reference to an existing file system. In the case of the @B_java#nio#file#FileSystems#getDefault_E@ file system, no permission check is required.", "history": "Added in API level 26", "FullName": "public static FileSystem getFileSystem (URI uri)"}, "getDefault()": {"Returns": [["@B_java#nio#file#FileSystem_E@", "the default file system"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default FileSystem. The default file system creates objects that provide access to the file systems accessible to the Java virtual machine. The working directory of the file system is the current user directory, named by the system property user.dir. This allows for interoperability with the @B_java#io#File_E@ class. The first invocation of any of the methods defined by this class locates the default @B_java#nio#file#spi#FileSystemProvider_E@ object. Where the system property java.nio.file.spi.DefaultFileSystemProvider is not defined then the default provider is a system-default provider that is invoked to create the default file system. If the system property java.nio.file.spi.DefaultFileSystemProvider is defined then it is taken to be a list of one or more fully-qualified names of concrete provider classes identified by the URI scheme \"file\". Where the property is a list of more than one name then the names are separated by a comma. Each class is loaded, using the system class loader, and instantiated by invoking a one argument constructor whose formal parameter type is FileSystemProvider. The providers are loaded and instantiated in the order they are listed in the property. If this process fails or a provider's scheme is not equal to \"file\" then an unspecified error is thrown. URI schemes are normally compared without regard to case but for the default provider, the scheme is required to be \"file\". The first provider class is instantiated by invoking it with a reference to the system-default provider. The second provider class is instantiated by invoking it with a reference to the first provider instance. The third provider class is instantiated by invoking it with a reference to the second instance, and so on. The last provider to be instantiated becomes the default provider; its getFileSystem method is invoked with the URI \"file:///\" to get a reference to the default file system. Subsequent invocations of this method return the file system that was returned by the first invocation.", "history": "Added in API level 26", "FullName": "public static FileSystem getDefault ()"}, "newFileSystem(java.net.URI,java.util.Map<java.lang.String,?>,java.lang.ClassLoader)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "a new file system"]], "Parameters": [["@B_java#net#URI_E@", "URI: the URI identifying the file system"], ["@B_java#util#Map_E@", "Map: a map of provider specific properties to configure the file system; may be empty"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader to locate the provider or null to only attempt to locate an installed provider"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pre-conditions for the uri parameter are not met, or the env parameter does not contain properties required by the provider, or a property value is invalid"], ["@B_java#nio#file#FileSystemAlreadyExistsException_E@", "if the URI scheme identifies an installed provider and the file system has already been created"], ["@B_java#nio#file#ProviderNotFoundException_E@", "if a provider supporting the URI scheme is not found"], ["@B_java#util#ServiceConfigurationError_E@", "when an error occurs while loading a service provider"], ["@B_java#io#IOException_E@", "an I/O error occurs creating the file system"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission required by the file system provider implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new file system that is identified by a @B_java#net#URI_E@ This method first attempts to locate an installed provider in exactly the same manner as the @B_java#nio#file#FileSystems#newFileSystem_E@ method. If none of the installed providers support the URI scheme then an attempt is made to locate the provider using the given class loader. If a provider supporting the URI scheme is located then its @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ is invoked to construct the new file system.", "history": "Added in API level 26", "FullName": "public static FileSystem newFileSystem (URI uri, Map<String, ?> env, ClassLoader loader)"}, "newFileSystem(java.net.URI,java.util.Map<java.lang.String,?>)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "a new file system"]], "Parameters": [["@B_java#net#URI_E@", "URI: the URI identifying the file system"], ["@B_java#util#Map_E@", "Map: a map of provider specific properties to configure the file system; may be empty"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the pre-conditions for the uri parameter are not met, or the env parameter does not contain properties required by the provider, or a property value is invalid"], ["@B_java#nio#file#FileSystemAlreadyExistsException_E@", "if the file system has already been created"], ["@B_java#nio#file#ProviderNotFoundException_E@", "if a provider supporting the URI scheme is not installed"], ["@B_java#io#IOException_E@", "if an I/O error occurs creating the file system"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission required by the file system provider implementation"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new file system that is identified by a @B_java#net#URI_E@ This method iterates over the @B_java#nio#file#spi#FileSystemProvider#installedProviders_E@ providers to locate the provider that is identified by the URI @B_java#net#URI#getScheme_E@ of the given URI. URI schemes are compared without regard to case. The exact form of the URI is highly provider dependent. If found, the provider's @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method is invoked to construct the new file system. Once a file system is @B_java#nio#file#FileSystem#close_E@ it is provider-dependent if the provider allows a new file system to be created with the same URI as a file system it previously created. \"memory\" installed:", "history": "Added in API level 26", "FullName": "public static FileSystem newFileSystem (URI uri, Map<String, ?> env)"}, "newFileSystem(java.nio.file.Path,java.lang.ClassLoader)": {"Returns": [["@B_java#nio#file#FileSystem_E@", "a new file system"]], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file"], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader to locate the provider or null to only attempt to locate an installed provider"]], "Throws": [["@B_java#nio#file#ProviderNotFoundException_E@", "if a provider supporting this file type cannot be located"], ["@B_java#util#ServiceConfigurationError_E@", "when an error occurs while loading a service provider"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new FileSystem to access the contents of a file as a file system. This method makes use of specialized providers that create pseudo file systems where the contents of one or more files is treated as a file system. This method iterates over the @B_java#nio#file#spi#FileSystemProvider#installedProviders_E@ providers. It invokes, in turn, each provider's @B_java#nio#file#spi#FileSystemProvider#newFileSystem_E@ method with an empty map. If a provider returns a file system then the iteration terminates and the file system is returned. If none of the installed providers return a FileSystem then an attempt is made to locate the provider using the given class loader. If a provider returns a file system then the lookup terminates and the file system is returned.", "history": "Added in API level 26", "FullName": "public static FileSystem newFileSystem (Path path, ClassLoader loader)"}}, "Inheritance": [], "ClassName": "java.nio.file.FileSystems", "ClassDesc": "Factory methods for file systems. This class defines the @B_java#nio#file#FileSystems#getDefault_E@ method to get the default file system and factory methods to construct other types of file systems. The first invocation of any of the methods defined by this class causes the default @B_java#nio#file#spi#FileSystemProvider_E@ to be loaded. The default provider, identified by the URI scheme \"file\", creates the @B_java#nio#file#FileSystem_E@ that provides access to the file systems accessible to the Java virtual machine. If the process of loading or initializing the default provider fails then an unspecified error is thrown. The first invocation of the @B_java#nio#file#spi#FileSystemProvider#installedProviders_E@ method, by way of invoking any of the newFileSystem methods defined by this class, locates and loads all installed file system providers. Installed providers are loaded using the service-provider loading facility defined by the @B_java#util#ServiceLoader_E@ class. Installed providers are loaded using the system class loader. If the system class loader cannot be found then the extension class loader is used; if there is no extension class loader then the bootstrap class loader is used. Providers are typically installed by placing them in a JAR file on the application class path or in the extension directory, the JAR file contains a provider-configuration file named java.nio.file.spi.FileSystemProvider in the resource directory META-INF/services, and the file lists one or more fully-qualified names of concrete subclass of @B_java#nio#file#spi#FileSystemProvider_E@ that have a zero argument constructor. The ordering that installed providers are located is implementation specific. If a provider is instantiated and its @B_java#nio#file#spi#FileSystemProvider#getScheme_E@ returns the same URI scheme of a provider that was previously instantiated then the most recently instantiated duplicate is discarded. URI schemes are compared without regard to case. During construction a provider may safely access files associated with the default provider but care needs to be taken to avoid circular loading of other installed providers. If circular loading of installed providers is detected then an unspecified error is thrown. This class also defines factory methods that allow a @B_java#lang#ClassLoader_E@ to be specified when locating a provider. As with installed providers, the provider classes are identified by placing the provider configuration file in the resource directory META-INF/services. If a thread initiates the loading of the installed file system providers and another thread invokes a method that also attempts to load the providers then the method will block until the loading completes."}