{"Functions": {"addLinks(android.text.Spannable,int)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with links This value must never be null."], ["int", "int: Mask to define which kinds of links will be searched. Value is either 0 or a combination of @B_android#text#util#Linkify#WEB_URLS_E@, @B_android#text#util#Linkify#EMAIL_ADDRESSES_E@, @B_android#text#util#Linkify#PHONE_NUMBERS_E@, @B_android#text#util#Linkify#MAP_ADDRESSES_E@, and @B_android#text#util#Linkify#ALL_E@"]], "Throws": [], "SeeAlso": ["@B_android#text#util#Linkify#addLinks_E@"], "Permissions": [], "Description": "Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero, it also removes any existing URLSpans attached to the Spannable, to avoid problems if you call it repeatedly on the same text.", "history": "Added in API level 1", "FullName": "public static final boolean addLinks (Spannable text, int mask)"}, "addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter,java.util.function.Function<java.lang.String,android.text.style.URLSpan>)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: spannable whose text is to be marked-up with links. This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: regex pattern to be used for finding links. This value must never be null."], ["@B_java#lang#String_E@", "String: the default scheme to be prepended to links if the link does not start with one of the schemes given. This value may be null."], ["@B_java#lang#String_E@", "String: array of schemes (eg http://) to check if the link found contains a scheme. Passing a null or empty value means prepend defaultScheme to all links. This value may be null."], ["@B_android#text#util#Linkify#MatchFilter_E@", "Linkify.MatchFilter: the filter that is used to allow the client code additional control over which pattern matches are to be converted into links. This value may be null."], ["@B_android#text#util#Linkify#TransformFilter_E@", "Linkify.TransformFilter: filter to allow the client code to update the link found. This value may be null."], ["@B_java#util#function#Function_E@", "Function: function used to create @B_android#text#style#URLSpan_E@s This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a regex to a Spannable turning the matches into links.", "history": "Added in API level 29", "FullName": "public static final boolean addLinks (Spannable spannable, Pattern pattern, String defaultScheme, String[] schemes, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter, Function<String, URLSpan> urlSpanFactory)"}, "addLinks(android.text.Spannable,int,java.util.function.Function<java.lang.String,android.text.style.URLSpan>)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with links This value must never be null."], ["int", "int: mask to define which kinds of links will be searched Value is either 0 or a combination of @B_android#text#util#Linkify#WEB_URLS_E@, @B_android#text#util#Linkify#EMAIL_ADDRESSES_E@, @B_android#text#util#Linkify#PHONE_NUMBERS_E@, @B_android#text#util#Linkify#MAP_ADDRESSES_E@, and @B_android#text#util#Linkify#ALL_E@"], ["@B_java#util#function#Function_E@", "Function: function used to create @B_android#text#style#URLSpan_E@s This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero, it also removes any existing URLSpans attached to the Spannable, to avoid problems if you call it repeatedly on the same text.", "history": "Added in API level 29", "FullName": "public static final boolean addLinks (Spannable text, int mask, Function<String, URLSpan> urlSpanFactory)"}, "addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with links This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links This value must never be null."], ["@B_java#lang#String_E@", "String: URL scheme string (eg http://) to be prepended to the links that do not start with this scheme. This value may be null."], ["@B_android#text#util#Linkify#MatchFilter_E@", "Linkify.MatchFilter: The filter that is used to allow the client code additional control over which pattern matches are to be converted into links. This value may be null."], ["@B_android#text#util#Linkify#TransformFilter_E@", "Linkify.TransformFilter: Filter to allow the client code to update the link found. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#text#util#Linkify#addLinks_E@"], "Permissions": [], "Description": "Applies a regex to a Spannable turning the matches into links.", "history": "Added in API level 1", "FullName": "public static final boolean addLinks (Spannable spannable, Pattern pattern, String scheme, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter)"}, "addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView whose text is to be marked-up with links This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links This value must never be null."], ["@B_java#lang#String_E@", "String: URL scheme string (eg http://) to be prepended to the links that do not start with this scheme. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas, and the movement method for the text is changed to LinkMovementMethod.", "history": "Added in API level 1", "FullName": "public static final void addLinks (TextView text, Pattern pattern, String scheme)"}, "addLinks(android.widget.TextView,int)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView whose text is to be marked-up with links This value must never be null."], ["int", "int: Mask to define which kinds of links will be searched. Value is either 0 or a combination of @B_android#text#util#Linkify#WEB_URLS_E@, @B_android#text#util#Linkify#EMAIL_ADDRESSES_E@, @B_android#text#util#Linkify#PHONE_NUMBERS_E@, @B_android#text#util#Linkify#MAP_ADDRESSES_E@, and @B_android#text#util#Linkify#ALL_E@"]], "Throws": [], "SeeAlso": ["@B_android#text#util#Linkify#addLinks_E@"], "Permissions": [], "Description": "Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links. If matches are found the movement method for the TextView is set to LinkMovementMethod.", "history": "Added in API level 1", "FullName": "public static final boolean addLinks (TextView text, int mask)"}, "addLinks(android.widget.TextView, int)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView whose text is to be marked-up with linksThis value must never be null."], ["int", "int: Mask to define which kinds of links will be searched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scans the text of the provided TextView and turns all occurrences of the link types indicated in the mask into clickable links. If matches are found the movement method for the TextView is set to LinkMovementMethod.", "history": "added in API level 1", "FullName": "public static final boolean addLinks (TextView text, int mask)"}, "addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)": {"Returns": [], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView whose text is to be marked-up with links This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links This value must never be null."], ["@B_java#lang#String_E@", "String: URL scheme string (eg http://) to be prepended to the links that do not start with this scheme. This value may be null."], ["@B_android#text#util#Linkify#MatchFilter_E@", "Linkify.MatchFilter: The filter that is used to allow the client code additional control over which pattern matches are to be converted into links. This value may be null."], ["@B_android#text#util#Linkify#TransformFilter_E@", "Linkify.TransformFilter: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas, and the movement method for the text is changed to LinkMovementMethod.", "history": "Added in API level 1", "FullName": "public static final void addLinks (TextView text, Pattern pattern, String scheme, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter)"}, "addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with links. This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links. This value must never be null."], ["@B_java#lang#String_E@", "String: The default scheme to be prepended to links if the link does not start with one of the schemes given. This value may be null."], ["@B_java#lang#String_E@", "String: Array of schemes (eg http://) to check if the link found contains a scheme. Passing a null or empty value means prepend defaultScheme to all links. This value may be null."], ["@B_android#text#util#Linkify#MatchFilter_E@", "Linkify.MatchFilter: The filter that is used to allow the client code additional control over which pattern matches are to be converted into links. This value may be null."], ["@B_android#text#util#Linkify#TransformFilter_E@", "Linkify.TransformFilter: Filter to allow the client code to update the link found. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#text#util#Linkify#addLinks_E@"], "Permissions": [], "Description": "Applies a regex to a Spannable turning the matches into links.", "history": "Added in API level 24", "FullName": "public static final boolean addLinks (Spannable spannable, Pattern pattern, String defaultScheme, String[] schemes, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter)"}, "addLinks(android.widget.TextView,java.util.regex.Pattern,java.lang.String,java.lang.String[],android.text.util.Linkify.MatchFilter,android.text.util.Linkify.TransformFilter)": {"Returns": [], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView whose text is to be marked-up with links. This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links. This value must never be null."], ["@B_java#lang#String_E@", "String: The default scheme to be prepended to links if the link does not start with one of the schemes given. This value may be null."], ["@B_java#lang#String_E@", "String: Array of schemes (eg http://) to check if the link found contains a scheme. Passing a null or empty value means prepend defaultScheme to all links. This value may be null."], ["@B_android#text#util#Linkify#MatchFilter_E@", "Linkify.MatchFilter: The filter that is used to allow the client code additional control over which pattern matches are to be converted into links. This value may be null."], ["@B_android#text#util#Linkify#TransformFilter_E@", "Linkify.TransformFilter: Filter to allow the client code to update the link found. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies a regex to the text of a TextView turning the matches into links. If links are found then UrlSpans are applied to the link text match areas, and the movement method for the text is changed to LinkMovementMethod.", "history": "Added in API level 24", "FullName": "public static final void addLinks (TextView text, Pattern pattern, String defaultScheme, String[] schemes, Linkify.MatchFilter matchFilter, Linkify.TransformFilter transformFilter)"}, "addLinks(android.text.Spannable,java.util.regex.Pattern,java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with links This value must never be null."], ["@B_java#util#regex#Pattern_E@", "Pattern: Regex pattern to be used for finding links This value must never be null."], ["@B_java#lang#String_E@", "String: URL scheme string (eg http://) to be prepended to the links that do not start with this scheme. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#text#util#Linkify#addLinks_E@"], "Permissions": [], "Description": "Applies a regex to a Spannable turning the matches into links.", "history": "Added in API level 1", "FullName": "public static final boolean addLinks (Spannable text, Pattern pattern, String scheme)"}, "Linkify()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Linkify ()"}, "addLinks(android.text.Spannable, int)": {"Returns": [["boolean", "True if at least one link is found and applied."]], "Parameters": [["@B_android#text#Spannable_E@", "Spannable: Spannable whose text is to be marked-up with linksThis value must never be null."], ["int", "int: Mask to define which kinds of links will be searched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scans the text of the provided Spannable and turns all occurrences of the link types indicated in the mask into clickable links. If the mask is nonzero, it also removes any existing URLSpans attached to the Spannable, to avoid problems if you call it repeatedly on the same text.", "history": "added in API level 1", "FullName": "public static final boolean addLinks (Spannable text, int mask)"}}, "Inheritance": [], "ClassName": "android.text.util.Linkify", "ClassDesc": "Linkify take a piece of text and a regular expression and turns all of the regex matches in the text into clickable links. This is particularly useful for matching things like email addresses, web URLs, etc. and making them actionable. Alone with the pattern that is to be matched, a URL scheme prefix is also required. Any pattern match that does not begin with the supplied scheme will have the scheme prepended to the matched text when the clickable URL is created. For instance, if you are matching web URLs you would supply the scheme http://. If the pattern matches example.com, which does not have a URL scheme prefix, the supplied scheme will be prepended to create http://example.com when the clickable URL link is created. @B_android#text#util#Linkify#MAP_ADDRESSES_E@ or @B_android#text#util#Linkify#ALL_E@ to match street addresses on API level @B_android#os#Build#VERSION_CODES#O_MR1_E@ and earlier, methods in this class may throw @B_android#util#AndroidRuntimeException_E@ or other exceptions if the device's WebView implementation is currently being updated, because @B_android#webkit#WebView#findAddress_E@ is required to match street addresses."}