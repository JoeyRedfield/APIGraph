{"Functions": {"isOutputSupportedFor(java.lang.Class<T>)": {"Returns": [["boolean", "true if this class is supported as an output, false otherwise"]], "Parameters": [["@B_java#lang#Class_E@", "Class: a non-null @B_java#lang#Class_E@ object reference"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if klass was null"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@"], "Permissions": [], "Description": "Determine whether or not output streams can be configured with a particular class as a consumer. The following list is generally usable for outputs: @B_android#media#ImageReader_E@ - Recommended for image processing or streaming to external resources (such as a file or network) @B_android#media#MediaRecorder_E@ - Recommended for recording video (simple to use) @B_android#media#MediaCodec_E@ - Recommended for recording video (more complicated to use, with more flexibility) @B_android#renderscript#Allocation_E@ - Recommended for image processing with @B_android#renderscript#package-summary_E@ @B_android#view#SurfaceHolder_E@ - Recommended for low-power camera preview with @B_android#view#SurfaceView_E@ @B_android#graphics#SurfaceTexture_E@ - Recommended for OpenGL-accelerated preview processing or compositing with @B_android#view#TextureView_E@ Generally speaking this means that creating a @B_android#view#Surface_E@ from that class @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. Since not all of the above classes support output of all format and size combinations, the particular combination should be queried with @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@.", "history": "Added in API level 21", "FullName": "public static boolean isOutputSupportedFor (Class<T> klass)"}, "isOutputSupportedFor(int)": {"Returns": [["boolean", "true iff using a surface with this format will be supported with @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@"]], "Parameters": [["int", "int: an image format from either @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the image format was not a defined named constant from either @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"]], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@", "@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@"], "Permissions": [], "Description": "Determine whether or not output surfaces with a particular user-defined format can be passed @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. This method determines that the output format is supported by the camera device; each output surface target may or may not itself support that format. Refer to the class which provides the surface for additional documentation. Formats for which this returns true are guaranteed to exist in the result returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@.", "history": "Added in API level 21", "FullName": "public boolean isOutputSupportedFor (int format)"}, "getHighResolutionOutputSizes(int)": {"Returns": [["@B_android#util#Size_E@", "an array of supported slower high-resolution sizes, or null if the BURST_CAPTURE capability is not supported"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a list of supported high resolution sizes, which cannot operate at full BURST_CAPTURE rate. This includes all output sizes that cannot meet the 20 fps frame rate requirements for the @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE_E@ capability. This does not include the stall duration, so for example, a JPEG or RAW16 output resolution with a large stall duration but a minimum frame duration that's above 20 fps will still be listed in the regular @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ list. All the sizes on this list that are less than 24 megapixels are still guaranteed to operate at a rate of at least 10 fps, not including stall duration. Sizes on this list that are at least 24 megapixels are allowed to operate at less than 10 fps. For a device that does not support the BURST_CAPTURE capability, this list will be null, since resolutions in the @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ list are already not guaranteed to meet >= 20 fps rate requirements. For a device that does support the BURST_CAPTURE capability, this list may be empty, if all supported resolutions meet the 20 fps requirement.", "history": "Added in API level 23", "FullName": "public Size[] getHighResolutionOutputSizes (int format)"}, "getHighSpeedVideoSizes()": {"Returns": [["@B_android#util#Size_E@", "an array of supported high speed video recording sizes"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@", "@B_android#hardware#camera2#CameraMetadata_E@", "@B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@", "@B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@"], "Permissions": [], "Description": "Get a list of supported high speed video recording sizes. When @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO_E@ is supported in @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@, this method will list the supported high speed video size configurations. All the sizes listed will be a subset of the sizes reported by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ for processed non-stalling formats (typically @B_android#graphics#ImageFormat#PRIVATE_E@ @B_android#graphics#ImageFormat#YUV_420_888_E@, etc.) To enable high speed video recording, application must create a constrained create high speed capture session via @B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@, and submit a CaptureRequest list created by @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@ to this session. The application must select the video size from this method and @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ from @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@ to configure the constrained high speed session and generate the high speed request list. For example, if the application intends to do high speed recording, it can select the maximum size reported by this method to create high speed capture session. Note that for the use case of multiple output streams, application must select one unique size from this method to use (e.g., preview and recording streams must have the same size). Otherwise, the high speed session creation will fail. Once the size is selected, application can get the supported FPS ranges by @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@, and use these FPS ranges to setup the recording request lists via @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@.", "history": "Added in API level 21", "FullName": "public Size[] getHighSpeedVideoSizes ()"}, "getOutputSizes(java.lang.Class<T>)": {"Returns": [["@B_android#util#Size_E@", "an array of supported sizes for @B_android#graphics#ImageFormat#PRIVATE_E@ format, or null iff the klass is not a supported output."]], "Parameters": [["@B_java#lang#Class_E@", "Class: a non-null @B_java#lang#Class_E@ object reference"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if klass was null"]], "SeeAlso": ["@B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@"], "Permissions": [], "Description": "Get a list of sizes compatible with klass to use as an output. Some of the supported classes may support additional formats beyond @B_android#graphics#ImageFormat#PRIVATE_E@; this function only returns sizes for @B_android#graphics#ImageFormat#PRIVATE_E@. For example, @B_android#media#ImageReader_E@ supports @B_android#graphics#ImageFormat#YUV_420_888_E@ and @B_android#graphics#ImageFormat#PRIVATE_E@, this method will only return the sizes for @B_android#graphics#ImageFormat#PRIVATE_E@ for @B_android#media#ImageReader_E@ class. If a well-defined format such as NV21 is required, use @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ instead. The klass should be a supported output, that querying #isOutputSupportedFor(Class) should return true.", "history": "Added in API level 21", "FullName": "public Size[] getOutputSizes (Class<T> klass)"}, "getOutputMinFrameDuration(java.lang.Class<T>,android.util.Size)": {"Returns": [["long", "a minimum frame duration > 0 in nanoseconds, or 0 if the minimum frame duration is not available."]], "Parameters": [["@B_java#lang#Class_E@", "Class: a class which is supported by @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@ and has a non-empty array returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if klass or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size or klass was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the minimum @B_android#hardware#camera2#CaptureRequest#SENSOR_FRAME_DURATION_E@ for the class/size combination (in nanoseconds). This assumes that the klass is set up to use @B_android#graphics#ImageFormat#PRIVATE_E@. For user-defined formats, use @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputMinFrameDuration_E@. klass should be one of the ones which is supported by @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. This should correspond to the frame duration when only that stream is active, with all processing (typically in android.*.mode) set to either OFF or FAST. When multiple streams are used in a request, the minimum frame duration will be max(individual stream min durations). For devices that do not support manual sensor control (@B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR_E@), this function may return 0.", "history": "Added in API level 21", "FullName": "public long getOutputMinFrameDuration (Class<T> klass, Size size)"}, "getOutputMinFrameDuration(int,android.util.Size)": {"Returns": [["long", "a minimum frame duration > 0 in nanoseconds, or 0 if the minimum frame duration is not available."]], "Parameters": [["int", "int: an image format from @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputStallDuration_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the minimum @B_android#hardware#camera2#CaptureRequest#SENSOR_FRAME_DURATION_E@ for the format/size combination (in nanoseconds). format should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. This should correspond to the frame duration when only that stream is active, with all processing (typically in android.*.mode) set to either OFF or FAST. When multiple streams are used in a request, the minimum frame duration will be max(individual stream min durations). For devices that do not support manual sensor control (@B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR_E@), this function may return 0.", "history": "Added in API level 21", "FullName": "public long getOutputMinFrameDuration (int format, Size size)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this @B_android#hardware#camera2#params#StreamConfigurationMap_E@ is equal to another @B_android#hardware#camera2#params#StreamConfigurationMap_E@. Two vectors are only equal if and only if each of the respective elements is equal.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getHighSpeedVideoFpsRanges()": {"Returns": [["@B_android#util#Range_E@", "an array of supported high speed video recording FPS ranges The upper bound of returned ranges is guaranteed to be larger or equal to 120."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizesFor_E@", "@B_android#hardware#camera2#CameraMetadata_E@", "@B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@", "@B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@"], "Permissions": [], "Description": "Get a list of supported high speed video recording FPS ranges. When @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO_E@ is supported in @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@, this method will list the supported high speed video FPS range configurations. Application can then use @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizesFor_E@ to query available sizes for one of returned FPS range. To enable high speed video recording, application must create a constrained create high speed capture session via @B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@, and submit a CaptureRequest list created by @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@ to this session. The application must select the video size from this method and @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ from @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@ to configure the constrained high speed session and generate the high speed request list. For example, if the application intends to do high speed recording, it can select one FPS range reported by this method, query the video sizes corresponding to this FPS range by @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizesFor_E@ and use one of reported sizes to create a high speed capture session. Note that for the use case of multiple output streams, application must select one unique size from this method to use (e.g., preview and recording streams must have the same size). Otherwise, the high speed session creation will fail. Once the high speed capture session is created, the application can set the FPS range in the recording request lists via @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@. The FPS ranges reported by this method will have below characteristics: The fpsMin and fpsMax will be a multiple 30fps. The fpsMin will be no less than 30fps, the fpsMax will be no less than 120fps. At least one range will be a fixed FPS range where fpsMin == fpsMax. For each fixed FPS range, there will be one corresponding variable FPS range [30, fps_max]. These kinds of FPS ranges are suitable for preview-only use cases where the application doesn't want the camera device always produce higher frame rate than the display refresh rate.", "history": "Added in API level 21", "FullName": "public Range[]<Integer> getHighSpeedVideoFpsRanges ()"}, "getOutputStallDuration(int,android.util.Size)": {"Returns": [["long", "a stall duration >= 0 in nanoseconds"]], "Parameters": [["int", "int: an image format from @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the stall duration for the format/size combination (in nanoseconds). format should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. A stall duration is how much extra time would get added to the normal minimum frame duration for a repeating request that has streams with non-zero stall. For example, consider JPEG captures which have the following characteristics: JPEG streams act like processed YUV streams in requests for which they are not included; in requests in which they are directly referenced, they act as JPEG streams. This is because supporting a JPEG stream requires the underlying YUV data to always be ready for use by a JPEG encoder, but the encoder will only be used (and impact frame duration) on requests that actually reference a JPEG stream. The JPEG processor can run concurrently to the rest of the camera pipeline, but cannot process more than 1 capture at a time. In other words, using a repeating YUV request would result in a steady frame rate (let's say it's 30 FPS). If a single JPEG request is submitted periodically, the frame rate will stay at 30 FPS (as long as we wait for the previous JPEG to return each time). If we try to submit a repeating YUV + JPEG request, then the frame rate will drop from 30 FPS. In general, submitting a new request with a non-0 stall time stream will not cause a frame rate drop unless there are still outstanding buffers for that stream from previous requests. Submitting a repeating request with streams (call this S) is the same as setting the minimum frame duration from the normal minimum frame duration corresponding to S, added with the maximum stall duration for S. If interleaving requests with and without a stall duration, a request will stall by the maximum of the remaining times for each can-stall stream with outstanding buffers. This means that a stalling request will not have an exposure start until the stall has completed. This should correspond to the stall duration when only that stream is active, with all processing (typically in android.*.mode) set to FAST or OFF. Setting any of the processing modes to HIGH_QUALITY effectively results in an indeterminate stall duration for all streams in a request (the regular stall calculation rules are ignored). The following formats may always have a stall duration: @B_android#graphics#ImageFormat#JPEG_E@ @B_android#graphics#ImageFormat#RAW_SENSOR_E@ @B_android#graphics#ImageFormat#RAW_PRIVATE_E@ The following formats will never have a stall duration: @B_android#graphics#ImageFormat#YUV_420_888_E@ @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@ All other formats may or may not have an allowed stall duration on a per-capability basis; refer to @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ for more details. See @B_android#hardware#camera2#CaptureRequest#SENSOR_FRAME_DURATION_E@ for more information about calculating the max frame rate (absent stalls).", "history": "Added in API level 21", "FullName": "public long getOutputStallDuration (int format, Size size)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}, "getHighSpeedVideoSizesFor(android.util.Range<java.lang.Integer>)": {"Returns": [["@B_android#util#Size_E@", "An array of video sizes to create high speed capture sessions for high speed streaming use cases."]], "Parameters": [["@B_android#util#Range_E@", "Range: one of the FPS range returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRanges_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if input FPS range does not exist in the return value of getHighSpeedVideoFpsRanges"]], "SeeAlso": ["@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRanges_E@"], "Permissions": [], "Description": "Get the supported video sizes for an input high speed FPS range. See @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@ for how to enable high speed recording.", "history": "Added in API level 21", "FullName": "public Size[] getHighSpeedVideoSizesFor (Range<Integer> fpsRange)"}, "getOutputStallDuration(java.lang.Class<T>,android.util.Size)": {"Returns": [["long", "a minimum frame duration >= 0 in nanoseconds"]], "Parameters": [["@B_java#lang#Class_E@", "Class: a class which is supported by @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@ and has a non-empty array returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if klass or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size or klass was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the stall duration for the class/size combination (in nanoseconds). This assumes that the klass is set up to use @B_android#graphics#ImageFormat#PRIVATE_E@. For user-defined formats, use @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputMinFrameDuration_E@. klass should be one of the ones with a non-empty array returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. See @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputStallDuration_E@ for a definition of a stall duration.", "history": "Added in API level 21", "FullName": "public long getOutputStallDuration (Class<T> klass, Size size)"}, "getInputSizes(int)": {"Returns": [["@B_android#util#Size_E@", "a non-empty array of sizes, or null if the format was not available."]], "Parameters": [["int", "int: a format from @B_android#hardware#camera2#params#StreamConfigurationMap#getInputFormats_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the supported input sizes for this input format. The format must have come from @B_android#hardware#camera2#params#StreamConfigurationMap#getInputFormats_E@; otherwise null is returned.", "history": "Added in API level 23", "FullName": "public Size[] getInputSizes (int format)"}, "getInputFormats()": {"Returns": [["int[]", "an array of integer format"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the image format input formats in this stream configuration. All image formats returned by this function will be defined in either @B_android#graphics#ImageFormat_E@ or in @B_android#graphics#PixelFormat_E@ (and there is no possibility of collision).", "history": "Added in API level 23", "FullName": "public int[] getInputFormats ()"}, "getOutputSizes(int)": {"Returns": [["@B_android#util#Size_E@", "an array of supported sizes, or null if the format is not a supported output"]], "Parameters": [["int", "int: an image format from @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@"], "Permissions": [], "Description": "Get a list of sizes compatible with the requested image format. The format should be a supported format (one of the formats returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@). As of API level 23, the @B_android#hardware#camera2#params#StreamConfigurationMap#getHighResolutionOutputSizes_E@ method can be used on devices that support the @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_BURST_CAPTURE_E@ capability to get a list of high-resolution output sizes that cannot operate at the preferred 20fps rate. This means that for some supported formats, this method will return an empty list, if all the supported resolutions operate at below 20fps. For devices that do not support the BURST_CAPTURE capability, all output resolutions are listed through this method.", "history": "Added in API level 21", "FullName": "public Size[] getOutputSizes (int format)"}, "getHighSpeedVideoFpsRangesFor(android.util.Size)": {"Returns": [["@B_android#util#Range_E@", "an array of supported high speed video recording FPS ranges The upper bound of returned ranges is guaranteed to be greater than or equal to 120."]], "Parameters": [["@B_android#util#Size_E@", "Size: one of the sizes returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if input size does not exist in the return value of getHighSpeedVideoSizes"]], "SeeAlso": ["@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRanges_E@"], "Permissions": [], "Description": "Get the frame per second ranges (fpsMin, fpsMax) for input high speed video size. See @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRanges_E@ for how to enable high speed recording. The @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ reported in this method must not be used to setup capture requests that are submitted to unconstrained capture sessions, or it will result in @B_java#lang#IllegalArgumentException_E@. See @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRanges_E@ for the characteristics of the returned FPS ranges.", "history": "Added in API level 21", "FullName": "public Range[]<Integer> getHighSpeedVideoFpsRangesFor (Size size)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#params#StreamConfigurationMap_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return this @B_android#hardware#camera2#params#StreamConfigurationMap_E@ as a string representation. \"StreamConfigurationMap(Outputs([w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d], ... [w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d]), Inputs([w:%d, h:%d, format:%s(%d)], ... [w:%d, h:%d, format:%s(%d)]), ValidOutputFormatsForInput( [in:%d, out:%d, ... %d], ... [in:%d, out:%d, ... %d]), HighSpeedVideoConfigurations( [w:%d, h:%d, min_fps:%d, max_fps:%d], ... [w:%d, h:%d, min_fps:%d, max_fps:%d]))\". Outputs([w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d], ... [w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d]), where [w:%d, h:%d, format:%s(%d), min_duration:%d, stall:%d] represents an output configuration's width, height, format, minimal frame duration in nanoseconds, and stall duration in nanoseconds. Inputs([w:%d, h:%d, format:%s(%d)], ... [w:%d, h:%d, format:%s(%d)]), where [w:%d, h:%d, format:%s(%d)] represents an input configuration's width, height, and format. ValidOutputFormatsForInput([in:%s(%d), out:%s(%d), ... %s(%d)], ... [in:%s(%d), out:%s(%d), ... %s(%d)]), where [in:%s(%d), out:%s(%d), ... %s(%d)] represents an input fomat and its valid output formats. HighSpeedVideoConfigurations([w:%d, h:%d, min_fps:%d, max_fps:%d], ... [w:%d, h:%d, min_fps:%d, max_fps:%d]), where [w:%d, h:%d, min_fps:%d, max_fps:%d] represents a high speed video output configuration's width, height, minimal frame rate, and maximal frame rate.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "isOutputSupportedFor(android.view.Surface)": {"Returns": [["boolean", "true if this is supported, false otherwise"]], "Parameters": [["@B_android#view#Surface_E@", "Surface: a non-null @B_android#view#Surface_E@ object reference"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if surface was null"], ["@B_java#lang#IllegalArgumentException_E@", "if the Surface endpoint is no longer valid"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createCaptureSession_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@"], "Permissions": [], "Description": "Determine whether or not the surface in its current state is suitable to be included in a @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ as an output. Not all surfaces are usable with the @B_android#hardware#camera2#CameraDevice_E@, and not all configurations of that surface are compatible. Some classes that provide the surface are compatible with the @B_android#hardware#camera2#CameraDevice_E@ in general (see @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@, but it is the caller's responsibility to put the surface into a state that will be compatible with the @B_android#hardware#camera2#CameraDevice_E@. Reasons for a surface being specifically incompatible might be: Using a format that's not listed by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@ Using a format/size combination that's not listed by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@ The surface itself is not in a state where it can service a new producer. Surfaces from flexible sources will return true even if the exact size of the Surface does not match a camera-supported size, as long as the format (or class) is supported and the camera device supports a size that is equal to or less than 1080p in that format. If such as Surface is used to create a capture session, it will have its size rounded to the nearest supported size, below or equal to 1080p. Flexible sources include SurfaceView, SurfaceTexture, and ImageReader. This is not an exhaustive list; see the particular class's documentation for further possible reasons of incompatibility.", "history": "Added in API level 21", "FullName": "public boolean isOutputSupportedFor (Surface surface)"}, "getValidOutputFormatsForInput(int)": {"Returns": [["int[]", "an array of integer format"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the image format output formats for a reprocessing input format. When submitting a @B_android#hardware#camera2#CaptureRequest_E@ with an input Surface of a given format, the only allowed target outputs of the @B_android#hardware#camera2#CaptureRequest_E@ are the ones with a format listed in the return value of this method. Including any other output Surface as a target will throw an IllegalArgumentException. If no output format is supported given the input format, an empty int[] will be returned. All image formats returned by this function will be defined in either @B_android#graphics#ImageFormat_E@ or in @B_android#graphics#PixelFormat_E@ (and there is no possibility of collision). Formats listed in this array are guaranteed to return true if queried with @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@.", "history": "Added in API level 23", "FullName": "public int[] getValidOutputFormatsForInput (int inputFormat)"}, "getOutputStallDuration(int, android.util.Size)": {"Returns": [["long", "a stall duration >= 0 in nanoseconds"]], "Parameters": [["int", "int: an image format from @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the stall duration for the format/size combination (in nanoseconds). format should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. A stall duration is how much extra time would get added to the normal minimum frame duration for a repeating request that has streams with non-zero stall. For example, consider JPEG captures which have the following characteristics: JPEG streams act like processed YUV streams in requests for which they are not included; in requests in which they are directly referenced, they act as JPEG streams. This is because supporting a JPEG stream requires the underlying YUV data to always be ready for use by a JPEG encoder, but the encoder will only be used (and impact frame duration) on requests that actually reference a JPEG stream. The JPEG processor can run concurrently to the rest of the camera pipeline, but cannot process more than 1 capture at a time. In other words, using a repeating YUV request would result in a steady frame rate (let's say it's 30 FPS). If a single JPEG request is submitted periodically, the frame rate will stay at 30 FPS (as long as we wait for the previous JPEG to return each time). If we try to submit a repeating YUV + JPEG request, then the frame rate will drop from 30 FPS. In general, submitting a new request with a non-0 stall time stream will not cause a frame rate drop unless there are still outstanding buffers for that stream from previous requests. Submitting a repeating request with streams (call this S) is the same as setting the minimum frame duration from the normal minimum frame duration corresponding to S, added with the maximum stall duration for S. If interleaving requests with and without a stall duration, a request will stall by the maximum of the remaining times for each can-stall stream with outstanding buffers. This means that a stalling request will not have an exposure start until the stall has completed. This should correspond to the stall duration when only that stream is active, with all processing (typically in android.*.mode) set to FAST or OFF. Setting any of the processing modes to HIGH_QUALITY effectively results in an indeterminate stall duration for all streams in a request (the regular stall calculation rules are ignored). The following formats may always have a stall duration: @B_android#graphics#ImageFormat#JPEG_E@ @B_android#graphics#ImageFormat#RAW_SENSOR_E@ @B_android#graphics#ImageFormat#RAW_PRIVATE_E@ The following formats will never have a stall duration: @B_android#graphics#ImageFormat#YUV_420_888_E@ @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@ All other formats may or may not have an allowed stall duration on a per-capability basis; refer to @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ for more details. See @B_android#hardware#camera2#CaptureRequest#SENSOR_FRAME_DURATION_E@ for more information about calculating the max frame rate (absent stalls).", "history": "added in API level 21", "FullName": "public long getOutputStallDuration (int format, Size size)"}, "getOutputFormats()": {"Returns": [["int[]", "an array of integer format"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the image format output formats in this stream configuration. All image formats returned by this function will be defined in either @B_android#graphics#ImageFormat_E@ or in @B_android#graphics#PixelFormat_E@ (and there is no possibility of collision). Formats listed in this array are guaranteed to return true if queried with @B_android#hardware#camera2#params#StreamConfigurationMap#isOutputSupportedFor_E@.", "history": "Added in API level 21", "FullName": "public int[] getOutputFormats ()"}, "getOutputMinFrameDuration(int, android.util.Size)": {"Returns": [["long", "a minimum frame duration > 0 in nanoseconds, or 0 if the minimum frame duration is not available."]], "Parameters": [["int", "int: an image format from @B_android#graphics#ImageFormat_E@ or @B_android#graphics#PixelFormat_E@"], ["@B_android#util#Size_E@", "Size: an output-compatible size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if format or size was not supported"], ["@B_java#lang#NullPointerException_E@", "if size was null"]], "SeeAlso": ["@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getOutputStallDuration_E@", "@B_android#graphics#ImageFormat_E@", "@B_android#graphics#PixelFormat_E@"], "Permissions": [], "Description": "Get the minimum @B_android#hardware#camera2#CaptureRequest#SENSOR_FRAME_DURATION_E@ for the format/size combination (in nanoseconds). format should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputFormats_E@. size should be one of the ones returned by @B_android#hardware#camera2#params#StreamConfigurationMap#getOutputSizes_E@. This should correspond to the frame duration when only that stream is active, with all processing (typically in android.*.mode) set to either OFF or FAST. When multiple streams are used in a request, the minimum frame duration will be max(individual stream min durations). For devices that do not support manual sensor control (@B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_MANUAL_SENSOR_E@), this function may return 0.", "history": "added in API level 21", "FullName": "public long getOutputMinFrameDuration (int format, Size size)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.StreamConfigurationMap", "ClassDesc": "Immutable class to store the available stream @B_android#hardware#camera2#CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_E@ to set up @B_android#view#Surface_E@ for creating a @B_android#hardware#camera2#CameraCaptureSession_E@ with @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@. This is the authoritative list for all This also contains the minimum frame durations and stall durations for each format/size combination that can be used to calculate effective frame rate when submitting multiple captures. An instance of this object is available from @B_android#hardware#camera2#CameraCharacteristics_E@ using the @B_android#hardware#camera2#CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP_E@ key and the @B_android#hardware#camera2#CameraCharacteristics#get_E@ method."}