{"Functions": {"inflate(int, android.view.ViewGroup, boolean)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied and attachToRoot is true, this is root; otherwise it is the root of the inflated XML file."]], "Parameters": [["int", "int: ID for an XML layout resource to load (e.g., R.layout.main_page)"], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy (if attachToRoot is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if attachToRoot is false.)This value may be null."], ["boolean", "boolean: Whether the inflated hierarchy should be attached to the root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified xml resource. Throws @B_android#view#InflateException_E@ if there is an error.", "history": "added in API level 1", "FullName": "public View inflate (int resource, ViewGroup root, boolean attachToRoot)"}, "setFilter(android.view.LayoutInflater.Filter)": {"Returns": [], "Parameters": [["@B_android#view#LayoutInflater#Filter_E@", "LayoutInflater.Filter: The Filter which restricts the set of Views that are allowed to be inflated. This filter will replace any previous filter set on this LayoutInflater."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#view#LayoutInflater#Filter_E@ to by this LayoutInflater. If a view is attempted to be inflated which is not allowed by the @B_android#view#LayoutInflater#Filter_E@, the @B_android#view#LayoutInflater#inflate_E@ call will throw an @B_android#view#InflateException_E@. This filter will replace any previous filter set on this LayoutInflater.", "history": "Added in API level 1", "FullName": "public void setFilter (LayoutInflater.Filter filter)"}, "inflate(int,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied, this is the root View; otherwise it is the root of the inflated XML file."]], "Parameters": [["int", "int: ID for an XML layout resource to load (e.g., R.layout.main_page)"], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified xml resource. Throws @B_android#view#InflateException_E@ if there is an error.", "history": "Added in API level 1", "FullName": "public View inflate (int resource, ViewGroup root)"}, "inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied and attachToRoot is true, this is root; otherwise it is the root of the inflated XML file."]], "Parameters": [["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML dom node containing the description of the view hierarchy."], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy (if attachToRoot is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if attachToRoot is false.) This value may be null."], ["boolean", "boolean: Whether the inflated hierarchy should be attached to the root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified XML node. Throws @B_android#view#InflateException_E@ if there is an error. For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.", "history": "Added in API level 1", "FullName": "public View inflate (XmlPullParser parser, ViewGroup root, boolean attachToRoot)"}, "inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied, this is the root View; otherwise it is the root of the inflated XML file."]], "Parameters": [["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML dom node containing the description of the view hierarchy."], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified xml node. Throws @B_android#view#InflateException_E@ if there is an error. * For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime.", "history": "Added in API level 1", "FullName": "public View inflate (XmlPullParser parser, ViewGroup root)"}, "cloneInContext(android.content.Context)": {"Returns": [["@B_android#view#LayoutInflater_E@", "Returns a brand spanking new LayoutInflater object associated with the given Context."]], "Parameters": [["@B_android#content#Context_E@", "Context: The new Context to associate with the new LayoutInflater. May be the same as the original Context if desired."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a copy of the existing LayoutInflater object, with the copy pointing to a different Context than the original. This is used by @B_android#view#ContextThemeWrapper_E@ to create a new LayoutInflater to go along with the new Context theme.", "history": "Added in API level 1", "FullName": "public abstract LayoutInflater cloneInContext (Context newContext)"}, "createView(java.lang.String,java.lang.String,android.util.AttributeSet)": {"Returns": [["@B_android#view#View_E@", "View The newly instantiated view, or null."]], "Parameters": [["@B_java#lang#String_E@", "String: The full name of the class to be instantiated."], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: The XML attributes supplied for this instance."]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""], ["@B_android#view#InflateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Low-level function for instantiating a view by name. This attempts to instantiate a view class of the given @B_android#view#LayoutInflater#createView_E@ instead. There are two things that can happen in an error case: either the exception describing the error will be thrown, or a null will be returned. You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name, the latter every time there-after for that class name.", "history": "Added in API level 1", "FullName": "public final View createView (String name, String prefix, AttributeSet attrs)"}, "setFactory(android.view.LayoutInflater.Factory)": {"Returns": [], "Parameters": [["@B_android#view#LayoutInflater#Factory_E@", "LayoutInflater.Factory no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach a custom Factory interface for creating views while using this LayoutInflater. This must not be null, and can only be set once; after setting, you can not change the factory. This is called on each element name as the xml is parsed. If the factory returns a View, that is added to the hierarchy. If it returns null, the next factory default @B_android#view#LayoutInflater#onCreateView_E@ method is called. If you have an existing LayoutInflater and want to add your own factory to it, use @B_android#view#LayoutInflater#cloneInContext_E@ to clone the existing instance and then you can use this function (once) on the returned new instance. This will merge your own factory with whatever factory the original instance is using.", "history": "Added in API level 1", "FullName": "public void setFactory (LayoutInflater.Factory factory)"}, "LayoutInflater(android.view.LayoutInflater,android.content.Context)": {"Returns": [], "Parameters": [["@B_android#view#LayoutInflater_E@", "LayoutInflater: The original LayoutInflater to copy."], ["@B_android#content#Context_E@", "Context: The new Context to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new LayoutInflater instance that is a copy of an existing LayoutInflater, optionally with its Context changed. For use in implementing @B_android#view#LayoutInflater#cloneInContext_E@.", "history": "Added in API level 1", "FullName": "protected LayoutInflater (LayoutInflater original, Context newContext)"}, "onCreateView(java.lang.String,android.util.AttributeSet)": {"Returns": [["@B_android#view#View_E@", "View The View created."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified class name of the View to be create."], ["@B_android#util#AttributeSet_E@", "AttributeSet: An AttributeSet of attributes to apply to the View."]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "This routine is responsible for creating the correct subclass of View given the xml element name. Override it to handle custom view objects. If you override this in your subclass be sure to call through to super.onCreateView(name) for names you do not recognize.", "history": "Added in API level 1", "FullName": "protected View onCreateView (String name, AttributeSet attrs)"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the context we are running in, for access to resources, class loader, etc.", "history": "Added in API level 1", "FullName": "public Context getContext ()"}, "setFactory2(android.view.LayoutInflater.Factory2)": {"Returns": [], "Parameters": [["@B_android#view#LayoutInflater#Factory2_E@", "LayoutInflater.Factory2 no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#view#LayoutInflater#setFactory_E@, but allows you to set a @B_android#view#LayoutInflater#Factory2_E@ interface.", "history": "Added in API level 11", "FullName": "public void setFactory2 (LayoutInflater.Factory2 factory)"}, "from(android.content.Context)": {"Returns": [["@B_android#view#LayoutInflater_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the LayoutInflater from the given context.", "history": "Added in API level 1", "FullName": "public static LayoutInflater from (Context context)"}, "LayoutInflater(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context in which this LayoutInflater will create its Views; most importantly, this supplies the theme from which the default values for their attributes are retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new LayoutInflater instance associated with a particular Context. Applications will almost always want to use @B_android#content#Context#getSystemService_E@ to retrieve the standard @B_android#content#Context#LAYOUT_INFLATER_SERVICE_E@.", "history": "Added in API level 1", "FullName": "protected LayoutInflater (Context context)"}, "onCreateView(android.content.Context,android.view.View,java.lang.String,android.util.AttributeSet)": {"Returns": [["@B_android#view#View_E@", "View The View created."]], "Parameters": [["@B_android#content#Context_E@", "Context: The Context to be used as a constructor parameter for the View This value must never be null."], ["@B_android#view#View_E@", "View: The future parent of the returned view. Note that this may be null. This value may be null."], ["@B_java#lang#String_E@", "String: The fully qualified class name of the View to be create. This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: An AttributeSet of attributes to apply to the View. This value may be null."]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Version of @B_android#view#LayoutInflater#onCreateView_E@ that also takes the inflation context. The default implementation simply calls @B_android#view#LayoutInflater#onCreateView_E@.", "history": "Added in API level 29", "FullName": "public View onCreateView (Context viewContext, View parent, String name, AttributeSet attrs)"}, "inflate(int, android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied, this is the root View; otherwise it is the root of the inflated XML file."]], "Parameters": [["int", "int: ID for an XML layout resource to load (e.g., R.layout.main_page)"], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy.This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified xml resource. Throws @B_android#view#InflateException_E@ if there is an error.", "history": "added in API level 1", "FullName": "public View inflate (int resource, ViewGroup root)"}, "getFilter()": {"Returns": [["@B_android#view#LayoutInflater#Filter_E@", "The @B_android#view#LayoutInflater#Filter_E@ currently used by this LayoutInflater to restrict the set of Views that are allowed to be inflated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public LayoutInflater.Filter getFilter ()"}, "getFactory2()": {"Returns": [["@B_android#view#LayoutInflater#Factory2_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current @B_android#view#LayoutInflater#Factory2_E@. Returns null if no factory is set or the set factory does not implement the @B_android#view#LayoutInflater#Factory2_E@ interface. This is called on each element name. If the factory returns a View, add that to the hierarchy. If it returns null, proceed to call onCreateView(name).", "history": "Added in API level 11", "FullName": "public final LayoutInflater.Factory2 getFactory2 ()"}, "getFactory()": {"Returns": [["@B_android#view#LayoutInflater#Factory_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current @B_android#view#LayoutInflater#Factory_E@ (or null). This is called on each element name. If the factory returns a View, add that to the hierarchy. If it returns null, proceed to call onCreateView(name).", "history": "Added in API level 1", "FullName": "public final LayoutInflater.Factory getFactory ()"}, "onCreateView(android.view.View,java.lang.String,android.util.AttributeSet)": {"Returns": [["@B_android#view#View_E@", "View The View created."]], "Parameters": [["@B_android#view#View_E@", "View: The future parent of the returned view. Note that this may be null."], ["@B_java#lang#String_E@", "String: The fully qualified class name of the View to be create."], ["@B_android#util#AttributeSet_E@", "AttributeSet: An AttributeSet of attributes to apply to the View."]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Version of @B_android#view#LayoutInflater#onCreateView_E@ that also takes the future parent of the view being constructed. The default implementation simply calls @B_android#view#LayoutInflater#onCreateView_E@.", "history": "Added in API level 11", "FullName": "protected View onCreateView (View parent, String name, AttributeSet attrs)"}, "inflate(int,android.view.ViewGroup,boolean)": {"Returns": [["@B_android#view#View_E@", "The root View of the inflated hierarchy. If root was supplied and attachToRoot is true, this is root; otherwise it is the root of the inflated XML file."]], "Parameters": [["int", "int: ID for an XML layout resource to load (e.g., R.layout.main_page)"], ["@B_android#view#ViewGroup_E@", "ViewGroup: Optional view to be the parent of the generated hierarchy (if attachToRoot is true), or else simply an object that provides a set of LayoutParams values for root of the returned hierarchy (if attachToRoot is false.) This value may be null."], ["boolean", "boolean: Whether the inflated hierarchy should be attached to the root parameter? If false, root is only used to create the correct subclass of LayoutParams for the root view in the XML."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a new view hierarchy from the specified xml resource. Throws @B_android#view#InflateException_E@ if there is an error.", "history": "Added in API level 1", "FullName": "public View inflate (int resource, ViewGroup root, boolean attachToRoot)"}, "createView(android.content.Context,java.lang.String,java.lang.String,android.util.AttributeSet)": {"Returns": [["@B_android#view#View_E@", "View The newly instantiated view, or null."]], "Parameters": [["@B_android#content#Context_E@", "Context: The context used as the context parameter of the View constructor This value must never be null."], ["@B_java#lang#String_E@", "String: The full name of the class to be instantiated. This value must never be null."], ["@B_java#lang#String_E@", "String: This value may be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The XML attributes supplied for this instance. This value may be null."]], "Throws": [["@B_java#lang#ClassNotFoundException_E@", ""], ["@B_android#view#InflateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Low-level function for instantiating a view by name. This attempts to instantiate a view class of the given There are two things that can happen in an error case: either the exception describing the error will be thrown, or a null will be returned. You must deal with both possibilities -- the former will happen the first time createView() is called for a class of a particular name, the latter every time there-after for that class name.", "history": "Added in API level 29", "FullName": "public final View createView (Context viewContext, String name, String prefix, AttributeSet attrs)"}}, "Inheritance": [], "ClassName": "android.view.LayoutInflater", "ClassDesc": "Instantiates a layout XML file into its corresponding @B_android#view#View_E@ objects. It is never used directly. Instead, use @B_android#app#Activity#getLayoutInflater_E@ or @B_android#content#Context#getSystemService_E@ to retrieve a standard LayoutInflater instance that is already hooked up to the current context and correctly configured for the device you are running on. To create a new LayoutInflater with an additional @B_android#view#LayoutInflater#Factory_E@ for your own views, you can use @B_android#view#LayoutInflater#cloneInContext_E@ to clone an existing ViewFactory, and then call @B_android#view#LayoutInflater#setFactory_E@ on it to include your Factory. For performance reasons, view inflation relies heavily on pre-processing of XML files that is done at build time. Therefore, it is not currently possible to use LayoutInflater with an XmlPullParser over a plain XML file at runtime; it only works with an XmlPullParser returned from a compiled resource (R.something file.)"}