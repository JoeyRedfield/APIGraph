{"Functions": {"BufferedHttpEntity(org.apache.http.HttpEntity)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public BufferedHttpEntity (HttpEntity entity)"}, "isChunked()": {"Returns": [["", "false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells that this entity does not have to be chunked.", "history": "Added in API level 1", "FullName": "public boolean isChunked ()"}, "getContent()": {"Returns": [["", "a new input stream that returns the entity data."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new InputStream object of the entity. It is a programming error to return the same InputStream object more than once. Entities that are not @B_org#apache#http#HttpEntity#isRepeatable_E@ will throw an exception if this method is called multiple times.", "history": "Added in API level 1", "FullName": "public InputStream getContent ()"}, "isRepeatable()": {"Returns": [["", "true"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells that this entity is repeatable.", "history": "Added in API level 1", "FullName": "public boolean isRepeatable ()"}, "isStreaming()": {"Returns": [["", "true if the entity content is streamed and not yet consumed, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this entity depends on an underlying stream. Streamed entities should return true until the content has been consumed, false afterwards. Self-contained entities should return false. Wrapping entities should delegate this call to the wrapped entity. The content of a streamed entity is consumed when the stream returned by @B_org#apache#http#HttpEntity#getContent_E@ has been read to EOF, or after @B_org#apache#http#HttpEntity#consumeContent_E@ has been called. If a streamed entity can not detect whether the stream has been read to EOF, it should return true until @B_org#apache#http#HttpEntity#consumeContent_E@ is called.", "history": "Added in API level 1", "FullName": "public boolean isStreaming ()"}, "writeTo(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "the output stream to write entity content to"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes the entity content to the output stream.", "history": "Added in API level 1", "FullName": "public void writeTo (OutputStream outstream)"}, "getContentLength()": {"Returns": [["", "the number of bytes of the content, or a negative number if unknown. If the content length is known but exceeds @B_java#lang#Long#MAX_VALUE_E@, a negative number is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells the length of the content, if known.", "history": "Added in API level 1", "FullName": "public long getContentLength ()"}}, "Inheritance": ["@B_org#apache#http#entity#HttpEntityWrapper_E@"], "ClassName": "org.apache.http.entity.BufferedHttpEntity", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A wrapping entity that buffers it content if necessary. The buffered entity is always repeatable. If the wrapped entity is repeatable itself, calls are passed through. If the wrapped entity is not repeatable, the content is read into a buffer once and provided from there as often as required."}