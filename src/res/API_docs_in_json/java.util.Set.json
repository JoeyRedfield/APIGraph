{"Functions": {"toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this set. If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this set. (In other words, this method must allocate a new array even if this set is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public abstract Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this set (its cardinality)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this set (its cardinality). If this set contains more than", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this set"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this set"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this set does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this set"]], "SeeAlso": ["@B_java#util#Set#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set if they're not already present (optional operation). If the specified collection is also a set, the", "history": "added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "isEmpty()": {"Returns": [["boolean", "true if this set contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean isEmpty ()"}, "add(E)": {"Returns": [["boolean", "true if this set did not already contain the specified element"]], "Parameters": [["E", "E: element to be added to this set"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this set"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this set"]], "SeeAlso": [], "Permissions": [], "Description": "Adds the specified element to this set if it is not already present (optional operation). More formally, adds the specified element The stipulation above does not imply that sets must accept all elements; sets may refuse to add any particular element, including @B_java#util#Collection#add_E@. Individual set implementations should clearly document any restrictions on the elements that they may contain.", "history": "Added in API level 1", "FullName": "public abstract boolean add (E e)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this set contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be removed from this set, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this set (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements (optional)"], ["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this set"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified element from this set if it is present (optional operation). More formally, removes an element", "history": "Added in API level 1", "FullName": "public abstract boolean remove (Object o)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this set"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the retainAll operation is not supported by this set"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this set is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Set#remove_E@"], "Permissions": [], "Description": "Retains only the elements in this set that are contained in the specified collection (optional operation). In other words, removes from this set all of its elements that are not contained in the specified collection. If the specified collection is also a set, this operation effectively modifies this set so that its value is the", "history": "Added in API level 1", "FullName": "public abstract boolean retainAll (Collection<?> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this set"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the removeAll operation is not supported by this set"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this set is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this set contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Set#remove_E@", "@B_java#util#Set#contains_E@"], "Permissions": [], "Description": "Removes from this set all of its elements that are contained in the specified collection (optional operation). If the specified collection is also a set, this operation effectively modifies this set so that its value is the", "history": "Added in API level 1", "FullName": "public abstract boolean removeAll (Collection<?> c)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all the elements in this set"]], "Parameters": [["T[]", "T: the array into which the elements of this set are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this set"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array. If the set fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this set. If this set fits in the specified array with room to spare (i.e., the array has more elements than this set), the element in the array immediately following the end of the set is set to If this set makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#Set#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose", "history": "Added in API level 1", "FullName": "public abstract T[] toArray (T[] a)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the clear method is not supported by this set"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this set (optional operation). The set will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator over the elements in this set. The Spliterator reports @B_java#util#Spliterator#DISTINCT_E@. Implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set. The elements are returned in no particular order (unless this set is an instance of some class that provides a guarantee).", "history": "Added in API level 1", "FullName": "public abstract Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this set"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this set for equality. Returns", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object o)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this set changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this set"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this set"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this set"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this set does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this set"]], "SeeAlso": ["@B_java#util#Set#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this set if they're not already present (optional operation). If the specified collection is also a set, the", "history": "Added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this set contains all of the elements of the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in the specified collection are incompatible with this set (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this set does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#Set#contains_E@"], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean containsAll (Collection<?> c)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this set contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this set is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this set (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean contains (Object o)"}, "hashCode()": {"Returns": [["int", "the hash code value for this set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#Set#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this set. The hash code of a set is defined to be the sum of the hash codes of the elements in the set, where the hash code of a @B_java#lang#Object#hashCode_E@.", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}}, "Inheritance": [], "ClassName": "java.util.Set<E>", "ClassDesc": "A collection that contains no duplicate elements. More formally, sets contain no pair of elements e1 and e2 such that e1.equals(e2), and at most one null element. As implied by its name, this interface models the mathematical The The additional stipulation on constructors is, not surprisingly, that all constructors must create a set that contains no duplicate elements (as defined above). Note: Great care must be exercised if mutable objects are used as set elements. The behavior of a set is not specified if the value of an object is changed in a manner that affects Some set implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically This interface is a member of the"}