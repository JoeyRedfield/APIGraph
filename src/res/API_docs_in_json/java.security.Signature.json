{"Functions": {"initSign(java.security.PrivateKey,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: the private key of the identity whose signature is going to be generated."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness for this signature."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Initialize this object for signing. If this method is called again with a different argument, it negates the effect of this call.", "history": "Added in API level 1", "FullName": "public final void initSign (PrivateKey privateKey, SecureRandom random)"}, "getParameter(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the object that represents the parameter value, or null if there is none."]], "Parameters": [["@B_java#lang#String_E@", "String: the string name of the parameter."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if param is an invalid parameter for this engine, or another exception occurs while trying to get this parameter."]], "SeeAlso": ["@B_java#security#Signature#setParameter_E@"], "Permissions": [], "Description": "Deprecated. Gets the value of the specified algorithm parameter. This method supplies a general-purpose mechanism through which it is possible to get the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final Object getParameter (String param)"}, "update(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer"]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified using the specified ByteBuffer. Processes the data.remaining() bytes starting at at data.position(). Upon return, the buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 1", "FullName": "public final void update (ByteBuffer data)"}, "update(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.", "history": "added in API level 1", "FullName": "public final void update (byte[] data, int off, int len)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this signature object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this signature object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getParameters()": {"Returns": [["@B_java#security#AlgorithmParameters_E@", "the parameters used with this signature, or null if this signature does not use any parameters."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Signature#setParameter_E@"], "Permissions": [], "Description": "Returns the parameters used with this signature object. The returned parameters may be the same that were used to initialize this signature, or may contain a combination of default and randomly generated parameter values used by the underlying signature implementation if this signature requires algorithm parameters but was not initialized with any.", "history": "Added in API level 1", "FullName": "public final AlgorithmParameters getParameters ()"}, "initVerify(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the public key of the identity whose signature is going to be verified."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this object for verification. If this method is called again with a different argument, it negates the effect of this call.", "history": "Added in API level 1", "FullName": "public final void initVerify (PublicKey publicKey)"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_java#security#Signature_E@", "the new Signature object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the Signature section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SignatureSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Signature object that implements the specified signature algorithm. A new Signature object encapsulating the SignatureSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static Signature getInstance (String algorithm, String provider)"}, "setParameter(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string identifier of the parameter."], ["@B_java#lang#Object_E@", "Object: the parameter value."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on."]], "SeeAlso": ["@B_java#security#Signature#getParameter_E@"], "Permissions": [], "Description": "Use @B_java#security#Signature#setParameter_E@. Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public final void setParameter (String param, Object value)"}, "setParameter(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string identifier of the parameter."], ["@B_java#lang#Object_E@", "Object: the parameter value."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on."]], "SeeAlso": ["@B_java#security#Signature#getParameter_E@"], "Permissions": [], "Description": "Use @B_java#security#Signature#setParameter_E@. Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.", "history": "added in API level 1", "FullName": "public final void setParameter (String param, Object value)"}, "verify(byte[], int, int)": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."], ["@B_java#lang#IllegalArgumentException_E@", "if the signature byte array is null, or the offset or length is less than 0, or the sum of the offset and length is greater than the length of the signature byte array."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. A call to this method resets this signature object to the state it was in when previously initialized for verification via a call to initVerify(PublicKey). That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to initVerify.", "history": "added in API level 1", "FullName": "public final boolean verify (byte[] signature, int offset, int length)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_java#security#Signature_E@", "the new Signature object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the Signature section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SignatureSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider name is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Signature object that implements the specified signature algorithm. A new Signature object encapsulating the SignatureSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static Signature getInstance (String algorithm, String provider)"}, "verify(byte[])": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature. A call to this method resets this signature object to the state it was in when previously initialized for verification via a call to initVerify(PublicKey). That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to initVerify.", "history": "Added in API level 1", "FullName": "public final boolean verify (byte[] signature)"}, "update(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the byte array to use for the update."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified, using the specified array of bytes.", "history": "Added in API level 1", "FullName": "public final void update (byte[] data)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone if the implementation is cloneable."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "if this is called on an implementation that does not support Cloneable."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone if the implementation is cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "Signature(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the standard string name of the algorithm. See the Signature section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Signature object for the specified algorithm.", "history": "Added in API level 1", "FullName": "protected Signature (String algorithm)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the name of the algorithm for this signature object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the algorithm for this signature object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_java#security#Signature_E@", "the new Signature object."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the algorithm requested. See the Signature section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if a SignatureSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Signature object that implements the specified signature algorithm. A new Signature object encapsulating the SignatureSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static Signature getInstance (String algorithm, Provider provider)"}, "sign(byte[],int,int)": {"Returns": [["int", "the number of bytes placed into outbuf."]], "Parameters": [["byte[]", "byte: buffer for the signature result."], ["int", "int: offset into outbuf where the signature is stored."], ["int", "int: number of bytes within outbuf allotted for the signature."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly, if this signature algorithm is unable to process the input data provided, or if len is less than the actual signature length."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset. The format of the signature depends on the underlying signature scheme. This signature object is reset to its initial state (the state it was in after a call to one of the initSign methods) and can be reused to generate further signatures with the same private key.", "history": "Added in API level 1", "FullName": "public final int sign (byte[] outbuf, int offset, int len)"}, "update(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.", "history": "Added in API level 1", "FullName": "public final void update (byte[] data, int off, int len)"}, "getInstance(java.lang.String)": {"Returns": [["@B_java#security#Signature_E@", "the new Signature object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the algorithm requested. See the Signature section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard algorithm names."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports a Signature implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns a Signature object that implements the specified signature algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new Signature object encapsulating the SignatureSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static Signature getInstance (String algorithm)"}, "sign(byte[], int, int)": {"Returns": [["int", "the number of bytes placed into outbuf."]], "Parameters": [["byte[]", "byte: buffer for the signature result."], ["int", "int: offset into outbuf where the signature is stored."], ["int", "int: number of bytes within outbuf allotted for the signature."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly, if this signature algorithm is unable to process the input data provided, or if len is less than the actual signature length."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes the signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset. The format of the signature depends on the underlying signature scheme. This signature object is reset to its initial state (the state it was in after a call to one of the initSign methods) and can be reused to generate further signatures with the same private key.", "history": "added in API level 1", "FullName": "public final int sign (byte[] outbuf, int offset, int len)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this signature object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this signature object, providing information that includes the state of the object and the name of the algorithm used.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "setParameter(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the parameters"]], "Throws": [["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given parameters are inappropriate for this signature engine"]], "SeeAlso": ["@B_java#security#Signature#getParameters_E@"], "Permissions": [], "Description": "Initializes this signature engine with the specified parameter set.", "history": "Added in API level 1", "FullName": "public final void setParameter (AlgorithmParameterSpec params)"}, "initSign(java.security.PrivateKey)": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: the private key of the identity whose signature is going to be generated."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Initialize this object for signing. If this method is called again with a different argument, it negates the effect of this call.", "history": "Added in API level 1", "FullName": "public final void initSign (PrivateKey privateKey)"}, "initVerify(java.security.cert.Certificate)": {"Returns": [], "Parameters": [["@B_java#security#cert#Certificate_E@", "Certificate: the certificate of the identity whose signature is going to be verified."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the public key in the certificate is not encoded properly or does not include required parameter information or cannot be used for digital signature purposes."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this object for verification, using the public key from the given certificate. If the certificate is of type X.509 and has a InvalidKeyException is thrown.", "history": "Added in API level 1", "FullName": "public final void initVerify (Certificate certificate)"}, "verify(byte[],int,int)": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."], ["@B_java#lang#IllegalArgumentException_E@", "if the signature byte array is null, or the offset or length is less than 0, or the sum of the offset and length is greater than the length of the signature byte array."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. A call to this method resets this signature object to the state it was in when previously initialized for verification via a call to initVerify(PublicKey). That is, the object is reset and available to verify another signature from the identity whose public key was specified in the call to initVerify.", "history": "Added in API level 1", "FullName": "public final boolean verify (byte[] signature, int offset, int length)"}, "update(byte)": {"Returns": [], "Parameters": [["byte", "byte: the byte to use for the update."]], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified by a byte.", "history": "Added in API level 1", "FullName": "public final void update (byte b)"}, "sign()": {"Returns": [["byte[]", "the signature bytes of the signing operation's result."]], "Parameters": [], "Throws": [["@B_java#security#SignatureException_E@", "if this signature object is not initialized properly or if this signature algorithm is unable to process the input data provided."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the signature bytes of all the data updated. The format of the signature depends on the underlying signature scheme. A call to this method resets this signature object to the state it was in when previously initialized for signing via a call to initSign(PrivateKey). That is, the object is reset and available to generate another signature from the same signer, if desired, via new calls to update and sign.", "history": "Added in API level 1", "FullName": "public final byte[] sign ()"}}, "Inheritance": ["@B_java#security#SignatureSpi_E@"], "ClassName": "java.security.Signature", "ClassDesc": "The Signature class is used to provide applications the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data. The signature algorithm can be, among others, the NIST standard DSA, using DSA and SHA-1. The DSA algorithm using the SHA-1 message digest algorithm can be specified as SHA1withDSA. In the case of RSA, there are multiple choices for the message digest algorithm, so the signing algorithm could be specified as, for example, MD2withRSA, MD5withRSA, or SHA1withRSA. The algorithm name must be specified, as there is no default. A Signature object can be used to generate and verify digital signatures. There are three phases to the use of a Signature object for either signing data or verifying a signature:Note that this class is abstract and extends from SignatureSpi for historical reasons. Application developers should only take notice of the methods defined in this Signature class; all the methods in the superclass are intended for cryptographic service providers who wish to supply their own implementations of digital signature algorithms. Android provides the following Signature algorithms:"}