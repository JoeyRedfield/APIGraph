{"Functions": {"getUnits()": {"Returns": [["@B_java#util#List_E@", "the List of TemporalUnits; not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of units uniquely defining the value of this TemporalAmount. The list of TemporalUnits is defined by the implementation class. The list is a snapshot of the units at the time getUnits is called and is not mutable. The units are ordered from longest duration to the shortest duration of the unit.", "history": "Added in API level 26", "FullName": "public abstract List<TemporalUnit> getUnits ()"}, "subtractFrom(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same observable type with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to subtract the amount from, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to subtract"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Subtracts this object from the specified temporal object. Subtracts the amount from the specified temporal object using the logic encapsulated in the implementing class. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#minus_E@: minus(TemporalAmount), as it is a lot clearer to read in code.", "history": "Added in API level 26", "FullName": "public abstract Temporal subtractFrom (Temporal temporal)"}, "addTo(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same observable type with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to add the amount to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to add"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds to the specified temporal object. Adds the amount to the specified temporal object using the logic encapsulated in the implementing class. There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use @B_java#time#temporal#Temporal#plus_E@: plus(TemporalAmount), as it is a lot clearer to read in code.", "history": "Added in API level 26", "FullName": "public abstract Temporal addTo (Temporal temporal)"}, "get(java.time.temporal.TemporalUnit)": {"Returns": [["long", "the long value of the unit"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the TemporalUnit for which to return the value"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the unit cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested unit. The units returned from @B_java#time#temporal#TemporalAmount#getUnits_E@ uniquely define the value of the TemporalAmount. A value must be returned for each unit listed in getUnits.", "history": "Added in API level 26", "FullName": "public abstract long get (TemporalUnit unit)"}}, "Inheritance": [], "ClassName": "java.time.temporal.TemporalAmount", "ClassDesc": "Framework-level interface defining an amount of time, such as \"6 hours\", \"8 days\" or \"2 years and 3 months\". This is the base interface type for amounts of time. An amount is distinct from a date or time-of-day in that it is not tied to any specific point on the time-line. The amount can be thought of as a Map of @B_java#time#temporal#TemporalUnit_E@ to long, exposed via @B_java#time#temporal#TemporalAmount#getUnits_E@ and @B_java#time#temporal#TemporalAmount#get_E@. A simple case might have a single unit-value pair, such as \"6 hours\". A more complex case may have multiple unit-value pairs, such as \"7 years, 3 months and 5 days\". There are two common implementations. @B_java#time#Period_E@ is a date-based implementation, storing years, months and days. @B_java#time#Duration_E@ is a time-based implementation, storing seconds and nanoseconds, but providing some access using other duration based units such as minutes, hours and fixed 24-hour days. This interface is a framework-level interface that should not be widely used in application code. Instead, applications should create and pass around instances of concrete types, such as Period and Duration."}