{"Functions": {"decrementAndGet(int)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the element at index i.", "history": "Added in API level 1", "FullName": "public final long decrementAndGet (int i)"}, "weakCompareAndSet(int, long, long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, long expect, long update)"}, "incrementAndGet(int)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the element at index i.", "history": "Added in API level 1", "FullName": "public final long incrementAndGet (int i)"}, "getAndSet(int,long)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final long getAndSet (int i, long newValue)"}, "weakCompareAndSet(int,long,long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, long expect, long update)"}, "getAndAdd(int, long)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "added in API level 1", "FullName": "public final long getAndAdd (int i, long delta)"}, "getAndUpdate(int,java.util.function.LongUnaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long getAndUpdate (int i, LongUnaryOperator updateFunction)"}, "getAndIncrement(int)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the element at index i.", "history": "Added in API level 1", "FullName": "public final long getAndIncrement (int i)"}, "set(int,long)": {"Returns": [], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "Added in API level 1", "FullName": "public final void set (int i, long newValue)"}, "lazySet(int,long)": {"Returns": [], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (int i, long newValue)"}, "addAndGet(int,long)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "Added in API level 1", "FullName": "public long addAndGet (int i, long delta)"}, "lazySet(int, long)": {"Returns": [], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "added in API level 9", "FullName": "public final void lazySet (int i, long newValue)"}, "getAndAccumulate(int,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long getAndAccumulate (int i, long x, LongBinaryOperator accumulatorFunction)"}, "AtomicLongArray(int)": {"Returns": [], "Parameters": [["int", "int: the length of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicLongArray of the given length, with all elements initially zero.", "history": "Added in API level 1", "FullName": "public AtomicLongArray (int length)"}, "AtomicLongArray(long[])": {"Returns": [], "Parameters": [["long[]", "long: the array to copy elements from"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicLongArray with the same length as, and all elements copied from, the given array.", "history": "Added in API level 1", "FullName": "public AtomicLongArray (long[] array)"}, "accumulateAndGet(int,long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"], ["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long accumulateAndGet (int i, long x, LongBinaryOperator accumulatorFunction)"}, "compareAndSet(int, long, long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (int i, long expect, long update)"}, "set(int, long)": {"Returns": [], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "added in API level 1", "FullName": "public final void set (int i, long newValue)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current values of array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current values of array.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getAndSet(int, long)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "added in API level 1", "FullName": "public final long getAndSet (int i, long newValue)"}, "get(int)": {"Returns": [["long", "the current value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value at position i.", "history": "Added in API level 1", "FullName": "public final long get (int i)"}, "addAndGet(int, long)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "added in API level 1", "FullName": "public long addAndGet (int i, long delta)"}, "length()": {"Returns": [["int", "the length of the array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the array.", "history": "Added in API level 1", "FullName": "public final int length ()"}, "updateAndGet(int,java.util.function.LongUnaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long updateAndGet (int i, LongUnaryOperator updateFunction)"}, "getAndAdd(int,long)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"], ["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "Added in API level 1", "FullName": "public final long getAndAdd (int i, long delta)"}, "compareAndSet(int,long,long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (int i, long expect, long update)"}, "getAndDecrement(int)": {"Returns": [["long", "the previous value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the element at index i.", "history": "Added in API level 1", "FullName": "public final long getAndDecrement (int i)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicLongArray", "ClassDesc": "A long array in which elements may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables."}