{"Functions": {"setIn(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the new standard input stream."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow reassigning of the standard input stream."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Reassigns the \"standard\" input stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it's ok to reassign the \"standard\" input stream.", "history": "Added in API level 1", "FullName": "public static void setIn (InputStream in)"}, "getProperties()": {"Returns": [["@B_java#util#Properties_E@", "the system properties"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPropertiesAccess method doesn't allow access to the system properties."]], "SeeAlso": ["@B_java#lang#System#setProperties_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkPropertiesAccess_E@", "@B_java#util#Properties_E@"], "Permissions": [], "Description": "Determines the current system properties. The following properties are always provided by the Dalvik VM: Multiple paths in a system property value are separated by the path separator character of the platform. Note that even if the security manager does not permit the getProperties operation, it may choose to permit the @B_java#lang#System#getProperty_E@ operation.", "history": "Added in API level 1", "FullName": "public static Properties getProperties ()"}, "identityHashCode(java.lang.Object)": {"Returns": [["int", "the hashCode"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object for which the hashCode is to be calculated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the same hash code for the given object as would be returned by the default method hashCode(), whether or not the given object's class overrides hashCode(). The hash code for the null reference is zero.", "history": "Added in API level 1", "FullName": "public static int identityHashCode (Object x)"}, "getenv()": {"Returns": [["@B_java#util#Map_E@", "the environment as a map of variable names to values"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method doesn't allow access to the process environment"]], "SeeAlso": ["@B_java#lang#System#getenv_E@", "@B_java#lang#ProcessBuilder#environment_E@"], "Permissions": [], "Description": "Returns an unmodifiable string map view of the current system environment. The environment is a system-dependent mapping from names to values which is passed from parent to child processes. If the system does not support environment variables, an empty map is returned. The returned map will never contain null keys or values. Attempting to query the presence of a null key or value will throw a @B_java#lang#NullPointerException_E@. Attempting to query the presence of a key or value which is not of type @B_java#lang#String_E@ will throw a @B_java#lang#ClassCastException_E@. The returned map and its collection views may not obey the general contract of the @B_java#lang#Object#equals_E@ and @B_java#lang#Object#hashCode_E@ methods. The returned map is typically case-sensitive on all platforms. If a security manager exists, its @B_java#lang#SecurityManager#checkPermission_E@ method is called with a RuntimePermission(\"getenv.*\") permission. This may result in a @B_java#lang#SecurityException_E@ being thrown. When passing information to a Java subprocess,", "history": "Added in API level 1", "FullName": "public static Map<String, String> getenv ()"}, "nanoTime()": {"Returns": [["long", "the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds. This method can only be used to measure elapsed time and is not related to any other notion of system or wall-clock time. The value returned represents nanoseconds since some fixed but arbitrary This method provides nanosecond precision, but not necessarily nanosecond resolution (that is, how frequently the value changes) - no guarantees are made except that the resolution is at least as good as that of @B_java#lang#System#currentTimeMillis_E@. Differences in successive calls that span greater than approximately 292 years (2The values returned by this method become meaningful only when the difference between two such values, obtained within the same instance of a Java virtual machine, is computed. For example, to measure how long some code takes to execute: To compare two nanoTime values t1 - t0 < 0, not t1 < t0, because of the possibility of numerical overflow.", "history": "Added in API level 1", "FullName": "public static long nanoTime ()"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string value of the system property, or null if there is no property with that key."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property."], ["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#setProperty_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkPropertyAccess_E@", "@B_java#lang#System#getProperties_E@"], "Permissions": [], "Description": "Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. This may result in a SecurityException. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.", "history": "Added in API level 1", "FullName": "public static String getProperty (String key)"}, "mapLibraryName(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a platform-dependent native library name."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the library."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if libname is null"]], "SeeAlso": ["@B_java#lang#System#loadLibrary_E@", "@B_java#lang#ClassLoader#findLibrary_E@"], "Permissions": [], "Description": "Maps a library name into a platform-specific string representing a native library.", "history": "Added in API level 1", "FullName": "public static String mapLibraryName (String libname)"}, "setProperties(java.util.Properties)": {"Returns": [], "Parameters": [["@B_java#util#Properties_E@", "Properties no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to set all system properties. Copies all properties from p and discards system properties that are read only and cannot be modified. See @B_java#lang#System#getProperty_E@ for a list of such properties.", "history": "Added in API level 1", "FullName": "public static void setProperties (Properties props)"}, "clearProperty(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the previous string value of the system property, or null if there was no property with that key."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property to be removed."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property."], ["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#getProperty_E@", "@B_java#lang#System#setProperty_E@", "@B_java#util#Properties_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkPropertiesAccess_E@"], "Permissions": [], "Description": "Removes the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, \"write\") permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is removed.", "history": "Added in API level 1", "FullName": "public static String clearProperty (String key)"}, "load(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the file to load."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library"], ["@B_java#lang#UnsatisfiedLinkError_E@", "if either the filename is not an absolute path name, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system."], ["@B_java#lang#NullPointerException_E@", "if filename is null"]], "SeeAlso": ["@B_java#lang#Runtime#load_E@", "@B_java#lang#SecurityManager#checkLink_E@"], "Permissions": [], "Description": "Loads the native library specified by the filename argument. The filename argument must be an absolute path name. If the filename argument, when stripped of any platform-specific library prefix, path, and file extension, indicates a library whose name is, for example, L, and a native library called L is statically linked with the VM, then the JNI_OnLoad_L function exported by the library is invoked rather than attempting to load a dynamic library. A filename matching the argument does not have to exist in the file system. See the JNI Specification for more details. Otherwise, the filename argument is mapped to a native library image in an implementation-dependent manner. The call System.load(name) is effectively equivalent to the call:", "history": "Added in API level 1", "FullName": "public static void load (String filename)"}, "exit(int)": {"Returns": [], "Parameters": [["int", "int: exit status."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkExit method doesn't allow exit with the specified status."]], "SeeAlso": ["@B_java#lang#Runtime#exit_E@"], "Permissions": [], "Description": "Terminates the currently running Java Virtual Machine. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. This method calls the exit method in class Runtime. This method never returns normally. The call System.exit(n) is effectively equivalent to the call:", "history": "Added in API level 1", "FullName": "public static void exit (int status)"}, "runFinalizersOnExit(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: indicating enabling or disabling of finalization"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkExit method doesn't allow the exit."]], "SeeAlso": ["@B_java#lang#Runtime#exit_E@", "@B_java#lang#Runtime#gc_E@", "@B_java#lang#SecurityManager#checkExit_E@"], "Permissions": [], "Description": "This method is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock. Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. If there is a security manager, its checkExit method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void runFinalizersOnExit (boolean value)"}, "setProperty(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the previous value of the system property, or null if it did not have one."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property."], ["@B_java#lang#String_E@", "String: the value of the system property."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow setting of the specified property."], ["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#getProperty_E@", "@B_java#util#PropertyPermission_E@", "@B_java#lang#SecurityManager#checkPermission_E@"], "Permissions": [], "Description": "Sets the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, \"write\") permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is set to the given value.", "history": "Added in API level 1", "FullName": "public static String setProperty (String key, String value)"}, "lineSeparator()": {"Returns": [["@B_java#lang#String_E@", "the system-dependent line separator string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system-dependent line separator string. It always returns the same value - the initial value of the line.separator. On UNIX systems, it returns \"\\n\"; on Microsoft Windows systems it returns \"\\r\\n\".", "history": "Added in API level 19", "FullName": "public static String lineSeparator ()"}, "setSecurityManager(java.lang.SecurityManager)": {"Returns": [], "Parameters": [["@B_java#lang#SecurityManager_E@", "SecurityManager: a security manager"]], "Throws": [["@B_java#lang#SecurityException_E@", "always, unless sm == null"]], "SeeAlso": [], "Permissions": [], "Description": "Throws SecurityException (except in case sm == null). Security managers do SecurityException when passed a non-null SecurityManager", "history": "Added in API level 1", "FullName": "public static void setSecurityManager (SecurityManager s)"}, "getenv(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string value of the variable, or null if the variable is not defined in the system environment"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the environment variable"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name is null"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method doesn't allow access to the environment variable name"]], "SeeAlso": ["@B_java#lang#System#getenv_E@", "@B_java#lang#ProcessBuilder#environment_E@"], "Permissions": [], "Description": "Gets the value of the specified environment variable. An environment variable is a system-dependent external named value. If a security manager exists, its @B_java#lang#SecurityManager#checkPermission_E@ method is called with a RuntimePermission(\"getenv.\"+name) permission. This may result in a @B_java#lang#SecurityException_E@ being thrown. If no exception is thrown the value of the variable name is returned. PATH). On UNIX systems the alphabetic case of name is typically significant, while on Microsoft Windows systems it is typically not. For example, the expression System.getenv(\"FOO\").equals(System.getenv(\"foo\")) is likely to be true on Microsoft Windows.", "history": "Added in API level 1", "FullName": "public static String getenv (String name)"}, "loadLibrary(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the library."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library"], ["@B_java#lang#UnsatisfiedLinkError_E@", "if either the libname argument contains a file path, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system."], ["@B_java#lang#NullPointerException_E@", "if libname is null"]], "SeeAlso": ["@B_java#lang#Runtime#loadLibrary_E@", "@B_java#lang#SecurityManager#checkLink_E@"], "Permissions": [], "Description": "Loads the native library specified by the libname argument. The libname argument must not contain any platform specific prefix, file extension or path. If a native library called libname is statically linked with the VM, then the JNI_OnLoad_libname function exported by the library is invoked. See the JNI Specification for more details. Otherwise, the libname argument is loaded from a system library location and mapped to a native library image in an implementation- dependent manner. The call System.loadLibrary(name) is effectively equivalent to the call", "history": "Added in API level 1", "FullName": "public static void loadLibrary (String libname)"}, "getProperty(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string value of the system property, or the default value if there is no property with that key."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property."], ["@B_java#lang#String_E@", "String: a default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property."], ["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#setProperty_E@", "@B_java#lang#SecurityManager#checkPropertyAccess_E@", "@B_java#lang#System#getProperties_E@"], "Permissions": [], "Description": "Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.", "history": "Added in API level 1", "FullName": "public static String getProperty (String key, String def)"}, "runFinalization()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Runtime#runFinalization_E@"], "Permissions": [], "Description": "Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java Virtual Machine expend effort toward running the finalize methods of objects that have been found to be discarded but whose finalize methods have not yet been run. When control returns from the method call, the Java Virtual Machine has made a best effort to complete all outstanding finalizations. The call System.runFinalization() is effectively equivalent to the call:", "history": "Added in API level 1", "FullName": "public static void runFinalization ()"}, "arraycopy(java.lang.Object,int,java.lang.Object,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the source array."], ["int", "int: starting position in the source array."], ["@B_java#lang#Object_E@", "Object: the destination array."], ["int", "int: starting position in the destination data."], ["int", "int: the number of array elements to be copied."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if copying would cause access of data outside array bounds."], ["@B_java#lang#ArrayStoreException_E@", "if an element in the src array could not be stored into the dest array because of a type mismatch."], ["@B_java#lang#NullPointerException_E@", "if either src or dest is null."]], "SeeAlso": [], "Permissions": [], "Description": "Copies an array from the specified source array, beginning at the specified position, to the specified position of the destination array. A subsequence of array components are copied from the source array referenced by src to the destination array referenced by dest. The number of components copied is equal to the length argument. The components at positions srcPos through srcPos+length-1 in the source array are copied into positions destPos through destPos+length-1, respectively, of the destination array. If the src and dest arguments refer to the same array object, then the copying is performed as if the components at positions srcPos through srcPos+length-1 were first copied to a temporary array with length components and then the contents of the temporary array were copied into positions destPos through destPos+length-1 of the destination array. If dest is null, then a NullPointerException is thrown. If src is null, then a NullPointerException is thrown and the destination array is not modified. Otherwise, if any of the following is true, an ArrayStoreException is thrown and the destination is not modified: The src argument refers to an object that is not an array. The dest argument refers to an object that is not an array. The src argument and dest argument refer to arrays whose component types are different primitive types. The src argument refers to an array with a primitive component type and the dest argument refers to an array with a reference component type. The src argument refers to an array with a reference component type and the dest argument refers to an array with a primitive component type. Otherwise, if any of the following is true, an IndexOutOfBoundsException is thrown and the destination is not modified: The srcPos argument is negative. The destPos argument is negative. The length argument is negative. srcPos+length is greater than src.length, the length of the source array. destPos+length is greater than dest.length, the length of the destination array. Otherwise, if any actual component of the source array from position srcPos through srcPos+length-1 cannot be converted to the component type of the destination array by assignment conversion, an ArrayStoreException is thrown. In this case, let src[srcPos+] cannot be converted to the component type of the destination array; when the exception is thrown, source array components from positions srcPos through srcPos+-1 will already have been copied to destination array positions destPos through destPos+-1 and no other positions of the destination array will have been modified. (Because of the restrictions already itemized, this paragraph effectively applies only to the situation where both arrays have component types that are reference types.)", "history": "Added in API level 1", "FullName": "public static void arraycopy (Object src, int srcPos, Object dest, int destPos, int length)"}, "gc()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Runtime#gc_E@"], "Permissions": [], "Description": "Runs the garbage collector. Calling the gc method suggests that the Java Virtual Machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the Java Virtual Machine has made a best effort to reclaim space from all discarded objects. The call System.gc() is effectively equivalent to the call:", "history": "Added in API level 1", "FullName": "public static void gc ()"}, "getSecurityManager()": {"Returns": [["@B_java#lang#SecurityManager_E@", "null in Android"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Always returns null in Android", "history": "Added in API level 1", "FullName": "public static SecurityManager getSecurityManager ()"}, "inheritedChannel()": {"Returns": [["@B_java#nio#channels#Channel_E@", "The inherited channel, if any, otherwise null."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and it does not permit access to the channel."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the channel inherited from the entity that created this Java virtual machine. This method returns the channel obtained by invoking the @B_java#nio#channels#spi#SelectorProvider#inheritedChannel_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object. In addition to the network-oriented channels described in @B_java#nio#channels#spi#SelectorProvider#inheritedChannel_E@, this method may return other kinds of channels in the future.", "history": "Added in API level 1", "FullName": "public static Channel inheritedChannel ()"}, "setOut(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: the new standard output stream"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow reassigning of the standard output stream."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Reassigns the \"standard\" output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it's ok to reassign the \"standard\" output stream.", "history": "Added in API level 1", "FullName": "public static void setOut (PrintStream out)"}, "console()": {"Returns": [["@B_java#io#Console_E@", "The system console, if any, otherwise null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique @B_java#io#Console_E@ object associated with the current Java virtual machine, if any.", "history": "Added in API level 9", "FullName": "public static Console console ()"}, "currentTimeMillis()": {"Returns": [["long", "the difference, measured in milliseconds, between the current time and midnight, January 1, 1970 UTC."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Date_E@"], "Permissions": [], "Description": "Returns the current time in milliseconds. Note that while the unit of time of the return value is a millisecond, the granularity of the value depends on the underlying operating system and may be larger. For example, many operating systems measure time in units of tens of milliseconds. See the description of the class Date for a discussion of slight discrepancies that may arise between \"computer time\" and coordinated universal time (UTC).", "history": "Added in API level 1", "FullName": "public static long currentTimeMillis ()"}, "setProperty(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the previous value of the system property, or null if it did not have one."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property."], ["@B_java#lang#String_E@", "String: the value of the system property."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow setting of the specified property."], ["@B_java#lang#NullPointerException_E@", "if key or value is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#getProperty_E@", "@B_java#util#PropertyPermission_E@", "@B_java#lang#SecurityManager#checkPermission_E@"], "Permissions": [], "Description": "Sets the system property indicated by the specified key. First, if a security manager exists, its SecurityManager.checkPermission method is called with a PropertyPermission(key, \"write\") permission. This may result in a SecurityException being thrown. If no exception is thrown, the specified property is set to the given value.", "history": "added in API level 1", "FullName": "public static String setProperty (String key, String value)"}, "setErr(java.io.PrintStream)": {"Returns": [], "Parameters": [["@B_java#io#PrintStream_E@", "PrintStream: the new standard error output stream."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method doesn't allow reassigning of the standard error output stream."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkPermission_E@", "@B_java#lang#RuntimePermission_E@"], "Permissions": [], "Description": "Reassigns the \"standard\" error output stream. First, if there is a security manager, its checkPermission method is called with a RuntimePermission(\"setIO\") permission to see if it's ok to reassign the \"standard\" error output stream.", "history": "Added in API level 1", "FullName": "public static void setErr (PrintStream err)"}, "getProperty(java.lang.String, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the string value of the system property, or the default value if there is no property with that key."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the system property."], ["@B_java#lang#String_E@", "String: a default value."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPropertyAccess method doesn't allow access to the specified system property."], ["@B_java#lang#NullPointerException_E@", "if key is null."], ["@B_java#lang#IllegalArgumentException_E@", "if key is empty."]], "SeeAlso": ["@B_java#lang#System#setProperty_E@", "@B_java#lang#SecurityManager#checkPropertyAccess_E@", "@B_java#lang#System#getProperties_E@"], "Permissions": [], "Description": "Gets the system property indicated by the specified key. First, if there is a security manager, its checkPropertyAccess method is called with the key as its argument. If there is no current set of system properties, a set of system properties is first created and initialized in the same manner as for the getProperties method.", "history": "added in API level 1", "FullName": "public static String getProperty (String key, String def)"}}, "Inheritance": [], "ClassName": "java.lang.System", "ClassDesc": "The System class contains several useful class fields and methods. It cannot be instantiated. Among the facilities provided by the System class are standard input, standard output, and error output streams; access to externally defined properties and environment variables; a means of loading files and libraries; and a utility method for quickly copying a portion of an array."}