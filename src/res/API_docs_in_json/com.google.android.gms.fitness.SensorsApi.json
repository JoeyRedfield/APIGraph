{"Functions": {"findDataSources(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.fitness.request.DataSourcesRequest)": {"Returns": [["", "a pending result containing the found data sources."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. It does not need to be connected at the time of this call, but the find operation will be delayed until the connection is complete."], ["@B_com#google#android#gms#fitness#request#DataSourcesRequest_E@", "a built request specifying the data sources we\u2019re interested in finding"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds all available data sources, on the device and remotely. Results are returned asynchronously as a PendingResult. It's not necessary to call this method if an application is interested only in getting the best available data for a data type, regardless of source. In this case, @B_com#google#android#gms#fitness#SensorsApi#add_E@ can be used with a generic @B_com#google#android#gms#fitness#request#SensorRequest#Builder#setDataType_E@.", "history": "", "FullName": "public abstract PendingResult<DataSourcesResult> findDataSources (GoogleApiClient client, DataSourcesRequest request)"}, "remove(com.google.android.gms.common.api.GoogleApiClient, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. Must be connected at the time of this call."], ["PendingIntent", "the PendingIntent that was used in the @B_com#google#android#gms#fitness#SensorsApi#add_E@ request or is equal as defined by @B_android#app#PendingIntent#equals_E@."]], "Throws": [["IllegalStateException", "if client is not connected"]], "SeeAlso": [], "Permissions": [], "Description": "Removes PendingIntent listener from a sensor data source. Should be called whenever live updates are no longer needed.", "history": "", "FullName": "public abstract PendingResult<Status> remove (GoogleApiClient client, PendingIntent pendingIntent)"}, "add(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.fitness.request.SensorRequest, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. It does not need to be connected at the time of this call, but the add operation will be delayed until the connection is complete"], ["@B_com#google#android#gms#fitness#request#SensorRequest_E@", "request specifying the desired data source or data type, as well as the desired parameters for the add request"], ["PendingIntent", "a callback intent to be sent for each new data points."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a @B_android#app#PendingIntent_E@ listener to a sensor data source. This method can be called to listen on live updates from a particular data source, or a data type (in which case a default data source is used). Once the add request succeeds, new data points in the data stream are delivered to the specified intent. Historic data is not delivered, but can be queried via the @B_com#google#android#gms#fitness#HistoryApi_E@. Unlike @B_com#google#android#gms#fitness#SensorsApi#add_E@, which takes a listener and is intended for fast sampling rates while the application is on the foreground, this method is intended for slower sampling rates without the need for an always-on service. The application specifies a PendingIntent callback (typically an IntentService) which will be called when new data points are available in the requested stream. When the PendingIntent is called, the application can use @B_com#google#android#gms#fitness#data#DataPoint#extract_E@ to extract the DataPoint from the intent. See the documentation of @B_android#app#PendingIntent_E@ for more details. Any previously registered requests that have the same PendingIntent (as defined by @B_android#app#PendingIntent#equals_E@) will be replaced by this request.", "history": "", "FullName": "public abstract PendingResult<Status> add (GoogleApiClient client, SensorRequest request, PendingIntent intent)"}, "add(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.fitness.request.SensorRequest, com.google.android.gms.fitness.request.OnDataPointListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. It does not need to be connected at the time of this call, but the add operation will be delayed until the connection is complete"], ["@B_com#google#android#gms#fitness#request#SensorRequest_E@", "request specifying the desired data source or data type, as well as the desired parameters for the add request"], ["@B_com#google#android#gms#fitness#request#OnDataPointListener_E@", "the listener that will be used to respond to events. The listener object should be saved, since it can be used to remove the registration when live events are no longer needed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a data point Once the add request succeeds, new data points in the data stream are delivered to the specified listener. Historic data is not delivered, but can be queried via the @B_com#google#android#gms#fitness#HistoryApi_E@. When the application is closing, or once live data is no longer needed, the listener should be removed. If necessary, the @B_com#google#android#gms#fitness#RecordingApi_E@ can be used to persist data for later querying when the application is re-opened in a battery-efficient manner. This method can be called several times with the same listener to change the desired sampling rate.", "history": "", "FullName": "public abstract PendingResult<Status> add (GoogleApiClient client, SensorRequest request, OnDataPointListener listener)"}, "remove(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.fitness.request.OnDataPointListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. Must be connected at the time of this call."], ["@B_com#google#android#gms#fitness#request#OnDataPointListener_E@", "the listener that was used in the @B_com#google#android#gms#fitness#SensorsApi#add_E@ request."]], "Throws": [["IllegalStateException", "if client is not connected"]], "SeeAlso": [], "Permissions": [], "Description": "Removes a listener from a sensor data source. Should be called whenever live updates are no longer needed, such as when the activity that displays live data is paused, stopped, or destroyed.", "history": "", "FullName": "public abstract PendingResult<Status> remove (GoogleApiClient client, OnDataPointListener listener)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.fitness.SensorsApi", "ClassDesc": "API which exposes different sources of fitness data in local and connected devices, and delivers live events to listeners. The API exposes @B_com#google#android#gms#fitness#data#DataSource_E@ from hardware sensors in the local device and in companion devices. It also exposes data sources from applications. Data sources can be queried via @B_com#google#android#gms#fitness#SensorsApi#findDataSources_E@ The API supports adding and removing listeners to live data streams from any available data source. It also allows for listening on a @B_com#google#android#gms#fitness#data#DataType_E@, in which case the best available data source (or a combination of them) is used. The Sensors API should be used whenever live updates from a sensor stream need to be pushed to the application (for instance, to update a UI). The @B_com#google#android#gms#fitness#HistoryApi_E@ API can be used to query historical data in a pull-based model for scenarios where latency isn't critical. The Sensors API should be accessed from the @B_com#google#android#gms#fitness#Fitness_E@ entry point. Example: @B_com#google#android#gms#fitness#RecordingApi_E@ and @B_com#google#android#gms#fitness#HistoryApi_E@ APIs and should be used instead."}