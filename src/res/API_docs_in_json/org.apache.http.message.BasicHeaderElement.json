{"Functions": {"getParameterCount()": {"Returns": [["", "the number of parameters"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the number of parameters.", "history": "Added in API level 1", "FullName": "public int getParameterCount ()"}, "getParameters()": {"Returns": [["", "parameters as an array of @B_org#apache#http#NameValuePair_E@s"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get parameters, if any. The returned array is created for each invocation and can be modified by the caller without affecting this header element.", "history": "Added in API level 1", "FullName": "public NameValuePair[] getParameters ()"}, "BasicHeaderElement(java.lang.String, java.lang.String, org.apache.http.NameValuePair[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "header element name"], ["@B_java#lang#String_E@", "header element value. May be null"], ["@B_org#apache#http#NameValuePair_E@", "header element parameters. May be null. Parameters are copied by reference, not by value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor with name, value and parameters.", "history": "Added in API level 1", "FullName": "public BasicHeaderElement (String name, String value, NameValuePair[] parameters)"}, "getName()": {"Returns": [["", "String name The name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "getParameterByName(java.lang.String)": {"Returns": [["", "NameValuePair parameter with the given name"]], "Parameters": [["@B_java#lang#String_E@", "The name to search by."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns parameter with the given name, if found. Otherwise null is returned", "history": "Added in API level 1", "FullName": "public NameValuePair getParameterByName (String name)"}, "toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getValue()": {"Returns": [["", "String value The current value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value.", "history": "Added in API level 1", "FullName": "public String getValue ()"}, "getParameter(int)": {"Returns": [["", "the parameter with the given index"]], "Parameters": [["int", "the index of the parameter, 0-based"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the parameter with the given index.", "history": "Added in API level 1", "FullName": "public NameValuePair getParameter (int index)"}, "equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this Object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare this instance with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See equals method. The general contract for the equals and @B_java#lang#Object#hashCode_E@ methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them.", "history": "Added in API level 1", "FullName": "public boolean equals (Object object)"}, "clone()": {"Returns": [["", "a copy of this object."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this Object. The default implementation returns a so-called \"shallow\" copy: It creates a new instance of the same class and then copies the field values (including object references) from this instance to the new instance. A \"deep\" copy, in contrast, would also recursively clone nested objects. A subclass that needs to implement this kind of cloning should call super.clone() to create the new instance and then create deep copies of the nested, mutable objects.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "BasicHeaderElement(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "header element name"], ["@B_java#lang#String_E@", "header element value. May be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor with name and value.", "history": "Added in API level 1", "FullName": "public BasicHeaderElement (String name, String value)"}, "hashCode()": {"Returns": [["", "this object's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an integer hash code for this object. By contract, any two objects for which @B_java#lang#Object#equals_E@ returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See hashCode method.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.message.BasicHeaderElement", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit One element of an HTTP header's value. Some HTTP headers (such as the set-cookie header) have values that can be decomposed into multiple elements. Such headers must be in the following form: Any amount of white space is allowed between any part of the header, element or param and is ignored. A missing value in any element or param will be stored as the empty @B_java#lang#String_E@; if the \"=\" is also missing This class represents an individual header element, containing both a name/value pair (value may be"}