{"Functions": {"setComposingRegion(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, false is returned when the target application does not implement this method."]], "Parameters": [["int", "int: the position in the text at which the composing region begins"], ["int", "int: the position in the text at which the composing region ends"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Mark a certain region of text as composing text. If there was a composing region, the characters are left as they were and the composing span removed, as if @B_android#view#inputmethod#InputConnection#finishComposingText_E@ has been called. The default style for composing text is used. The passed indices are clipped to the contents bounds. If the resulting region is zero-sized, no region is marked and the effect is the same as that of calling @B_android#view#inputmethod#InputConnection#finishComposingText_E@. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end. Since this does not change the contents of the text, editors should not call @B_android#view#inputmethod#InputMethodManager#updateSelection_E@ and IMEs should not receive @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@. This has no impact on the cursor/selection position. It may result in the cursor being anywhere inside or outside the composing region, including cases where the selection and the composing region overlap partially or entirely.", "history": "added in API level 9", "FullName": "public boolean setComposingRegion (int start, int end)"}, "commitText(java.lang.CharSequence,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to commit. This may include styles."], ["int", "int: The new cursor position around the text, in Java characters. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance the cursor to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Commit text to the text box and set the new cursor position. This method removes the contents of the currently composing text and replaces it with the passed CharSequence, and then moves the cursor according to newCursorPosition. If there is no composing text when this method is called, the new text is inserted at the cursor position, removing text inside the selection if any. This behaves like calling @B_android#view#inputmethod#InputConnection#setComposingText_E@ then @B_android#view#inputmethod#InputConnection#finishComposingText_E@. Calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "Added in API level 3", "FullName": "public boolean commitText (CharSequence text, int newCursorPosition)"}, "setComposingText(java.lang.CharSequence, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The composing text with styles if necessary. If no style object attached to the text, the default style for composing text is used. See @B_android#text#Spanned_E@ for how to attach style object to the text. @B_android#text#SpannableString_E@ and @B_android#text#SpannableStringBuilder_E@ are two implementations of the interface @B_android#text#Spanned_E@."], ["int", "int: The new cursor position around the text. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance you to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Replace the currently composing text with the given text, and set the new cursor position. Any composing text set previously will be removed automatically. If there is any composing span currently active, all characters that it comprises are removed. The passed text is added in its place, and a composing span is added to this text. If there is no composing span active, the passed text is added at the cursor position (removing selected characters first if any), and a composing span is added on the new text. Finally, the cursor is moved to the location specified by newCursorPosition. This is usually called by IMEs to add or remove or change characters in the composing span. Calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress. Note that this method can set the cursor position on either edge of the composing text or entirely outside it, but the IME may also go on to move the cursor position to within the composing text in a subsequent call so you should make no assumption at all: the composing text and the selection are entirely independent.", "history": "added in API level 3", "FullName": "public boolean setComposingText (CharSequence text, int newCursorPosition)"}, "clearMetaKeyStates(int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The states to be cleared, may be one or more bits as per @B_android#view#KeyEvent#getMetaState_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Clear the given meta key pressed states in the given input connection. This can be used by the IME to clear the meta key states set by a hardware keyboard with latched meta keys, if the editor keeps track of these.", "history": "Added in API level 3", "FullName": "public boolean clearMetaKeyStates (int states)"}, "performPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "true if the command was sent (whether or not the associated editor understood it), false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#String_E@", "String: Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands."], ["@B_android#os#Bundle_E@", "Bundle: Any data to include with the command."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "API to send private commands from an input method to its connected editor. This can be used to provide domain-specific features that are only known between certain input methods and their clients. Note that because the InputConnection protocol is asynchronous, you have no way to get a result back or know if the client understood the command; you can use the information in @B_android#view#inputmethod#EditorInfo_E@ to determine if a client supports a particular command.", "history": "Added in API level 3", "FullName": "public boolean performPrivateCommand (String action, Bundle data)"}, "getTextAfterCursor(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text after the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get This method may fail either if the input connection has become invalid (such as its process crashing) or the client is taking too long to respond with the text (it is given a couple seconds to return). In either case, null is returned. This method does not affect the text in the editor in any way, nor does it affect the selection or composing spans. If @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@ is supplied as flags, the editor should return a @B_android#text#SpannableString_E@ with all the spans set on the text.", "history": "added in API level 3", "FullName": "public CharSequence getTextAfterCursor (int n, int flags)"}, "performContextMenuAction(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Perform a context menu action on the field. The given id may be one of: @B_android#R#id#selectAll_E@, @B_android#R#id#startSelectingText_E@, @B_android#R#id#stopSelectingText_E@, @B_android#R#id#cut_E@, @B_android#R#id#copy_E@, @B_android#R#id#paste_E@, @B_android#R#id#copyUrl_E@, or @B_android#R#id#switchInputMethod_E@", "history": "Added in API level 3", "FullName": "public boolean performContextMenuAction (int id)"}, "getTextBeforeCursor(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text before the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get This method may fail either if the input connection has become invalid (such as its process crashing) or the editor is taking too long to respond with the text (it is given a couple seconds to return). In either case, null is returned. This method does not affect the text in the editor in any way, nor does it affect the selection or composing spans. If @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@ is supplied as flags, the editor should return a @B_android#text#SpannableString_E@ with all the spans set on the text.", "history": "added in API level 3", "FullName": "public CharSequence getTextBeforeCursor (int n, int flags)"}, "requestCursorUpdates(int)": {"Returns": [["boolean", "true if the request is scheduled. false to indicate that when the application will not call @B_android#view#inputmethod#InputMethodManager#updateCursorAnchorInfo_E@. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false also when the target application does not implement this method."]], "Parameters": [["int", "int: @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_IMMEDIATE_E@ and/or @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_MONITOR_E@. Pass 0 to disable the effect of @B_android#view#inputmethod#InputConnection#CURSOR_UPDATE_MONITOR_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the input method to ask the editor for calling back @B_android#view#inputmethod#InputMethodManager#updateCursorAnchorInfo_E@ to notify cursor/anchor locations.", "history": "Added in API level 21", "FullName": "public boolean requestCursorUpdates (int cursorUpdateMode)"}, "sendKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Send a key event to the process that is currently attached through this input connection. The event will be dispatched like a normal key event, to the currently focused view; this generally is the view that is providing this InputConnection, but due to the asynchronous nature of this protocol that can not be guaranteed and the focus may have changed by the time the event is received. This method can be used to send key events to the application. For example, an on-screen keyboard may use this method to simulate a hardware keyboard. There are three types of standard keyboards, numeric (12-key), predictive (20-key) and ALPHA (QWERTY). You can specify the keyboard type by specify the device id of the key event. You will usually want to set the flag @B_android#view#KeyEvent#FLAG_SOFT_KEYBOARD_E@ on all key event objects you give to this API; the flag will not be set for you. Note that it's discouraged to send such key events in normal operation; this is mainly for use with @B_android#text#InputType#TYPE_NULL_E@ type text fields. Use the @B_android#view#inputmethod#InputConnection#commitText_E@ family of methods to send text to the application instead.", "history": "Added in API level 3", "FullName": "public boolean sendKeyEvent (KeyEvent event)"}, "getTextBeforeCursor(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text before the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get This method may fail either if the input connection has become invalid (such as its process crashing) or the editor is taking too long to respond with the text (it is given a couple seconds to return). In either case, null is returned. This method does not affect the text in the editor in any way, nor does it affect the selection or composing spans. If @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@ is supplied as flags, the editor should return a @B_android#text#SpannableString_E@ with all the spans set on the text.", "history": "Added in API level 3", "FullName": "public CharSequence getTextBeforeCursor (int n, int flags)"}, "commitCompletion(android.view.inputmethod.CompletionInfo)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo: The committed completion."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Commit a completion the user has selected from the possible ones previously reported to @B_android#view#inputmethod#InputMethodSession#displayCompletions_E@ or @B_android#view#inputmethod#InputMethodManager#displayCompletions_E@. This will result in the same behavior as if the user had selected the completion from the actual UI. In all other respects, this behaves like @B_android#view#inputmethod#InputConnection#commitText_E@. @B_android#inputmethodservice#InputMethodService#onDisplayCompletions_E@. @B_android#view#inputmethod#InputMethodSession#displayCompletions_E@ or @B_android#view#inputmethod#InputMethodManager#displayCompletions_E@ then a well-behaved IME should never call this on your input connection, but be ready to deal with misbehaving IMEs without crashing. Calling this method (with a valid @B_android#view#inputmethod#CompletionInfo_E@ object) will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "Added in API level 3", "FullName": "public boolean commitCompletion (CompletionInfo text)"}, "getCursorCapsMode(int)": {"Returns": [["int", "the caps mode flags that are in effect at the current cursor position. See TYPE_TEXT_FLAG_CAPS_* in @B_android#text#InputType_E@."]], "Parameters": [["int", "int: The desired modes to retrieve, as defined by @B_android#text#TextUtils#getCapsMode_E@. These constants are defined so that you can simply pass the current @B_android#view#inputmethod#EditorInfo#inputType_E@ value directly in to here."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current capitalization mode in effect at the current cursor position in the text. See @B_android#text#TextUtils#getCapsMode_E@ for more information. This method may fail either if the input connection has become invalid (such as its process crashing) or the client is taking too long to respond with the text (it is given a couple seconds to return). In either case, 0 is returned. This method does not affect the text in the editor in any way, nor does it affect the selection or composing spans.", "history": "Added in API level 3", "FullName": "public int getCursorCapsMode (int reqModes)"}, "commitCorrection(android.view.inputmethod.CorrectionInfo)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false when the target application does not implement this method."]], "Parameters": [["@B_android#view#inputmethod#CorrectionInfo_E@", "CorrectionInfo: Detailed information about the correction."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Commit a correction automatically performed on the raw user's input. A typical example would be to correct typos using a dictionary. Calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "Added in API level 11", "FullName": "public boolean commitCorrection (CorrectionInfo correctionInfo)"}, "commitText(java.lang.CharSequence, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to commit. This may include styles."], ["int", "int: The new cursor position around the text, in Java characters. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance the cursor to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Commit text to the text box and set the new cursor position. This method removes the contents of the currently composing text and replaces it with the passed CharSequence, and then moves the cursor according to newCursorPosition. If there is no composing text when this method is called, the new text is inserted at the cursor position, removing text inside the selection if any. This behaves like calling @B_android#view#inputmethod#InputConnection#setComposingText_E@ then @B_android#view#inputmethod#InputConnection#finishComposingText_E@. Calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "added in API level 3", "FullName": "public boolean commitText (CharSequence text, int newCursorPosition)"}, "commitContent(android.view.inputmethod.InputContentInfo,int,android.os.Bundle)": {"Returns": [["boolean", "true if this request is accepted by the application, whether the request is already handled or still being handled in background, false otherwise."]], "Parameters": [["@B_android#view#inputmethod#InputContentInfo_E@", "InputContentInfo: Content to be inserted. This value must never be null."], ["int", "int: @B_android#view#inputmethod#InputConnection#INPUT_CONTENT_GRANT_READ_URI_PERMISSION_E@ if the content provider allows @B_android#R#styleable#AndroidManifestProvider_grantUriPermissions_E@ or 0 if the application does not need to call @B_android#view#inputmethod#InputContentInfo#requestPermission_E@."], ["@B_android#os#Bundle_E@", "Bundle: optional bundle data. This can be null. This value may be null."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the input method to commit content such as a PNG image to the editor. In order to avoid a variety of compatibility issues, this focuses on a simple use case, where editors and IMEs are expected to work cooperatively as follows: Editor must keep @B_android#view#inputmethod#EditorInfo#contentMimeTypes_E@ equal to null if it does not support this method at all. Editor can ignore this request when the MIME type specified in inputContentInfo does not match any of @B_android#view#inputmethod#EditorInfo#contentMimeTypes_E@. Editor can ignore the cursor position when inserting the provided content. Editor can return true asynchronously, even before it starts loading the content. Editor should provide a way to delete the content inserted by this method or to revert the effect caused by this method. IME should not call this method when there is any composing text, in case calling this method causes a focus change. IME should grant a permission for the editor to read the content. See @B_android#view#inputmethod#EditorInfo#packageName_E@ about how to obtain the package name of the editor.", "history": "Added in API level 25", "FullName": "public boolean commitContent (InputContentInfo inputContentInfo, int flags, Bundle opts)"}, "closeConnection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the system up to only once to notify that the system is about to invalidate connection between the input method and the application. @B_android#view#inputmethod#InputConnection#beginBatchEdit_E@}. Note that although the system tries to call this method whenever possible, there may be a chance that this method is not called in some exceptional situations. Note: This does nothing when called from input methods.", "history": "Added in API level 24", "FullName": "public void closeConnection ()"}, "deleteSurroundingText(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Delete The lengths are supplied in Java chars, not in code points or in glyphs. Since this method only operates on text before and after the selection, it can't affect the contents of the selection. This may affect the composing span if the span includes characters that are to be deleted, but otherwise will not change it. If some characters in the composing span are deleted, the composing span will persist but get shortened by however many chars inside it have been removed. @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on your service after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "Added in API level 3", "FullName": "public boolean deleteSurroundingText (int beforeLength, int afterLength)"}, "deleteSurroundingTextInCodePoints(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. Returns false when the target application does not implement this method."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code points. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code points. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "A variant of @B_android#view#inputmethod#InputConnection#deleteSurroundingText_E@. Major differences are: The lengths are supplied in code points, not in Java chars or in glyphs.> This method does nothing if there are one or more invalid surrogate pairs in the requested range. @B_android#view#inputmethod#InputConnection#deleteSurroundingText_E@, make sure to do nothing when one ore more invalid surrogate pairs are found in the requested range.", "history": "added in API level 24", "FullName": "public boolean deleteSurroundingTextInCodePoints (int beforeLength, int afterLength)"}, "deleteSurroundingTextInCodePoints(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. Returns false when the target application does not implement this method."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code points. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code points. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "A variant of @B_android#view#inputmethod#InputConnection#deleteSurroundingText_E@. Major differences are: The lengths are supplied in code points, not in Java chars or in glyphs.> This method does nothing if there are one or more invalid surrogate pairs in the requested range. @B_android#view#inputmethod#InputConnection#deleteSurroundingText_E@, make sure to do nothing when one ore more invalid surrogate pairs are found in the requested range.", "history": "Added in API level 24", "FullName": "public boolean deleteSurroundingTextInCodePoints (int beforeLength, int afterLength)"}, "deleteSurroundingText(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: The number of characters before the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the beginning of the text and the cursor, then this method does not fail but deletes all the characters in that range."], ["int", "int: The number of characters after the cursor to be deleted, in code unit. If this is greater than the number of existing characters between the cursor and the end of the text, then this method does not fail but deletes all the characters in that range."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Delete The lengths are supplied in Java chars, not in code points or in glyphs. Since this method only operates on text before and after the selection, it can't affect the contents of the selection. This may affect the composing span if the span includes characters that are to be deleted, but otherwise will not change it. If some characters in the composing span are deleted, the composing span will persist but get shortened by however many chars inside it have been removed. @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on your service after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress.", "history": "added in API level 3", "FullName": "public boolean deleteSurroundingText (int beforeLength, int afterLength)"}, "setTarget(android.view.inputmethod.InputConnection)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputConnection_E@", "InputConnection: the @B_android#view#inputmethod#InputConnection_E@ to be proxied."]], "Throws": [["@B_java#lang#SecurityException_E@", "when this wrapper has non-null target and is immutable."]], "SeeAlso": [], "Permissions": [], "Description": "Change the target of the input connection. (InputConnection) null in some places, you cannot emulate such a behavior by non-null @B_android#view#inputmethod#InputConnectionWrapper_E@ that has null in target.", "history": "Added in API level 3", "FullName": "public void setTarget (InputConnection target)"}, "getHandler()": {"Returns": [["@B_android#os#Handler_E@", "null to use the default @B_android#os#Handler_E@."]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Called by the @B_android#view#inputmethod#InputMethodManager_E@ to enable application developers to specify a dedicated @B_android#os#Handler_E@ on which incoming IPC method calls from input methods will be dispatched. Note: This does nothing when called from input methods.", "history": "Added in API level 24", "FullName": "public Handler getHandler ()"}, "reportFullscreenMode(boolean)": {"Returns": [["boolean", "For editor authors, the return value will always be ignored. For IME authors, this always returns true on @B_android#os#Build#VERSION_CODES#N_MR1_E@ and prior devices and false on @B_android#os#Build#VERSION_CODES#O_E@ and later devices."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Called back when the connected IME switches between fullscreen and normal modes. Note: On @B_android#os#Build#VERSION_CODES#O_E@ and later devices, input methods are no longer allowed to directly call this method at any time. To signal this event in the target application, input methods should always call @B_android#inputmethodservice#InputMethodService#updateFullscreenMode_E@ instead. This approach should work on API @B_android#os#Build#VERSION_CODES#N_MR1_E@ and prior devices.", "history": "Added in API level 3", "FullName": "public boolean reportFullscreenMode (boolean enabled)"}, "setComposingText(java.lang.CharSequence,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The composing text with styles if necessary. If no style object attached to the text, the default style for composing text is used. See @B_android#text#Spanned_E@ for how to attach style object to the text. @B_android#text#SpannableString_E@ and @B_android#text#SpannableStringBuilder_E@ are two implementations of the interface @B_android#text#Spanned_E@."], ["int", "int: The new cursor position around the text. If > 0, this is relative to the end of the text - 1; if <= 0, this is relative to the start of the text. So a value of 1 will always advance you to the position after the full text being inserted. Note that this means you can't position the cursor within the text, because the editor can make modifications to the text you are providing so it is not possible to correctly specify locations there."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Replace the currently composing text with the given text, and set the new cursor position. Any composing text set previously will be removed automatically. If there is any composing span currently active, all characters that it comprises are removed. The passed text is added in its place, and a composing span is added to this text. If there is no composing span active, the passed text is added at the cursor position (removing selected characters first if any), and a composing span is added on the new text. Finally, the cursor is moved to the location specified by newCursorPosition. This is usually called by IMEs to add or remove or change characters in the composing span. Calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress. Note that this method can set the cursor position on either edge of the composing text or entirely outside it, but the IME may also go on to move the cursor position to within the composing text in a subsequent call so you should make no assumption at all: the composing text and the selection are entirely independent.", "history": "Added in API level 3", "FullName": "public boolean setComposingText (CharSequence text, int newCursorPosition)"}, "setSelection(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: the character index where the selection should start."], ["int", "int: the character index where the selection should end."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the selection of the text editor. To set the cursor position, start and end should have the same value. Since this moves the cursor, calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress. This has no effect on the composing region which must stay unchanged. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end.", "history": "Added in API level 3", "FullName": "public boolean setSelection (int start, int end)"}, "finishComposingText()": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Have the text editor finish whatever composing text is currently active. This simply leaves the text as-is, removing any special composing styling or other state that was around it. The cursor position remains unchanged.", "history": "Added in API level 3", "FullName": "public boolean finishComposingText ()"}, "getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)": {"Returns": [["@B_android#view#inputmethod#ExtractedText_E@", "an @B_android#view#inputmethod#ExtractedText_E@ object describing the state of the text view and containing the extracted text itself, or null if the input connection is no longer valid of the editor can't comply with the request for some reason."]], "Parameters": [["@B_android#view#inputmethod#ExtractedTextRequest_E@", "ExtractedTextRequest: Description of how the text should be returned. @B_android#view#inputmethod#ExtractedTextRequest_E@"], ["int", "int: Additional options to control the client, either 0 or @B_android#view#inputmethod#InputConnection#GET_EXTRACTED_TEXT_MONITOR_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current text in the input connection's editor, and monitor for any changes to it. This function returns with the current text, and optionally the input connection can send updates to the input method when its text changes. This method may fail either if the input connection has become invalid (such as its process crashing) or the client is taking too long to respond with the text (it is given a couple seconds to return). In either case, null is returned. Editor authors: as a general rule, try to comply with the fields in request for how many chars to return, but if performance or convenience dictates otherwise, please feel free to do what is most appropriate for your case. Also, if the @B_android#view#inputmethod#InputConnection#GET_EXTRACTED_TEXT_MONITOR_E@ flag is set, you should be calling @B_android#view#inputmethod#InputMethodManager#updateExtractedText_E@ whenever you call @B_android#view#inputmethod#InputMethodManager#updateSelection_E@.", "history": "Added in API level 3", "FullName": "public ExtractedText getExtractedText (ExtractedTextRequest request, int flags)"}, "setSelection(int, int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: the character index where the selection should start."], ["int", "int: the character index where the selection should end."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the selection of the text editor. To set the cursor position, start and end should have the same value. Since this moves the cursor, calling this method will cause the editor to call @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ on the current IME after the batch input is over. @B_android#view#inputmethod#InputMethodManager#updateSelection_E@, but be careful to wait until the batch edit is over if one is in progress. This has no effect on the composing region which must stay unchanged. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end.", "history": "added in API level 3", "FullName": "public boolean setSelection (int start, int end)"}, "endBatchEdit()": {"Returns": [["boolean", "true if there is still a batch edit in progress after closing the latest one (in other words, if the nesting count is > 0), false otherwise or if the input connection is no longer valid."]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Tell the editor that you are done with a batch edit previously initiated with @B_android#view#inputmethod#InputConnection#beginBatchEdit_E@. This ends the latest batch only. @B_android#view#inputmethod#InputConnection#beginBatchEdit_E@.", "history": "Added in API level 3", "FullName": "public boolean endBatchEdit ()"}, "beginBatchEdit()": {"Returns": [["boolean", "true if a batch edit is now in progress, false otherwise. Since this method starts a batch edit, that means it will always return true unless the input connection is no longer valid."]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Tell the editor that you are starting a batch of editor operations. The editor will try to avoid sending you updates about its state until @B_android#view#inputmethod#InputConnection#endBatchEdit_E@ is called. Batch edits nest. @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@ corresponding to intermediate state. Also, use this to avoid flickers that may arise from displaying intermediate state. Be sure to call @B_android#view#inputmethod#InputConnection#endBatchEdit_E@ for each call to this, or you may block updates in the editor.", "history": "Added in API level 3", "FullName": "public boolean beginBatchEdit ()"}, "setComposingRegion(int,int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid. In @B_android#os#Build#VERSION_CODES#N_E@ and later, false is returned when the target application does not implement this method."]], "Parameters": [["int", "int: the position in the text at which the composing region begins"], ["int", "int: the position in the text at which the composing region ends"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Mark a certain region of text as composing text. If there was a composing region, the characters are left as they were and the composing span removed, as if @B_android#view#inputmethod#InputConnection#finishComposingText_E@ has been called. The default style for composing text is used. The passed indices are clipped to the contents bounds. If the resulting region is zero-sized, no region is marked and the effect is the same as that of calling @B_android#view#inputmethod#InputConnection#finishComposingText_E@. The order of start and end is not important. In effect, the region from start to end and the region from end to start is the same. Editor authors, be ready to accept a start that is greater than end. Since this does not change the contents of the text, editors should not call @B_android#view#inputmethod#InputMethodManager#updateSelection_E@ and IMEs should not receive @B_android#inputmethodservice#InputMethodService#onUpdateSelection_E@. This has no impact on the cursor/selection position. It may result in the cursor being anywhere inside or outside the composing region, including cases where the selection and the composing region overlap partially or entirely.", "history": "Added in API level 9", "FullName": "public boolean setComposingRegion (int start, int end)"}, "performEditorAction(int)": {"Returns": [["boolean", "true on success, false if the input connection is no longer valid."]], "Parameters": [["int", "int: This must be one of the action constants for @B_android#view#inputmethod#EditorInfo#imeOptions_E@, such as @B_android#view#inputmethod#EditorInfo#IME_ACTION_GO_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Have the editor perform an action it has said it can do. This is typically used by IMEs when the user presses the key associated with the action.", "history": "Added in API level 3", "FullName": "public boolean performEditorAction (int editorAction)"}, "InputConnectionWrapper(android.view.inputmethod.InputConnection,boolean)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#InputConnection_E@", "InputConnection: the @B_android#view#inputmethod#InputConnection_E@ to be proxied."], ["boolean", "boolean: set true to protect this object from being reconfigured to target another @B_android#view#inputmethod#InputConnection_E@. Note that this is ignored while the target is null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a wrapper. (InputConnection) null in some places, you cannot emulate such a behavior by non-null @B_android#view#inputmethod#InputConnectionWrapper_E@ that has null in target.", "history": "Added in API level 3", "FullName": "public InputConnectionWrapper (InputConnection target, boolean mutable)"}, "getTextAfterCursor(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text after the cursor position; the length of the returned text might be less than n."]], "Parameters": [["int", "int: The expected length of the text."], ["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get This method may fail either if the input connection has become invalid (such as its process crashing) or the client is taking too long to respond with the text (it is given a couple seconds to return). In either case, null is returned. This method does not affect the text in the editor in any way, nor does it affect the selection or composing spans. If @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@ is supplied as flags, the editor should return a @B_android#text#SpannableString_E@ with all the spans set on the text.", "history": "Added in API level 3", "FullName": "public CharSequence getTextAfterCursor (int n, int flags)"}, "getSelectedText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the text that is currently selected, if any, or null if no text is selected. In @B_android#os#Build#VERSION_CODES#N_E@ and later, returns false when the target application does not implement this method."]], "Parameters": [["int", "int: Supplies additional options controlling how the text is returned. May be either 0 or @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the target is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the selected text, if any. This method may fail if either the input connection has become invalid (such as its process crashing) or the client is taking too long to respond with the text (it is given a couple of seconds to return). In either case, null is returned. This method must not cause any changes in the editor's state. If @B_android#view#inputmethod#InputConnection#GET_TEXT_WITH_STYLES_E@ is supplied as flags, the editor should return a @B_android#text#SpannableString_E@ with all the spans set on the text.", "history": "Added in API level 9", "FullName": "public CharSequence getSelectedText (int flags)"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.InputConnectionWrapper", "ClassDesc": "Wrapper class for proxying calls to another InputConnection. Subclass and have fun!"}