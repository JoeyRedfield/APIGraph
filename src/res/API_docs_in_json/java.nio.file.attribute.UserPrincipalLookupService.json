{"Functions": {"UserPrincipalLookupService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected UserPrincipalLookupService ()"}, "lookupPrincipalByName(java.lang.String)": {"Returns": [["@B_java#nio#file#attribute#UserPrincipal_E@", "a user principal"]], "Parameters": [["@B_java#lang#String_E@", "String: the string representation of the user principal to lookup"]], "Throws": [["@B_java#nio#file#attribute#UserPrincipalNotFoundException_E@", "the principal does not exist"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it checks @B_java#lang#RuntimePermission_E@(\"lookupUserInformation\")"]], "SeeAlso": [], "Permissions": [], "Description": "Lookup a user principal by name.", "history": "Added in API level 26", "FullName": "public abstract UserPrincipal lookupPrincipalByName (String name)"}, "lookupPrincipalByGroupName(java.lang.String)": {"Returns": [["@B_java#nio#file#attribute#GroupPrincipal_E@", "a group principal"]], "Parameters": [["@B_java#lang#String_E@", "String: the string representation of the group to lookup"]], "Throws": [["@B_java#nio#file#attribute#UserPrincipalNotFoundException_E@", "the principal does not exist or is not a group"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "In the case of the default provider, and a security manager is installed, it checks @B_java#lang#RuntimePermission_E@(\"lookupUserInformation\")"]], "SeeAlso": [], "Permissions": [], "Description": "Lookup a group principal by group name. Where an implementation does not support any notion of group then this method always throws @B_java#nio#file#attribute#UserPrincipalNotFoundException_E@. Where the namespace for user accounts and groups is the same, then this method is identical to invoking @B_java#nio#file#attribute#UserPrincipalLookupService#lookupPrincipalByName_E@.", "history": "Added in API level 26", "FullName": "public abstract GroupPrincipal lookupPrincipalByGroupName (String group)"}}, "Inheritance": [], "ClassName": "java.nio.file.attribute.UserPrincipalLookupService", "ClassDesc": "An object to lookup user and group principals by name. A @B_java#nio#file#attribute#UserPrincipal_E@ represents an identity that may be used to determine access rights to objects in a file system. A @B_java#nio#file#attribute#GroupPrincipal_E@ represents a group identity. A UserPrincipalLookupService defines methods to lookup identities by name or group name (which are typically user or account names). Whether names and group names are case sensitive or not depends on the implementation. The exact definition of a group is implementation specific but typically a group represents an identity created for administrative purposes so as to determine the access rights for the members of the group. In particular it is implementation specific if the namespace for names and groups is the same or is distinct. To ensure consistent and correct behavior across platforms it is recommended that this API be used as if the namespaces are distinct. In other words, the @B_java#nio#file#attribute#UserPrincipalLookupService#lookupPrincipalByName_E@ should be used to lookup users, and @B_java#nio#file#attribute#UserPrincipalLookupService#lookupPrincipalByGroupName_E@ should be used to lookup groups."}