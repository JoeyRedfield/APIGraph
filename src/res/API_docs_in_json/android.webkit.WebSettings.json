{"Functions": {"getJavaScriptCanOpenWindowsAutomatically()": {"Returns": [["boolean", "true if JavaScript can open windows automatically during window.open()"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setJavaScriptCanOpenWindowsAutomatically_E@"], "Permissions": [], "Description": "Gets whether JavaScript can open windows automatically.", "history": "Added in API level 1", "FullName": "public abstract boolean getJavaScriptCanOpenWindowsAutomatically ()"}, "enableSmoothTransition()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setEnableSmoothTransition_E@"], "Permissions": [], "Description": "This method is now obsolete, and will become a no-op in future. Gets whether the WebView enables smooth transition while panning or zooming.", "history": "Added in API level 11 Deprecated in API level 17", "FullName": "public abstract boolean enableSmoothTransition ()"}, "setLightTouchEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "From @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ this setting is obsolete and has no effect. Enables using light touches to make a selection and activate mouseovers.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public abstract void setLightTouchEnabled (boolean enabled)"}, "getLoadsImagesAutomatically()": {"Returns": [["boolean", "true if the WebView loads image resources"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setLoadsImagesAutomatically_E@"], "Permissions": [], "Description": "Gets whether the WebView loads image resources. This includes images embedded using the data URI scheme.", "history": "Added in API level 1", "FullName": "public abstract boolean getLoadsImagesAutomatically ()"}, "setBlockNetworkLoads(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true means block network loads by the WebView"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebView#reload_E@"], "Permissions": ["@B_android#Manifest#permission#INTERNET_E@"], "Description": "Sets whether the WebView should not load resources from the network. Use @B_android#webkit#WebSettings#setBlockNetworkImage_E@ to only avoid loading image resources. Note that if the value of this setting is changed from true to false, network resources referenced by content currently displayed by the WebView are not fetched until @B_android#webkit#WebView#reload_E@ is called. If the application does not have the @B_android#Manifest#permission#INTERNET_E@ permission, attempts to set a value of false will cause a @B_java#lang#SecurityException_E@ to be thrown. The default value is false if the application has the @B_android#Manifest#permission#INTERNET_E@ permission, otherwise it is true.", "history": "Added in API level 8", "FullName": "public abstract void setBlockNetworkLoads (boolean flag)"}, "setForceDark(int)": {"Returns": [], "Parameters": [["int", "int: the force dark mode to set. Value is @B_android#webkit#WebSettings#FORCE_DARK_OFF_E@, @B_android#webkit#WebSettings#FORCE_DARK_AUTO_E@, or @B_android#webkit#WebSettings#FORCE_DARK_ON_E@"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#getForceDark_E@"], "Permissions": [], "Description": "Set the force dark mode for this WebView.", "history": "Added in API level 29", "FullName": "public void setForceDark (int forceDark)"}, "setDomStorageEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the WebView should use the DOM storage API"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the DOM storage API is enabled. The default value is false.", "history": "Added in API level 7", "FullName": "public abstract void setDomStorageEnabled (boolean flag)"}, "supportZoom()": {"Returns": [["boolean", "true if the WebView supports zoom"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSupportZoom_E@"], "Permissions": [], "Description": "Gets whether the WebView supports zoom.", "history": "Added in API level 1", "FullName": "public abstract boolean supportZoom ()"}, "setGeolocationDatabasePath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a path to the directory where databases should be saved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Geolocation database are managed by the implementation and calling this method will have no effect. Sets the path where the Geolocation databases should be saved. In order for Geolocation permissions and cached positions to be persisted, this method must be called with a path to which the application can write.", "history": "Added in API level 5 Deprecated in API level 24", "FullName": "public abstract void setGeolocationDatabasePath (String databasePath)"}, "getFixedFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the fixed font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setFixedFontFamily_E@"], "Permissions": [], "Description": "Gets the fixed font family name.", "history": "Added in API level 1", "FullName": "public abstract String getFixedFontFamily ()"}, "getForceDark()": {"Returns": [["int", "the currently set force dark mode. Value is @B_android#webkit#WebSettings#FORCE_DARK_OFF_E@, @B_android#webkit#WebSettings#FORCE_DARK_AUTO_E@, or @B_android#webkit#WebSettings#FORCE_DARK_ON_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setForceDark_E@"], "Permissions": [], "Description": "Get the force dark mode for this WebView. The default force dark mode is @B_android#webkit#WebSettings#FORCE_DARK_AUTO_E@.", "history": "Added in API level 29", "FullName": "public int getForceDark ()"}, "setSerifFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the serif font family name. The default is \"sans-serif\".", "history": "Added in API level 1", "FullName": "public abstract void setSerifFontFamily (String font)"}, "getAllowFileAccessFromFileURLs()": {"Returns": [["boolean", "whether JavaScript running in the context of a file scheme URL can access content from other file scheme URLs"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setAllowFileAccessFromFileURLs_E@"], "Permissions": [], "Description": "Gets whether JavaScript running in the context of a file scheme URL can access content from other file scheme URLs.", "history": "Added in API level 16", "FullName": "public abstract boolean getAllowFileAccessFromFileURLs ()"}, "setNeedInitialFocus(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView needs to set a node"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells the WebView whether it needs to set a node to have focus when @B_android#webkit#WebView#requestFocus_E@ is called. The default value is true.", "history": "Added in API level 1", "FullName": "public abstract void setNeedInitialFocus (boolean flag)"}, "getDatabasePath()": {"Returns": [["@B_java#lang#String_E@", "the String path to the database storage API databases"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDatabasePath_E@"], "Permissions": [], "Description": "Database paths are managed by the implementation this method is obsolete. Gets the path to where database storage API databases are saved.", "history": "Added in API level 5 Deprecated in API level 19", "FullName": "public abstract String getDatabasePath ()"}, "getCacheMode()": {"Returns": [["int", "the current setting for overriding the cache mode Value is @B_android#webkit#WebSettings#LOAD_DEFAULT_E@, @B_android#webkit#WebSettings#LOAD_NORMAL_E@, @B_android#webkit#WebSettings#LOAD_CACHE_ELSE_NETWORK_E@, @B_android#webkit#WebSettings#LOAD_NO_CACHE_E@, or @B_android#webkit#WebSettings#LOAD_CACHE_ONLY_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setCacheMode_E@"], "Permissions": [], "Description": "Gets the current setting for overriding the cache mode.", "history": "Added in API level 1", "FullName": "public abstract int getCacheMode ()"}, "setEnableSmoothTransition(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is now obsolete, and will become a no-op in future. Sets whether the WebView will enable smooth transition while panning or zooming or while the window hosting the WebView does not have focus. If it is true, WebView will choose a solution to maximize the performance. e.g. the WebView's content may not be updated during the transition. If it is false, WebView will keep its fidelity. The default value is false.", "history": "Added in API level 11 Deprecated in API level 17", "FullName": "public abstract void setEnableSmoothTransition (boolean enable)"}, "getMinimumFontSize()": {"Returns": [["int", "a non-negative integer between 1 and 72"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setMinimumFontSize_E@"], "Permissions": [], "Description": "Gets the minimum font size.", "history": "Added in API level 1", "FullName": "public abstract int getMinimumFontSize ()"}, "setAppCacheEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the WebView should enable Application Caches"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the Application Caches API should be enabled. The default is false. Note that in order for the Application Caches API to be enabled, a valid database path must also be supplied to @B_android#webkit#WebSettings#setAppCachePath_E@.", "history": "Added in API level 7", "FullName": "public abstract void setAppCacheEnabled (boolean flag)"}, "setLoadWithOverviewMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView loads pages in overview mode, that is, zooms out the content to fit on screen by width. This setting is taken into account when the content width is greater than the width of the WebView control, for example, when @B_android#webkit#WebSettings#getUseWideViewPort_E@ is enabled. The default is false.", "history": "Added in API level 7", "FullName": "public abstract void setLoadWithOverviewMode (boolean overview)"}, "setLayoutAlgorithm(android.webkit.WebSettings.LayoutAlgorithm)": {"Returns": [], "Parameters": [["@B_android#webkit#WebSettings#LayoutAlgorithm_E@", "WebSettings.LayoutAlgorithm: the layout algorithm to use, as a @B_android#webkit#WebSettings#LayoutAlgorithm_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the underlying layout algorithm. This will cause a re-layout of the WebView. The default is @B_android#webkit#WebSettings#LayoutAlgorithm#NARROW_COLUMNS_E@.", "history": "Added in API level 1", "FullName": "public abstract void setLayoutAlgorithm (WebSettings.LayoutAlgorithm l)"}, "getOffscreenPreRaster()": {"Returns": [["boolean", "true if this WebView will raster tiles when it is offscreen but attached to a window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this WebView should raster tiles when it is offscreen but attached to a window.", "history": "Added in API level 23", "FullName": "public abstract boolean getOffscreenPreRaster ()"}, "setDatabaseEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the WebView should use the database storage API"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the database storage API is enabled. The default value is false. See also @B_android#webkit#WebSettings#setDatabasePath_E@ for how to correctly set up the database storage API. This setting is global in effect, across all WebView instances in a process. Note you should only modify this setting prior to making", "history": "Added in API level 5", "FullName": "public abstract void setDatabaseEnabled (boolean flag)"}, "getDatabaseEnabled()": {"Returns": [["boolean", "true if the database storage API is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDatabaseEnabled_E@"], "Permissions": [], "Description": "Gets whether the database storage API is enabled.", "history": "Added in API level 5", "FullName": "public abstract boolean getDatabaseEnabled ()"}, "getNavDump()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether dumping the navigation cache is enabled.", "history": "Since: API Level 1", "FullName": "public boolean getNavDump ()"}, "setFantasyFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fantasy font family name. The default is \"fantasy\".", "history": "Added in API level 1", "FullName": "public abstract void setFantasyFontFamily (String font)"}, "setAllowFileAccess(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables file access within WebView. File access is enabled by default. Note that this enables or disables file system access only. Assets and resources are still accessible using file:///android_asset and file:///android_res.", "history": "Added in API level 3", "FullName": "public abstract void setAllowFileAccess (boolean allow)"}, "setSavePassword(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Saving passwords in WebView will not be supported in future versions. Sets whether the WebView should save passwords. The default is true.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public abstract void setSavePassword (boolean save)"}, "getUserAgentString()": {"Returns": [["@B_java#lang#String_E@", "the WebView's user-agent string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setUserAgentString_E@"], "Permissions": [], "Description": "Gets the WebView's user-agent string.", "history": "Added in API level 3", "FullName": "public abstract String getUserAgentString ()"}, "getBlockNetworkImage()": {"Returns": [["boolean", "true if the WebView does not load image resources from the network"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setBlockNetworkImage_E@"], "Permissions": [], "Description": "Gets whether the WebView does not load image resources from the network.", "history": "Added in API level 1", "FullName": "public abstract boolean getBlockNetworkImage ()"}, "setMinimumFontSize(int)": {"Returns": [], "Parameters": [["int", "int: a non-negative integer between 1 and 72. Any number outside the specified range will be pinned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum font size. The default is 8.", "history": "Added in API level 1", "FullName": "public abstract void setMinimumFontSize (int size)"}, "setAppCacheMaxSize(long)": {"Returns": [], "Parameters": [["long", "long: the maximum size in bytes"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "In future quota will be managed automatically. Sets the maximum size for the Application Cache content. The passed size will be rounded to the nearest value that the database can support, so this should be viewed as a guide, not a hard limit. Setting the size to a value less than current database size does not cause the database to be trimmed. The default size is @B_java#lang#Long#MAX_VALUE_E@. It is recommended to leave the maximum size set to the default value.", "history": "Added in API level 7 Deprecated in API level 18", "FullName": "public abstract void setAppCacheMaxSize (long appCacheMaxSize)"}, "getDisplayZoomControls()": {"Returns": [["boolean", "true if the WebView displays on-screen zoom controls when using the built-in zoom mechanisms"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDisplayZoomControls_E@"], "Permissions": [], "Description": "Gets whether the WebView displays on-screen zoom controls when using the built-in zoom mechanisms.", "history": "Added in API level 11", "FullName": "public abstract boolean getDisplayZoomControls ()"}, "getDomStorageEnabled()": {"Returns": [["boolean", "true if the DOM Storage APIs are enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDomStorageEnabled_E@"], "Permissions": [], "Description": "Gets whether the DOM Storage APIs are enabled.", "history": "Added in API level 7", "FullName": "public abstract boolean getDomStorageEnabled ()"}, "getAllowFileAccess()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setAllowFileAccess_E@"], "Permissions": [], "Description": "Gets whether this WebView supports file access.", "history": "Added in API level 3", "FullName": "public abstract boolean getAllowFileAccess ()"}, "setUserAgent(int)": {"Returns": [], "Parameters": [["int", "0 if the WebView should use an Android user-agent string, 1 if the WebView should use a desktop user-agent string"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells the WebView about user-agent string.", "history": "Since: API Level 1", "FullName": "public synchronized void setUserAgent (int ua)"}, "setSansSerifFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the sans-serif font family name. The default is \"sans-serif\".", "history": "Added in API level 1", "FullName": "public abstract void setSansSerifFontFamily (String font)"}, "setDatabasePath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a path to the directory where databases should be saved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Database paths are managed by the implementation and calling this method will have no effect. Sets the path to where database storage API databases should be saved. In order for the database storage API to function correctly, this method must be called with a path to which the application can write. This method should only be called once: repeated calls are ignored.", "history": "Added in API level 5 Deprecated in API level 19", "FullName": "public abstract void setDatabasePath (String databasePath)"}, "getPluginsPath()": {"Returns": [["", "an empty string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the directory that contains the plugin libraries. This method is obsolete since each plugin is now loaded from its own package.", "history": "Added in API level 1", "FullName": "public synchronized String getPluginsPath ()"}, "getSavePassword()": {"Returns": [["boolean", "whether the WebView saves passwords"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSavePassword_E@"], "Permissions": [], "Description": "Saving passwords in WebView will not be supported in future versions. Gets whether the WebView saves passwords.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public abstract boolean getSavePassword ()"}, "getDefaultFontSize()": {"Returns": [["int", "a non-negative integer between 1 and 72"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDefaultFontSize_E@"], "Permissions": [], "Description": "Gets the default font size.", "history": "Added in API level 1", "FullName": "public abstract int getDefaultFontSize ()"}, "setCursiveFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the cursive font family name. The default is \"cursive\".", "history": "Added in API level 1", "FullName": "public abstract void setCursiveFontFamily (String font)"}, "getUseWideViewPort()": {"Returns": [["boolean", "true if the WebView supports the viewport meta tag"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setUseWideViewPort_E@"], "Permissions": [], "Description": "Gets whether the WebView supports the \"viewport\" HTML meta tag or will use a wide viewport.", "history": "Added in API level 1", "FullName": "public abstract boolean getUseWideViewPort ()"}, "setTextSize(android.webkit.WebSettings.TextSize)": {"Returns": [], "Parameters": [["@B_android#webkit#WebSettings#TextSize_E@", "WebSettings.TextSize: the text size as a @B_android#webkit#WebSettings#TextSize_E@ value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#webkit#WebSettings#setTextZoom_E@ instead. Sets the text size of the page. The default is @B_android#webkit#WebSettings#TextSize#NORMAL_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setTextSize (WebSettings.TextSize t)"}, "setMixedContentMode(int)": {"Returns": [], "Parameters": [["int", "int: The mixed content mode to use. One of @B_android#webkit#WebSettings#MIXED_CONTENT_NEVER_ALLOW_E@, @B_android#webkit#WebSettings#MIXED_CONTENT_ALWAYS_ALLOW_E@ or @B_android#webkit#WebSettings#MIXED_CONTENT_COMPATIBILITY_MODE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configures the WebView's behavior when a secure origin attempts to load a resource from an insecure origin. By default, apps that target @B_android#os#Build#VERSION_CODES#KITKAT_E@ or below default to @B_android#webkit#WebSettings#MIXED_CONTENT_ALWAYS_ALLOW_E@. Apps targeting @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@ default to @B_android#webkit#WebSettings#MIXED_CONTENT_NEVER_ALLOW_E@. The preferred and most secure mode of operation for the WebView is @B_android#webkit#WebSettings#MIXED_CONTENT_NEVER_ALLOW_E@ and use of @B_android#webkit#WebSettings#MIXED_CONTENT_ALWAYS_ALLOW_E@ is strongly discouraged.", "history": "Added in API level 21", "FullName": "public abstract void setMixedContentMode (int mode)"}, "setSaveFormData(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "In Android O and afterwards, this function does not have any effect, the form data will be saved to platform's autofill service if applicable. Sets whether the WebView should save form data. In Android O, the platform has implemented a fully functional Autofill feature to store form data. Therefore, the Webview form data save feature is disabled. Note that the feature will continue to be supported on older versions of Android as before.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public abstract void setSaveFormData (boolean save)"}, "setAllowContentAccess(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables content URL access within WebView. Content URL access allows WebView to load content from a content provider installed in the system. The default is enabled.", "history": "Added in API level 11", "FullName": "public abstract void setAllowContentAccess (boolean allow)"}, "setPluginState(android.webkit.WebSettings.PluginState)": {"Returns": [], "Parameters": [["@B_android#webkit#WebSettings#PluginState_E@", "WebSettings.PluginState: a PluginState value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plugins are not supported in API level @B_android#os#Build#VERSION_CODES#KITKAT_E@ or later; enabling plugins is a no-op. Tells the WebView to enable, disable, or have plugins on demand. On demand mode means that if a plugin exists that can handle the embedded content, a placeholder icon will be shown instead of the plugin. When the placeholder is clicked, the plugin will be enabled. The default is @B_android#webkit#WebSettings#PluginState#OFF_E@.", "history": "Added in API level 8 Deprecated in API level 18", "FullName": "public abstract void setPluginState (WebSettings.PluginState state)"}, "getPluginState()": {"Returns": [["@B_android#webkit#WebSettings#PluginState_E@", "the plugin state as a @B_android#webkit#WebSettings#PluginState_E@ value"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setPluginState_E@"], "Permissions": [], "Description": "Plugins are not supported in API level @B_android#os#Build#VERSION_CODES#KITKAT_E@ or later; enabling plugins is a no-op. Gets the current state regarding whether plugins are enabled.", "history": "Added in API level 8 Deprecated in API level 18", "FullName": "public abstract WebSettings.PluginState getPluginState ()"}, "setUseDoubleTree(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controlled a rendering optimization that is no longer present. Setting it now has no effect.", "history": "Since: API Level 1", "FullName": "public synchronized void setUseDoubleTree (boolean use)"}, "setTextZoom(int)": {"Returns": [], "Parameters": [["int", "int: the text zoom in percent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text zoom of the page in percent. The default is 100.", "history": "Added in API level 14", "FullName": "public abstract void setTextZoom (int textZoom)"}, "setOffscreenPreRaster(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this WebView should raster tiles when it is offscreen but attached to a window. Turning this on can avoid rendering artifacts when animating an offscreen WebView on-screen. Offscreen WebViews in this mode use more memory. The default value is false. Please follow these guidelines to limit memory usage: WebView size should be not be larger than the device screen size. Limit use of this mode to a small number of WebViews. Use it for visible WebViews and WebViews about to be animated to visible.", "history": "Added in API level 23", "FullName": "public abstract void setOffscreenPreRaster (boolean enabled)"}, "getLightTouchEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setLightTouchEnabled_E@"], "Permissions": [], "Description": "This setting is obsolete. Gets whether light touches are enabled.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public abstract boolean getLightTouchEnabled ()"}, "setStandardFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the standard font family name. The default is \"sans-serif\".", "history": "Added in API level 1", "FullName": "public abstract void setStandardFontFamily (String font)"}, "getSansSerifFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the sans-serif font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSansSerifFontFamily_E@"], "Permissions": [], "Description": "Gets the sans-serif font family name.", "history": "Added in API level 1", "FullName": "public abstract String getSansSerifFontFamily ()"}, "setLoadsImagesAutomatically(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView should load image resources"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should load image resources. Note that this method controls loading of all images, including those embedded using the data URI scheme. Use @B_android#webkit#WebSettings#setBlockNetworkImage_E@ to control loading only of images specified using network URI schemes. Note that if the value of this setting is changed from false to true, all images resources referenced by content currently displayed by the WebView are loaded automatically. The default is true.", "history": "Added in API level 1", "FullName": "public abstract void setLoadsImagesAutomatically (boolean flag)"}, "getAllowContentAccess()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setAllowContentAccess_E@"], "Permissions": [], "Description": "Gets whether this WebView supports content URL access.", "history": "Added in API level 11", "FullName": "public abstract boolean getAllowContentAccess ()"}, "getFantasyFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the fantasy font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setFantasyFontFamily_E@"], "Permissions": [], "Description": "Gets the fantasy font family name.", "history": "Added in API level 1", "FullName": "public abstract String getFantasyFontFamily ()"}, "getAllowUniversalAccessFromFileURLs()": {"Returns": [["boolean", "whether JavaScript running in the context of a file scheme URL can access content from any origin"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setAllowUniversalAccessFromFileURLs_E@"], "Permissions": [], "Description": "Gets whether JavaScript running in the context of a file scheme URL can access content from any origin. This includes access to content from other file scheme URLs.", "history": "Added in API level 16", "FullName": "public abstract boolean getAllowUniversalAccessFromFileURLs ()"}, "getUseWebViewBackgroundForOverscrollBackground()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setUseWebViewBackgroundForOverscrollBackground_E@"], "Permissions": [], "Description": "Gets whether this WebView uses WebView's background instead of internal pattern for over scroll background.", "history": "Since: API Level 9", "FullName": "public boolean getUseWebViewBackgroundForOverscrollBackground ()"}, "getDisabledActionModeMenuItems()": {"Returns": [["int", "all the disabled menu item flags combined with bitwise OR. Value is either 0 or a combination of @B_android#webkit#WebSettings#MENU_ITEM_NONE_E@, @B_android#webkit#WebSettings#MENU_ITEM_SHARE_E@, @B_android#webkit#WebSettings#MENU_ITEM_WEB_SEARCH_E@, and @B_android#webkit#WebSettings#MENU_ITEM_PROCESS_TEXT_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the action mode menu items that are disabled, expressed in an integer field flag. The default value is @B_android#webkit#WebSettings#MENU_ITEM_NONE_E@", "history": "Added in API level 24", "FullName": "public abstract int getDisabledActionModeMenuItems ()"}, "setDisabledActionModeMenuItems(int)": {"Returns": [], "Parameters": [["int", "int: an integer field flag for the menu items to be disabled. Value is either 0 or a combination of @B_android#webkit#WebSettings#MENU_ITEM_NONE_E@, @B_android#webkit#WebSettings#MENU_ITEM_SHARE_E@, @B_android#webkit#WebSettings#MENU_ITEM_WEB_SEARCH_E@, and @B_android#webkit#WebSettings#MENU_ITEM_PROCESS_TEXT_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the action mode menu items according to menuItems flag.", "history": "Added in API level 24", "FullName": "public abstract void setDisabledActionModeMenuItems (int menuItems)"}, "setBlockNetworkImage(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView should not load image resources from the network"]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setBlockNetworkLoads_E@"], "Permissions": [], "Description": "Sets whether the WebView should not load image resources from the network (resources accessed via http and https URI schemes). Note that this method has no effect unless @B_android#webkit#WebSettings#getLoadsImagesAutomatically_E@ returns true. Also note that disabling all network loads using @B_android#webkit#WebSettings#setBlockNetworkLoads_E@ will also prevent network images from loading, even if this flag is set to false. When the value of this setting is changed from true to false, network images resources referenced by content currently displayed by the WebView are fetched automatically. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setBlockNetworkImage (boolean flag)"}, "setAllowFileAccessFromFileURLs(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from other file scheme URLs. To enable the most restrictive, and therefore secure, policy this setting should be disabled. Note that the value of this setting is ignored if the value of @B_android#webkit#WebSettings#getAllowUniversalAccessFromFileURLs_E@ is true. Note too, that this setting affects only JavaScript access to file scheme resources. Other access to such resources, for example, from image HTML elements, is unaffected. To prevent possible violation of same domain policy when targeting @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_MR1_E@ and earlier, you should explicitly set this value to false. The default value is true for apps targeting @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_MR1_E@ and below, and false when targeting @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ and above.", "history": "Added in API level 16", "FullName": "public abstract void setAllowFileAccessFromFileURLs (boolean flag)"}, "setJavaScriptCanOpenWindowsAutomatically(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if JavaScript can open windows automatically"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells JavaScript to open windows automatically. This applies to the JavaScript function window.open(). The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setJavaScriptCanOpenWindowsAutomatically (boolean flag)"}, "getSafeBrowsingEnabled()": {"Returns": [["boolean", "true if Safe Browsing is enabled and false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether Safe Browsing is enabled. See @B_android#webkit#WebSettings#setSafeBrowsingEnabled_E@.", "history": "Added in API level 26", "FullName": "public abstract boolean getSafeBrowsingEnabled ()"}, "getLoadWithOverviewMode()": {"Returns": [["boolean", "whether this WebView loads pages in overview mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setLoadWithOverviewMode_E@"], "Permissions": [], "Description": "Gets whether this WebView loads pages in overview mode.", "history": "Added in API level 7", "FullName": "public abstract boolean getLoadWithOverviewMode ()"}, "getMinimumLogicalFontSize()": {"Returns": [["int", "a non-negative integer between 1 and 72"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setMinimumLogicalFontSize_E@"], "Permissions": [], "Description": "Gets the minimum logical font size.", "history": "Added in API level 1", "FullName": "public abstract int getMinimumLogicalFontSize ()"}, "setSupportMultipleWindows(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to support multiple windows"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView whether supports multiple windows. If set to true, @B_android#webkit#WebChromeClient#onCreateWindow_E@ must be implemented by the host application. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setSupportMultipleWindows (boolean support)"}, "setMediaPlaybackRequiresUserGesture(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView requires a user gesture to play media"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView requires a user gesture to play media. The default is true.", "history": "Added in API level 17", "FullName": "public abstract void setMediaPlaybackRequiresUserGesture (boolean require)"}, "setAppCachePath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String path to the directory containing Application Caches files."]], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setAppCacheEnabled_E@"], "Permissions": [], "Description": "Sets the path to the Application Caches files. In order for the Application Caches API to be enabled, this method must be called with a path to which the application can write. This method should only be called once: repeated calls are ignored.", "history": "Added in API level 7", "FullName": "public abstract void setAppCachePath (String appCachePath)"}, "getBuiltInZoomControls()": {"Returns": [["boolean", "true if the zoom mechanisms built into WebView are being used"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setBuiltInZoomControls_E@"], "Permissions": [], "Description": "Gets whether the zoom mechanisms built into WebView are being used.", "history": "Added in API level 3", "FullName": "public abstract boolean getBuiltInZoomControls ()"}, "getDefaultZoom()": {"Returns": [["@B_android#webkit#WebSettings#ZoomDensity_E@", "the zoom density"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDefaultZoom_E@"], "Permissions": [], "Description": "Will only return the default value. Gets the default zoom density of the page. This should be called from the UI thread. This setting is not recommended for use in new applications.", "history": "Added in API level 7 Deprecated in API level 19", "FullName": "public abstract WebSettings.ZoomDensity getDefaultZoom ()"}, "getMixedContentMode()": {"Returns": [["int", "The current setting, one of @B_android#webkit#WebSettings#MIXED_CONTENT_NEVER_ALLOW_E@, @B_android#webkit#WebSettings#MIXED_CONTENT_ALWAYS_ALLOW_E@ or @B_android#webkit#WebSettings#MIXED_CONTENT_COMPATIBILITY_MODE_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current behavior of the WebView with regard to loading insecure content from a secure origin.", "history": "Added in API level 21", "FullName": "public abstract int getMixedContentMode ()"}, "getLayoutAlgorithm()": {"Returns": [["@B_android#webkit#WebSettings#LayoutAlgorithm_E@", "the layout algorithm in use, as a @B_android#webkit#WebSettings#LayoutAlgorithm_E@ value"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setLayoutAlgorithm_E@"], "Permissions": [], "Description": "Gets the current layout algorithm.", "history": "Added in API level 1", "FullName": "public abstract WebSettings.LayoutAlgorithm getLayoutAlgorithm ()"}, "setJavaScriptEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the WebView should execute JavaScript"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells the WebView to enable JavaScript execution.", "history": "Added in API level 1", "FullName": "public abstract void setJavaScriptEnabled (boolean flag)"}, "setDefaultZoom(android.webkit.WebSettings.ZoomDensity)": {"Returns": [], "Parameters": [["@B_android#webkit#WebSettings#ZoomDensity_E@", "WebSettings.ZoomDensity: the zoom density"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer supported, see the function documentation for recommended alternatives. Sets the default zoom density of the page. This must be called from the UI thread. The default is @B_android#webkit#WebSettings#ZoomDensity#MEDIUM_E@. This setting is not recommended for use in new applications. If the WebView is utilized to display mobile-oriented pages, the desired effect can be achieved by adjusting 'width' and 'initial-scale' attributes of page's 'meta viewport' tag. For pages lacking the tag, @B_android#webkit#WebView#setInitialScale_E@ and @B_android#webkit#WebSettings#setUseWideViewPort_E@ can be used.", "history": "Added in API level 7 Deprecated in API level 19", "FullName": "public abstract void setDefaultZoom (WebSettings.ZoomDensity zoom)"}, "setUseWideViewPort(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to enable support for the viewport meta tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should enable support for the \"viewport\" HTML meta tag or should use a wide viewport. When the value of the setting is false, the layout width is always set to the width of the WebView control in device-independent (CSS) pixels. When the value is true and the page contains the viewport meta tag, the value of the width specified in the tag is used. If the page does not contain the tag or does not provide a width, then a wide viewport will be used.", "history": "Added in API level 1", "FullName": "public abstract void setUseWideViewPort (boolean use)"}, "setAllowUniversalAccessFromFileURLs(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether JavaScript running in the context of a file scheme URL should be allowed to access content from any origin. This includes access to content from other file scheme URLs. See @B_android#webkit#WebSettings#setAllowFileAccessFromFileURLs_E@. To enable the most restrictive, and therefore secure policy, this setting should be disabled. Note that this setting affects only JavaScript access to file scheme resources. Other access to such resources, for example, from image HTML elements, is unaffected. To prevent possible violation of same domain policy when targeting @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_MR1_E@ and earlier, you should explicitly set this value to false. The default value is true for apps targeting @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_MR1_E@ and below, and false when targeting @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@ and above.", "history": "Added in API level 16", "FullName": "public abstract void setAllowUniversalAccessFromFileURLs (boolean flag)"}, "getBlockNetworkLoads()": {"Returns": [["boolean", "true if the WebView does not load any resources from the network"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setBlockNetworkLoads_E@"], "Permissions": [], "Description": "Gets whether the WebView does not load any resources from the network.", "history": "Added in API level 8", "FullName": "public abstract boolean getBlockNetworkLoads ()"}, "setUserAgentString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: new user-agent string This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the WebView's user-agent string. If the string is null or empty, the system default value will be used. Note that starting from @B_android#os#Build#VERSION_CODES#KITKAT_E@ Android version, changing the user-agent while loading a web page causes WebView to initiate loading once again.", "history": "Added in API level 3", "FullName": "public abstract void setUserAgentString (String ua)"}, "getSaveFormData()": {"Returns": [["boolean", "whether the WebView saves form data"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSaveFormData_E@"], "Permissions": [], "Description": "Gets whether the WebView saves form data.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public abstract boolean getSaveFormData ()"}, "setRenderPriority(android.webkit.WebSettings.RenderPriority)": {"Returns": [], "Parameters": [["@B_android#webkit#WebSettings#RenderPriority_E@", "WebSettings.RenderPriority: the priority"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "It is not recommended to adjust thread priorities, and this will not be supported in future versions. Sets the priority of the Render thread. Unlike the other settings, this one only needs to be called once per process. The default value is @B_android#webkit#WebSettings#RenderPriority#NORMAL_E@.", "history": "Added in API level 1 Deprecated in API level 18", "FullName": "public abstract void setRenderPriority (WebSettings.RenderPriority priority)"}, "getDefaultTextEncodingName()": {"Returns": [["@B_java#lang#String_E@", "the default text encoding name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDefaultTextEncodingName_E@"], "Permissions": [], "Description": "Gets the default text encoding name.", "history": "Added in API level 1", "FullName": "public abstract String getDefaultTextEncodingName ()"}, "getSerifFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the serif font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSerifFontFamily_E@"], "Permissions": [], "Description": "Gets the serif font family name. The default is \"serif\".", "history": "Added in API level 1", "FullName": "public abstract String getSerifFontFamily ()"}, "getDefaultUserAgent(android.content.Context)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: a Context object used to access application assets"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default User-Agent used by a WebView. An instance of WebView could use a different User-Agent if a call is made to @B_android#webkit#WebSettings#setUserAgentString_E@.", "history": "Added in API level 17", "FullName": "public static String getDefaultUserAgent (Context context)"}, "setFixedFontFamily(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a font family name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fixed font family name. The default is \"monospace\".", "history": "Added in API level 1", "FullName": "public abstract void setFixedFontFamily (String font)"}, "getTextZoom()": {"Returns": [["int", "the text zoom of the page in percent"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setTextZoom_E@"], "Permissions": [], "Description": "Gets the text zoom of the page in percent.", "history": "Added in API level 14", "FullName": "public abstract int getTextZoom ()"}, "setDefaultFixedFontSize(int)": {"Returns": [], "Parameters": [["int", "int: a non-negative integer between 1 and 72. Any number outside the specified range will be pinned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the default fixed font size. The default is 16.", "history": "Added in API level 1", "FullName": "public abstract void setDefaultFixedFontSize (int size)"}, "setDefaultTextEncodingName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the text encoding name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the default text encoding name to use when decoding html pages. The default is \"UTF-8\".", "history": "Added in API level 1", "FullName": "public abstract void setDefaultTextEncodingName (String encoding)"}, "getJavaScriptEnabled()": {"Returns": [["boolean", "true if JavaScript is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setJavaScriptEnabled_E@"], "Permissions": [], "Description": "Gets whether JavaScript is enabled.", "history": "Added in API level 1", "FullName": "public abstract boolean getJavaScriptEnabled ()"}, "getPluginsEnabled()": {"Returns": [["", "true if plugins are enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setPluginsEnabled_E@"], "Permissions": [], "Description": "Gets whether plugins are enabled.", "history": "Added in API level 1", "FullName": "public synchronized boolean getPluginsEnabled ()"}, "setSupportZoom(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView should support zoom"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should support zooming using its on-screen zoom controls and gestures. The particular zoom mechanisms that should be used can be set with @B_android#webkit#WebSettings#setBuiltInZoomControls_E@. This setting does not affect zooming performed using the @B_android#webkit#WebView#zoomIn_E@ and @B_android#webkit#WebView#zoomOut_E@ methods. The default is true.", "history": "Added in API level 1", "FullName": "public abstract void setSupportZoom (boolean support)"}, "supportMultipleWindows()": {"Returns": [["boolean", "true if the WebView supports multiple windows"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setSupportMultipleWindows_E@"], "Permissions": [], "Description": "Gets whether the WebView supports multiple windows.", "history": "Added in API level 1", "FullName": "public abstract boolean supportMultipleWindows ()"}, "setDisplayZoomControls(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView should display on-screen zoom controls"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should display on-screen zoom controls when using the built-in zoom mechanisms. See @B_android#webkit#WebSettings#setBuiltInZoomControls_E@. The default is true. However, on-screen zoom controls are deprecated in Android (see @B_android#widget#ZoomButtonsController_E@) so it's recommended to set this to false.", "history": "Added in API level 11", "FullName": "public abstract void setDisplayZoomControls (boolean enabled)"}, "getUserAgent()": {"Returns": [["", "0 if the WebView is using an Android user-agent string, 1 if the WebView is using a desktop user-agent string, -1 if the WebView is using user defined user-agent string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the user-agent as an int.", "history": "Since: API Level 1", "FullName": "public synchronized int getUserAgent ()"}, "setSafeBrowsingEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether Safe Browsing is enabled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether Safe Browsing is enabled. Safe Browsing allows WebView to protect against malware and phishing attacks by verifying the links. Safe Browsing can be disabled for all WebViews using a manifest tag (read Safe Browsing is enabled by default for devices which support it.", "history": "Added in API level 26", "FullName": "public abstract void setSafeBrowsingEnabled (boolean enabled)"}, "getMediaPlaybackRequiresUserGesture()": {"Returns": [["boolean", "true if the WebView requires a user gesture to play media"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setMediaPlaybackRequiresUserGesture_E@"], "Permissions": [], "Description": "Gets whether the WebView requires a user gesture to play media.", "history": "Added in API level 17", "FullName": "public abstract boolean getMediaPlaybackRequiresUserGesture ()"}, "getTextSize()": {"Returns": [["@B_android#webkit#WebSettings#TextSize_E@", "the text size as a @B_android#webkit#WebSettings#TextSize_E@ value"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setTextSize_E@"], "Permissions": [], "Description": "Use @B_android#webkit#WebSettings#getTextZoom_E@ instead. Gets the text size of the page. If the text size was previously specified in percent using @B_android#webkit#WebSettings#setTextZoom_E@, this will return the closest matching @B_android#webkit#WebSettings#TextSize_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public WebSettings.TextSize getTextSize ()"}, "getStandardFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the standard font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setStandardFontFamily_E@"], "Permissions": [], "Description": "Gets the standard font family name.", "history": "Added in API level 1", "FullName": "public abstract String getStandardFontFamily ()"}, "setCacheMode(int)": {"Returns": [], "Parameters": [["int", "int: the mode to use Value is @B_android#webkit#WebSettings#LOAD_DEFAULT_E@, @B_android#webkit#WebSettings#LOAD_NORMAL_E@, @B_android#webkit#WebSettings#LOAD_CACHE_ELSE_NETWORK_E@, @B_android#webkit#WebSettings#LOAD_NO_CACHE_E@, or @B_android#webkit#WebSettings#LOAD_CACHE_ONLY_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides the way the cache is used. The way the cache is used is based on the navigation type. For a normal page load, the cache is checked and content is re-validated as needed. When navigating back, content is not revalidated, instead the content is just retrieved from the cache. This method allows the client to override this behavior by specifying one of @B_android#webkit#WebSettings#LOAD_DEFAULT_E@, @B_android#webkit#WebSettings#LOAD_CACHE_ELSE_NETWORK_E@, @B_android#webkit#WebSettings#LOAD_NO_CACHE_E@ or @B_android#webkit#WebSettings#LOAD_CACHE_ONLY_E@. The default value is @B_android#webkit#WebSettings#LOAD_DEFAULT_E@.", "history": "Added in API level 1", "FullName": "public abstract void setCacheMode (int mode)"}, "setDefaultFontSize(int)": {"Returns": [], "Parameters": [["int", "int: a non-negative integer between 1 and 72. Any number outside the specified range will be pinned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the default font size. The default is 16.", "history": "Added in API level 1", "FullName": "public abstract void setDefaultFontSize (int size)"}, "getCursiveFontFamily()": {"Returns": [["@B_java#lang#String_E@", "the cursive font family name as a string"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setCursiveFontFamily_E@"], "Permissions": [], "Description": "Gets the cursive font family name.", "history": "Added in API level 1", "FullName": "public abstract String getCursiveFontFamily ()"}, "getDefaultFixedFontSize()": {"Returns": [["int", "a non-negative integer between 1 and 72"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#webkit#WebSettings#setDefaultFixedFontSize_E@"], "Permissions": [], "Description": "Gets the default fixed font size.", "history": "Added in API level 1", "FullName": "public abstract int getDefaultFixedFontSize ()"}, "setBuiltInZoomControls(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the WebView should use its built-in zoom mechanisms"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should use its built-in zoom mechanisms. The built-in zoom mechanisms comprise on-screen zoom controls, which are displayed over the WebView's content, and the use of a pinch gesture to control zooming. Whether or not these on-screen controls are displayed can be set with @B_android#webkit#WebSettings#setDisplayZoomControls_E@. The default is false. The built-in mechanisms are the only currently supported zoom mechanisms, so it is recommended that this setting is always enabled. However, on-screen zoom controls are deprecated in Android (see @B_android#widget#ZoomButtonsController_E@) so it's recommended to disable @B_android#webkit#WebSettings#setDisplayZoomControls_E@.", "history": "Added in API level 3", "FullName": "public abstract void setBuiltInZoomControls (boolean enabled)"}, "setNavDump(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables dumping the pages navigation cache to a text file.", "history": "Since: API Level 1", "FullName": "public void setNavDump (boolean enabled)"}, "WebSettings()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 22", "FullName": "public WebSettings ()"}, "getUseDoubleTree()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Controlled a rendering optimization that is no longer present. Setting it now has no effect.", "history": "Since: API Level 1", "FullName": "public synchronized boolean getUseDoubleTree ()"}, "setPluginsEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true if plugins should be enabled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the WebView should enable plugins. The default is false.", "history": "Added in API level 1", "FullName": "public synchronized void setPluginsEnabled (boolean flag)"}, "setPluginsPath(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "a String path to the directory containing plugins"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a custom path to plugins used by the WebView. This method is obsolete since each plugin is now loaded from its own package.", "history": "Added in API level 1", "FullName": "public synchronized void setPluginsPath (String pluginsPath)"}, "setMinimumLogicalFontSize(int)": {"Returns": [], "Parameters": [["int", "int: a non-negative integer between 1 and 72. Any number outside the specified range will be pinned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum logical font size. The default is 8.", "history": "Added in API level 1", "FullName": "public abstract void setMinimumLogicalFontSize (int size)"}, "setGeolocationEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether Geolocation should be enabled"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@", "@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Sets whether Geolocation is enabled. The default is true. Please note that in order for the Geolocation API to be usable by a page in the WebView, the following requirements must be met: an application must have permission to access the device location, see @B_android#Manifest#permission#ACCESS_COARSE_LOCATION_E@, @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@; an application must provide an implementation of the @B_android#webkit#WebChromeClient#onGeolocationPermissionsShowPrompt_E@ callback to receive notifications that a page is requesting access to location via the JavaScript Geolocation API.", "history": "Added in API level 5", "FullName": "public abstract void setGeolocationEnabled (boolean flag)"}}, "Inheritance": [], "ClassName": "android.webkit.WebSettings", "ClassDesc": "Manages settings state for a WebView. When a WebView is first created, it obtains a set of default settings. These default settings will be returned from any getter call. A WebSettings object obtained from @B_android#webkit#WebView#getSettings_E@ is tied to the life of the WebView. If a WebView has been destroyed, any method call on WebSettings will throw an @B_java#lang#IllegalStateException_E@."}