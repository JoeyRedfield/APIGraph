{"Functions": {"setMinimumVerticalAngle(float)": {"Returns": [], "Parameters": [["float", "float: The minimum angle of the arc on a circle describing the Path between two nearly vertically-separated points."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum arc along the circle between two points aligned near vertically. When start and end points are close to vertical, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. The default value is 0.", "history": "Added in API level 21", "FullName": "public void setMinimumVerticalAngle (float angleInDegrees)"}, "getPath(float,float,float,float)": {"Returns": [["@B_android#graphics#Path_E@", "A Path along which the points should be interpolated. The returned Path must start at point (startX, startY), typically using @B_android#graphics#Path#moveTo_E@ and end at (endX, endY)."]], "Parameters": [["float", "float: The x coordinate of the starting point."], ["float", "float: The y coordinate of the starting point."], ["float", "float: The x coordinate of the ending point."], ["float", "float: The y coordinate of the ending point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide a Path to interpolate between two points (startX, startY) and (endX, endY). This allows controlled curved motion along two dimensions.", "history": "Added in API level 21", "FullName": "public Path getPath (float startX, float startY, float endX, float endY)"}, "setMaximumAngle(float)": {"Returns": [], "Parameters": [["float", "float: The maximum angle of the arc on a circle describing the Path between the start and end points."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximum arc along the circle between two points. When start and end points have close to equal x and y differences, the curve between them is large. This forces the curved path to have an arc of at most the given angle. The default value is 70 degrees.", "history": "Added in API level 21", "FullName": "public void setMaximumAngle (float angleInDegrees)"}, "getMinimumHorizontalAngle()": {"Returns": [["float", "The minimum arc along the circle between two points aligned near horizontally."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum arc along the circle between two points aligned near horizontally. When start and end points are close to horizontal, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. The default value is 0.", "history": "Added in API level 21", "FullName": "public float getMinimumHorizontalAngle ()"}, "ArcMotion()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ArcMotion ()"}, "ArcMotion(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public ArcMotion (Context context, AttributeSet attrs)"}, "getPath(float, float, float, float)": {"Returns": [["@B_android#graphics#Path_E@", "A Path along which the points should be interpolated. The returned Path must start at point (startX, startY), typically using @B_android#graphics#Path#moveTo_E@ and end at (endX, endY)."]], "Parameters": [["float", "float: The x coordinate of the starting point."], ["float", "float: The y coordinate of the starting point."], ["float", "float: The x coordinate of the ending point."], ["float", "float: The y coordinate of the ending point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provide a Path to interpolate between two points (startX, startY) and (endX, endY). This allows controlled curved motion along two dimensions.", "history": "added in API level 21", "FullName": "public Path getPath (float startX, float startY, float endX, float endY)"}, "getMaximumAngle()": {"Returns": [["float", "The maximum angle of the arc on a circle describing the Path between the start and end points."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum arc along the circle between two points. When start and end points have close to equal x and y differences, the curve between them is large. This forces the curved path to have an arc of at most the given angle. The default value is 70 degrees.", "history": "Added in API level 21", "FullName": "public float getMaximumAngle ()"}, "setMinimumHorizontalAngle(float)": {"Returns": [], "Parameters": [["float", "float: The minimum angle of the arc on a circle describing the Path between two nearly horizontally-separated points."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimum arc along the circle between two points aligned near horizontally. When start and end points are close to horizontal, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. The default value is 0.", "history": "Added in API level 21", "FullName": "public void setMinimumHorizontalAngle (float angleInDegrees)"}, "getMinimumVerticalAngle()": {"Returns": [["float", "The minimum angle of the arc on a circle describing the Path between two nearly vertically-separated points."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum arc along the circle between two points aligned near vertically. When start and end points are close to vertical, the calculated center point of the circle will be far from both points, giving a near straight path between the points. By setting a minimum angle, this forces the center point to be closer and give an exaggerated curve to the path. The default value is 0.", "history": "Added in API level 21", "FullName": "public float getMinimumVerticalAngle ()"}}, "Inheritance": ["@B_android#transition#PathMotion_E@"], "ClassName": "android.transition.ArcMotion", "ClassDesc": "A PathMotion that generates a curved path along an arc on an imaginary circle containing the two points. If the horizontal distance between the points is less than the vertical distance, then the circle's center point will be horizontally aligned with the end point. If the vertical distance is less than the horizontal distance then the circle's center point will be vertically aligned with the end point. When the two points are near horizontal or vertical, the curve of the motion will be small as the center of the circle will be far from both points. To force curvature of the path, @B_android#transition#ArcMotion#setMinimumHorizontalAngle_E@ and @B_android#transition#ArcMotion#setMinimumVerticalAngle_E@ may be used to set the minimum angle of the arc between two points. This may be used in XML as an element inside a transition."}