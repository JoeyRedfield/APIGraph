{"Functions": {"RSAMultiPrimePrivateCrtKeySpec(java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.math.BigInteger,java.security.spec.RSAOtherPrimeInfo[])": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: the modulus n."], ["@B_java#math#BigInteger_E@", "BigInteger: the public exponent e."], ["@B_java#math#BigInteger_E@", "BigInteger: the private exponent d."], ["@B_java#math#BigInteger_E@", "BigInteger: the prime factor p of n."], ["@B_java#math#BigInteger_E@", "BigInteger: the prime factor q of n."], ["@B_java#math#BigInteger_E@", "BigInteger: this is d mod (p-1)."], ["@B_java#math#BigInteger_E@", "BigInteger: this is d mod (q-1)."], ["@B_java#math#BigInteger_E@", "BigInteger: the Chinese Remainder Theorem coefficient q-1 mod p."], ["@B_java#security#spec#RSAOtherPrimeInfo_E@", "RSAOtherPrimeInfo: triplets of the rest of primes, null can be specified if there are only two prime factors (p and q)."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if any of the parameters, i.e. modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, crtCoefficient, is null."], ["@B_java#lang#IllegalArgumentException_E@", "if an empty, i.e. 0-length, otherPrimeInfo is specified."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new RSAMultiPrimePrivateCrtKeySpec given the modulus, publicExponent, privateExponent, primeP, primeQ, primeExponentP, primeExponentQ, crtCoefficient, and otherPrimeInfo as defined in PKCS#1 v2.1. Note that the contents of otherPrimeInfo are copied to protect against subsequent modification when constructing this object.", "history": "Added in API level 1", "FullName": "public RSAMultiPrimePrivateCrtKeySpec (BigInteger modulus, BigInteger publicExponent, BigInteger privateExponent, BigInteger primeP, BigInteger primeQ, BigInteger primeExponentP, BigInteger primeExponentQ, BigInteger crtCoefficient, RSAOtherPrimeInfo[] otherPrimeInfo)"}, "getPrimeQ()": {"Returns": [["@B_java#math#BigInteger_E@", "the primeQ."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primeQ.", "history": "Added in API level 1", "FullName": "public BigInteger getPrimeQ ()"}, "getPublicExponent()": {"Returns": [["@B_java#math#BigInteger_E@", "the public exponent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the public exponent.", "history": "Added in API level 1", "FullName": "public BigInteger getPublicExponent ()"}, "getPrimeP()": {"Returns": [["@B_java#math#BigInteger_E@", "the primeP."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primeP.", "history": "Added in API level 1", "FullName": "public BigInteger getPrimeP ()"}, "getOtherPrimeInfo()": {"Returns": [["@B_java#security#spec#RSAOtherPrimeInfo_E@", "the otherPrimeInfo. Returns a new array each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the otherPrimeInfo or null if there are only two prime factors (p and q).", "history": "Added in API level 1", "FullName": "public RSAOtherPrimeInfo[] getOtherPrimeInfo ()"}, "getPrimeExponentQ()": {"Returns": [["@B_java#math#BigInteger_E@", "the primeExponentQ."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primeExponentQ.", "history": "Added in API level 1", "FullName": "public BigInteger getPrimeExponentQ ()"}, "getCrtCoefficient()": {"Returns": [["@B_java#math#BigInteger_E@", "the crtCoefficient."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the crtCoefficient.", "history": "Added in API level 1", "FullName": "public BigInteger getCrtCoefficient ()"}, "getPrimeExponentP()": {"Returns": [["@B_java#math#BigInteger_E@", "the primeExponentP."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the primeExponentP.", "history": "Added in API level 1", "FullName": "public BigInteger getPrimeExponentP ()"}}, "Inheritance": ["@B_java#security#spec#RSAPrivateKeySpec_E@"], "ClassName": "java.security.spec.RSAMultiPrimePrivateCrtKeySpec", "ClassDesc": "This class specifies an RSA multi-prime private key, as defined in the PKCS#1 v2.1, using the Chinese Remainder Theorem (CRT) information values for efficiency."}