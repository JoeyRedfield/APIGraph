{"Functions": {"MediaCrypto(java.util.UUID, byte[])": {"Returns": [], "Parameters": [["@B_java#util#UUID_E@", "UUID: The UUID of the crypto scheme.This value must never be null."], ["byte[]", "byte: Opaque initialization data specific to the crypto scheme. This value must never be null."]], "Throws": [["@B_android#media#MediaCryptoException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Instantiate a MediaCrypto object using opaque, crypto scheme specific data.", "history": "added in API level 16", "FullName": "public MediaCrypto (UUID uuid, byte[] initData)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public void release ()"}, "requiresSecureDecoderComponent(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The mime type of the media data This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if the crypto scheme requires the use of a secure decoder to decode data of the given mime type.", "history": "Added in API level 16", "FullName": "public boolean requiresSecureDecoderComponent (String mime)"}, "setMediaDrmSession(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the MediaDrm sessionId to associate with this MediaCrypto instance This value must never be null."]], "Throws": [["@B_android#media#MediaCryptoException_E@", "on failure to set the sessionId"]], "SeeAlso": [], "Permissions": [], "Description": "Associate a MediaDrm session with this MediaCrypto instance. The MediaDrm session is used to securely load decryption keys for a crypto scheme. The crypto keys loaded through the MediaDrm session may be selected for use during the decryption operation performed by @B_android#media#MediaCodec#queueSecureInputBuffer_E@ by specifying their key ids in the @B_android#media#MediaCodec#CryptoInfo#key_E@ field.", "history": "Added in API level 23", "FullName": "public void setMediaDrmSession (byte[] sessionId)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 16", "FullName": "protected void finalize ()"}, "MediaCrypto(java.util.UUID,byte[])": {"Returns": [], "Parameters": [["@B_java#util#UUID_E@", "UUID: The UUID of the crypto scheme. This value must never be null."], ["byte[]", "byte: The MediaDrm sessionId to associate with this MediaCrypto session. The sessionId may be changed after the MediaCrypto is created using @B_android#media#MediaCrypto#setMediaDrmSession_E@ This value must never be null."]], "Throws": [["@B_android#media#MediaCryptoException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Instantiate a MediaCrypto object and associate it with a MediaDrm session", "history": "Added in API level 16", "FullName": "public MediaCrypto (UUID uuid, byte[] sessionId)"}, "isCryptoSchemeSupported(java.util.UUID)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#util#UUID_E@", "UUID: The UUID of the crypto scheme. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if the given scheme identified by its UUID is supported on this device.", "history": "Added in API level 16", "FullName": "public static boolean isCryptoSchemeSupported (UUID uuid)"}}, "Inheritance": [], "ClassName": "android.media.MediaCrypto", "ClassDesc": "MediaCrypto class can be used in conjunction with @B_android#media#MediaCodec_E@ to decode encrypted media data. Crypto schemes are assigned 16 byte UUIDs, the method @B_android#media#MediaCrypto#isCryptoSchemeSupported_E@ can be used to query if a given scheme is supported on the device."}