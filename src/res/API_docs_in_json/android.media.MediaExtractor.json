{"Functions": {"setDataSource(android.content.res.AssetFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#content#res#AssetFileDescriptor_E@", "AssetFileDescriptor: the AssetFileDescriptor for the file you want to extract from. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "Added in API level 24", "FullName": "public void setDataSource (AssetFileDescriptor afd)"}, "seekTo(long, int)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All selected tracks seek near the requested time according to the specified mode.", "history": "added in API level 16", "FullName": "public void seekTo (long timeUs, int mode)"}, "getPsshInfo()": {"Returns": [["@B_java#util#Map_E@", "a map of uuid-to-bytes, with the uuid specifying the crypto scheme, and the bytes being the data specific to that scheme. This can be null if the source does not contain PSSH info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the PSSH info if present.", "history": "Added in API level 18", "FullName": "public Map<UUID, byte[]> getPsshInfo ()"}, "getCachedDuration()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of how much data is presently cached in memory expressed in microseconds. Returns -1 if that information is unavailable or not applicable (no cache).", "history": "Added in API level 16", "FullName": "public long getCachedDuration ()"}, "setMediaCas(android.media.MediaCas)": {"Returns": [], "Parameters": [["@B_android#media#MediaCas_E@", "MediaCas: the MediaCas object to use. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the MediaCas instance to use. This should be called after a successful setDataSource() if at least one track reports mime type of @B_android#media#MediaFormat#MIMETYPE_AUDIO_SCRAMBLED_E@ or @B_android#media#MediaFormat#MIMETYPE_VIDEO_SCRAMBLED_E@. Stream parsing will not proceed until a valid MediaCas object is provided.", "history": "Added in API level 26", "FullName": "public void setMediaCas (MediaCas mediaCas)"}, "getAudioPresentations(int)": {"Returns": [["@B_java#util#List_E@", "a list of available audio presentations for a given valid audio track index. The list will be empty if the source does not contain any audio presentations. This value will never be null."]], "Parameters": [["int", "int: index of the track."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the list of available audio presentations for the track.", "history": "Added in API level 28", "FullName": "public List<AudioPresentation> getAudioPresentations (int trackIndex)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 16", "FullName": "protected void finalize ()"}, "getTrackCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Count the number of tracks found in the data source.", "history": "Added in API level 16", "FullName": "public int getTrackCount ()"}, "readSampleData(java.nio.ByteBuffer, int)": {"Returns": [["int", "the sample size (or -1 if no more samples are available)."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the destination byte bufferThis value must never be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. byteBuf is updated to point to the data just read.", "history": "added in API level 16", "FullName": "public int readSampleData (ByteBuffer byteBuf, int offset)"}, "setDataSource(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to extract from. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "Added in API level 16", "FullName": "public void setDataSource (FileDescriptor fd)"}, "seekTo(long,int)": {"Returns": [], "Parameters": [["long", "long no parameter comment"], ["int", "int: Value is @B_android#media#MediaExtractor#SEEK_TO_PREVIOUS_SYNC_E@, @B_android#media#MediaExtractor#SEEK_TO_NEXT_SYNC_E@, or @B_android#media#MediaExtractor#SEEK_TO_CLOSEST_SYNC_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "All selected tracks seek near the requested time according to the specified mode.", "history": "Added in API level 16", "FullName": "public void seekTo (long timeUs, int mode)"}, "getTrackFormat(int)": {"Returns": [["@B_android#media#MediaFormat_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the track format at the specified index. More detail on the representation can be found at @B_android#media#MediaCodec_E@ The following table summarizes support for format keys across android releases:", "history": "Added in API level 16", "FullName": "public MediaFormat getTrackFormat (int index)"}, "getSampleTime()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current sample's presentation time in microseconds. or -1 if no more samples are available.", "history": "Added in API level 16", "FullName": "public long getSampleTime ()"}, "setDataSource(java.lang.String,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the path of the file, or the http URL When path refers to a network file the Manifest.permission.INTERNET permission is required. This value must never be null."], ["@B_java#util#Map_E@", "Map: the headers associated with the http request for the stream you want to play. This can be null if no specific headers are to be sent with the request. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#INTERNET_E@"], "Description": "Sets the data source (file-path or http URL) to use.", "history": "Added in API level 16", "FullName": "public void setDataSource (String path, Map<String, String> headers)"}, "advance()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Advance to the next sample. Returns false if no more sample data is available (end of stream). When extracting a local file, the behaviors of @B_android#media#MediaExtractor#advance_E@ and @B_android#media#MediaExtractor#readSampleData_E@ are undefined in presence of concurrent writes to the same local file; more specifically, end of stream could be signalled earlier than expected.", "history": "Added in API level 16", "FullName": "public boolean advance ()"}, "selectTrack(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subsequent calls to @B_android#media#MediaExtractor#readSampleData_E@, @B_android#media#MediaExtractor#getSampleTrackIndex_E@ and @B_android#media#MediaExtractor#getSampleTime_E@ only retrieve information for the subset of tracks selected. Selecting the same track multiple times has no effect, the track is only selected once.", "history": "Added in API level 16", "FullName": "public void selectTrack (int index)"}, "setDataSource(java.io.FileDescriptor,long,long)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to extract from. This value must never be null."], ["long", "long: the offset into the file where the data to be extracted starts, in bytes"], ["long", "long: the length in bytes of the data to be extracted"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "Added in API level 16", "FullName": "public void setDataSource (FileDescriptor fd, long offset, long length)"}, "getDrmInitData()": {"Returns": [["@B_android#media#DrmInitData_E@", "DRM initialization data in the content, or null if no recognizable DRM format is found;"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#DrmInitData_E@"], "Permissions": [], "Description": "Extract DRM initialization data if it exists", "history": "Added in API level 24", "FullName": "public DrmInitData getDrmInitData ()"}, "getSampleSize()": {"Returns": [["long", "size of the current sample in bytes or -1 if no more samples are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public long getSampleSize ()"}, "setDataSource(android.media.MediaDataSource)": {"Returns": [], "Parameters": [["@B_android#media#MediaDataSource_E@", "MediaDataSource: the MediaDataSource for the media you want to extract from This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if dataSource is invalid."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (MediaDataSource) to use.", "history": "Added in API level 23", "FullName": "public void setDataSource (MediaDataSource dataSource)"}, "getSampleFlags()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#media#MediaExtractor#SAMPLE_FLAG_SYNC_E@, @B_android#media#MediaExtractor#SAMPLE_FLAG_ENCRYPTED_E@, and @B_android#media#MediaExtractor#SAMPLE_FLAG_PARTIAL_FRAME_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current sample's flags.", "history": "Added in API level 16", "FullName": "public int getSampleFlags ()"}, "readSampleData(java.nio.ByteBuffer,int)": {"Returns": [["int", "the sample size (or -1 if no more samples are available)."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the destination byte buffer This value must never be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. byteBuf is updated to point to the data just read.", "history": "Added in API level 16", "FullName": "public int readSampleData (ByteBuffer byteBuf, int offset)"}, "setDataSource(java.io.FileDescriptor, long, long)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the FileDescriptor for the file you want to extract from.This value must never be null."], ["long", "long: the offset into the file where the data to be extracted starts, in bytes"], ["long", "long: the length in bytes of the data to be extracted"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets the data source (FileDescriptor) to use. The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.", "history": "added in API level 16", "FullName": "public void setDataSource (FileDescriptor fd, long offset, long length)"}, "getSampleCryptoInfo(android.media.MediaCodec.CryptoInfo)": {"Returns": [["boolean", "true iff the sample flags contain @B_android#media#MediaExtractor#SAMPLE_FLAG_ENCRYPTED_E@"]], "Parameters": [["@B_android#media#MediaCodec#CryptoInfo_E@", "MediaCodec.CryptoInfo: The android.media.MediaCodec.CryptoInfo structure to be filled in. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the sample flags indicate that the current sample is at least partially encrypted, this call returns relevant information about the structure of the sample data required for decryption.", "history": "Added in API level 16", "FullName": "public boolean getSampleCryptoInfo (MediaCodec.CryptoInfo info)"}, "getCasInfo(int)": {"Returns": [["@B_android#media#MediaExtractor#CasInfo_E@", "an @B_android#media#MediaExtractor#CasInfo_E@ object describing the conditional access system."]], "Parameters": [["int", "int: of the track."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the information about the conditional access system used to scramble a track.", "history": "Added in API level 26", "FullName": "public MediaExtractor.CasInfo getCasInfo (int index)"}, "MediaExtractor()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 16", "FullName": "public MediaExtractor ()"}, "getSampleTrackIndex()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the track index the current sample originates from (or -1 if no more samples are available)", "history": "Added in API level 16", "FullName": "public int getSampleTrackIndex ()"}, "hasCacheReachedEndOfStream()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff we are caching data and the cache has reached the end of the data stream (for now, a future seek may of course restart the fetching of data). This API only returns a meaningful result if @B_android#media#MediaExtractor#getCachedDuration_E@ indicates the presence of a cache, i.e. does NOT return -1.", "history": "Added in API level 16", "FullName": "public boolean hasCacheReachedEndOfStream ()"}, "unselectTrack(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subsequent calls to @B_android#media#MediaExtractor#readSampleData_E@, @B_android#media#MediaExtractor#getSampleTrackIndex_E@ and @B_android#media#MediaExtractor#getSampleTime_E@ only retrieve information for the subset of tracks selected.", "history": "Added in API level 16", "FullName": "public void unselectTrack (int index)"}, "setDataSource(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the path of the file, or the http URL of the stream When path refers to a local file, the file may actually be opened by a process other than the calling application. This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory), and that the pathname should reference a world-readable file. As an alternative, the application could first open the file for reading, and then use the file descriptor form setDataSource(java.io.FileDescriptor). When path refers to a network file the Manifest.permission.INTERNET permission is required. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#INTERNET_E@"], "Description": "Sets the data source (file-path or http URL) to use.", "history": "Added in API level 16", "FullName": "public void setDataSource (String path)"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future.", "history": "Added in API level 16", "FullName": "public void release ()"}, "getMetrics()": {"Returns": [["@B_android#os#PersistableBundle_E@", "a @B_android#os#PersistableBundle_E@ containing the set of attributes and values available for the media container being handled by this instance of MediaExtractor. The attributes are descibed in @B_android#media#MediaExtractor#MetricsConstants_E@. Additional vendor-specific fields may also be present in the return value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return Metrics data about the current media container.", "history": "Added in API level 26", "FullName": "public PersistableBundle getMetrics ()"}, "setDataSource(android.content.Context,android.net.Uri,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the Context to use when resolving the Uri This value must never be null."], ["@B_android#net#Uri_E@", "Uri: the Content URI of the data you want to extract from. When uri refers to a network file the Manifest.permission.INTERNET permission is required. This value must never be null."], ["@B_java#util#Map_E@", "Map: the headers to be sent together with the request for the data. This can be null if no specific headers are to be sent with the request. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#INTERNET_E@"], "Description": "Sets the data source as a content Uri.", "history": "Added in API level 16", "FullName": "public void setDataSource (Context context, Uri uri, Map<String, String> headers)"}}, "Inheritance": [], "ClassName": "android.media.MediaExtractor", "ClassDesc": "MediaExtractor facilitates extraction of demuxed, typically encoded, media data from a data source. It is generally used like this: This class requires the @B_android#Manifest#permission#INTERNET_E@ permission when used with network-based content."}