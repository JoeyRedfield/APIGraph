{"Functions": {"get(java.lang.Object)": {"Returns": [["V", "Returns the value associated with the given key, or null if there is no such key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key of the value to retrieve."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a value from the array.", "history": "added in version 22.0.0", "FullName": "V get (Object key)"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "Returns true if the key exists, else false."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether a key exists in the array.", "history": "added in version 22.0.0", "FullName": "boolean containsKey (Object key)"}, "valueAt(int)": {"Returns": [["V", "Returns the value stored at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#support#v4#util#SimpleArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the value at the given index in the array.", "history": "added in version 22.0.0", "FullName": "V valueAt (int index)"}, "setValueAt(int, V)": {"Returns": [["V", "Returns the previous value at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#support#v4#util#SimpleArrayMap#size_E@-1."], ["V", "V: The new value to store at this index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value at a given index in the array.", "history": "added in version 22.0.0", "FullName": "V setValueAt (int index, V value)"}, "SimpleArrayMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty ArrayMap. The default capacity of an array map is 0, and will grow once items are added to it.", "history": "added in version 22.0.0", "FullName": "SimpleArrayMap ()"}, "isEmpty()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the array map contains no items.", "history": "added in version 22.0.0", "FullName": "boolean isEmpty ()"}, "keyAt(int)": {"Returns": [["K", "Returns the key stored at the given index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#support#v4#util#SimpleArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the key at the given index in the array.", "history": "added in version 22.0.0", "FullName": "K keyAt (int index)"}, "remove(java.lang.Object)": {"Returns": [["V", "Returns the value that was stored under the key, or null if there was no such key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key of the mapping to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove an existing key from the array map.", "history": "added in version 22.0.0", "FullName": "V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "Returns true if the value exists, else false."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The value to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check whether a value exists in the array. This requires a linear search through the entire array.", "history": "added in version 22.0.0", "FullName": "boolean containsValue (Object value)"}, "indexOfKey(java.lang.Object)": {"Returns": [["int", "Returns the index of the key if it exists, else a negative integer."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The key to search for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of a key in the set.", "history": "added in version 22.0.0", "FullName": "int indexOfKey (Object key)"}, "put(K, V)": {"Returns": [["V", "Returns the old value that was stored for the given key, or null if there was no such key."]], "Parameters": [["K", "K: The key under which to store the value. Must not be null. If this key already exists in the array, its value will be replaced."], ["V", "V: The value to store for the given key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new value to the array map.", "history": "added in version 22.0.0", "FullName": "V put (K key, V value)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of: This implementation composes a string by iterating over its mappings. If this map contains itself as a key or a value, the string \"(this Map)\" will appear in its place.", "history": "", "FullName": "String toString ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make the array map empty. All storage is released.", "history": "added in version 22.0.0", "FullName": "void clear ()"}, "removeAt(int)": {"Returns": [["V", "Returns the value that was stored at this index."]], "Parameters": [["int", "int: The desired index, must be between 0 and @B_android#support#v4#util#SimpleArrayMap#size_E@-1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the key/value mapping at the given index.", "history": "added in version 22.0.0", "FullName": "V removeAt (int index)"}, "SimpleArrayMap(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new ArrayMap with a given initial capacity.", "history": "added in version 22.0.0", "FullName": "SimpleArrayMap (int capacity)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes. This implementation returns false if the object is not a Map or SimpleArrayMap, or if the maps have different sizes. Otherwise, for each key in this map, values of both maps are compared. If the values for any key are not equal, the method returns false, otherwise it returns true.", "history": "", "FullName": "boolean equals (Object object)"}, "ensureCapacity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensure the array map can hold at least", "history": "added in version 22.0.0", "FullName": "void ensureCapacity (int minimumCapacity)"}, "size()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of items in this array map.", "history": "added in version 22.0.0", "FullName": "int size ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "", "FullName": "int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.util.SimpleArrayMap<K, V>", "ClassDesc": "Base implementation of @B_android#support#v4#util#ArrayMap_E@ that doesn't include any standard Java container API interoperability. These features are generally heavier-weight ways to interact with the container, so discouraged, but they can be useful to make it easier to use as a drop-in replacement for HashMap. If you don't need them, this class can be preferrable since it doesn't bring in any of the implementation of those APIs, allowing that code to be stripped by ProGuard."}