{"Functions": {"getSystemDialerPackage()": {"Returns": [["@B_java#lang#String_E@", "package name for the system dialer package or null if no system dialer is preloaded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines the package name of the system-provided default phone app.", "history": "Added in API level 29", "FullName": "public String getSystemDialerPackage ()"}, "showInCallScreen(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Brings up the in-call dialpad as part of showing the in-call screen."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Brings the in-call screen to the foreground if there is an ongoing call. If there is currently no ongoing call, then this method does nothing. Requires that the method-caller be set as the system dialer app or have the @B_android#Manifest#permission#READ_PHONE_STATE_E@ permission. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 21", "FullName": "public void showInCallScreen (boolean showDialpad)"}, "acceptHandover(android.net.Uri,int,android.telecom.PhoneAccountHandle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The @B_android#net#Uri_E@ of the ongoing call to handover to the caller\u2019s @B_android#telecom#ConnectionService_E@."], ["int", "int: Video state after the handover. Value is either 0 or a combination of @B_android#telecom#VideoProfile#STATE_AUDIO_ONLY_E@, @B_android#telecom#VideoProfile#STATE_TX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_RX_ENABLED_E@, @B_android#telecom#VideoProfile#STATE_BIDIRECTIONAL_E@, and @B_android#telecom#VideoProfile#STATE_PAUSED_E@"], ["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The @B_android#telecom#PhoneAccountHandle_E@ registered to the calling package."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MANAGE_OWN_CALLS_E@"], "Description": "Called by an app to indicate that it wishes to accept the handover of an ongoing call to a @B_android#telecom#PhoneAccountHandle_E@ it defines. A call handover is the process where an ongoing call is transferred from one app (i.e. @B_android#telecom#ConnectionService_E@ to another app. The user could, for example, choose to continue a mobile network call in a video calling app. The mobile network call via the Telephony stack is referred to as the source of the handover, and the video calling app is referred to as the destination. When considering a handover scenario the initiating device is where a user initiated the handover process (e.g. by calling @B_android#telecom#Call#handoverTo_E@, and the other device is considered the receiving device. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@. This method is called from the receiving side of a handover to indicate a desire to accept the handover of an ongoing call to another @B_android#telecom#ConnectionService_E@ identified by @B_android#telecom#PhoneAccountHandle_E@ destAcct. For managed @B_android#telecom#ConnectionService_E@s, the specified @B_android#telecom#PhoneAccountHandle_E@ must have been registered with @B_android#telecom#TelecomManager#registerPhoneAccount_E@ and the user must have enabled the corresponding @B_android#telecom#PhoneAccount_E@. This can be checked using @B_android#telecom#TelecomManager#getPhoneAccount_E@. Self-managed @B_android#telecom#ConnectionService_E@s must have @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@ to handover a call to it. Once invoked, this method will cause the system to bind to the @B_android#telecom#ConnectionService_E@ associated with the @B_android#telecom#PhoneAccountHandle_E@ destAcct and call (See @B_android#telecom#ConnectionService#onCreateIncomingHandoverConnection_E@). For a managed @B_android#telecom#ConnectionService_E@, a @B_java#lang#SecurityException_E@ will be thrown if either the @B_android#telecom#PhoneAccountHandle_E@ destAcct does not correspond to a registered @B_android#telecom#PhoneAccount_E@ or the associated @B_android#telecom#PhoneAccount_E@ is not currently enabled by the user. For a self-managed @B_android#telecom#ConnectionService_E@, a @B_java#lang#SecurityException_E@ will be thrown if the calling app does not have @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@.", "history": "Added in API level 28", "FullName": "public void acceptHandover (Uri srcAddr, int videoState, PhoneAccountHandle destAcct)"}, "getDefaultOutgoingPhoneAccount(java.lang.String)": {"Returns": [["@B_android#telecom#PhoneAccountHandle_E@", "The @B_android#telecom#PhoneAccountHandle_E@ corresponding to the account to be used."]], "Parameters": [["@B_java#lang#String_E@", "String: The URI scheme."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return the @B_android#telecom#PhoneAccount_E@ which will be used to place outgoing calls to addresses with the specified uriScheme. This @B_android#telecom#PhoneAccount_E@ will always be a member of the list which is returned from invoking @B_android#telecom#TelecomManager#getCallCapablePhoneAccounts_E@. The specific account returned depends on the following priorities: If the user-selected default @B_android#telecom#PhoneAccount_E@ supports the specified scheme, it will be returned. If there exists only one @B_android#telecom#PhoneAccount_E@ that supports the specified scheme, it will be returned. If no @B_android#telecom#PhoneAccount_E@ fits the criteria above, this method will return null. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public PhoneAccountHandle getDefaultOutgoingPhoneAccount (String uriScheme)"}, "isInCall()": {"Returns": [["boolean", "true if there is an ongoing call in either a managed or self-managed @B_android#telecom#ConnectionService_E@, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns whether there is an ongoing phone call (can be in dialing, ringing, active or holding states) originating from either a manager or self-managed @B_android#telecom#ConnectionService_E@. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 21", "FullName": "public boolean isInCall ()"}, "createManageBlockedNumbersIntent()": {"Returns": [["@B_android#content#Intent_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the @B_android#content#Intent_E@ which can be used with @B_android#content#Context#startActivity_E@ to launch the activity to manage blocked numbers. The activity will display the UI to manage blocked numbers only if @B_android#provider#BlockedNumberContract#canCurrentUserBlockNumbers_E@ returns true for the current user.", "history": "Added in API level 24", "FullName": "public Intent createManageBlockedNumbersIntent ()"}, "getPhoneAccount(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_android#telecom#PhoneAccount_E@", "The @B_android#telecom#PhoneAccount_E@ object."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The @B_android#telecom#PhoneAccountHandle_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#telecom#PhoneAccount_E@ for a specified @B_android#telecom#PhoneAccountHandle_E@. Object includes resources which can be used in a user interface.", "history": "Added in API level 23", "FullName": "public PhoneAccount getPhoneAccount (PhoneAccountHandle account)"}, "registerPhoneAccount(android.telecom.PhoneAccount)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccount_E@", "PhoneAccount: The complete @B_android#telecom#PhoneAccount_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a @B_android#telecom#PhoneAccount_E@ for use by the system that will be stored in Device Encrypted storage. When registering @B_android#telecom#PhoneAccount_E@s, existing registrations will be overwritten if the @B_android#telecom#PhoneAccountHandle_E@ matches that of a @B_android#telecom#PhoneAccount_E@ which is already registered. Once registered, the @B_android#telecom#PhoneAccount_E@ is listed to the user as an option when placing calls. The user may still need to enable the @B_android#telecom#PhoneAccount_E@ within the phone app settings before the account is usable. A @B_java#lang#SecurityException_E@ will be thrown if an app tries to register a @B_android#telecom#PhoneAccountHandle_E@ where the package name specified within @B_android#telecom#PhoneAccountHandle#getComponentName_E@ does not match the package name of the app.", "history": "Added in API level 23", "FullName": "public void registerPhoneAccount (PhoneAccount account)"}, "cancelMissedCallsNotification()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Removes the missed-call notification if one is present. Requires that the method-caller be set as the system dialer app. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 21", "FullName": "public void cancelMissedCallsNotification ()"}, "placeCall(android.net.Uri, android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The address to make the call to."], ["@B_android#os#Bundle_E@", "Bundle: Bundle of extras to use with the call."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CALL_PHONE_E@", "@B_android#Manifest#permission#MANAGE_OWN_CALLS_E@"], "Description": "Places a new outgoing call to the provided address using the system telecom service with the specified extras. This method is equivalent to placing an outgoing call using @B_android#content#Intent#ACTION_CALL_E@, except that the outgoing call will always be sent via the system telecom service. If method-caller is either the user selected default dialer app or preloaded system dialer app, then emergency calls will also be allowed. Placing a call via a managed @B_android#telecom#ConnectionService_E@ requires permission: @B_android#Manifest#permission#CALL_PHONE_E@ Usage example: @B_android#telecom#TelecomManager#EXTRA_OUTGOING_CALL_EXTRAS_E@ @B_android#telecom#TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE_E@ @B_android#telecom#TelecomManager#EXTRA_START_CALL_WITH_SPEAKERPHONE_E@ @B_android#telecom#TelecomManager#EXTRA_START_CALL_WITH_VIDEO_STATE_E@ An app which implements the self-managed @B_android#telecom#ConnectionService_E@ API uses @B_android#telecom#TelecomManager#placeCall_E@ to inform Telecom of a new outgoing call. A self-managed @B_android#telecom#ConnectionService_E@ must include @B_android#telecom#TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE_E@ to specify its associated @B_android#telecom#PhoneAccountHandle_E@. Self-managed @B_android#telecom#ConnectionService_E@s require permission @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@.", "history": "added in API level 23", "FullName": "public void placeCall (Uri address, Bundle extras)"}, "getDefaultDialerPackage()": {"Returns": [["@B_java#lang#String_E@", "package name for the default dialer package or null if no package has been selected as the default dialer."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to determine the currently selected default dialer package.", "history": "Added in API level 23", "FullName": "public String getDefaultDialerPackage ()"}, "isVoiceMailNumber(android.telecom.PhoneAccountHandle,java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the account to check the voicemail number against"], ["@B_java#lang#String_E@", "String: The number to look up."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return whether a given phone number is the configured voicemail number for a particular phone account. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public boolean isVoiceMailNumber (PhoneAccountHandle accountHandle, String number)"}, "handleMmi(java.lang.String)": {"Returns": [["boolean", "True if the digits were processed as an MMI code, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The digits to dial."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Processes the specified dial string as an MMI code. MMI codes are any sequence of characters entered into the dialpad that contain a \"*\" or \"#\". Some of these sequences launch special behavior through handled by Telephony. This method uses the default subscription. Requires that the method-caller be set as the system dialer app. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 21", "FullName": "public boolean handleMmi (String dialString)"}, "getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_android#net#Uri_E@", "The URI (with the content:// scheme) specific to the specified @B_android#telecom#PhoneAccount_E@ for the the content retrieve."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the account to derive an adn query URI for or null to return a URI which will use the default account."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public Uri getAdnUriForPhoneAccount (PhoneAccountHandle accountHandle)"}, "isTtySupported()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns whether TTY is supported on this device. Requires android.Manifest.permission.READ_PRIVILEGED_PHONE_STATE or @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 28", "FullName": "public boolean isTtySupported ()"}, "endCall()": {"Returns": [["boolean", "true if there is a call which will be rejected or terminated, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@"], "Description": "Companion apps for wearable devices should use the @B_android#telecom#InCallService_E@ API instead. Apps performing call screening should use the @B_android#telecom#CallScreeningService_E@ API instead. Ends the foreground call on the device. If there is a ringing call, calling this method rejects the ringing call. Otherwise the foreground call is ended. Requires permission @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@. Note: this method CANNOT be used to end ongoing emergency calls and will return false if an attempt is made to end an emergency call. Requires @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@", "history": "Added in API level 28 Deprecated in API level 29", "FullName": "public boolean endCall ()"}, "getSelfManagedPhoneAccounts()": {"Returns": [["@B_java#util#List_E@", "A list of PhoneAccountHandle objects."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns a list of @B_android#telecom#PhoneAccountHandle_E@s for self-managed @B_android#telecom#ConnectionService_E@s. Self-Managed @B_android#telecom#ConnectionService_E@s have a @B_android#telecom#PhoneAccount_E@ with @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@. Requires permission @B_android#Manifest#permission#READ_PHONE_STATE_E@, or that the caller is the default dialer app. A @B_java#lang#SecurityException_E@ will be thrown if a called is not the default dialer, or lacks the @B_android#Manifest#permission#READ_PHONE_STATE_E@ permission. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public List<PhoneAccountHandle> getSelfManagedPhoneAccounts ()"}, "isOutgoingCallPermitted(android.telecom.PhoneAccountHandle)": {"Returns": [["boolean", "true if telecom will permit an outgoing call to be placed, false otherwise."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The @B_android#telecom#PhoneAccountHandle_E@ the call will be added for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether Telecom would permit an outgoing call to be placed via the @B_android#telecom#TelecomManager#placeCall_E@ API for the specified @B_android#telecom#PhoneAccountHandle_E@. A @B_android#telecom#ConnectionService_E@ may not place a call for the specified @B_android#telecom#PhoneAccountHandle_E@ in the following situations: @B_android#telecom#PhoneAccount_E@ does not have property @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@ set (i.e. it is a managed @B_android#telecom#ConnectionService_E@), and the active, held or ringing call limit has been reached. @B_android#telecom#PhoneAccount_E@ has property @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@ set (i.e. it is a self-managed @B_android#telecom#ConnectionService_E@ and there is an ongoing call in another @B_android#telecom#ConnectionService_E@. There is an ongoing emergency call.", "history": "Added in API level 26", "FullName": "public boolean isOutgoingCallPermitted (PhoneAccountHandle phoneAccountHandle)"}, "isInManagedCall()": {"Returns": [["boolean", "true if there is an ongoing call in a managed @B_android#telecom#ConnectionService_E@, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns whether there is an ongoing call originating from a managed @B_android#telecom#ConnectionService_E@. An ongoing call can be in dialing, ringing, active or holding states. If you also need to know if there are ongoing self-managed calls, use @B_android#telecom#TelecomManager#isInCall_E@ instead. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 26", "FullName": "public boolean isInManagedCall ()"}, "silenceRinger()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Silences the ringer if a ringing call exists. This method can only be relied upon to stop the ringtone for a call if the ringtone has already started playing. It is intended to handle use-cases such as silencing a ringing call when the user presses the volume button during ringing. If this method is called prior to when the ringtone begins playing, the ringtone will not be silenced. As such it is not intended as a means to avoid playing of a ringtone. A dialer app which wants to have more control over ringtone playing should declare @B_android#telecom#TelecomManager#METADATA_IN_CALL_SERVICE_RINGING_E@ in the manifest entry for their @B_android#telecom#InCallService_E@ implementation to indicate that the app wants to be responsible for playing the ringtone for all incoming calls. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or that the app fills the dialer role (see @B_android#telecom#TelecomManager#getDefaultDialerPackage_E@). Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public void silenceRinger ()"}, "unregisterPhoneAccount(android.telecom.PhoneAccountHandle)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: A @B_android#telecom#PhoneAccountHandle_E@ for the @B_android#telecom#PhoneAccount_E@ to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a @B_android#telecom#PhoneAccount_E@ registration from the system.", "history": "Added in API level 23", "FullName": "public void unregisterPhoneAccount (PhoneAccountHandle accountHandle)"}, "isIncomingCallPermitted(android.telecom.PhoneAccountHandle)": {"Returns": [["boolean", "true if telecom will permit an incoming call to be added, false otherwise."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The @B_android#telecom#PhoneAccountHandle_E@ the call will be added for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether Telecom would permit an incoming call to be added via the @B_android#telecom#TelecomManager#addNewIncomingCall_E@ API for the specified @B_android#telecom#PhoneAccountHandle_E@. A @B_android#telecom#ConnectionService_E@ may not add a call for the specified @B_android#telecom#PhoneAccountHandle_E@ in the following situations: @B_android#telecom#PhoneAccount_E@ does not have property @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@ set (i.e. it is a managed @B_android#telecom#ConnectionService_E@), and the active or held call limit has been reached. There is an ongoing emergency call.", "history": "Added in API level 26", "FullName": "public boolean isIncomingCallPermitted (PhoneAccountHandle phoneAccountHandle)"}, "getVoiceMailNumber(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_java#lang#String_E@", "The voicemail number for the phone account, and null if one has not been configured."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the phone account."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return the voicemail number for a given phone account. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public String getVoiceMailNumber (PhoneAccountHandle accountHandle)"}, "getLine1Number(android.telecom.PhoneAccountHandle)": {"Returns": [["@B_java#lang#String_E@", "A string representation of the line 1 phone number."]], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the account retrieve a number for."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return the line 1 phone number for given phone account. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public String getLine1Number (PhoneAccountHandle accountHandle)"}, "handleMmi(java.lang.String,android.telecom.PhoneAccountHandle)": {"Returns": [["boolean", "True if the digits were processed as an MMI code, false otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: The digits to dial."], ["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: The handle for the account the MMI code should apply to."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Processes the specified dial string as an MMI code. MMI codes are any sequence of characters entered into the dialpad that contain a \"*\" or \"#\". Some of these sequences launch special behavior through handled by Telephony. Requires that the method-caller be set as the system dialer app. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public boolean handleMmi (String dialString, PhoneAccountHandle accountHandle)"}, "acceptRingingCall(int)": {"Returns": [], "Parameters": [["int", "int: The desired video state to answer the call with."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "@B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@"], "Description": "Companion apps for wearable devices should use the @B_android#telecom#InCallService_E@ API instead. If there is a ringing incoming call, this method accepts the call on behalf of the user, with the specified video state. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@ Requires @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@ or @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public void acceptRingingCall (int videoState)"}, "addNewIncomingCall(android.telecom.PhoneAccountHandle,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#telecom#PhoneAccountHandle_E@", "PhoneAccountHandle: A @B_android#telecom#PhoneAccountHandle_E@ registered with @B_android#telecom#TelecomManager#registerPhoneAccount_E@."], ["@B_android#os#Bundle_E@", "Bundle: A bundle that will be passed through to @B_android#telecom#ConnectionService#onCreateIncomingConnection_E@."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MANAGE_OWN_CALLS_E@"], "Description": "Registers a new incoming call. A @B_android#telecom#ConnectionService_E@ should invoke this method when it has an incoming call. For managed @B_android#telecom#ConnectionService_E@s, the specified @B_android#telecom#PhoneAccountHandle_E@ must have been registered with @B_android#telecom#TelecomManager#registerPhoneAccount_E@ and the user must have enabled the corresponding @B_android#telecom#PhoneAccount_E@. This can be checked using @B_android#telecom#TelecomManager#getPhoneAccount_E@. Self-managed @B_android#telecom#ConnectionService_E@s must have @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@ to add a new incoming call. The incoming call you are adding is assumed to have a video state of @B_android#telecom#VideoProfile#STATE_AUDIO_ONLY_E@, unless the extra value @B_android#telecom#TelecomManager#EXTRA_INCOMING_VIDEO_STATE_E@ is specified. Once invoked, this method will cause the system to bind to the @B_android#telecom#ConnectionService_E@ associated with the @B_android#telecom#PhoneAccountHandle_E@ and request additional information about the call (See @B_android#telecom#ConnectionService#onCreateIncomingConnection_E@) before starting the incoming call UI. For a managed @B_android#telecom#ConnectionService_E@, a @B_java#lang#SecurityException_E@ will be thrown if either the @B_android#telecom#PhoneAccountHandle_E@ does not correspond to a registered @B_android#telecom#PhoneAccount_E@ or the associated @B_android#telecom#PhoneAccount_E@ is not currently enabled by the user. For a self-managed @B_android#telecom#ConnectionService_E@, a @B_java#lang#SecurityException_E@ will be thrown if the @B_android#telecom#PhoneAccount_E@ has @B_android#telecom#PhoneAccount#CAPABILITY_SELF_MANAGED_E@ and the calling app does not have @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@.", "history": "Added in API level 23", "FullName": "public void addNewIncomingCall (PhoneAccountHandle phoneAccount, Bundle extras)"}, "acceptRingingCall()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "@B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@"], "Description": "Companion apps for wearable devices should use the @B_android#telecom#InCallService_E@ API instead. If there is a ringing incoming call, this method accepts the call on behalf of the user. If the incoming call is a video call, the call will be answered with the same video state as the incoming call requests. This means, for example, that an incoming call requesting @B_android#telecom#VideoProfile#STATE_BIDIRECTIONAL_E@ will be answered, accepting that state. Requires permission: @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@ Requires @B_android#Manifest#permission#ANSWER_PHONE_CALLS_E@ or @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 26 Deprecated in API level 29", "FullName": "public void acceptRingingCall ()"}, "getSimCallManager()": {"Returns": [["@B_android#telecom#PhoneAccountHandle_E@", "The phone account handle of the current sim call manager for the default voice subscription."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#SubscriptionManager#getDefaultVoiceSubscriptionId_E@"], "Permissions": [], "Description": "Returns the current SIM call manager. Apps must be prepared for this method to return null, indicating that there currently exists no SIM call manager @B_android#telecom#PhoneAccount_E@ for the default voice subscription.", "history": "Added in API level 23", "FullName": "public PhoneAccountHandle getSimCallManager ()"}, "getUserSelectedOutgoingPhoneAccount()": {"Returns": [["@B_android#telecom#PhoneAccountHandle_E@", "The user outgoing phone account selected by the user, or null if there is no user selected outgoing @B_android#telecom#PhoneAccountHandle_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return the @B_android#telecom#PhoneAccount_E@ which is the user-chosen default for making outgoing phone calls. This PhoneAccount will always be a member of the list which is returned from calling @B_android#telecom#TelecomManager#getCallCapablePhoneAccounts_E@ Apps must be prepared for this method to return null, indicating that there currently exists no user-chosen default PhoneAccount. The default dialer has access to use this method. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public PhoneAccountHandle getUserSelectedOutgoingPhoneAccount ()"}, "getCallCapablePhoneAccounts()": {"Returns": [["@B_java#util#List_E@", "A list of PhoneAccountHandle objects."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telecom#TelecomManager_E@"], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Returns a list of @B_android#telecom#PhoneAccountHandle_E@s which can be used to make and receive phone calls. The returned list includes only those accounts which have been explicitly enabled by the user. Requires permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 23", "FullName": "public List<PhoneAccountHandle> getCallCapablePhoneAccounts ()"}, "placeCall(android.net.Uri,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The address to make the call to."], ["@B_android#os#Bundle_E@", "Bundle: Bundle of extras to use with the call."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#CALL_PHONE_E@", "@B_android#Manifest#permission#MANAGE_OWN_CALLS_E@"], "Description": "Places a new outgoing call to the provided address using the system telecom service with the specified extras. This method is equivalent to placing an outgoing call using @B_android#content#Intent#ACTION_CALL_E@, except that the outgoing call will always be sent via the system telecom service. If method-caller is either the user selected default dialer app or preloaded system dialer app, then emergency calls will also be allowed. Placing a call via a managed @B_android#telecom#ConnectionService_E@ requires permission: @B_android#Manifest#permission#CALL_PHONE_E@ Usage example: @B_android#telecom#TelecomManager#EXTRA_OUTGOING_CALL_EXTRAS_E@ @B_android#telecom#TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE_E@ @B_android#telecom#TelecomManager#EXTRA_START_CALL_WITH_SPEAKERPHONE_E@ @B_android#telecom#TelecomManager#EXTRA_START_CALL_WITH_VIDEO_STATE_E@ An app which implements the self-managed @B_android#telecom#ConnectionService_E@ API uses @B_android#telecom#TelecomManager#placeCall_E@ to inform Telecom of a new outgoing call. A self-managed @B_android#telecom#ConnectionService_E@ must include @B_android#telecom#TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE_E@ to specify its associated @B_android#telecom#PhoneAccountHandle_E@. Self-managed @B_android#telecom#ConnectionService_E@s require permission @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@. @B_android#telecom#PhoneAccount_E@ provided in the @B_android#telecom#TelecomManager#EXTRA_PHONE_ACCOUNT_HANDLE_E@ extra (if specified) and may be placed on another @B_android#telecom#PhoneAccount_E@ with the @B_android#telecom#PhoneAccount#CAPABILITY_PLACE_EMERGENCY_CALLS_E@ capability, depending on external factors, such as network conditions and Modem/SIM status. Requires @B_android#Manifest#permission#CALL_PHONE_E@ or @B_android#Manifest#permission#MANAGE_OWN_CALLS_E@", "history": "Added in API level 23", "FullName": "public void placeCall (Uri address, Bundle extras)"}}, "Inheritance": [], "ClassName": "android.telecom.TelecomManager", "ClassDesc": "Provides access to information about active calls and registration/call-management functionality. Apps can use methods in this class to determine the current call state. Apps do not instantiate this class directly; instead, they retrieve a reference to an instance through @B_android#content#Context#getSystemService_E@. Note that access to some telecom information is permission-protected. Your app cannot access the protected information or gain access to protected functionality unless it has the appropriate permissions declared in its manifest file. Where permissions apply, they are noted in the method descriptions."}