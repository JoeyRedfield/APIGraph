{"Functions": {"take()": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if none are yet present.", "history": "Added in API level 1", "FullName": "public Future<V> take ()"}, "poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task or null if the specified waiting time elapses before one is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.", "history": "Added in API level 1", "FullName": "public Future<V> poll (long timeout, TimeUnit unit)"}, "poll()": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task, or null if none are present"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, or null if none are present.", "history": "Added in API level 1", "FullName": "public Future<V> poll ()"}, "submit(java.lang.Runnable, V)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task, and whose get() method will return the given result value upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["V", "V: the result to return upon successful completion"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.", "history": "added in API level 1", "FullName": "public Future<V> submit (Runnable task, V result)"}, "submit(java.util.concurrent.Callable<V>)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task"]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the task to submit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submits a value-returning task for execution and returns a Future representing the pending results of the task. Upon completion, this task may be taken or polled.", "history": "Added in API level 1", "FullName": "public Future<V> submit (Callable<V> task)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["@B_java#util#concurrent#Future_E@", "the Future representing the next completed task or null if the specified waiting time elapses before one is present"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.", "history": "added in API level 1", "FullName": "public Future<V> poll (long timeout, TimeUnit unit)"}, "submit(java.lang.Runnable,V)": {"Returns": [["@B_java#util#concurrent#Future_E@", "a Future representing pending completion of the task, and whose get() method will return the given result value upon completion"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the task to submit"], ["V", "V: the result to return upon successful completion"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Submits a Runnable task for execution and returns a Future representing that task. Upon completion, this task may be taken or polled.", "history": "Added in API level 1", "FullName": "public Future<V> submit (Runnable task, V result)"}, "ExecutorCompletionService(java.util.concurrent.Executor)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if executor is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ExecutorCompletionService using the supplied executor for base task execution and a @B_java#util#concurrent#LinkedBlockingQueue_E@ as a completion queue.", "history": "Added in API level 1", "FullName": "public ExecutorCompletionService (Executor executor)"}, "ExecutorCompletionService(java.util.concurrent.Executor,java.util.concurrent.BlockingQueue<java.util.concurrent.Future<V>>)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: the executor to use"], ["@B_java#util#concurrent#BlockingQueue_E@", "BlockingQueue: the queue to use as the completion queue normally one dedicated for use by this service. This queue is treated as unbounded -- failed attempted Queue.add operations for completed tasks cause them not to be retrievable."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if executor or completionQueue are null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an ExecutorCompletionService using the supplied executor for base task execution and the supplied queue as its completion queue.", "history": "Added in API level 1", "FullName": "public ExecutorCompletionService (Executor executor, BlockingQueue<Future<V>> completionQueue)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.ExecutorCompletionService<V>", "ClassDesc": "A @B_java#util#concurrent#CompletionService_E@ that uses a supplied @B_java#util#concurrent#Executor_E@ to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using take. The class is lightweight enough to be suitable for transient use when processing groups of tasks. Result, and would like to run them concurrently, processing the results of each of them that return a non-null value, in some method use(Result r). You could write this as:"}