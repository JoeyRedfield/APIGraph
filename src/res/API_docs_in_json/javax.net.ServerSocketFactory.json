{"Functions": {"createServerSocket()": {"Returns": [["@B_java#net#ServerSocket_E@", "the unbound socket"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the socket cannot be created"]], "SeeAlso": ["@B_java#net#ServerSocket#bind_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns an unbound server socket. The socket is configured with the socket options (such as accept timeout) given to this factory.", "history": "Added in API level 1", "FullName": "public ServerSocket createServerSocket ()"}, "createServerSocket(int, int)": {"Returns": [["@B_java#net#ServerSocket_E@", "the ServerSocket"]], "Parameters": [["int", "int: the port to listen to"], ["int", "int: how many connections are queued"]], "Throws": [["@B_java#io#IOException_E@", "for networking errors"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns a server socket bound to the specified port, and uses the specified connection backlog. The socket is configured with the socket options (such as accept timeout) given to this factory. The backlog argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public abstract ServerSocket createServerSocket (int port, int backlog)"}, "createServerSocket(int,int,java.net.InetAddress)": {"Returns": [["@B_java#net#ServerSocket_E@", "the ServerSocket"]], "Parameters": [["int", "int: the port to listen to"], ["int", "int: how many connections are queued"], ["@B_java#net#InetAddress_E@", "InetAddress: the network interface address to use"]], "Throws": [["@B_java#io#IOException_E@", "for networking errors"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns a server socket bound to the specified port, with a specified listen backlog and local IP. The ifAddress argument can be used on a multi-homed host for a ServerSocket that will only accept connect requests to one of its addresses. If ifAddress is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory. The backlog argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract ServerSocket createServerSocket (int port, int backlog, InetAddress ifAddress)"}, "getDefault()": {"Returns": [["@B_javax#net#ServerSocketFactory_E@", "the ServerSocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the environment's default socket factory.", "history": "Added in API level 1", "FullName": "public static ServerSocketFactory getDefault ()"}, "createServerSocket(int,int)": {"Returns": [["@B_java#net#ServerSocket_E@", "the ServerSocket"]], "Parameters": [["int", "int: the port to listen to"], ["int", "int: how many connections are queued"]], "Throws": [["@B_java#io#IOException_E@", "for networking errors"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns a server socket bound to the specified port, and uses the specified connection backlog. The socket is configured with the socket options (such as accept timeout) given to this factory. The backlog argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract ServerSocket createServerSocket (int port, int backlog)"}, "createServerSocket(int)": {"Returns": [["@B_java#net#ServerSocket_E@", "the ServerSocket"]], "Parameters": [["int", "int: the port to listen to"]], "Throws": [["@B_java#io#IOException_E@", "for networking errors"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns a server socket bound to the specified port. The socket is configured with the socket options (such as accept timeout) given to this factory. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public abstract ServerSocket createServerSocket (int port)"}, "ServerSocketFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a server socket factory.", "history": "Added in API level 1", "FullName": "protected ServerSocketFactory ()"}, "createServerSocket(int, int, java.net.InetAddress)": {"Returns": [["@B_java#net#ServerSocket_E@", "the ServerSocket"]], "Parameters": [["int", "int: the port to listen to"], ["int", "int: how many connections are queued"], ["@B_java#net#InetAddress_E@", "InetAddress: the network interface address to use"]], "Throws": [["@B_java#io#IOException_E@", "for networking errors"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@", "@B_java#net#ServerSocket#ServerSocket_E@"], "Permissions": [], "Description": "Returns a server socket bound to the specified port, with a specified listen backlog and local IP. The ifAddress argument can be used on a multi-homed host for a ServerSocket that will only accept connect requests to one of its addresses. If ifAddress is null, it will accept connections on all local addresses. The socket is configured with the socket options (such as accept timeout) given to this factory. The backlog argument must be a positive value greater than 0. If the value passed if equal or less than 0, then the default value will be assumed. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public abstract ServerSocket createServerSocket (int port, int backlog, InetAddress ifAddress)"}}, "Inheritance": [], "ClassName": "javax.net.ServerSocketFactory", "ClassDesc": "This class creates server sockets. It may be subclassed by other factories, which create particular types of server sockets. This provides a general framework for the addition of public socket-level functionality. It is the server side analogue of a socket factory, and similarly provides a way to capture a variety of policies related to the sockets being constructed. Like socket factories, server Socket factory instances have methods used to create sockets. There is also an environment specific default server socket factory; frameworks will often use their own customized factory."}