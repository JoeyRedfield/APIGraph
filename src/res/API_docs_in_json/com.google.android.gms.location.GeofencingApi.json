{"Functions": {"removeGeofences(com.google.android.gms.common.api.GoogleApiClient, java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["List", "a list of request IDs of geofences that need to be removed"]], "Throws": [["IllegalArgumentException", "if geofenceRequestIds is null or empty"], ["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["NullPointerException", "if listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Removes geofences by their request IDs. Request ID is specified when you create a @B_com#google#android#gms#location#Geofence_E@ by calling @B_com#google#android#gms#location#Geofence#Builder#setRequestId_E@. @B_com#google#android#gms#common#api#Status_E@ is returned when geofences are successfully removed or fail to be removed. Refer to @B_com#google#android#gms#location#GeofenceStatusCodes_E@ for possible errors when removing geofences. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public abstract PendingResult<Status> removeGeofences (GoogleApiClient client, List<String> geofenceRequestIds)"}, "removeGeofences(com.google.android.gms.common.api.GoogleApiClient, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["PendingIntent", "the pending intent associated with the geofences that need to be removed."]], "Throws": [["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["NullPointerException", "if intent or listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Removes all geofences associated with the given pendingIntent. Warning: @B_android#app#PendingIntent#equals_E@ is used for comparison. Please use @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@ rather than @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@ when creating the pending intent, otherwise you will not get the same pending intent you provided to @B_com#google#android#gms#location#GeofencingApi#addGeofences_E@ and thus the removal operation will remove nothing. @B_com#google#android#gms#common#api#Status_E@ is returned when geofences are successfully removed or fail to be removed. Refer to @B_com#google#android#gms#location#GeofenceStatusCodes_E@ for possible errors when removing geofences. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public abstract PendingResult<Status> removeGeofences (GoogleApiClient client, PendingIntent pendingIntent)"}, "addGeofences(com.google.android.gms.common.api.GoogleApiClient, java.util.List<com.google.android.gms.location.Geofence>, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "An existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["List", "a list of geofences to be added. The geofences must be created using @B_com#google#android#gms#location#Geofence#Builder_E@."], ["PendingIntent", "a pending intent that will be used to generate an intent when matched geofence transition is observed"]], "Throws": [["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["IllegalArgumentException", "if geofences is null or empty"], ["NullPointerException", "if intent or listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Sets alerts to be notified when the device enters or exits one of the specified geofences. If an existing geofence with the same request ID is already registered, the old geofence is replaced by the new one, and the new pendingIntent is used to generate intents for alerts. @B_com#google#android#gms#common#api#Status_E@ is returned when geofences are successfully added or failed to be added. Refer to @B_com#google#android#gms#location#GeofenceStatusCodes_E@ for possible errors when adding geofences. When a geofence transition (for example, entering or exiting) matches one of the transition filter (see @B_com#google#android#gms#location#Geofence#Builder#setTransitionTypes_E@) in the given geofence list, an intent is generated using the given pending intent. You can call @B_com#google#android#gms#location#GeofencingEvent#fromIntent_E@ to get the transition type, geofences that triggered this intent and the location that triggered the geofence transition. In case network location provider is disabled by the user, the geofence service will stop updating, all registered geofences will be removed and an intent is generated by the provided pending intent. In this case, the @B_com#google#android#gms#location#GeofencingEvent_E@ created from this intent represents an error event, where @B_com#google#android#gms#location#GeofencingEvent#hasError_E@ returns true and @B_com#google#android#gms#location#GeofencingEvent#getErrorCode_E@ returns @B_com#google#android#gms#location#GeofenceStatusCodes#GEOFENCE_NOT_AVAILABLE_E@. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public abstract PendingResult<Status> addGeofences (GoogleApiClient client, List<Geofence> geofences, PendingIntent pendingIntent)"}, "addGeofences(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.location.GeofencingRequest, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "an existing GoogleApiClient. It must be connected at the time of this call, which is normally achieved by calling @B_com#google#android#gms#common#api#GoogleApiClient#connect_E@ and waiting for @B_com#google#android#gms#common#api#GoogleApiClient#ConnectionCallbacks#onConnected_E@ to be called."], ["@B_com#google#android#gms#location#GeofencingRequest_E@", "geofencing request that include a list of geofences to be added and related triggering behavior. The request must be created using @B_com#google#android#gms#location#GeofencingRequest#Builder_E@."], ["PendingIntent", "a pending intent that will be used to generate an intent when matched geofence transition is observed"]], "Throws": [["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["NullPointerException", "if geofencingRequest or pendingIntent is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Sets alerts to be notified when the device enters or exits one of the specified geofences. If an existing geofence with the same request ID is already registered, the old geofence is replaced by the new one, and the new PendingIntent is used to generate intents for alerts. @B_com#google#android#gms#common#api#Status_E@ is returned when geofences are successfully added or failed to be added. Refer to @B_com#google#android#gms#location#GeofenceStatusCodes_E@ for possible errors when adding geofences. When a geofence transition (for example, entering or exiting) matches one of the transition filter (see @B_com#google#android#gms#location#Geofence#Builder#setTransitionTypes_E@) in the given geofence list, an intent is generated using the given pending intent. You can call @B_com#google#android#gms#location#GeofencingEvent#fromIntent_E@ to get the transition type, geofences that triggered this intent and the location that triggered the geofence transition. In case network location provider is disabled by the user, the geofence service will stop updating, all registered geofences will be removed and an intent is generated by the provided pending intent. In this case, the @B_com#google#android#gms#location#GeofencingEvent_E@ created from this intent represents an error event, where @B_com#google#android#gms#location#GeofencingEvent#hasError_E@ returns true and @B_com#google#android#gms#location#GeofencingEvent#getErrorCode_E@ returns @B_com#google#android#gms#location#GeofenceStatusCodes#GEOFENCE_NOT_AVAILABLE_E@. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public abstract PendingResult<Status> addGeofences (GoogleApiClient client, GeofencingRequest geofencingRequest, PendingIntent pendingIntent)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.location.GeofencingApi", "ClassDesc": "The main entry point for interacting with the geofencing APIs. The methods must be used in conjunction with a @B_com#google#android#gms#common#api#GoogleApiClient_E@. E.g. All methods are thread safe."}