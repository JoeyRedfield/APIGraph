{"Functions": {"unregister(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister the application. The result will be returned as an @B_com#google#android#gcm#GCMConstants#INTENT_FROM_GCM_REGISTRATION_CALLBACK_E@ intent with an @B_com#google#android#gcm#GCMConstants#EXTRA_UNREGISTERED_E@ extra.", "history": "", "FullName": "public static void unregister (Context context)"}, "getRegistrationId(android.content.Context)": {"Returns": [["", "registration id, or empty string if the registration is not complete."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current registration id for application on GCM service. If result is empty, the registration has failed.", "history": "", "FullName": "public static String getRegistrationId (Context context)"}, "setRegisteredOnServer(android.content.Context, boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the device was successfully registered in the server side.", "history": "", "FullName": "public static void setRegisteredOnServer (Context context, boolean flag)"}, "setRegisterOnServerLifespan(android.content.Context, long)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets how long (in milliseconds) the @B_com#google#android#gcm#GCMRegistrar#isRegistered_E@ flag is valid.", "history": "", "FullName": "public static void setRegisterOnServerLifespan (Context context, long lifespan)"}, "checkManifest(android.content.Context)": {"Returns": [], "Parameters": [["Context", "application context."]], "Throws": [["IllegalStateException", "if any of the conditions above is not met."]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the application manifest is properly configured. A proper configuration means: PACKAGE_NAME is the application package. This method should be used during development time to verify that the manifest is properly set up, but it doesn't need to be called once the application is deployed to the users' devices.", "history": "", "FullName": "public static void checkManifest (Context context)"}, "isRegistered(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the application was successfully registered on GCM service.", "history": "", "FullName": "public static boolean isRegistered (Context context)"}, "getRegisterOnServerLifespan(android.content.Context)": {"Returns": [["", "value set by @B_com#google#android#gcm#GCMRegistrar#setRegisteredOnServer_E@ or @B_com#google#android#gcm#GCMRegistrar#DEFAULT_ON_SERVER_LIFESPAN_MS_E@ if not set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets how long (in milliseconds) the @B_com#google#android#gcm#GCMRegistrar#isRegistered_E@ property is valid.", "history": "", "FullName": "public static long getRegisterOnServerLifespan (Context context)"}, "isRegisteredOnServer(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the device was successfully registered in the server side, as set by @B_com#google#android#gcm#GCMRegistrar#setRegisteredOnServer_E@. To avoid the scenario where the device sends the registration to the server but the server loses it, this flag has an expiration date, which is @B_com#google#android#gcm#GCMRegistrar#DEFAULT_ON_SERVER_LIFESPAN_MS_E@ by default (but can be changed by @B_com#google#android#gcm#GCMRegistrar#setRegisterOnServerLifespan_E@).", "history": "", "FullName": "public static boolean isRegisteredOnServer (Context context)"}, "register(android.content.Context, java.lang.String...)": {"Returns": [], "Parameters": [["Context", "application context."], ["String...", "Google Project ID of the accounts authorized to send messages to this application."]], "Throws": [["IllegalStateException", "if device does not have all GCM dependencies installed."]], "SeeAlso": [], "Permissions": [], "Description": "Initiate messaging registration for the current application. The result will be returned as an @B_com#google#android#gcm#GCMConstants#INTENT_FROM_GCM_REGISTRATION_CALLBACK_E@ intent with either a @B_com#google#android#gcm#GCMConstants#EXTRA_REGISTRATION_ID_E@ or @B_com#google#android#gcm#GCMConstants#EXTRA_ERROR_E@.", "history": "", "FullName": "public static void register (Context context, String... senderIds)"}, "onDestroy(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear internal resources. This method should be called by the main activity's onDestroy() method.", "history": "", "FullName": "public static synchronized void onDestroy (Context context)"}, "checkDevice(android.content.Context)": {"Returns": [], "Parameters": [["Context", "application context."]], "Throws": [["UnsupportedOperationException", "if the device does not support GCM."]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the device has the proper dependencies installed. This method should be called when the application starts to verify that the device supports GCM.", "history": "", "FullName": "public static void checkDevice (Context context)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gcm.GCMRegistrar", "ClassDesc": "Please use the Utilities for device registration. @B_android#content#SharedPreferences_E@ object to keep track of the registration token."}