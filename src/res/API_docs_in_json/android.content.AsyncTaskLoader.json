{"Functions": {"cancelLoad()": {"Returns": [["", "Returns false if the task could not be cancelled, typically because it has already completed normally, or because @B_android#content#Loader#startLoading_E@ hasn't been called; returns true otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempt to cancel the current load task. See @B_android#os#AsyncTask#cancel_E@ for more info. Must be called on the main thread of the process. Cancelling is not an immediate operation, since the load is performed in a background thread. If there is currently a load in progress, this method requests that the load be cancelled, and notes this is the case; once the background thread has completed its work its remaining state will be cleared. If another load request comes in during this time, it will be held until the cancelled load is complete.", "history": "Since: API Level 11", "FullName": "public boolean cancelLoad ()"}, "AsyncTaskLoader(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AsyncTaskLoader (Context context)"}, "cancelLoadInBackground()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Called on the main thread to abort a load in progress. Override this method to abort the current invocation of @B_android#content#AsyncTaskLoader#loadInBackground_E@ that is running in the background on a worker thread. This method should do nothing if @B_android#content#AsyncTaskLoader#loadInBackground_E@ has not started running or if it has already finished.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "public void cancelLoadInBackground ()"}, "dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: A PrintWriter to which the dump is to be set."], ["@B_java#lang#String_E@", "String: Additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Loader's state into the given stream.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "loadInBackground()": {"Returns": [["D", "The result of the load operation."]], "Parameters": [], "Throws": [["@B_android#os#OperationCanceledException_E@", "if the load is canceled during execution."]], "SeeAlso": ["@B_android#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@", "@B_android#content#AsyncTaskLoader#cancelLoadInBackground_E@", "@B_android#content#AsyncTaskLoader#onCanceled_E@"], "Permissions": [], "Description": "Called on a worker thread to perform the actual load and to return the result of the load operation. Implementations should not deliver the result directly, but should return them from this method, which will eventually end up calling @B_android#content#Loader#deliverResult_E@ on the UI thread. If implementations need to process the results on the UI thread they may override @B_android#content#Loader#deliverResult_E@ and do so there. To support cancellation, this method should periodically check the value of @B_android#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@ and terminate when it returns true. Subclasses may also override @B_android#content#AsyncTaskLoader#cancelLoadInBackground_E@ to interrupt the load directly instead of polling @B_android#content#AsyncTaskLoader#isLoadInBackgroundCanceled_E@. When the load is canceled, this method may either return normally or throw @B_android#os#OperationCanceledException_E@. In either case, the @B_android#content#Loader_E@ will call @B_android#content#AsyncTaskLoader#onCanceled_E@ to perform post-cancellation cleanup and to dispose of the result object, if any.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract D loadInBackground ()"}, "onForceLoad()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#content#Loader#forceLoad_E@. This will always be called from the process's main thread.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "protected void onForceLoad ()"}, "isLoadInBackgroundCanceled()": {"Returns": [["boolean", "True if the current invocation of @B_android#content#AsyncTaskLoader#loadInBackground_E@ is being canceled."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Returns true if the current invocation of @B_android#content#AsyncTaskLoader#loadInBackground_E@ is being canceled.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "public boolean isLoadInBackgroundCanceled ()"}, "setUpdateThrottle(long)": {"Returns": [], "Parameters": [["long", "long: Amount of delay, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set amount to throttle updates by. This is the minimum time from when the last @B_android#content#AsyncTaskLoader#loadInBackground_E@ call has completed until a new load is scheduled.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void setUpdateThrottle (long delayMS)"}, "onCancelLoad()": {"Returns": [["boolean", "Returns false if the task could not be canceled, typically because it has already completed normally, or because @B_android#content#Loader#startLoading_E@ hasn't been called; returns true otherwise. When true is returned, the task is still running and the @B_android#content#Loader#OnLoadCanceledListener_E@ will be called when the task completes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must implement this to take care of requests to @B_android#content#Loader#cancelLoad_E@. This will always be called from the process's main thread.", "history": "Added in API level 16 Deprecated in API level 28", "FullName": "protected boolean onCancelLoad ()"}, "onLoadInBackground()": {"Returns": [["D", "The result of the load operation."]], "Parameters": [], "Throws": [["@B_android#os#OperationCanceledException_E@", "if the load is canceled during execution."]], "SeeAlso": ["@B_android#content#AsyncTaskLoader#loadInBackground_E@"], "Permissions": [], "Description": "Calls @B_android#content#AsyncTaskLoader#loadInBackground_E@. This method is reserved for use by the loader framework. Subclasses should override @B_android#content#AsyncTaskLoader#loadInBackground_E@ instead of this method.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "protected D onLoadInBackground ()"}, "onCanceled(D)": {"Returns": [], "Parameters": [["D", "D: The value that was returned by @B_android#content#AsyncTaskLoader#loadInBackground_E@, or null if the task threw @B_android#os#OperationCanceledException_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called if the task was canceled before it was completed. Gives the class a chance to clean up post-cancellation and to properly dispose of the result.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public void onCanceled (D data)"}}, "Inheritance": ["@B_android#content#Loader_E@"], "ClassName": "android.content.AsyncTaskLoader<D>", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#content#AsyncTaskLoader_E@ Abstract Loader that provides an @B_android#os#AsyncTask_E@ to do the work. See @B_android#content#Loader_E@ and @B_android#app#LoaderManager_E@ for more details. Here is an example implementation of an AsyncTaskLoader subclass that loads the currently installed applications from the package manager. This implementation takes care of retrieving the application labels and sorting its result set from them, monitoring for changes to the installed applications, and rebuilding the list when a change in configuration requires this (such as a locale change). An example implementation of a fragment that uses the above loader to show the currently installed applications in a list is below."}