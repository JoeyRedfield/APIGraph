{"Functions": {"disableReaderMode(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the Activity that currently has reader mode enabled"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": [], "Description": "Restore the NFC adapter to normal mode of operation: supporting peer-to-peer (Android Beam), card emulation, and polling for all supported tag technologies.", "history": "Added in API level 19", "FullName": "public void disableReaderMode (Activity activity)"}, "getDefaultAdapter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Legacy NfcAdapter getter, always use @B_android#nfc#NfcAdapter#getDefaultAdapter_E@ instead. This method was deprecated at API level 10 (Gingerbread MR1) because a context is required for many NFC API methods. Those methods will fail when called on an NfcAdapter object created from this method.", "history": "Since: API Level 9", "FullName": "public static NfcAdapter getDefaultAdapter ()"}, "invokeBeam(android.app.Activity)": {"Returns": [["boolean", "whether the Beam animation was successfully invoked"]], "Parameters": [["@B_android#app#Activity_E@", "Activity: the current foreground Activity that has registered data to share"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": [], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Manually invoke Android Beam to share data. The Android Beam animation is normally only shown when two NFC-capable devices come into range. By calling this method, an Activity can invoke the Beam animation directly even if no other NFC device is in range yet. The Beam animation will then prompt the user to tap another NFC-capable device to complete the data transfer. The main advantage of using this method is that it avoids the need for the user to tap the screen to complete the transfer, as this method already establishes the direction of the transfer and the consent of the user to share data. Callers are responsible for making sure that the user has consented to sharing data on NFC tap. Note that to use this method, the passed in Activity must have already set data to share over Beam by using method calls such as @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ or @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public boolean invokeBeam (Activity activity)"}, "enableReaderMode(android.app.Activity,android.nfc.NfcAdapter.ReaderCallback,int,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the Activity that requests the adapter to be in reader mode"], ["@B_android#nfc#NfcAdapter#ReaderCallback_E@", "NfcAdapter.ReaderCallback: the callback to be called when a tag is discovered"], ["int", "int: Flags indicating poll technologies and other optional parameters"], ["@B_android#os#Bundle_E@", "Bundle: Additional extras for configuring reader mode."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": [], "Description": "Limit the NFC controller to reader mode while this Activity is in the foreground. In this mode the NFC controller will only act as an NFC tag reader/writer, thus disabling any peer-to-peer (Android Beam) and card-emulation modes of the NFC adapter on this device. Use @B_android#nfc#NfcAdapter#FLAG_READER_SKIP_NDEF_CHECK_E@ to prevent the platform from performing any NDEF checks in reader mode. Note that this will prevent the @B_android#nfc#tech#Ndef_E@ tag technology from being enumerated on the tag, and that NDEF-based tag dispatch will not be functional. For interacting with tags that are emulated on another Android device using Android's host-based card-emulation, the recommended flags are @B_android#nfc#NfcAdapter#FLAG_READER_NFC_A_E@ and @B_android#nfc#NfcAdapter#FLAG_READER_SKIP_NDEF_CHECK_E@.", "history": "Added in API level 19", "FullName": "public void enableReaderMode (Activity activity, NfcAdapter.ReaderCallback callback, int flags, Bundle extras)"}, "ignore(android.nfc.Tag,int,android.nfc.NfcAdapter.OnTagRemovedListener,android.os.Handler)": {"Returns": [["boolean", "false if the tag couldn't be found (or has already gone out of range), true otherwise"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: the @B_android#nfc#Tag_E@ to ignore."], ["int", "int: minimum amount of time the tag needs to be out of range before being dispatched again."], ["@B_android#nfc#NfcAdapter#OnTagRemovedListener_E@", "NfcAdapter.OnTagRemovedListener: listener to be called when the tag is removed from the field. Note that this will only be called if the tag has been out of range for at least debounceMs, or if another tag came into range before debounceMs. May be null in case you don't want a callback."], ["@B_android#os#Handler_E@", "Handler: the @B_android#os#Handler_E@ that will be used for delivering the callback. if the handler is null, then the thread used for delivering the callback is unspecified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Signals that you are no longer interested in communicating with an NFC tag for as long as it remains in range. All future attempted communication to this tag will fail with @B_java#io#IOException_E@. The NFC controller will be put in a low-power polling mode, allowing the device to save power in cases where it's \"attached\" to a tag all the time (e.g. a tag in car dock). Additionally the debounceMs parameter allows you to specify for how long the tag needs to have gone out of range, before it will be dispatched again. Note: the NFC controller typically polls at a pretty slow interval (100 - 500 ms). This means that if the tag repeatedly goes in and out of range (for example, in case of a flaky connection), and the controller happens to poll every time the tag is out of range, it *will* re-dispatch the tag after debounceMs, despite the tag having been \"in range\" during the interval. Note 2: if a tag with another UID is detected after this API is called, its effect will be cancelled; if this tag shows up before the amount of time specified in debounceMs, it will be dispatched again. Note 3: some tags have a random UID, in which case this API won't work reliably.", "history": "Added in API level 24", "FullName": "public boolean ignore (Tag tag, int debounceMs, NfcAdapter.OnTagRemovedListener tagRemovedListener, Handler handler)"}, "enableForegroundNdefPush(android.app.Activity,android.nfc.NdefMessage)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: foreground activity"], ["@B_android#nfc#NdefMessage_E@", "NdefMessage: a NDEF Message to push over NFC"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the activity is not currently in the foreground"], ["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "use @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ instead Enable NDEF message push over NFC while this Activity is in the foreground. You must explicitly call this method every time the activity is resumed, and you must call @B_android#nfc#NfcAdapter#disableForegroundNdefPush_E@ before your activity completes @B_android#app#Activity#onPause_E@. Strongly recommend to use the new @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ instead: it automatically hooks into your activity life-cycle, so you do not need to call enable/disable in your onResume/onPause. For NDEF push to function properly the other NFC device must support either NFC Forum's SNEP (Simple Ndef Exchange Protocol), or Android's \"com.android.npp\" (Ndef Push Protocol). This was optional on Gingerbread level Android NFC devices, but SNEP is mandatory on Ice-Cream-Sandwich and beyond. This method must be called from the main thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10 Deprecated in API level 15", "FullName": "public void enableForegroundNdefPush (Activity activity, NdefMessage message)"}, "setBeamPushUris(android.net.Uri[],android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: an array of Uri(s) to push over Android Beam"], ["@B_android#app#Activity_E@", "Activity: activity for which the Uri(s) will be pushed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Set one or more @B_android#net#Uri_E@s to send using Android Beam (TM). Every Uri you provide must have either scheme 'file' or scheme 'content'. For the data provided through this method, Android Beam tries to switch to alternate transports such as Bluetooth to achieve a fast transfer speed. Hence this method is very suitable for transferring large files such as pictures or songs. The receiving side will store the content of each Uri in a file and present a notification to the user to open the file with a @B_android#content#Intent_E@ with action @B_android#content#Intent#ACTION_VIEW_E@. If multiple URIs are sent, the @B_android#content#Intent_E@ will refer to the first of the stored files. This method may be called at any time before @B_android#app#Activity#onDestroy_E@, but the URI(s) are only made available for Android Beam when the specified activity(s) are in resumed (foreground) state. The recommended approach is to call this method during your Activity's @B_android#app#Activity#onCreate_E@ - see sample code below. This method does not immediately perform any I/O or blocking work, so is safe to call on your main thread. @B_android#nfc#NfcAdapter#setBeamPushUris_E@ and @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@ have priority over both @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ and @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@. If @B_android#nfc#NfcAdapter#setBeamPushUris_E@ is called with a null Uri array, and/or @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@ is called with a null callback, then the Uri push will be completely disabled for the specified activity(s). Code example: If your Activity wants to dynamically supply Uri(s), then set a callback using @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@ instead of using this method. Do not pass in an Activity that has already been through @B_android#app#Activity#onDestroy_E@. This is guaranteed if you call this API during @B_android#app#Activity#onCreate_E@. If this device does not support alternate transports such as Bluetooth or WiFI, calling this method does nothing. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 16 Deprecated in API level 29", "FullName": "public void setBeamPushUris (Uri[] uris, Activity activity)"}, "isEnabled()": {"Returns": [["boolean", "true if this NFC Adapter has any features enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#provider#Settings_E@"], "Permissions": [], "Description": "Return true if this NFC Adapter has any features enabled. If this method returns false, the NFC hardware is guaranteed not to generate or respond to any NFC communication over its NFC radio. Applications can use this to check if NFC is enabled. Applications can request Settings UI allowing the user to toggle NFC using:", "history": "Added in API level 9", "FullName": "public boolean isEnabled ()"}, "isNdefPushEnabled()": {"Returns": [["boolean", "true if NDEF Push feature is enabled"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": ["@B_android#provider#Settings_E@"], "Permissions": [], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Return true if the NDEF Push (Android Beam) feature is enabled. This function will return true only if both NFC is enabled, and the NDEF Push feature is enabled. Note that if NFC is enabled but NDEF Push is disabled then this device can still Applications cannot directly toggle the NDEF Push feature, but they can request Settings UI allowing the user to toggle NDEF Push using startActivity(new Intent(Settings.ACTION_NFCSHARING_SETTINGS)) Example usage in an Activity that requires NDEF Push:", "history": "Added in API level 16 Deprecated in API level 29", "FullName": "public boolean isNdefPushEnabled ()"}, "disableForegroundNdefPush(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the Foreground activity"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the Activity has already been paused"], ["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "use @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ instead Disable NDEF message push over P2P. After calling @B_android#nfc#NfcAdapter#enableForegroundNdefPush_E@, an activity must call this method before its @B_android#app#Activity#onPause_E@ callback completes. Strongly recommend to use the new @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ instead: it automatically hooks into your activity life-cycle, so you do not need to call enable/disable in your onResume/onPause. This method must be called from the main thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10 Deprecated in API level 15", "FullName": "public void disableForegroundNdefPush (Activity activity)"}, "setOnNdefPushCompleteCallback(android.nfc.NfcAdapter.OnNdefPushCompleteCallback,android.app.Activity,android.app.Activity...)": {"Returns": [], "Parameters": [["@B_android#nfc#NfcAdapter#OnNdefPushCompleteCallback_E@", "NfcAdapter.OnNdefPushCompleteCallback: callback, or null to disable"], ["@B_android#app#Activity_E@", "Activity: activity for which the NDEF message will be pushed"], ["@B_android#app#Activity_E@", "Activity: optional additional activities, however we strongly recommend to only register one at a time, and to do so in that activity's @B_android#app#Activity#onCreate_E@"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Set a callback on successful Android Beam (TM). This method may be called at any time before @B_android#app#Activity#onDestroy_E@, but the callback can only occur when the specified activity(s) are in resumed (foreground) state. The recommended approach is to call this method during your Activity's @B_android#app#Activity#onCreate_E@ - see sample code below. This method does not immediately perform any I/O or blocking work, so is safe to call on your main thread. The API allows for multiple activities to be specified at a time, but it is strongly recommended to just register one at a time, and to do so during the activity's @B_android#app#Activity#onCreate_E@. For example: Do not pass in an Activity that has already been through @B_android#app#Activity#onDestroy_E@. This is guaranteed if you call this API during @B_android#app#Activity#onCreate_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setOnNdefPushCompleteCallback (NfcAdapter.OnNdefPushCompleteCallback callback, Activity activity, Activity... activities)"}, "isSecureNfcSupported()": {"Returns": [["boolean", "True if device supports Secure NFC, false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the device supports Secure NFC functionality.", "history": "Added in API level 29", "FullName": "public boolean isSecureNfcSupported ()"}, "enableForegroundDispatch(android.app.Activity,android.app.PendingIntent,android.content.IntentFilter[],java.lang.String[][])": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the Activity to dispatch to"], ["@B_android#app#PendingIntent_E@", "PendingIntent: the PendingIntent to start for the dispatch"], ["@B_android#content#IntentFilter_E@", "IntentFilter: the IntentFilters to override dispatching for, or null to always dispatch"], ["@B_java#lang#String_E@", "String: the tech lists used to perform matching for dispatching of the @B_android#nfc#NfcAdapter#ACTION_TECH_DISCOVERED_E@ intent"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the Activity is not currently in the foreground"], ["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable foreground dispatch to the given Activity. This will give give priority to the foreground activity when dispatching a discovered @B_android#nfc#Tag_E@ to an application. If any IntentFilters are provided to this method they are used to match dispatch Intents for both the @B_android#nfc#NfcAdapter#ACTION_NDEF_DISCOVERED_E@ and @B_android#nfc#NfcAdapter#ACTION_TAG_DISCOVERED_E@. Since @B_android#nfc#NfcAdapter#ACTION_TECH_DISCOVERED_E@ relies on meta data outside of the IntentFilter matching for that dispatch Intent is handled by passing in the tech lists separately. Each first level entry in the tech list represents an array of technologies that must all be present to match. If any of the first level sets match then the dispatch is routed through the given PendingIntent. In other words, the second level is ANDed together and the first level entries are ORed together. If you pass null for both the filters and techLists parameters that acts a wild card and will cause the foreground activity to receive all tags via the @B_android#nfc#NfcAdapter#ACTION_TAG_DISCOVERED_E@ intent. This method must be called from the main thread, and only when the activity is in the foreground (resumed). Also, activities must call @B_android#nfc#NfcAdapter#disableForegroundDispatch_E@ before the completion of their @B_android#app#Activity#onPause_E@ callback to disable foreground dispatch after it has been enabled. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void enableForegroundDispatch (Activity activity, PendingIntent intent, IntentFilter[] filters, String[][] techLists)"}, "isSecureNfcEnabled()": {"Returns": [["boolean", "True if Secure NFC is enabled, false otherwise"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."], ["@B_java#lang#UnsupportedOperationException_E@", "if device doesn't support Secure NFC functionality. @B_android#nfc#NfcAdapter#isSecureNfcSupported_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Checks Secure NFC feature is enabled.", "history": "Added in API level 29", "FullName": "public boolean isSecureNfcEnabled ()"}, "getDefaultAdapter(android.content.Context)": {"Returns": [["@B_android#nfc#NfcAdapter_E@", "the default NFC adapter, or null if no NFC adapter exists"]], "Parameters": [["@B_android#content#Context_E@", "Context: the calling application's context"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to get the default NFC Adapter. Most Android devices will only have one NFC Adapter (NFC Controller). This helper is the equivalent of:", "history": "Added in API level 10", "FullName": "public static NfcAdapter getDefaultAdapter (Context context)"}, "setNdefPushMessage(android.nfc.NdefMessage,android.app.Activity,android.app.Activity...)": {"Returns": [], "Parameters": [["@B_android#nfc#NdefMessage_E@", "NdefMessage: NDEF message to push over NFC, or null to disable"], ["@B_android#app#Activity_E@", "Activity: activity for which the NDEF message will be pushed"], ["@B_android#app#Activity_E@", "Activity: optional additional activities, however we strongly recommend to only register one at a time, and to do so in that activity's @B_android#app#Activity#onCreate_E@"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Set a static @B_android#nfc#NdefMessage_E@ to send using Android Beam (TM). This method may be called at any time before @B_android#app#Activity#onDestroy_E@, but the NDEF message is only made available for NDEF push when the specified activity(s) are in resumed (foreground) state. The recommended approach is to call this method during your Activity's @B_android#app#Activity#onCreate_E@ - see sample code below. This method does not immediately perform any I/O or blocking work, so is safe to call on your main thread. Only one NDEF message can be pushed by the currently resumed activity. If both @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ and @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ are set, then the callback will take priority. If neither @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ or @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ have been called for your activity, then the Android OS may choose to send a default NDEF message on your behalf, such as a URI for your application. If @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ is called with a null NDEF message, and/or @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ is called with a null callback, then NDEF push will be completely disabled for the specified activity(s). This also disables any default NDEF message the Android OS would have otherwise sent on your behalf for those activity(s). If you want to prevent the Android OS from sending default NDEF messages completely (for all activities), you can include a <meta-data> element inside the <application> element of your AndroidManifest.xml file, like this: The API allows for multiple activities to be specified at a time, but it is strongly recommended to just register one at a time, and to do so during the activity's @B_android#app#Activity#onCreate_E@. For example: If your Activity wants to dynamically generate an NDEF message, then set a callback using @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ instead of a static message. Do not pass in an Activity that has already been through @B_android#app#Activity#onDestroy_E@. This is guaranteed if you call this API during @B_android#app#Activity#onCreate_E@. For sending large content such as pictures and songs, consider using @B_android#nfc#NfcAdapter#setBeamPushUris_E@, which switches to alternate transports such as Bluetooth to achieve a fast transfer rate. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setNdefPushMessage (NdefMessage message, Activity activity, Activity... activities)"}, "disableForegroundDispatch(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: the Activity to disable dispatch to"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the Activity has already been paused"], ["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable foreground dispatch to the given activity. After calling @B_android#nfc#NfcAdapter#enableForegroundDispatch_E@, an activity must call this method before its @B_android#app#Activity#onPause_E@ callback completes. This method must be called from the main thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void disableForegroundDispatch (Activity activity)"}, "setBeamPushUrisCallback(android.nfc.NfcAdapter.CreateBeamUrisCallback,android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#nfc#NfcAdapter#CreateBeamUrisCallback_E@", "NfcAdapter.CreateBeamUrisCallback: callback, or null to disable"], ["@B_android#app#Activity_E@", "Activity: activity for which the Uri(s) will be pushed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Set a callback that will dynamically generate one or more @B_android#net#Uri_E@s to send using Android Beam (TM). Every Uri the callback provides must have either scheme 'file' or scheme 'content'. For the data provided through this callback, Android Beam tries to switch to alternate transports such as Bluetooth to achieve a fast transfer speed. Hence this method is very suitable for transferring large files such as pictures or songs. The receiving side will store the content of each Uri in a file and present a notification to the user to open the file with a @B_android#content#Intent_E@ with action @B_android#content#Intent#ACTION_VIEW_E@. If multiple URIs are sent, the @B_android#content#Intent_E@ will refer to the first of the stored files. This method may be called at any time before @B_android#app#Activity#onDestroy_E@, but the URI(s) are only made available for Android Beam when the specified activity(s) are in resumed (foreground) state. The recommended approach is to call this method during your Activity's @B_android#app#Activity#onCreate_E@ - see sample code below. This method does not immediately perform any I/O or blocking work, so is safe to call on your main thread. @B_android#nfc#NfcAdapter#setBeamPushUris_E@ and @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@ have priority over both @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ and @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@. If @B_android#nfc#NfcAdapter#setBeamPushUris_E@ is called with a null Uri array, and/or @B_android#nfc#NfcAdapter#setBeamPushUrisCallback_E@ is called with a null callback, then the Uri push will be completely disabled for the specified activity(s). Code example: Do not pass in an Activity that has already been through @B_android#app#Activity#onDestroy_E@. This is guaranteed if you call this API during @B_android#app#Activity#onCreate_E@. If this device does not support alternate transports such as Bluetooth or WiFI, calling this method does nothing. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 16 Deprecated in API level 29", "FullName": "public void setBeamPushUrisCallback (NfcAdapter.CreateBeamUrisCallback callback, Activity activity)"}, "setNdefPushMessageCallback(android.nfc.NfcAdapter.CreateNdefMessageCallback,android.app.Activity,android.app.Activity...)": {"Returns": [], "Parameters": [["@B_android#nfc#NfcAdapter#CreateNdefMessageCallback_E@", "NfcAdapter.CreateNdefMessageCallback: callback, or null to disable"], ["@B_android#app#Activity_E@", "Activity: activity for which the NDEF message will be pushed"], ["@B_android#app#Activity_E@", "Activity: optional additional activities, however we strongly recommend to only register one at a time, and to do so in that activity's @B_android#app#Activity#onCreate_E@"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if FEATURE_NFC is unavailable."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "this feature is deprecated. File sharing can work using other technology like Bluetooth. Set a callback that dynamically generates NDEF messages to send using Android Beam (TM). This method may be called at any time before @B_android#app#Activity#onDestroy_E@, but the NDEF message callback can only occur when the specified activity(s) are in resumed (foreground) state. The recommended approach is to call this method during your Activity's @B_android#app#Activity#onCreate_E@ - see sample code below. This method does not immediately perform any I/O or blocking work, so is safe to call on your main thread. Only one NDEF message can be pushed by the currently resumed activity. If both @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ and @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ are set, then the callback will take priority. If neither @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ or @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ have been called for your activity, then the Android OS may choose to send a default NDEF message on your behalf, such as a URI for your application. If @B_android#nfc#NfcAdapter#setNdefPushMessage_E@ is called with a null NDEF message, and/or @B_android#nfc#NfcAdapter#setNdefPushMessageCallback_E@ is called with a null callback, then NDEF push will be completely disabled for the specified activity(s). This also disables any default NDEF message the Android OS would have otherwise sent on your behalf for those activity(s). If you want to prevent the Android OS from sending default NDEF messages completely (for all activities), you can include a <meta-data> element inside the <application> element of your AndroidManifest.xml file, like this: The API allows for multiple activities to be specified at a time, but it is strongly recommended to just register one at a time, and to do so during the activity's @B_android#app#Activity#onCreate_E@. For example: Do not pass in an Activity that has already been through @B_android#app#Activity#onDestroy_E@. This is guaranteed if you call this API during @B_android#app#Activity#onCreate_E@. For sending large content such as pictures and songs, consider using @B_android#nfc#NfcAdapter#setBeamPushUris_E@, which switches to alternate transports such as Bluetooth to achieve a fast transfer rate. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setNdefPushMessageCallback (NfcAdapter.CreateNdefMessageCallback callback, Activity activity, Activity... activities)"}}, "Inheritance": [], "ClassName": "android.nfc.NfcAdapter", "ClassDesc": "Represents the local NFC adapter. Use the helper @B_android#nfc#NfcAdapter#getDefaultAdapter_E@ to get the default NFC adapter for this Android device."}