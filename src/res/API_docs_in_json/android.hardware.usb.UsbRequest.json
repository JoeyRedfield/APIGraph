{"Functions": {"cancel()": {"Returns": [["boolean", "true if cancelling succeeded"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels a pending queue operation.", "history": "Added in API level 12", "FullName": "public boolean cancel ()"}, "queue(java.nio.ByteBuffer, int)": {"Returns": [["boolean", "true if the queueing operation succeeded"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the buffer containing the bytes to write, or location to store the results of a read. Position and array offset will be ignored and assumed to be 0. Limit and capacity will be ignored. Once the request @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@ the position will be set to the number of bytes read/written."], ["int", "int: number of bytes to read or write. Before @B_android#os#Build#VERSION_CODES#P_E@, a value larger than 16384 bytes would be truncated down to 16384. In API @B_android#os#Build#VERSION_CODES#P_E@ and after, any value of length is valid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#hardware#usb#UsbRequest#queue_E@ instead. Queues the request to send or receive data on its endpoint. For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints, the endpoint will attempt to read the given number of bytes into the specified buffer. If the queueing operation is successful, return true. The result will be returned via @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@", "history": "added in API level 12", "FullName": "public boolean queue (ByteBuffer buffer, int length)"}, "queue(java.nio.ByteBuffer)": {"Returns": [["boolean", "true if the queueing operation succeeded"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the buffer containing the bytes to send, or the buffer to fill. The state of the buffer is undefined until the request is returned by @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@. If the request failed the buffer will be unchanged; if the request succeeded the position of the buffer is incremented by the number of bytes sent/received. Before @B_android#os#Build#VERSION_CODES#P_E@, a buffer of length larger than 16384 bytes would throw IllegalArgumentException. In API @B_android#os#Build#VERSION_CODES#P_E@ and after, any size buffer is valid. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queues the request to send or receive data on its endpoint. For OUT endpoints, the remaining bytes of the buffer will be sent on the endpoint. For IN endpoints, the endpoint will attempt to fill the remaining bytes of the buffer. If the queueing operation is successful, return true. The result will be returned via @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@", "history": "Added in API level 26", "FullName": "public boolean queue (ByteBuffer buffer)"}, "getClientData()": {"Returns": [["@B_java#lang#Object_E@", "the client data for the request"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the client data for the request. This can be used in conjunction with @B_android#hardware#usb#UsbRequest#setClientData_E@ to associate another object with this request, which can be useful for maintaining state between calls to @B_android#hardware#usb#UsbRequest#queue_E@ and @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@", "history": "Added in API level 12", "FullName": "public Object getClientData ()"}, "UsbRequest()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public UsbRequest ()"}, "setClientData(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the client data for the request"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the client data for the request. This can be used in conjunction with @B_android#hardware#usb#UsbRequest#getClientData_E@ to associate another object with this request, which can be useful for maintaining state between calls to @B_android#hardware#usb#UsbRequest#queue_E@ and @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@", "history": "Added in API level 12", "FullName": "public void setClientData (Object data)"}, "initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)": {"Returns": [["boolean", "true if the request was successfully opened."]], "Parameters": [["@B_android#hardware#usb#UsbDeviceConnection_E@", "UsbDeviceConnection no parameter comment"], ["@B_android#hardware#usb#UsbEndpoint_E@", "UsbEndpoint: the endpoint to be used for this request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes the request so it can read or write data on the given endpoint. Whether the request allows reading or writing depends on the direction of the endpoint.", "history": "Added in API level 12", "FullName": "public boolean initialize (UsbDeviceConnection connection, UsbEndpoint endpoint)"}, "queue(java.nio.ByteBuffer,int)": {"Returns": [["boolean", "true if the queueing operation succeeded"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the buffer containing the bytes to write, or location to store the results of a read. Position and array offset will be ignored and assumed to be 0. Limit and capacity will be ignored. Once the request @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@ the position will be set to the number of bytes read/written."], ["int", "int: number of bytes to read or write. Before @B_android#os#Build#VERSION_CODES#P_E@, a value larger than 16384 bytes would be truncated down to 16384. In API @B_android#os#Build#VERSION_CODES#P_E@ and after, any value of length is valid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#hardware#usb#UsbRequest#queue_E@ instead. Queues the request to send or receive data on its endpoint. For OUT endpoints, the given buffer data will be sent on the endpoint. For IN endpoints, the endpoint will attempt to read the given number of bytes into the specified buffer. If the queueing operation is successful, return true. The result will be returned via @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@", "history": "Added in API level 12 Deprecated in API level 26", "FullName": "public boolean queue (ByteBuffer buffer, int length)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 12", "FullName": "protected void finalize ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases all resources related to this request.", "history": "Added in API level 12", "FullName": "public void close ()"}, "getEndpoint()": {"Returns": [["@B_android#hardware#usb#UsbEndpoint_E@", "the request's endpoint"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the endpoint for the request, or null if the request is not opened.", "history": "Added in API level 12", "FullName": "public UsbEndpoint getEndpoint ()"}}, "Inheritance": [], "ClassName": "android.hardware.usb.UsbRequest", "ClassDesc": "A class representing USB request packet. This can be used for both reading and writing data to or from a @B_android#hardware#usb#UsbDeviceConnection_E@. UsbRequests can be used to transfer data on bulk and interrupt endpoints. Requests on bulk endpoints can be sent synchronously via @B_android#hardware#usb#UsbDeviceConnection#bulkTransfer_E@ or asynchronously via @B_android#hardware#usb#UsbRequest#queue_E@ and @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@. Requests on interrupt endpoints are only send and received asynchronously. Requests on endpoint zero are not supported by this class; use @B_android#hardware#usb#UsbDeviceConnection#controlTransfer_E@ for endpoint zero requests instead."}