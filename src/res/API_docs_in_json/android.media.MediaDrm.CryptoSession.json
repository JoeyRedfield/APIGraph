{"Functions": {"verify(byte[], byte[], byte[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["byte[]", "byte: specifies which key to useThis value must never be null."], ["byte[]", "byte: the data to verifyThis value must never be null."], ["byte[]", "byte: the reference signature which will be compared with the computed signature This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Verify a signature using the CryptoSessions's mac algorithm. Return true if the signatures match, false if they do no.", "history": "added in API level 18", "FullName": "public boolean verify (byte[] keyid, byte[] message, byte[] signature)"}, "encrypt(byte[],byte[],byte[])": {"Returns": [["byte[]", "This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to use This value must never be null."], ["byte[]", "byte: the data to encrypt This value must never be null."], ["byte[]", "byte: the initialization vector to use for the cipher This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encrypt data using the CryptoSession's cipher algorithm", "history": "Added in API level 18", "FullName": "public byte[] encrypt (byte[] keyid, byte[] input, byte[] iv)"}, "decrypt(byte[], byte[], byte[])": {"Returns": [["byte[]", "no returns description in source This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to useThis value must never be null."], ["byte[]", "byte: the data to encryptThis value must never be null."], ["byte[]", "byte: the initialization vector to use for the cipher This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decrypt data using the CryptoSessions's cipher algorithm", "history": "added in API level 18", "FullName": "public byte[] decrypt (byte[] keyid, byte[] input, byte[] iv)"}, "decrypt(byte[],byte[],byte[])": {"Returns": [["byte[]", "This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to use This value must never be null."], ["byte[]", "byte: the data to encrypt This value must never be null."], ["byte[]", "byte: the initialization vector to use for the cipher This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decrypt data using the CryptoSessions's cipher algorithm", "history": "Added in API level 18", "FullName": "public byte[] decrypt (byte[] keyid, byte[] input, byte[] iv)"}, "sign(byte[],byte[])": {"Returns": [["byte[]", "This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to use This value must never be null."], ["byte[]", "byte: the data for which a signature is to be computed This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sign data using the CryptoSessions's mac algorithm.", "history": "Added in API level 18", "FullName": "public byte[] sign (byte[] keyid, byte[] message)"}, "encrypt(byte[], byte[], byte[])": {"Returns": [["byte[]", "no returns description in source This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to useThis value must never be null."], ["byte[]", "byte: the data to encryptThis value must never be null."], ["byte[]", "byte: the initialization vector to use for the cipher This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Encrypt data using the CryptoSession's cipher algorithm", "history": "added in API level 18", "FullName": "public byte[] encrypt (byte[] keyid, byte[] input, byte[] iv)"}, "verify(byte[],byte[],byte[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["byte[]", "byte: specifies which key to use This value must never be null."], ["byte[]", "byte: the data to verify This value must never be null."], ["byte[]", "byte: the reference signature which will be compared with the computed signature This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Verify a signature using the CryptoSessions's mac algorithm. Return true if the signatures match, false if they do no.", "history": "Added in API level 18", "FullName": "public boolean verify (byte[] keyid, byte[] message, byte[] signature)"}, "sign(byte[], byte[])": {"Returns": [["byte[]", "no returns description in source This value will never be null."]], "Parameters": [["byte[]", "byte: specifies which key to useThis value must never be null."], ["byte[]", "byte: the data for which a signature is to be computed This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sign data using the CryptoSessions's mac algorithm.", "history": "added in API level 18", "FullName": "public byte[] sign (byte[] keyid, byte[] message)"}}, "Inheritance": [], "ClassName": "android.media.MediaDrm.CryptoSession", "ClassDesc": "In addition to supporting decryption of DASH Common Encrypted Media, the MediaDrm APIs provide the ability to securely deliver session keys from an operator's session key server to a client device, based on the factory-installed root of trust, and then perform encrypt, decrypt, sign and verify operations with the session key on arbitrary user data. The CryptoSession class implements generic encrypt/decrypt/sign/verify methods based on the established session keys. These keys are exchanged using the getKeyRequest/provideKeyResponse methods. Applications of this capability could include securing various types of purchased or private content, such as applications, books and other media, photos or media delivery protocols. Operators can create session key servers that are functionally similar to a license key server, except that instead of receiving license key requests and providing encrypted content keys which are used specifically to decrypt A/V media content, the session key server receives session key requests and provides encrypted session keys which can be used for general purpose crypto operations. A CryptoSession is obtained using @B_android#media#MediaDrm#getCryptoSession_E@"}