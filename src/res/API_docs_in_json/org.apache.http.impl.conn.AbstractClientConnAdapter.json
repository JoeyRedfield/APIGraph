{"Functions": {"getManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected ClientConnectionManager getManager ()"}, "isMarkedReusable()": {"Returns": [["", "true if this connection is marked as being in a reusable communication state, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this connection is in a reusable communication state. See @B_org#apache#http#conn#ManagedClientConnection#markReusable_E@ and @B_org#apache#http#conn#ManagedClientConnection#unmarkReusable_E@ for details.", "history": "Added in API level 1", "FullName": "public boolean isMarkedReusable ()"}, "receiveResponseEntity(org.apache.http.HttpResponse)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "the response to attach the entity to"]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the next response entity available from this connection and attaches it to an existing HttpResponse object.", "history": "Added in API level 1", "FullName": "public void receiveResponseEntity (HttpResponse response)"}, "receiveResponseHeader()": {"Returns": [["", "a new HttpResponse object with status line and headers initialized."]], "Parameters": [], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the request line and headers of the next response available from this connection. The caller should examine the HttpResponse object to find out if it should try to receive a response entity as well.", "history": "Added in API level 1", "FullName": "public HttpResponse receiveResponseHeader ()"}, "releaseConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the connection with the option of keep-alive. This is a \"graceful\" release and may cause IO operations for consuming the remainder of a response entity. Use @B_org#apache#http#conn#ConnectionReleaseTrigger#abortConnection_E@ for a hard release. The connection may be reused as specified by the duration.", "history": "Added in API level 1", "FullName": "public void releaseConnection ()"}, "isResponseAvailable(int)": {"Returns": [["", "true if data is available; false if there was no data available even after waiting for timeout milliseconds."]], "Parameters": [["int", "the maximum time in milliseconds to wait for data"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks if response data is available from the connection. May wait for the specified time until some data becomes available. Note that some implementations may completely ignore the timeout parameter.", "history": "Added in API level 1", "FullName": "public boolean isResponseAvailable (int timeout)"}, "setSocketTimeout(int)": {"Returns": [], "Parameters": [["int", "timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the socket timeout value.", "history": "Added in API level 1", "FullName": "public void setSocketTimeout (int timeout)"}, "AbstractClientConnAdapter(org.apache.http.conn.ClientConnectionManager, org.apache.http.conn.OperatedClientConnection)": {"Returns": [], "Parameters": [["@B_org#apache#http#conn#ClientConnectionManager_E@", "the connection manager, or null"], ["@B_org#apache#http#conn#OperatedClientConnection_E@", "the connection to wrap, or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new connection adapter. The adapter is initially @B_org#apache#http#impl#conn#AbstractClientConnAdapter#isMarkedReusable_E@ as reusable.", "history": "Added in API level 1", "FullName": "protected AbstractClientConnAdapter (ClientConnectionManager mgr, OperatedClientConnection conn)"}, "setIdleDuration(long, java.util.concurrent.TimeUnit)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration that this connection can remain idle before it is reused. The connection should not be used again if this time elapses. The idle duration must be reset after each request sent over this connection. The elapsed time starts counting when the connection is released, which is typically after the headers (and any response body, if present) is fully consumed.", "history": "Added in API level 1", "FullName": "public void setIdleDuration (long duration, TimeUnit unit)"}, "markReusable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this connection as being in a reusable communication state. The checkpoints for reuseable communication states (in the absence of pipelining) are before sending a request and after receiving the response in it's entirety. The connection will automatically clear the checkpoint when used for communication. A call to this method indicates that the next checkpoint has been reached. A reusable communication state is necessary but not sufficient for the connection to be reused. A @B_org#apache#http#conn#ManagedClientConnection#getRoute_E@ mismatch, the connection being closed, or other circumstances might prevent reuse.", "history": "Added in API level 1", "FullName": "public void markReusable ()"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes out all pending buffered data over the open connection.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "sendRequestHeader(org.apache.http.HttpRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpRequest_E@", "the request whose headers to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request line and all headers over the connection.", "history": "Added in API level 1", "FullName": "public void sendRequestHeader (HttpRequest request)"}, "sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpEntityEnclosingRequest_E@", "the request whose entity to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request entity over the connection.", "history": "Added in API level 1", "FullName": "public void sendRequestEntity (HttpEntityEnclosingRequest request)"}, "abortConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the connection without the option of keep-alive. This is a \"hard\" release that implies a shutdown of the connection. Use @B_org#apache#http#conn#ConnectionReleaseTrigger#releaseConnection_E@ for a graceful release.", "history": "Added in API level 1", "FullName": "public void abortConnection ()"}, "assertValid(org.apache.http.conn.OperatedClientConnection)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if there is no wrapped connection or connection has been aborted"]], "SeeAlso": [], "Permissions": [], "Description": "Asserts that there is a wrapped connection to delegate to.", "history": "Added in API level 1", "FullName": "protected final void assertValid (OperatedClientConnection wrappedConn)"}, "detach()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Detaches this adapter from the wrapped connection. This adapter becomes useless.", "history": "Added in API level 1", "FullName": "protected void detach ()"}, "unmarkReusable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Marks this connection as not being in a reusable state. This can be used immediately before releasing this connection to prevent it's reuse. Reasons for preventing reuse include error conditions and the evaluation of a @B_org#apache#http#ConnectionReuseStrategy_E@. @B_org#apache#http#conn#ManagedClientConnection#markReusable_E@.", "history": "Added in API level 1", "FullName": "public void unmarkReusable ()"}, "getSSLSession()": {"Returns": [["", "the underlying SSL session if available, null otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the SSL session of the underlying connection, if any. If this connection is open, and the underlying socket is an @B_javax#net#ssl#SSLSocket_E@, the SSL session of that socket is obtained. This is a potentially blocking operation. @B_org#apache#http#conn#ManagedClientConnection#isSecure_E@. Plain sockets may be considered secure, for example if they are connected to a known host in the same network segment. On the other hand, SSL sockets may be considered insecure, for example depending on the chosen cipher suite.", "history": "Added in API level 1", "FullName": "public SSLSession getSSLSession ()"}, "getRemoteAddress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public InetAddress getRemoteAddress ()"}, "getRemotePort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getRemotePort ()"}, "getSocketTimeout()": {"Returns": [["", "positive value in milliseconds if a timeout is set, 0 if timeout is disabled or -1 if timeout is undefined."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket timeout value.", "history": "Added in API level 1", "FullName": "public int getSocketTimeout ()"}, "getLocalAddress()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public InetAddress getLocalAddress ()"}, "getWrappedConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected OperatedClientConnection getWrappedConnection ()"}, "isOpen()": {"Returns": [["", "true if it is open, false if it is closed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this connection is open.", "history": "Added in API level 1", "FullName": "public boolean isOpen ()"}, "getMetrics()": {"Returns": [["", "HttpConnectionMetrics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection of connection metrcis", "history": "Added in API level 1", "FullName": "public HttpConnectionMetrics getMetrics ()"}, "isStale()": {"Returns": [["", "true if attempts to use this connection are likely to succeed, or false if they are likely to fail and this connection should be closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this connection has gone down. Network connections may get closed during some time of inactivity for several reasons. The next time a read is attempted on such a connection it will throw an IOException. This method tries to alleviate this inconvenience by trying to find out if a connection is still usable. Implementations may do that by attempting a read with a very small timeout. Thus this method may block for a small amount of time before returning a result. It is therefore an", "history": "Added in API level 1", "FullName": "public boolean isStale ()"}, "assertNotAborted()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#InterruptedIOException_E@", "if the connection has been aborted"]], "SeeAlso": [], "Permissions": [], "Description": "Asserts that the connection has not been aborted.", "history": "Added in API level 1", "FullName": "protected final void assertNotAborted ()"}, "isSecure()": {"Returns": [["", "true if this connection is secure, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this connection is secure. The return value is well-defined only while the connection is open. It may change even while the connection is open.", "history": "Added in API level 1", "FullName": "public boolean isSecure ()"}, "getLocalPort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getLocalPort ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.conn.AbstractClientConnAdapter", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Abstract adapter from @B_org#apache#http#conn#OperatedClientConnection_E@ to @B_org#apache#http#conn#ManagedClientConnection_E@ client connections. Read and write methods are delegated to the wrapped connection. Operations affecting the connection state have to be implemented by derived classes. Operations for querying the connection state are delegated to the wrapped connection if there is one, or return a default value if there is none. This adapter tracks the checkpoints for reusable communication states, as indicated by @B_org#apache#http#impl#conn#AbstractClientConnAdapter#markReusable_E@ and queried by @B_org#apache#http#impl#conn#AbstractClientConnAdapter#isMarkedReusable_E@. All send and receive operations will automatically clear the mark. Connection release calls are delegated to the connection manager, if there is one. @B_org#apache#http#impl#conn#AbstractClientConnAdapter#abortConnection_E@ will clear the reusability mark first. The connection manager is expected to tolerate multiple calls to the release method."}