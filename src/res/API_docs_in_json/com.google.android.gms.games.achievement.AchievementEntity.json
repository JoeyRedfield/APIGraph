{"Functions": {"getUnlockedImageUri()": {"Returns": [["", "The image URI for the achievement's unlocked image icon, or null if the achievement has no unlocked image."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a URI that can be used to load the achievement's unlocked image icon. Returns null if the achievement has no unlocked image. To retrieve the Image from the @B_android#net#Uri_E@, use @B_com#google#android#gms#common#images#ImageManager_E@.", "history": "", "FullName": "public Uri getUnlockedImageUri ()"}, "getFormattedTotalSteps()": {"Returns": [["", "The total number of steps necessary to unlock this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the total number of steps necessary to unlock this achievement, formatted for the user's locale; only applicable for @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@ achievement types.", "history": "", "FullName": "public String getFormattedTotalSteps ()"}, "getTotalSteps()": {"Returns": [["", "The total number of steps necessary to unlock this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the total number of steps necessary to unlock this achievement; only applicable for @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@ achievement types.", "history": "", "FullName": "public int getTotalSteps ()"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "getFormattedCurrentSteps(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale) into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public void getFormattedCurrentSteps (CharArrayBuffer dataOut)"}, "getFormattedCurrentSteps()": {"Returns": [["", "The formatted number of steps this user has gone toward unlocking this achievement,"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number of steps this user has gone toward unlocking this achievement (formatted for the user's locale); only applicable for @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@ achievement types.", "history": "", "FullName": "public String getFormattedCurrentSteps ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object obj)"}, "getUnlockedImageUrl()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getUnlockedImageUrl ()"}, "getXpValue()": {"Returns": [["", "XP value given to players for unlocking this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the XP value of this achievement.", "history": "", "FullName": "public long getXpValue ()"}, "getAchievementId()": {"Returns": [["", "The achievement ID."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the ID of this achievement.", "history": "", "FullName": "public String getAchievementId ()"}, "getFormattedTotalSteps(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the total number of steps necessary to unlock this achievement (formatted for the user's locale) into the given @B_android#database#CharArrayBuffer_E@; only applicable for @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@ achievement types.", "history": "", "FullName": "public void getFormattedTotalSteps (CharArrayBuffer dataOut)"}, "getLastUpdatedTimestamp()": {"Returns": [["", "Timestamp at which this achievement was last updated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the timestamp (in millseconds since epoch) at which this achievement was last updated. If the achievement has never been updated, this will return -1.", "history": "", "FullName": "public long getLastUpdatedTimestamp ()"}, "isDataValid()": {"Returns": [["", "whether or not the object is valid for use."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check to see if this object is valid for use. If the object is still volatile, this method will indicate whether or not the object can be safely used. The output of a call to @B_com#google#android#gms#common#data#Freezable#freeze_E@ will always be valid.", "history": "", "FullName": "public boolean isDataValid ()"}, "getCurrentSteps()": {"Returns": [["", "The number of steps this user has gone toward unlocking this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the number of steps this user has gone toward unlocking this achievement; only applicable for @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@ achievement types.", "history": "", "FullName": "public int getCurrentSteps ()"}, "getPlayer()": {"Returns": [["", "The player associated with this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the player information associated with this achievement. Note that this object is a volatile representation, so it is not safe to cache the output of this directly. Instead, cache the result of @B_com#google#android#gms#common#data#Freezable#freeze_E@.", "history": "", "FullName": "public Player getPlayer ()"}, "getState()": {"Returns": [["", "The state of this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the state of the achievement - one of @B_com#google#android#gms#games#achievement#Achievement#STATE_UNLOCKED_E@, @B_com#google#android#gms#games#achievement#Achievement#STATE_REVEALED_E@, or @B_com#google#android#gms#games#achievement#Achievement#STATE_HIDDEN_E@.", "history": "", "FullName": "public int getState ()"}, "getName(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the achievement name into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public void getName (CharArrayBuffer dataOut)"}, "getDescription()": {"Returns": [["", "The achievement description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the description for this achievement.", "history": "", "FullName": "public String getDescription ()"}, "freeze()": {"Returns": [["", "A concrete implementation of the data object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freeze a volatile representation into an immutable representation. Objects returned from this call are safe to cache. Note that the output of freeze may not be identical to the parent object, but should be equal. In other words:", "history": "", "FullName": "public Achievement freeze ()"}, "getName()": {"Returns": [["", "The achievement name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of this achievement.", "history": "", "FullName": "public String getName ()"}, "getRevealedImageUri()": {"Returns": [["", "The image URI for the achievement's revealed image icon, or null if the achievement has no revealed image."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a URI that can be used to load the achievement's revealed image icon. Returns null if the achievement has no revealed image. To retrieve the Image from the @B_android#net#Uri_E@, use @B_com#google#android#gms#common#images#ImageManager_E@.", "history": "", "FullName": "public Uri getRevealedImageUri ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getDescription(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the achievement description into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public void getDescription (CharArrayBuffer dataOut)"}, "getType()": {"Returns": [["", "The type of this achievement."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the type of this achievement - one of @B_com#google#android#gms#games#achievement#Achievement#TYPE_STANDARD_E@ or @B_com#google#android#gms#games#achievement#Achievement#TYPE_INCREMENTAL_E@.", "history": "", "FullName": "public int getType ()"}, "getRevealedImageUrl()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getRevealedImageUrl ()"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.games.achievement.AchievementEntity", "ClassDesc": "Data object representing a set of Achievement data. This is immutable, and therefore safe to cache or store. Note, however, that the data it represents may grow stale. This class exists solely to support parceling these objects and should not be used directly."}