{"Functions": {"appendWhereEscapeString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the chunk of text to append to the WHERE clause. it will be escaped to avoid SQL injection attacks This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append a chunk to the WHERE clause of the query. All chunks appended are surrounded by parenthesis and ANDed with the selection passed to @B_android#database#sqlite#SQLiteQueryBuilder#query_E@. The final WHERE clause looks like: WHERE (<append chunk 1><append chunk2>) AND (<query() selection parameter>)", "history": "Added in API level 1", "FullName": "public void appendWhereEscapeString (String inWhere)"}, "buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the resulting SQL SELECT statement"]], "Parameters": [["@B_java#lang#String_E@", "String: an array of SQL SELECT statements, all of which must have the same columns as the same positions in their results"], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."], ["@B_java#lang#String_E@", "String: The limit clause, which applies to the entire union result set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Given a set of subqueries, all of which are SELECT statements, construct a query that returns the union of what those subqueries return.", "history": "Added in API level 1", "FullName": "public String buildUnionQuery (String[] subQueries, String sortOrder, String limit)"}, "SQLiteQueryBuilder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public SQLiteQueryBuilder ()"}, "isStrict()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get if the query is marked as strict, as last configured by @B_android#database#sqlite#SQLiteQueryBuilder#setStrict_E@.", "history": "Added in API level 29", "FullName": "public boolean isStrict ()"}, "buildQuery(java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method's signature is misleading since no SQL parameter substitution is carried out. The selection arguments parameter does not get used at all. To avoid confusion, call @B_android#database#sqlite#SQLiteQueryBuilder#buildQuery_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String buildQuery (String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)"}, "query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a cursor over the result set"]], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: the database to query on"], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#query_E@"], "Permissions": [], "Description": "Perform a query by combining all current settings and the information passed into this method.", "history": "Added in API level 1", "FullName": "public Cursor query (SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder)"}, "buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set<java.lang.String>,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the resulting SQL SELECT statement"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the result column whose cells will contain the name of the table from which each row was drawn."], ["@B_java#lang#String_E@", "String: the names of the columns to appear in the result. This may include columns that do not appear in the table this SELECT is querying (i.e. mTables), but that do appear in one of the other tables in the UNION query that we are constructing."], ["@B_java#util#Set_E@", "Set: a Set of the names of the columns that appear in this table (i.e. in the table whose name is mTables). Since columns in unionColumns include columns that appear only in other tables, we use this array to distinguish which ones actually are present. Other columns will have NULL values for results from this subquery."], ["int", "int: all columns in unionColumns before this index are included under the assumption that they're computed and therefore won't appear in columnsPresentInTable, e.g. \"date * 1000 as normalized_date\""], ["@B_java#lang#String_E@", "String: the value used for the type-discriminator column in this subquery"], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery.", "history": "Added in API level 11", "FullName": "public String buildUnionSubQuery (String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String groupBy, String having)"}, "buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the SQL query string"]], "Parameters": [["boolean", "boolean: true if you want each row to be unique, false otherwise."], ["@B_java#lang#String_E@", "String: The table names to compile the query against."], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."], ["@B_java#lang#String_E@", "String: Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Build an SQL query string from the given clauses.", "history": "Added in API level 1", "FullName": "public static String buildQueryString (boolean distinct, String tables, String[] columns, String where, String groupBy, String having, String orderBy, String limit)"}, "getCursorFactory()": {"Returns": [["@B_android#database#sqlite#SQLiteDatabase#CursorFactory_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the cursor factory to be used for the query, as last configured by @B_android#database#sqlite#SQLiteQueryBuilder#setCursorFactory_E@.", "history": "Added in API level 29", "FullName": "public SQLiteDatabase.CursorFactory getCursorFactory ()"}, "isDistinct()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get if the query is marked as DISTINCT, as last configured by @B_android#database#sqlite#SQLiteQueryBuilder#setDistinct_E@.", "history": "Added in API level 29", "FullName": "public boolean isDistinct ()"}, "buildQuery(java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the resulting SQL SELECT statement"]], "Parameters": [["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."], ["@B_java#lang#String_E@", "String: Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery.", "history": "Added in API level 11", "FullName": "public String buildQuery (String[] projectionIn, String selection, String groupBy, String having, String sortOrder, String limit)"}, "buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set<java.lang.String>,int,java.lang.String,java.lang.String,java.lang.String[],java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#util#Set_E@", "Set no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method's signature is misleading since no SQL parameter substitution is carried out. The selection arguments parameter does not get used at all. To avoid confusion, call @B_android#database#sqlite#SQLiteQueryBuilder#buildUnionSubQuery_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String buildUnionSubQuery (String typeDiscriminatorColumn, String[] unionColumns, Set<String> columnsPresentInTable, int computedColumnsOffset, String typeDiscriminatorValue, String selection, String[] selectionArgs, String groupBy, String having)"}, "appendColumns(java.lang.StringBuilder,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#StringBuilder_E@", "StringBuilder no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add the names that are non-null in columns to s, separating them with commas.", "history": "Added in API level 1", "FullName": "public static void appendColumns (StringBuilder s, String[] columns)"}, "appendWhereStandalone(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the standalone expression to append to the WHERE clause. It will be wrapped in parentheses when it's appended. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a standalone chunk to the WHERE clause of this query. This method differs from @B_android#database#sqlite#SQLiteQueryBuilder#appendWhere_E@ in that it automatically appends AND to any existing WHERE clause already under construction before appending the given standalone expression wrapped in parentheses.", "history": "Added in API level 29", "FullName": "public void appendWhereStandalone (CharSequence inWhere)"}, "setProjectionMap(java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: maps from the user column names to the database column names This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the projection map for the query. The projection map maps from column names that the caller passes into query to database column names. This is useful for renaming columns as well as disambiguating column names when doing joins. For example you could map \"name\" to \"people.name\". If a projection map is set it must contain all column names the user may request, even if the key and value are the same.", "history": "Added in API level 1", "FullName": "public void setProjectionMap (Map<String, String> columnMap)"}, "getProjectionMap()": {"Returns": [["@B_java#util#Map_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the projection map for the query, as last configured by @B_android#database#sqlite#SQLiteQueryBuilder#setProjectionMap_E@.", "history": "Added in API level 29", "FullName": "public Map<String, String> getProjectionMap ()"}, "setCursorFactory(android.database.sqlite.SQLiteDatabase.CursorFactory)": {"Returns": [], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase#CursorFactory_E@", "SQLiteDatabase.CursorFactory: the factory to use. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the cursor factory to be used for the query. You can use one factory for all queries on a database but it is normally easier to specify the factory when doing this query.", "history": "Added in API level 1", "FullName": "public void setCursorFactory (SQLiteDatabase.CursorFactory factory)"}, "setDistinct(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: if true the query is DISTINCT, otherwise it isn't"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Mark the query as DISTINCT.", "history": "Added in API level 1", "FullName": "public void setDistinct (boolean distinct)"}, "appendWhere(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the chunk of text to append to the WHERE clause. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Append a chunk to the WHERE clause of the query. All chunks appended are surrounded by parenthesis and ANDed with the selection passed to @B_android#database#sqlite#SQLiteQueryBuilder#query_E@. The final WHERE clause looks like: WHERE (<append chunk 1><append chunk2>) AND (<query() selection parameter>)", "history": "Added in API level 1", "FullName": "public void appendWhere (CharSequence inWhere)"}, "update(android.database.sqlite.SQLiteDatabase,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows updated"]], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: the database to update on This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: This value must never be null."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform an update by combining all current settings and the information passed into this method.", "history": "Added in API level 29", "FullName": "public int update (SQLiteDatabase db, ContentValues values, String selection, String[] selectionArgs)"}, "query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)": {"Returns": [["@B_android#database#Cursor_E@", "a cursor over the result set"]], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: the database to query on"], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."], ["@B_java#lang#String_E@", "String: Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause."], ["@B_android#os#CancellationSignal_E@", "CancellationSignal: A signal to cancel the operation in progress, or null if none. If the operation is canceled, then @B_android#os#OperationCanceledException_E@ will be thrown when the query is executed."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#query_E@"], "Permissions": [], "Description": "Perform a query by combining all current settings and the information passed into this method.", "history": "Added in API level 16", "FullName": "public Cursor query (SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit, CancellationSignal cancellationSignal)"}, "delete(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows deleted"]], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: the database to delete on This value must never be null."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a delete by combining all current settings and the information passed into this method.", "history": "Added in API level 29", "FullName": "public int delete (SQLiteDatabase db, String selection, String[] selectionArgs)"}, "setTables(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the list of tables to query on This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the list of tables to query. Multiple tables can be specified to perform a join. For example: setTables(\"foo, bar\") setTables(\"foo LEFT OUTER JOIN bar ON (foo.id = bar.foo_id)\")", "history": "Added in API level 1", "FullName": "public void setTables (String inTables)"}, "setStrict(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set, the selection is verified against malicious arguments. When using this class to create a statement using @B_android#database#sqlite#SQLiteQueryBuilder#buildQueryString_E@, non-numeric limits will raise an exception. If a projection map is specified, fields not in that map will be ignored. If this class is used to execute the statement directly using @B_android#database#sqlite#SQLiteQueryBuilder#query_E@ or @B_android#database#sqlite#SQLiteQueryBuilder#query_E@, additionally also parenthesis escaping selection are caught. To summarize: To get maximum protection against malicious third party apps (for example content provider consumers), make sure to do the following: Set this value to true Use a projection map Use one of the query overloads instead of getting the statement as a sql string By default, this value is false.", "history": "Added in API level 14", "FullName": "public void setStrict (boolean strict)"}, "getTables()": {"Returns": [["@B_java#lang#String_E@", "the list of tables being queried This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of tables being queried", "history": "Added in API level 1", "FullName": "public String getTables ()"}, "query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a cursor over the result set"]], "Parameters": [["@B_android#database#sqlite#SQLiteDatabase_E@", "SQLiteDatabase: the database to query on"], ["@B_java#lang#String_E@", "String: A list of which columns to return. Passing null will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used."], ["@B_java#lang#String_E@", "String: A filter declaring which rows to return, formatted as an SQL WHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings."], ["@B_java#lang#String_E@", "String: A filter declaring how to group rows, formatted as an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped."], ["@B_java#lang#String_E@", "String: A filter declare which row groups to include in the cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used."], ["@B_java#lang#String_E@", "String: How to order the rows, formatted as an SQL ORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered."], ["@B_java#lang#String_E@", "String: Limits the number of rows returned by the query, formatted as LIMIT clause. Passing null denotes no LIMIT clause."]], "Throws": [], "SeeAlso": ["@B_android#content#ContentResolver#query_E@"], "Permissions": [], "Description": "Perform a query by combining all current settings and the information passed into this method.", "history": "Added in API level 1", "FullName": "public Cursor query (SQLiteDatabase db, String[] projectionIn, String selection, String[] selectionArgs, String groupBy, String having, String sortOrder, String limit)"}}, "Inheritance": [], "ClassName": "android.database.sqlite.SQLiteQueryBuilder", "ClassDesc": "This is a convenience class that helps build SQL queries to be sent to @B_android#database#sqlite#SQLiteDatabase_E@ objects."}