{"Functions": {"setMockLocation(android.location.Location)": {"Returns": [], "Parameters": [["Location", "The mock location. Must have a minimum number of fields set to be considered a valild location, as per documentation in the @B_android#location#Location_E@ class."]], "Throws": [["SecurityException", "if the ACCESS_MOCK_LOCATION permission is not present or the @B_android#provider#Settings#Secure#ALLOW_MOCK_LOCATION_E@ system setting is not enabled."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the mock location to be used for the location provider. This location will be used in place of any actual locations from the underlying providers (network or gps). @B_com#google#android#gms#location#LocationClient#setMockMode_E@ must be called and set to true prior to calling this method. Care should be taken in specifying the timestamps as many applications require them to be monotonically increasing.", "history": "", "FullName": "public void setMockLocation (Location mockLocation)"}, "getGeofenceTransition(android.content.Intent)": {"Returns": [["", "-1 if the intent is not generated for transition alert; Otherwise returns the GEOFENCE_TRANSITION_ flags value defined in @B_com#google#android#gms#location#Geofence_E@."]], "Parameters": [["Intent", "the intent generated for geofence alert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the transition type of geofence transition alert.", "history": "", "FullName": "public static int getGeofenceTransition (Intent intent)"}, "requestLocationUpdates(com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["@B_com#google#android#gms#location#LocationListener_E@", "The listener for the location updates."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates. This method is suited for the foreground use cases, more specifically for requesting locations while being connected to @B_com#google#android#gms#location#LocationClient_E@. For background use cases, the @B_android#app#PendingIntent_E@ version of the method is recommended, see @B_com#google#android#gms#location#LocationClient#requestLocationUpdates_E@. Any previous LocationRequests registered on this LocationListener will be replaced. Callbacks for LocationListener will be made on the calling thread, which must already be a prepared looper thread, such as the main thread of the calling Activity. The variant of this method with a @B_android#os#Looper_E@ is recommended for cases where the callback needs to happen on a specific thread. See @B_com#google#android#gms#location#LocationClient#requestLocationUpdates_E@.", "history": "", "FullName": "public void requestLocationUpdates (LocationRequest request, LocationListener listener)"}, "unregisterConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection failed listener from the GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection failed events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "isConnecting()": {"Returns": [["", "true if the client is attempting to connect to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is attempting to connect to the service.", "history": "", "FullName": "public boolean isConnecting ()"}, "requestLocationUpdates(com.google.android.gms.location.LocationRequest, android.app.PendingIntent)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["PendingIntent", "A pending intent to be sent for each location update."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates with a callback on the specified PendingIntent. This method is suited for the background use cases, more specifically for receiving location updates, even when the app has been killed by the system. In order to do so, use a @B_android#app#PendingIntent_E@ for a started service. For foreground use cases, the @B_com#google#android#gms#location#LocationListener_E@ version of the method is recommended, see @B_com#google#android#gms#location#LocationClient#requestLocationUpdates_E@. Any previous LocationRequests registered on this PendingIntent will be replaced. Location updates are sent with a key of @B_com#google#android#gms#location#LocationClient#KEY_LOCATION_CHANGED_E@ and a @B_android#location#Location_E@ value on the intent.", "history": "", "FullName": "public void requestLocationUpdates (LocationRequest request, PendingIntent callbackIntent)"}, "disconnect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the connection to Google Play services. No calls can be made on this object after calling this method.", "history": "", "FullName": "public void disconnect ()"}, "getTriggeringGeofences(android.content.Intent)": {"Returns": [["", "a list of geofences that triggers this geofence transition alert or null if the given intent is not generated for geofence transition alert"]], "Parameters": [["Intent", "the intent generated for geofence alert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of geofences that triggers this geofence transition alert.", "history": "", "FullName": "public static List<Geofence> getTriggeringGeofences (Intent intent)"}, "hasError(android.content.Intent)": {"Returns": [["", "true if an error triggered this intent otherwise false"]], "Parameters": [["Intent", "the intent generated for alert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether an error triggered this intent.", "history": "", "FullName": "public static boolean hasError (Intent intent)"}, "requestLocationUpdates(com.google.android.gms.location.LocationRequest, com.google.android.gms.location.LocationListener, android.os.Looper)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#location#LocationRequest_E@", "The location request for the updates."], ["@B_com#google#android#gms#location#LocationListener_E@", "The listener for the location updates."], ["Looper", "The Looper object whose message queue will be used to implement the callback mechanism, or null to make callbacks on the calling thread."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests location updates with a callback on the specified Looper thread. This method is suited for the foreground use cases,more specifically for requesting locations while being connected to @B_com#google#android#gms#location#LocationClient_E@. For background use cases, the @B_android#app#PendingIntent_E@ version of the method is recommended, see @B_com#google#android#gms#location#LocationClient#requestLocationUpdates_E@. Any previous LocationRequests registered on this LocationListener will be replaced. Callbacks for LocationListener will be made on the specified thread, which must already be a prepared looper thread. For cases where the callback can happen on the calling thread, the variant of this method without a @B_android#os#Looper_E@ can be used. See @B_com#google#android#gms#location#LocationClient#requestLocationUpdates_E@.", "history": "", "FullName": "public void requestLocationUpdates (LocationRequest request, LocationListener listener, Looper looper)"}, "removeGeofences(android.app.PendingIntent, com.google.android.gms.location.LocationClient.OnRemoveGeofencesResultListener)": {"Returns": [], "Parameters": [["PendingIntent", "the pending intent associated with the geofences that need to be removed."], ["@B_com#google#android#gms#location#LocationClient#OnRemoveGeofencesResultListener_E@", "the callback that receives the status code for this operation"]], "Throws": [["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["IllegalStateException", "if the connection to Google Play Store Services hasn't been established"], ["NullPointerException", "if intent or listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Removes all geofences associated with the given pendingIntent. Warning: please use @B_android#app#PendingIntent#FLAG_UPDATE_CURRENT_E@ rather than @B_android#app#PendingIntent#FLAG_CANCEL_CURRENT_E@ when creating the pending intent, otherwise you will not get the same pending intent you provided to @B_com#google#android#gms#location#LocationClient#addGeofences_E@ and thus the removal operation will remove nothing. @B_com#google#android#gms#location#LocationClient#OnRemoveGeofencesResultListener#onRemoveGeofencesByPendingIntentResult_E@ is called when geofences are successfully removed or fail to be removed. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public void removeGeofences (PendingIntent pendingIntent, LocationClient.OnRemoveGeofencesResultListener listener)"}, "addGeofences(java.util.List<com.google.android.gms.location.Geofence>, android.app.PendingIntent, com.google.android.gms.location.LocationClient.OnAddGeofencesResultListener)": {"Returns": [], "Parameters": [["List", "a list of geofences to be added. The geofences must be created using @B_com#google#android#gms#location#Geofence#Builder_E@."], ["PendingIntent", "a pending intent that will be used to generate an intent when matched geofence transition is observed"], ["@B_com#google#android#gms#location#LocationClient#OnAddGeofencesResultListener_E@", "the callback that receives the status code for this operation"]], "Throws": [["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["IllegalStateException", "if the connection to Google Play Store Services hasn't been established"], ["IllegalArgumentException", "if geofences is null or empty"], ["NullPointerException", "if intent or listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Sets alerts to be notified when the device enters or exits one of the specified geofences. If an existing geofence with the same request ID is already registered, the old geofence is replaced by the new one, and the new pendingIntent is used to generate intents for alerts. @B_com#google#android#gms#location#LocationClient#OnAddGeofencesResultListener#onAddGeofencesResult_E@ is called when geofences are successfully added or failed to be added. Refer to @B_com#google#android#gms#location#LocationClient#OnAddGeofencesResultListener#onAddGeofencesResult_E@ for possible errors when adding geofences. When a geofence transition (for example, entering or exiting) matches one of the transition filter (see @B_com#google#android#gms#location#Geofence#Builder#setTransitionTypes_E@) in the given geofence list, an intent is generated using the given pending intent. You can call @B_com#google#android#gms#location#LocationClient#getGeofenceTransition_E@ to get the transition type of this alert intent; call @B_com#google#android#gms#location#LocationClient#getTriggeringGeofences_E@ to get the geofences that triggered this intent and call @B_com#google#android#gms#location#LocationClient#getTriggeringLocation_E@ to get the location that triggered the geofence transition. In case network location provider is disabled by the user, the geofence service will stop updating, all registered geofences will be removed and an intent is generated by the provided pending intent. In this case, @B_com#google#android#gms#location#LocationClient#hasError_E@ returns true and @B_com#google#android#gms#location#LocationClient#getErrorCode_E@ returns @B_com#google#android#gms#location#LocationStatusCodes#GEOFENCE_NOT_AVAILABLE_E@. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public void addGeofences (List<Geofence> geofences, PendingIntent pendingIntent, LocationClient.OnAddGeofencesResultListener listener)"}, "getLastLocation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the best most recent location currently available. If a location is not available, which should happen very rarely, null will be returned. The best accuracy available while respecting the location permissions will be returned. This method provides a simplified way to get location. It is particularly well suited for applications that do not require an accurate location and that do not want to maintain extra logic for location updates.", "history": "", "FullName": "public Location getLastLocation ()"}, "removeLocationUpdates(android.app.PendingIntent)": {"Returns": [], "Parameters": [["PendingIntent", "The callback intent to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the given pending intent.", "history": "", "FullName": "public void removeLocationUpdates (PendingIntent callbackIntent)"}, "setMockMode(boolean)": {"Returns": [], "Parameters": [["boolean", "If true the location provider will be set to mock mode. If false it will be returned to its normal state."]], "Throws": [["SecurityException", "if the ACCESS_MOCK_LOCATION permission is not present or the @B_android#provider#Settings#Secure#ALLOW_MOCK_LOCATION_E@ system setting is not enabled."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether or not the location provider is in mock mode. The underlying providers (network and gps) will be stopped (except by direct @B_android#location#LocationManager_E@ access), and only locations specified in @B_com#google#android#gms#location#LocationClient#setMockLocation_E@ will be reported. This will effect all location clients connected using the @B_com#google#android#gms#location#LocationClient_E@, including geofencer clients (i.e. geofences can be triggered based on mock locations). The client must remain connected in order for mock mode to remain active. If the client dies the system will return to its normal state. Calls are not nested, and mock mode will be set directly regardless of previous calls.", "history": "", "FullName": "public void setMockMode (boolean isMockMode)"}, "isConnected()": {"Returns": [["", "true if the client is connected to the service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the client is currently connected to the service, so that requests to other methods will succeed. Applications should guard client actions caused by the user with a call to this method.", "history": "", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Connects the client to Google Play services. This method returns immediately, and connects to the service in the background. If the connection is successful, @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ is called. On a failure, @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ is called.", "history": "", "FullName": "public void connect ()"}, "getTriggeringLocation(android.content.Intent)": {"Returns": [["", "the location that triggered this geofence alert or null if it's not included in the given intent"]], "Parameters": [["Intent", "the intent generated for geofence alert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the location that triggered geofence transition. Triggering location is only available if the calling app links against Google Play services 5.0 SDK.", "history": "", "FullName": "public static Location getTriggeringLocation (Intent intent)"}, "unregisterConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a connection listener from this GooglePlayServicesClient. Note that removing a listener does not generate any callbacks. If the specified listener is not currently registered to receive connection events, this method will have no effect.", "history": "", "FullName": "public void unregisterConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "isConnectionCallbacksRegistered(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [["", "true if the specified listener is currently registered to receive connection events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection events.", "history": "", "FullName": "public boolean isConnectionCallbacksRegistered (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "registerConnectionFailedListener(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#location#LocationClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection failed events from this GooglePlayServicesClient. Unlike @B_com#google#android#gms#common#GooglePlayServicesClient#registerConnectionCallbacks_E@, if the service is not already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener#onConnectionFailed_E@ method will not be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionFailedListener_E@ to avoid leaking resources. If the specified listener is already registered to receive connection failed events, this method will not add a duplicate entry for the same listener. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionFailedListener (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "removeGeofences(java.util.List<java.lang.String>, com.google.android.gms.location.LocationClient.OnRemoveGeofencesResultListener)": {"Returns": [], "Parameters": [["List", "a list of request IDs of geofences that need to be removed"], ["@B_com#google#android#gms#location#LocationClient#OnRemoveGeofencesResultListener_E@", "the callback that receives the status code for this operation"]], "Throws": [["IllegalArgumentException", "if geofenceRequestIds is null or empty"], ["SecurityException", "if the app does not have @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission"], ["IllegalStateException", "if the connection to Google Play Store Services hasn't been established"], ["NullPointerException", "if listener is null"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Removes geofences by their request IDs. Request ID is specified when you create a @B_com#google#android#gms#location#Geofence_E@ by calling @B_com#google#android#gms#location#Geofence#Builder#setRequestId_E@. @B_com#google#android#gms#location#LocationClient#OnRemoveGeofencesResultListener#onRemoveGeofencesByRequestIdsResult_E@ is called when geofences are successfully removed or failed to be removed. This method requires @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@.", "history": "", "FullName": "public void removeGeofences (List<String> geofenceRequestIds, LocationClient.OnRemoveGeofencesResultListener listener)"}, "LocationClient(android.content.Context, com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks, com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [], "Parameters": [["Context", "the context to use for the connection."], ["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the callbacks invoked when the client is connected."], ["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "the listener which will be notified if the connection attempt fails."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_com#google#android#gms#location#LocationClient_E@.", "history": "", "FullName": "public LocationClient (Context context, GooglePlayServicesClient.ConnectionCallbacks connectionCallbacks, GooglePlayServicesClient.OnConnectionFailedListener connectionFailedListener)"}, "registerConnectionCallbacks(com.google.android.gms.common.GooglePlayServicesClient.ConnectionCallbacks)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks_E@", "the listener where the results of the asynchronous @B_com#google#android#gms#location#LocationClient#connect_E@ call are delivered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a listener to receive connection events from this GooglePlayServicesClient. If the service is already connected, the listener's @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method will be called immediately. Applications should balance calls to this method with calls to @B_com#google#android#gms#common#GooglePlayServicesClient#unregisterConnectionCallbacks_E@ to avoid leaking resources. If the specified listener is already registered to receive connection events, this method will not add a duplicate entry for the same listener, but @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ method if currently connected. Note that the order of messages received here may not be stable, so clients should not rely on the order that multiple listeners receive events in.", "history": "", "FullName": "public void registerConnectionCallbacks (GooglePlayServicesClient.ConnectionCallbacks listener)"}, "isConnectionFailedListenerRegistered(com.google.android.gms.common.GooglePlayServicesClient.OnConnectionFailedListener)": {"Returns": [["", "true if the specified listener is currently registered to receive connection failed events."]], "Parameters": [["@B_com#google#android#gms#common#GooglePlayServicesClient#OnConnectionFailedListener_E@", "The listener to check for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified listener is currently registered to receive connection failed events.", "history": "", "FullName": "public boolean isConnectionFailedListenerRegistered (GooglePlayServicesClient.OnConnectionFailedListener listener)"}, "removeLocationUpdates(com.google.android.gms.location.LocationListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#location#LocationListener_E@", "The listener to remove."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all location updates for the given location listener.", "history": "", "FullName": "public void removeLocationUpdates (LocationListener listener)"}, "getErrorCode(android.content.Intent)": {"Returns": [["", "the error code specified in @B_com#google#android#gms#location#LocationStatusCodes_E@ or -1 if @B_com#google#android#gms#location#LocationClient#hasError_E@ returns false."]], "Parameters": [["Intent", "the intent generated for alert"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the error code that explains the error that triggered this intent.", "history": "", "FullName": "public static int getErrorCode (Intent intent)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.location.LocationClient", "ClassDesc": "Use @B_com#google#android#gms#location#LocationServices_E@. The LocationClient is the main entry point for location related APIs, such as location and geofence. Use the LocationClient to: Connect and disconnect to Google Location Services. Request/remove location update callbacks. Request/remove geofences. In order to establish a connection, call @B_com#google#android#gms#location#LocationClient#connect_E@ and wait for the @B_com#google#android#gms#common#GooglePlayServicesClient#ConnectionCallbacks#onConnected_E@ callback."}