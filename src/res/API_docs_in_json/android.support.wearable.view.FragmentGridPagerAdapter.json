{"Functions": {"getFragmentId(int, int)": {"Returns": [["long", "Unique identifier for the item at position"]], "Parameters": [["int", "int: the row that this item is at"], ["int", "int: the column within this row that the item is at"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a unique identifier for the @B_android#app#Fragment_E@ at the given row/column position. The default implementation returns a fixed number based on the position. Subclasses should override this method if the positions of items can change.", "history": "", "FullName": "long getFragmentId (int row, int column)"}, "getFragmentBackground(int, int)": {"Returns": [["Drawable", "the background drawable or @B_android#support#wearable#view#GridPagerAdapter#BACKGROUND_NONE_E@ if the fragment does not implement @B_android#support#wearable#view#GridPageOptions_E@"]], "Parameters": [["int", "int: the row of the fragment"], ["int", "int: the column of the fragment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a background for Fragments implementing @B_android#support#wearable#view#GridPageOptions_E@.", "history": "", "FullName": "Drawable getFragmentBackground (int row, int column)"}, "instantiateItem(android.view.ViewGroup, int, int)": {"Returns": [["Fragment", "a an object representing the new page"]], "Parameters": [["ViewGroup", "ViewGroup: containing View in which the page will be shown"], ["int", "int: the row to be instantiated"], ["int", "int: the column within the row to be instantiated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates the page for the given position. The adapter is responsible for adding the view to the container given here, although it only must ensure this is done by the time it returns from @B_android#support#wearable#view#GridPagerAdapter#finishUpdate_E@", "history": "", "FullName": "Fragment instantiateItem (ViewGroup container, int row, int column)"}, "findExistingFragment(int, int)": {"Returns": [["Fragment", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "Fragment findExistingFragment (int row, int column)"}, "finishUpdate(android.view.ViewGroup)": {"Returns": [], "Parameters": [["ViewGroup", "ViewGroup: The containing View which is displaying this adapter's page views"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the a change in the shown pages has been completed. At this point you must ensure that all of the pages have actually been added or removed from the container as appropriate.", "history": "", "FullName": "void finishUpdate (ViewGroup container)"}, "getBackgroundForPage(int, int)": {"Returns": [["Drawable", "the background for the given page or @B_android#support#wearable#view#GridPagerAdapter#BACKGROUND_NONE_E@"]], "Parameters": [["int", "int: the row of the page"], ["int", "int: the column of the page"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides content to be displayed as the background for a specific page. The return value @B_android#support#wearable#view#GridPagerAdapter#BACKGROUND_NONE_E@ indicates that there is no page-specific background. and the row background should be used (if any). This implementation simply returns the result of @B_android#support#wearable#view#FragmentGridPagerAdapter#getFragmentBackground_E@.", "history": "", "FullName": "Drawable getBackgroundForPage (int row, int column)"}, "getFragment(int, int)": {"Returns": [["Fragment", "no returns description in source"]], "Parameters": [["int", "int: the row of the position"], ["int", "int: the column of the position"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#app#Fragment_E@ at the specified row number and column number. Fragment instances MAY be stored and reused ONLY if no structural changes are made to the data set or if @B_android#support#wearable#view#FragmentGridPagerAdapter#getFragmentId_E@ is overridden to provide a stable identifier for each the item at each position, otherwise results are undefined.", "history": "", "FullName": "Fragment getFragment (int row, int column)"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "https:##developer#android#com@B_android#support#wearable#view#GridPagerAdapter_E@"], "ClassName": "android.support.wearable.view.FragmentGridPagerAdapter", "ClassDesc": "starting with Android Wear 2.0 we no longer encourage bi-directional spacial models for apps. If you are looking to implement vertical paging pattern, consider using the https:##developer#android#com@B_android#support#v7#widget#SnapHelper_E@ and a https:##developer#android#com@B_android#support#v7#widget#RecyclerView_E@ instead. An implementation of GridPagerAdapter which represents each page as a http:##developer#android#com@B_android#app#Fragment_E@. A minimal implementation needs only the abstract methods: https:##developer#android#com@B_android#support#wearable#view#GridPagerAdapter#getRowCount_E@, https:##developer#android#com@B_android#support#wearable#view#GridPagerAdapter#getColumnCount_E@, https:##developer#android#com@B_android#support#wearable#view#FragmentGridPagerAdapter#getFragment_E@. If any changes are made to the data, https:##developer#android#com@B_android#support#wearable#view#GridPagerAdapter#notifyDataSetChanged_E@ must be called to notify the adapter of the change, so it can be reflected in the View. If pages the data at be inserted or removed, performance can be improved by implementing https:##developer#android#com@B_android#support#wearable#view#FragmentGridPagerAdapter#getFragmentId_E@ to to provide a stable ID for each item, based on the content."}