{"Functions": {"setThreadPriority(int,int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the thread/process to change."], ["int", "int: A Linux priority level, from -20 for highest scheduling priority to 19 for lowest scheduling priority."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "Throws IllegalArgumentException if tid does not exist."], ["@B_java#lang#SecurityException_E@", "Throws SecurityException if your process does not have permission to modify the given thread, or to use the given priority."]], "SeeAlso": [], "Permissions": [], "Description": "Set the priority of a thread, based on Linux priorities.", "history": "Added in API level 1", "FullName": "public static final void setThreadPriority (int tid, int priority)"}, "myTid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier of the calling thread, which be used with @B_android#os#Process#setThreadPriority_E@.", "history": "Added in API level 1", "FullName": "public static final int myTid ()"}, "getUidForName(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the UID assigned to a particular user name, or -1 if there is none. If the given string consists of only numbers, it is converted directly to a uid.", "history": "Added in API level 1", "FullName": "public static final int getUidForName (String name)"}, "sendSignal(int, int)": {"Returns": [], "Parameters": [["int", "int: The pid of the target process."], ["int", "int: The signal to send."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a signal to the given process.", "history": "added in API level 1", "FullName": "public static final void sendSignal (int pid, int signal)"}, "getThreadPriority(int)": {"Returns": [["int", "Returns the current priority, as a Linux priority level, from -20 for highest scheduling priority to 19 for lowest scheduling priority."]], "Parameters": [["int", "int: The identifier of the thread/process. If tid equals zero, the priority of the calling process/thread will be returned."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "Throws IllegalArgumentException if tid does not exist."]], "SeeAlso": [], "Permissions": [], "Description": "Return the current priority of a thread, based on Linux priorities.", "history": "Added in API level 1", "FullName": "public static final int getThreadPriority (int tid)"}, "is64Bit()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current process is a 64-bit runtime.", "history": "Added in API level 23", "FullName": "public static final boolean is64Bit ()"}, "getElapsedCpuTime()": {"Returns": [["long", "Returns the number of milliseconds this process has return."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns elapsed milliseconds of the time this process has run.", "history": "Added in API level 1", "FullName": "public static final long getElapsedCpuTime ()"}, "setThreadPriority(int, int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the thread/process to change."], ["int", "int: A Linux priority level, from -20 for highest scheduling priority to 19 for lowest scheduling priority."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "Throws IllegalArgumentException if tid does not exist."], ["@B_java#lang#SecurityException_E@", "Throws SecurityException if your process does not have permission to modify the given thread, or to use the given priority."]], "SeeAlso": [], "Permissions": [], "Description": "Set the priority of a thread, based on Linux priorities.", "history": "added in API level 1", "FullName": "public static final void setThreadPriority (int tid, int priority)"}, "myUid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier of this process's uid. This is the kernel uid that the process is running under, which is the identity of its app-specific sandbox. It is different from @B_android#os#Process#myUserHandle_E@ in that a uid identifies a specific app sandbox in a specific user.", "history": "Added in API level 2", "FullName": "public static final int myUid ()"}, "myUserHandle()": {"Returns": [["@B_android#os#UserHandle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process's user handle. This is the user the process is running under. It is distinct from @B_android#os#Process#myUid_E@ in that a particular user will have multiple distinct apps running under it each with their own uid.", "history": "Added in API level 17", "FullName": "public static UserHandle myUserHandle ()"}, "getExclusiveCores()": {"Returns": [["int[]", "an array of integers, indicating the CPU cores exclusively reserved for this process. The array will have length zero if no CPU cores are exclusively reserved for this process at this point in time."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "On some devices, the foreground process may have one or more CPU cores exclusively reserved for it. This method can be used to retrieve which cores that are (if any), so the calling process can then use sched_setaffinity() to lock a thread to these cores. Note that the calling process must currently be running in the foreground for this method to return any cores. The CPU core(s) exclusively reserved for the foreground process will stay reserved for as long as the process stays in the foreground. As soon as a process leaves the foreground, those CPU cores will no longer be reserved for it, and will most likely be reserved for the new foreground process. It's not necessary to change the affinity of your process when it leaves the foreground (if you had previously set it to use a reserved core); the OS will automatically take care of resetting the affinity at that point.", "history": "Added in API level 24", "FullName": "public static final int[] getExclusiveCores ()"}, "setThreadPriority(int)": {"Returns": [], "Parameters": [["int", "int: A Linux priority level, from -20 for highest scheduling priority to 19 for lowest scheduling priority."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "Throws IllegalArgumentException if tid does not exist."], ["@B_java#lang#SecurityException_E@", "Throws SecurityException if your process does not have permission to modify the given thread, or to use the given priority."]], "SeeAlso": ["@B_android#os#Process#setThreadPriority_E@"], "Permissions": [], "Description": "Set the priority of the calling thread, based on Linux priorities. See @B_android#os#Process#setThreadPriority_E@ for more information.", "history": "Added in API level 1", "FullName": "public static final void setThreadPriority (int priority)"}, "myPid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the identifier of this process, which can be used with @B_android#os#Process#killProcess_E@ and @B_android#os#Process#sendSignal_E@.", "history": "Added in API level 1", "FullName": "public static final int myPid ()"}, "getGidForName(java.lang.String)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the GID assigned to a particular user name, or -1 if there is none. If the given string consists of only numbers, it is converted directly to a gid.", "history": "Added in API level 1", "FullName": "public static final int getGidForName (String name)"}, "killProcess(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Kill the process with the given PID. Note that, though this API allows us to request to kill any process based on its PID, the kernel will still impose standard restrictions on which PIDs you are actually able to kill. Typically this means only the process running the caller's packages/application and any additional processes created by that app; packages sharing a common UID will also be able to kill each other's processes.", "history": "Added in API level 1", "FullName": "public static final void killProcess (int pid)"}, "sendSignal(int,int)": {"Returns": [], "Parameters": [["int", "int: The pid of the target process."], ["int", "int: The signal to send."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a signal to the given process.", "history": "Added in API level 1", "FullName": "public static final void sendSignal (int pid, int signal)"}, "getStartUptimeMillis()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#os#SystemClock#uptimeMillis_E@ at which this process was started.", "history": "Added in API level 24", "FullName": "public static final long getStartUptimeMillis ()"}, "Process()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Process ()"}, "supportsProcesses()": {"Returns": [["boolean", "Returns true if the system can run in multiple processes, else false if everything is running in a single process."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method always returns true. Do not use. Determine whether the current environment supports multiple processes.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static final boolean supportsProcesses ()"}, "isApplicationUid(int)": {"Returns": [["boolean", "Whether the uid corresponds to an application sandbox running in a specific user."]], "Parameters": [["int", "int: A kernel uid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the given uid belongs to an application.", "history": "Added in API level 24", "FullName": "public static boolean isApplicationUid (int uid)"}, "isIsolated()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the current process is in an isolated sandbox.", "history": "Added in API level 28", "FullName": "public static final boolean isIsolated ()"}, "getStartElapsedRealtime()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#os#SystemClock#elapsedRealtime_E@ at which this process was started.", "history": "Added in API level 24", "FullName": "public static final long getStartElapsedRealtime ()"}}, "Inheritance": [], "ClassName": "android.os.Process", "ClassDesc": "Tools for managing OS processes."}