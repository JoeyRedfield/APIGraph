{"Functions": {"addSubMenu(int, int, int, int)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Variation on @B_android#view#Menu#addSubMenu_E@ that takes a string resource identifier for the title instead of the string itself.", "history": "added in API level 1", "FullName": "public abstract SubMenu addSubMenu (int groupId, int itemId, int order, int titleRes)"}, "isShortcutKey(int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the key code from @B_android#view#KeyEvent_E@ to check."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the @B_android#view#KeyEvent_E@ to use to help check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is a keypress one of the defined shortcut keys for this window.", "history": "Added in API level 1", "FullName": "public abstract boolean isShortcutKey (int keyCode, KeyEvent event)"}, "removeItem(int)": {"Returns": [], "Parameters": [["int", "int: The item to be removed. If there is no item with this identifier, nothing happens."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the item with the given identifier.", "history": "Added in API level 1", "FullName": "public abstract void removeItem (int id)"}, "performShortcut(int, android.view.KeyEvent, int)": {"Returns": [["boolean", "If the given shortcut exists and is shown, returns true; else returns false."]], "Parameters": [["int", "int: The keycode of the shortcut key."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Key event message."], ["int", "int: Additional option flags or 0."]], "Throws": [], "SeeAlso": ["@B_android#view#Menu_E@"], "Permissions": [], "Description": "Execute the menu item action associated with the given shortcut character.", "history": "added in API level 1", "FullName": "public abstract boolean performShortcut (int keyCode, KeyEvent event, int flags)"}, "addSubMenu(int,int,int,int)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Variation on @B_android#view#Menu#addSubMenu_E@ that takes a string resource identifier for the title instead of the string itself.", "history": "Added in API level 1", "FullName": "public abstract SubMenu addSubMenu (int groupId, int itemId, int order, int titleRes)"}, "setGroupCheckable(int, boolean, boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: Set to true to allow a check mark, false to disallow. The default is false."], ["boolean", "boolean: If set to true, only one item in this group can be checked at a time; checking an item will automatically uncheck all others in the group. If set to false, each item can be checked independently of the others."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setCheckable_E@", "@B_android#view#MenuItem#setChecked_E@"], "Permissions": [], "Description": "Control whether a particular group of items can show a check mark. This is similar to calling @B_android#view#MenuItem#setCheckable_E@ on all of the menu items with the given group identifier, but in addition you can control whether this group contains a mutually-exclusive set items. This should be called after the items of the group have been added to the menu.", "history": "added in API level 1", "FullName": "public abstract void setGroupCheckable (int group, boolean checkable, boolean exclusive)"}, "add(int,int,int,int)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Variation on @B_android#view#Menu#add_E@ that takes a string resource identifier instead of the string itself.", "history": "Added in API level 1", "FullName": "public abstract MenuItem add (int groupId, int itemId, int order, int titleRes)"}, "setGroupVisible(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: If true the items are visible, else they are hidden."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setVisible_E@"], "Permissions": [], "Description": "Show or hide all menu items that are in the given group.", "history": "added in API level 1", "FullName": "public abstract void setGroupVisible (int group, boolean visible)"}, "performShortcut(int,android.view.KeyEvent,int)": {"Returns": [["boolean", "If the given shortcut exists and is shown, returns true; else returns false."]], "Parameters": [["int", "int: The keycode of the shortcut key."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Key event message."], ["int", "int: Additional option flags or 0."]], "Throws": [], "SeeAlso": ["@B_android#view#Menu_E@"], "Permissions": [], "Description": "Execute the menu item action associated with the given shortcut character.", "history": "Added in API level 1", "FullName": "public abstract boolean performShortcut (int keyCode, KeyEvent event, int flags)"}, "add(java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new item to the menu. This item displays the given title for its label.", "history": "Added in API level 1", "FullName": "public abstract MenuItem add (CharSequence title)"}, "getItem(int)": {"Returns": [["@B_android#view#MenuItem_E@", "The menu item."]], "Parameters": [["int", "int: The index of the menu item to return."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "when index < 0 || >= size()"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the menu item at the given index.", "history": "Added in API level 3", "FullName": "public abstract MenuItem getItem (int index)"}, "setGroupDividerEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enable or disable the group dividers.", "history": "Added in API level 28", "FullName": "public void setGroupDividerEnabled (boolean groupDividerEnabled)"}, "add(int, int, int, int)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Variation on @B_android#view#Menu#add_E@ that takes a string resource identifier instead of the string itself.", "history": "added in API level 1", "FullName": "public abstract MenuItem add (int groupId, int itemId, int order, int titleRes)"}, "hasVisibleItems()": {"Returns": [["boolean", "True if there is one or more item visible, else false."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the menu currently has item items that are visible.", "history": "Added in API level 1", "FullName": "public abstract boolean hasVisibleItems ()"}, "findItem(int)": {"Returns": [["@B_android#view#MenuItem_E@", "The menu item object, or null if there is no item with this identifier."]], "Parameters": [["int", "int: The identifier to find."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the menu item with a particular identifier.", "history": "Added in API level 1", "FullName": "public abstract MenuItem findItem (int id)"}, "addSubMenu(int, int, int, java.lang.CharSequence)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new sub-menu to the menu. This item displays the given @B_android#view#SubMenu#getItem_E@. Note that you can only have one level of sub-menus, i.e. you cannnot add a subMenu to a subMenu: An @B_java#lang#UnsupportedOperationException_E@ will be thrown if you try.", "history": "added in API level 1", "FullName": "public abstract SubMenu addSubMenu (int groupId, int itemId, int order, CharSequence title)"}, "setGroupVisible(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: If true the items are visible, else they are hidden."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setVisible_E@"], "Permissions": [], "Description": "Show or hide all menu items that are in the given group.", "history": "Added in API level 1", "FullName": "public abstract void setGroupVisible (int group, boolean visible)"}, "add(int)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new item to the menu. This item displays the given title for its label.", "history": "Added in API level 1", "FullName": "public abstract MenuItem add (int titleRes)"}, "addSubMenu(int)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["int", "int: Resource identifier of title string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new sub-menu to the menu. This item displays the given title for its label. To modify other attributes on the submenu's menu item, use @B_android#view#SubMenu#getItem_E@.", "history": "Added in API level 1", "FullName": "public abstract SubMenu addSubMenu (int titleRes)"}, "size()": {"Returns": [["int", "The item count."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of items in the menu. Note that this will change any times items are added or removed from the menu.", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])": {"Returns": [["int", "The number of menu items that were added."]], "Parameters": [["int", "int: The group identifier that the items should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if the items should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the items. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["@B_android#content#ComponentName_E@", "ComponentName: The current activity component name as defined by queryIntentActivityOptions()."], ["@B_android#content#Intent_E@", "Intent: Specific items to place first as defined by queryIntentActivityOptions()."], ["@B_android#content#Intent_E@", "Intent: Intent describing the kinds of items to populate in the list as defined by queryIntentActivityOptions()."], ["int", "int: Additional options controlling how the items are added."], ["@B_android#view#MenuItem_E@", "MenuItem: Optional array in which to place the menu items that were generated for each of the specifics that were requested. Entries may be null if no activity was found for that specific action."]], "Throws": [], "SeeAlso": ["@B_android#view#Menu_E@", "@B_android#view#MenuItem#setIntent_E@", "@B_android#content#pm#PackageManager#queryIntentActivityOptions_E@"], "Permissions": [], "Description": "Add a group of menu items corresponding to actions that can be performed for a particular Intent. The Intent is most often configured with a null action, the data that the current activity is working with, and includes either the @B_android#content#Intent#CATEGORY_ALTERNATIVE_E@ or @B_android#content#Intent#CATEGORY_SELECTED_ALTERNATIVE_E@ to find activities that have said they would like to be included as optional action. You can, however, use any Intent you want. See @B_android#content#pm#PackageManager#queryIntentActivityOptions_E@ for more * details on the All of the menu items of possible options for the intent will be added with the given group and id. You can use the group to control ordering of the items in relation to other items in the menu. Normally this function will automatically remove any existing items in the menu in the same group and place a divider above and below the added items; this behavior can be modified with the @B_android#view#MenuItem#setIntent_E@ is called to associate the appropriate Intent with the item; this means the activity will automatically be started for you without having to do anything else.", "history": "Added in API level 1", "FullName": "public abstract int addIntentOptions (int groupId, int itemId, int order, ComponentName caller, Intent[] specifics, Intent intent, int flags, MenuItem[] outSpecificItems)"}, "setGroupEnabled(int,boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: If true the items will be enabled, else they will be disabled."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setEnabled_E@"], "Permissions": [], "Description": "Enable or disable all menu items that are in the given group.", "history": "Added in API level 1", "FullName": "public abstract void setGroupEnabled (int group, boolean enabled)"}, "removeGroup(int)": {"Returns": [], "Parameters": [["int", "int: The group to be removed. If there are no items in this group, nothing happens."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all items in the given group.", "history": "Added in API level 1", "FullName": "public abstract void removeGroup (int groupId)"}, "performIdentifierAction(int, int)": {"Returns": [["boolean", "If the given identifier exists and is shown, returns true; else returns false."]], "Parameters": [["int", "int: Identifier associated with the menu item."], ["int", "int: Additional option flags or 0."]], "Throws": [], "SeeAlso": ["@B_android#view#Menu_E@"], "Permissions": [], "Description": "Execute the menu item action associated with the given menu identifier.", "history": "added in API level 1", "FullName": "public abstract boolean performIdentifierAction (int id, int flags)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the menu, if open.", "history": "Added in API level 3", "FullName": "public abstract void close ()"}, "setGroupCheckable(int,boolean,boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: Set to true to allow a check mark, false to disallow. The default is false."], ["boolean", "boolean: If set to true, only one item in this group can be checked at a time; checking an item will automatically uncheck all others in the group. If set to false, each item can be checked independently of the others."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setCheckable_E@", "@B_android#view#MenuItem#setChecked_E@"], "Permissions": [], "Description": "Control whether a particular group of items can show a check mark. This is similar to calling @B_android#view#MenuItem#setCheckable_E@ on all of the menu items with the given group identifier, but in addition you can control whether this group contains a mutually-exclusive set items. This should be called after the items of the group have been added to the menu.", "history": "Added in API level 1", "FullName": "public abstract void setGroupCheckable (int group, boolean checkable, boolean exclusive)"}, "setGroupEnabled(int, boolean)": {"Returns": [], "Parameters": [["int", "int: The group of items to operate on."], ["boolean", "boolean: If true the items will be enabled, else they will be disabled."]], "Throws": [], "SeeAlso": ["@B_android#view#MenuItem#setEnabled_E@"], "Permissions": [], "Description": "Enable or disable all menu items that are in the given group.", "history": "added in API level 1", "FullName": "public abstract void setGroupEnabled (int group, boolean enabled)"}, "performIdentifierAction(int,int)": {"Returns": [["boolean", "If the given identifier exists and is shown, returns true; else returns false."]], "Parameters": [["int", "int: Identifier associated with the menu item."], ["int", "int: Additional option flags or 0."]], "Throws": [], "SeeAlso": ["@B_android#view#Menu_E@"], "Permissions": [], "Description": "Execute the menu item action associated with the given menu identifier.", "history": "Added in API level 1", "FullName": "public abstract boolean performIdentifierAction (int id, int flags)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all existing items from the menu, leaving it empty as if it had just been created.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "add(int,int,int,java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new item to the menu. This item displays the given title for its label.", "history": "Added in API level 1", "FullName": "public abstract MenuItem add (int groupId, int itemId, int order, CharSequence title)"}, "isShortcutKey(int, android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: the key code from @B_android#view#KeyEvent_E@ to check."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the @B_android#view#KeyEvent_E@ to use to help check."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is a keypress one of the defined shortcut keys for this window.", "history": "added in API level 1", "FullName": "public abstract boolean isShortcutKey (int keyCode, KeyEvent event)"}, "addSubMenu(int,int,int,java.lang.CharSequence)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can also be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new sub-menu to the menu. This item displays the given @B_android#view#SubMenu#getItem_E@. Note that you can only have one level of sub-menus, i.e. you cannnot add a subMenu to a subMenu: An @B_java#lang#UnsupportedOperationException_E@ will be thrown if you try.", "history": "Added in API level 1", "FullName": "public abstract SubMenu addSubMenu (int groupId, int itemId, int order, CharSequence title)"}, "add(int, int, int, java.lang.CharSequence)": {"Returns": [["@B_android#view#MenuItem_E@", "The newly added menu item."]], "Parameters": [["int", "int: The group identifier that this item should be part of. This can be used to define groups of items for batch state changes. Normally use @B_android#view#Menu#NONE_E@ if an item should not be in a group."], ["int", "int: Unique item ID. Use @B_android#view#Menu#NONE_E@ if you do not need a unique ID."], ["int", "int: The order for the item. Use @B_android#view#Menu#NONE_E@ if you do not care about the order. See @B_android#view#MenuItem#getOrder_E@."], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new item to the menu. This item displays the given title for its label.", "history": "added in API level 1", "FullName": "public abstract MenuItem add (int groupId, int itemId, int order, CharSequence title)"}, "addSubMenu(java.lang.CharSequence)": {"Returns": [["@B_android#view#SubMenu_E@", "The newly added sub-menu"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to display for the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new sub-menu to the menu. This item displays the given title for its label. To modify other attributes on the submenu's menu item, use @B_android#view#SubMenu#getItem_E@.", "history": "Added in API level 1", "FullName": "public abstract SubMenu addSubMenu (CharSequence title)"}, "setQwertyMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true the menu will use alphabetic shortcuts; else it will use numeric shortcuts."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the menu should be running in qwerty mode (alphabetic shortcuts) or 12-key mode (numeric shortcuts).", "history": "Added in API level 1", "FullName": "public abstract void setQwertyMode (boolean isQwerty)"}}, "Inheritance": [], "ClassName": "android.view.Menu", "ClassDesc": "Interface for managing the items in a menu. By default, every Activity supports an options menu of actions or options. You can add items to this menu and handle clicks on your additions. The easiest way of adding menu items is inflating an XML file into the @B_android#view#Menu_E@ via @B_android#view#MenuInflater_E@. The easiest way of attaching code to clicks is via @B_android#app#Activity#onOptionsItemSelected_E@ and @B_android#app#Activity#onContextItemSelected_E@. Different menu types support different features:"}