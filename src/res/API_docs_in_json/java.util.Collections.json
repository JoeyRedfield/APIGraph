{"Functions": {"checkedCollection(java.util.Collection<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#Collection_E@", "a dynamically typesafe view of the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that c is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified collection. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a collection contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the collection takes place through the view, it is The generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts. Usually this is not a problem, as the compiler issues warnings on all such unchecked operations. There are, however, times when static type checking alone is not sufficient. For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type. Another use of dynamically typesafe views is debugging. Suppose a program fails with a ClassCastException, indicating that an incorrectly typed element was put into a parameterized collection. Unfortunately, the exception can occur at any time after the erroneous element is inserted, so it typically provides little or no information as to the real source of the problem. If the problem is reproducible, one can quickly determine its source by temporarily modifying the program to wrap the collection with a dynamically typesafe view. For example, this declaration: The returned collection does Object's equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable. Since null is considered to be a value of any reference type, the returned collection permits insertion of null elements whenever the backing collection does.", "history": "Added in API level 1", "FullName": "public static Collection<E> checkedCollection (Collection<E> c, Class<E> type)"}, "unmodifiableSet(java.util.Set<? extends T>)": {"Returns": [["@B_java#util#Set_E@", "an unmodifiable view of the specified set."]], "Parameters": [["@B_java#util#Set_E@", "Set: the set for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified set. This method allows modules to provide users with \"read-only\" access to internal sets. Query operations on the returned set \"read through\" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an The returned set will be serializable if the specified set is serializable.", "history": "added in API level 24", "FullName": "public static Set<T> unmodifiableSet (Set<? extends T> s)"}, "swap(java.util.List<?>, int, int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list in which to swap elements."], ["int", "int: the index of one element to be swapped."], ["int", "int: the index of the other element to be swapped."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if either i or j is out of range (i < 0 || i >= list.size() || j < 0 || j >= list.size())."]], "SeeAlso": [], "Permissions": [], "Description": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)", "history": "added in API level 1", "FullName": "public static void swap (List<?> list, int i, int j)"}, "unmodifiableMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [["@B_java#util#Map_E@", "an unmodifiable view of the specified map."]], "Parameters": [["@B_java#util#Map_E@", "Map: the map for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified map. This method allows modules to provide users with \"read-only\" access to internal maps. Query operations on the returned map \"read through\" to the specified map, and attempts to modify the returned map, whether direct or via its collection views, result in an The returned map will be serializable if the specified map is serializable.", "history": "Added in API level 1", "FullName": "public static Map<K, V> unmodifiableMap (Map<? extends K, ? extends V> m)"}, "checkedList(java.util.List<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#List_E@", "a dynamically typesafe view of the specified list"]], "Parameters": [["@B_java#util#List_E@", "List: the list for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that list is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified list. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a list contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the list takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned list will be serializable if the specified list is serializable. Since null is considered to be a value of any reference type, the returned list permits insertion of null elements whenever the backing list does.", "history": "Added in API level 1", "FullName": "public static List<E> checkedList (List<E> list, Class<E> type)"}, "max(java.util.Collection<?extendsT>)": {"Returns": [["T", "the maximum element of the given collection, according to the natural ordering of its elements."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose maximum element is to be determined."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable (for example, strings and integers)."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the maximum element of the given collection, according to the This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "Added in API level 1", "FullName": "public static T max (Collection<? extends T> coll)"}, "synchronizedSet(java.util.Set<E>)": {"Returns": [["", "a synchronized set."]], "Parameters": [["@B_java#util#Set_E@", "the set to wrap in a synchronized set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a wrapper on the specified set which synchronizes all access to the set.", "history": "Added in API level 1", "FullName": "public static Set<E> synchronizedSet (Set<E> set)"}, "checkedSet(java.util.Set<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#Set_E@", "a dynamically typesafe view of the specified set"]], "Parameters": [["@B_java#util#Set_E@", "Set: the set for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that s is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified set. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the set takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned set will be serializable if the specified set is serializable. Since null is considered to be a value of any reference type, the returned set permits insertion of null elements whenever the backing set does.", "history": "Added in API level 1", "FullName": "public static Set<E> checkedSet (Set<E> s, Class<E> type)"}, "shuffle(java.util.List<?>,java.util.Random)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be shuffled."], ["@B_java#util#Random_E@", "Random: the source of randomness to use to shuffle the list."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the @B_java#util#RandomAccess_E@ interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.", "history": "Added in API level 1", "FullName": "public static void shuffle (List<?> list, Random rnd)"}, "emptySortedSet()": {"Returns": [["@B_java#util#SortedSet_E@", "the empty sorted set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty sorted set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty sorted set:", "history": "Added in API level 26", "FullName": "public static SortedSet<E> emptySortedSet ()"}, "unmodifiableCollection(java.util.Collection<?extendsT>)": {"Returns": [["@B_java#util#Collection_E@", "an unmodifiable view of the specified collection."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified collection. This method allows modules to provide users with \"read-only\" access to internal collections. Query operations on the returned collection \"read through\" to the specified collection, and attempts to modify the returned collection, whether direct or via its iterator, result in an The returned collection does The returned collection will be serializable if the specified collection is serializable.", "history": "Added in API level 1", "FullName": "public static Collection<T> unmodifiableCollection (Collection<? extends T> c)"}, "singletonMap(K,V)": {"Returns": [["@B_java#util#Map_E@", "an immutable map containing only the specified key-value mapping."]], "Parameters": [["K", "K: the sole key to be stored in the returned map."], ["V", "V: the value to which the returned map maps key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.", "history": "Added in API level 1", "FullName": "public static Map<K, V> singletonMap (K key, V value)"}, "asLifoQueue(java.util.Deque<T>)": {"Returns": [["@B_java#util#Queue_E@", "the queue"]], "Parameters": [["@B_java#util#Deque_E@", "Deque: the deque"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of a @B_java#util#Deque_E@ as a Last-in-first-out (Lifo) @B_java#util#Queue_E@. Method Each method invocation on the queue returned by this method results in exactly one method invocation on the backing deque, with one exception. The @B_java#util#Collection#addAll_E@ method is implemented as a sequence of @B_java#util#Deque#addFirst_E@ invocations on the backing deque.", "history": "Added in API level 9", "FullName": "public static Queue<T> asLifoQueue (Deque<T> deque)"}, "lastIndexOfSubList(java.util.List<?>,java.util.List<?>)": {"Returns": [["int", "the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#util#List_E@", "List: the list in which to search for the last occurrence of target."], ["@B_java#util#List_E@", "List: the list to search for as a subList of source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the highest index source.subList(i, i+target.size()).equals(target), or -1 if there is no such index. (Returns -1 if target.size() > source.size()) This implementation uses the \"brute force\" technique of iterating over the source list, looking for a match with the target at each location in turn.", "history": "Added in API level 1", "FullName": "public static int lastIndexOfSubList (List<?> source, List<?> target)"}, "synchronizedSet(java.util.Set<T>)": {"Returns": [["@B_java#util#Set_E@", "a synchronized view of the specified set."]], "Parameters": [["@B_java#util#Set_E@", "Set: the set to be \"wrapped\" in a synchronized set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) set backed by the specified set. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned set when iterating over it: The returned set will be serializable if the specified set is serializable.", "history": "Added in API level 1", "FullName": "public static Set<T> synchronizedSet (Set<T> s)"}, "unmodifiableSet(java.util.Set<? extends E>)": {"Returns": [["", "a unmodifiable set"]], "Parameters": [["@B_java#util#Set_E@", "the set to wrap in an unmodifiable set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a wrapper on the specified set which throws an UnsupportedOperationException whenever an attempt is made to modify the set.", "history": "Added in API level 1", "FullName": "public static Set<E> unmodifiableSet (Set<? extends E> set)"}, "singleton(T)": {"Returns": [["@B_java#util#Set_E@", "an immutable set containing only the specified object."]], "Parameters": [["T", "T: the sole object to be stored in the returned set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable set containing only the specified object. The returned set is serializable.", "history": "Added in API level 1", "FullName": "public static Set<T> singleton (T o)"}, "singletonList(E)": {"Returns": [["@B_java#util#List_E@", "an immutable list containing only the specified object."]], "Parameters": [["E", "E: the sole object to be stored in the returned list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable list containing only the specified object. The returned list is serializable.", "history": "Added in API level 1", "FullName": "List<E> singletonList (E o)"}, "indexOfSubList(java.util.List<?>,java.util.List<?>)": {"Returns": [["int", "the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence."]], "Parameters": [["@B_java#util#List_E@", "List: the list in which to search for the first occurrence of target."], ["@B_java#util#List_E@", "List: the list to search for as a subList of source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence. More formally, returns the lowest index source.subList(i, i+target.size()).equals(target), or -1 if there is no such index. (Returns -1 if target.size() > source.size()) This implementation uses the \"brute force\" technique of scanning over the source list, looking for a match with the target at each location in turn.", "history": "Added in API level 1", "FullName": "public static int indexOfSubList (List<?> source, List<?> target)"}, "newSetFromMap(java.util.Map<E, java.lang.Boolean>)": {"Returns": [["@B_java#util#Set_E@", "the set backed by the map"]], "Parameters": [["@B_java#util#Map_E@", "Map: the backing map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if map is not empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a @B_java#util#Set_E@ implementation corresponding to any @B_java#util#Map_E@ implementation. There is no need to use this method on a @B_java#util#Map_E@ implementation that already has a corresponding @B_java#util#Set_E@ implementation (such as @B_java#util#HashMap_E@ or @B_java#util#TreeMap_E@). Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment:", "history": "added in API level 9", "FullName": "public static Set<E> newSetFromMap (Map<E, Boolean> map)"}, "emptyListIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "an empty list iterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator that has no elements. More precisely, @B_java#util#Iterator#hasNext_E@ and @B_java#util#ListIterator#hasPrevious_E@ always return false. @B_java#util#Iterator#next_E@ and @B_java#util#ListIterator#previous_E@ always throw @B_java#util#NoSuchElementException_E@. @B_java#util#Iterator#remove_E@ and @B_java#util#ListIterator#set_E@ always throw @B_java#lang#IllegalStateException_E@. @B_java#util#ListIterator#add_E@ always throws @B_java#lang#UnsupportedOperationException_E@. @B_java#util#ListIterator#nextIndex_E@ always returns 0. @B_java#util#ListIterator#previousIndex_E@ always returns -1. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.", "history": "Added in API level 19", "FullName": "public static ListIterator<T> emptyListIterator ()"}, "min(java.util.Collection<?extendsT>,java.util.Comparator<?superT>)": {"Returns": [["T", "the minimum element of the given collection, according to the specified comparator."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose minimum element is to be determined."], ["@B_java#util#Comparator_E@", "Comparator: the comparator with which to determine the minimum element. A null value indicates that the elements' natural ordering should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable using the specified comparator."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the minimum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "Added in API level 1", "FullName": "public static T min (Collection<? extends T> coll, Comparator<? super T> comp)"}, "synchronizedSortedMap(java.util.SortedMap<K,V>)": {"Returns": [["@B_java#util#SortedMap_E@", "a synchronized view of the specified sorted map."]], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map to be \"wrapped\" in a synchronized sorted map."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its The returned sorted map will be serializable if the specified sorted map is serializable.", "history": "Added in API level 1", "FullName": "public static SortedMap<K, V> synchronizedSortedMap (SortedMap<K, V> m)"}, "enumeration(java.util.Collection<T>)": {"Returns": [["@B_java#util#Enumeration_E@", "an enumeration over the specified collection."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection for which an enumeration is to be returned."]], "Throws": [], "SeeAlso": ["@B_java#util#Enumeration_E@"], "Permissions": [], "Description": "Returns an enumeration over the specified collection. This provides interoperability with legacy APIs that require an enumeration as input.", "history": "Added in API level 1", "FullName": "public static Enumeration<T> enumeration (Collection<T> c)"}, "list(java.util.Enumeration<T>)": {"Returns": [["@B_java#util#ArrayList_E@", "an array list containing the elements returned by the specified enumeration."]], "Parameters": [["@B_java#util#Enumeration_E@", "Enumeration: enumeration providing elements for the returned array list"]], "Throws": [], "SeeAlso": ["@B_java#util#Enumeration_E@", "@B_java#util#ArrayList_E@"], "Permissions": [], "Description": "Returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration. This method provides interoperability between legacy APIs that return enumerations and new APIs that require collections.", "history": "Added in API level 1", "FullName": "public static ArrayList<T> list (Enumeration<T> e)"}, "emptyList()": {"Returns": [["@B_java#util#List_E@", "an empty immutable list"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Collections_E@"], "Permissions": [], "Description": "Returns an empty list (immutable). This list is serializable. This example illustrates the type-safe way to obtain an empty list:", "history": "Added in API level 1", "FullName": "public static final List<T> emptyList ()"}, "rotate(java.util.List<?>,int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be rotated."], ["int", "int: the distance to rotate the list. There are no constraints on this value; it may be zero, negative, or greater than list.size()."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Rotates the elements in the specified list by the specified distance. After calling this method, the element at index For example, suppose Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance. If the specified list is small or implements the @B_java#util#RandomAccess_E@ interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the @B_java#util#Collections#reverse_E@ method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley's", "history": "Added in API level 1", "FullName": "public static void rotate (List<?> list, int distance)"}, "unmodifiableSortedSet(java.util.SortedSet<T>)": {"Returns": [["@B_java#util#SortedSet_E@", "an unmodifiable view of the specified sorted set."]], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: the sorted set for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified sorted set. This method allows modules to provide users with \"read-only\" access to internal sorted sets. Query operations on the returned sorted set \"read through\" to the specified sorted set. Attempts to modify the returned sorted set, whether direct, via its iterator, or via its The returned sorted set will be serializable if the specified sorted set is serializable.", "history": "Added in API level 1", "FullName": "public static SortedSet<T> unmodifiableSortedSet (SortedSet<T> s)"}, "unmodifiableSet(java.util.Set<?extendsT>)": {"Returns": [["@B_java#util#Set_E@", "an unmodifiable view of the specified set."]], "Parameters": [["@B_java#util#Set_E@", "Set: the set for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified set. This method allows modules to provide users with \"read-only\" access to internal sets. Query operations on the returned set \"read through\" to the specified set, and attempts to modify the returned set, whether direct or via its iterator, result in an The returned set will be serializable if the specified set is serializable.", "history": "Added in API level 1", "FullName": "public static Set<T> unmodifiableSet (Set<? extends T> s)"}, "unmodifiableSortedSet(java.util.SortedSet<E>)": {"Returns": [["", "a unmodifiable sorted set."]], "Parameters": [["@B_java#util#SortedSet_E@", "the sorted set to wrap in an unmodifiable sorted set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a wrapper on the specified sorted set which throws an UnsupportedOperationException whenever an attempt is made to modify the sorted set.", "history": "Added in API level 1", "FullName": "public static SortedSet<E> unmodifiableSortedSet (SortedSet<E> set)"}, "checkedSortedMap(java.util.SortedMap<K,V>,java.lang.Class<K>,java.lang.Class<V>)": {"Returns": [["@B_java#util#SortedMap_E@", "a dynamically typesafe view of the specified map"]], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the map for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of key that m is permitted to hold"], ["@B_java#lang#Class_E@", "Class: the type of value that m is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified sorted map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Similarly, any attempt to modify the value currently associated with a key will result in an immediate @B_java#lang#ClassCastException_E@, whether the modification is attempted directly through the map itself, or through a @B_java#util#Map#Entry_E@ instance obtained from the map's @B_java#util#Map#entrySet_E@ view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.", "history": "Added in API level 1", "FullName": "public static SortedMap<K, V> checkedSortedMap (SortedMap<K, V> m, Class<K> keyType, Class<V> valueType)"}, "synchronizedList(java.util.List<T>)": {"Returns": [["@B_java#util#List_E@", "a synchronized view of the specified list."]], "Parameters": [["@B_java#util#List_E@", "List: the list to be \"wrapped\" in a synchronized list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) list backed by the specified list. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned list when iterating over it: The returned list will be serializable if the specified list is serializable.", "history": "Added in API level 1", "FullName": "public static List<T> synchronizedList (List<T> list)"}, "unmodifiableList(java.util.List<?extendsT>)": {"Returns": [["@B_java#util#List_E@", "an unmodifiable view of the specified list."]], "Parameters": [["@B_java#util#List_E@", "List: the list for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified list. This method allows modules to provide users with \"read-only\" access to internal lists. Query operations on the returned list \"read through\" to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement @B_java#util#RandomAccess_E@ if the specified list does.", "history": "Added in API level 1", "FullName": "public static List<T> unmodifiableList (List<? extends T> list)"}, "unmodifiableList(java.util.List<? extends E>)": {"Returns": [["", "an unmodifiable List."]], "Parameters": [["@B_java#util#List_E@", "the list to wrap in an unmodifiable list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a wrapper on the specified list which throws an UnsupportedOperationException whenever an attempt is made to modify the list.", "history": "Added in API level 1", "FullName": "public static List<E> unmodifiableList (List<? extends E> list)"}, "singletonMap(K, V)": {"Returns": [["@B_java#util#Map_E@", "an immutable map containing only the specified key-value mapping."]], "Parameters": [["K", "K: the sole key to be stored in the returned map."], ["V", "V: the value to which the returned map maps key."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable map, mapping only the specified key to the specified value. The returned map is serializable.", "history": "added in API level 1", "FullName": "public static Map<K, V> singletonMap (K key, V value)"}, "replaceAll(java.util.List<T>,T,T)": {"Returns": [["boolean", "true if list contained one or more elements e such that (oldVal==null ? e==null : oldVal.equals(e))."]], "Parameters": [["@B_java#util#List_E@", "List: the list in which replacement is to occur."], ["T", "T: the old value to be replaced."], ["T", "T: the new value with which oldVal is to be replaced."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces all occurrences of one specified value in a list with another. More formally, replaces with", "history": "Added in API level 1", "FullName": "public static boolean replaceAll (List<T> list, T oldVal, T newVal)"}, "swap(java.util.List<?>,int,int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list in which to swap elements."], ["int", "int: the index of one element to be swapped."], ["int", "int: the index of the other element to be swapped."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if either i or j is out of range (i < 0 || i >= list.size() || j < 0 || j >= list.size())."]], "SeeAlso": [], "Permissions": [], "Description": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)", "history": "Added in API level 1", "FullName": "public static void swap (List<?> list, int i, int j)"}, "copy(java.util.List<?superT>,java.util.List<?extendsT>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The destination list."], ["@B_java#util#List_E@", "List: The source list."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the destination list is too small to contain the entire source List."], ["@B_java#lang#UnsupportedOperationException_E@", "if the destination list's list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list must be at least as long as the source list. If it is longer, the remaining elements in the destination list are unaffected. This method runs in linear time.", "history": "Added in API level 1", "FullName": "public static void copy (List<? super T> dest, List<? extends T> src)"}, "emptyNavigableMap()": {"Returns": [["@B_java#util#NavigableMap_E@", "an empty navigable map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty navigable map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:", "history": "Added in API level 26", "FullName": "public static final NavigableMap<K, V> emptyNavigableMap ()"}, "emptySet()": {"Returns": [["@B_java#util#Set_E@", "the empty set"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Collections_E@"], "Permissions": [], "Description": "Returns an empty set (immutable). This set is serializable. Unlike the like-named field, this method is parameterized. This example illustrates the type-safe way to obtain an empty set:", "history": "Added in API level 1", "FullName": "public static final Set<T> emptySet ()"}, "unmodifiableSortedMap(java.util.SortedMap<K,?extendsV>)": {"Returns": [["@B_java#util#SortedMap_E@", "an unmodifiable view of the specified sorted map."]], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified sorted map. This method allows modules to provide users with \"read-only\" access to internal sorted maps. Query operations on the returned sorted map \"read through\" to the specified sorted map. Attempts to modify the returned sorted map, whether direct, via its collection views, or via its The returned sorted map will be serializable if the specified sorted map is serializable.", "history": "Added in API level 1", "FullName": "public static SortedMap<K, V> unmodifiableSortedMap (SortedMap<K, ? extends V> m)"}, "emptyNavigableSet()": {"Returns": [["@B_java#util#NavigableSet_E@", "the empty navigable set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty navigable set (immutable). This set is serializable. This example illustrates the type-safe way to obtain an empty navigable set:", "history": "Added in API level 26", "FullName": "public static NavigableSet<E> emptyNavigableSet ()"}, "emptySortedMap()": {"Returns": [["@B_java#util#SortedMap_E@", "an empty sorted map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an empty sorted map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:", "history": "Added in API level 26", "FullName": "public static final SortedMap<K, V> emptySortedMap ()"}, "addAll(java.util.Collection<? super T>, T...)": {"Returns": [["boolean", "true if the collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection into which elements are to be inserted"], ["T...", "T: the elements to insert into c"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if c does not support the add operation"], ["@B_java#lang#NullPointerException_E@", "if elements contains one or more null values and c does not permit null elements, or if c or elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a value in elements prevents it from being added to c"]], "SeeAlso": ["@B_java#util#Collection#addAll_E@"], "Permissions": [], "Description": "Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:", "history": "added in API level 1", "FullName": "public static boolean addAll (Collection<? super T> c, T... elements)"}, "synchronizedMap(java.util.Map<K,V>)": {"Returns": [["@B_java#util#Map_E@", "a synchronized view of the specified map."]], "Parameters": [["@B_java#util#Map_E@", "Map: the map to be \"wrapped\" in a synchronized map."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views: The returned map will be serializable if the specified map is serializable.", "history": "Added in API level 1", "FullName": "public static Map<K, V> synchronizedMap (Map<K, V> m)"}, "singletonList(T)": {"Returns": [["@B_java#util#List_E@", "an immutable list containing only the specified object."]], "Parameters": [["T", "T: the sole object to be stored in the returned list."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable list containing only the specified object. The returned list is serializable.", "history": "Added in API level 1", "FullName": "public static List<T> singletonList (T o)"}, "reverseOrder()": {"Returns": [["@B_java#util#Comparator_E@", "A comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface. (The natural ordering is the ordering imposed by the objects' own compareTo method.) This enables a simple idiom for sorting (or maintaining) collections (or arrays) of objects that implement the Comparable interface in reverse-natural-order. For example, suppose a is an array of strings. Then: The returned comparator is serializable.", "history": "Added in API level 1", "FullName": "public static Comparator<T> reverseOrder ()"}, "addAll(java.util.Collection<?superT>,T...)": {"Returns": [["boolean", "true if the collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection into which elements are to be inserted"], ["T...", "T: the elements to insert into c"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if c does not support the add operation"], ["@B_java#lang#NullPointerException_E@", "if elements contains one or more null values and c does not permit null elements, or if c or elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a value in elements prevents it from being added to c"]], "SeeAlso": ["@B_java#util#Collection#addAll_E@"], "Permissions": [], "Description": "Adds all of the specified elements to the specified collection. Elements to be added may be specified individually or as an array. The behavior of this convenience method is identical to that of When elements are specified individually, this method provides a convenient way to add a few elements to an existing collection:", "history": "Added in API level 1", "FullName": "public static boolean addAll (Collection<? super T> c, T... elements)"}, "reverse(java.util.List<?>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list whose elements are to be reversed."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Reverses the order of the elements in the specified list. This method runs in linear time.", "history": "Added in API level 1", "FullName": "public static void reverse (List<?> list)"}, "emptyEnumeration()": {"Returns": [["@B_java#util#Enumeration_E@", "an empty enumeration"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an enumeration that has no elements. More precisely, @B_java#util#Enumeration#hasMoreElements_E@ always returns false. @B_java#util#Enumeration#nextElement_E@ always throws @B_java#util#NoSuchElementException_E@. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.", "history": "Added in API level 19", "FullName": "public static Enumeration<T> emptyEnumeration ()"}, "binarySearch(java.util.List<?extendsT>,T,java.util.Comparator<?superT>)": {"Returns": [["int", "the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or list.size() if all elements in the list are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["@B_java#util#List_E@", "List: the list to be searched."], ["T", "T: the key to be searched for."], ["@B_java#util#Comparator_E@", "Comparator: the comparator by which the list is ordered. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable using the specified comparator, or the search key is not mutually comparable with the elements of the list using this comparator."]], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the specified comparator (as by the @B_java#util#Collections#sort_E@ method), prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the @B_java#util#RandomAccess_E@ interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.", "history": "Added in API level 1", "FullName": "public static int binarySearch (List<? extends T> list, T key, Comparator<? super T> c)"}, "binarySearch(java.util.List<?extendsjava.lang.Comparable<?superT>>,T)": {"Returns": [["int", "the index of the search key, if it is contained in the list; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the list: the index of the first element greater than the key, or list.size() if all elements in the list are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["@B_java#util#List_E@", "List: the list to be searched."], ["T", "T: the key to be searched for."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable (for example, strings and integers), or the search key is not mutually comparable with the elements of the list."]], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified list for the specified object using the binary search algorithm. The list must be sorted into ascending order according to the @B_java#util#Collections#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the list contains multiple elements equal to the specified object, there is no guarantee which one will be found. This method runs in log(n) time for a \"random access\" list (which provides near-constant-time positional access). If the specified list does not implement the @B_java#util#RandomAccess_E@ interface and is large, this method will do an iterator-based binary search that performs O(n) link traversals and O(log n) element comparisons.", "history": "Added in API level 1", "FullName": "public static int binarySearch (List<? extends Comparable<? super T>> list, T key)"}, "fill(java.util.List<?superT>,T)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be filled with the specified element."], ["T", "T: The element with which to fill the specified list."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces all of the elements of the specified list with the specified element. This method runs in linear time.", "history": "Added in API level 1", "FullName": "public static void fill (List<? super T> list, T obj)"}, "synchronizedSortedMap(java.util.SortedMap<K, V>)": {"Returns": [["@B_java#util#SortedMap_E@", "a synchronized view of the specified sorted map."]], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map to be \"wrapped\" in a synchronized sorted map."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) sorted map backed by the specified sorted map. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned sorted map when iterating over any of its collection views, or the collections views of any of its The returned sorted map will be serializable if the specified sorted map is serializable.", "history": "added in API level 1", "FullName": "public static SortedMap<K, V> synchronizedSortedMap (SortedMap<K, V> m)"}, "sort(java.util.List<T>,java.util.Comparator<?superT>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be sorted."], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the list. A null value indicates that the elements' natural ordering should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable using the specified comparator."], ["@B_java#lang#UnsupportedOperationException_E@", "if the specified list's list-iterator does not support the set operation."], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": ["@B_java#util#List#sort_E@"], "Permissions": [], "Description": "Sorts the specified list according to the order induced by the specified comparator. All elements in the list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be The specified list must be modifiable, but need not be resizable.", "history": "Added in API level 1", "FullName": "public static void sort (List<T> list, Comparator<? super T> c)"}, "nCopies(int,T)": {"Returns": [["@B_java#util#List_E@", "an immutable list consisting of n copies of the specified object."]], "Parameters": [["int", "int: the number of elements in the returned list."], ["T", "T: the element to appear repeatedly in the returned list."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if n < 0"]], "SeeAlso": ["@B_java#util#List#addAll_E@"], "Permissions": [], "Description": "Returns an immutable list consisting of", "history": "Added in API level 1", "FullName": "public static List<T> nCopies (int n, T o)"}, "max(java.util.Collection<? extends T>)": {"Returns": [["T", "the maximum element of the given collection, according to the natural ordering of its elements."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose maximum element is to be determined."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable (for example, strings and integers)."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the maximum element of the given collection, according to the This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "added in API level 1", "FullName": "public static T max (Collection<? extends T> coll)"}, "singleton(E)": {"Returns": [["@B_java#util#Set_E@", "an immutable set containing only the specified object."]], "Parameters": [["E", "E: the sole object to be stored in the returned set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an immutable set containing only the specified object. The returned set is serializable.", "history": "Added in API level 1", "FullName": "Set<E> singleton (E o)"}, "synchronizedNavigableSet(java.util.NavigableSet<T>)": {"Returns": [["@B_java#util#NavigableSet_E@", "a synchronized view of the specified navigable set"]], "Parameters": [["@B_java#util#NavigableSet_E@", "NavigableSet: the navigable set to be \"wrapped\" in a synchronized navigable set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) navigable set backed by the specified navigable set. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned navigable set when iterating over it or any of its subSet, headSet, or tailSet views. The returned navigable set will be serializable if the specified navigable set is serializable.", "history": "Added in API level 26", "FullName": "public static NavigableSet<T> synchronizedNavigableSet (NavigableSet<T> s)"}, "unmodifiableNavigableMap(java.util.NavigableMap<K,?extendsV>)": {"Returns": [["@B_java#util#NavigableMap_E@", "an unmodifiable view of the specified navigable map"]], "Parameters": [["@B_java#util#NavigableMap_E@", "NavigableMap: the navigable map for which an unmodifiable view is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified navigable map. This method allows modules to provide users with \"read-only\" access to internal navigable maps. Query operations on the returned navigable map \"read through\" to the specified navigable map. Attempts to modify the returned navigable map, whether direct, via its collection views, or via its subMap, headMap, or tailMap views, result in an UnsupportedOperationException. The returned navigable map will be serializable if the specified navigable map is serializable.", "history": "Added in API level 26", "FullName": "public static NavigableMap<K, V> unmodifiableNavigableMap (NavigableMap<K, ? extends V> m)"}, "reverseOrder(java.util.Comparator<T>)": {"Returns": [["@B_java#util#Comparator_E@", "A comparator that imposes the reverse ordering of the specified comparator."]], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: a comparator who's ordering is to be reversed by the returned comparator or null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a comparator that imposes the reverse ordering of the specified comparator. If the specified comparator is null, this method is equivalent to @B_java#util#Collections#reverseOrder_E@ (in other words, it returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface). The returned comparator is serializable (assuming the specified comparator is also serializable or null).", "history": "Added in API level 1", "FullName": "public static Comparator<T> reverseOrder (Comparator<T> cmp)"}, "synchronizedNavigableMap(java.util.NavigableMap<K,V>)": {"Returns": [["@B_java#util#NavigableMap_E@", "a synchronized view of the specified navigable map."]], "Parameters": [["@B_java#util#NavigableMap_E@", "NavigableMap: the navigable map to be \"wrapped\" in a synchronized navigable map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) navigable map backed by the specified navigable map. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned navigable map when iterating over any of its collection views, or the collections views of any of its subMap, headMap or tailMap views. The returned navigable map will be serializable if the specified navigable map is serializable.", "history": "Added in API level 26", "FullName": "public static NavigableMap<K, V> synchronizedNavigableMap (NavigableMap<K, V> m)"}, "disjoint(java.util.Collection<?>,java.util.Collection<?>)": {"Returns": [["boolean", "true if the two specified collections have no elements in common."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: a collection"], ["@B_java#util#Collection_E@", "Collection: a collection"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if either collection is null."], ["@B_java#lang#NullPointerException_E@", "if one collection contains a null element and null is not an eligible element for the other collection. (optional)"], ["@B_java#lang#ClassCastException_E@", "if one collection contains an element that is of a type which is ineligible for the other collection. (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the two specified collections have no elements in common. Care must be exercised if this method is used on collections that do not comply with the general contract for Collection. Implementations may elect to iterate over either collection and test for containment in the other collection (or to perform any equivalent computation). If either collection uses a nonstandard equality test (as does a @B_java#util#SortedSet_E@ whose ordering is not compatible with equals, or the key set of an @B_java#util#IdentityHashMap_E@), both collections must use the same nonstandard equality test, or the result of this method is undefined. Care must also be exercised when using collections that have restrictions on the elements that they may contain. Collection implementations are allowed to throw exceptions for any operation involving elements they deem ineligible. For absolute safety the specified collections should contain only elements which are eligible elements for both collections. Note that it is permissible to pass the same collection in both parameters, in which case the method will return true if and only if the collection is empty.", "history": "Added in API level 1", "FullName": "public static boolean disjoint (Collection<?> c1, Collection<?> c2)"}, "shuffle(java.util.List<?>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be shuffled."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Randomly permutes the specified list using a default source of randomness. All permutations occur with approximately equal likelihood. The hedge \"approximately\" is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the @B_java#util#RandomAccess_E@ interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.", "history": "Added in API level 1", "FullName": "public static void shuffle (List<?> list)"}, "checkedSortedSet(java.util.SortedSet<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#SortedSet_E@", "a dynamically typesafe view of the specified sorted set"]], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: the sorted set for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that s is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified sorted set. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a sorted set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the sorted set takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned sorted set will be serializable if the specified sorted set is serializable. Since null is considered to be a value of any reference type, the returned sorted set permits insertion of null elements whenever the backing sorted set does.", "history": "Added in API level 1", "FullName": "public static SortedSet<E> checkedSortedSet (SortedSet<E> s, Class<E> type)"}, "newSetFromMap(java.util.Map<E,java.lang.Boolean>)": {"Returns": [["@B_java#util#Set_E@", "the set backed by the map"]], "Parameters": [["@B_java#util#Map_E@", "Map: the backing map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if map is not empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a set backed by the specified map. The resulting set displays the same ordering, concurrency, and performance characteristics as the backing map. In essence, this factory method provides a @B_java#util#Set_E@ implementation corresponding to any @B_java#util#Map_E@ implementation. There is no need to use this method on a @B_java#util#Map_E@ implementation that already has a corresponding @B_java#util#Set_E@ implementation (such as @B_java#util#HashMap_E@ or @B_java#util#TreeMap_E@). Each method invocation on the set returned by this method results in exactly one method invocation on the backing map or its The specified map must be empty at the time this method is invoked, and should not be accessed directly after this method returns. These conditions are ensured if the map is created empty, passed directly to this method, and no reference to the map is retained, as illustrated in the following code fragment:", "history": "Added in API level 9", "FullName": "public static Set<E> newSetFromMap (Map<E, Boolean> map)"}, "frequency(java.util.Collection<?>,java.lang.Object)": {"Returns": [["int", "the number of elements in c equal to o"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection in which to determine the frequency of o"], ["@B_java#lang#Object_E@", "Object: the object whose frequency is to be determined"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if c is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in the specified collection equal to the specified object. More formally, returns the number of elements", "history": "Added in API level 1", "FullName": "public static int frequency (Collection<?> c, Object o)"}, "max(java.util.Collection<?extendsT>,java.util.Comparator<?superT>)": {"Returns": [["T", "the maximum element of the given collection, according to the specified comparator."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose maximum element is to be determined."], ["@B_java#util#Comparator_E@", "Comparator: the comparator with which to determine the maximum element. A null value indicates that the elements' natural ordering should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable using the specified comparator."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the maximum element of the given collection, according to the order induced by the specified comparator. All elements in the collection must be This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "Added in API level 1", "FullName": "public static T max (Collection<? extends T> coll, Comparator<? super T> comp)"}, "synchronizedCollection(java.util.Collection<T>)": {"Returns": [["@B_java#util#Collection_E@", "a synchronized view of the specified collection."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to be \"wrapped\" in a synchronized collection."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) collection backed by the specified collection. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned collection when traversing it via @B_java#util#Iterator_E@, @B_java#util#Spliterator_E@ or @B_java#util#stream#Stream_E@: The returned collection does hashCode and equals operations through to the backing collection, but relies on Object's equals and hashCode methods. This is necessary to preserve the contracts of these operations in the case that the backing collection is a set or a list. The returned collection will be serializable if the specified collection is serializable.", "history": "Added in API level 1", "FullName": "public static Collection<T> synchronizedCollection (Collection<T> c)"}, "emptyMap()": {"Returns": [["@B_java#util#Map_E@", "an empty map"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Collections_E@"], "Permissions": [], "Description": "Returns an empty map (immutable). This map is serializable. This example illustrates the type-safe way to obtain an empty map:", "history": "Added in API level 1", "FullName": "public static final Map<K, V> emptyMap ()"}, "checkedMap(java.util.Map<K,V>,java.lang.Class<K>,java.lang.Class<V>)": {"Returns": [["@B_java#util#Map_E@", "a dynamically typesafe view of the specified map"]], "Parameters": [["@B_java#util#Map_E@", "Map: the map for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of key that m is permitted to hold"], ["@B_java#lang#Class_E@", "Class: the type of value that m is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Similarly, any attempt to modify the value currently associated with a key will result in an immediate @B_java#lang#ClassCastException_E@, whether the modification is attempted directly through the map itself, or through a @B_java#util#Map#Entry_E@ instance obtained from the map's @B_java#util#Map#entrySet_E@ view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.", "history": "Added in API level 1", "FullName": "public static Map<K, V> checkedMap (Map<K, V> m, Class<K> keyType, Class<V> valueType)"}, "checkedList(java.util.List<E>, java.lang.Class<E>)": {"Returns": [["@B_java#util#List_E@", "a dynamically typesafe view of the specified list"]], "Parameters": [["@B_java#util#List_E@", "List: the list for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that list is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified list. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a list contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the list takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned list will be serializable if the specified list is serializable. Since null is considered to be a value of any reference type, the returned list permits insertion of null elements whenever the backing list does.", "history": "added in API level 1", "FullName": "public static List<E> checkedList (List<E> list, Class<E> type)"}, "nCopies(int, T)": {"Returns": [["@B_java#util#List_E@", "an immutable list consisting of n copies of the specified object."]], "Parameters": [["int", "int: the number of elements in the returned list."], ["T", "T: the element to appear repeatedly in the returned list."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if n < 0"]], "SeeAlso": ["@B_java#util#List#addAll_E@"], "Permissions": [], "Description": "Returns an immutable list consisting of", "history": "added in API level 1", "FullName": "public static List<T> nCopies (int n, T o)"}, "synchronizedSortedSet(java.util.SortedSet<E>)": {"Returns": [["", "a synchronized sorted set."]], "Parameters": [["@B_java#util#SortedSet_E@", "the sorted set to wrap in a synchronized sorted set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a wrapper on the specified sorted set which synchronizes all access to the sorted set.", "history": "Added in API level 1", "FullName": "public static SortedSet<E> synchronizedSortedSet (SortedSet<E> set)"}, "unmodifiableList(java.util.List<? extends T>)": {"Returns": [["@B_java#util#List_E@", "an unmodifiable view of the specified list."]], "Parameters": [["@B_java#util#List_E@", "List: the list for which an unmodifiable view is to be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified list. This method allows modules to provide users with \"read-only\" access to internal lists. Query operations on the returned list \"read through\" to the specified list, and attempts to modify the returned list, whether direct or via its iterator, result in an The returned list will be serializable if the specified list is serializable. Similarly, the returned list will implement @B_java#util#RandomAccess_E@ if the specified list does.", "history": "added in API level 24", "FullName": "public static List<T> unmodifiableList (List<? extends T> list)"}, "shuffle(java.util.List<?>, java.util.Random)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be shuffled."], ["@B_java#util#Random_E@", "Random: the source of randomness to use to shuffle the list."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Randomly permute the specified list using the specified source of randomness. All permutations occur with equal likelihood assuming that the source of randomness is fair. This implementation traverses the list backwards, from the last element up to the second, repeatedly swapping a randomly selected element into the \"current position\". Elements are randomly selected from the portion of the list that runs from the first element to the current position, inclusive. This method runs in linear time. If the specified list does not implement the @B_java#util#RandomAccess_E@ interface and is large, this implementation dumps the specified list into an array before shuffling it, and dumps the shuffled array back into the list. This avoids the quadratic behavior that would result from shuffling a \"sequential access\" list in place.", "history": "added in API level 1", "FullName": "public static void shuffle (List<?> list, Random rnd)"}, "sort(java.util.List<T>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be sorted."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable (for example, strings and integers)."], ["@B_java#lang#UnsupportedOperationException_E@", "if the specified list's list-iterator does not support the set operation."], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the implementation detects that the natural ordering of the list elements is found to violate the @B_java#lang#Comparable_E@ contract"]], "SeeAlso": ["@B_java#util#List#sort_E@"], "Permissions": [], "Description": "Sorts the specified list into ascending order, according to the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in the list must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the list). This sort is guaranteed to be The specified list must be modifiable, but need not be resizable.", "history": "Added in API level 1", "FullName": "public static void sort (List<T> list)"}, "fill(java.util.List<? super T>, T)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be filled with the specified element."], ["T", "T: The element with which to fill the specified list."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces all of the elements of the specified list with the specified element. This method runs in linear time.", "history": "added in API level 1", "FullName": "public static void fill (List<? super T> list, T obj)"}, "emptyIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an empty iterator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator that has no elements. More precisely, @B_java#util#Iterator#hasNext_E@ always returns false. @B_java#util#Iterator#next_E@ always throws @B_java#util#NoSuchElementException_E@. @B_java#util#Iterator#remove_E@ always throws @B_java#lang#IllegalStateException_E@. Implementations of this method are permitted, but not required, to return the same object from multiple invocations.", "history": "Added in API level 19", "FullName": "public static Iterator<T> emptyIterator ()"}, "rotate(java.util.List<?>, int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list to be rotated."], ["int", "int: the distance to rotate the list. There are no constraints on this value; it may be zero, negative, or greater than list.size()."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Rotates the elements in the specified list by the specified distance. After calling this method, the element at index For example, suppose Note that this method can usefully be applied to sublists to move one or more elements within a list while preserving the order of the remaining elements. For example, the following idiom moves the element at index To move more than one element forward, increase the absolute value of the rotation distance. To move elements backward, use a positive shift distance. If the specified list is small or implements the @B_java#util#RandomAccess_E@ interface, this implementation exchanges the first element into the location it should go, and then repeatedly exchanges the displaced element into the location it should go until a displaced element is swapped into the first element. If necessary, the process is repeated on the second and successive elements, until the rotation is complete. If the specified list is large and doesn't implement the @B_java#util#Collections#reverse_E@ method is invoked on each sublist view, and finally it is invoked on the entire list. For a more complete description of both algorithms, see Section 2.3 of Jon Bentley's", "history": "added in API level 1", "FullName": "public static void rotate (List<?> list, int distance)"}, "synchronizedSortedSet(java.util.SortedSet<T>)": {"Returns": [["@B_java#util#SortedSet_E@", "a synchronized view of the specified sorted set."]], "Parameters": [["@B_java#util#SortedSet_E@", "SortedSet: the sorted set to be \"wrapped\" in a synchronized sorted set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) sorted set backed by the specified sorted set. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned sorted set when iterating over it or any of its The returned sorted set will be serializable if the specified sorted set is serializable.", "history": "Added in API level 1", "FullName": "public static SortedSet<T> synchronizedSortedSet (SortedSet<T> s)"}, "min(java.util.Collection<? extends T>)": {"Returns": [["T", "the minimum element of the given collection, according to the natural ordering of its elements."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose minimum element is to be determined."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable (for example, strings and integers)."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the minimum element of the given collection, according to the This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "added in API level 1", "FullName": "public static T min (Collection<? extends T> coll)"}, "replaceAll(java.util.List<T>, T, T)": {"Returns": [["boolean", "true if list contained one or more elements e such that (oldVal==null ? e==null : oldVal.equals(e))."]], "Parameters": [["@B_java#util#List_E@", "List: the list in which replacement is to occur."], ["T", "T: the old value to be replaced."], ["T", "T: the new value with which oldVal is to be replaced."]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the specified list or its list-iterator does not support the set operation."]], "SeeAlso": [], "Permissions": [], "Description": "Replaces all occurrences of one specified value in a list with another. More formally, replaces with", "history": "added in API level 1", "FullName": "public static boolean replaceAll (List<T> list, T oldVal, T newVal)"}, "checkedQueue(java.util.Queue<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#Queue_E@", "a dynamically typesafe view of the specified queue"]], "Parameters": [["@B_java#util#Queue_E@", "Queue: the queue for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that queue is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified queue. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a queue contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the queue takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned queue will be serializable if the specified queue is serializable. Since null is considered to be a value of any reference type, the returned queue permits insertion of null elements whenever the backing queue does.", "history": "Added in API level 26", "FullName": "public static Queue<E> checkedQueue (Queue<E> queue, Class<E> type)"}, "min(java.util.Collection<?extendsT>)": {"Returns": [["T", "the minimum element of the given collection, according to the natural ordering of its elements."]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose minimum element is to be determined."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the collection contains elements that are not mutually comparable (for example, strings and integers)."], ["@B_java#util#NoSuchElementException_E@", "if the collection is empty."]], "SeeAlso": ["@B_java#lang#Comparable_E@"], "Permissions": [], "Description": "Returns the minimum element of the given collection, according to the This method iterates over the entire collection, hence it requires time proportional to the size of the collection.", "history": "Added in API level 1", "FullName": "public static T min (Collection<? extends T> coll)"}, "synchronizedMap(java.util.Map<K, V>)": {"Returns": [["@B_java#util#Map_E@", "a synchronized view of the specified map."]], "Parameters": [["@B_java#util#Map_E@", "Map: the map to be \"wrapped\" in a synchronized map."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a synchronized (thread-safe) map backed by the specified map. In order to guarantee serial access, it is critical that It is imperative that the user manually synchronize on the returned map when iterating over any of its collection views: The returned map will be serializable if the specified map is serializable.", "history": "added in API level 1", "FullName": "public static Map<K, V> synchronizedMap (Map<K, V> m)"}, "checkedSet(java.util.Set<E>, java.lang.Class<E>)": {"Returns": [["@B_java#util#Set_E@", "a dynamically typesafe view of the specified set"]], "Parameters": [["@B_java#util#Set_E@", "Set: the set for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that s is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified set. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the set takes place through the view, it is A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned set will be serializable if the specified set is serializable. Since null is considered to be a value of any reference type, the returned set permits insertion of null elements whenever the backing set does.", "history": "added in API level 1", "FullName": "public static Set<E> checkedSet (Set<E> s, Class<E> type)"}, "checkedNavigableMap(java.util.NavigableMap<K,V>,java.lang.Class<K>,java.lang.Class<V>)": {"Returns": [["@B_java#util#NavigableMap_E@", "a dynamically typesafe view of the specified map"]], "Parameters": [["@B_java#util#NavigableMap_E@", "NavigableMap: the map for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of key that m is permitted to hold"], ["@B_java#lang#Class_E@", "Class: the type of value that m is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified navigable map. Any attempt to insert a mapping whose key or value have the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Similarly, any attempt to modify the value currently associated with a key will result in an immediate @B_java#lang#ClassCastException_E@, whether the modification is attempted directly through the map itself, or through a @B_java#util#Map#Entry_E@ instance obtained from the map's @B_java#util#Map#entrySet_E@ view. Assuming a map contains no incorrectly typed keys or values prior to the time a dynamically typesafe view is generated, and that all subsequent access to the map takes place through the view (or one of its collection views), it is guaranteed that the map cannot contain an incorrectly typed key or value. A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned map will be serializable if the specified map is serializable. Since null is considered to be a value of any reference type, the returned map permits insertion of null keys or values whenever the backing map does.", "history": "Added in API level 26", "FullName": "public static NavigableMap<K, V> checkedNavigableMap (NavigableMap<K, V> m, Class<K> keyType, Class<V> valueType)"}, "checkedNavigableSet(java.util.NavigableSet<E>,java.lang.Class<E>)": {"Returns": [["@B_java#util#NavigableSet_E@", "a dynamically typesafe view of the specified navigable set"]], "Parameters": [["@B_java#util#NavigableSet_E@", "NavigableSet: the navigable set for which a dynamically typesafe view is to be returned"], ["@B_java#lang#Class_E@", "Class: the type of element that s is permitted to hold"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a dynamically typesafe view of the specified navigable set. Any attempt to insert an element of the wrong type will result in an immediate @B_java#lang#ClassCastException_E@. Assuming a navigable set contains no incorrectly typed elements prior to the time a dynamically typesafe view is generated, and that all subsequent access to the navigable set takes place through the view, it is guaranteed that the navigable set cannot contain an incorrectly typed element. A discussion of the use of dynamically typesafe views may be found in the documentation for the @B_java#util#Collections#checkedCollection_E@ method. The returned navigable set will be serializable if the specified navigable set is serializable. Since null is considered to be a value of any reference type, the returned navigable set permits insertion of null elements whenever the backing sorted set does.", "history": "Added in API level 26", "FullName": "public static NavigableSet<E> checkedNavigableSet (NavigableSet<E> s, Class<E> type)"}, "unmodifiableNavigableSet(java.util.NavigableSet<T>)": {"Returns": [["@B_java#util#NavigableSet_E@", "an unmodifiable view of the specified navigable set"]], "Parameters": [["@B_java#util#NavigableSet_E@", "NavigableSet: the navigable set for which an unmodifiable view is to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an unmodifiable view of the specified navigable set. This method allows modules to provide users with \"read-only\" access to internal navigable sets. Query operations on the returned navigable set \"read through\" to the specified navigable set. Attempts to modify the returned navigable set, whether direct, via its iterator, or via its subSet, headSet, or tailSet views, result in an UnsupportedOperationException. The returned navigable set will be serializable if the specified navigable set is serializable.", "history": "Added in API level 26", "FullName": "public static NavigableSet<T> unmodifiableNavigableSet (NavigableSet<T> s)"}}, "Inheritance": [], "ClassName": "java.util.Collections", "ClassDesc": "This class consists exclusively of static methods that operate on or return collections. It contains polymorphic algorithms that operate on collections, \"wrappers\", which return a new collection backed by a specified collection, and a few other odds and ends. The methods of this class all throw a The documentation for the polymorphic algorithms contained in this class generally includes a brief description of the The \"destructive\" algorithms contained in this class, that is, the algorithms that modify the collection on which they operate, are specified to throw This class is a member of the"}