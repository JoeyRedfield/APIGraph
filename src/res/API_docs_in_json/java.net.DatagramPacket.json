{"Functions": {"getPort()": {"Returns": [["int", "the port number on the remote host to which this datagram is being sent or from which the datagram was received."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#setPort_E@"], "Permissions": [], "Description": "Returns the port number on the remote host to which this datagram is being sent or from which the datagram was received.", "history": "Added in API level 1", "FullName": "public int getPort ()"}, "DatagramPacket(byte[],int,java.net.InetAddress,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the packet data."], ["int", "int: the packet length."], ["@B_java#net#InetAddress_E@", "InetAddress: the destination address."], ["int", "int: the destination port number."]], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress_E@"], "Permissions": [], "Description": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host. The length argument must be less than or equal to buf.length. Android note: Up to and including API 25 this method declared that a SocketException can be thrown, although the exception is never thrown. Code compiled against a newer SDK does not need to catch the exception and will be binary compatible with older versions of Android.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int length, InetAddress address, int port)"}, "setAddress(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the InetAddress"]], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#getAddress_E@"], "Permissions": [], "Description": "Sets the IP address of the machine to which this datagram is being sent.", "history": "Added in API level 1", "FullName": "public void setAddress (InetAddress iaddr)"}, "setData(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer to set for this packet"], ["int", "int: the offset into the data"], ["int", "int: the length of the data and/or the length of the buffer used to receive data"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": ["@B_java#net#DatagramPacket#getData_E@", "@B_java#net#DatagramPacket#getOffset_E@", "@B_java#net#DatagramPacket#getLength_E@"], "Permissions": [], "Description": "Set the data buffer for this packet. This sets the data, length and offset of the packet.", "history": "added in API level 1", "FullName": "public void setData (byte[] buf, int offset, int length)"}, "setData(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer to set for this packet."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null."]], "SeeAlso": ["@B_java#net#DatagramPacket#getLength_E@", "@B_java#net#DatagramPacket#getData_E@"], "Permissions": [], "Description": "Set the data buffer for this packet. With the offset of this DatagramPacket set to 0, and the length set to the length of buf.", "history": "Added in API level 1", "FullName": "public void setData (byte[] buf)"}, "DatagramPacket(byte[],int,int,java.net.SocketAddress)": {"Returns": [], "Parameters": [["byte[]", "byte: the packet data."], ["int", "int: the packet data offset."], ["int", "int: the packet data length."], ["@B_java#net#SocketAddress_E@", "SocketAddress: the destination socket address."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if address type is not supported"]], "SeeAlso": ["@B_java#net#InetAddress_E@"], "Permissions": [], "Description": "Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host. The length argument must be less than or equal to buf.length. Android note: Up to and including API 25 this method declared that a SocketException can be thrown, although the exception is never thrown. Code compiled against a newer SDK does not need to catch the exception and will be binary compatible with older versions of Android.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int offset, int length, SocketAddress address)"}, "DatagramPacket(byte[],int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer for holding the incoming datagram."], ["int", "int: the number of bytes to read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DatagramPacket for receiving packets of length length. The length argument must be less than or equal to buf.length.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int length)"}, "setData(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer to set for this packet"], ["int", "int: the offset into the data"], ["int", "int: the length of the data and/or the length of the buffer used to receive data"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": ["@B_java#net#DatagramPacket#getData_E@", "@B_java#net#DatagramPacket#getOffset_E@", "@B_java#net#DatagramPacket#getLength_E@"], "Permissions": [], "Description": "Set the data buffer for this packet. This sets the data, length and offset of the packet.", "history": "Added in API level 1", "FullName": "public void setData (byte[] buf, int offset, int length)"}, "setPort(int)": {"Returns": [], "Parameters": [["int", "int: the port number"]], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#getPort_E@"], "Permissions": [], "Description": "Sets the port number on the remote host to which this datagram is being sent.", "history": "Added in API level 1", "FullName": "public void setPort (int iport)"}, "getSocketAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "the SocketAddress"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#setSocketAddress_E@"], "Permissions": [], "Description": "Gets the SocketAddress (usually IP address + port number) of the remote host that this packet is being sent to or is coming from.", "history": "Added in API level 1", "FullName": "public SocketAddress getSocketAddress ()"}, "DatagramPacket(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer for holding the incoming datagram."], ["int", "int: the offset for the buffer"], ["int", "int: the number of bytes to read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DatagramPacket for receiving packets of length length, specifying an offset into the buffer. The length argument must be less than or equal to buf.length.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int offset, int length)"}, "getLength()": {"Returns": [["int", "the length of the data to be sent or the length of the data received."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#setLength_E@"], "Permissions": [], "Description": "Returns the length of the data to be sent or the length of the data received.", "history": "Added in API level 1", "FullName": "public int getLength ()"}, "setLength(int)": {"Returns": [], "Parameters": [["int", "int: the length to set for this packet."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the length is negative of if the length is greater than the packet's data buffer length."]], "SeeAlso": ["@B_java#net#DatagramPacket#getLength_E@", "@B_java#net#DatagramPacket#setData_E@"], "Permissions": [], "Description": "Set the length for this packet. The length of the packet is the number of bytes from the packet's data buffer that will be sent, or the number of bytes of the packet's data buffer that will be used for receiving data. The length must be lesser or equal to the offset plus the length of the packet's buffer.", "history": "Added in API level 1", "FullName": "public void setLength (int length)"}, "getData()": {"Returns": [["byte[]", "the buffer used to receive or send data"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#DatagramPacket#setData_E@"], "Permissions": [], "Description": "Returns the data buffer. The data received or the data to be sent starts from the offset in the buffer, and runs for length long.", "history": "Added in API level 1", "FullName": "public byte[] getData ()"}, "DatagramPacket(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer for holding the incoming datagram."], ["int", "int: the offset for the buffer"], ["int", "int: the number of bytes to read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DatagramPacket for receiving packets of length length, specifying an offset into the buffer. The length argument must be less than or equal to buf.length.", "history": "added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int offset, int length)"}, "DatagramPacket(byte[],int,java.net.SocketAddress)": {"Returns": [], "Parameters": [["byte[]", "byte: the packet data."], ["int", "int: the packet length."], ["@B_java#net#SocketAddress_E@", "SocketAddress: the destination address."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if address type is not supported"]], "SeeAlso": ["@B_java#net#InetAddress_E@"], "Permissions": [], "Description": "Constructs a datagram packet for sending packets of length length to the specified port number on the specified host. The length argument must be less than or equal to buf.length.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int length, SocketAddress address)"}, "DatagramPacket(byte[],int,int,java.net.InetAddress,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the packet data."], ["int", "int: the packet data offset."], ["int", "int: the packet data length."], ["@B_java#net#InetAddress_E@", "InetAddress: the destination address."], ["int", "int: the destination port number."]], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress_E@"], "Permissions": [], "Description": "Constructs a datagram packet for sending packets of length length with offset ioffsetto the specified port number on the specified host. The length argument must be less than or equal to buf.length.", "history": "Added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int offset, int length, InetAddress address, int port)"}, "setSocketAddress(java.net.SocketAddress)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the SocketAddress"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if address is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": ["@B_java#net#DatagramPacket#getSocketAddress_E@"], "Permissions": [], "Description": "Sets the SocketAddress (usually IP address + port number) of the remote host to which this datagram is being sent.", "history": "Added in API level 1", "FullName": "public void setSocketAddress (SocketAddress address)"}, "DatagramPacket(byte[], int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer for holding the incoming datagram."], ["int", "int: the number of bytes to read."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a DatagramPacket for receiving packets of length length. The length argument must be less than or equal to buf.length.", "history": "added in API level 1", "FullName": "public DatagramPacket (byte[] buf, int length)"}, "getOffset()": {"Returns": [["int", "the offset of the data to be sent or the offset of the data received."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset of the data to be sent or the offset of the data received.", "history": "Added in API level 1", "FullName": "public int getOffset ()"}, "getAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the IP address of the machine to which this datagram is being sent or from which the datagram was received."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress_E@", "@B_java#net#DatagramPacket#setAddress_E@"], "Permissions": [], "Description": "Returns the IP address of the machine to which this datagram is being sent or from which the datagram was received.", "history": "Added in API level 1", "FullName": "public InetAddress getAddress ()"}}, "Inheritance": [], "ClassName": "java.net.DatagramPacket", "ClassDesc": "This class represents a datagram packet. Datagram packets are used to implement a connectionless packet delivery service. Each message is routed from one machine to another based solely on information contained within that packet. Multiple packets sent from one machine to another might be routed differently, and might arrive in any order. Packet delivery is not guaranteed."}