{"Functions": {"EGLObjectHandle(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "protected EGLObjectHandle (long handle)"}, "getHandle()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#opengl#EGLObjectHandle#getNativeHandle_E@ instead. Handles on 64 bit platforms will be wider than java ints.", "history": "Added in API level 17 Deprecated in API level 21", "FullName": "public int getHandle ()"}, "getNativeHandle()": {"Returns": [["long", "the native handle of the wrapped EGL object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the native handle of the wrapped EGL object. This handle can be cast to the corresponding native type on the native side. For example, EGLDisplay dpy = (EGLDisplay)handle;", "history": "Added in API level 21", "FullName": "public long getNativeHandle ()"}, "EGLObjectHandle(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#opengl#EGLObjectHandle#EGLObjectHandle_E@ instead. Handles on 64 bit platforms will be wider than java ints.", "history": "Added in API level 17", "FullName": "protected EGLObjectHandle (int handle)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 17", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.opengl.EGLObjectHandle", "ClassDesc": "Base class for wrapped EGL objects."}