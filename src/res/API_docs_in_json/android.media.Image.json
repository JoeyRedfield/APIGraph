{"Functions": {"getTimestamp()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the timestamp associated with this frame. The timestamp is measured in nanoseconds, and is normally monotonically increasing. The timestamps for the images from different sources may have different timebases therefore may not be comparable. The specific meaning and timebase of the timestamp depend on the source providing images. See @B_android#hardware#Camera_E@, @B_android#hardware#camera2#CameraDevice_E@, @B_android#media#MediaPlayer_E@ and @B_android#media#MediaCodec_E@ for more details.", "history": "Added in API level 19", "FullName": "public abstract long getTimestamp ()"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The width of the image in pixels. For formats where some color channels are subsampled, this is the width of the largest-resolution plane.", "history": "Added in API level 19", "FullName": "public abstract int getWidth ()"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The height of the image in pixels. For formats where some color channels are subsampled, this is the height of the largest-resolution plane.", "history": "Added in API level 19", "FullName": "public abstract int getHeight ()"}, "setTimestamp(long)": {"Returns": [], "Parameters": [["long", "long: The timestamp to be set for this image."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the timestamp associated with this frame. The timestamp is measured in nanoseconds, and is normally monotonically increasing. The timestamps for the images from different sources may have different timebases therefore may not be comparable. The specific meaning and timebase of the timestamp depend on the source providing images. See @B_android#hardware#Camera_E@, @B_android#hardware#camera2#CameraDevice_E@, @B_android#media#MediaPlayer_E@ and @B_android#media#MediaCodec_E@ for more details. For images dequeued from @B_android#media#ImageWriter_E@ via @B_android#media#ImageWriter#dequeueInputImage_E@, it's up to the application to set the timestamps correctly before sending them back to the @B_android#media#ImageWriter_E@, or the timestamp will be generated automatically when @B_android#media#ImageWriter#queueInputImage_E@ is called.", "history": "Added in API level 23", "FullName": "public void setTimestamp (long timestamp)"}, "getHardwareBuffer()": {"Returns": [["@B_android#hardware#HardwareBuffer_E@", "the HardwareBuffer associated with this Image or null if this Image doesn't support this feature. (Unsupported use cases include Image instances obtained through @B_android#media#MediaCodec_E@, and on versions prior to Android P, @B_android#media#ImageWriter_E@)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#hardware#HardwareBuffer_E@ handle of the input image intended for GPU and/or hardware access. The returned @B_android#hardware#HardwareBuffer_E@ shall not be used after @B_android#media#Image#close_E@ has been called.", "history": "Added in API level 28", "FullName": "public HardwareBuffer getHardwareBuffer ()"}, "getPlanes()": {"Returns": [["@B_android#media#Image#Plane_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the array of pixel planes for this Image. The number of planes is determined by the format of the Image. The application will get an empty array if the image format is @B_android#graphics#ImageFormat#PRIVATE_E@, because the image pixel data is not directly accessible. The application can check the image format by calling @B_android#media#Image#getFormat_E@.", "history": "Added in API level 19", "FullName": "public abstract Plane[] getPlanes ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Free up this frame for reuse. After calling this method, calling any methods on this Image will result in an @B_java#lang#IllegalStateException_E@, and attempting to read from or write to @B_java#nio#ByteBuffer_E@ returned by an earlier @B_android#media#Image#Plane#getBuffer_E@ call will have undefined behavior. If the image was obtained from @B_android#media#ImageWriter_E@ via @B_android#media#ImageWriter#dequeueInputImage_E@, after calling this method, any image data filled by the application will be lost and the image will be returned to @B_android#media#ImageWriter_E@ for reuse. Images given to @B_android#media#ImageWriter#queueInputImage_E@ are automatically closed.", "history": "Added in API level 19", "FullName": "public abstract void close ()"}, "getCropRect()": {"Returns": [["@B_android#graphics#Rect_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the crop rectangle associated with this frame. The crop rectangle specifies the region of valid pixels in the image, using coordinates in the largest-resolution plane.", "history": "Added in API level 21", "FullName": "public Rect getCropRect ()"}, "getFormat()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ImageFormat_E@"], "Permissions": [], "Description": "Get the format for this image. This format determines the number of ByteBuffers needed to represent the image, and the general layout of the pixel data in each ByteBuffer. The format is one of the values from @B_android#graphics#ImageFormat_E@. The mapping between the formats and the planes is as follows:", "history": "Added in API level 19", "FullName": "public abstract int getFormat ()"}, "setCropRect(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the crop rectangle associated with this frame. The crop rectangle specifies the region of valid pixels in the image, using coordinates in the largest-resolution plane.", "history": "Added in API level 21", "FullName": "public void setCropRect (Rect cropRect)"}}, "Inheritance": [], "ClassName": "android.media.Image", "ClassDesc": "A single complete image buffer to use with a media source such as a @B_android#media#MediaCodec_E@ or a @B_android#hardware#camera2#CameraDevice_E@. This class allows for efficient direct application access to the pixel data of the Image through one or more @B_java#nio#ByteBuffer_E@. Each buffer is encapsulated in a @B_android#media#Image#Plane_E@ that describes the layout of the pixel data in that plane. Due to this direct access, and unlike the @B_android#graphics#Bitmap_E@ class, Images are not directly usable as UI resources. Since Images are often directly produced or consumed by hardware components, they are a limited resource shared across the system, and should be closed as soon as they are no longer needed. For example, when using the @B_android#media#ImageReader_E@ class to read out Images from various media sources, not closing old Image objects will prevent the availability of new Images once @B_android#media#ImageReader#getMaxImages_E@ is reached. When this happens, the function acquiring new Images will typically throw an @B_java#lang#IllegalStateException_E@."}