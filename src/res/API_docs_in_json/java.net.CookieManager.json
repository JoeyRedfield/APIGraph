{"Functions": {"get(java.net.URI,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [["@B_java#util#Map_E@", "an immutable map from state management headers, with field names \"Cookie\" or \"Cookie2\" to a list of cookies containing state information"]], "Parameters": [["@B_java#net#URI_E@", "URI: a URI representing the intended use for the cookies"], ["@B_java#util#Map_E@", "Map: - a Map from request header field names to lists of field values representing the current request headers"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Gets all the applicable cookies from a cookie cache for the specified uri in the request header. The URI passed as an argument specifies the intended use for the cookies. In particular the scheme should reflect whether the cookies will be sent over http, https or used in another context like javascript. The host part should reflect either the destination of the cookies or their origin in the case of javascript. It is up to the implementation to take into account the URI and the cookies attributes and security settings to determine which ones should be returned. HTTP protocol implementers should make sure that this method is called after all request headers related to choosing cookies are added, and before the request is sent.", "history": "Added in API level 9", "FullName": "public Map<String, List<String>> get (URI uri, Map<String, List<String>> requestHeaders)"}, "getCookieStore()": {"Returns": [["@B_java#net#CookieStore_E@", "the cookie store currently used by cookie manager."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To retrieve current cookie store.", "history": "Added in API level 9", "FullName": "public CookieStore getCookieStore ()"}, "CookieManager(java.net.CookieStore,java.net.CookiePolicy)": {"Returns": [], "Parameters": [["@B_java#net#CookieStore_E@", "CookieStore: a CookieStore to be used by cookie manager. if null, cookie manager will use a default one, which is an in-memory CookieStore implementation."], ["@B_java#net#CookiePolicy_E@", "CookiePolicy: a CookiePolicy instance to be used by cookie manager as policy callback. if null, ACCEPT_ORIGINAL_SERVER will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new cookie manager with specified cookie store and cookie policy.", "history": "Added in API level 9", "FullName": "public CookieManager (CookieStore store, CookiePolicy cookiePolicy)"}, "CookieManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new cookie manager. This constructor will create new cookie manager with default cookie store and accept policy. The effect is same as CookieManager(null, null).", "history": "Added in API level 9", "FullName": "public CookieManager ()"}, "put(java.net.URI,java.util.Map<java.lang.String,java.util.List<java.lang.String>>)": {"Returns": [], "Parameters": [["@B_java#net#URI_E@", "URI: a URI where the cookies come from"], ["@B_java#util#Map_E@", "Map: an immutable map from field names to lists of field values representing the response header fields returned"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets all the applicable cookies, examples are response header fields that are named Set-Cookie2, present in the response headers into a cookie cache.", "history": "Added in API level 9", "FullName": "public void put (URI uri, Map<String, List<String>> responseHeaders)"}, "setCookiePolicy(java.net.CookiePolicy)": {"Returns": [], "Parameters": [["@B_java#net#CookiePolicy_E@", "CookiePolicy: the cookie policy. Can be null, which has no effects on current cookie policy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To set the cookie policy of this cookie manager. A instance of CookieManager will have cookie policy ACCEPT_ORIGINAL_SERVER by default. Users always can call this method to set another cookie policy.", "history": "Added in API level 9", "FullName": "public void setCookiePolicy (CookiePolicy cookiePolicy)"}}, "Inheritance": ["@B_java#net#CookieHandler_E@"], "ClassName": "java.net.CookieManager", "ClassDesc": "CookieManager provides a concrete implementation of @B_java#net#CookieHandler_E@, which separates the storage of cookies from the policy surrounding accepting and rejecting cookies. A CookieManager is initialized with a @B_java#net#CookieStore_E@ which manages storage, and a @B_java#net#CookiePolicy_E@ object, which makes policy decisions on cookie acceptance/rejection. The HTTP cookie management in java.net package looks like: There're various ways user can hook up his own HTTP cookie management behavior, e.g. The implementation conforms to"}