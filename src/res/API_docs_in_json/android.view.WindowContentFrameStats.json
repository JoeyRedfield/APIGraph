{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getFrameReadyTimeNano(int)": {"Returns": [["long", "The ready time in nanoseconds or @B_android#view#FrameStats#UNDEFINED_TIME_NANO_E@ if the frame is not ready yet."]], "Parameters": [["int", "int: The frame index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the time a frame at a given index was ready for presentation.", "history": "Added in API level 21", "FullName": "public long getFrameReadyTimeNano (int index)"}, "getFramePostedTimeNano(int)": {"Returns": [["long", "The posted time in nanoseconds."]], "Parameters": [["int", "int: The frame index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the time a frame at a given index was posted by the producer (e.g. the application). It is either explicitly set or defaulted to the time when the render buffer was posted. @B_android#view#WindowContentFrameStats#getFrameReadyTimeNano_E@.", "history": "Added in API level 21", "FullName": "public long getFramePostedTimeNano (int index)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}}, "Inheritance": ["@B_android#view#FrameStats_E@"], "ClassName": "android.view.WindowContentFrameStats", "ClassDesc": "This class contains window content frame statistics. For example, a window content is rendred in frames when a view is scrolled. The frame statistics are a snapshot for the time interval from @B_android#view#FrameStats#getStartTimeNano_E@ to @B_android#view#FrameStats#getEndTimeNano_E@. The key idea is that in order to provide a smooth user experience an application has to draw a frame at a specific time interval obtained by calling @B_android#view#FrameStats#getRefreshPeriodNano_E@. If the application does not render a frame every refresh period the user will see irregular UI transitions. An application posts a frame for presentation by synchronously rendering its contents in a buffer which is then posted or posting a buffer to which the application is asychronously rendering the content via GL. After the frame is posted and rendered (potentially asynchronosly) it is presented to the user. The time a frame was posted can be obtained via @B_android#view#WindowContentFrameStats#getFramePostedTimeNano_E@, the time a frame content was rendered and ready for dsiplay (GL case) via @B_android#view#WindowContentFrameStats#getFrameReadyTimeNano_E@, and the time a frame was presented on the screen via @B_android#view#FrameStats#getFramePresentedTimeNano_E@."}