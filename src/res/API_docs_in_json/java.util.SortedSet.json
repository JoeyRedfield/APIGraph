{"Functions": {"headSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are strictly less than toElement"]], "Parameters": [["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if toElement is not compatible with this set's comparator (or, if the set has no comparator, if toElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and toElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are strictly less than The returned set will throw an", "history": "Added in API level 1", "FullName": "public abstract SortedSet<E> headSet (E toElement)"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this sorted set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a Spliterator over the elements in this sorted set. The Spliterator reports @B_java#util#Spliterator#DISTINCT_E@, @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@. Implementations should document the reporting of additional characteristic values. The spliterator's comparator (see @B_java#util#Spliterator#getComparator_E@) must be null if the sorted set's comparator (see @B_java#util#SortedSet#comparator_E@) is null. Otherwise, the spliterator's comparator must be the same as or impose the same total ordering as the sorted set's comparator.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "tailSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement is not compatible with this set's comparator (or, if the set has no comparator, if fromElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if fromElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and fromElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than or equal to The returned set will throw an", "history": "Added in API level 1", "FullName": "public abstract SortedSet<E> tailSet (E fromElement)"}, "last()": {"Returns": [["E", "the last (highest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this set is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last (highest) element currently in this set.", "history": "Added in API level 1", "FullName": "public abstract E last ()"}, "first()": {"Returns": [["E", "the first (lowest) element currently in this set"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this set is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (lowest) element currently in this set.", "history": "Added in API level 1", "FullName": "public abstract E first ()"}, "subSet(E, E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement and toElement cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromElement or toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if fromElement is greater than toElement; or if this set itself has a restricted range, and fromElement or toElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an", "history": "added in API level 1", "FullName": "public abstract SortedSet<E> subSet (E fromElement, E toElement)"}, "subSet(E,E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement and toElement cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromElement or toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if fromElement is greater than toElement; or if this set itself has a restricted range, and fromElement or toElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an", "history": "Added in API level 1", "FullName": "public abstract SortedSet<E> subSet (E fromElement, E toElement)"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the elements in this set, or", "history": "Added in API level 1", "FullName": "public abstract Comparator<? super E> comparator ()"}}, "Inheritance": [], "ClassName": "java.util.SortedSet<E>", "ClassDesc": "A @B_java#util#Set_E@ that further provides a @B_java#util#Comparator_E@ typically provided at sorted set creation time. The set's iterator will traverse the set in ascending element order. Several additional operations are provided to take advantage of the ordering. (This interface is the set analogue of @B_java#util#SortedMap_E@.) All elements inserted into a sorted set must implement the Note that the ordering maintained by a sorted set (whether or not an explicit comparator is provided) must be All general-purpose sorted set implementation classes should provide four \"standard\" constructors: 1) A void (no arguments) constructor, which creates an empty sorted set sorted according to the natural ordering of its elements. 2) A constructor with a single argument of type Note: several methods return subsets with restricted ranges. Such ranges are This interface is a member of the"}