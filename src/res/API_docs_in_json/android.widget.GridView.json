{"Functions": {"setAdapter(android.widget.ListAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#ListAdapter_E@", "ListAdapter: the adapter providing the grid's data"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the data behind this GridView.", "history": "Added in API level 1", "FullName": "public void setAdapter (ListAdapter adapter)"}, "layoutChildren()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses must override this method to layout their children.", "history": "Added in API level 1", "FullName": "protected void layoutChildren ()"}, "setStretchMode(int)": {"Returns": [], "Parameters": [["int", "int: Either @B_android#widget#GridView#NO_STRETCH_E@, @B_android#widget#GridView#STRETCH_SPACING_E@, @B_android#widget#GridView#STRETCH_SPACING_UNIFORM_E@, or @B_android#widget#GridView#STRETCH_COLUMN_WIDTH_E@. Value is @B_android#widget#GridView#NO_STRETCH_E@, @B_android#widget#GridView#STRETCH_SPACING_E@, @B_android#widget#GridView#STRETCH_COLUMN_WIDTH_E@, or @B_android#widget#GridView#STRETCH_SPACING_UNIFORM_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control how items are stretched to fill their space.", "history": "Added in API level 1", "FullName": "public void setStretchMode (int stretchMode)"}, "getAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "The adapter used to provide this view's content."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter currently associated with this widget.", "history": "Added in API level 1", "FullName": "public ListAdapter getAdapter ()"}, "getRequestedColumnWidth()": {"Returns": [["int", "The requested column width in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setColumnWidth_E@", "@B_android#widget#GridView#getColumnWidth_E@"], "Permissions": [], "Description": "Return the requested width of a column in the grid. This may not be the actual column width used. Use @B_android#widget#GridView#getColumnWidth_E@ to retrieve the current real width of a column.", "history": "Added in API level 16", "FullName": "public int getRequestedColumnWidth ()"}, "smoothScrollByOffset(int)": {"Returns": [], "Parameters": [["int", "int: The amount to offset from the adapter position to scroll to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position offset. The view will scroll such that the indicated position is displayed.", "history": "Added in API level 11", "FullName": "public void smoothScrollByOffset (int offset)"}, "GridView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public GridView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getHorizontalSpacing()": {"Returns": [["int", "Current horizontal spacing between each item in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setHorizontalSpacing_E@", "@B_android#widget#GridView#getRequestedHorizontalSpacing_E@"], "Permissions": [], "Description": "Returns the amount of horizontal spacing currently used between each item in the grid. This is only accurate for the current layout. If @B_android#widget#GridView#setHorizontalSpacing_E@ has been called but layout is not yet complete, this method may return a stale value. To get the horizontal spacing that was explicitly requested use @B_android#widget#GridView#getRequestedHorizontalSpacing_E@.", "history": "Added in API level 16", "FullName": "public int getHorizontalSpacing ()"}, "getGravity()": {"Returns": [["int", "the gravity that will be applied to this grid's children"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes how the child views are horizontally aligned. Defaults to Gravity.LEFT", "history": "Added in API level 16", "FullName": "public int getGravity ()"}, "getVerticalSpacing()": {"Returns": [["int", "The vertical spacing between items in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setVerticalSpacing_E@"], "Permissions": [], "Description": "Returns the amount of vertical spacing between each item in the grid.", "history": "Added in API level 16", "FullName": "public int getVerticalSpacing ()"}, "getRequestedHorizontalSpacing()": {"Returns": [["int", "The currently requested horizontal spacing between items, in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setHorizontalSpacing_E@", "@B_android#widget#GridView#getHorizontalSpacing_E@"], "Permissions": [], "Description": "Returns the requested amount of horizontal spacing between each item in the grid. The value returned may have been supplied during inflation as part of a style, the default GridView style, or by a call to @B_android#widget#GridView#setHorizontalSpacing_E@. If layout is not yet complete or if GridView calculated a different horizontal spacing from what was requested, this may return a different value from @B_android#widget#GridView#getHorizontalSpacing_E@.", "history": "Added in API level 16", "FullName": "public int getRequestedHorizontalSpacing ()"}, "computeVerticalScrollOffset()": {"Returns": [["int", "the vertical offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollOffset ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getColumnWidth()": {"Returns": [["int", "The column width in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setColumnWidth_E@", "@B_android#widget#GridView#getRequestedColumnWidth_E@"], "Permissions": [], "Description": "Return the width of a column in the grid. This may not be valid yet if a layout is pending.", "history": "Added in API level 16", "FullName": "public int getColumnWidth ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setVerticalSpacing(int)": {"Returns": [], "Parameters": [["int", "int: The amount of vertical space between items, in pixels."]], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#getVerticalSpacing_E@"], "Permissions": [], "Description": "Set the amount of vertical (y) spacing to place between each item in the grid.", "history": "Added in API level 1", "FullName": "public void setVerticalSpacing (int verticalSpacing)"}, "GridView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public GridView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "onInitializeAccessibilityNodeInfoForItem(android.view.View,int,android.view.accessibility.AccessibilityNodeInfo)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View representing the list item."], ["int", "int: Position of the list item within the adapter."], ["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: Node info to populate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes an @B_android#view#accessibility#AccessibilityNodeInfo_E@ with information about a particular item in the list.", "history": "Added in API level 19", "FullName": "public void onInitializeAccessibilityNodeInfoForItem (View view, int position, AccessibilityNodeInfo info)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyMultiple (int keyCode, int repeatCount, KeyEvent event)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "computeVerticalScrollExtent()": {"Returns": [["int", "the vertical extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollOffset_E@. The default extent is the drawing height of this view.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollExtent ()"}, "computeVerticalScrollRange()": {"Returns": [["int", "the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollExtent_E@ and @B_android#view#View#computeVerticalScrollOffset_E@.", "history": "Added in API level 1", "FullName": "protected int computeVerticalScrollRange ()"}, "setColumnWidth(int)": {"Returns": [], "Parameters": [["int", "int: The column width, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the width of columns in the grid.", "history": "Added in API level 1", "FullName": "public void setColumnWidth (int columnWidth)"}, "setRemoteViewsAdapter(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: the intent used to identify the RemoteViewsService for the adapter to connect to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AbsListView to use a remote views adapter which connects to a RemoteViewsService through the specified intent.", "history": "Added in API level 11", "FullName": "public void setRemoteViewsAdapter (Intent intent)"}, "getStretchMode()": {"Returns": [["int", "Value is @B_android#widget#GridView#NO_STRETCH_E@, @B_android#widget#GridView#STRETCH_SPACING_E@, @B_android#widget#GridView#STRETCH_COLUMN_WIDTH_E@, or @B_android#widget#GridView#STRETCH_SPACING_UNIFORM_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getStretchMode ()"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean gainFocus, int direction, Rect previouslyFocusedRect)"}, "attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup.LayoutParams,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child to associate with animation parameters"], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: the child's layout parameters which hold the animation parameters"], ["int", "int: the index of the child in the view group"], ["int", "int: the number of children in the view group"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses should override this method to set layout animation parameters on the supplied child.", "history": "Added in API level 1", "FullName": "protected void attachLayoutAnimationParameters (View child, ViewGroup.LayoutParams params, int index, int count)"}, "setHorizontalSpacing(int)": {"Returns": [], "Parameters": [["int", "int: The amount of horizontal space between items, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the amount of horizontal (x) spacing to place between each item in the grid.", "history": "Added in API level 1", "FullName": "public void setHorizontalSpacing (int horizontalSpacing)"}, "smoothScrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Smoothly scroll to the specified adapter position. The view will scroll such that the indicated position is displayed.", "history": "Added in API level 8", "FullName": "public void smoothScrollToPosition (int position)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: the gravity to apply to this grid's children"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the gravity for this grid. Gravity describes how the child views are horizontally aligned. Defaults to Gravity.LEFT", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setSelection(int)": {"Returns": [], "Parameters": [["int", "int: Index (starting at 0) of the data item to be selected. If in touch mode, the item will not be selected but it will still be positioned appropriately."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently selected item", "history": "Added in API level 1", "FullName": "public void setSelection (int position)"}, "setNumColumns(int)": {"Returns": [], "Parameters": [["int", "int: The desired number of columns."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the number of columns in the grid", "history": "Added in API level 1", "FullName": "public void setNumColumns (int numColumns)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "getNumColumns()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#GridView#setNumColumns_E@"], "Permissions": [], "Description": "Get the number of columns in the grid. Returns @B_android#widget#GridView#AUTO_FIT_E@ if the Grid has never been laid out.", "history": "Added in API level 11", "FullName": "public int getNumColumns ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "GridView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public GridView (Context context, AttributeSet attrs)"}, "GridView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public GridView (Context context)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#AdapterView_E@", "@B_android#widget#AbsListView_E@"], "ClassName": "android.widget.GridView", "ClassDesc": "A view that shows items in two-dimensional scrolling grid. The items in the grid come from the @B_android#widget#ListAdapter_E@ associated with this view. See the"}