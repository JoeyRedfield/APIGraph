{"Functions": {"XMLFormatter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public XMLFormatter ()"}, "format(java.util.logging.LogRecord)": {"Returns": [["@B_java#lang#String_E@", "a formatted log record"]], "Parameters": [["@B_java#util#logging#LogRecord_E@", "LogRecord: the log record to be formatted."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Format the given message to XML. This method can be overridden in a subclass. It is recommended to use the @B_java#util#logging#Formatter#formatMessage_E@ convenience method to localize and format the message field.", "history": "Added in API level 1", "FullName": "public String format (LogRecord record)"}, "getTail(java.util.logging.Handler)": {"Returns": [["@B_java#lang#String_E@", "a valid XML string"]], "Parameters": [["@B_java#util#logging#Handler_E@", "Handler: The target handler (can be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the tail string for a set of XML formatted records.", "history": "Added in API level 1", "FullName": "public String getTail (Handler h)"}, "getHead(java.util.logging.Handler)": {"Returns": [["@B_java#lang#String_E@", "a valid XML string"]], "Parameters": [["@B_java#util#logging#Handler_E@", "Handler: The target handler (can be null)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the header string for a set of XML formatted records.", "history": "Added in API level 1", "FullName": "public String getHead (Handler h)"}}, "Inheritance": ["@B_java#util#logging#Formatter_E@"], "ClassName": "java.util.logging.XMLFormatter", "ClassDesc": "Format a LogRecord into a standard XML format. The DTD specification is provided as Appendix A to the Java Logging APIs specification. The XMLFormatter can be used with arbitrary character encodings, but it is recommended that it normally be used with UTF-8. The character encoding can be set on the output Handler."}