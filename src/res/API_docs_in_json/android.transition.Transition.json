{"Functions": {"addTarget(java.lang.String)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to which the target transitionName is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must be non-null."]], "Throws": [], "SeeAlso": ["@B_android#view#View#getTransitionName_E@"], "Permissions": [], "Description": "Adds the transitionName of a target view that this Transition is interested in animating. By default, there are no targetNames, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetNames constrains the Transition to only listen for, and act on, views with these transitionNames. Views with different transitionNames, or no transitionName whatsoever, will be ignored. Note that transitionNames should be unique within the view hierarchy.", "history": "Added in API level 21", "FullName": "public Transition addTarget (String targetName)"}, "removeTarget(java.lang.String)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition from which the targetName is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetName(someName);"]], "Parameters": [["@B_java#lang#String_E@", "String: The transitionName of a target view, must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetName from the list of transitionNames that this Transition is interested in animating.", "history": "Added in API level 21", "FullName": "public Transition removeTarget (String targetName)"}, "excludeTarget(java.lang.String, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 21", "FullName": "public Transition excludeTarget (String targetName, boolean exclude)"}, "setPathMotion(android.transition.PathMotion)": {"Returns": [], "Parameters": [["@B_android#transition#PathMotion_E@", "PathMotion: Algorithm object to use for determining how to interpolate in two dimensions. If null, a straight-path algorithm will be used."]], "Throws": [], "SeeAlso": ["@B_android#transition#ArcMotion_E@", "@B_android#transition#PatternPathMotion_E@", "@B_android#transition#PathMotion_E@"], "Permissions": [], "Description": "Sets the algorithm used to calculate two-dimensional interpolation. Transitions such as @B_android#transition#ChangeBounds_E@ move Views, typically in a straight path between the start and end positions. Applications that desire to have these motions move in a curve can change how Views interpolate in two dimensions by extending PathMotion and implementing @B_android#transition#PathMotion#getPath_E@. When describing in XML, use a nested XML tag for the path motion. It can be one of the built-in tags arcMotion or patternPathMotion or it can be a custom PathMotion using pathMotion with the class attributed with the fully-described class name. For example: or", "history": "Added in API level 21", "FullName": "public void setPathMotion (PathMotion pathMotion)"}, "addTarget(java.lang.Class)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to which the target class was added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(ImageView.class);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to include when running this transition."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#addTarget_E@", "@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Adds the Class of a target view that this Transition is interested in animating. By default, there are no targetTypes, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetTypes constrains the Transition to only listen for, and act on, views with these classes. Views with different classes will be ignored. Note that any View that can be cast to targetType will be included, so if targetType is View.class, all Views will be included.", "history": "Added in API level 21", "FullName": "public Transition addTarget (Class targetType)"}, "addTarget(android.view.View)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to which the target is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: A View on which the Transition will act, must be non-null."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#addTarget_E@"], "Permissions": [], "Description": "Sets the target view instances that this Transition is interested in animating. By default, there are no targets, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targets constrains the Transition to only listen for, and act on, these views. All other views will be ignored. The target list is like the @B_android#transition#Transition#addTarget_E@ list except this list specifies the actual View instances, not the ids of the views. This is an important distinction when scene changes involve view hierarchies which have been inflated separately; different views may share the same id but not actually be the same instance. If the transition should treat those views as the same, then @B_android#transition#Transition#addTarget_E@ should be used instead of @B_android#transition#Transition#addTarget_E@. If, on the other hand, scene changes involve changes all within the same view hierarchy, among views which do not necessarily have ids set on them, then the target list of views may be more convenient.", "history": "Added in API level 19", "FullName": "public Transition addTarget (View target)"}, "excludeChildren(android.view.View,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the children of given target to the list of target children to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeChildren (View target, boolean exclude)"}, "setStartDelay(long)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["long", "long: The length of the delay, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the startDelay of this transition. By default, there is no delay (indicated by a negative number), which means that the Animator created by the transition will have its own specified startDelay. If the delay of a Transition is set, that delay will override the Animator delay.", "history": "Added in API level 19", "FullName": "public Transition setStartDelay (long startDelay)"}, "removeListener(android.transition.Transition.TransitionListener)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#transition#Transition#TransitionListener_E@", "Transition.TransitionListener: the listener to be removed from the current set of listeners for this transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a listener from the set listening to this animation.", "history": "Added in API level 19", "FullName": "public Transition removeListener (Transition.TransitionListener listener)"}, "excludeChildren(java.lang.Class, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the given type to the list of types whose children should be excluded from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeChildren (Class type, boolean exclude)"}, "getTargetNames()": {"Returns": [["@B_java#util#List_E@", "the list of target transitionNames"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of target transitionNames that this transition limits itself to tracking and animating. If the list is null or empty for @B_android#transition#Transition#getTargetIds_E@, @B_android#transition#Transition#getTargets_E@, @B_android#transition#Transition#getTargetNames_E@, and @B_android#transition#Transition#getTargetTypes_E@ then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.", "history": "Added in API level 21", "FullName": "public List<String> getTargetNames ()"}, "setMatchOrder(int...)": {"Returns": [], "Parameters": [["int...", "int: A list of zero or more of @B_android#transition#Transition#MATCH_INSTANCE_E@, @B_android#transition#Transition#MATCH_NAME_E@, @B_android#transition#Transition#MATCH_ITEM_ID_E@, and @B_android#transition#Transition#MATCH_ID_E@. If none are provided, then the default match order will be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the order in which Transition matches View start and end values. The default behavior is to match first by @B_android#view#View#getTransitionName_E@, then by View instance, then by @B_android#view#View#getId_E@ and finally by its item ID if it is in a direct child of ListView. The caller can choose to have only some or all of the values of @B_android#transition#Transition#MATCH_INSTANCE_E@, @B_android#transition#Transition#MATCH_NAME_E@, @B_android#transition#Transition#MATCH_ITEM_ID_E@, and @B_android#transition#Transition#MATCH_ID_E@. Only the match algorithms supplied will be used to determine whether Views are the the same in both the start and end Scene. Views that do not match will be considered as entering or leaving the Scene.", "history": "Added in API level 21", "FullName": "public void setMatchOrder (int... matches)"}, "Transition(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the transition is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform inflation from XML and apply a class-specific base style from a theme attribute or style resource. This constructor of Transition allows subclasses to use their own base style when they are inflating.", "history": "Added in API level 21", "FullName": "public Transition (Context context, AttributeSet attrs)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 19", "FullName": "public String toString ()"}, "createAnimator(android.view.ViewGroup,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["@B_android#animation#Animator_E@", "A Animator to be started at the appropriate time in the overall transition for this scene change. A null value means no animation should be run."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the transition hierarchy."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for a specific target in the start scene."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for the target in the end scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method creates an animation that will be run for this transition given the information in the startValues and endValues structures captured earlier for the start and end scenes. Subclasses of Transition should override this method. The method should only be called by the transition system; it is not intended to be called from external classes. This method is called by the transition's parent (all the way up to the topmost Transition in the hierarchy) with the sceneRoot and start/end values that the transition may need to set up initial target values and construct an appropriate animation. For example, if an overall Transition is a @B_android#transition#TransitionSet_E@ consisting of several child transitions in sequence, then some of the child transitions may want to set initial values on target views prior to the overall Transition commencing, to put them in an appropriate state for the delay between that start and the child Transition start time. For example, a transition that fades an item in may wish to set the starting alpha value to 0, to avoid it blinking in prior to the transition actually starting the animation. This is necessary because the scene change that triggers the Transition will automatically set the end-scene on all target views, so a Transition that wants to animate from a different value should set that value prior to returning from this method. Additionally, a Transition can perform logic to determine whether the transition needs to run on the given target and start/end values. For example, a transition that resizes objects on the screen may wish to avoid running for views which are not present in either the start or end scenes. If there is an animator created and returned from this method, the transition mechanism will apply any applicable duration, startDelay, and interpolator to that animation and start it. A return value of null indicates that no animation should run. The default implementation returns null. The method is called for every applicable target object, which is stored in the @B_android#transition#TransitionValues#view_E@ field.", "history": "Added in API level 19", "FullName": "public Animator createAnimator (ViewGroup sceneRoot, TransitionValues startValues, TransitionValues endValues)"}, "captureEndValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#captureStartValues_E@", "@B_android#transition#Transition#createAnimator_E@"], "Permissions": [], "Description": "Captures the values in the end scene for the properties that this transition monitors. These values are then passed as the endValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public abstract void captureEndValues (TransitionValues transitionValues)"}, "getEpicenterCallback()": {"Returns": [["@B_android#transition#Transition#EpicenterCallback_E@", "the callback used to find the epicenter of the Transition."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the callback used to find the epicenter of the Transition. Transitions like @B_android#transition#Explode_E@ use a point or Rect to orient the direction of travel. This is called the epicenter of the Transition and is typically centered on a touched View. The @B_android#transition#Transition#EpicenterCallback_E@ allows a Transition to dynamically retrieve the epicenter during a Transition.", "history": "Added in API level 21", "FullName": "public Transition.EpicenterCallback getEpicenterCallback ()"}, "setDuration(long)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["long", "long: The length of the animation, in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration of this transition. By default, there is no duration (indicated by a negative number), which means that the Animator created by the transition will have its own specified duration. If the duration of a Transition is set, that duration will override the Animator duration.", "history": "Added in API level 19", "FullName": "public Transition setDuration (long duration)"}, "getTransitionValues(android.view.View,boolean)": {"Returns": [["@B_android#transition#TransitionValues_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method can be called by transitions to get the TransitionValues for any particular view during the transition-playing process. This might be necessary, for example, to query the before/after state of related views for a given transition.", "history": "Added in API level 19", "FullName": "public TransitionValues getTransitionValues (View view, boolean start)"}, "getTransitionProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#transition#TransitionValues_E@. The default implementation returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names used stored in the @B_android#transition#TransitionValues_E@ object passed into @B_android#transition#Transition#captureStartValues_E@ that this transition cares about for the purposes of canceling overlapping animations. When any transition is started on a given scene root, all transitions currently running on that same scene root are checked to see whether the properties on which they based their animations agree with the end values of the same properties in the new transition. If the end values are not equal, then the old animation is canceled since the new transition will start a new animation to these new values. If the values are equal, the old animation is allowed to continue and no new animation is started for that transition. A transition does not need to override this method. However, not doing so will mean that the cancellation logic outlined in the previous paragraph will be skipped for that transition, possibly leading to artifacts as old transitions and new transitions on the same targets run in parallel, animating views toward potentially different end values.", "history": "Added in API level 19", "FullName": "public String[] getTransitionProperties ()"}, "excludeTarget(java.lang.String,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given transitionName to the list of target transitionNames to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded by their id, their instance reference, their transitionName, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 21", "FullName": "public Transition excludeTarget (String targetName, boolean exclude)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The name of this transition."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this Transition. This name is used internally to distinguish between different transitions to determine when interrupting transitions overlap. For example, a ChangeBounds running on the same target view as another ChangeBounds should determine whether the old transition is animating to different end values and should be canceled in favor of the new transition. By default, a Transition's name is simply the value of @B_java#lang#Class#getName_E@, but subclasses are free to override and return something different.", "history": "Added in API level 19", "FullName": "public String getName ()"}, "isTransitionRequired(android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: the values from captureStartValues, This may be null if the View did not exist in the start state. This value may be null."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: the values from captureEndValues. This may be null if the View did not exist in the end state. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether or not the transition should create an Animator, based on the values captured during @B_android#transition#Transition#captureStartValues_E@ and @B_android#transition#Transition#captureEndValues_E@. The default implementation compares the property values returned from @B_android#transition#Transition#getTransitionProperties_E@, or all property values if getTransitionProperties() returns null. Subclasses may override this method to provide logic more specific to the transition implementation.", "history": "Added in API level 23", "FullName": "public boolean isTransitionRequired (TransitionValues startValues, TransitionValues endValues)"}, "getEpicenter()": {"Returns": [["@B_android#graphics#Rect_E@", "the epicenter as specified by the @B_android#transition#Transition#EpicenterCallback_E@ or null if no callback exists."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#setEpicenterCallback_E@"], "Permissions": [], "Description": "Returns the epicenter as specified by the @B_android#transition#Transition#EpicenterCallback_E@ or null if no callback exists.", "history": "Added in API level 21", "FullName": "public Rect getEpicenter ()"}, "getPropagation()": {"Returns": [["@B_android#transition#TransitionPropagation_E@", "the @B_android#transition#TransitionPropagation_E@ used to calculate Animator start delays. This is null by default."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#transition#TransitionPropagation_E@ used to calculate Animator start delays. When a Transition affects several Views like @B_android#transition#Explode_E@ or @B_android#transition#Slide_E@, there may be a desire to have a \"wave-front\" effect such that the Animator start delay depends on position of the View. The TransitionPropagation specifies how the start delays are calculated.", "history": "Added in API level 21", "FullName": "public TransitionPropagation getPropagation ()"}, "setEpicenterCallback(android.transition.Transition.EpicenterCallback)": {"Returns": [], "Parameters": [["@B_android#transition#Transition#EpicenterCallback_E@", "Transition.EpicenterCallback: The callback to use to find the epicenter of the Transition."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the callback to use to find the epicenter of a Transition. A null value indicates that there is no epicenter in the Transition and onGetEpicenter() will return null. Transitions like @B_android#transition#Explode_E@ use a point or Rect to orient the direction of travel. This is called the epicenter of the Transition and is typically centered on a touched View. The @B_android#transition#Transition#EpicenterCallback_E@ allows a Transition to dynamically retrieve the epicenter during a Transition.", "history": "Added in API level 21", "FullName": "public void setEpicenterCallback (Transition.EpicenterCallback epicenterCallback)"}, "removeTarget(android.view.View)": {"Returns": [["@B_android#transition#Transition_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someView);"]], "Parameters": [["@B_android#view#View_E@", "View: The target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "Added in API level 19", "FullName": "public Transition removeTarget (View target)"}, "captureStartValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#captureEndValues_E@", "@B_android#transition#Transition#createAnimator_E@"], "Permissions": [], "Description": "Captures the values in the start scene for the properties that this transition monitors. These values are then passed as the startValues structure in a later call to @B_android#transition#Transition#createAnimator_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#Transition#createAnimator_E@ method to determine what, if any, animations, should be run. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 19", "FullName": "public abstract void captureStartValues (TransitionValues transitionValues)"}, "getDuration()": {"Returns": [["long", "The duration set on this transition, in milliseconds, if one has been set, otherwise returns a negative number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the duration set on this transition. If no duration has been set, the returned value will be negative, indicating that resulting animators will retain their own durations.", "history": "Added in API level 19", "FullName": "public long getDuration ()"}, "getTargetIds()": {"Returns": [["@B_java#util#List_E@", "the list of target IDs"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of target IDs that this transition limits itself to tracking and animating. If the list is null or empty for @B_android#transition#Transition#getTargetIds_E@, @B_android#transition#Transition#getTargets_E@, @B_android#transition#Transition#getTargetNames_E@, and @B_android#transition#Transition#getTargetTypes_E@ then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.", "history": "Added in API level 19", "FullName": "public List<Integer> getTargetIds ()"}, "getTransitionValues(android.view.View, boolean)": {"Returns": [["@B_android#transition#TransitionValues_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method can be called by transitions to get the TransitionValues for any particular view during the transition-playing process. This might be necessary, for example, to query the before/after state of related views for a given transition.", "history": "added in API level 19", "FullName": "public TransitionValues getTransitionValues (View view, boolean start)"}, "excludeTarget(int, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (int targetId, boolean exclude)"}, "getStartDelay()": {"Returns": [["long", "The startDelay set on this transition, in milliseconds, if one has been set, otherwise returns a negative number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the startDelay set on this transition. If no startDelay has been set, the returned value will be negative, indicating that resulting animators will retain their own startDelays.", "history": "Added in API level 19", "FullName": "public long getStartDelay ()"}, "canRemoveViews()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canRemoveViews ()"}, "excludeTarget(android.view.View,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (View target, boolean exclude)"}, "excludeChildren(int,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target whose children should be ignored when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded-child targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the children of the given id to the list of targets to exclude from this transition. The exclude parameter specifies whether the children of the target should be added to or removed from the excluded list. Excluding children in this way provides a simple mechanism for excluding all children of specific targets, rather than individually excluding each child individually. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeChildren (int targetId, boolean exclude)"}, "clone()": {"Returns": [["@B_android#transition#Transition_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 19", "FullName": "public Transition clone ()"}, "Transition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a Transition object with no target objects. A transition with no targets defaults to running on all target objects in the scene hierarchy (if the transition is not contained in a TransitionSet), or all target objects passed down from its parent (if it is in a TransitionSet).", "history": "Added in API level 19", "FullName": "public Transition ()"}, "excludeChildren(int, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target whose children should be ignored when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded-child targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the children of the given id to the list of targets to exclude from this transition. The exclude parameter specifies whether the children of the target should be added to or removed from the excluded list. Excluding children in this way provides a simple mechanism for excluding all children of specific targets, rather than individually excluding each child individually. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeChildren (int targetId, boolean exclude)"}, "excludeChildren(java.lang.Class,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the given type to the list of types whose children should be excluded from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeChildren (Class type, boolean exclude)"}, "excludeTarget(int,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["int", "int: The id of a target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given id to the list of target ids to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (int targetId, boolean exclude)"}, "addTarget(int)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition to which the targetId is added. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).addTarget(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": ["@B_android#view#View#getId_E@"], "Permissions": [], "Description": "Adds the id of a target view that this Transition is interested in animating. By default, there are no targetIds, and a Transition will listen for changes on every view in the hierarchy below the sceneRoot of the Scene being transitioned into. Setting targetIds constrains the Transition to only listen for, and act on, views with these IDs. Views with different IDs, or no IDs whatsoever, will be ignored. Note that using ids to specify targets implies that ids should be unique within the view hierarchy underneath the scene root.", "history": "Added in API level 19", "FullName": "public Transition addTarget (int targetId)"}, "removeTarget(java.lang.Class)": {"Returns": [["@B_android#transition#Transition_E@", "Transition The Transition from which the target is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTarget(someType);"]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type of the target view, must be non-null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given target from the list of targets that this Transition is interested in animating.", "history": "Added in API level 21", "FullName": "public Transition removeTarget (Class target)"}, "removeTarget(int)": {"Returns": [["@B_android#transition#Transition_E@", "The Transition from which the targetId is removed. Returning the same object makes it easier to chain calls during construction, such as transitionSet.addTransitions(new Fade()).removeTargetId(someId);"]], "Parameters": [["int", "int: The id of a target view, must be a positive number."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the given targetId from the list of ids that this Transition is interested in animating.", "history": "Added in API level 19", "FullName": "public Transition removeTarget (int targetId)"}, "excludeTarget(java.lang.Class,boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "Added in API level 19", "FullName": "public Transition excludeTarget (Class type, boolean exclude)"}, "getPathMotion()": {"Returns": [["@B_android#transition#PathMotion_E@", "The algorithm object used to interpolate along two dimensions."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#transition#ArcMotion_E@", "@B_android#transition#PatternPathMotion_E@", "@B_android#transition#PathMotion_E@"], "Permissions": [], "Description": "Returns the algorithm object used to interpolate along two dimensions. This is typically used to determine the View motion between two points. When describing in XML, use a nested XML tag for the path motion. It can be one of the built-in tags arcMotion or patternPathMotion or it can be a custom PathMotion using pathMotion with the class attributed with the fully-described class name. For example: or", "history": "Added in API level 21", "FullName": "public PathMotion getPathMotion ()"}, "addListener(android.transition.Transition.TransitionListener)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#transition#Transition#TransitionListener_E@", "Transition.TransitionListener: the listener to be added to the current set of listeners for this animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a listener to the set of listeners that are sent events through the life of an animation, such as start, repeat, and end.", "history": "Added in API level 19", "FullName": "public Transition addListener (Transition.TransitionListener listener)"}, "getTargets()": {"Returns": [["@B_java#util#List_E@", "the list of target views"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of target views that this transition limits itself to tracking and animating. If the list is null or empty for @B_android#transition#Transition#getTargetIds_E@, @B_android#transition#Transition#getTargets_E@, @B_android#transition#Transition#getTargetNames_E@, and @B_android#transition#Transition#getTargetTypes_E@ then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.", "history": "Added in API level 19", "FullName": "public List<View> getTargets ()"}, "getTargetTypes()": {"Returns": [["@B_java#util#List_E@", "the list of target Types"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of target transitionNames that this transition limits itself to tracking and animating. If the list is null or empty for @B_android#transition#Transition#getTargetIds_E@, @B_android#transition#Transition#getTargets_E@, @B_android#transition#Transition#getTargetNames_E@, and @B_android#transition#Transition#getTargetTypes_E@ then this transition is not limited to specific views, and will handle changes to any views in the hierarchy of a scene change.", "history": "Added in API level 21", "FullName": "public List<Class> getTargetTypes ()"}, "excludeTarget(java.lang.Class, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_java#lang#Class_E@", "Class: The type to ignore when running this transition."], ["boolean", "boolean: Whether to add the target type to or remove it from the current list of excluded target types."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given type to the list of types to exclude from this transition. The exclude parameter specifies whether the target type should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (Class type, boolean exclude)"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: The time interpolator used by the transition"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the interpolator of this transition. By default, the interpolator is null, which means that the Animator created by the transition will have its own specified interpolator. If the interpolator of a Transition is set, that interpolator will override the Animator interpolator.", "history": "Added in API level 19", "FullName": "public Transition setInterpolator (TimeInterpolator interpolator)"}, "excludeTarget(android.view.View, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeChildren_E@", "@B_android#transition#Transition#excludeTarget_E@"], "Permissions": [], "Description": "Whether to add the given target to the list of targets to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeTarget (View target, boolean exclude)"}, "setPropagation(android.transition.TransitionPropagation)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionPropagation_E@", "TransitionPropagation: The class used to determine the start delay of Animators created by this Transition. A null value indicates that no delay should be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the method for determining Animator start delays. When a Transition affects several Views like @B_android#transition#Explode_E@ or @B_android#transition#Slide_E@, there may be a desire to have a \"wave-front\" effect such that the Animator start delay depends on position of the View. The TransitionPropagation specifies how the start delays are calculated.", "history": "Added in API level 21", "FullName": "public void setPropagation (TransitionPropagation transitionPropagation)"}, "excludeChildren(android.view.View, boolean)": {"Returns": [["@B_android#transition#Transition_E@", "This transition object."]], "Parameters": [["@B_android#view#View_E@", "View: The target to ignore when running this transition."], ["boolean", "boolean: Whether to add the target to or remove the target from the current list of excluded targets."]], "Throws": [], "SeeAlso": ["@B_android#transition#Transition#excludeTarget_E@", "@B_android#transition#Transition#excludeChildren_E@"], "Permissions": [], "Description": "Whether to add the children of given target to the list of target children to exclude from this transition. The exclude parameter specifies whether the target should be added to or removed from the excluded list. Excluding targets is a general mechanism for allowing transitions to run on a view hierarchy while skipping target views that should not be part of the transition. For example, you may want to avoid animating children of a specific ListView or Spinner. Views can be excluded either by their id, or by their instance reference, or by the Class of that view (eg, @B_android#widget#Spinner_E@).", "history": "added in API level 19", "FullName": "public Transition excludeChildren (View target, boolean exclude)"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The interpolator set on this transition, if one has been set, otherwise returns null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the interpolator set on this transition. If no interpolator has been set, the returned value will be null, indicating that resulting animators will retain their own interpolators.", "history": "Added in API level 19", "FullName": "public TimeInterpolator getInterpolator ()"}}, "Inheritance": [], "ClassName": "android.transition.Transition", "ClassDesc": "A Transition holds information about animations that will be run on its targets during a scene change. Subclasses of this abstract class may choreograph several child transitions (@B_android#transition#TransitionSet_E@ or they may perform custom animations themselves. Any Transition has two main jobs: (1) capture property values, and (2) play animations based on changes to captured property values. A custom transition knows what property values on View objects are of interest to it, and also knows how to animate changes to those values. For example, the @B_android#transition#Fade_E@ transition tracks changes to visibility-related properties and is able to construct and run animations that fade items in or out based on changes to those properties. Note: Transitions may not work correctly with either @B_android#view#SurfaceView_E@ or @B_android#view#TextureView_E@, due to the way that these views are displayed on the screen. For SurfaceView, the problem is that the view is updated from a non-UI thread, so changes to the view due to transitions (such as moving and resizing the view) may be out of sync with the display inside those bounds. TextureView is more compatible with transitions in general, but some specific transitions (such as @B_android#transition#Fade_E@) may not be compatible with TextureView because they rely on @B_android#view#ViewOverlay_E@ functionality, which does not currently work with TextureView. Transitions can be declared in XML resource files inside the res/transition directory. Transition resources consist of a tag name for one of the Transition subclasses along with attributes to define some of the attributes of that transition. For example, here is a minimal resource file that declares a @B_android#transition#ChangeBounds_E@ transition: This TransitionSet contains @B_android#transition#Explode_E@ for visibility, @B_android#transition#ChangeBounds_E@, @B_android#transition#ChangeTransform_E@, and @B_android#transition#ChangeClipBounds_E@ and @B_android#transition#ChangeImageTransform_E@: Custom transition classes may be instantiated with a transition tag: Custom transition classes loaded from XML should have a public constructor taking a @B_android#content#Context_E@ and @B_android#util#AttributeSet_E@. Note that attributes for the transition are not required, just as they are optional when declared in code; Transitions created from XML resources will use the same defaults as their code-created equivalents. Here is a slightly more elaborate example which declares a @B_android#transition#TransitionSet_E@ transition with @B_android#transition#ChangeBounds_E@ and @B_android#transition#Fade_E@ child transitions: In this example, the transitionOrdering attribute is used on the TransitionSet object to change from the default @B_android#transition#TransitionSet#ORDERING_TOGETHER_E@ behavior to be @B_android#transition#TransitionSet#ORDERING_SEQUENTIAL_E@ instead. Also, the @B_android#transition#Fade_E@ transition uses a fadingMode of @B_android#transition#Fade#OUT_E@ instead of the default out-in behavior. Finally, note the use of the targets sub-tag, which takes a set of @B_android#R#styleable#TransitionTarget_E@ tags, each of which lists a specific targetId, targetClass, targetName, excludeId, excludeClass, or excludeName, which this transition acts upon. Use of targets is optional, but can be used to either limit the time spent checking attributes on unchanging views, or limiting the types of animations run on specific views. In this case, we know that only the grayscaleContainer will be disappearing, so we choose to limit the @B_android#transition#Fade_E@ transition to only that view. Further information on XML resource descriptions for transitions can be found for @B_android#R#styleable#Transition_E@, @B_android#R#styleable#TransitionSet_E@, @B_android#R#styleable#TransitionTarget_E@, @B_android#R#styleable#Fade_E@, @B_android#R#styleable#Slide_E@, and @B_android#R#styleable#ChangeTransform_E@."}