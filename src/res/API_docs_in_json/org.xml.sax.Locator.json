{"Functions": {"getSystemId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the system identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getPublicId_E@"], "Permissions": [], "Description": "Return the system identifier for the current document event. The return value is the system identifier of the document entity or of the external parsed entity in which the markup triggering the event appears. If the system identifier is a URL, the parser must resolve it fully before passing it to the application. For example, a file name must always be provided as a file:... URL, and other kinds of relative URI are also resolved against their bases.", "history": "Added in API level 1", "FullName": "public abstract String getSystemId ()"}, "getLineNumber()": {"Returns": [["int", "The line number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getColumnNumber_E@"], "Permissions": [], "Description": "Return the line number where the current document event ends. Lines are delimited by line ends, which are defined in the XML specification. The return value is an approximation of the line number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first line is line 1.", "history": "Added in API level 1", "FullName": "public abstract int getLineNumber ()"}, "getPublicId()": {"Returns": [["@B_java#lang#String_E@", "A string containing the public identifier, or null if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getSystemId_E@"], "Permissions": [], "Description": "Return the public identifier for the current document event. The return value is the public identifier of the document entity or of the external parsed entity in which the markup triggering the event appears.", "history": "Added in API level 1", "FullName": "public abstract String getPublicId ()"}, "getColumnNumber()": {"Returns": [["int", "The column number, or -1 if none is available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_org#xml#sax#Locator#getLineNumber_E@"], "Permissions": [], "Description": "Return the column number where the current document event ends. This is one-based number of Java char values since the last line end. The return value is an approximation of the column number in the document entity or external parsed entity where the markup triggering the event appears. If possible, the SAX driver should provide the line position of the first character after the text associated with the document event. The first column in each line is column 1.", "history": "Added in API level 1", "FullName": "public abstract int getColumnNumber ()"}}, "Inheritance": [], "ClassName": "org.xml.sax.Locator", "ClassDesc": "Interface for associating a SAX event with a document location. If a SAX parser provides location information to the SAX application, it does so by implementing this interface and then passing an instance to the application using the content handler's @B_org#xml#sax#ContentHandler#setDocumentLocator_E@ method. The application can use the object to obtain the location of any other SAX event in the XML source document. Note that the results returned by the object will be valid only during the scope of each callback method: the application will receive unpredictable results if it attempts to use the locator at any other time, or after parsing completes. SAX parsers are not required to supply a locator, but they are very strongly encouraged to do so. If the parser supplies a locator, it must do so before reporting any other document events. If no locator has been set by the time the application receives the @B_org#xml#sax#ContentHandler#startDocument_E@ event, the application should assume that a locator is not available."}