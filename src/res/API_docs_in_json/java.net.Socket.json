{"Functions": {"Socket(java.lang.String, int, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host name, or null for the loopback address."], ["int", "int: the port number."], ["boolean", "boolean: a boolean indicating whether this is a stream socket or a datagram socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use DatagramSocket instead for UDP transport. Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as @B_java#net#InetAddress#getByName_E@(null). In other words, it is equivalent to specifying an address of the loopback interface. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. If a UDP socket is used, TCP/IP related socket options will not apply.", "history": "added in API level 1", "FullName": "public Socket (String host, int port, boolean stream)"}, "setSoTimeout(int)": {"Returns": [], "Parameters": [["int", "int: the specified timeout, in milliseconds."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#getSoTimeout_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_TIMEOUT_E@ with the specified timeout, in milliseconds. With this option set to a non-zero timeout, a read() call on the InputStream associated with this Socket will block for only this amount of time. If the timeout expires, a > 0. A timeout of zero is interpreted as an infinite timeout.", "history": "Added in API level 1", "FullName": "public void setSoTimeout (int timeout)"}, "setPerformancePreferences(int,int,int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been connected will have no effect.", "history": "Added in API level 1", "FullName": "public void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "an input stream for reading bytes from this socket."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the input stream, the socket is closed, the socket is not connected, or the socket input has been shutdown using @B_java#net#Socket#shutdownInput_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an input stream for this socket. If this socket has an associated channel then the resulting input stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the input stream's read operations will throw an @B_java#nio#channels#IllegalBlockingModeException_E@. Under abnormal conditions the underlying connection may be broken by the remote host or the network software (for example a connection reset in the case of TCP connections). When a broken connection is detected by the network software the following applies to the returned input stream :- The network software may discard bytes that are buffered by the socket. Bytes that aren't discarded by the network software can be read using @B_java#io#InputStream#read_E@. If there are no bytes buffered on the socket, or all buffered bytes have been consumed by @B_java#io#InputStream#read_E@, then all subsequent calls to @B_java#io#InputStream#read_E@ will throw an @B_java#io#IOException_E@. If there are no bytes buffered on the socket, and the socket has not been closed using @B_java#net#Socket#close_E@, then @B_java#io#InputStream#available_E@ will return 0. Closing the returned @B_java#io#InputStream_E@ will close the associated socket.", "history": "Added in API level 1", "FullName": "public InputStream getInputStream ()"}, "getOOBInline()": {"Returns": [["boolean", "a boolean indicating whether or not @B_java#net#SocketOptions#SO_OOBINLINE_E@is enabled."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setOOBInline_E@"], "Permissions": [], "Description": "Tests if @B_java#net#SocketOptions#SO_OOBINLINE_E@ is enabled.", "history": "Added in API level 1", "FullName": "public boolean getOOBInline ()"}, "Socket(java.net.InetAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if address is null."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a stream socket and connects it to the specified port number at the specified IP address. If the application has specified a socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public Socket (InetAddress address, int port)"}, "getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "an output stream for writing bytes to this socket."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the output stream or if the socket is not connected."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an output stream for this socket. If this socket has an associated channel then the resulting output stream delegates all of its operations to the channel. If the channel is in non-blocking mode then the output stream's write operations will throw an @B_java#nio#channels#IllegalBlockingModeException_E@. Closing the returned @B_java#io#OutputStream_E@ will close the associated socket.", "history": "Added in API level 1", "FullName": "public OutputStream getOutputStream ()"}, "connect(java.net.SocketAddress, int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the SocketAddress"], ["int", "int: the timeout value to be used in milliseconds."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during the connection"], ["@B_java#net#SocketTimeoutException_E@", "if timeout expires before connecting"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "if this socket has an associated channel, and the channel is in non-blocking mode"], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the server with a specified timeout value. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.", "history": "added in API level 1", "FullName": "public void connect (SocketAddress endpoint, int timeout)"}, "setReuseAddress(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether to enable or disable the socket option"]], "Throws": [["@B_java#net#SocketException_E@", "if an error occurs enabling or disabling the @B_java#net#SocketOptions#SO_REUSEADDR_E@ socket option, or the socket is closed."]], "SeeAlso": ["@B_java#net#Socket#getReuseAddress_E@", "@B_java#net#Socket#bind_E@", "@B_java#net#Socket#isClosed_E@", "@B_java#net#Socket#isBound_E@"], "Permissions": [], "Description": "Enable/disable the @B_java#net#SocketOptions#SO_REUSEADDR_E@ socket option. When a TCP connection is closed the connection may remain in a timeout state for a period of time after the connection is closed (typically known as the TIME_WAIT state or 2MSL wait state). For applications using a well known socket address or port it may not be possible to bind a socket to the required SocketAddress if there is a connection in the timeout state involving the socket address or port. Enabling @B_java#net#SocketOptions#SO_REUSEADDR_E@ prior to binding the socket using @B_java#net#Socket#bind_E@ allows the socket to be bound even though a previous connection is in a timeout state. When a Socket is created the initial setting of @B_java#net#SocketOptions#SO_REUSEADDR_E@ is disabled. The behaviour when @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled or disabled after a socket is bound (See @B_java#net#Socket#isBound_E@) is not defined.", "history": "Added in API level 1", "FullName": "public void setReuseAddress (boolean on)"}, "setPerformancePreferences(int, int, int)": {"Returns": [], "Parameters": [["int", "int: An int expressing the relative importance of a short connection time"], ["int", "int: An int expressing the relative importance of low latency"], ["int", "int: An int expressing the relative importance of high bandwidth"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets performance preferences for this socket. Sockets use the TCP/IP protocol by default. Some implementations may offer alternative protocols which have different performance characteristics than TCP/IP. This method allows the application to express its own preferences as to how these tradeoffs should be made when the implementation chooses from the available protocols. Performance preferences are described by three integers whose values indicate the relative importance of short connection time, low latency, and high bandwidth. The absolute values of the integers are irrelevant; in order to choose a protocol the values are simply compared, with larger values indicating stronger preferences. Negative values represent a lower priority than positive values. If the application prefers short connection time over both low latency and high bandwidth, for example, then it could invoke this method with the values (1, 0, 0). If the application prefers high bandwidth above low latency, and low latency above short connection time, then it could invoke this method with the values (0, 1, 2). Invoking this method after this socket has been connected will have no effect.", "history": "added in API level 1", "FullName": "public void setPerformancePreferences (int connectionTime, int latency, int bandwidth)"}, "sendUrgentData(int)": {"Returns": [], "Parameters": [["int", "int: The byte of data to send"]], "Throws": [["@B_java#io#IOException_E@", "if there is an error sending the data."]], "SeeAlso": [], "Permissions": [], "Description": "Send one byte of urgent data on the socket. The byte to be sent is the lowest eight bits of the data parameter. The urgent byte is sent after any preceding writes to the socket OutputStream and before any future writes to the OutputStream.", "history": "Added in API level 1", "FullName": "public void sendUrgentData (int data)"}, "isBound()": {"Returns": [["boolean", "true if the socket was successfuly bound to an address"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#bind_E@"], "Permissions": [], "Description": "Returns the binding state of the socket. Note: Closing a socket doesn't clear its binding state, which means this method will return true for a closed socket (see @B_java#net#Socket#isClosed_E@) if it was successfuly bound prior to being closed.", "history": "Added in API level 1", "FullName": "public boolean isBound ()"}, "setTcpNoDelay(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable TCP_NODELAY, false to disable."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#getTcpNoDelay_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#TCP_NODELAY_E@ (disable/enable Nagle's algorithm).", "history": "Added in API level 1", "FullName": "public void setTcpNoDelay (boolean on)"}, "getLocalAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the local address to which the socket is bound, the loopback address if denied by the security manager, or the wildcard address if the socket is closed or not bound yet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Gets the local address to which the socket is bound. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, the @B_java#net#InetAddress#getLoopbackAddress_E@ address is returned.", "history": "Added in API level 1", "FullName": "public InetAddress getLocalAddress ()"}, "shutdownOutput()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when shutting down this socket."]], "SeeAlso": ["@B_java#net#Socket#shutdownInput_E@", "@B_java#net#Socket#close_E@", "@B_java#net#Socket#setSoLinger_E@", "@B_java#net#Socket#isOutputShutdown_E@"], "Permissions": [], "Description": "Disables the output stream for this socket. For a TCP socket, any previously written data will be sent followed by TCP's normal connection termination sequence. If you write to a socket output stream after invoking shutdownOutput() on the socket, the stream will throw an IOException.", "history": "Added in API level 1", "FullName": "public void shutdownOutput ()"}, "getRemoteSocketAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "a SocketAddress representing the remote endpoint of this socket, or null if it is not connected yet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#getInetAddress_E@", "@B_java#net#Socket#getPort_E@", "@B_java#net#Socket#connect_E@"], "Permissions": [], "Description": "Returns the address of the endpoint this socket is connected to, or null if it is unconnected. If the socket was connected prior to being @B_java#net#Socket#close_E@, then this method will continue to return the connected address after the socket is closed.", "history": "Added in API level 1", "FullName": "public SocketAddress getRemoteSocketAddress ()"}, "getReceiveBufferSize()": {"Returns": [["int", "the value of the @B_java#net#SocketOptions#SO_RCVBUF_E@ option for this Socket."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setReceiveBufferSize_E@"], "Permissions": [], "Description": "Gets the value of the @B_java#net#SocketOptions#SO_RCVBUF_E@ option for this Socket, that is the buffer size used by the platform for input on this Socket.", "history": "Added in API level 1", "FullName": "public int getReceiveBufferSize ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this socket."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts this socket to a String.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "setSendBufferSize(int)": {"Returns": [], "Parameters": [["int", "int: the size to which to set the send buffer size. This value must be greater than 0."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."], ["@B_java#lang#IllegalArgumentException_E@", "if the value is 0 or is negative."]], "SeeAlso": ["@B_java#net#Socket#getSendBufferSize_E@"], "Permissions": [], "Description": "Sets the @B_java#net#SocketOptions#SO_SNDBUF_E@ option to the specified value for this Socket. The @B_java#net#SocketOptions#SO_SNDBUF_E@ option is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. Because @B_java#net#SocketOptions#SO_SNDBUF_E@ is a hint, applications that want to verify what size the buffers were set to should call @B_java#net#Socket#getSendBufferSize_E@.", "history": "Added in API level 1", "FullName": "public void setSendBufferSize (int size)"}, "getTcpNoDelay()": {"Returns": [["boolean", "a boolean indicating whether or not @B_java#net#SocketOptions#TCP_NODELAY_E@ is enabled."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setTcpNoDelay_E@"], "Permissions": [], "Description": "Tests if @B_java#net#SocketOptions#TCP_NODELAY_E@ is enabled.", "history": "Added in API level 1", "FullName": "public boolean getTcpNoDelay ()"}, "Socket(java.lang.String,int,java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the remote host, or null for the loopback address."], ["int", "int: the remote port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address the socket is bound to, or null for the anyLocal address."], ["int", "int: the local port the socket is bound to, or zero for a system selected free port."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the connection to the destination, or if its checkListen method doesn't allow the bind to the local port."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote host on the specified remote port. The Socket will also bind() to the local address and port supplied. If the specified host is null it is the equivalent of specifying the address as @B_java#net#InetAddress#getByName_E@(null). In other words, it is equivalent to specifying an address of the loopback interface. A local port number of zero will let the system pick up a free port in the bind operation. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public Socket (String host, int port, InetAddress localAddr, int localPort)"}, "Socket(java.net.InetAddress, int, boolean)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address."], ["int", "int: the port number."], ["boolean", "boolean: if true, create a stream socket; otherwise, create a datagram socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if host is null."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use DatagramSocket instead for UDP transport. Creates a socket and connects it to the specified port number at the specified IP address. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with host.getHostAddress() and port as its arguments. This could result in a SecurityException. If UDP socket is used, TCP/IP related socket options will not apply.", "history": "added in API level 1", "FullName": "public Socket (InetAddress host, int port, boolean stream)"}, "getLocalSocketAddress()": {"Returns": [["@B_java#net#SocketAddress_E@", "a SocketAddress representing the local endpoint of this socket, or a SocketAddress representing the loopback address if denied by the security manager, or null if the socket is not bound yet."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#getLocalAddress_E@", "@B_java#net#Socket#getLocalPort_E@", "@B_java#net#Socket#bind_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Returns the address of the endpoint this socket is bound to. If a socket bound to an endpoint represented by an InetSocketAddress is @B_java#net#Socket#close_E@, then this method will continue to return an InetSocketAddress after the socket is closed. In that case the returned InetSocketAddress's address is the @B_java#net#InetAddress#isAnyLocalAddress_E@ address and its port is the local port that it was bound to. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, a SocketAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address and the local port to which this socket is bound is returned.", "history": "Added in API level 1", "FullName": "public SocketAddress getLocalSocketAddress ()"}, "Socket(java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address."], ["int", "int: the port number."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if address is null."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a stream socket and connects it to the specified port number at the specified IP address. If the application has specified a socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public Socket (InetAddress address, int port)"}, "getSoTimeout()": {"Returns": [["int", "the setting for @B_java#net#SocketOptions#SO_TIMEOUT_E@"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setSoTimeout_E@"], "Permissions": [], "Description": "Returns setting for @B_java#net#SocketOptions#SO_TIMEOUT_E@. 0 returns implies that the option is disabled (i.e., timeout of infinity).", "history": "Added in API level 1", "FullName": "public int getSoTimeout ()"}, "setSoLinger(boolean, int)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not to linger on."], ["int", "int: how long to linger for, if on is true."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."], ["@B_java#lang#IllegalArgumentException_E@", "if the linger value is negative."]], "SeeAlso": ["@B_java#net#Socket#getSoLinger_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_LINGER_E@ with the specified linger time in seconds. The maximum timeout value is platform specific. The setting only affects socket close.", "history": "added in API level 1", "FullName": "public void setSoLinger (boolean on, int linger)"}, "getSoLinger()": {"Returns": [["int", "the setting for @B_java#net#SocketOptions#SO_LINGER_E@."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setSoLinger_E@"], "Permissions": [], "Description": "Returns setting for @B_java#net#SocketOptions#SO_LINGER_E@. -1 returns implies that the option is disabled. The setting only affects socket close.", "history": "Added in API level 1", "FullName": "public int getSoLinger ()"}, "getChannel()": {"Returns": [["@B_java#nio#channels#SocketChannel_E@", "the socket channel associated with this socket, or null if this socket was not created for a channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique @B_java#nio#channels#SocketChannel_E@ object associated with this socket, if any. A socket will have a channel if, and only if, the channel itself was created via the @B_java#nio#channels#SocketChannel#open_E@ or @B_java#nio#channels#ServerSocketChannel#accept_E@ methods.", "history": "Added in API level 1", "FullName": "public SocketChannel getChannel ()"}, "getPort()": {"Returns": [["int", "the remote port number to which this socket is connected, or 0 if the socket is not connected yet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the remote port number to which this socket is connected. If the socket was connected prior to being @B_java#net#Socket#close_E@, then this method will continue to return the connected port number after the socket is closed.", "history": "Added in API level 1", "FullName": "public int getPort ()"}, "getSendBufferSize()": {"Returns": [["int", "the value of the @B_java#net#SocketOptions#SO_SNDBUF_E@ option for this Socket."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setSendBufferSize_E@"], "Permissions": [], "Description": "Get value of the @B_java#net#SocketOptions#SO_SNDBUF_E@ option for this Socket, that is the buffer size used by the platform for output on this Socket.", "history": "Added in API level 1", "FullName": "public int getSendBufferSize ()"}, "setSoLinger(boolean,int)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not to linger on."], ["int", "int: how long to linger for, if on is true."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."], ["@B_java#lang#IllegalArgumentException_E@", "if the linger value is negative."]], "SeeAlso": ["@B_java#net#Socket#getSoLinger_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_LINGER_E@ with the specified linger time in seconds. The maximum timeout value is platform specific. The setting only affects socket close.", "history": "Added in API level 1", "FullName": "public void setSoLinger (boolean on, int linger)"}, "getInetAddress()": {"Returns": [["@B_java#net#InetAddress_E@", "the remote IP address to which this socket is connected, or null if the socket is not connected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the address to which the socket is connected. If the socket was connected prior to being @B_java#net#Socket#close_E@, then this method will continue to return the connected address after the socket is closed.", "history": "Added in API level 1", "FullName": "public InetAddress getInetAddress ()"}, "getTrafficClass()": {"Returns": [["int", "the traffic class or type-of-service already set"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error obtaining the traffic class or type-of-service value."]], "SeeAlso": ["@B_java#net#Socket#setTrafficClass_E@", "@B_java#net#SocketOptions_E@"], "Permissions": [], "Description": "Gets traffic class or type-of-service in the IP header for packets sent from this Socket As the underlying network implementation may ignore the traffic class or type-of-service set using @B_java#net#Socket#setTrafficClass_E@ this method may return a different value than was previously set using the @B_java#net#Socket#setTrafficClass_E@ method on this Socket.", "history": "Added in API level 1", "FullName": "public int getTrafficClass ()"}, "Socket(java.lang.String,int,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host name, or null for the loopback address."], ["int", "int: the port number."], ["boolean", "boolean: a boolean indicating whether this is a stream socket or a datagram socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use DatagramSocket instead for UDP transport. Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as @B_java#net#InetAddress#getByName_E@(null). In other words, it is equivalent to specifying an address of the loopback interface. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException. If a UDP socket is used, TCP/IP related socket options will not apply.", "history": "Added in API level 1", "FullName": "public Socket (String host, int port, boolean stream)"}, "connect(java.net.SocketAddress)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the SocketAddress"]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during the connection"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "if this socket has an associated channel, and the channel is in non-blocking mode"], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the server.", "history": "Added in API level 1", "FullName": "public void connect (SocketAddress endpoint)"}, "bind(java.net.SocketAddress)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the SocketAddress to bind to"]], "Throws": [["@B_java#io#IOException_E@", "if the bind operation fails, or if the socket is already bound."], ["@B_java#lang#IllegalArgumentException_E@", "if bindpoint is a SocketAddress subclass not supported by this socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the bind to the local port."]], "SeeAlso": ["@B_java#net#Socket#isBound_E@"], "Permissions": [], "Description": "Binds the socket to a local address. If the address is null, then the system will pick up an ephemeral port and a valid local address to bind the socket.", "history": "Added in API level 1", "FullName": "public void bind (SocketAddress bindpoint)"}, "Socket(java.net.InetAddress,int,java.net.InetAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the remote address"], ["int", "int: the remote port"], ["@B_java#net#InetAddress_E@", "InetAddress: the local address the socket is bound to, or null for the anyLocal address."], ["int", "int: the local port the socket is bound to or zero for a system selected free port."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the connection to the destination, or if its checkListen method doesn't allow the bind to the local port."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter or localPort parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if address is null."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a socket and connects it to the specified remote address on the specified remote port. The Socket will also bind() to the local address and port supplied. If the specified local address is null it is the equivalent of specifying the address as the AnyLocal address (see @B_java#net#InetAddress#isAnyLocalAddress_E@()). A local port number of zero will let the system pick up a free port in the bind operation. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public Socket (InetAddress address, int port, InetAddress localAddr, int localPort)"}, "Socket(java.net.InetAddress,int,boolean)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: the IP address."], ["int", "int: the port number."], ["boolean", "boolean: if true, create a stream socket; otherwise, create a datagram socket."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."], ["@B_java#lang#NullPointerException_E@", "if host is null."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Use DatagramSocket instead for UDP transport. Creates a socket and connects it to the specified port number at the specified IP address. If the stream argument is true, this creates a stream socket. If the stream argument is false, it creates a datagram socket. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with host.getHostAddress() and port as its arguments. This could result in a SecurityException. If UDP socket is used, TCP/IP related socket options will not apply.", "history": "Added in API level 1", "FullName": "public Socket (InetAddress host, int port, boolean stream)"}, "setSocketImplFactory(java.net.SocketImplFactory)": {"Returns": [], "Parameters": [["@B_java#net#SocketImplFactory_E@", "SocketImplFactory: the desired factory."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when setting the socket factory."], ["@B_java#net#SocketException_E@", "if the factory is already defined."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method doesn't allow the operation."]], "SeeAlso": ["@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkSetFactory_E@"], "Permissions": [], "Description": "Sets the client socket implementation factory for the application. The factory can be specified only once. When an application creates a new client socket, the socket implementation factory's createSocketImpl method is called to create the actual socket implementation. Passing null to the method is a no-op unless the factory was already set. If there is a security manager, this method first calls the security manager's checkSetFactory method to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public static void setSocketImplFactory (SocketImplFactory fac)"}, "isConnected()": {"Returns": [["boolean", "true if the socket was successfuly connected to a server"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the connection state of the socket. Note: Closing a socket doesn't clear its connection state, which means this method will return true for a closed socket (see @B_java#net#Socket#isClosed_E@) if it was successfuly connected prior to being closed.", "history": "Added in API level 1", "FullName": "public boolean isConnected ()"}, "setKeepAlive(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether or not to have socket keep alive turned on."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#getKeepAlive_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_KEEPALIVE_E@.", "history": "Added in API level 1", "FullName": "public void setKeepAlive (boolean on)"}, "connect(java.net.SocketAddress,int)": {"Returns": [], "Parameters": [["@B_java#net#SocketAddress_E@", "SocketAddress: the SocketAddress"], ["int", "int: the timeout value to be used in milliseconds."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during the connection"], ["@B_java#net#SocketTimeoutException_E@", "if timeout expires before connecting"], ["@B_java#nio#channels#IllegalBlockingModeException_E@", "if this socket has an associated channel, and the channel is in non-blocking mode"], ["@B_java#lang#IllegalArgumentException_E@", "if endpoint is null or is a SocketAddress subclass not supported by this socket"]], "SeeAlso": [], "Permissions": [], "Description": "Connects this socket to the server with a specified timeout value. A timeout of zero is interpreted as an infinite timeout. The connection will then block until established or an error occurs.", "history": "Added in API level 1", "FullName": "public void connect (SocketAddress endpoint, int timeout)"}, "shutdownInput()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when shutting down this socket."]], "SeeAlso": ["@B_java#net#Socket#shutdownOutput_E@", "@B_java#net#Socket#close_E@", "@B_java#net#Socket#setSoLinger_E@", "@B_java#net#Socket#isInputShutdown_E@"], "Permissions": [], "Description": "Places the input stream for this socket at \"end of stream\". Any data sent to the input stream side of the socket is acknowledged and then silently discarded. If you read from a socket input stream after invoking this method on the socket, the stream's available method will return 0, and its read methods will return -1 (end of stream).", "history": "Added in API level 1", "FullName": "public void shutdownInput ()"}, "Socket(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host name, or null for the loopback address."], ["int", "int: the port number."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if the IP address of the host could not be determined."], ["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as @B_java#net#InetAddress#getByName_E@(null). In other words, it is equivalent to specifying an address of the loopback interface. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "public Socket (String host, int port)"}, "Socket()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an unconnected socket, with the system-default type of SocketImpl.", "history": "Added in API level 1", "FullName": "public Socket ()"}, "setReceiveBufferSize(int)": {"Returns": [], "Parameters": [["int", "int: the size to which to set the receive buffer size. This value must be greater than 0."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the value is 0 or is negative."], ["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#getReceiveBufferSize_E@", "@B_java#net#ServerSocket#setReceiveBufferSize_E@"], "Permissions": [], "Description": "Sets the @B_java#net#SocketOptions#SO_RCVBUF_E@ option to the specified value for this Socket. The @B_java#net#SocketOptions#SO_RCVBUF_E@ option is used by the platform's networking code as a hint for the size to set the underlying network I/O buffers. Increasing the receive buffer size can increase the performance of network I/O for high-volume connection, while decreasing it can help reduce the backlog of incoming data. Because @B_java#net#SocketOptions#SO_RCVBUF_E@ is a hint, applications that want to verify what size the buffers were set to should call @B_java#net#Socket#getReceiveBufferSize_E@. The value of @B_java#net#SocketOptions#SO_RCVBUF_E@ is also used to set the TCP receive window that is advertized to the remote peer. Generally, the window size can be modified at any time when a socket is connected. However, if a receive window larger than 64K is required then this must be requested", "history": "Added in API level 1", "FullName": "public void setReceiveBufferSize (int size)"}, "setTrafficClass(int)": {"Returns": [], "Parameters": [["int", "int: an int value for the bitset."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error setting the traffic class or type-of-service"]], "SeeAlso": ["@B_java#net#Socket#getTrafficClass_E@", "@B_java#net#SocketOptions_E@"], "Permissions": [], "Description": "Sets traffic class or type-of-service octet in the IP header for packets sent from this Socket. As the underlying network implementation may ignore this value applications should consider it a hint. The tc 0 <= tc <= 255 or an IllegalArgumentException will be thrown. Notes: For Internet Protocol v4 the value consists of an integer, the least significant 8 bits of which represent the value of the TOS octet in IP packets sent by the socket. RFC 1349 defines the TOS values as follows: IPTOS_LOWCOST (0x02) IPTOS_RELIABILITY (0x04) IPTOS_THROUGHPUT (0x08) IPTOS_LOWDELAY (0x10) The last low order bit is always ignored as this corresponds to the MBZ (must be zero) bit. Setting bits in the precedence field may result in a SocketException indicating that the operation is not permitted. As RFC 1122 section 4.2.4.2 indicates, a compliant TCP implementation should, but is not required to, let application change the TOS field during the lifetime of a connection. So whether the type-of-service field can be changed after the TCP connection has been established depends on the implementation in the underlying platform. Applications should not assume that they can change the TOS field after the connection. For Internet Protocol v6 tc is the value that would be placed into the sin6_flowinfo field of the IP header.", "history": "Added in API level 1", "FullName": "public void setTrafficClass (int tc)"}, "Socket(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the host name, or null for the loopback address."], ["int", "int: the port number."]], "Throws": [["@B_java#net#UnknownHostException_E@", "if the IP address of the host could not be determined."], ["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkConnect method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#net#Socket#setSocketImplFactory_E@", "@B_java#net#SocketImpl_E@", "@B_java#net#SocketImplFactory#createSocketImpl_E@", "@B_java#lang#SecurityManager#checkConnect_E@"], "Permissions": [], "Description": "Creates a stream socket and connects it to the specified port number on the named host. If the specified host is null it is the equivalent of specifying the address as @B_java#net#InetAddress#getByName_E@(null). In other words, it is equivalent to specifying an address of the loopback interface. If the application has specified a server socket factory, that factory's createSocketImpl method is called to create the actual socket implementation. Otherwise a \"plain\" socket is created. If there is a security manager, its checkConnect method is called with the host address and port as its arguments. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "public Socket (String host, int port)"}, "getKeepAlive()": {"Returns": [["boolean", "a boolean indicating whether or not @B_java#net#SocketOptions#SO_KEEPALIVE_E@ is enabled."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setKeepAlive_E@"], "Permissions": [], "Description": "Tests if @B_java#net#SocketOptions#SO_KEEPALIVE_E@ is enabled.", "history": "Added in API level 1", "FullName": "public boolean getKeepAlive ()"}, "Socket(java.net.SocketImpl)": {"Returns": [], "Parameters": [["@B_java#net#SocketImpl_E@", "SocketImpl: an instance of a SocketImpl the subclass wishes to use on the Socket."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an unconnected Socket with a user-specified SocketImpl.", "history": "Added in API level 1", "FullName": "protected Socket (SocketImpl impl)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when closing this socket."]], "SeeAlso": ["@B_java#net#Socket#isClosed_E@"], "Permissions": [], "Description": "Closes this socket. Any thread currently blocked in an I/O operation upon this socket will throw a @B_java#net#SocketException_E@. Once a socket has been closed, it is not available for further networking use (i.e. can't be reconnected or rebound). A new socket needs to be created. Closing this socket will also close the socket's @B_java#io#InputStream_E@ and @B_java#io#OutputStream_E@. If this socket has an associated channel then the channel is closed as well.", "history": "Added in API level 1", "FullName": "public void close ()"}, "isOutputShutdown()": {"Returns": [["boolean", "true if the output of the socket has been shutdown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#shutdownOutput_E@"], "Permissions": [], "Description": "Returns whether the write-half of the socket connection is closed.", "history": "Added in API level 1", "FullName": "public boolean isOutputShutdown ()"}, "isInputShutdown()": {"Returns": [["boolean", "true if the input of the socket has been shutdown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#shutdownInput_E@"], "Permissions": [], "Description": "Returns whether the read-half of the socket connection is closed.", "history": "Added in API level 1", "FullName": "public boolean isInputShutdown ()"}, "isClosed()": {"Returns": [["boolean", "true if the socket has been closed"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#Socket#close_E@"], "Permissions": [], "Description": "Returns the closed state of the socket.", "history": "Added in API level 1", "FullName": "public boolean isClosed ()"}, "setOOBInline(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable @B_java#net#SocketOptions#SO_OOBINLINE_E@, false to disable."]], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#getOOBInline_E@"], "Permissions": [], "Description": "Enable/disable @B_java#net#SocketOptions#SO_OOBINLINE_E@ (receipt of TCP urgent data) By default, this option is disabled and TCP urgent data received on a socket is silently discarded. If the user wishes to receive urgent data, then this option must be enabled. When enabled, urgent data is received inline with normal data. Note, only limited support is provided for handling incoming urgent data. In particular, no notification of incoming urgent data is provided and there is no capability to distinguish between normal data and urgent data unless provided by a higher level protocol.", "history": "Added in API level 1", "FullName": "public void setOOBInline (boolean on)"}, "getReuseAddress()": {"Returns": [["boolean", "a boolean indicating whether or not @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if there is an error in the underlying protocol, such as a TCP error."]], "SeeAlso": ["@B_java#net#Socket#setReuseAddress_E@"], "Permissions": [], "Description": "Tests if @B_java#net#SocketOptions#SO_REUSEADDR_E@ is enabled.", "history": "Added in API level 1", "FullName": "public boolean getReuseAddress ()"}, "getLocalPort()": {"Returns": [["int", "the local port number to which this socket is bound or -1 if the socket is not bound yet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the local port number to which this socket is bound. If the socket was bound prior to being @B_java#net#Socket#close_E@, then this method will continue to return the local port number after the socket is closed.", "history": "Added in API level 1", "FullName": "public int getLocalPort ()"}, "Socket(java.net.Proxy)": {"Returns": [], "Parameters": [["@B_java#net#Proxy_E@", "Proxy: a @B_java#net#Proxy_E@ object specifying what kind of proxying should be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the proxy is of an invalid type or null."], ["@B_java#lang#SecurityException_E@", "if a security manager is present and permission to connect to the proxy is denied."]], "SeeAlso": ["@B_java#net#ProxySelector_E@", "@B_java#net#Proxy_E@"], "Permissions": [], "Description": "Creates an unconnected socket, specifying the type of proxy, if any, that should be used regardless of any other settings. If there is a security manager, its checkConnect method is called with the proxy host address and port number as its arguments. This could result in a SecurityException. Examples: Socket s = new Socket(Proxy.NO_PROXY); will create a plain socket ignoring any other proxy configuration. Socket s = new Socket(new Proxy(Proxy.Type.SOCKS, new InetSocketAddress(\"socks.mydom.com\", 1080))); will create a socket connecting through the specified SOCKS proxy server.", "history": "Added in API level 1", "FullName": "public Socket (Proxy proxy)"}}, "Inheritance": [], "ClassName": "java.net.Socket", "ClassDesc": "This class implements client sockets (also called just \"sockets\"). A socket is an endpoint for communication between two machines. The actual work of the socket is performed by an instance of the SocketImpl class. An application, by changing the socket factory that creates the socket implementation, can configure itself to create sockets appropriate to the local firewall."}