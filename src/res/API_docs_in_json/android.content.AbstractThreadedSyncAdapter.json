{"Functions": {"onSyncCanceled(java.lang.Thread)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the Thread of the sync that is to be canceled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that a sync operation has been canceled. This will be invoked on a separate thread than the sync thread and so you must consider the multi-threaded implications of the work that you do in this method. This will only be invoked when the SyncAdapter indicates that it does support parallel syncs.", "history": "Added in API level 11", "FullName": "public void onSyncCanceled (Thread thread)"}, "onUnsyncableAccount()": {"Returns": [["boolean", "If false syncing is deferred. Returns true by default, i.e. by default syncing starts immediately."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Allows to defer syncing until all accounts are properly set up. Called when a account / authority pair that can be handled by this adapter @B_android#content#ContentResolver#requestSync_E@ and the account/provider @B_android#content#ContentResolver#getIsSyncable_E@. This might be called on a different service connection as @B_android#content#AbstractThreadedSyncAdapter#onPerformSync_E@. The system expects this method to immediately return. If the call stalls the system behaves as if this method returned true. If it is required to perform a longer task (such as interacting with the user), return false and proceed in a difference context, such as an @B_android#app#Activity_E@, or foreground service. The sync can then be rescheduled once the account becomes syncable. This method must be called from the", "history": "Added in API level 28", "FullName": "public boolean onUnsyncableAccount ()"}, "getContext()": {"Returns": [["@B_android#content#Context_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public Context getContext ()"}, "AbstractThreadedSyncAdapter(android.content.Context,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@ that this is running within."], ["boolean", "boolean: if true then sync requests that have @B_android#content#ContentResolver#SYNC_EXTRAS_INITIALIZE_E@ set will be internally handled by @B_android#content#AbstractThreadedSyncAdapter_E@ by calling @B_android#content#ContentResolver#setIsSyncable_E@ with 1 if it is currently set to <0."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#content#AbstractThreadedSyncAdapter_E@.", "history": "Added in API level 5", "FullName": "public AbstractThreadedSyncAdapter (Context context, boolean autoInitialize)"}, "AbstractThreadedSyncAdapter(android.content.Context,boolean,boolean)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the @B_android#content#Context_E@ that this is running within."], ["boolean", "boolean: if true then sync requests that have @B_android#content#ContentResolver#SYNC_EXTRAS_INITIALIZE_E@ set will be internally handled by @B_android#content#AbstractThreadedSyncAdapter_E@ by calling @B_android#content#ContentResolver#setIsSyncable_E@ with 1 if it is currently set to <0."], ["boolean", "boolean: if true then allow syncs for different accounts to run at the same time, each in their own thread. This must be consistent with the setting in the SyncAdapter's configuration file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#content#AbstractThreadedSyncAdapter_E@.", "history": "Added in API level 11", "FullName": "public AbstractThreadedSyncAdapter (Context context, boolean autoInitialize, boolean allowParallelSyncs)"}, "onSyncCanceled()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates that a sync operation has been canceled. This will be invoked on a separate thread than the sync thread and so you must consider the multi-threaded implications of the work that you do in this method. This will only be invoked when the SyncAdapter indicates that it doesn't support parallel syncs.", "history": "Added in API level 8", "FullName": "public void onSyncCanceled ()"}, "onSecurityException(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.SyncResult)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account that attempted to sync"], ["@B_android#os#Bundle_E@", "Bundle: SyncAdapter-specific parameters"], ["@B_java#lang#String_E@", "String: the authority of the failed sync request"], ["@B_android#content#SyncResult_E@", "SyncResult: SyncAdapter-specific parameters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report that there was a security exception when opening the content provider prior to calling @B_android#content#AbstractThreadedSyncAdapter#onPerformSync_E@. This will be treated as a sync database failure.", "history": "Added in API level 23", "FullName": "public void onSecurityException (Account account, Bundle extras, String authority, SyncResult syncResult)"}, "onPerformSync(android.accounts.Account,android.os.Bundle,java.lang.String,android.content.ContentProviderClient,android.content.SyncResult)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: the account that should be synced"], ["@B_android#os#Bundle_E@", "Bundle: SyncAdapter-specific parameters"], ["@B_java#lang#String_E@", "String: the authority of this sync request"], ["@B_android#content#ContentProviderClient_E@", "ContentProviderClient: a ContentProviderClient that points to the ContentProvider for this authority"], ["@B_android#content#SyncResult_E@", "SyncResult: SyncAdapter-specific parameters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a sync for this account. SyncAdapter-specific parameters may be specified in extras, which is guaranteed to not be null. Invocations of this method are guaranteed to be serialized.", "history": "Added in API level 5", "FullName": "public abstract void onPerformSync (Account account, Bundle extras, String authority, ContentProviderClient provider, SyncResult syncResult)"}, "getSyncAdapterBinder()": {"Returns": [["@B_android#os#IBinder_E@", "a reference to the IBinder of the SyncAdapter service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public final IBinder getSyncAdapterBinder ()"}}, "Inheritance": [], "ClassName": "android.content.AbstractThreadedSyncAdapter", "ClassDesc": "An abstract implementation of a SyncAdapter that spawns a thread to invoke a sync operation. If a sync operation is already in progress when a sync request is received, an error will be returned to the new request and the existing request will be allowed to continue. However if there is no sync in progress then a thread will be spawned and @B_android#content#AbstractThreadedSyncAdapter#onPerformSync_E@ will be invoked on that thread. Syncs can be cancelled at any time by the framework. For example a sync that was not user-initiated and lasts longer than 30 minutes will be considered timed-out and cancelled. Similarly the framework will attempt to determine whether or not an adapter is making progress by monitoring its network activity over the course of a minute. If the network traffic over this window is close enough to zero the sync will be cancelled. You can also request the sync be cancelled via @B_android#content#ContentResolver#cancelSync_E@ or @B_android#content#ContentResolver#cancelSync_E@. A sync is cancelled by issuing a @B_java#lang#Thread#interrupt_E@ on the syncing thread. In order to be a sync adapter one must extend this class, provide implementations for the abstract methods and write a service that returns the result of @B_android#content#AbstractThreadedSyncAdapter#getSyncAdapterBinder_E@ in the service's @B_android#app#Service#onBind_E@ when invoked with an intent with action android.content.SyncAdapter. This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file android:resource attribute must point to a resource that looks like: The android:contentAuthority and android:accountType attributes indicate which content authority and for which account types this sync adapter serves. android:userVisible defaults to true and controls whether or not this sync adapter shows up in the Sync Settings screen. android:supportsUploading defaults to true and if true an upload-only sync will be requested for all syncadapters associated with an authority whenever that authority's content provider does a @B_android#content#ContentResolver#notifyChange_E@ with syncToNetwork set to true. android:allowParallelSyncs defaults to false and if true indicates that the sync adapter can handle syncs for multiple accounts at the same time. Otherwise the SyncManager will wait until the sync adapter is not in use before requesting that it sync an account's data. android:isAlwaysSyncable defaults to false and if true tells the SyncManager to initialize the isSyncable state to 1 for that sync adapter for each account that is added. android:syncAdapterSettingsAction defaults to null and if supplied it specifies an Intent action of an activity that can be used to adjust the sync adapter's sync settings. The activity must live in the same package as the sync adapter."}