{"Functions": {"getExclusiveOwnerThread()": {"Returns": [["@B_java#lang#Thread_E@", "the owner thread"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thread last set by setExclusiveOwnerThread, or null if never set. This method does not otherwise impose any synchronization or volatile field accesses.", "history": "Added in API level 5", "FullName": "protected final Thread getExclusiveOwnerThread ()"}, "AbstractOwnableSynchronizer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Empty constructor for use by subclasses.", "history": "Added in API level 5", "FullName": "protected AbstractOwnableSynchronizer ()"}, "setExclusiveOwnerThread(java.lang.Thread)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the owner thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the thread that currently owns exclusive access. A null argument indicates that no thread owns access. This method does not otherwise impose any synchronization or volatile field accesses.", "history": "Added in API level 5", "FullName": "protected final void setExclusiveOwnerThread (Thread thread)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.AbstractOwnableSynchronizer", "ClassDesc": "A synchronizer that may be exclusively owned by a thread. This class provides a basis for creating locks and related synchronizers that may entail a notion of ownership. The AbstractOwnableSynchronizer class itself does not manage or use this information. However, subclasses and tools may use appropriately maintained values to help control and monitor access and provide diagnostics."}