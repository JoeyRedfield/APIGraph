{"Functions": {"toString()": {"Returns": [["", "a human-readable string description of this scheme"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation of this object.", "history": "Added in API level 1", "FullName": "public final String toString ()"}, "getDefaultPort()": {"Returns": [["", "the default port for this scheme"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the default port.", "history": "Added in API level 1", "FullName": "public final int getDefaultPort ()"}, "getName()": {"Returns": [["", "the name of this scheme, in lowercase"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the scheme name.", "history": "Added in API level 1", "FullName": "public final String getName ()"}, "equals(java.lang.Object)": {"Returns": [["", "true iff the argument is equal to this scheme"]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this scheme to an object.", "history": "Added in API level 1", "FullName": "public final boolean equals (Object obj)"}, "Scheme(java.lang.String, org.apache.http.conn.scheme.SocketFactory, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "the scheme name, for example \"http\". The name will be converted to lowercase."], ["@B_org#apache#http#conn#scheme#SocketFactory_E@", "the factory for creating sockets for communication with this scheme"], ["int", "the default port for this scheme"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new scheme. Whether the created scheme allows for layered connections depends on the class of factory.", "history": "Added in API level 1", "FullName": "public Scheme (String name, SocketFactory factory, int port)"}, "resolvePort(int)": {"Returns": [["", "the given port or the defaultPort"]], "Parameters": [["int", "the port to be resolved, a negative number to obtain the default port"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resolves the correct port for this scheme. Returns the given port if it is valid, the default port otherwise.", "history": "Added in API level 1", "FullName": "public final int resolvePort (int port)"}, "getSocketFactory()": {"Returns": [["", "the socket factory for this scheme"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the socket factory. If this scheme is @B_org#apache#http#conn#scheme#Scheme#isLayered_E@, the factory implements @B_org#apache#http#conn#scheme#LayeredSocketFactory_E@.", "history": "Added in API level 1", "FullName": "public final SocketFactory getSocketFactory ()"}, "isLayered()": {"Returns": [["", "true if layered connections are possible, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this scheme allows for layered connections.", "history": "Added in API level 1", "FullName": "public final boolean isLayered ()"}, "hashCode()": {"Returns": [["", "the hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a hash code for this scheme.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.scheme.Scheme", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Encapsulates specifics of a protocol scheme such as \"http\" or \"https\". Schemes are identified by lowercase names. Supported schemes are typically collected in a @B_org#apache#http#conn#scheme#SchemeRegistry_E@. For example, to configure support for \"https://\" URLs, you could write code like the following:"}