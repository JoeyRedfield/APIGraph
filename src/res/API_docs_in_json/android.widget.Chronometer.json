{"Functions": {"setCountDown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether this view should count down"]], "Throws": [], "SeeAlso": ["@B_android#widget#Chronometer#setBase_E@"], "Permissions": [], "Description": "Set this view to count down to the base instead of counting up from it.", "history": "Added in API level 24", "FullName": "public void setCountDown (boolean countDown)"}, "getBase()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the base time as set through @B_android#widget#Chronometer#setBase_E@.", "history": "Added in API level 1", "FullName": "public long getBase ()"}, "onVisibilityChanged(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view. This value must never be null."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "Added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "isTheFinalCountDown()": {"Returns": [["boolean", "whether this is the final countdown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public boolean isTheFinalCountDown ()"}, "Chronometer(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize with standard view layout information and style. Sets the base to the current time.", "history": "Added in API level 1", "FullName": "public Chronometer (Context context, AttributeSet attrs, int defStyleAttr)"}, "Chronometer(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize with standard view layout information. Sets the base to the current time.", "history": "Added in API level 1", "FullName": "public Chronometer (Context context, AttributeSet attrs)"}, "onWindowVisibilityChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new visibility of the window. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing has change its visibility (between @B_android#view#View#GONE_E@, @B_android#view#View#INVISIBLE_E@, and @B_android#view#View#VISIBLE_E@). Note that this tells you whether or not your window is being made visible to the window manager; this does not tell you whether or not your window is obscured by other windows on the screen, even if it is itself visible.", "history": "Added in API level 1", "FullName": "protected void onWindowVisibilityChanged (int visibility)"}, "setFormat(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the format string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the format string used for display. The Chronometer will display this string, with the first \"%s\" replaced by the current timer value in \"MM:SS\" or \"H:MM:SS\" form. If the format string is null, or if you never call setFormat(), the Chronometer will simply display the timer value in \"MM:SS\" or \"H:MM:SS\" form.", "history": "Added in API level 1", "FullName": "public void setFormat (String format)"}, "setOnChronometerTickListener(android.widget.Chronometer.OnChronometerTickListener)": {"Returns": [], "Parameters": [["@B_android#widget#Chronometer#OnChronometerTickListener_E@", "Chronometer.OnChronometerTickListener: The listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be called when the chronometer changes.", "history": "Added in API level 3", "FullName": "public void setOnChronometerTickListener (Chronometer.OnChronometerTickListener listener)"}, "setBase(long)": {"Returns": [], "Parameters": [["long", "long: Use the @B_android#os#SystemClock#elapsedRealtime_E@ time base."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the time that the count-up timer is in reference to.", "history": "Added in API level 1", "FullName": "public void setBase (long base)"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start counting up. This does not affect the base as set from @B_android#widget#Chronometer#setBase_E@, just the view display. Chronometer works by regularly scheduling messages to the handler, even when the Widget is not visible. To make sure resource leaks do not occur, the user should make sure that each start() call has a reciprocal call to @B_android#widget#Chronometer#stop_E@.", "history": "Added in API level 1", "FullName": "public void start ()"}, "getOnChronometerTickListener()": {"Returns": [["@B_android#widget#Chronometer#OnChronometerTickListener_E@", "The listener (may be null) that is listening for chronometer change events."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public Chronometer.OnChronometerTickListener getOnChronometerTickListener ()"}, "Chronometer(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize this Chronometer object. Sets the base to the current time.", "history": "Added in API level 1", "FullName": "public Chronometer (Context context)"}, "isCountDown()": {"Returns": [["boolean", "whether this view counts down"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Chronometer#setCountDown_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isCountDown ()"}, "Chronometer(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public Chronometer (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "the content description"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#view#View_E@'s content description. @B_android#view#View#setContentDescription_E@ to modify the content description.", "history": "Added in API level 4", "FullName": "public CharSequence getContentDescription ()"}, "onVisibilityChanged(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view whose visibility changed. May be this or an ancestor view."], ["int", "int: The new visibility, one of @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@ or @B_android#view#View#GONE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the visibility of the view or an ancestor of the view has changed.", "history": "added in API level 8", "FullName": "protected void onVisibilityChanged (View changedView, int visibility)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getFormat()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current format string as set through @B_android#widget#Chronometer#setFormat_E@.", "history": "Added in API level 1", "FullName": "public String getFormat ()"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stop counting up. This does not affect the base as set from @B_android#widget#Chronometer#setBase_E@, just the view display. This stops the messages to the handler, effectively releasing resources that would be held as the chronometer is running, via @B_android#widget#Chronometer#start_E@.", "history": "Added in API level 1", "FullName": "public void stop ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@"], "ClassName": "android.widget.Chronometer", "ClassDesc": "Class that implements a simple timer. You can give it a start time in the @B_android#os#SystemClock#elapsedRealtime_E@ timebase, and it counts up from that, or if you don't give it a base time, it will use the time at which you call @B_android#widget#Chronometer#start_E@. The timer can also count downward towards the base time by setting @B_android#widget#Chronometer#setCountDown_E@ to true. By default it will display the current timer value in the form \"MM:SS\" or \"H:MM:SS\", or you can use @B_android#widget#Chronometer#setFormat_E@ to format the timer value into an arbitrary string."}