{"Functions": {"Collator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Empty default constructor to make javadocs happy", "history": "Added in API level 24", "FullName": "protected Collator ()"}, "getDisplayName(android.icu.util.ULocale,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the display name"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale of the collator"], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale for the collator's display name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayName (ULocale objectLocale, ULocale displayLocale)"}, "setReorderCodes(int...)": {"Returns": [], "Parameters": [["int...", "int: the reordering codes to apply to this collator; if this is null or an empty array then this clears any existing reordering"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getReorderCodes_E@", "@B_android#icu#text#Collator#getEquivalentReorderCodes_E@", "@B_android#icu#text#Collator#ReorderCodes_E@", "@B_android#icu#lang#UScript_E@"], "Permissions": [], "Description": "Sets the reordering codes for this collator. Collation reordering allows scripts and some other groups of characters to be moved relative to each other. This reordering is done on top of the DUCET/CLDR standard collation order. Reordering can specify groups to be placed at the start and/or the end of the collation order. These groups are specified using UScript codes and @B_android#icu#text#Collator#ReorderCodes_E@ entries. By default, reordering codes specified for the start of the order are placed in the order given after several special non-script blocks. These special groups of characters are space, punctuation, symbol, currency, and digit. These special groups are represented with @B_android#icu#text#Collator#ReorderCodes_E@ entries. Script groups can be intermingled with these special non-script groups if those special groups are explicitly specified in the reordering. The special code @B_android#icu#text#Collator#ReorderCodes#OTHERS_E@ stands for any script that is not explicitly mentioned in the list of reordering codes given. Anything that is after OTHERS will go at the very end of the reordering in the order given. The special reorder code @B_android#icu#text#Collator#ReorderCodes#DEFAULT_E@ will reset the reordering for this collator to the default for this collator. The default reordering may be the DUCET/CLDR order or may be a reordering that was specified when this collator was created from resource data or from rules. The DEFAULT code @B_java#lang#IllegalArgumentException_E@ will be thrown. The special reorder code @B_android#icu#text#Collator#ReorderCodes#NONE_E@ will remove any reordering for this collator. The result of setting no reordering will be to have the DUCET/CLDR ordering used. The NONE code", "history": "Added in API level 24", "FullName": "public void setReorderCodes (int... order)"}, "getDisplayName(java.util.Locale,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the display name"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale of the collator"], ["@B_java#util#Locale_E@", "Locale: the locale for the collator's display name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getDisplayName (Locale objectLocale, Locale displayLocale)"}, "equals(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the strings are equal according to the collation rules, otherwise false."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string to be compared."], ["@B_java#lang#String_E@", "String: the target string to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either arguments is null."]], "SeeAlso": ["@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Compares the equality of two text Strings using this Collator's rules, strength and decomposition mode. Convenience method.", "history": "Added in API level 24", "FullName": "public boolean equals (String source, String target)"}, "getDisplayName(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the display name"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale of the collator"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale.", "history": "Added in API level 24", "FullName": "public static String getDisplayName (ULocale objectLocale)"}, "compare(java.lang.Object,java.lang.Object)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the source Object."], ["@B_java#lang#Object_E@", "Object: the target Object."]], "Throws": [["@B_java#lang#ClassCastException_E@", "thrown if either arguments cannot be cast to CharSequence."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the source Object to the target Object.", "history": "Added in API level 24", "FullName": "public int compare (Object source, Object target)"}, "setMaxVariable(int)": {"Returns": [["@B_android#icu#text#Collator_E@", "this"]], "Parameters": [["int", "int: one of Collator.ReorderCodes.SPACE, Collator.ReorderCodes.PUNCTUATION, Collator.ReorderCodes.SYMBOL, Collator.ReorderCodes.CURRENCY; or Collator.ReorderCodes.DEFAULT to restore the default max variable group"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getMaxVariable_E@"], "Permissions": [], "Description": "The base class implementation throws an UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public Collator setMaxVariable (int group)"}, "compare(java.lang.Object, java.lang.Object)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the source Object."], ["@B_java#lang#Object_E@", "Object: the target Object."]], "Throws": [["@B_java#lang#ClassCastException_E@", "thrown if either arguments cannot be cast to CharSequence."]], "SeeAlso": [], "Permissions": [], "Description": "Compares the source Object to the target Object.", "history": "added in API level 24", "FullName": "public int compare (Object source, Object target)"}, "getReorderCodes()": {"Returns": [["int[]", "a copy of the reordering codes for this collator; if none are set then returns an empty array"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#setReorderCodes_E@", "@B_android#icu#text#Collator#getEquivalentReorderCodes_E@", "@B_android#icu#text#Collator#ReorderCodes_E@", "@B_android#icu#lang#UScript_E@"], "Permissions": [], "Description": "Retrieves the reordering codes for this collator. These reordering codes are a combination of UScript codes and ReorderCodes.", "history": "Added in API level 24", "FullName": "public int[] getReorderCodes ()"}, "setDecomposition(int)": {"Returns": [], "Parameters": [["int", "int: the new decomposition mode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given value is not a valid decomposition mode."]], "SeeAlso": ["@B_android#icu#text#Collator#getDecomposition_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Sets the decomposition mode of this Collator. Setting this decomposition attribute with CANONICAL_DECOMPOSITION allows the Collator to handle un-normalized text properly, producing the same results as if the text were normalized. If NO_DECOMPOSITION is set, it is the user's responsibility to insure that all text is already in the appropriate form before a comparison or before getting a CollationKey. Adjusting decomposition mode allows the user to select between faster and more complete collation behavior. Since a great many of the world's languages do not require text normalization, most locales set NO_DECOMPOSITION as the default decomposition mode. The base class method does nothing. Subclasses should override it if appropriate. See getDecomposition for a description of decomposition mode.", "history": "Added in API level 24", "FullName": "public void setDecomposition (int decomposition)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this Collator has exactly the same collation behavior as obj, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Collator to compare to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the equality of two Collator objects. Collator objects are equal if they have the same collation (sorting & searching) behavior. The base class checks for null and for equal types. Subclasses should override.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "getVariableTop()": {"Returns": [["int", "the variable top primary weight"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getMaxVariable_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract int getVariableTop ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this collator."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Clones the collator.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "isFrozen()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the object has been frozen or not. An unfrozen Collator is mutable and not thread-safe. A frozen Collator is immutable and thread-safe.", "history": "Added in API level 24", "FullName": "public boolean isFrozen ()"}, "getStrength()": {"Returns": [["int", "this Collator's current strength attribute."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#setStrength_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Returns this Collator's strength attribute. The strength attribute determines the minimum level of difference considered significant. See the Collator class description for more details. The base class method always returns @B_android#icu#text#Collator#TERTIARY_E@. Subclasses should override it if appropriate.", "history": "Added in API level 24", "FullName": "public int getStrength ()"}, "getTailoredSet()": {"Returns": [["@B_android#icu#text#UnicodeSet_E@", "a pointer to a UnicodeSet object containing all the code points and sequences that may sort differently than in the root collator."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public UnicodeSet getTailoredSet ()"}, "getCollationKey(java.lang.String)": {"Returns": [["@B_android#icu#text#CollationKey_E@", "the CollationKey for the given String based on this Collator's collation rules. If the source String is null, a null CollationKey is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be transformed into a CollationKey."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#Collator#compare_E@"], "Permissions": [], "Description": "Transforms the String into a CollationKey suitable for efficient repeated comparison. The resulting key depends on the collator's rules, strength and decomposition mode. Note that collation keys are often less efficient than simply doing comparison. For more details, see the ICU User Guide. See the CollationKey class documentation for more information.", "history": "Added in API level 24", "FullName": "public abstract CollationKey getCollationKey (String source)"}, "getFunctionalEquivalent(java.lang.String,android.icu.util.ULocale,boolean[])": {"Returns": [["@B_android#icu#util#ULocale_E@", "the locale"]], "Parameters": [["@B_java#lang#String_E@", "String: a particular keyword as enumerated by getKeywords."], ["@B_android#icu#util#ULocale_E@", "ULocale: The requested locale"], ["boolean[]", "boolean: If non-null, isAvailable[0] will receive and output boolean that indicates whether the requested locale was 'available' to the collation service. If non-null, isAvailable must have length >= 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final ULocale getFunctionalEquivalent (String keyword, ULocale locID, boolean[] isAvailable)"}, "getDecomposition()": {"Returns": [["int", "the decomposition mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#setDecomposition_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Returns the decomposition mode of this Collator. The decomposition mode determines how Unicode composed characters are handled. See the Collator class description for more details. The base class method always returns @B_android#icu#text#Collator#NO_DECOMPOSITION_E@. Subclasses should override it if appropriate.", "history": "Added in API level 24", "FullName": "public int getDecomposition ()"}, "equals(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the strings are equal according to the collation rules, otherwise false."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string to be compared."], ["@B_java#lang#String_E@", "String: the target string to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either arguments is null."]], "SeeAlso": ["@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Compares the equality of two text Strings using this Collator's rules, strength and decomposition mode. Convenience method.", "history": "added in API level 24", "FullName": "public boolean equals (String source, String target)"}, "getFunctionalEquivalent(java.lang.String,android.icu.util.ULocale)": {"Returns": [["@B_android#icu#util#ULocale_E@", "the locale"]], "Parameters": [["@B_java#lang#String_E@", "String: a particular keyword as enumerated by getKeywords."], ["@B_android#icu#util#ULocale_E@", "ULocale: The requested locale"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getFunctionalEquivalent_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final ULocale getFunctionalEquivalent (String keyword, ULocale locID)"}, "cloneAsThawed()": {"Returns": [["@B_android#icu#text#Collator_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides for the clone operation. Any clone is initially unfrozen.", "history": "Added in API level 24", "FullName": "public Collator cloneAsThawed ()"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#Collator_E@", "Collator for the desired locale if it is created successfully. Otherwise if there is no Collator associated with the current locale, the root collator will be returned."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the desired locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale_E@", "@B_java#util#ResourceBundle_E@", "@B_android#icu#text#Collator#getInstance_E@"], "Permissions": [], "Description": "For some languages, multiple collation types are available; for example, \"de@collation=phonebook\". Starting with ICU 54, collation attributes can be specified via locale keywords as well, in the old locale extension syntax (\"el@colCaseFirst=upper\") or in language tag syntax (\"el-u-kf-upper\"). See", "history": "Added in API level 24", "FullName": "public static final Collator getInstance (ULocale locale)"}, "getAvailableULocales()": {"Returns": [["@B_android#icu#util#ULocale_E@", "the list of locales in which collators are installed. This list includes any that have been registered, in addition to those that are installed with ICU4J."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final ULocale[] getAvailableULocales ()"}, "getInstance()": {"Returns": [["@B_android#icu#text#Collator_E@", "the Collator for the default locale (for example, en_US) if it is created successfully. Otherwise if there is no Collator associated with the current locale, the root collator will be returned."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@", "@B_android#icu#text#Collator#getInstance_E@"], "Permissions": [], "Description": "Returns the Collator for the current default locale. The default locale is determined by java.util.Locale.getDefault().", "history": "Added in API level 24", "FullName": "public static final Collator getInstance ()"}, "getMaxVariable()": {"Returns": [["int", "the maximum variable reordering group."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#setMaxVariable_E@"], "Permissions": [], "Description": "The base class implementation returns Collator.ReorderCodes.PUNCTUATION.", "history": "Added in API level 24", "FullName": "public int getMaxVariable ()"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the display name"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale of the collator"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "DISPLAY locale.", "history": "Added in API level 24", "FullName": "public static String getDisplayName (Locale objectLocale)"}, "getVersion()": {"Returns": [["@B_android#icu#util#VersionInfo_E@", "the version object associated with this collator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract VersionInfo getVersion ()"}, "getKeywords()": {"Returns": [["@B_java#lang#String_E@", "an array of valid collation keywords."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getKeywordValues_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final String[] getKeywords ()"}, "getKeywordValues(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: one of the keywords returned by getKeywords."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#getKeywords_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final String[] getKeywordValues (String keyword)"}, "compare(java.lang.String,java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source String."], ["@B_java#lang#String_E@", "String: the target String."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either argument is null."]], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#Collator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source text String to the target text String according to this Collator's rules, strength and decomposition mode. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target String. See the Collator class description for an example of use.", "history": "Added in API level 24", "FullName": "public abstract int compare (String source, String target)"}, "getUCAVersion()": {"Returns": [["@B_android#icu#util#VersionInfo_E@", "the version object associated with this collator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract VersionInfo getUCAVersion ()"}, "getKeywordValuesForLocale(java.lang.String,android.icu.util.ULocale,boolean)": {"Returns": [["@B_java#lang#String_E@", "an array of string values for the given key and the locale."]], "Parameters": [["@B_java#lang#String_E@", "String: one of the keys supported by this service. For now, only \"collation\" is supported."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale"], ["boolean", "boolean: if set to true it will return only commonly used values with the given locale in preferred order. Otherwise, it will return all the available values for the locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static final String[] getKeywordValuesForLocale (String key, ULocale locale, boolean commonlyUsed)"}, "getEquivalentReorderCodes(int)": {"Returns": [["int[]", "the set of all reorder codes in the same group as the given reorder code."]], "Parameters": [["int", "int: The reorder code to determine equivalence for."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#Collator#setReorderCodes_E@", "@B_android#icu#text#Collator#getReorderCodes_E@", "@B_android#icu#text#Collator#ReorderCodes_E@", "@B_android#icu#lang#UScript_E@"], "Permissions": [], "Description": "Retrieves all the reorder codes that are grouped with the given reorder code. Some reorder codes are grouped and must reorder together. Beginning with ICU 55, scripts only reorder together if they are primary-equal, for example Hiragana and Katakana.", "history": "Added in API level 24", "FullName": "public static int[] getEquivalentReorderCodes (int reorderCode)"}, "getDisplayName(java.util.Locale, java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the display name"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale of the collator"], ["@B_java#util#Locale_E@", "Locale: the locale for the collator's display name"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public static String getDisplayName (Locale objectLocale, Locale displayLocale)"}, "setStrength(int)": {"Returns": [], "Parameters": [["int", "int: the new strength value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the new strength value is not valid."]], "SeeAlso": ["@B_android#icu#text#Collator#getStrength_E@", "@B_android#icu#text#Collator_E@"], "Permissions": [], "Description": "Sets this Collator's strength attribute. The strength attribute determines the minimum level of difference considered significant during comparison. The base class method does nothing. Subclasses should override it if appropriate. See the Collator class description for an example of use.", "history": "Added in API level 24", "FullName": "public void setStrength (int newStrength)"}, "compare(java.lang.String, java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source String."], ["@B_java#lang#String_E@", "String: the target String."]], "Throws": [["@B_java#lang#NullPointerException_E@", "thrown if either argument is null."]], "SeeAlso": ["@B_android#icu#text#CollationKey_E@", "@B_android#icu#text#Collator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source text String to the target text String according to this Collator's rules, strength and decomposition mode. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target String. See the Collator class description for an example of use.", "history": "added in API level 24", "FullName": "public abstract int compare (String source, String target)"}, "hashCode()": {"Returns": [["int", "a hash code value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates a hash code for this Collator object. The implementation exists just for consistency with @B_android#icu#text#Collator#equals_E@ implementation in this class and does not generate a useful hash code. Subclasses should override this implementation.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "freeze()": {"Returns": [["@B_android#icu#text#Collator_E@", "the collator itself."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freezes the collator.", "history": "Added in API level 24", "FullName": "public Collator freeze ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#Collator_E@", "Collator for the desired locale if it is created successfully. Otherwise if there is no Collator associated with the current locale, the root collator will be returned."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale_E@", "@B_java#util#ResourceBundle_E@", "@B_android#icu#text#Collator#getInstance_E@"], "Permissions": [], "Description": "Returns the Collator for the desired locale. For some languages, multiple collation types are available; for example, \"de-u-co-phonebk\". Starting with ICU 54, collation attributes can be specified via locale keywords as well, in the old locale extension syntax (\"el@colCaseFirst=upper\", only with @B_android#icu#util#ULocale_E@) or in language tag syntax (\"el-u-kf-upper\"). See", "history": "Added in API level 24", "FullName": "public static final Collator getInstance (Locale locale)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "the list of locales in which collators are installed. This list includes any that have been registered, in addition to those that are installed with ICU4J."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of locales, as Locale objects, for which collators are installed. Note that Locale objects do not support RFC 3066.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}}, "Inheritance": [], "ClassName": "android.icu.text.Collator", "ClassDesc": "@B_java#text#Collator_E@. Methods, fields, and other functionality specific to ICU are labeled 'Collator performs locale-sensitive string comparison. A concrete subclass, RuleBasedCollator, allows customization of the collation ordering by the use of rule sets. A Collator is thread-safe only when frozen. See @B_android#icu#text#Collator#isFrozen_E@ and @B_android#icu#util#Freezable_E@. Following the PRIMARY strength: Typically, this is used to denote differences between base characters (for example, \"a\" < \"b\"). It is the strongest difference. For example, dictionaries are divided into different sections by base character. SECONDARY strength: Accents in the characters are considered secondary differences (for example, \"as\" < \"\u00e0s\" < \"at\"). Other differences between letters can also be considered secondary differences, depending on the language. A secondary difference is ignored when there is a primary difference anywhere in the strings. TERTIARY strength: Upper and lower case differences in characters are distinguished at tertiary strength (for example, \"ao\" < \"Ao\" < \"a\u00f2\"). In addition, a variant of a letter differs from the base form on the tertiary strength (such as \"A\" and \"\u24b6\"). Another example is the difference between large and small Kana. A tertiary difference is ignored when there is a primary or secondary difference anywhere in the strings. QUATERNARY strength: When punctuation is ignored (see IDENTICAL strength: When all other strengths are equal, the IDENTICAL strength is used as a tiebreaker. The Unicode code point values of the NFD form of each string are compared, just in case there is no difference. For example, Hebrew cantellation marks are only distinguished at this strength. This strength should be used sparingly, as only code point value differences between two strings is an extremely rare occurrence. Using this strength substantially decreases the performance for both comparison and collation key generation APIs. This strength also increases the size of the collation key. Unlike the JDK, ICU4J's Collator deals only with 2 decomposition modes, the canonical decomposition mode and one that does not use any decomposition. The compatibility decomposition mode, java.text.Collator.FULL_DECOMPOSITION is not supported here. If the canonical decomposition mode is set, the Collator handles un-normalized text properly, producing the same results as if the text were normalized in NFD. If canonical decomposition is turned off, it is the user's responsibility to ensure that all text is already in the appropriate form before performing a comparison or before getting a CollationKey. For more information about the collation service see the Examples of use"}