{"Functions": {"cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels the registration with the watch service. Upon return the watch key will be invalid. If the watch key is enqueued, waiting to be retrieved from the watch service, then it will remain in the queue until it is removed. Pending events, if any, remain pending and may be retrieved by invoking the @B_java#nio#file#WatchKey#pollEvents_E@ method after the key is cancelled. If this watch key has already been cancelled then invoking this method has no effect. Once cancelled, a watch key remains forever invalid.", "history": "Added in API level 26", "FullName": "public abstract void cancel ()"}, "watchable()": {"Returns": [["@B_java#nio#file#Watchable_E@", "the object for which this watch key was created"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the object for which this watch key was created. This method will continue to return the object even after the key is cancelled. As the WatchService is intended to map directly on to the native file event notification facility (where available) then many of details on how registered objects are watched is highly implementation specific. When watching a directory for changes for example, and the directory is moved or renamed in the file system, there is no guarantee that the watch key will be cancelled and so the object returned by this method may no longer be a valid path to the directory.", "history": "Added in API level 26", "FullName": "public abstract Watchable watchable ()"}, "reset()": {"Returns": [["boolean", "true if the watch key is valid and has been reset, and false if the watch key could not be reset because it is no longer @B_java#nio#file#WatchKey#isValid_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this watch key. If this watch key has been cancelled or this watch key is already in the ready state then invoking this method has no effect. Otherwise if there are pending events for the object then this watch key is immediately re-queued to the watch service. If there are no pending events then the watch key is put into the ready state and will remain in that state until an event is detected or the watch key is cancelled.", "history": "Added in API level 26", "FullName": "public abstract boolean reset ()"}, "isValid()": {"Returns": [["boolean", "true if, and only if, this watch key is valid"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this watch key is valid. A watch key is valid upon creation and remains until it is cancelled, or its watch service is closed.", "history": "Added in API level 26", "FullName": "public abstract boolean isValid ()"}, "pollEvents()": {"Returns": [["@B_java#util#List_E@", "the list of the events retrieved; may be empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes all pending events for this watch key, returning a List of the events that were retrieved. Note that this method does not wait if there are no events pending.", "history": "Added in API level 26", "FullName": "public abstract List<WatchEvent<?>> pollEvents ()"}}, "Inheritance": [], "ClassName": "java.nio.file.WatchKey", "ClassDesc": "A token representing the registration of a @B_java#nio#file#Watchable_E@ object with a @B_java#nio#file#WatchService_E@. A watch key is created when a watchable object is registered with a watch service. The key remains @B_java#nio#file#WatchKey#isValid_E@ until: A watch key has a state. When initially created the key is said to be ready. When an event is detected then the key is signalled and queued so that it can be retrieved by invoking the watch service's @B_java#nio#file#WatchService#poll_E@ or @B_java#nio#file#WatchService#take_E@ methods. Once signalled, a key remains in this state until its @B_java#nio#file#WatchKey#reset_E@ method is invoked to return the key to the ready state. Events detected while the key is in the signalled state are queued but do not cause the key to be re-queued for retrieval from the watch service. Events are retrieved by invoking the key's @B_java#nio#file#WatchKey#pollEvents_E@ method. This method retrieves and removes all events accumulated for the object. When initially created, a watch key has no pending events. Typically events are retrieved when the key is in the signalled state leading to the following idiom: Watch keys are safe for use by multiple concurrent threads. Where there are several threads retrieving signalled keys from a watch service then care should be taken to ensure that the reset method is only invoked after the events for the object have been processed. This ensures that one thread is processing the events for an object at any time."}