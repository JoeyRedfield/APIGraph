{"Functions": {"getFloat(int,float)": {"Returns": [["float", "Attribute float value, or defValue if the attribute was not defined or could not be coerced to a float."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["float", "float no parameter comment"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the float value for the attribute at If the attribute is not a float or an integer, this method will attempt to coerce it to a float using @B_java#lang#Float#parseFloat_E@.", "history": "Added in API level 1", "FullName": "public float getFloat (int index, float defValue)"}, "getBoolean(int,boolean)": {"Returns": [["boolean", "Boolean value of the attribute, or defValue if the attribute was not defined or could not be coerced to an integer."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["boolean", "boolean: Value to return if the attribute is not defined or cannot be coerced to an integer."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the boolean value for the attribute at If the attribute is an integer value, this method returns false if the attribute is equal to zero, and true otherwise. If the attribute is not a boolean or integer value, this method will attempt to coerce it to an integer using @B_java#lang#Integer#decode_E@ and return whether it is equal to zero.", "history": "Added in API level 1", "FullName": "public boolean getBoolean (int index, boolean defValue)"}, "getResourceId(int, int)": {"Returns": [["int", "Attribute resource identifier, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the resource identifier for the attribute at @B_android#content#res#TypedArray_E@ object is retrieved. As a result, this function will return the resource identifier of the final resource value that was found, not necessarily the original resource that was specified by the attribute.", "history": "added in API level 1", "FullName": "public int getResourceId (int index, int defValue)"}, "getDimension(int,float)": {"Returns": [["float", "Attribute dimension value multiplied by the appropriate metric, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["float", "float: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimensionPixelOffset_E@", "@B_android#content#res#TypedArray#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#util#DisplayMetrics_E@ associated with the resources this @B_android#content#res#TypedArray_E@ object came from. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "Added in API level 1", "FullName": "public float getDimension (int index, float defValue)"}, "getColor(int, int)": {"Returns": [["int", "Attribute color value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer color or color state list."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the color value for the attribute at @B_android#content#res#ColorStateList_E@, then the default color from the set is returned. This method will throw an exception if the attribute is defined but is not an integer color or color state list.", "history": "added in API level 1", "FullName": "public int getColor (int index, int defValue)"}, "getText(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence holding string data. May be styled. Returns null if the attribute is not defined or could not be coerced to a string."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the styled string value for the attribute at If the attribute is not a string, this method will attempt to coerce it to a string.", "history": "Added in API level 1", "FullName": "public CharSequence getText (int index)"}, "getLayoutDimension(int,int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: Index of the attribute to retrieve."], ["int", "int: The default value to return if this attribute is not default or contains the wrong type of data."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Special version of @B_android#content#res#TypedArray#getDimensionPixelSize_E@ for retrieving @B_android#view#ViewGroup_E@'s layout_width and layout_height attributes. This is only here for performance reasons; applications should use @B_android#content#res#TypedArray#getDimensionPixelSize_E@.", "history": "Added in API level 3", "FullName": "public int getLayoutDimension (int index, int defValue)"}, "getBoolean(int, boolean)": {"Returns": [["boolean", "Boolean value of the attribute, or defValue if the attribute was not defined or could not be coerced to an integer."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["boolean", "boolean: Value to return if the attribute is not defined or cannot be coerced to an integer."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the boolean value for the attribute at If the attribute is an integer value, this method will return whether it is equal to zero. If the attribute is not a boolean or integer value, this method will attempt to coerce it to an integer using @B_java#lang#Integer#decode_E@ and return whether it is equal to zero.", "history": "added in API level 1", "FullName": "public boolean getBoolean (int index, boolean defValue)"}, "getValue(int,android.util.TypedValue)": {"Returns": [["boolean", "true if the value was retrieved and not @empty, false otherwise."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["@B_android#util#TypedValue_E@", "TypedValue: TypedValue object in which to place the attribute's data."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw TypedValue for the attribute at", "history": "Added in API level 1", "FullName": "public boolean getValue (int index, TypedValue outValue)"}, "getDimensionPixelSize(int, int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a dimension."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimension_E@", "@B_android#content#res#TypedArray#getDimensionPixelOffset_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#content#res#TypedArray#getDimension_E@, except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "added in API level 1", "FullName": "public int getDimensionPixelSize (int index, int defValue)"}, "getDimensionPixelOffset(int,int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimension_E@", "@B_android#content#res#TypedArray#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#content#res#TypedArray#getDimension_E@, except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "Added in API level 1", "FullName": "public int getDimensionPixelOffset (int index, int defValue)"}, "getColor(int,int)": {"Returns": [["int", "Attribute color value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer color or color state list."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the color value for the attribute at @B_android#content#res#ColorStateList_E@, then the default color from the set is returned. This method will throw an exception if the attribute is defined but is not an integer color or color state list.", "history": "Added in API level 1", "FullName": "public int getColor (int index, int defValue)"}, "getFraction(int, int, int, float)": {"Returns": [["float", "Attribute fractional value multiplied by the appropriate base value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["int", "int: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."], ["float", "float: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a fraction."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a fractional unit attribute at", "history": "added in API level 1", "FullName": "public float getFraction (int index, int base, int pbase, float defValue)"}, "getResourceId(int,int)": {"Returns": [["int", "Attribute resource identifier, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the resource identifier for the attribute at @B_android#content#res#TypedArray_E@ object is retrieved. As a result, this function will return the resource identifier of the final resource value that was found, not necessarily the original resource that was specified by the attribute.", "history": "Added in API level 1", "FullName": "public int getResourceId (int index, int defValue)"}, "getFloat(int, float)": {"Returns": [["float", "Attribute float value, or defValue if the attribute was not defined or could not be coerced to a float."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["float", "float no parameter comment"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the float value for the attribute at If the attribute is not a float or an integer, this method will attempt to coerce it to a float using @B_java#lang#Float#parseFloat_E@.", "history": "added in API level 1", "FullName": "public float getFloat (int index, float defValue)"}, "hasValueOrEmpty(int)": {"Returns": [["boolean", "True if the attribute has a value or is empty, false otherwise."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether there is an attribute at true if the attribute was explicitly set to @empty and false only if the attribute was undefined.", "history": "Added in API level 22", "FullName": "public boolean hasValueOrEmpty (int index)"}, "getInteger(int,int)": {"Returns": [["int", "Attribute integer value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the integer value for the attribute at Unlike @B_android#content#res#TypedArray#getInt_E@, this method will throw an exception if the attribute is defined but is not an integer.", "history": "Added in API level 1", "FullName": "public int getInteger (int index, int defValue)"}, "getLayoutDimension(int, java.lang.String)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: Index of the attribute to retrieve."], ["@B_java#lang#String_E@", "String: Textual name of attribute for error reporting."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a dimension or integer (enum)."]], "SeeAlso": [], "Permissions": [], "Description": "Special version of @B_android#content#res#TypedArray#getDimensionPixelSize_E@ for retrieving @B_android#view#ViewGroup_E@'s layout_width and layout_height attributes. This is only here for performance reasons; applications should use @B_android#content#res#TypedArray#getDimensionPixelSize_E@. This method will throw an exception if the attribute is defined but is not a dimension or integer (enum).", "history": "added in API level 1", "FullName": "public int getLayoutDimension (int index, String name)"}, "hasValue(int)": {"Returns": [["boolean", "True if the attribute has a value, false otherwise."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Determines whether there is an attribute at @empty or @undefined, this method returns false.", "history": "Added in API level 1", "FullName": "public boolean hasValue (int index)"}, "length()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of values in this array.", "history": "Added in API level 1", "FullName": "public int length ()"}, "getFont(int)": {"Returns": [["@B_android#graphics#Typeface_E@", "Typeface for the attribute, or null if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a font resource."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the Typeface for the attribute at This method will throw an exception if the attribute is defined but is not a font.", "history": "Added in API level 26", "FullName": "public Typeface getFont (int index)"}, "getPositionDescription()": {"Returns": [["@B_java#lang#String_E@", "Human-readable description of current parser state."]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a message about the parser state suitable for printing error messages.", "history": "Added in API level 1", "FullName": "public String getPositionDescription ()"}, "getType(int)": {"Returns": [["int", "Attribute type."]], "Parameters": [["int", "int: Index of attribute whose type to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of attribute at the specified index.", "history": "Added in API level 21", "FullName": "public int getType (int index)"}, "getColorStateList(int)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "ColorStateList for the attribute, or null if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the attribute if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer color or color state list."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the ColorStateList for the attribute at @B_android#content#res#ColorStateList_E@ description. This method will return null if the attribute is not defined or is not an integer color or color state list.", "history": "Added in API level 1", "FullName": "public ColorStateList getColorStateList (int index)"}, "getDimension(int, float)": {"Returns": [["float", "Attribute dimension value multiplied by the appropriate metric, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["float", "float: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimensionPixelOffset_E@", "@B_android#content#res#TypedArray#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#util#DisplayMetrics_E@ associated with the resources this @B_android#content#res#TypedArray_E@ object came from. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "added in API level 1", "FullName": "public float getDimension (int index, float defValue)"}, "getLayoutDimension(int, int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: Index of the attribute to retrieve."], ["int", "int: The default value to return if this attribute is not default or contains the wrong type of data."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Special version of @B_android#content#res#TypedArray#getDimensionPixelSize_E@ for retrieving @B_android#view#ViewGroup_E@'s layout_width and layout_height attributes. This is only here for performance reasons; applications should use @B_android#content#res#TypedArray#getDimensionPixelSize_E@.", "history": "added in API level 3", "FullName": "public int getLayoutDimension (int index, int defValue)"}, "getDimensionPixelSize(int,int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a dimension."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimension_E@", "@B_android#content#res#TypedArray#getDimensionPixelOffset_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#content#res#TypedArray#getDimension_E@, except the returned value is converted to integer pixels for use as a size. A size conversion involves rounding the base value, and ensuring that a non-zero base value is at least one pixel in size. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "Added in API level 1", "FullName": "public int getDimensionPixelSize (int index, int defValue)"}, "getNonResourceString(int)": {"Returns": [["@B_java#lang#String_E@", "String holding string data. Any styling information is removed. Returns null if the attribute is not defined or is not an immediate string value."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the string value for the attribute at", "history": "Added in API level 1", "FullName": "public String getNonResourceString (int index)"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Recycles the TypedArray, to be re-used by a later caller. After calling this function you must not ever touch the typed array again.", "history": "Added in API level 1", "FullName": "public void recycle ()"}, "getTextArray(int)": {"Returns": [["@B_java#lang#CharSequence_E@", "CharSequence[] for the attribute, or null if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the CharSequence[] for the attribute at @B_android#content#res#Resources#getTextArray_E@ of the owning Resources object to retrieve its String[]. This method will throw an exception if the attribute is defined but is not a text array resource.", "history": "Added in API level 1", "FullName": "public CharSequence[] getTextArray (int index)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getFraction(int,int,int,float)": {"Returns": [["float", "Attribute fractional value multiplied by the appropriate base value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: The base value of this fraction. In other words, a standard fraction is multiplied by this value."], ["int", "int: The parent base value of this fraction. In other words, a parent fraction (nn%p) is multiplied by this value."], ["float", "float: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a fraction."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a fractional unit attribute at", "history": "Added in API level 1", "FullName": "public float getFraction (int index, int base, int pbase, float defValue)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "String holding string data. Any styling information is removed. Returns null if the attribute is not defined or could not be coerced to a string."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the string value for the attribute at If the attribute is not a string, this method will attempt to coerce it to a string.", "history": "Added in API level 1", "FullName": "public String getString (int index)"}, "getInt(int, int)": {"Returns": [["int", "Integer value of the attribute, or defValue if the attribute was not defined or could not be coerced to an integer."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or cannot be coerced to an integer."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the integer value for the attribute at If the attribute is not an integer, this method will attempt to coerce it to an integer using @B_java#lang#Integer#decode_E@.", "history": "added in API level 1", "FullName": "public int getInt (int index, int defValue)"}, "getLayoutDimension(int,java.lang.String)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels."]], "Parameters": [["int", "int: Index of the attribute to retrieve."], ["@B_java#lang#String_E@", "String: Textual name of attribute for error reporting."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a dimension or integer (enum)."]], "SeeAlso": [], "Permissions": [], "Description": "Special version of @B_android#content#res#TypedArray#getDimensionPixelSize_E@ for retrieving @B_android#view#ViewGroup_E@'s layout_width and layout_height attributes. This is only here for performance reasons; applications should use @B_android#content#res#TypedArray#getDimensionPixelSize_E@. This method will throw an exception if the attribute is defined but is not a dimension or integer (enum).", "history": "Added in API level 1", "FullName": "public int getLayoutDimension (int index, String name)"}, "peekValue(int)": {"Returns": [["@B_android#util#TypedValue_E@", "Returns a TypedValue object if the attribute is defined, containing its data; otherwise returns null. (You will not receive a TypedValue whose type is TYPE_NULL.)"]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw TypedValue for the attribute at @B_android#content#res#TypedArray_E@.", "history": "Added in API level 1", "FullName": "public TypedValue peekValue (int index)"}, "getIndexCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of indices in the array that actually have data. Attributes with a value of @empty are included, as this is an explicit indicator.", "history": "Added in API level 1", "FullName": "public int getIndexCount ()"}, "getInteger(int, int)": {"Returns": [["int", "Attribute integer value, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the integer value for the attribute at Unlike @B_android#content#res#TypedArray#getInt_E@, this method will throw an exception if the attribute is defined but is not an integer.", "history": "added in API level 1", "FullName": "public int getInteger (int index, int defValue)"}, "getResources()": {"Returns": [["@B_android#content#res#Resources_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Resources object this array was loaded from.", "history": "Added in API level 1", "FullName": "public Resources getResources ()"}, "getDimensionPixelOffset(int, int)": {"Returns": [["int", "Attribute dimension value multiplied by the appropriate metric and truncated to integer pixels, or defValue if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not an integer."]], "SeeAlso": ["@B_android#content#res#TypedArray#getDimension_E@", "@B_android#content#res#TypedArray#getDimensionPixelSize_E@"], "Permissions": [], "Description": "Retrieve a dimensional unit attribute at @B_android#content#res#TypedArray#getDimension_E@, except the returned value is converted to integer pixels for you. An offset conversion involves simply truncating the base value to an integer. This method will throw an exception if the attribute is defined but is not a dimension.", "history": "added in API level 1", "FullName": "public int getDimensionPixelOffset (int index, int defValue)"}, "getInt(int,int)": {"Returns": [["int", "Integer value of the attribute, or defValue if the attribute was not defined or could not be coerced to an integer."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["int", "int: Value to return if the attribute is not defined or cannot be coerced to an integer."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the integer value for the attribute at If the attribute is not an integer, this method will attempt to coerce it to an integer using @B_java#lang#Integer#decode_E@.", "history": "Added in API level 1", "FullName": "public int getInt (int index, int defValue)"}, "getValue(int, android.util.TypedValue)": {"Returns": [["boolean", "true if the value was retrieved and not @empty, false otherwise."]], "Parameters": [["int", "int: Index of attribute to retrieve."], ["@B_android#util#TypedValue_E@", "TypedValue: TypedValue object in which to place the attribute's data."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the raw TypedValue for the attribute at", "history": "added in API level 1", "FullName": "public boolean getValue (int index, TypedValue outValue)"}, "getSourceResourceId(int,int)": {"Returns": [["int", "Either a style resource ID, layout resource ID, or defaultValue if it was not resolved in a style or layout."]], "Parameters": [["int", "int: Index of attribute whose source style to retrieve."], ["int", "int: Value to return if the attribute is not defined or not a resource."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the resource ID of the style or layout against which the specified attribute was resolved, otherwise returns defValue. For example, if you we resolving two attributes android:attribute1 and android:attribute2 and you were inflating a @B_android#view#View_E@ from layout/my_layout.xml: @style/viewStyle is: @B_android#content#res#TypedArray_E@ will have values that return source resource ID of R.layout.my_layout for android:attribute1 and R.style.viewStyle for android:attribute2.", "history": "Added in API level 29", "FullName": "public int getSourceResourceId (int index, int defaultValue)"}, "getChangingConfigurations()": {"Returns": [["int", "Returns a mask of the changing configuration parameters, as defined by @B_android#content#pm#ActivityInfo_E@. Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": ["@B_android#content#pm#ActivityInfo_E@"], "Permissions": [], "Description": "Return a mask of the configuration parameters for which the values in this typed array may change.", "history": "Added in API level 21", "FullName": "public int getChangingConfigurations ()"}, "getIndex(int)": {"Returns": [["int", "The index at the given offset, which can be used with @B_android#content#res#TypedArray#getValue_E@ and related APIs."]], "Parameters": [["int", "int: The index you would like to returned, ranging from 0 to @B_android#content#res#TypedArray#getIndexCount_E@."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an index in the array that has data. Attributes with a value of @empty are included, as this is an explicit indicator.", "history": "Added in API level 1", "FullName": "public int getIndex (int at)"}, "getDrawable(int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable for the attribute, or null if not defined."]], "Parameters": [["int", "int: Index of attribute to retrieve."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the TypedArray has already been recycled."], ["@B_java#lang#UnsupportedOperationException_E@", "if the attribute is defined but is not a color or drawable resource."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the Drawable for the attribute at This method will throw an exception if the attribute is defined but is not a color or drawable resource.", "history": "Added in API level 1", "FullName": "public Drawable getDrawable (int index)"}}, "Inheritance": [], "ClassName": "android.content.res.TypedArray", "ClassDesc": "Container for an array of values that were retrieved with @B_android#content#res#Resources#Theme#obtainStyledAttributes_E@ or @B_android#content#res#Resources#obtainAttributes_E@. Be sure to call @B_android#content#res#TypedArray#recycle_E@ when done with them. The indices used to retrieve values from this structure correspond to the positions of the attributes given to obtainStyledAttributes."}