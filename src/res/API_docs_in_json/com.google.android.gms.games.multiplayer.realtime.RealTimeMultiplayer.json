{"Functions": {"sendUnreliableMessage(com.google.android.gms.common.api.GoogleApiClient, byte[], java.lang.String, java.lang.String)": {"Returns": [["", "@B_com#google#android#gms#games#GamesStatusCodes#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["String", "The participant ID to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to a participant in a real-time room. The message delivery is not reliable and will not report status after completion. Throws an @B_java#lang#IllegalArgumentException_E@ if recipientParticipantId is not a valid participant or belongs to the current player. The maximum message size supported is @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract int sendUnreliableMessage (GoogleApiClient apiClient, byte[] messageData, String roomId, String recipientParticipantId)"}, "getSelectOpponentsIntent(com.google.android.gms.common.api.GoogleApiClient, int, int, boolean)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to display the player selector."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["int", "The minimum number of players to select (not including the current player)."], ["int", "The maximum number of players to select (not including the current player)."], ["boolean", "Whether or not to display an option for selecting automatch players."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#create_E@"], "Permissions": [], "Description": "Returns an intent that will let the user select opponents to send an invitation to for a real-time multiplayer match. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. The number of players passed in should be the desired number of additional players to select, not including the current player. So, for a game that can handle between 2 and 4 players, minPlayers would be 1 and maxPlayers would be 3. Players may be preselected by specifying a list of player IDs in the @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ extra on the returned intent. If the user canceled, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user selected players, the result will be @B_android#app#Activity#RESULT_OK_E@, and the data intent will contain the selected player IDs in @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ and the minimum and maximum numbers of additional auto-match players in @B_com#google#android#gms#games#multiplayer#Multiplayer#EXTRA_MIN_AUTOMATCH_PLAYERS_E@ and @B_com#google#android#gms#games#multiplayer#Multiplayer#EXTRA_MAX_AUTOMATCH_PLAYERS_E@ respectively. The player IDs in @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ will include only the other players selected, not the current player. If the allowAutomatch parameter is set to false, the UI will not display an option for selecting automatch players. Set this to false if your game does not support automatching. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getSelectOpponentsIntent (GoogleApiClient apiClient, int minPlayers, int maxPlayers, boolean allowAutomatch)"}, "sendReliableMessage(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.multiplayer.realtime.RealTimeMultiplayer.ReliableMessageSentCallback, byte[], java.lang.String, java.lang.String)": {"Returns": [["", "The token for the message sent, which is returned in callback @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#ReliableMessageSentCallback#onRealTimeMessageSent_E@, or @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#ReliableMessageSentCallback_E@", "The listener that is notified when the message has been sent."], ["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_RELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["String", "The participant ID to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to a participant in a real-time room reliably. The caller will receive a callback to report the status of the send message operation. Throws an @B_java#lang#IllegalArgumentException_E@ if recipientParticipantId is not a valid participant or belongs to the current player. The maximum message size supported is @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_RELIABLE_MESSAGE_LEN_E@ bytes. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract int sendReliableMessage (GoogleApiClient apiClient, RealTimeMultiplayer.ReliableMessageSentCallback listener, byte[] messageData, String roomId, String recipientParticipantId)"}, "leave(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.multiplayer.realtime.RoomUpdateListener, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener_E@", "The listener that is notified after the room has been left. The listener is called on the main thread."], ["String", "ID of the room to leave."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Leave the specified room. This will disconnect the player from the room, but allow other players to continue playing the game. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onLeftRoom_E@ to the given listener on the main thread. After this method is called, you cannot perform any further actions on the room. You can create or join another room only after @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onLeftRoom_E@ is received. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void leave (GoogleApiClient apiClient, RoomUpdateListener listener, String roomId)"}, "dismissInvitation(com.google.android.gms.common.api.GoogleApiClient, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The ID of the invitation to dismiss."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dismiss an invitation to a real-time room. Dismissing an invitation will not change the state of the room for the other participants. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void dismissInvitation (GoogleApiClient apiClient, String invitationId)"}, "create(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.multiplayer.realtime.RoomConfig)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@", "The real-time room configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a real-time room for the current game. The lifetime of the current game's connection to the room is bound to this @B_com#google#android#gms#common#api#GoogleApiClient_E@'s lifecycle. When the client disconnects, the player will leave the room and any peer-to-peer connections for this player will be torn down. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onRoomCreated_E@ to the given RoomUpdateListener in the @B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@. The listener is called on the main thread. @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#leave_E@ when the caller is done with it. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void create (GoogleApiClient apiClient, RoomConfig config)"}, "declineInvitation(com.google.android.gms.common.api.GoogleApiClient, java.lang.String)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["String", "The ID of the invitation to decline."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Decline an invitation for a real-time room. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void declineInvitation (GoogleApiClient apiClient, String invitationId)"}, "sendUnreliableMessage(com.google.android.gms.common.api.GoogleApiClient, byte[], java.lang.String, java.util.List<java.lang.String>)": {"Returns": [["", "@B_com#google#android#gms#games#GamesStatusCodes#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."], ["List", "One or more participant IDs to send the message to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to one or more participants in a real-time room. The message delivery is not reliable and will not report status after completion. Throws an @B_java#lang#IllegalArgumentException_E@ if any participants in recipientParticipantIds are not valid or belong to the current player. The maximum message size supported is @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract int sendUnreliableMessage (GoogleApiClient apiClient, byte[] messageData, String roomId, List<String> recipientParticipantIds)"}, "getSelectOpponentsIntent(com.google.android.gms.common.api.GoogleApiClient, int, int)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to display the player selector."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["int", "The minimum number of players to select (not including the current player)."], ["int", "The maximum number of players to select (not including the current player)."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#create_E@"], "Permissions": [], "Description": "Returns an intent that will let the user select opponents to send an invitation to for a real-time multiplayer match. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. The number of players passed in should be the desired number of additional players to select, not including the current player. So, for a game that can handle between 2 and 4 players, minPlayers would be 1 and maxPlayers would be 3. Players may be preselected by specifying a list of player IDs in the @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ extra on the returned intent. If the user canceled, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user selected players, the result will be @B_android#app#Activity#RESULT_OK_E@, and the data intent will contain the selected player IDs in @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ and the minimum and maximum numbers of additional auto-match players in @B_com#google#android#gms#games#multiplayer#Multiplayer#EXTRA_MIN_AUTOMATCH_PLAYERS_E@ and @B_com#google#android#gms#games#multiplayer#Multiplayer#EXTRA_MAX_AUTOMATCH_PLAYERS_E@ respectively. The player IDs in @B_com#google#android#gms#games#Games#EXTRA_PLAYER_IDS_E@ will include only the other players selected, not the current player. This method is the equivalent of calling @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#getSelectOpponentsIntent_E@ with the allowAutomatch parameter set to true. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getSelectOpponentsIntent (GoogleApiClient apiClient, int minPlayers, int maxPlayers)"}, "join(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.multiplayer.realtime.RoomConfig)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@", "The real-time room configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Join a real-time room by accepting an invitation. The lifetime of the current game's connection to the room is bound to this @B_com#google#android#gms#common#api#GoogleApiClient_E@'s lifecycle. When the client disconnects, the player will leave the room and any peer-to-peer connections for this player will be torn down. The result is delivered by the callback @B_com#google#android#gms#games#multiplayer#realtime#RoomUpdateListener#onJoinedRoom_E@ to the given RoomUpdateListener in the @B_com#google#android#gms#games#multiplayer#realtime#RoomConfig_E@. The listener is called on the main thread. @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#leave_E@ when the caller is done with it. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract void join (GoogleApiClient apiClient, RoomConfig config)"}, "getWaitingRoomIntent(com.google.android.gms.common.api.GoogleApiClient, com.google.android.gms.games.multiplayer.realtime.Room, int)": {"Returns": [["", "An @B_android#content#Intent_E@ that can be started to display the waiting room screen."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["@B_com#google#android#gms#games#multiplayer#realtime#Room_E@", "The @B_com#google#android#gms#games#multiplayer#realtime#Room_E@ object to be displayed."], ["int", "the minimum number of participants that must be connected to the room (including the current player) for the \"Start playing\" menu item to become enabled."]], "Throws": [], "SeeAlso": ["@B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#create_E@", "@B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#leave_E@"], "Permissions": [], "Description": "Returns an intent that will display a \"waiting room\" screen that shows the progress of participants joining a real-time multiplayer room. Note that this must be invoked with @B_android#app#Activity#startActivityForResult_E@, so that the identity of the calling package can be established. If the necessary number of peers have connected and it's now OK to start the game, or if the user explicitly asked to start the game now, the activity result will be @B_android#app#Activity#RESULT_OK_E@. If the user bailed out of the waiting room screen without taking any action, the result will be @B_android#app#Activity#RESULT_CANCELED_E@. If the user explicitly chose to leave the room, the result will be @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_LEFT_ROOM_E@. If the room no longer exists or is otherwise invalid the result will be @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_INVALID_ROOM_E@. Regardless of what the result code was, the waiting room activity will return a data intent containing a @B_com#google#android#gms#games#multiplayer#realtime#Room_E@ object in @B_com#google#android#gms#games#multiplayer#Multiplayer#EXTRA_ROOM_E@ that represents the current state of the Room that you originally passed as a parameter here. Note that the returned room may be null if the room no longer exists. If desired, the waiting room can allow the user to start playing the game even before the room is fully connected. This is controlled by the minParticipantsToStart parameter: if at least that many participants (including the current player) are connected to the room, a \"Start playing\" menu item will become enabled in the waiting room UI. Setting minParticipantsToStart to 0 means that \"Start playing\" will always be available, and a value of @B_java#lang#Integer#MAX_VALUE_E@ will disable the item completely. Note: if you do allow the user to start early, you'll need to handle that situation by explicitly telling the other connected peers that the game is now starting; see the developer documentation for more details. Finally, note that the waiting room itself will never explicitly take any action to change the state of the room or its participants. So if the activity result is @B_com#google#android#gms#games#GamesActivityResultCodes#RESULT_LEFT_ROOM_E@, it's the caller's responsibility to actually leave the room. Or if the result is @B_android#app#Activity#RESULT_CANCELED_E@, it's the responsibility of the caller to double-check the current state of the Room and decide whether to start the game, keep waiting, or do something else. But note that while the waiting room is active, the state of the Room Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract Intent getWaitingRoomIntent (GoogleApiClient apiClient, Room room, int minParticipantsToStart)"}, "sendUnreliableMessageToOthers(com.google.android.gms.common.api.GoogleApiClient, byte[], java.lang.String)": {"Returns": [["", "@B_com#google#android#gms#games#GamesStatusCodes#STATUS_OK_E@ on a successful attempt, @B_com#google#android#gms#games#multiplayer#realtime#RealTimeMultiplayer#REAL_TIME_MESSAGE_FAILED_E@ if the message failed to send."]], "Parameters": [["@B_com#google#android#gms#common#api#GoogleApiClient_E@", "The @B_com#google#android#gms#common#api#GoogleApiClient_E@ to service the call."], ["byte[]", "The message to be sent. Should be at most @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes."], ["String", "ID of the room for which the message is being sent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Send a message to all participants in a real-time room, excluding the current player. The message delivery is not reliable and will not report status after completion. The maximum message size supported is @B_com#google#android#gms#games#multiplayer#Multiplayer#MAX_UNRELIABLE_MESSAGE_LEN_E@ bytes. Required API: @B_com#google#android#gms#games#Games#API_E@ Required Scopes: @B_com#google#android#gms#games#Games#SCOPE_GAMES_E@", "history": "", "FullName": "public abstract int sendUnreliableMessageToOthers (GoogleApiClient apiClient, byte[] messageData, String roomId)"}}, "Inheritance": [], "ClassName": "com.google.android.gms.games.multiplayer.realtime.RealTimeMultiplayer", "ClassDesc": "Entry point for real-time multiplayer functionality."}