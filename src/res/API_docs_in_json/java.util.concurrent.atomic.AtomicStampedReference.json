{"Functions": {"AtomicStampedReference(V,int)": {"Returns": [], "Parameters": [["V", "V: the initial reference"], ["int", "int: the initial stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicStampedReference with the given initial values.", "history": "Added in API level 1", "FullName": "public AtomicStampedReference (V initialRef, int initialStamp)"}, "getStamp()": {"Returns": [["int", "the current value of the stamp"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the stamp.", "history": "Added in API level 1", "FullName": "public int getStamp ()"}, "weakCompareAndSet(V, V, int, int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["int", "int: the expected value of the stamp"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp. compareAndSet.", "history": "added in API level 1", "FullName": "public boolean weakCompareAndSet (V expectedReference, V newReference, int expectedStamp, int newStamp)"}, "set(V, int)": {"Returns": [], "Parameters": [["V", "V: the new value for the reference"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unconditionally sets the value of both the reference and stamp.", "history": "added in API level 1", "FullName": "public void set (V newReference, int newStamp)"}, "get(int[])": {"Returns": [["V", "the current value of the reference"]], "Parameters": [["int[]", "int: an array of size of at least one. On return, stampHolder[0] will hold the value of the stamp."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current values of both the reference and the stamp. Typical usage is int[1] holder; ref = v.get(holder); .", "history": "Added in API level 1", "FullName": "public V get (int[] stampHolder)"}, "getReference()": {"Returns": [["V", "the current value of the reference"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current value of the reference.", "history": "Added in API level 1", "FullName": "public V getReference ()"}, "AtomicStampedReference(V, int)": {"Returns": [], "Parameters": [["V", "V: the initial reference"], ["int", "int: the initial stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicStampedReference with the given initial values.", "history": "added in API level 1", "FullName": "public AtomicStampedReference (V initialRef, int initialStamp)"}, "compareAndSet(V,V,int,int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["int", "int: the expected value of the stamp"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.", "history": "Added in API level 1", "FullName": "public boolean compareAndSet (V expectedReference, V newReference, int expectedStamp, int newStamp)"}, "attemptStamp(V, int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.", "history": "added in API level 1", "FullName": "public boolean attemptStamp (V expectedReference, int newStamp)"}, "attemptStamp(V,int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of the stamp to the given update value if the current reference is == to the expected reference. Any given invocation of this operation may fail (return false) spuriously, but repeated invocation when the current value holds the expected value and no other thread is also attempting to set the value will eventually succeed.", "history": "Added in API level 1", "FullName": "public boolean attemptStamp (V expectedReference, int newStamp)"}, "set(V,int)": {"Returns": [], "Parameters": [["V", "V: the new value for the reference"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unconditionally sets the value of both the reference and stamp.", "history": "Added in API level 1", "FullName": "public void set (V newReference, int newStamp)"}, "compareAndSet(V, V, int, int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["int", "int: the expected value of the stamp"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp.", "history": "added in API level 1", "FullName": "public boolean compareAndSet (V expectedReference, V newReference, int expectedStamp, int newStamp)"}, "weakCompareAndSet(V,V,int,int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value of the reference"], ["V", "V: the new value for the reference"], ["int", "int: the expected value of the stamp"], ["int", "int: the new value for the stamp"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value of both the reference and stamp to the given update values if the current reference is == to the expected reference and the current stamp is equal to the expected stamp. compareAndSet.", "history": "Added in API level 1", "FullName": "public boolean weakCompareAndSet (V expectedReference, V newReference, int expectedStamp, int newStamp)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicStampedReference<V>", "ClassDesc": "An AtomicStampedReference maintains an object reference along with an integer \"stamp\", that can be updated atomically. Implementation note: This implementation maintains stamped references by creating internal objects representing \"boxed\" [reference, integer] pairs."}