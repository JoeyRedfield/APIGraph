{"Functions": {"skip(long)": {"Returns": [["long", "the actual number of bytes skipped."]], "Parameters": [["long", "long: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if n is negative, if the stream does not support seek, or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Skips over and discards n bytes of data from the input stream. The skip method may, for a variety of reasons, end up skipping over some smaller number of bytes, possibly 0. If n is negative, the method will try to skip backwards. In case the backing file does not support backward skip at its current position, an IOException is thrown. The actual number of bytes skipped is returned. If it skips forwards, it returns a positive value. If it skips backwards, it returns a negative value. This method may skip more bytes than what are remaining in the backing file. This produces no exception and the number of bytes skipped may include some number of bytes that were beyond the EOF of the backing file. Attempting to read from the stream after skipping past the end will result in -1 indicating the end of the file.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "getChannel()": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "the file channel associated with this file input stream"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique @B_java#nio#channels#FileChannel_E@ object associated with this file input stream. The initial @B_java#nio#channels#FileChannel#position_E@ of the returned channel will be equal to the number of bytes read from the file so far. Reading bytes from this stream will increment the channel's position. Changing the channel's position, either explicitly or by reading, will change this stream's file position.", "history": "Added in API level 1", "FullName": "public FileChannel getChannel ()"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the file is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte of data from this input stream. This method blocks if no input is yet available.", "history": "Added in API level 1", "FullName": "public int read ()"}, "FileInputStream(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the system-dependent file name."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method denies read access to the file."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Creates a FileInputStream by opening a connection to an actual file, the file named by the path name name in the file system. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkRead method is called with the name argument as its argument. If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public FileInputStream (String name)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this file input stream and releases any system resources associated with the stream. If this stream has an associated channel then the channel is closed as well.", "history": "Added in API level 1", "FullName": "public void close ()"}, "FileInputStream(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: the file descriptor to be opened for reading."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a FileInputStream by using the file descriptor fdObj, which represents an existing connection to an actual file in the file system. If there is a security manager, its checkRead method is called with the file descriptor fdObj as its argument to see if it's ok to read the file descriptor. If read access is denied to the file descriptor a SecurityException is thrown. If fdObj is null then a NullPointerException is thrown. This constructor does not throw an exception if fdObj is @B_java#io#FileDescriptor#valid_E@. However, if the methods are invoked on the resulting stream to attempt I/O on the stream, an IOException is thrown.", "history": "Added in API level 1", "FullName": "public FileInputStream (FileDescriptor fdObj)"}, "getFD()": {"Returns": [["@B_java#io#FileDescriptor_E@", "the file descriptor object associated with this stream."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FileDescriptor_E@"], "Permissions": [], "Description": "Returns the FileDescriptor object that represents the connection to the actual file in the file system being used by this FileInputStream.", "history": "Added in API level 1", "FullName": "public final FileDescriptor getFD ()"}, "available()": {"Returns": [["int", "an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if this file input stream has been closed by calling close or an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of remaining bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream. Returns 0 when the file position is beyond EOF. The next invocation might be the same thread or another thread. A single read or skip of this many bytes will not block, but may read or skip fewer bytes. In some cases, a non-blocking read (or skip) may appear to be blocked when it is merely slow, for example when reading large files over slow networks.", "history": "Added in API level 1", "FullName": "public int available ()"}, "read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to b.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FileInputStream#close_E@"], "Permissions": [], "Description": "Ensures that the close method of this file input stream is called when there are no more references to it.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "FileInputStream(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the file to be opened for reading."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method denies read access to the file."]], "SeeAlso": ["@B_java#io#File#getPath_E@", "@B_java#lang#SecurityManager#checkRead_E@"], "Permissions": [], "Description": "Creates a FileInputStream by opening a connection to an actual file, the file named by the File object file in the file system. A new FileDescriptor object is created to represent this file connection. First, if there is a security manager, its checkRead method is called with the path represented by the file argument as its argument. If the named file does not exist, is a directory rather than a regular file, or for some other reason cannot be opened for reading then a FileNotFoundException is thrown.", "history": "Added in API level 1", "FullName": "public FileInputStream (File file)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "java.io.FileInputStream", "ClassDesc": "A FileInputStream obtains input bytes from a file in a file system. What files are available depends on the host environment. FileInputStream is meant for reading streams of raw bytes such as image data. For reading streams of characters, consider using FileReader."}