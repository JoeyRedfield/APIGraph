{"Functions": {"getLocalSupportedSignatureAlgorithms()": {"Returns": [["@B_java#lang#String_E@", "An array of supported signature algorithms, in descending order of preference. The return value is an empty array if no signature algorithm is supported."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLParameters#getAlgorithmConstraints_E@"], "Permissions": [], "Description": "Obtains an array of supported signature algorithms that the local side is willing to use. Note: this method is used to indicate to the peer which signature algorithms may be used for digital signatures in TLS 1.2. It is not meaningful for TLS versions prior to 1.2. The signature algorithm name must be a standard Java Security name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on). See Appendix A in the Note: the local supported signature algorithms should conform to the algorithm constraints specified by @B_javax#net#ssl#SSLParameters#getAlgorithmConstraints_E@ method in SSLParameters.", "history": "Added in API level 24", "FullName": "public abstract String[] getLocalSupportedSignatureAlgorithms ()"}, "getRequestedServerNames()": {"Returns": [["@B_java#util#List_E@", "a non-null immutable list of @B_javax#net#ssl#SNIServerName_E@s of the requested server name indications. The returned list may be empty if no server name indications were requested."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the underlying provider does not implement the operation"]], "SeeAlso": ["@B_javax#net#ssl#SNIServerName_E@", "@B_javax#net#ssl#X509ExtendedTrustManager_E@", "@B_javax#net#ssl#X509ExtendedKeyManager_E@"], "Permissions": [], "Description": "Obtains a @B_java#util#List_E@ containing all @B_javax#net#ssl#SNIServerName_E@s of the requested Server Name Indication (SNI) extension. In server mode, unless the return @B_java#util#List_E@ is empty, the server should use the requested server names to guide its selection of an appropriate authentication certificate, and/or other aspects of security policy. In client mode, unless the return @B_java#util#List_E@ is empty, the client should use the requested server names to guide its endpoint identification of the peer's identity, and/or other aspects of security policy.", "history": "Added in API level 24", "FullName": "public List<SNIServerName> getRequestedServerNames ()"}, "getPeerSupportedSignatureAlgorithms()": {"Returns": [["@B_java#lang#String_E@", "An array of supported signature algorithms, in descending order of preference. The return value is an empty array if the peer has not sent the supported signature algorithms."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#X509KeyManager_E@", "@B_javax#net#ssl#X509ExtendedKeyManager_E@"], "Permissions": [], "Description": "Obtains an array of supported signature algorithms that the peer is able to use. Note: this method is used to indicate to the local side which signature algorithms may be used for digital signatures in TLS 1.2. It is not meaningful for TLS versions prior to 1.2. The signature algorithm name must be a standard Java Security name (such as \"SHA1withRSA\", \"SHA256withECDSA\", and so on). See Appendix A in the", "history": "Added in API level 24", "FullName": "public abstract String[] getPeerSupportedSignatureAlgorithms ()"}, "ExtendedSSLSession()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public ExtendedSSLSession ()"}}, "Inheritance": [], "ClassName": "javax.net.ssl.ExtendedSSLSession", "ClassDesc": "Extends the SSLSession interface to support additional session attributes."}