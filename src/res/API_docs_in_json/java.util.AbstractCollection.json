{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "size()": {"Returns": [["int", "the number of elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this collection. If this collection contains more than", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "AbstractCollection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sole constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 1", "FullName": "protected AbstractCollection ()"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": ["@B_java#util#AbstractCollection#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an", "history": "added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "isEmpty()": {"Returns": [["boolean", "true if this collection contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns This implementation returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this collection, if present"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this collection, if it is present (optional operation). More formally, removes an element This implementation iterates over the collection looking for the specified element. If it finds the element, it removes the element from the collection using the iterator's remove method. Note that this implementation throws an", "history": "Added in API level 1", "FullName": "public boolean remove (Object o)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": ["@B_java#util#AbstractCollection#remove_E@", "@B_java#util#AbstractCollection#contains_E@"], "Permissions": [], "Description": "Removes all of this collection's elements that are also contained in the specified collection (optional operation). After this call returns, this collection will contain no elements in common with the specified collection. This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's so contained, it's removed from this collection with the iterator's Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public boolean removeAll (Collection<?> c)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this collection"]], "Parameters": [["T[]", "T: the array into which the elements of this collection are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array. If the collection fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this collection. If this collection fits in the specified array with room to spare (i.e., the array has more elements than this collection), the element in the array immediately following the end of the collection is set to If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. Like the @B_java#util#Collection#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose This implementation returns an array containing all the elements returned by this collection's iterator in the same order, stored in consecutive elements of the array, starting with index 0. If the number of elements returned by the iterator is too large to fit into the specified array, then the elements are returned in a newly allocated array with length equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The size method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public T[] toArray (T[] a)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this collection (optional operation). The collection will be empty after this method returns. This implementation iterates over this collection, removing each element using the Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public void clear ()"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": ["@B_java#util#AbstractCollection#remove_E@", "@B_java#util#AbstractCollection#contains_E@"], "Permissions": [], "Description": "Retains only the elements in this collection that are contained in the specified collection (optional operation). In other words, removes from this collection all of its elements that are not contained in the specified collection. This implementation iterates over this collection, checking each element returned by the iterator in turn to see if it's contained in the specified collection. If it's not so contained, it's removed from this collection with the iterator's Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public boolean retainAll (Collection<?> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements contained in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements contained in this collection.", "history": "Added in API level 1", "FullName": "public abstract Iterator<E> iterator ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this collection"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": ["@B_java#util#AbstractCollection#add_E@"], "Permissions": [], "Description": "Adds all of the elements in the specified collection to this collection (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (This implies that the behavior of this call is undefined if the specified collection is this collection, and this collection is nonempty.) This implementation iterates over the specified collection, and adds each object returned by the iterator to this collection, in turn. Note that this implementation will throw an", "history": "Added in API level 1", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this collection. If this collection makes any guarantees as to what order its elements are returned by its iterator, this method must return the elements in the same order. The returned array will be \"safe\" in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs. This implementation returns an array containing all the elements returned by this collection's iterator, in the same order, stored in consecutive elements of the array, starting with index 0. The length of the returned array is equal to the number of elements returned by the iterator, even if the size of this collection changes during iteration, as might happen if the collection permits concurrent modification during iteration. The size method is called only as an optimization hint; the correct result is returned even if the iterator returns a different number of elements. This method is equivalent to:", "history": "Added in API level 1", "FullName": "public Object[] toArray ()"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this collection contains all of the elements in the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this collection"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": ["@B_java#util#AbstractCollection#contains_E@"], "Permissions": [], "Description": "Returns This implementation iterates over the specified collection, checking each element returned by the iterator in turn to see if it's contained in this collection. If all elements are so contained", "history": "Added in API level 1", "FullName": "public boolean containsAll (Collection<?> c)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this collection contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this collection is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns This implementation iterates over the elements in the collection, checking each element in turn for equality with the specified element.", "history": "Added in API level 1", "FullName": "public boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true if this collection changed as a result of the call"]], "Parameters": [["E", "E: element whose presence in this collection is to be ensured"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", ""], ["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""], ["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Ensures that this collection contains the specified element (optional operation). Returns Collections that support this operation may place limitations on what elements may be added to this collection. In particular, some collections will refuse to add If a collection refuses to add a particular element for any reason other than that it already contains the element, it This implementation always throws an", "history": "Added in API level 1", "FullName": "public boolean add (E e)"}}, "Inheritance": [], "ClassName": "java.util.AbstractCollection<E>", "ClassDesc": "This class provides a skeletal implementation of the To implement an unmodifiable collection, the programmer needs only to extend this class and provide implementations for the To implement a modifiable collection, the programmer must additionally override this class's The programmer should generally provide a void (no argument) and The documentation for each non-abstract method in this class describes its implementation in detail. Each of these methods may be overridden if the collection being implemented admits a more efficient implementation. This class is a member of the"}