{"Functions": {"SSLServerSocket(int,int,java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the port on which to listen"], ["int", "int: requested maximum length of the queue of incoming connections."], ["@B_java#net#InetAddress_E@", "InetAddress: the address of the network interface through which connections will be accepted"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections as well as a particular specified network interface. This constructor is used on multihomed hosts, such as those used for firewalls or as routers, to control through which interface a network service is provided. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If", "history": "Added in API level 1", "FullName": "protected SSLServerSocket (int port, int backlog, InetAddress address)"}, "getSupportedProtocols()": {"Returns": [["@B_java#lang#String_E@", "an array of protocol names supported"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getEnabledProtocols_E@", "@B_javax#net#ssl#SSLServerSocket#setEnabledProtocols_E@"], "Permissions": [], "Description": "Returns the names of the protocols which could be enabled for use.", "history": "Added in API level 1", "FullName": "public abstract String[] getSupportedProtocols ()"}, "SSLServerSocket(int, int, java.net.InetAddress)": {"Returns": [], "Parameters": [["int", "int: the port on which to listen"], ["int", "int: requested maximum length of the queue of incoming connections."], ["@B_java#net#InetAddress_E@", "InetAddress: the address of the network interface through which connections will be accepted"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections as well as a particular specified network interface. This constructor is used on multihomed hosts, such as those used for firewalls or as routers, to control through which interface a network service is provided. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If", "history": "added in API level 1", "FullName": "protected SSLServerSocket (int port, int backlog, InetAddress address)"}, "getNeedClientAuth()": {"Returns": [["boolean", "true if client authentication is required, or false if no client authentication is desired."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#setNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#getWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setUseClientMode_E@"], "Permissions": [], "Description": "Returns true if client authentication will be accepted server-mode SSLSockets. The initial inherited setting may be overridden by calling @B_javax#net#ssl#SSLSocket#setNeedClientAuth_E@ or @B_javax#net#ssl#SSLSocket#setWantClientAuth_E@.", "history": "Added in API level 1", "FullName": "public abstract boolean getNeedClientAuth ()"}, "setEnableSessionCreation(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getEnableSessionCreation_E@"], "Permissions": [], "Description": "Controls whether new SSL sessions may be established by the sockets which are created from this server socket. SSLSockets returned from accept() inherit this setting.", "history": "Added in API level 1", "FullName": "public abstract void setEnableSessionCreation (boolean flag)"}, "setEnabledProtocols(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Names of all the protocols to enable."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when one or more of the protocols named by the parameter is not supported or when the protocols parameter is null."]], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getEnabledProtocols_E@", "@B_javax#net#ssl#SSLServerSocket#getSupportedProtocols_E@"], "Permissions": [], "Description": "Controls which particular protocols are enabled for use by accepted connections. The protocols must have been listed by getSupportedProtocols() as being supported. Following a successful call to this method, only protocols listed in the protocols parameter are enabled for use. Because of the way the protocol version is negotiated, connections will only be able to use a member of the lowest set of contiguous enabled protocol versions. For example, enabling TLSv1.2 and TLSv1 will result in connections only being able to use TLSv1. SSLSockets returned from accept() inherit this setting.", "history": "Added in API level 1", "FullName": "public abstract void setEnabledProtocols (String[] protocols)"}, "SSLServerSocket(int)": {"Returns": [], "Parameters": [["int", "int: the port on which to listen"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context. The connection backlog defaults to fifty connections queued up before the system starts to reject new connection requests. A port number of 0 creates a socket on any free port. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "protected SSLServerSocket (int port)"}, "setWantClientAuth(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set to true if client authentication is requested, or false if no client authentication is desired."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#getNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setUseClientMode_E@"], "Permissions": [], "Description": "Controls whether accepted server-mode SSLSockets will be initially configured to A socket's client authentication setting is one of the following: client authentication required client authentication requested no client authentication desired Unlike @B_javax#net#ssl#SSLServerSocket#setNeedClientAuth_E@, if the accepted socket's option is set and the client chooses not to provide authentication information about itself, Calling this method overrides any previous setting made by this method or @B_javax#net#ssl#SSLServerSocket#setNeedClientAuth_E@. The initial inherited setting may be overridden by calling @B_javax#net#ssl#SSLSocket#setNeedClientAuth_E@ or @B_javax#net#ssl#SSLSocket#setWantClientAuth_E@.", "history": "Added in API level 1", "FullName": "public abstract void setWantClientAuth (boolean want)"}, "getEnabledProtocols()": {"Returns": [["@B_java#lang#String_E@", "an array of protocol names"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getSupportedProtocols_E@", "@B_javax#net#ssl#SSLServerSocket#setEnabledProtocols_E@"], "Permissions": [], "Description": "Returns the names of the protocols which are currently enabled for use by the newly accepted connections.", "history": "Added in API level 1", "FullName": "public abstract String[] getEnabledProtocols ()"}, "getEnableSessionCreation()": {"Returns": [["boolean", "true indicates that sessions may be created; this is the default. false indicates that an existing session must be resumed"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#setEnableSessionCreation_E@"], "Permissions": [], "Description": "Returns true if new SSL sessions may be established by the sockets which are created from this server socket.", "history": "Added in API level 1", "FullName": "public abstract boolean getEnableSessionCreation ()"}, "SSLServerSocket()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"]], "SeeAlso": [], "Permissions": [], "Description": "Used only by subclasses. Create an unbound TCP server socket using the default authentication context.", "history": "Added in API level 1", "FullName": "protected SSLServerSocket ()"}, "getWantClientAuth()": {"Returns": [["boolean", "true if client authentication is requested, or false if no client authentication is desired."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#setWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#getNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setUseClientMode_E@"], "Permissions": [], "Description": "Returns true if client authentication will be The initial inherited setting may be overridden by calling @B_javax#net#ssl#SSLSocket#setNeedClientAuth_E@ or @B_javax#net#ssl#SSLSocket#setWantClientAuth_E@.", "history": "Added in API level 1", "FullName": "public abstract boolean getWantClientAuth ()"}, "setUseClientMode(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if newly accepted connections should use SSL client mode."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getUseClientMode_E@"], "Permissions": [], "Description": "Controls whether accepted connections are in the (default) SSL server mode, or the SSL client mode. Servers normally authenticate themselves, and clients are not required to do so. In rare cases, TCP servers need to act in the SSL client mode on newly accepted connections. For example, FTP clients acquire server sockets and listen there for reverse connections from the server. An FTP client would use an SSLServerSocket in \"client\" mode to accept the reverse connection while the FTP server uses an SSLSocket with \"client\" mode disabled to initiate the connection. During the resulting handshake, existing SSL sessions may be reused. SSLSockets returned from accept() inherit this setting.", "history": "Added in API level 1", "FullName": "public abstract void setUseClientMode (boolean mode)"}, "setNeedClientAuth(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: set to true if client authentication is required, or false if no client authentication is desired."]], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getNeedClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#getWantClientAuth_E@", "@B_javax#net#ssl#SSLServerSocket#setUseClientMode_E@"], "Permissions": [], "Description": "Controls whether accepted server-mode SSLSockets will be initially configured to A socket's client authentication setting is one of the following: client authentication required client authentication requested no client authentication desired Unlike @B_javax#net#ssl#SSLServerSocket#setWantClientAuth_E@, if the accepted socket's option is set and the client chooses not to provide authentication information about itself, Calling this method overrides any previous setting made by this method or @B_javax#net#ssl#SSLServerSocket#setWantClientAuth_E@. The initial inherited setting may be overridden by calling @B_javax#net#ssl#SSLSocket#setNeedClientAuth_E@ or @B_javax#net#ssl#SSLSocket#setWantClientAuth_E@.", "history": "Added in API level 1", "FullName": "public abstract void setNeedClientAuth (boolean need)"}, "setEnabledCipherSuites(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Names of all the cipher suites to enable"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "when one or more of ciphers named by the parameter is not supported, or when the parameter is null."]], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getSupportedCipherSuites_E@", "@B_javax#net#ssl#SSLServerSocket#getEnabledCipherSuites_E@"], "Permissions": [], "Description": "Sets the cipher suites enabled for use by accepted connections. The cipher suites must have been listed by getSupportedCipherSuites() as being supported. Following a successful call to this method, only suites listed in the suites parameter are enabled for use. Suites that require authentication information which is not available in this ServerSocket's authentication context will not be used in any case, even if they are enabled. SSLSockets returned from accept() inherit this setting.", "history": "Added in API level 1", "FullName": "public abstract void setEnabledCipherSuites (String[] suites)"}, "SSLServerSocket(int, int)": {"Returns": [], "Parameters": [["int", "int: the port on which to listen"], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "added in API level 1", "FullName": "protected SSLServerSocket (int port, int backlog)"}, "SSLServerSocket(int,int)": {"Returns": [], "Parameters": [["int", "int: the port on which to listen"], ["int", "int: requested maximum length of the queue of incoming connections."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkListen method doesn't allow the operation."], ["@B_java#lang#IllegalArgumentException_E@", "if the port parameter is outside the specified range of valid port values, which is between 0 and 65535, inclusive."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkListen_E@"], "Permissions": [], "Description": "Used only by subclasses. Create a TCP server socket on a port, using the default authentication context and a specified backlog of connections. A port number of 0 creates a socket on any free port. The backlog argument is the requested maximum number of pending connections on the socket. Its exact semantics are implementation specific. In particular, an implementation may impose a maximum length or may choose to ignore the parameter altogther. The value provided should be greater than 0. If it is less than or equal to 0, then an implementation specific default will be used. If there is a security manager, its checkListen method is called with the port argument as its argument to ensure the operation is allowed. This could result in a SecurityException.", "history": "Added in API level 1", "FullName": "protected SSLServerSocket (int port, int backlog)"}, "getUseClientMode()": {"Returns": [["boolean", "true if the connection should use SSL client mode."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#setUseClientMode_E@"], "Permissions": [], "Description": "Returns true if accepted connections will be in SSL client mode.", "history": "Added in API level 1", "FullName": "public abstract boolean getUseClientMode ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this socket."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the implementation address and implementation port of this socket as a String. If there is a security manager set, its checkConnect method is called with the local address and -1 as its arguments to see if the operation is allowed. If the operation is not allowed, an InetAddress representing the @B_java#net#InetAddress#getLoopbackAddress_E@ address is returned as the implementation address.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getSSLParameters()": {"Returns": [["@B_javax#net#ssl#SSLParameters_E@", "the SSLParameters in effect for newly accepted connections"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#setSSLParameters_E@"], "Permissions": [], "Description": "Returns the SSLParameters in effect for newly accepted connections. The ciphersuites and protocols of the returned SSLParameters are always non-null.", "history": "Added in API level 24", "FullName": "public SSLParameters getSSLParameters ()"}, "setSSLParameters(javax.net.ssl.SSLParameters)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLParameters_E@", "SSLParameters: the parameters"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the setEnabledCipherSuites() or the setEnabledProtocols() call fails"]], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getSSLParameters_E@"], "Permissions": [], "Description": "Applies SSLParameters to newly accepted connections. This means: If params.getCipherSuites() is non-null, setEnabledCipherSuites() is called with that value. If params.getProtocols() is non-null, setEnabledProtocols() is called with that value. If params.getNeedClientAuth() or params.getWantClientAuth() return true, setNeedClientAuth(true) and setWantClientAuth(true) are called, respectively; otherwise setWantClientAuth(false) is called. If params.getServerNames() is non-null, the socket will configure its server names with that value. If params.getSNIMatchers() is non-null, the socket will configure its SNI matchers with that value.", "history": "Added in API level 24", "FullName": "public void setSSLParameters (SSLParameters params)"}, "getEnabledCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "an array of cipher suites enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getSupportedCipherSuites_E@", "@B_javax#net#ssl#SSLServerSocket#setEnabledCipherSuites_E@"], "Permissions": [], "Description": "Returns the list of cipher suites which are currently enabled for use by newly accepted connections. If this list has not been explicitly modified, a system-provided default guarantees a minimum quality of service in all enabled cipher suites. There are several reasons why an enabled cipher suite might not actually be used. For example: the server socket might not have appropriate private keys available to it or the cipher suite might be anonymous, precluding the use of client authentication, while the server socket has been told to require that sort of authentication.", "history": "Added in API level 1", "FullName": "public abstract String[] getEnabledCipherSuites ()"}, "getSupportedCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "an array of cipher suite names"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLServerSocket#getEnabledCipherSuites_E@", "@B_javax#net#ssl#SSLServerSocket#setEnabledCipherSuites_E@"], "Permissions": [], "Description": "Returns the names of the cipher suites which could be enabled for use on an SSL connection. Normally, only a subset of these will actually be enabled by default, since this list may include cipher suites which do not meet quality of service requirements for those defaults. Such cipher suites are useful in specialized applications. Applications should not blindly enable all supported cipher suites. The supported cipher suites can include signaling cipher suite values that can cause connection problems if enabled inappropriately. The proper way to use this method is to either check if a specific cipher suite is supported via Arrays.asList(getSupportedCipherSuites()).contains(...) or to filter a desired list of cipher suites to only the supported ones via desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites())).", "history": "Added in API level 1", "FullName": "public abstract String[] getSupportedCipherSuites ()"}}, "Inheritance": ["@B_java#net#ServerSocket_E@"], "ClassName": "javax.net.ssl.SSLServerSocket", "ClassDesc": "This class extends ServerSockets and provides secure server sockets using protocols such as the Secure Sockets Layer (SSL) or Transport Layer Security (TLS) protocols. Instances of this class are generally created using a SSLServerSocketFactory. The primary function of SSLServerSockets is to create SSLSockets by accepting connections. SSLServerSockets contain several pieces of state data which are inherited by the SSLSocket at socket creation. These include the enabled cipher suites and protocols, whether client authentication is necessary, and whether created sockets should begin handshaking in client or server mode. The state inherited by the created SSLSocket can be overriden by calling the appropriate methods."}