{"Functions": {"quitSafely()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Quits the looper safely. Causes the @B_android#os#Looper#loop_E@ method to terminate as soon as all remaining messages in the message queue that are already due to be delivered have been handled. However pending delayed messages with due times in the future will not be delivered before the loop terminates. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example, the @B_android#os#Handler#sendMessage_E@ method will return false.", "history": "Added in API level 18", "FullName": "public void quitSafely ()"}, "isCurrentThread()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current thread is this looper's thread.", "history": "Added in API level 23", "FullName": "public boolean isCurrentThread ()"}, "getMainLooper()": {"Returns": [["@B_android#os#Looper_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the application's main looper, which lives in the main thread of the application.", "history": "Added in API level 1", "FullName": "public static Looper getMainLooper ()"}, "setMessageLogging(android.util.Printer)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer: A Printer object that will receive log messages, or null to disable message logging. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control logging of messages as they are processed by this Looper. If enabled, a log message will be written to", "history": "Added in API level 1", "FullName": "public void setMessageLogging (Printer printer)"}, "dump(android.util.Printer,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer: A printer to receive the contents of the dump. This value must never be null."], ["@B_java#lang#String_E@", "String: A prefix to prepend to each line which is printed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dumps the state of the looper for debugging purposes.", "history": "Added in API level 1", "FullName": "public void dump (Printer pw, String prefix)"}, "myQueue()": {"Returns": [["@B_android#os#MessageQueue_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#os#MessageQueue_E@ object associated with the current thread. This must be called from a thread running a Looper, or a NullPointerException will be thrown.", "history": "Added in API level 1", "FullName": "public static MessageQueue myQueue ()"}, "dump(android.util.Printer, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer: A printer to receive the contents of the dump.This value must never be null."], ["@B_java#lang#String_E@", "String: A prefix to prepend to each line which is printed. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dumps the state of the looper for debugging purposes.", "history": "added in API level 1", "FullName": "public void dump (Printer pw, String prefix)"}, "loop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Run the message queue in this thread. Be sure to call @B_android#os#Looper#quit_E@ to end the loop.", "history": "Added in API level 1", "FullName": "public static void loop ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "quit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Looper#quitSafely_E@"], "Permissions": [], "Description": "Quits the looper. Causes the @B_android#os#Looper#loop_E@ method to terminate without processing any more messages in the message queue. Any attempt to post messages to the queue after the looper is asked to quit will fail. For example, the @B_android#os#Handler#sendMessage_E@ method will return false. Using this method may be unsafe because some messages may not be delivered before the looper terminates. Consider using @B_android#os#Looper#quitSafely_E@ instead to ensure that all pending work is completed in an orderly manner.", "history": "Added in API level 1", "FullName": "public void quit ()"}, "myLooper()": {"Returns": [["@B_android#os#Looper_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Looper object associated with the current thread. Returns null if the calling thread is not associated with a Looper.", "history": "Added in API level 1", "FullName": "public static Looper myLooper ()"}, "prepareMainLooper()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the current thread as a looper, marking it as an application's main looper. The main looper for your application is created by the Android environment, so you should never need to call this function yourself. See also: @B_android#os#Looper#prepare_E@", "history": "Added in API level 1", "FullName": "public static void prepareMainLooper ()"}, "getThread()": {"Returns": [["@B_java#lang#Thread_E@", "The looper's thread. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Thread associated with this Looper.", "history": "Added in API level 3", "FullName": "public Thread getThread ()"}, "prepare()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the current thread as a looper. This gives you a chance to create handlers that then reference this looper, before actually starting the loop. Be sure to call @B_android#os#Looper#loop_E@ after calling this method, and end it by calling @B_android#os#Looper#quit_E@.", "history": "Added in API level 1", "FullName": "public static void prepare ()"}, "getQueue()": {"Returns": [["@B_android#os#MessageQueue_E@", "The looper's message queue. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets this looper's message queue.", "history": "Added in API level 23", "FullName": "public MessageQueue getQueue ()"}}, "Inheritance": [], "ClassName": "android.os.Looper", "ClassDesc": "Class used to run a message loop for a thread. Threads by default do not have a message loop associated with them; to create one, call @B_android#os#Looper#prepare_E@ in the thread that is to run the loop, and then @B_android#os#Looper#loop_E@ to have it process messages until the loop is stopped. Most interaction with a message loop is through the @B_android#os#Handler_E@ class. This is a typical example of the implementation of a Looper thread, using the separation of @B_android#os#Looper#prepare_E@ and @B_android#os#Looper#loop_E@ to create an initial Handler to communicate with the Looper."}