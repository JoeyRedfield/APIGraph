{"Functions": {"isIconifiedByDefault()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default iconified state of the search field.", "history": "Added in API level 29", "FullName": "public boolean isIconifiedByDefault ()"}, "setQuery(java.lang.CharSequence, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the query string. This replaces any query text already present in the text field."], ["boolean", "boolean: whether to submit the query right now or only update the contents of text field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a query string in the text field and optionally submits the query as well.", "history": "added in API level 11", "FullName": "public void setQuery (CharSequence query, boolean submit)"}, "getSuggestionsAdapter()": {"Returns": [["@B_android#widget#CursorAdapter_E@", "the suggestions adapter"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter used for suggestions, if any.", "history": "Added in API level 11", "FullName": "public CursorAdapter getSuggestionsAdapter ()"}, "SearchView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public SearchView (Context context, AttributeSet attrs)"}, "getQueryHint()": {"Returns": [["@B_java#lang#CharSequence_E@", "the displayed query hint text, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the hint text that will be displayed in the query text field. The displayed query hint is chosen in the following order:", "history": "Added in API level 16", "FullName": "public CharSequence getQueryHint ()"}, "isIconfiedByDefault()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#widget#SearchView#isIconifiedByDefault_E@ Returns the default iconified state of the search field.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public boolean isIconfiedByDefault ()"}, "setSearchableInfo(android.app.SearchableInfo)": {"Returns": [], "Parameters": [["@B_android#app#SearchableInfo_E@", "SearchableInfo: a SearchableInfo can be retrieved from the SearchManager, for a specific activity or a global search provider."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the SearchableInfo for this SearchView. Properties in the SearchableInfo are used to display labels, hints, suggestions, create intents for launching search results screens and controlling other affordances such as a voice button.", "history": "Added in API level 11", "FullName": "public void setSearchableInfo (SearchableInfo searchable)"}, "setIconifiedByDefault(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: whether the search field should be iconified by default"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the default or resting state of the search field. If true, a single search icon is shown by default and expands to show the text field and other buttons when pressed. Also, if the default state is iconified, then it collapses to that state when the close button is pressed. Changes to this property will take effect immediately. The default value is true.", "history": "Added in API level 11", "FullName": "public void setIconifiedByDefault (boolean iconified)"}, "SearchView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public SearchView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "setQueryHint(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the hint text to display or null to clear This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the hint text to display in the query text field. This overrides any hint specified in the @B_android#app#SearchableInfo_E@. This value may be specified as an empty string to prevent any query hint from being displayed.", "history": "Added in API level 11", "FullName": "public void setQueryHint (CharSequence hint)"}, "isIconified()": {"Returns": [["boolean", "true if the SearchView is currently iconified, false if the search field is fully visible."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current iconified state of the SearchView.", "history": "Added in API level 11", "FullName": "public boolean isIconified ()"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled here, or false if not."]], "Parameters": [["int", "int: This is the keycode of the typed key, and is the same value as found in the KeyEvent parameter."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The complete event record for the typed key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles the key down event for dealing with action keys.", "history": "Added in API level 11", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "getQuery()": {"Returns": [["@B_java#lang#CharSequence_E@", "the query string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the query string currently in the text field.", "history": "Added in API level 11", "FullName": "public CharSequence getQuery ()"}, "onActionViewCollapsed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this view is collapsed as an action view. See @B_android#view#MenuItem#collapseActionView_E@.", "history": "Added in API level 14", "FullName": "public void onActionViewCollapsed ()"}, "setSubmitButtonEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to show a submit button for submitting queries, false if a submit button is not required."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables showing a submit button when the query is non-empty. In cases where the SearchView is being used to filter the contents of the current activity and doesn't launch a separate results activity, then the submit button should be disabled.", "history": "Added in API level 11", "FullName": "public void setSubmitButtonEnabled (boolean enabled)"}, "isSubmitButtonEnabled()": {"Returns": [["boolean", "whether the submit button is enabled automatically when necessary"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the submit button is enabled when necessary or never displayed.", "history": "Added in API level 11", "FullName": "public boolean isSubmitButtonEnabled ()"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "Added in API level 11", "FullName": "public void onWindowFocusChanged (boolean hasWindowFocus)"}, "setIconified(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a true value will collapse the SearchView to an icon, while a false will expand it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Iconifies or expands the SearchView. Any query text is cleared when iconified. This is a temporary state and does not override the default iconified state set by @B_android#widget#SearchView#setIconifiedByDefault_E@. If the default state is iconified, then a false here will only be valid until the user closes the field. And if the default state is expanded, then a true here will only clear the text field and not close it.", "history": "Added in API level 11", "FullName": "public void setIconified (boolean iconify)"}, "getImeOptions()": {"Returns": [["int", "the ime options"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeOptions_E@"], "Permissions": [], "Description": "Returns the IME options set on the query text field.", "history": "Added in API level 16", "FullName": "public int getImeOptions ()"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setOnQueryTextListener(android.widget.SearchView.OnQueryTextListener)": {"Returns": [], "Parameters": [["@B_android#widget#SearchView#OnQueryTextListener_E@", "SearchView.OnQueryTextListener: the listener object that receives callbacks when the user performs actions in the SearchView such as clicking on buttons or typing a query."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener for user actions within the SearchView.", "history": "Added in API level 11", "FullName": "public void setOnQueryTextListener (SearchView.OnQueryTextListener listener)"}, "setImeOptions(int)": {"Returns": [], "Parameters": [["int", "int: the options to set on the query text field"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setImeOptions_E@"], "Permissions": [], "Description": "Sets the IME options on the query text field.", "history": "Added in API level 14", "FullName": "public void setImeOptions (int imeOptions)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "setOnSearchClickListener(android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: the listener to inform when the search button is clicked or the text field is programmatically de-iconified."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener to inform when the search button is pressed. This is only relevant when the text field is not visible by default. Calling @B_android#widget#SearchView#setIconified_E@ can also cause this listener to be informed.", "history": "Added in API level 11", "FullName": "public void setOnSearchClickListener (View.OnClickListener listener)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "SearchView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public SearchView (Context context, AttributeSet attrs, int defStyleAttr)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void onDetachedFromWindow ()"}, "SearchView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public SearchView (Context context)"}, "setOnQueryTextFocusChangeListener(android.view.View.OnFocusChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnFocusChangeListener_E@", "View.OnFocusChangeListener: the listener to inform of focus changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener to inform when the focus of the query text field changes.", "history": "Added in API level 11", "FullName": "public void setOnQueryTextFocusChangeListener (View.OnFocusChangeListener listener)"}, "getMaxWidth()": {"Returns": [["int", "the maximum width of the view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the specified maximum width in pixels, if set. Returns zero if no maximum width was specified.", "history": "Added in API level 16", "FullName": "public int getMaxWidth ()"}, "setQueryRefinementEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if all items should have a query refinement button, false if only those items that have a query refinement flag set should have the button."]], "Throws": [], "SeeAlso": ["@B_android#app#SearchManager_E@"], "Permissions": [], "Description": "Specifies if a query refinement button should be displayed alongside each suggestion or if it should depend on the flags set in the individual items retrieved from the suggestions provider. Clicking on the query refinement button will replace the text in the query text field with the text from the suggestion. This flag only takes effect if a SearchableInfo has been specified with @B_android#widget#SearchView#setSearchableInfo_E@ and not when using a custom adapter.", "history": "Added in API level 11", "FullName": "public void setQueryRefinementEnabled (boolean enable)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#SearchView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void onRestoreInstanceState (Parcelable state)"}, "setOnCloseListener(android.widget.SearchView.OnCloseListener)": {"Returns": [], "Parameters": [["@B_android#widget#SearchView#OnCloseListener_E@", "SearchView.OnCloseListener: the listener to call when the user closes the SearchView."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener to inform when the user closes the SearchView.", "history": "Added in API level 11", "FullName": "public void setOnCloseListener (SearchView.OnCloseListener listener)"}, "setOnSuggestionListener(android.widget.SearchView.OnSuggestionListener)": {"Returns": [], "Parameters": [["@B_android#widget#SearchView#OnSuggestionListener_E@", "SearchView.OnSuggestionListener: the listener to inform of suggestion selection events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener to inform when a suggestion is focused or clicked.", "history": "Added in API level 11", "FullName": "public void setOnSuggestionListener (SearchView.OnSuggestionListener listener)"}, "setMaxWidth(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the view at most this many pixels wide", "history": "Added in API level 11", "FullName": "public void setMaxWidth (int maxpixels)"}, "isQueryRefinementEnabled()": {"Returns": [["boolean", "true if enabled for all items, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether query refinement is enabled for all items or only specific ones.", "history": "Added in API level 11", "FullName": "public boolean isQueryRefinementEnabled ()"}, "setSuggestionsAdapter(android.widget.CursorAdapter)": {"Returns": [], "Parameters": [["@B_android#widget#CursorAdapter_E@", "CursorAdapter no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#widget#SearchView#setSearchableInfo_E@"], "Permissions": [], "Description": "You can set a custom adapter if you wish. Otherwise the default adapter is used to display the suggestions from the suggestions provider associated with the SearchableInfo.", "history": "Added in API level 11", "FullName": "public void setSuggestionsAdapter (CursorAdapter adapter)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "true if the event was handled here, or false if not."]], "Parameters": [["int", "int: This is the keycode of the typed key, and is the same value as found in the KeyEvent parameter."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The complete event record for the typed key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles the key down event for dealing with action keys.", "history": "added in API level 11", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected Parcelable onSaveInstanceState ()"}, "setQuery(java.lang.CharSequence,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the query string. This replaces any query text already present in the text field."], ["boolean", "boolean: whether to submit the query right now or only update the contents of text field."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a query string in the text field and optionally submits the query as well.", "history": "Added in API level 11", "FullName": "public void setQuery (CharSequence query, boolean submit)"}, "getInputType()": {"Returns": [["int", "the input type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input type set on the query text field.", "history": "Added in API level 16", "FullName": "public int getInputType ()"}, "onRtlPropertiesChanged(int)": {"Returns": [], "Parameters": [["int", "the direction of the layout"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when any RTL property (layout direction or text direction or text alignment) has been changed. Subclasses need to override this method to take care of cached information that depends on the resolved layout direction, or to inform child views that inherit their layout direction. The default implementation does nothing.", "history": "Added in API level 17", "FullName": "public void onRtlPropertiesChanged (int layoutDirection)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "setInputType(int)": {"Returns": [], "Parameters": [["int", "int: the input type to set on the query text field"]], "Throws": [], "SeeAlso": ["@B_android#widget#TextView#setInputType_E@"], "Permissions": [], "Description": "Sets the input type on the query text field.", "history": "Added in API level 14", "FullName": "public void setInputType (int inputType)"}, "onActionViewExpanded()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when this view is expanded as an action view. See @B_android#view#MenuItem#expandActionView_E@.", "history": "Added in API level 14", "FullName": "public void onActionViewExpanded ()"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.SearchView", "ClassDesc": "A widget that provides a user interface for the user to enter a search query and submit a request to a search provider. Shows a list of query suggestions or results, if available, and allows the user to pick a suggestion or result to launch into. When the SearchView is used in an ActionBar as an action view for a collapsible menu item, it needs to be set to iconified by default using @B_android#widget#SearchView#setIconifiedByDefault_E@. This is the default, so nothing needs to be done. If you want the search field to always be visible, then call setIconifiedByDefault(false)."}