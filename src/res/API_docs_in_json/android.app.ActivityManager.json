{"Functions": {"getProcessMemoryInfo(int[])": {"Returns": [["@B_android#os#Debug#MemoryInfo_E@", "Returns an array of memory information, one for each requested pid."]], "Parameters": [["int[]", "int: The pids of the processes whose memory usage is to be retrieved."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return information about the memory usage of one or more processes. As of @B_android#os#Build#VERSION_CODES#Q_E@, for regular apps this method will only return information about the memory info for the processes running as the caller's uid; no other process memory info is available and will be zero. Also of @B_android#os#Build#VERSION_CODES#Q_E@ the sample rate allowed by this API is significantly limited, if called faster the limit you will receive the same data as the previous call.", "history": "Added in API level 5", "FullName": "public MemoryInfo[] getProcessMemoryInfo (int[] pids)"}, "getAppTaskThumbnailSize()": {"Returns": [["@B_android#util#Size_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current design dimensions for @B_android#app#ActivityManager#AppTask_E@ thumbnails, for use with @B_android#app#ActivityManager#addAppTask_E@.", "history": "Added in API level 21", "FullName": "public Size getAppTaskThumbnailSize ()"}, "isLowRamDevice()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this is a low-RAM device. Exactly whether a device is low-RAM is ultimately up to the device configuration, but currently it generally means something with 1GB or less of RAM. This is mostly intended to be used by apps to determine whether they should turn off certain features that require more RAM.", "history": "Added in API level 19", "FullName": "public boolean isLowRamDevice ()"}, "getRunningAppProcesses()": {"Returns": [["@B_java#util#List_E@", "Returns a list of RunningAppProcessInfo records, or null if there are no running processes (it will not return an empty list). This list ordering is not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of application processes that are running on the device.", "history": "Added in API level 3", "FullName": "public List<ActivityManager.RunningAppProcessInfo> getRunningAppProcesses ()"}, "getLargeMemoryClass()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the approximate per-application memory class of the current device when an application is running with a large heap. This is the space available for memory-intensive applications; most applications should not need this amount of memory, and should instead stay with the @B_android#app#ActivityManager#getMemoryClass_E@ limit. The returned value is in megabytes. This may be the same size as @B_android#app#ActivityManager#getMemoryClass_E@ on memory constrained devices, or it may be significantly larger on devices with a large amount of available RAM. This is the size of the application's Dalvik heap if it has specified android:largeHeap=\"true\" in its manifest.", "history": "Added in API level 11", "FullName": "public int getLargeMemoryClass ()"}, "getMemoryInfo(android.app.ActivityManager.MemoryInfo)": {"Returns": [], "Parameters": [["@B_android#app#ActivityManager#MemoryInfo_E@", "ActivityManager.MemoryInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return general information about the memory state of the system. This can be used to help decide how to manage your own memory, though note that polling is not recommended and @B_android#content#ComponentCallbacks2#onTrimMemory_E@ is the preferred way to do this. Also see @B_android#app#ActivityManager#getMyMemoryState_E@ for how to retrieve the current trim level of your process as needed, which gives a better hint for how to manage its memory.", "history": "Added in API level 1", "FullName": "public void getMemoryInfo (ActivityManager.MemoryInfo outInfo)"}, "setWatchHeapLimit(long)": {"Returns": [], "Parameters": [["long", "long: The size in bytes to set the limit at."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request that the system start watching for the calling process to exceed a pss size as given here. Once called, the system will look for any occasions where it sees the associated process with a larger pss size and, when this happens, automatically pull a heap dump from it and allow the user to share the data. Note that this request continues running even if the process is killed and restarted. To remove the watch, use @B_android#app#ActivityManager#clearWatchHeapLimit_E@. This API only works if the calling process has been marked as @B_android#content#pm#ApplicationInfo#FLAG_DEBUGGABLE_E@ or this is running on a debuggable (userdebug or eng) build. Callers can optionally implement @B_android#app#ActivityManager#ACTION_REPORT_HEAP_LIMIT_E@ to directly handle heap limit reports themselves.", "history": "Added in API level 23", "FullName": "public void setWatchHeapLimit (long pssSize)"}, "getMemoryClass()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the approximate per-application memory class of the current device. This gives you an idea of how hard a memory limit you should impose on your application to let the overall system work best. The returned value is in megabytes; the baseline Android memory class is 16 (which happens to be the Java heap limit of those devices); some devices with more memory may return 24 or even higher numbers.", "history": "Added in API level 5", "FullName": "public int getMemoryClass ()"}, "isInLockTaskMode()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startLockTask_E@"], "Permissions": [], "Description": "Use @B_android#app#ActivityManager#getLockTaskModeState_E@ instead. Return whether currently in lock task mode. When in this mode no new tasks can be created or switched to.", "history": "Added in API level 21 Deprecated in API level 23", "FullName": "public boolean isInLockTaskMode ()"}, "addAppTask(android.app.Activity,android.content.Intent,android.app.ActivityManager.TaskDescription,android.graphics.Bitmap)": {"Returns": [["int", "Returns the task id of the newly added app task, or -1 if the add failed. The most likely cause of failure is that there is no more room for more tasks for your app."]], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity that is adding the entry. This is used to help determine the context that the new recents entry will be in. This value must never be null."], ["@B_android#content#Intent_E@", "Intent: The Intent that describes the recents entry. This is the same Intent that you would have used to launch the activity for it. In generally you will want to set both @B_android#content#Intent#FLAG_ACTIVITY_NEW_DOCUMENT_E@ and @B_android#content#Intent#FLAG_ACTIVITY_RETAIN_IN_RECENTS_E@; the latter is required since this recents entry will exist without an activity, so it doesn't make sense to not retain it when its activity disappears. The given Intent here also must have an explicit ComponentName set on it. This value must never be null."], ["@B_android#app#ActivityManager#TaskDescription_E@", "ActivityManager.TaskDescription: Optional additional description information. This value may be null."], ["@B_android#graphics#Bitmap_E@", "Bitmap: Thumbnail to use for the recents entry. Should be the size given by @B_android#app#ActivityManager#getAppTaskThumbnailSize_E@. If the bitmap is not that exact size, it will be recreated in your process, probably in a way you don't like, before the recents entry is added. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new @B_android#app#ActivityManager#AppTask_E@ for the calling application. This will create a new recents entry that is added to the", "history": "Added in API level 21", "FullName": "public int addAppTask (Activity activity, Intent intent, ActivityManager.TaskDescription description, Bitmap thumbnail)"}, "getRunningServiceControlPanel(android.content.ComponentName)": {"Returns": [["@B_android#app#PendingIntent_E@", "no returns description in source"]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName no parameter comment"]], "Throws": [["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a PendingIntent you can start to show a control panel for the given running service. If the service does not have a control panel, null is returned.", "history": "Added in API level 5", "FullName": "public PendingIntent getRunningServiceControlPanel (ComponentName service)"}, "getLockTaskModeState()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#startLockTask_E@"], "Permissions": [], "Description": "Return the current state of task locking. The three possible outcomes are @B_android#app#ActivityManager#LOCK_TASK_MODE_NONE_E@, @B_android#app#ActivityManager#LOCK_TASK_MODE_LOCKED_E@ and @B_android#app#ActivityManager#LOCK_TASK_MODE_PINNED_E@.", "history": "Added in API level 23", "FullName": "public int getLockTaskModeState ()"}, "getAppTasks()": {"Returns": [["@B_java#util#List_E@", "The list of tasks associated with the application making this call."]], "Parameters": [], "Throws": [["", "java.lang.SecurityException"]], "SeeAlso": [], "Permissions": [], "Description": "Get the list of tasks associated with the calling application.", "history": "Added in API level 21", "FullName": "public List<ActivityManager.AppTask> getAppTasks ()"}, "isUserAMonkey()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns \"true\" if the user interface is currently being messed with by a monkey.", "history": "Added in API level 8", "FullName": "public static boolean isUserAMonkey ()"}, "clearWatchHeapLimit()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear a heap watch limit previously set by @B_android#app#ActivityManager#setWatchHeapLimit_E@.", "history": "Added in API level 23", "FullName": "public void clearWatchHeapLimit ()"}, "getRecentTasks(int,int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of RecentTaskInfo records describing each of the recent tasks."]], "Parameters": [["int", "int: The maximum number of entries to return in the list. The actual number returned may be smaller, depending on how many tasks the user has started and the maximum number the system can remember."], ["int", "int: Information about what to return. May be any combination of @B_android#app#ActivityManager#RECENT_WITH_EXCLUDED_E@ and @B_android#app#ActivityManager#RECENT_IGNORE_UNAVAILABLE_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "As of @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks (though see @B_android#app#ActivityManager#getAppTasks_E@ for the correct supported way to retrieve that information), and possibly some other tasks such as home that are known to not be sensitive. Return a list of the tasks that the user has recently launched, with the most recent being first and older ones after in order. not supported, and will likely break in the future. For example, if multiple applications can be actively running at the same time, assumptions made about the meaning of the data here for purposes of control flow will be incorrect.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public List<ActivityManager.RecentTaskInfo> getRecentTasks (int maxNum, int flags)"}, "setVrThread(int)": {"Returns": [], "Parameters": [["int", "int: tid of the VR thread"]], "Throws": [], "SeeAlso": ["@B_android#os#Process#myTid_E@"], "Permissions": [], "Description": "Enable more aggressive scheduling for latency-sensitive low-runtime VR threads. Only one thread can be a VR thread in a process at a time, and that thread may be subject to restrictions on the amount of time it can run. If persistent VR mode is set, whatever thread has been granted aggressive scheduling via this method will return to normal operation, and calling this method will do nothing while persistent VR mode is enabled. To reset the VR thread for an application, a tid of 0 can be passed.", "history": "Added in API level 25", "FullName": "public static void setVrThread (int tid)"}, "getProcessesInErrorState()": {"Returns": [["@B_java#util#List_E@", "Returns a list of ProcessErrorStateInfo records, or null if there are no current error conditions (it will not return an empty list). This list ordering is not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list of any processes that are currently in an error condition. The result will be null if all processes are running properly at this time.", "history": "Added in API level 1", "FullName": "public List<ActivityManager.ProcessErrorStateInfo> getProcessesInErrorState ()"}, "moveTaskToFront(int,int,android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The identifier of the task to be moved, as found in @B_android#app#ActivityManager#RunningTaskInfo_E@ or @B_android#app#ActivityManager#RecentTaskInfo_E@."], ["int", "int: Additional operational flags. Value is either 0 or a combination of @B_android#app#ActivityManager#MOVE_TASK_WITH_HOME_E@, and @B_android#app#ActivityManager#MOVE_TASK_NO_USER_ACTION_E@"], ["@B_android#os#Bundle_E@", "Bundle: Additional options for the operation, either null or as per @B_android#content#Context#startActivity_E@."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#REORDER_TASKS_E@"], "Description": "Ask that the task associated with a given task ID be moved to the front of the stack, so it is now visible to the user. Requires @B_android#Manifest#permission#REORDER_TASKS_E@", "history": "Added in API level 16", "FullName": "public void moveTaskToFront (int taskId, int flags, Bundle options)"}, "isRunningInTestHarness()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "this method is false for all user builds. Users looking to check if their device is running in a device farm should see @B_android#app#ActivityManager#isRunningInUserTestHarness_E@. Returns \"true\" if device is running in a test harness.", "history": "Added in API level 11 Deprecated in API level 29", "FullName": "public static boolean isRunningInTestHarness ()"}, "isRunningInUserTestHarness()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns \"true\" if the device is running in Test Harness Mode. Test Harness Mode is a feature that allows devices to run without human interaction in a device farm/testing harness (such as Firebase Test Lab). You should check this method if you want your app to behave differently when running in a test harness to skip setup screens that would impede UI testing. e.g. a keyboard application that has a full screen setup page for the first time it is launched. Note that you should not use this to determine whether or not your app is running an instrumentation test, as it is not set for a standard device running a test.", "history": "Added in API level 29", "FullName": "public static boolean isRunningInUserTestHarness ()"}, "killBackgroundProcesses(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the package whose processes are to be killed."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#KILL_BACKGROUND_PROCESSES_E@"], "Description": "Have the system immediately kill all background processes associated with the given package. This is the same as the kernel killing those processes to reclaim memory; the system will take care of restarting these processes in the future as needed. Requires @B_android#Manifest#permission#KILL_BACKGROUND_PROCESSES_E@", "history": "Added in API level 8", "FullName": "public void killBackgroundProcesses (String packageName)"}, "isActivityStartAllowedOnDisplay(android.content.Context,int,android.content.Intent)": {"Returns": [["boolean", "true if a call to start an activity on the target display is allowed for the provided context and no @B_java#lang#SecurityException_E@ will be thrown, false otherwise."]], "Parameters": [["@B_android#content#Context_E@", "Context: Source context, from which an activity will be started. This value must never be null."], ["int", "int: Target display id."], ["@B_android#content#Intent_E@", "Intent: Intent used to launch an activity. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#app#ActivityOptions#setLaunchDisplayId_E@", "_E@"], "Permissions": [], "Description": "Check if the context is allowed to start an activity on specified display. Some launch restrictions may apply to secondary displays that are private, virtual, or owned by the system, in which case an activity start may throw a @B_java#lang#SecurityException_E@. Call this method prior to starting an activity on a secondary display to check if the current context has access to it.", "history": "Added in API level 29", "FullName": "public boolean isActivityStartAllowedOnDisplay (Context context, int displayId, Intent intent)"}, "moveTaskToFront(int,int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the task to be moved, as found in @B_android#app#ActivityManager#RunningTaskInfo_E@ or @B_android#app#ActivityManager#RecentTaskInfo_E@."], ["int", "int: Additional operational flags. Value is either 0 or a combination of @B_android#app#ActivityManager#MOVE_TASK_WITH_HOME_E@, and @B_android#app#ActivityManager#MOVE_TASK_NO_USER_ACTION_E@"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#REORDER_TASKS_E@"], "Description": "Equivalent to calling @B_android#app#ActivityManager#moveTaskToFront_E@ with a null options argument. Requires @B_android#Manifest#permission#REORDER_TASKS_E@", "history": "Added in API level 11", "FullName": "public void moveTaskToFront (int taskId, int flags)"}, "getRunningTasks(int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of RunningTaskInfo records describing each of the running tasks."]], "Parameters": [["int", "int: The maximum number of entries to return in the list. The actual number returned may be smaller, depending on how many tasks the user has started."]], "Throws": [["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "As of @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak person information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks, and possibly some other tasks such as home that are known to not be sensitive. Return a list of the tasks that are currently running, with the most recent being first and older ones after in order. Note that \"running\" does not mean any of the task's code is currently loaded or activity -- the task may have been frozen by the system, so that it can be restarted in its previous state when next brought to the foreground. not supported, and will likely break in the future. For example, if multiple applications can be actively running at the same time, assumptions made about the meaning of the data here for purposes of control flow will be incorrect.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public List<ActivityManager.RunningTaskInfo> getRunningTasks (int maxNum)"}, "getDeviceConfigurationInfo()": {"Returns": [["@B_android#content#pm#ConfigurationInfo_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the device configuration attributes.", "history": "Added in API level 3", "FullName": "public ConfigurationInfo getDeviceConfigurationInfo ()"}, "restartPackage(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is now just a wrapper for @B_android#app#ActivityManager#killBackgroundProcesses_E@; the previous behavior here is no longer available to applications because it allows them to break other applications by removing their alarms, stopping their services, etc.", "history": "Added in API level 3 Deprecated in API level 15", "FullName": "public void restartPackage (String packageName)"}, "getRecentTasks(int, int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of RecentTaskInfo records describing each of the recent tasks."]], "Parameters": [["int", "int: The maximum number of entries to return in the list. The actual number returned may be smaller, depending on how many tasks the user has started and the maximum number the system can remember."], ["int", "int: Information about what to return. May be any combination of @B_android#app#ActivityManager#RECENT_WITH_EXCLUDED_E@ and @B_android#app#ActivityManager#RECENT_IGNORE_UNAVAILABLE_E@."]], "Throws": [["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "As of @B_android#os#Build#VERSION_CODES#LOLLIPOP_E@, this method is no longer available to third party applications: the introduction of document-centric recents means it can leak personal information to the caller. For backwards compatibility, it will still return a small subset of its data: at least the caller's own tasks (though see @B_android#app#ActivityManager#getAppTasks_E@ for the correct supported way to retrieve that information), and possibly some other tasks such as home that are known to not be sensitive. Return a list of the tasks that the user has recently launched, with the most recent being first and older ones after in order. not supported, and will likely break in the future. For example, if multiple applications can be actively running at the same time, assumptions made about the meaning of the data here for purposes of control flow will be incorrect.", "history": "added in API level 1", "FullName": "public List<ActivityManager.RecentTaskInfo> getRecentTasks (int maxNum, int flags)"}, "getMyMemoryState(android.app.ActivityManager.RunningAppProcessInfo)": {"Returns": [], "Parameters": [["@B_android#app#ActivityManager#RunningAppProcessInfo_E@", "ActivityManager.RunningAppProcessInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return global memory state information for the calling process. This does not fill in all fields of the @B_android#app#ActivityManager#RunningAppProcessInfo_E@. The only fields that will be filled in are @B_android#app#ActivityManager#RunningAppProcessInfo#pid_E@, @B_android#app#ActivityManager#RunningAppProcessInfo#uid_E@, @B_android#app#ActivityManager#RunningAppProcessInfo#lastTrimLevel_E@, @B_android#app#ActivityManager#RunningAppProcessInfo#importance_E@, @B_android#app#ActivityManager#RunningAppProcessInfo#lru_E@, and @B_android#app#ActivityManager#RunningAppProcessInfo#importanceReasonCode_E@.", "history": "Added in API level 16", "FullName": "public static void getMyMemoryState (ActivityManager.RunningAppProcessInfo outState)"}, "moveTaskToFront(int, int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the task to be moved, as found in @B_android#app#ActivityManager#RunningTaskInfo_E@ or @B_android#app#ActivityManager#RecentTaskInfo_E@."], ["int", "int: Additional operational flags. Value is either 0 or combination of MOVE_TASK_WITH_HOME or MOVE_TASK_NO_USER_ACTION."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#REORDER_TASKS_E@"], "Description": "Equivalent to calling @B_android#app#ActivityManager#moveTaskToFront_E@ with a null options argument.Requires the @B_android#Manifest#permission#REORDER_TASKS_E@ permission.", "history": "added in API level 11", "FullName": "public void moveTaskToFront (int taskId, int flags)"}, "getRunningServices(int)": {"Returns": [["@B_java#util#List_E@", "Returns a list of RunningServiceInfo records describing each of the running tasks."]], "Parameters": [["int", "int: The maximum number of entries to return in the list. The actual number returned may be smaller, depending on how many services are running."]], "Throws": [["@B_java#lang#SecurityException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "As of @B_android#os#Build#VERSION_CODES#O_E@, this method is no longer available to third party applications. For backwards compatibility, it will still return the caller's own services. Return a list of the services that are currently running.", "history": "Added in API level 1 Deprecated in API level 26", "FullName": "public List<ActivityManager.RunningServiceInfo> getRunningServices (int maxNum)"}, "isBackgroundRestricted()": {"Returns": [["boolean", "true if user has enforced background restrictions for this app, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query whether the user has enabled background restrictions for this app. The user may chose to do this, if they see that an app is consuming an unreasonable amount of battery while in the background. If true, any work that the app tries to do will be aggressively restricted while it is in the background. At a minimum, jobs and alarms will not execute and foreground services cannot be started unless an app activity is in the foreground.", "history": "Added in API level 28", "FullName": "public boolean isBackgroundRestricted ()"}, "clearApplicationUserData()": {"Returns": [["boolean", "true if the application successfully requested that the application's data be erased; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Permits an application to erase its own data from disk. This is equivalent to the user choosing to clear the app's data from within the device settings UI. It erases all dynamic data associated with the app -- its private data and data in its private area on external storage -- but does not remove the installed application itself, nor any OBB files. It also revokes all runtime permissions that the app has acquired, clears all notifications and removes all Uri grants related to this application.", "history": "Added in API level 19", "FullName": "public boolean clearApplicationUserData ()"}, "dumpPackageState(java.io.FileDescriptor,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor that the dump should be written to. The file descriptor is not closed by this function; the caller continues to own it."], ["@B_java#lang#String_E@", "String: The name of the package that is to be dumped."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#DUMP_E@"], "Description": "Perform a system dump of various state associated with the given application package name. This call blocks while the dump is being performed, so should not be done on a UI thread. The data will be written to the given file descriptor as text. Requires @B_android#Manifest#permission#DUMP_E@", "history": "Added in API level 19", "FullName": "public void dumpPackageState (FileDescriptor fd, String packageName)"}, "getLauncherLargeIconDensity()": {"Returns": [["int", "density in terms of DPI"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the preferred density of icons for the launcher. This is used when custom drawables are created (e.g., for shortcuts).", "history": "Added in API level 11", "FullName": "public int getLauncherLargeIconDensity ()"}, "getLauncherLargeIconSize()": {"Returns": [["int", "dimensions of square icons in terms of pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the preferred launcher icon size. This is used when custom drawables are created (e.g., for shortcuts).", "history": "Added in API level 11", "FullName": "public int getLauncherLargeIconSize ()"}, "moveTaskToFront(int, int, android.os.Bundle)": {"Returns": [], "Parameters": [["int", "int: The identifier of the task to be moved, as found in @B_android#app#ActivityManager#RunningTaskInfo_E@ or @B_android#app#ActivityManager#RecentTaskInfo_E@."], ["int", "int: Additional operational flags.Value is either 0 or combination of MOVE_TASK_WITH_HOME or MOVE_TASK_NO_USER_ACTION."], ["@B_android#os#Bundle_E@", "Bundle: Additional options for the operation, either null or as per @B_android#content#Context#startActivity_E@."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#REORDER_TASKS_E@"], "Description": "Ask that the task associated with a given task ID be moved to the front of the stack, so it is now visible to the user.Requires the @B_android#Manifest#permission#REORDER_TASKS_E@ permission.", "history": "added in API level 16", "FullName": "public void moveTaskToFront (int taskId, int flags, Bundle options)"}}, "Inheritance": [], "ClassName": "android.app.ActivityManager", "ClassDesc": "This class gives information about, and interacts with, activities, services, and the containing process. A number of the methods in this class are for debugging or informational purposes and they should not be used to affect any runtime behavior of your app. These methods are called out as such in the method level documentation. Most application developers should not have the need to use this class, most of whose methods are for specialized use cases. However, a few methods are more broadly applicable. For instance, @B_android#app#ActivityManager#isLowRamDevice_E@ enables your app to detect whether it is running on a low-memory device, and behave accordingly. @B_android#app#ActivityManager#clearApplicationUserData_E@ is for apps with reset-data functionality. In some special use cases, where an app interacts with its Task stack, the app may use the @B_android#app#ActivityManager#AppTask_E@ and @B_android#app#ActivityManager#RecentTaskInfo_E@ inner classes. However, in general, the methods in this class should be used for testing and debugging purposes only."}