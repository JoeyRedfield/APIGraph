{"Functions": {"read(byte[])": {"Returns": [["", "The number of bytes returned or -1 if the end of stream has been reached."]], "Parameters": [["byte[]", "The byte array that will hold the contents from the stream."]], "Throws": [["@B_java#io#IOException_E@", "if an IO problem occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Read some bytes from the stream.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "ChunkedInputStream(org.apache.http.io.SessionInputBuffer)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ChunkedInputStream (SessionInputBuffer in)"}, "read(byte[], int, int)": {"Returns": [["", "The number of bytes returned or -1 if the end of stream has been reached."]], "Parameters": [["byte[]", "The byte array that will hold the contents from the stream."], ["int", "The offset into the byte array at which bytes will start to be placed."], ["int", "the maximum number of bytes that can be returned."]], "Throws": [["@B_java#io#IOException_E@", "if an IO problem occurs."]], "SeeAlso": ["@B_java#io#InputStream#read_E@"], "Permissions": [], "Description": "Read some bytes from the stream.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read()": {"Returns": [["", "-1 of the end of the stream has been reached or the next data byte"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an IO problem occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns all the data in a chunked stream in coalesced form. A chunk is followed by a CRLF. The method returns -1 as soon as a chunksize of 0 is detected. Trailer headers are read automcatically at the end of the stream and can be obtained with the getResponseFooters() method.", "history": "Added in API level 1", "FullName": "public int read ()"}, "getFooters()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Header[] getFooters ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an IO problem occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Upon close, this reads the remainder of the chunked message, leaving the underlying socket at a position to start reading the next response without scanning.", "history": "Added in API level 1", "FullName": "public void close ()"}}, "Inheritance": ["@B_java#io#InputStream_E@"], "ClassName": "org.apache.http.impl.io.ChunkedInputStream", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Implements chunked transfer coding. See Note that this class NEVER closes the underlying stream, even when close gets called. Instead, it will read until the \"end\" of its chunking on close, which allows for the seamless execution of subsequent HTTP 1.1 requests, while not requiring the client to remember to read the entire contents of the response."}