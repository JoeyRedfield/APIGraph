{"Functions": {"getTransferParameters()": {"Returns": [["@B_android#graphics#ColorSpace#Rgb#TransferParameters_E@", "An instance of @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@ or null if this color space's transfer functions do not match the equation defined in @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameters used by the @B_android#graphics#ColorSpace#Rgb#getEotf_E@ and @B_android#graphics#ColorSpace#Rgb#getOetf_E@ transfer functions. If the transfer functions do not match the ICC parametric curves defined in ICC.1:2004-10 (section 10.15), this method returns null. See @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@ for a full description of the transfer functions.", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb.TransferParameters getTransferParameters ()"}, "getMinValue(int)": {"Returns": [["float", "A floating point value less than @B_android#graphics#ColorSpace#getMaxValue_E@"]], "Parameters": [["int", "int: The index of the component Value is between 0 and 3 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum valid value for the specified component of this color space's color model.", "history": "Added in API level 26", "FullName": "public float getMinValue (int component)"}, "getTransform(float[])": {"Returns": [["float[]", "The destination array passed as a parameter"]], "Parameters": [["float[]", "float: The destination array, cannot be null, its length must be >= 9 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getInverseTransform_E@"], "Permissions": [], "Description": "Copies the transform of this color space in specified array. The transform is used to convert from RGB to XYZ (with the same white point as this color space). To connect color spaces, you must first @B_android#graphics#ColorSpace#adapt_E@ them to the same white point. It is recommended to use @B_android#graphics#ColorSpace#connect_E@ to convert between color spaces.", "history": "Added in API level 26", "FullName": "public float[] getTransform (float[] transform)"}, "getPrimaries(float[])": {"Returns": [["float[]", "The destination array passed as a parameter"]], "Parameters": [["float[]", "float: The destination array, cannot be null, its length must be >= 6 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getPrimaries_E@"], "Permissions": [], "Description": "Copies the primaries of this color space in specified array. The Y component is assumed to be 1 and is therefore not copied into the destination. The x and y components of the first primary are written in the array at positions 0 and 1 respectively.", "history": "Added in API level 26", "FullName": "public float[] getPrimaries (float[] primaries)"}, "ColorSpace.Rgb(java.lang.String, float[], double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1"], ["float[]", "float: 3x3 column-major transform matrix from RGB to the profile connection space CIE XYZ as an array of 9 floats, cannot be null"], ["double", "double: Gamma to use as the transfer function"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. Gamma is negative."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a 3x3 column-major transform matrix. The transform matrix must convert from the RGB space to the profile connection space CIE XYZ. The range of the color space is imposed to be \\([0..1]\\).", "history": "added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] toXYZ, double gamma)"}, "getTransform()": {"Returns": [["float[]", "A new array of 9 floats This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getInverseTransform_E@"], "Permissions": [], "Description": "Returns the transform of this color space as a new array. The transform is used to convert from RGB to XYZ (with the same white point as this color space). To connect color spaces, you must first @B_android#graphics#ColorSpace#adapt_E@ them to the same white point. It is recommended to use @B_android#graphics#ColorSpace#connect_E@ to convert between color spaces.", "history": "Added in API level 26", "FullName": "public float[] getTransform ()"}, "getWhitePoint(float[])": {"Returns": [["float[]", "The destination array passed as a parameter"]], "Parameters": [["float[]", "float: The destination array, cannot be null, its length must be >= 2 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getWhitePoint_E@"], "Permissions": [], "Description": "Copies the non-adapted CIE xyY white point of this color space in specified array. The Y component is assumed to be 1 and is therefore not copied into the destination. The x and y components are written in the array at positions 0 and 1 respectively.", "history": "Added in API level 26", "FullName": "public float[] getWhitePoint (float[] whitePoint)"}, "getMaxValue(int)": {"Returns": [["float", "A floating point value greater than @B_android#graphics#ColorSpace#getMinValue_E@"]], "Parameters": [["int", "int: The index of the component Value is between 0 and 3 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum valid value for the specified component of this color space's color model.", "history": "Added in API level 26", "FullName": "public float getMaxValue (int component)"}, "isSrgb()": {"Returns": [["boolean", "True if this color space is the sRGB color space (or a close approximation), false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this color space is the sRGB color space or equivalent to the sRGB color space. A color space is considered sRGB if it meets all the following conditions: Its color model is @B_android#graphics#ColorSpace#Model#RGB_E@. Its primaries are within 1e-3 of the true @B_android#graphics#ColorSpace#Named#SRGB_E@ primaries. Its white point is within 1e-3 of the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D65_E@. Its opto-electronic transfer function is not linear. Its electro-optical transfer function is not linear. Its transfer functions yield values within 1e-3 of @B_android#graphics#ColorSpace#Named#SRGB_E@. Its range is \\([0..1]\\). This method always returns true for @B_android#graphics#ColorSpace#Named#SRGB_E@.", "history": "Added in API level 26", "FullName": "public boolean isSrgb ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 26", "FullName": "public boolean equals (Object o)"}, "ColorSpace.Rgb(java.lang.String,float[],float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator,float,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: RGB primaries as an array of 6 (xy) or 9 (XYZ) floats This value must never be null."], ["float[]", "float: Reference white as an array of 2 (xy) or 3 (XYZ) floats This value must never be null."], ["@B_java#util#function#DoubleUnaryOperator_E@", "DoubleUnaryOperator: Opto-electronic transfer function, cannot be null This value must never be null."], ["@B_java#util#function#DoubleUnaryOperator_E@", "DoubleUnaryOperator: Electro-optical transfer function, cannot be null This value must never be null."], ["float", "float: The minimum valid value in this color space's RGB range"], ["float", "float: The maximum valid value in this color space's RGB range"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. The primaries array is null or has a length that is neither 6 or 9. The white point array is null or has a length that is neither 2 or 3. The OETF is null or the EOTF is null. The minimum valid value is >= the maximum valid value."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a specified set of primaries and a specified white point. The primaries and white point can be specified in the CIE xyY space or in CIE XYZ. The length of the arrays depends on the chosen space: When the primaries and/or white point are specified in xyY, the Y component does not need to be specified and is assumed to be 1.0. Only the xy components are required. The ID, areturned by @B_android#graphics#ColorSpace#getId_E@, of an object created by this constructor is always @B_android#graphics#ColorSpace#MIN_ID_E@.", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] primaries, float[] whitePoint, DoubleUnaryOperator oetf, DoubleUnaryOperator eotf, float min, float max)"}, "ColorSpace.Rgb(java.lang.String,float[],double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: 3x3 column-major transform matrix from RGB to the profile connection space CIE XYZ as an array of 9 floats, cannot be null This value must never be null."], ["double", "double: Gamma to use as the transfer function"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. Gamma is negative."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a 3x3 column-major transform matrix. The transform matrix must convert from the RGB space to the profile connection space CIE XYZ. The range of the color space is imposed to be \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] toXYZ, double gamma)"}, "isWideGamut()": {"Returns": [["boolean", "True if this color space is a wide-gamut color space, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this color space is a wide-gamut color space. An RGB color space is wide-gamut if its gamut entirely contains the @B_android#graphics#ColorSpace#Named#SRGB_E@ gamut and if the area of its gamut is 90% of greater than the area of the @B_android#graphics#ColorSpace#Named#NTSC_1953_E@ gamut.", "history": "Added in API level 26", "FullName": "public boolean isWideGamut ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "toXyz(float[])": {"Returns": [["float[]", "This value will never be null."]], "Parameters": [["float[]", "float: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a color value from this color space's model to tristimulus CIE XYZ values. If the color model of this color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, it is assumed that the target CIE XYZ space uses a @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ standard illuminant. The specified array's length must be at least equal to to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@.", "history": "Added in API level 26", "FullName": "public float[] toXyz (float[] v)"}, "fromLinear(float, float, float)": {"Returns": [["float[]", "A new array of 3 floats containing non-linear RGB valuesThis value will never be null."]], "Parameters": [["float", "float: The red component to encode from linear space"], ["float", "float: The green component to encode from linear space"], ["float", "float: The blue component to encode from linear space"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#fromLinear_E@", "@B_android#graphics#ColorSpace#Rgb#toLinear_E@"], "Permissions": [], "Description": "Encodes an RGB value from linear space to this color space's \"gamma space\". This is achieved by applying this color space's opto-electronic transfer function to the supplied values. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "added in API level 26", "FullName": "public float[] fromLinear (float r, float g, float b)"}, "getInverseTransform(float[])": {"Returns": [["float[]", "The destination array passed as a parameter"]], "Parameters": [["float[]", "float: The destination array, cannot be null, its length must be >= 9 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getTransform_E@"], "Permissions": [], "Description": "Copies the inverse transform of this color space in specified array. The inverse transform is used to convert from XYZ to RGB (with the same white point as this color space). To connect color spaces, you must first @B_android#graphics#ColorSpace#adapt_E@ them to the same white point. It is recommended to use @B_android#graphics#ColorSpace#connect_E@ to convert between color spaces.", "history": "Added in API level 26", "FullName": "public float[] getInverseTransform (float[] inverseTransform)"}, "ColorSpace.Rgb(java.lang.String,float[],float[],double)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: RGB primaries as an array of 6 (xy) or 9 (XYZ) floats This value must never be null."], ["float[]", "float: Reference white as an array of 2 (xy) or 3 (XYZ) floats This value must never be null."], ["double", "double: Gamma to use as the transfer function"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. The primaries array is null or has a length that is neither 6 or 9. The white point array is null or has a length that is neither 2 or 3. Gamma is negative."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a specified set of primaries and a specified white point. The primaries and white point can be specified in the CIE xyY space or in CIE XYZ. The length of the arrays depends on the chosen space: When the primaries and/or white point are specified in xyY, the Y component does not need to be specified and is assumed to be 1.0. Only the xy components are required.", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] primaries, float[] whitePoint, double gamma)"}, "toLinear(float,float,float)": {"Returns": [["float[]", "A new array of 3 floats containing linear RGB values This value will never be null."]], "Parameters": [["float", "float: The red component to decode to linear space"], ["float", "float: The green component to decode to linear space"], ["float", "float: The blue component to decode to linear space"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#toLinear_E@", "@B_android#graphics#ColorSpace#Rgb#fromLinear_E@"], "Permissions": [], "Description": "Decodes an RGB value to linear space. This is achieved by applying this color space's electro-optical transfer function to the supplied values. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "Added in API level 26", "FullName": "public float[] toLinear (float r, float g, float b)"}, "ColorSpace.Rgb(java.lang.String,float[],float[],android.graphics.ColorSpace.Rgb.TransferParameters)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: RGB primaries as an array of 6 (xy) or 9 (XYZ) floats This value must never be null."], ["float[]", "float: Reference white as an array of 2 (xy) or 3 (XYZ) floats This value must never be null."], ["@B_android#graphics#ColorSpace#Rgb#TransferParameters_E@", "ColorSpace.Rgb.TransferParameters: Parameters for the transfer functions This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. The primaries array is null or has a length that is neither 6 or 9. The white point array is null or has a length that is neither 2 or 3. The transfer parameters are invalid."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a specified set of primaries and a specified white point. The primaries and white point can be specified in the CIE xyY space or in CIE XYZ. The length of the arrays depends on the chosen space: When the primaries and/or white point are specified in xyY, the Y component does not need to be specified and is assumed to be 1.0. Only the xy components are required.", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] primaries, float[] whitePoint, ColorSpace.Rgb.TransferParameters function)"}, "fromLinear(float[])": {"Returns": [["float[]", "A new array of 3 floats containing non-linear RGB values"]], "Parameters": [["float[]", "float: A non-null array of linear RGB values, its length must be at least 3 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#fromLinear_E@", "@B_android#graphics#ColorSpace#Rgb#toLinear_E@"], "Permissions": [], "Description": "Encodes an RGB value from linear space to this color space's \"gamma space\". This is achieved by applying this color space's opto-electronic transfer function to the first 3 values of the supplied array. The result is stored back in the input array. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "Added in API level 26", "FullName": "public float[] fromLinear (float[] v)"}, "getOetf()": {"Returns": [["@B_java#util#function#DoubleUnaryOperator_E@", "A transfer function that converts from linear space to \"gamma space\" This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getEotf_E@", "@B_android#graphics#ColorSpace#Rgb#getTransferParameters_E@"], "Permissions": [], "Description": "Returns the opto-electronic transfer function (OETF) of this color space. The inverse function is the electro-optical transfer function (EOTF) returned by @B_android#graphics#ColorSpace#Rgb#getEotf_E@. These functions are defined to satisfy the following equality for \\(x \\in [0..1]\\): $$OETF(EOTF(x)) = EOTF(OETF(x)) = x$$ For RGB colors, this function can be used to convert from linear space to \"gamma space\" (gamma encoded). The terms gamma space and gamma encoded are frequently used because many OETFs can be closely approximated using a simple power function of the form \\(x^{\\frac{1}{\\gamma}}\\) (the approximation of the @B_android#graphics#ColorSpace#Named#SRGB_E@ OETF uses \\(\\gamma=2.2\\) for instance).", "history": "Added in API level 26", "FullName": "public DoubleUnaryOperator getOetf ()"}, "ColorSpace.Rgb(java.lang.String,float[],android.graphics.ColorSpace.Rgb.TransferParameters)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: 3x3 column-major transform matrix from RGB to the profile connection space CIE XYZ as an array of 9 floats, cannot be null This value must never be null."], ["@B_android#graphics#ColorSpace#Rgb#TransferParameters_E@", "ColorSpace.Rgb.TransferParameters: Parameters for the transfer functions This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. Gamma is negative."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a 3x3 column-major transform matrix. The transform matrix must convert from the RGB space to the profile connection space CIE XYZ. The range of the color space is imposed to be \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] toXYZ, ColorSpace.Rgb.TransferParameters function)"}, "toLinear(float[])": {"Returns": [["float[]", "The specified array"]], "Parameters": [["float[]", "float: A non-null array of non-linear RGB values, its length must be at least 3 This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#toLinear_E@", "@B_android#graphics#ColorSpace#Rgb#fromLinear_E@"], "Permissions": [], "Description": "Decodes an RGB value to linear space. This is achieved by applying this color space's electro-optical transfer function to the first 3 values of the supplied array. The result is stored back in the input array. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "Added in API level 26", "FullName": "public float[] toLinear (float[] v)"}, "toLinear(float, float, float)": {"Returns": [["float[]", "A new array of 3 floats containing linear RGB valuesThis value will never be null."]], "Parameters": [["float", "float: The red component to decode to linear space"], ["float", "float: The green component to decode to linear space"], ["float", "float: The blue component to decode to linear space"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#toLinear_E@", "@B_android#graphics#ColorSpace#Rgb#fromLinear_E@"], "Permissions": [], "Description": "Decodes an RGB value to linear space. This is achieved by applying this color space's electro-optical transfer function to the supplied values. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "added in API level 26", "FullName": "public float[] toLinear (float r, float g, float b)"}, "fromXyz(float[])": {"Returns": [["float[]", "This value will never be null."]], "Parameters": [["float[]", "float: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts tristimulus values from the CIE XYZ space to this color space's color model. The resulting value is passed back in the specified array. The specified array's length must be at least equal to to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@, and its first 3 values must be the XYZ components to convert from.", "history": "Added in API level 26", "FullName": "public float[] fromXyz (float[] v)"}, "getEotf()": {"Returns": [["@B_java#util#function#DoubleUnaryOperator_E@", "A transfer function that converts from \"gamma space\" to linear space This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getOetf_E@", "@B_android#graphics#ColorSpace#Rgb#getTransferParameters_E@"], "Permissions": [], "Description": "Returns the electro-optical transfer function (EOTF) of this color space. The inverse function is the opto-electronic transfer function (OETF) returned by @B_android#graphics#ColorSpace#Rgb#getOetf_E@. These functions are defined to satisfy the following equality for \\(x \\in [0..1]\\): $$OETF(EOTF(x)) = EOTF(OETF(x)) = x$$ For RGB colors, this function can be used to convert from \"gamma space\" (gamma encoded) to linear space. The terms gamma space and gamma encoded are frequently used because many EOTFs can be closely approximated using a simple power function of the form \\(x^\\gamma\\) (the approximation of the @B_android#graphics#ColorSpace#Named#SRGB_E@ EOTF uses \\(\\gamma=2.2\\) for instance).", "history": "Added in API level 26", "FullName": "public DoubleUnaryOperator getEotf ()"}, "ColorSpace.Rgb(java.lang.String,float[],java.util.function.DoubleUnaryOperator,java.util.function.DoubleUnaryOperator)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the color space, cannot be null, its length must be >= 1 This value must never be null."], ["float[]", "float: 3x3 column-major transform matrix from RGB to the profile connection space CIE XYZ as an array of 9 floats, cannot be null This value must never be null."], ["@B_java#util#function#DoubleUnaryOperator_E@", "DoubleUnaryOperator: Opto-electronic transfer function, cannot be null This value must never be null."], ["@B_java#util#function#DoubleUnaryOperator_E@", "DoubleUnaryOperator: Electro-optical transfer function, cannot be null This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If any of the following conditions is met: The name is null or has a length of 0. The OETF is null or the EOTF is null. The minimum valid value is >= the maximum valid value."]], "SeeAlso": ["@B_android#graphics#ColorSpace#get_E@"], "Permissions": [], "Description": "Creates a new RGB color space using a 3x3 column-major transform matrix. The transform matrix must convert from the RGB space to the profile connection space CIE XYZ. The range of the color space is imposed to be \\([0..1]\\).", "history": "Added in API level 26", "FullName": "public ColorSpace.Rgb (String name, float[] toXYZ, DoubleUnaryOperator oetf, DoubleUnaryOperator eotf)"}, "getWhitePoint()": {"Returns": [["float[]", "A new non-null array of 2 floats"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getWhitePoint_E@"], "Permissions": [], "Description": "Returns the non-adapted CIE xyY white point of this color space as a new array of 2 floats. The Y component is assumed to be 1 and is therefore not copied into the destination. The x and y components are written in the array at positions 0 and 1 respectively.", "history": "Added in API level 26", "FullName": "public float[] getWhitePoint ()"}, "getPrimaries()": {"Returns": [["float[]", "A new non-null array of 2 floats"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getWhitePoint_E@"], "Permissions": [], "Description": "Returns the primaries of this color space as a new array of 6 floats. The Y component is assumed to be 1 and is therefore not copied into the destination. The x and y components of the first primary are written in the array at positions 0 and 1 respectively.", "history": "Added in API level 26", "FullName": "public float[] getPrimaries ()"}, "fromLinear(float,float,float)": {"Returns": [["float[]", "A new array of 3 floats containing non-linear RGB values This value will never be null."]], "Parameters": [["float", "float: The red component to encode from linear space"], ["float", "float: The green component to encode from linear space"], ["float", "float: The blue component to encode from linear space"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#fromLinear_E@", "@B_android#graphics#ColorSpace#Rgb#toLinear_E@"], "Permissions": [], "Description": "Encodes an RGB value from linear space to this color space's \"gamma space\". This is achieved by applying this color space's opto-electronic transfer function to the supplied values. Refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information about transfer functions and their use for encoding and decoding RGB values.", "history": "Added in API level 26", "FullName": "public float[] fromLinear (float r, float g, float b)"}, "getInverseTransform()": {"Returns": [["float[]", "A new array of 9 floats This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Rgb#getTransform_E@"], "Permissions": [], "Description": "Returns the inverse transform of this color space as a new array. The inverse transform is used to convert from XYZ to RGB (with the same white point as this color space). To connect color spaces, you must first @B_android#graphics#ColorSpace#adapt_E@ them to the same white point. It is recommended to use @B_android#graphics#ColorSpace#connect_E@ to convert between color spaces.", "history": "Added in API level 26", "FullName": "public float[] getInverseTransform ()"}}, "Inheritance": ["@B_android#graphics#ColorSpace_E@"], "ClassName": "android.graphics.ColorSpace.Rgb", "ClassDesc": "An RGB color space is an additive color space using the @B_android#graphics#ColorSpace#Model#RGB_E@ color model (a color is therefore represented by a tuple of 3 numbers). A specific RGB color space is defined by the following properties: Three chromaticities of the red, green and blue primaries, which define the gamut of the color space. A white point chromaticity that defines the stimulus to which color space values are normalized (also just called \"white\"). An opto-electronic transfer function, also called opto-electronic conversion function or often, and approximately, gamma function. An electro-optical transfer function, also called electo-optical conversion function or often, and approximately, gamma function. A range of valid RGB values (most commonly \\([0..1]\\)). The most commonly used RGB color space is @B_android#graphics#ColorSpace#Named#SRGB_E@. In this implementation, the chromaticity of the primaries and the white point of an RGB color space is defined in the CIE xyY color space. This color space separates the chromaticity of a color, the x and y components, and its luminance, the Y component. Since the primaries and the white point have full brightness, the Y component is assumed to be 1 and only the x and y components are needed to encode them. For convenience, this implementation also allows to define the primaries and white point in the CIE XYZ space. The tristimulus XYZ values are internally converted to xyY. A transfer function is a color component conversion function, defined as a single variable, monotonic mathematical function. It is applied to each individual component of a color. They are used to perform the mapping between linear tristimulus values and non-linear electronic signal value. The opto-electronic transfer function (OETF or OECF) encodes tristimulus values in a scene to a non-linear electronic signal value. An OETF is often expressed as a power function with an exponent between 0.38 and 0.55 (the reciprocal of 1.8 to 2.6). The electro-optical transfer function (EOTF or EOCF) decodes a non-linear electronic signal value to a tristimulus value at the display. An EOTF is often expressed as a power function with an exponent between 1.8 and 2.6. Transfer functions are used as a compression scheme. For instance, linear sRGB values would normally require 11 to 12 bits of precision to store all values that can be perceived by the human eye. When encoding sRGB values using the appropriate OETF (see @B_android#graphics#ColorSpace#Named#SRGB_E@ for an exact mathematical description of that OETF), the values can be compressed to only 8 bits precision. When manipulating RGB values, particularly sRGB values, it is safe to assume that these values have been encoded with the appropriate OETF (unless noted otherwise). Encoded values are often said to be in \"gamma space\". They are therefore defined in a non-linear space. This in turns means that any linear operation applied to these values is going to yield mathematically incorrect results (any linear interpolation such as gradient generation for instance, most image processing functions such as blurs, etc.). To properly process encoded RGB values you must first apply the EOTF to decode the value into linear space. After processing, the RGB value must be encoded back to non-linear (\"gamma\") space. Here is a formal description of the process, where \\(f\\) is the processing function to apply: $$RGB_{out} = OETF(f(EOTF(RGB_{in})))$$ If the transfer functions of the color space can be expressed as an ICC parametric curve as defined in ICC.1:2004-10, the numeric parameters can be retrieved by calling @B_android#graphics#ColorSpace#Rgb#getTransferParameters_E@. This can be useful to match color spaces for instance. Some RGB color spaces, such as @B_android#graphics#ColorSpace#Named#ACES_E@ and @B_android#graphics#ColorSpace#Named#LINEAR_EXTENDED_SRGB_E@, are said to be linear because their transfer functions are the identity function: \\(f(x) = x\\). If the source and/or destination are known to be linear, it is not necessary to invoke the transfer functions. Most RGB color spaces allow RGB values in the range \\([0..1]\\). There are however a few RGB color spaces that allow much larger ranges. For instance, @B_android#graphics#ColorSpace#Named#EXTENDED_SRGB_E@ is used to manipulate the range \\([-0.5..7.5]\\) while @B_android#graphics#ColorSpace#Named#ACES_E@ can be used throughout the range \\([-65504, 65504]\\). Conversion between two color spaces is achieved by using an intermediate color space called the profile connection space (PCS). The PCS used by this implementation is CIE XYZ. The conversion operation is defined as such: $$RGB_{out} = OETF(T_{dst}^{-1} \\cdot T_{src} \\cdot EOTF(RGB_{in}))$$ Where \\(T_{src}\\) is the @B_android#graphics#ColorSpace#Rgb#getTransform_E@ of the source color space and \\(T_{dst}^{-1}\\) the @B_android#graphics#ColorSpace#Rgb#getInverseTransform_E@ of the destination color space. Many RGB color spaces commonly used with electronic devices use the standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D65_E@. Care must be take however when converting between two RGB color spaces if their white points do not match. This can be achieved by either calling @B_android#graphics#ColorSpace#adapt_E@ to adapt one or both color spaces to a single common white point. This can be achieved automatically by calling @B_android#graphics#ColorSpace#connect_E@, which also handles non-RGB color spaces. To learn more about the white point adaptation process, refer to the documentation of @B_android#graphics#ColorSpace#Adaptation_E@."}