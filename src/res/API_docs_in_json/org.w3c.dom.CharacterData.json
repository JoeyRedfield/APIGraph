{"Functions": {"replaceData(int,int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The offset from which to start replacing."], ["int", "int: The number of 16-bit units to replace. If the sum of offset and count exceeds length, then all 16-bit units to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation)."], ["@B_java#lang#String_E@", "String: The DOMString with which the range must be replaced."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Replace the characters starting at the specified 16-bit unit offset with the specified string.", "history": "Added in API level 1", "FullName": "public abstract void replaceData (int offset, int count, String arg)"}, "deleteData(int, int)": {"Returns": [], "Parameters": [["int", "int: The offset from which to start removing."], ["int", "int: The number of 16-bit units to delete. If the sum of offset and count exceeds length then all 16-bit units from offset to the end of the data are deleted."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Remove a range of 16-bit units from the node. Upon success, data and length reflect the change.", "history": "added in API level 1", "FullName": "public abstract void deleteData (int offset, int count)"}, "deleteData(int,int)": {"Returns": [], "Parameters": [["int", "int: The offset from which to start removing."], ["int", "int: The number of 16-bit units to delete. If the sum of offset and count exceeds length then all 16-bit units from offset to the end of the data are deleted."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Remove a range of 16-bit units from the node. Upon success, data and length reflect the change.", "history": "Added in API level 1", "FullName": "public abstract void deleteData (int offset, int count)"}, "getLength()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The number of 16-bit units that are available through data and the substringData method below. This may have the value zero, i.e., CharacterData nodes may be empty.", "history": "Added in API level 1", "FullName": "public abstract int getLength ()"}, "replaceData(int, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The offset from which to start replacing."], ["int", "int: The number of 16-bit units to replace. If the sum of offset and count exceeds length, then all 16-bit units to the end of the data are replaced; (i.e., the effect is the same as a remove method call with the same range, followed by an append method invocation)."], ["@B_java#lang#String_E@", "String: The DOMString with which the range must be replaced."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Replace the characters starting at the specified 16-bit unit offset with the specified string.", "history": "added in API level 1", "FullName": "public abstract void replaceData (int offset, int count, String arg)"}, "appendData(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The DOMString to append."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Append the string to the end of the character data of the node. Upon success, data provides access to the concatenation of data and the DOMString specified.", "history": "Added in API level 1", "FullName": "public abstract void appendData (String arg)"}, "insertData(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The character offset at which to insert."], ["@B_java#lang#String_E@", "String: The DOMString to insert."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Insert a string at the specified 16-bit unit offset.", "history": "Added in API level 1", "FullName": "public abstract void insertData (int offset, String arg)"}, "getData()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_org#w3c#dom#DOMException_E@", "DOMSTRING_SIZE_ERR: Raised when it would return more characters than fit in a DOMString variable on the implementation platform."]], "SeeAlso": [], "Permissions": [], "Description": "The character data of the node that implements this interface. The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a CharacterData node. However, implementation limits may mean that the entirety of a node's data may not fit into a single DOMString. In such cases, the user may call substringData to retrieve the data in appropriately sized pieces.", "history": "Added in API level 1", "FullName": "public abstract String getData ()"}, "substringData(int,int)": {"Returns": [["@B_java#lang#String_E@", "The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned."]], "Parameters": [["int", "int: Start offset of substring to extract."], ["int", "int: The number of 16-bit units to extract."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. DOMSTRING_SIZE_ERR: Raised if the specified range of text does not fit into a DOMString."]], "SeeAlso": [], "Permissions": [], "Description": "Extracts a range of data from the node.", "history": "Added in API level 1", "FullName": "public abstract String substringData (int offset, int count)"}, "substringData(int, int)": {"Returns": [["@B_java#lang#String_E@", "The specified substring. If the sum of offset and count exceeds the length, then all 16-bit units to the end of the data are returned."]], "Parameters": [["int", "int: Start offset of substring to extract."], ["int", "int: The number of 16-bit units to extract."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data, or if the specified count is negative. DOMSTRING_SIZE_ERR: Raised if the specified range of text does not fit into a DOMString."]], "SeeAlso": [], "Permissions": [], "Description": "Extracts a range of data from the node.", "history": "added in API level 1", "FullName": "public abstract String substringData (int offset, int count)"}, "setData(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NO_MODIFICATION_ALLOWED_ERR: Raised when the node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "The character data of the node that implements this interface. The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a CharacterData node. However, implementation limits may mean that the entirety of a node's data may not fit into a single DOMString. In such cases, the user may call substringData to retrieve the data in appropriately sized pieces.", "history": "Added in API level 1", "FullName": "public abstract void setData (String data)"}, "insertData(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The character offset at which to insert."], ["@B_java#lang#String_E@", "String: The DOMString to insert."]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "INDEX_SIZE_ERR: Raised if the specified offset is negative or greater than the number of 16-bit units in data. NO_MODIFICATION_ALLOWED_ERR: Raised if this node is readonly."]], "SeeAlso": [], "Permissions": [], "Description": "Insert a string at the specified 16-bit unit offset.", "history": "added in API level 1", "FullName": "public abstract void insertData (int offset, String arg)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.CharacterData", "ClassDesc": "The CharacterData interface extends Node with a set of attributes and methods for accessing character data in the DOM. For clarity this set is defined here rather than on each object that uses these attributes and methods. No DOM objects correspond directly to CharacterData, though Text and others do inherit the interface from it. All offsets in this interface start from 0. As explained in the DOMString interface, text strings in the DOM are represented in UTF-16, i.e. as a sequence of 16-bit units. In the following, the term 16-bit units is used whenever necessary to indicate that indexing on CharacterData is done in 16-bit units. See also the"}