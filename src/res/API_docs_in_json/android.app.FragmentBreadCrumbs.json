{"Functions": {"onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setActivity(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attach the bread crumbs to their activity. This must be called once when creating the bread crumbs.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public void setActivity (Activity a)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "setMaxVisible(int)": {"Returns": [], "Parameters": [["int", "int: the number of visible breadcrumbs. This should be greater than zero."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The maximum number of breadcrumbs to show. Older fragment headers will be hidden from view.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public void setMaxVisible (int visibleCrumbs)"}, "FragmentBreadCrumbs(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public FragmentBreadCrumbs (Context context, AttributeSet attrs, int defStyleAttr)"}, "setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs.OnBreadCrumbClickListener)": {"Returns": [], "Parameters": [["@B_android#app#FragmentBreadCrumbs#OnBreadCrumbClickListener_E@", "FragmentBreadCrumbs.OnBreadCrumbClickListener: The new listener to set. Replaces any existing listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a listener for clicks on the bread crumbs. This will be called before the default click action is performed.", "history": "Added in API level 12 Deprecated in API level 21", "FullName": "public void setOnBreadCrumbClickListener (FragmentBreadCrumbs.OnBreadCrumbClickListener listener)"}, "FragmentBreadCrumbs(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public FragmentBreadCrumbs (Context context)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 11", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "setParentTitle(java.lang.CharSequence,java.lang.CharSequence,android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the title for the parent entry"], ["@B_java#lang#CharSequence_E@", "CharSequence: the short title for the parent entry"], ["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: the @B_android#view#View#OnClickListener_E@ to be called when clicked. A null will result in no action being taken when the parent entry is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts an optional parent entry at the first position in the breadcrumbs. Selecting this entry will result in a call to the specified listener's @B_android#view#View#OnClickListener#onClick_E@ method.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public void setParentTitle (CharSequence title, CharSequence shortTitle, View.OnClickListener listener)"}, "onBackStackChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called whenever the contents of the back stack change.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public void onBackStackChanged ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "FragmentBreadCrumbs(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public FragmentBreadCrumbs (Context context, AttributeSet attrs)"}, "setTitle(java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a custom title for the bread crumbs. This will be the first entry shown at the left, representing the root of the bread crumbs. If the title is null, it will not be shown.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public void setTitle (CharSequence title, CharSequence shortTitle)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.app.FragmentBreadCrumbs", "ClassDesc": "This widget is no longer supported. Helper class for showing \"bread crumbs\" representing the fragment stack in an activity. This is intended to be used with @B_android#app#ActionBar#setCustomView_E@ to place the bread crumbs in the action bar. The default style for this view is @B_android#R#style#Widget_FragmentBreadCrumbs_E@."}