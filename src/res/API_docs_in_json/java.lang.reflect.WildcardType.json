{"Functions": {"getLowerBounds()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types representing the lower bound(s) of this type variable"]], "Parameters": [], "Throws": [["@B_java#lang#TypeNotPresentException_E@", "if any of the bounds refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if any of the bounds refer to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects representing the lower bound(s) of this type variable. Note that if no lower bound is explicitly declared, the lower bound is the type of null. In this case, a zero length array is returned. For each lower bound B : if B is a parameterized type or a type variable, it is created, (see @B_java#lang#reflect#ParameterizedType_E@ for the details of the creation process for parameterized types). Otherwise, B is resolved.", "history": "Added in API level 1", "FullName": "public abstract Type[] getLowerBounds ()"}, "getUpperBounds()": {"Returns": [["@B_java#lang#reflect#Type_E@", "an array of Types representing the upper bound(s) of this type variable"]], "Parameters": [], "Throws": [["@B_java#lang#TypeNotPresentException_E@", "if any of the bounds refers to a non-existent type declaration"], ["@B_java#lang#reflect#MalformedParameterizedTypeException_E@", "if any of the bounds refer to a parameterized type that cannot be instantiated for any reason"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of Type objects representing the upper bound(s) of this type variable. Note that if no upper bound is explicitly declared, the upper bound is Object. For each upper bound B : if B is a parameterized type or a type variable, it is created, (see @B_java#lang#reflect#ParameterizedType_E@ for the details of the creation process for parameterized types). Otherwise, B is resolved.", "history": "Added in API level 1", "FullName": "public abstract Type[] getUpperBounds ()"}}, "Inheritance": [], "ClassName": "java.lang.reflect.WildcardType", "ClassDesc": "WildcardType represents a wildcard type expression, such as ?, ? extends Number, or ? super Integer."}