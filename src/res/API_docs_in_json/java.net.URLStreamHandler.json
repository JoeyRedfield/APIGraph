{"Functions": {"sameFile(java.net.URL, java.net.URL)": {"Returns": [["boolean", "true if u1 and u2 refer to the same file"]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"], ["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path. This method requires that none of its arguments is null. This is guaranteed by the fact that it is only called indirectly by java.net.URL class.", "history": "added in API level 1", "FullName": "protected boolean sameFile (URL u1, URL u2)"}, "toExternalForm(java.net.URL)": {"Returns": [["@B_java#lang#String_E@", "a string representation of the URL argument."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a URL of a specific protocol to a String.", "history": "Added in API level 1", "FullName": "protected String toExternalForm (URL u)"}, "openConnection(java.net.URL, java.net.Proxy)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection object for the URL."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL that this connects to."], ["@B_java#net#Proxy_E@", "Proxy: the proxy through which the connection will be made. If direct connection is desired, Proxy.NO_PROXY should be specified."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while opening the connection."], ["@B_java#lang#IllegalArgumentException_E@", "if either u or p is null, or p has the wrong type."], ["@B_java#lang#UnsupportedOperationException_E@", "if the subclass that implements the protocol doesn't support this method."]], "SeeAlso": [], "Permissions": [], "Description": "Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection. Calling this method preempts the system's default ProxySelector settings.", "history": "added in API level 1", "FullName": "protected URLConnection openConnection (URL u, Proxy p)"}, "equals(java.net.URL,java.net.URL)": {"Returns": [["boolean", "true if the two urls are considered equal, ie. they refer to the same fragment in the same file."]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"], ["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides the default equals calculation. May be overidden by handlers for other protocols that have different requirements for equals(). This method requires that none of its arguments is null. This is guaranteed by the fact that it is only called by java.net.URL class.", "history": "Added in API level 1", "FullName": "protected boolean equals (URL u1, URL u2)"}, "setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to modify."], ["@B_java#lang#String_E@", "String: the protocol name. This value is ignored since 1.2."], ["@B_java#lang#String_E@", "String: the remote host value for the URL."], ["int", "int: the port on the remote machine."], ["@B_java#lang#String_E@", "String: the file."], ["@B_java#lang#String_E@", "String: the reference."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the protocol handler of the URL is different from this one"]], "SeeAlso": [], "Permissions": [], "Description": "Use setURL(URL, String, String, int, String, String, String, String); Sets the fields of the URL argument to the indicated values. Only classes derived from URLStreamHandler are able to use this method to set the values of the URL fields.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "protected void setURL (URL u, String protocol, String host, int port, String file, String ref)"}, "openConnection(java.net.URL)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection object for the URL."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL that this connects to."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while opening the connection."]], "SeeAlso": [], "Permissions": [], "Description": "Opens a connection to the object referenced by the URL argument. This method should be overridden by a subclass. If for the handler's protocol (such as HTTP or JAR), there exists a public, specialized URLConnection subclass belonging to one of the following packages or one of their subpackages: java.lang, java.io, java.util, java.net, the connection returned will be of that subclass. For example, for HTTP an HttpURLConnection will be returned, and for JAR a JarURLConnection will be returned.", "history": "Added in API level 1", "FullName": "protected abstract URLConnection openConnection (URL u)"}, "hostsEqual(java.net.URL,java.net.URL)": {"Returns": [["boolean", "true if and only if they are equal, false otherwise."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL of the first host to compare"], ["@B_java#net#URL_E@", "URL: the URL of the second host to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the host components of two URLs.", "history": "Added in API level 1", "FullName": "protected boolean hostsEqual (URL u1, URL u2)"}, "URLStreamHandler()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public URLStreamHandler ()"}, "setURL(java.net.URL,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to modify."], ["@B_java#lang#String_E@", "String: the protocol name."], ["@B_java#lang#String_E@", "String: the remote host value for the URL."], ["int", "int: the port on the remote machine."], ["@B_java#lang#String_E@", "String: the authority part for the URL."], ["@B_java#lang#String_E@", "String: the userInfo part of the URL."], ["@B_java#lang#String_E@", "String: the path component of the URL."], ["@B_java#lang#String_E@", "String: the query part for the URL."], ["@B_java#lang#String_E@", "String: the reference."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the protocol handler of the URL is different from this one"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the fields of the URL argument to the indicated values. Only classes derived from URLStreamHandler are able to use this method to set the values of the URL fields.", "history": "Added in API level 1", "FullName": "protected void setURL (URL u, String protocol, String host, int port, String authority, String userInfo, String path, String query, String ref)"}, "hashCode(java.net.URL)": {"Returns": [["int", "an int suitable for hash table indexing"]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides the default hash calculation. May be overidden by handlers for other protocols that have different requirements for hashCode calculation.", "history": "Added in API level 1", "FullName": "protected int hashCode (URL u)"}, "getDefaultPort()": {"Returns": [["int", "the default port for a URL parsed by this handler."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default port for a URL parsed by this handler. This method is meant to be overidden by handlers with default port numbers.", "history": "Added in API level 1", "FullName": "protected int getDefaultPort ()"}, "equals(java.net.URL, java.net.URL)": {"Returns": [["boolean", "true if the two urls are considered equal, ie. they refer to the same fragment in the same file."]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"], ["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides the default equals calculation. May be overidden by handlers for other protocols that have different requirements for equals(). This method requires that none of its arguments is null. This is guaranteed by the fact that it is only called by java.net.URL class.", "history": "added in API level 1", "FullName": "protected boolean equals (URL u1, URL u2)"}, "parseURL(java.net.URL, java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to receive the result of parsing the spec."], ["@B_java#lang#String_E@", "String: the String representing the URL that must be parsed."], ["int", "int: the character index at which to begin parsing. This is just past the ':' (if there is one) that specifies the determination of the protocol name."], ["int", "int: the character position to stop parsing at. This is the end of the string or the position of the \"#\" character, if present. All information after the sharp sign indicates an anchor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parses the string representation of a URL into a URL object. If there is any inherited context, then it has already been copied into the URL argument. The parseURL method of URLStreamHandler parses the string representation as if it were an http specification. Most URL protocol families have a similar parsing. A stream protocol handler for a protocol that has a different syntax must override this routine.", "history": "added in API level 1", "FullName": "protected void parseURL (URL u, String spec, int start, int limit)"}, "openConnection(java.net.URL,java.net.Proxy)": {"Returns": [["@B_java#net#URLConnection_E@", "a URLConnection object for the URL."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL that this connects to."], ["@B_java#net#Proxy_E@", "Proxy: the proxy through which the connection will be made. If direct connection is desired, Proxy.NO_PROXY should be specified."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs while opening the connection."], ["@B_java#lang#IllegalArgumentException_E@", "if either u or p is null, or p has the wrong type."], ["@B_java#lang#UnsupportedOperationException_E@", "if the subclass that implements the protocol doesn't support this method."]], "SeeAlso": [], "Permissions": [], "Description": "Same as openConnection(URL), except that the connection will be made through the specified proxy; Protocol handlers that do not support proxying will ignore the proxy parameter and make a normal connection. Calling this method preempts the system's default ProxySelector settings.", "history": "Added in API level 1", "FullName": "protected URLConnection openConnection (URL u, Proxy p)"}, "sameFile(java.net.URL,java.net.URL)": {"Returns": [["boolean", "true if u1 and u2 refer to the same file"]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"], ["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compare two urls to see whether they refer to the same file, i.e., having the same protocol, host, port, and path. This method requires that none of its arguments is null. This is guaranteed by the fact that it is only called indirectly by java.net.URL class.", "history": "Added in API level 1", "FullName": "protected boolean sameFile (URL u1, URL u2)"}, "getHostAddress(java.net.URL)": {"Returns": [["@B_java#net#InetAddress_E@", "an InetAddress representing the host IP address."]], "Parameters": [["@B_java#net#URL_E@", "URL: a URL object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the IP address of our host. An empty host field or a DNS failure will result in a null return.", "history": "Added in API level 1", "FullName": "protected InetAddress getHostAddress (URL u)"}, "parseURL(java.net.URL,java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL to receive the result of parsing the spec."], ["@B_java#lang#String_E@", "String: the String representing the URL that must be parsed."], ["int", "int: the character index at which to begin parsing. This is just past the ':' (if there is one) that specifies the determination of the protocol name."], ["int", "int: the character position to stop parsing at. This is the end of the string or the position of the \"#\" character, if present. All information after the sharp sign indicates an anchor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parses the string representation of a URL into a URL object. If there is any inherited context, then it has already been copied into the URL argument. The parseURL method of URLStreamHandler parses the string representation as if it were an http specification. Most URL protocol families have a similar parsing. A stream protocol handler for a protocol that has a different syntax must override this routine.", "history": "Added in API level 1", "FullName": "protected void parseURL (URL u, String spec, int start, int limit)"}, "hostsEqual(java.net.URL, java.net.URL)": {"Returns": [["boolean", "true if and only if they are equal, false otherwise."]], "Parameters": [["@B_java#net#URL_E@", "URL: the URL of the first host to compare"], ["@B_java#net#URL_E@", "URL: the URL of the second host to compare"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the host components of two URLs.", "history": "added in API level 1", "FullName": "protected boolean hostsEqual (URL u1, URL u2)"}}, "Inheritance": [], "ClassName": "java.net.URLStreamHandler", "ClassDesc": "The abstract class URLStreamHandler is the common superclass for all stream protocol handlers. A stream protocol handler knows how to make a connection for a particular protocol type, such as http or https. In most cases, an instance of a URLStreamHandler subclass is not created directly by an application. Rather, the first time a protocol name is encountered when constructing a URL, the appropriate stream protocol handler is automatically loaded."}