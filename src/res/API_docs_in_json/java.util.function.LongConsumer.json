{"Functions": {"andThen(java.util.function.LongConsumer)": {"Returns": [["@B_java#util#function#LongConsumer_E@", "a composed LongConsumer that performs in sequence this operation followed by the after operation"]], "Parameters": [["@B_java#util#function#LongConsumer_E@", "LongConsumer: the operation to perform after this operation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if after is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a composed LongConsumer that performs, in sequence, this operation followed by the after operation. If performing either operation throws an exception, it is relayed to the caller of the composed operation. If performing this operation throws an exception, the after operation will not be performed.", "history": "Added in API level 24", "FullName": "public LongConsumer andThen (LongConsumer after)"}, "accept(long)": {"Returns": [], "Parameters": [["long", "long: the input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given argument.", "history": "Added in API level 24", "FullName": "public abstract void accept (long value)"}}, "Inheritance": [], "ClassName": "java.util.function.LongConsumer", "ClassDesc": "Represents an operation that accepts a single long-valued argument and returns no result. This is the primitive type specialization of @B_java#util#function#Consumer_E@ for long. Unlike most other functional interfaces, LongConsumer is expected to operate via side-effects. This is a @B_java#util#function#LongConsumer#accept_E@."}