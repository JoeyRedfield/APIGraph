{"Functions": {"engineGetCertPathEncodings()": {"Returns": [["@B_java#util#Iterator_E@", "an Iterator over the names of the supported CertPath encodings (as Strings)"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an iteration of the CertPath encodings supported by this certificate factory, with the default encoding first. See the CertPath Encodings section in the Attempts to modify the returned Iterator via its remove method result in an UnsupportedOperationException. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public Iterator<String> engineGetCertPathEncodings ()"}, "engineGenerateCertificate(java.io.InputStream)": {"Returns": [["@B_java#security#cert#Certificate_E@", "a certificate object initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream with the certificate data."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a certificate object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, the returned certificate object can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the returned certificate object can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, the certificate provided in inStream must be DER-encoded and may be supplied in binary or printable (Base64) encoding. If the certificate is provided in Base64 encoding, it must be bounded at the beginning by -----BEGIN CERTIFICATE-----, and must be bounded at the end by -----END CERTIFICATE-----. Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream. Otherwise, each call to this method consumes one certificate and the read position of the input stream is positioned to the next available byte after the inherent end-of-certificate marker. If the data in the input stream does not contain an inherent end-of-certificate marker (other than EOF) and there is trailing data after the certificate is parsed, a CertificateException is thrown.", "history": "Added in API level 1", "FullName": "public abstract Certificate engineGenerateCertificate (InputStream inStream)"}, "engineGenerateCRL(java.io.InputStream)": {"Returns": [["@B_java#security#cert#CRL_E@", "a CRL object initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an input stream with the CRL data."]], "Throws": [["@B_java#security#cert#CRLException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Generates a certificate revocation list (CRL) object and initializes it with the data read from the input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, the returned CRL object can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the returned CRL object can be typecast to the X509CRL class. Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream. Otherwise, each call to this method consumes one CRL and the read position of the input stream is positioned to the next available byte after the inherent end-of-CRL marker. If the data in the input stream does not contain an inherent end-of-CRL marker (other than EOF) and there is trailing data after the CRL is parsed, a CRLException is thrown.", "history": "Added in API level 1", "FullName": "public abstract CRL engineGenerateCRL (InputStream inStream)"}, "engineGenerateCRLs(java.io.InputStream)": {"Returns": [["@B_java#util#Collection_E@", "a (possibly empty) collection view of java.security.cert.CRL objects initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream with the CRLs."]], "Throws": [["@B_java#security#cert#CRLException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a (possibly empty) collection view of the CRLs read from the given input stream inStream. In order to take advantage of the specialized CRL format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding CRL class. For example, if this certificate factory implements X.509 CRLs, the elements in the returned collection can be typecast to the X509CRL class. In the case of a certificate factory for X.509 CRLs, inStream may contain a single DER-encoded CRL. In addition, inStream may contain a PKCS#7 CRL set. This is a PKCS#7 Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream.", "history": "Added in API level 1", "FullName": "public abstract Collection<? extends CRL> engineGenerateCRLs (InputStream inStream)"}, "engineGenerateCertificates(java.io.InputStream)": {"Returns": [["@B_java#util#Collection_E@", "a (possibly empty) collection view of java.security.cert.Certificate objects initialized with the data from the input stream."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: the input stream with the certificates."]], "Throws": [["@B_java#security#cert#CertificateException_E@", "on parsing errors."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a (possibly empty) collection view of the certificates read from the given input stream inStream. In order to take advantage of the specialized certificate format supported by this certificate factory, each element in the returned collection view can be typecast to the corresponding certificate class. For example, if this certificate factory implements X.509 certificates, the elements in the returned collection can be typecast to the X509Certificate class. In the case of a certificate factory for X.509 certificates, inStream may contain a single DER-encoded certificate in the formats described for @B_java#security#cert#CertificateFactory#generateCertificate_E@. In addition, inStream may contain a PKCS#7 certificate chain. This is a PKCS#7 Note that if the given input stream does not support @B_java#io#InputStream#mark_E@ and @B_java#io#InputStream#reset_E@, this method will consume the entire input stream.", "history": "Added in API level 1", "FullName": "public abstract Collection<? extends Certificate> engineGenerateCertificates (InputStream inStream)"}, "CertificateFactorySpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public CertificateFactorySpi ()"}, "engineGenerateCertPath(java.io.InputStream,java.lang.String)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the data from the InputStream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream containing the data"], ["@B_java#lang#String_E@", "String: the encoding used for the data"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs while decoding or the encoding requested is not supported"], ["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the specified encoding. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public CertPath engineGenerateCertPath (InputStream inStream, String encoding)"}, "engineGenerateCertPath(java.util.List<?extendsjava.security.cert.Certificate>)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the supplied list of certificates"]], "Parameters": [["@B_java#util#List_E@", "List: a List of Certificates"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs"], ["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with a List of Certificates. The certificates supplied must be of a type supported by the CertificateFactory. They will be copied out of the supplied List object. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public CertPath engineGenerateCertPath (List<? extends Certificate> certificates)"}, "engineGenerateCertPath(java.io.InputStream)": {"Returns": [["@B_java#security#cert#CertPath_E@", "a CertPath initialized with the data from the InputStream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: an InputStream containing the data"]], "Throws": [["@B_java#security#cert#CertificateException_E@", "if an exception occurs while decoding"], ["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Generates a CertPath object and initializes it with the data read from the InputStream inStream. The data is assumed to be in the default encoding. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method cannot be abstract and by default throws an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public CertPath engineGenerateCertPath (InputStream inStream)"}}, "Inheritance": [], "ClassName": "java.security.cert.CertificateFactorySpi", "ClassDesc": "This class defines the CertificateFactory class. All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a certificate factory for a particular certificate type, e.g., X.509. Certificate factories are used to generate certificate, certification path (CertPath) and certificate revocation list (CRL) objects from their encodings. A certificate factory for X.509 must return certificates that are an instance of java.security.cert.X509Certificate, and CRLs that are an instance of java.security.cert.X509CRL."}