{"Functions": {"inKeyguardRestrictedInputMode()": {"Returns": [["boolean", "true if in keyguard restricted input mode."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#KeyguardManager#isKeyguardLocked_E@ instead. If keyguard screen is showing or in restricted key input mode (i.e. in keyguard password emergency screen). When in such mode, certain keys, such as the Home key and the right soft keys, don't work.", "history": "Added in API level 1 Deprecated in API level 28", "FullName": "public boolean inKeyguardRestrictedInputMode ()"}, "requestDismissKeyguard(android.app.Activity,android.app.KeyguardManager.KeyguardDismissCallback)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity requesting the dismissal. The activity must be either visible by using @B_android#view#WindowManager#LayoutParams#FLAG_SHOW_WHEN_LOCKED_E@ or must be in a state in which it would be visible if Keyguard would not be hiding it. If that's not the case, the request will fail immediately and @B_android#app#KeyguardManager#KeyguardDismissCallback#onDismissError_E@ will be invoked. This value must never be null."], ["@B_android#app#KeyguardManager#KeyguardDismissCallback_E@", "KeyguardManager.KeyguardDismissCallback: The callback to be called if the request to dismiss Keyguard was successful or null if the caller isn't interested in knowing the result. The callback will not be invoked if the activity was destroyed before the callback was received. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the device is currently locked (see @B_android#app#KeyguardManager#isKeyguardLocked_E@, requests the Keyguard to be dismissed. If the Keyguard is not secure or the device is currently in a trusted state, calling this method will immediately dismiss the Keyguard without any user interaction. If the Keyguard is secure and the device is not in a trusted state, this will bring up the UI so the user can enter their credentials. If the value set for the @B_android#app#Activity_E@ attr @B_android#R#attr#turnScreenOn_E@ is true, the screen will turn on when the keyguard is dismissed.", "history": "Added in API level 26", "FullName": "public void requestDismissKeyguard (Activity activity, KeyguardManager.KeyguardDismissCallback callback)"}, "isKeyguardSecure()": {"Returns": [["boolean", "true if a PIN, pattern or password is set or a SIM card is locked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the keyguard is secured by a PIN, pattern or password or a SIM card is currently locked. See also @B_android#app#KeyguardManager#isDeviceSecure_E@ which ignores SIM locked states.", "history": "Added in API level 16", "FullName": "public boolean isKeyguardSecure ()"}, "isDeviceLocked()": {"Returns": [["boolean", "true if unlocking the device currently requires a PIN, pattern or password."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the device is currently locked and requires a PIN, pattern or password to unlock.", "history": "Added in API level 22", "FullName": "public boolean isDeviceLocked ()"}, "isKeyguardLocked()": {"Returns": [["boolean", "true if keyguard is locked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the keyguard is currently locked.", "history": "Added in API level 16", "FullName": "public boolean isKeyguardLocked ()"}, "newKeyguardLock(java.lang.String)": {"Returns": [["@B_android#app#KeyguardManager#KeyguardLock_E@", "A @B_android#app#KeyguardManager#KeyguardLock_E@ handle to use to disable and reenable the keyguard."]], "Parameters": [["@B_java#lang#String_E@", "String: A tag that informally identifies who you are (for debugging who is disabling the keyguard)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#WindowManager#LayoutParams#FLAG_DISMISS_KEYGUARD_E@ and/or @B_android#view#WindowManager#LayoutParams#FLAG_SHOW_WHEN_LOCKED_E@ instead; this allows you to seamlessly hide the keyguard as your application moves in and out of the foreground and does not require that any special permissions be requested. Enables you to lock or unlock the keyguard. Get an instance of this class by calling @B_android#content#Context#getSystemService_E@. This class is wrapped by @B_android#app#KeyguardManager_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public KeyguardManager.KeyguardLock newKeyguardLock (String tag)"}, "exitKeyguardSecurely(android.app.KeyguardManager.OnKeyguardExitResult)": {"Returns": [], "Parameters": [["@B_android#app#KeyguardManager#OnKeyguardExitResult_E@", "KeyguardManager.OnKeyguardExitResult: Lets you know whether the operation was successful and it is safe to launch anything that would normally be considered safe once the user has gotten past the keyguard."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#DISABLE_KEYGUARD_E@"], "Description": "Use @B_android#view#WindowManager#LayoutParams#FLAG_DISMISS_KEYGUARD_E@ and/or @B_android#view#WindowManager#LayoutParams#FLAG_SHOW_WHEN_LOCKED_E@ instead; this allows you to seamlessly hide the keyguard as your application moves in and out of the foreground and does not require that any special permissions be requested. Exit the keyguard securely. The use case for this api is that, after disabling the keyguard, your app, which was granted permission to disable the keyguard and show a limited amount of information deemed safe without the user getting past the keyguard, needs to navigate to something that is not safe to view without getting past the keyguard. This will, if the keyguard is secure, bring up the unlock screen of the keyguard. Requires @B_android#Manifest#permission#DISABLE_KEYGUARD_E@", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void exitKeyguardSecurely (KeyguardManager.OnKeyguardExitResult callback)"}, "createConfirmDeviceCredentialIntent(java.lang.CharSequence,java.lang.CharSequence)": {"Returns": [["@B_android#content#Intent_E@", "the intent for launching the activity or null if no password is required."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "see @B_android#hardware#biometrics#BiometricPrompt#Builder#setDeviceCredentialAllowed_E@ Get an intent to prompt the user to confirm credentials (pin, pattern, password or biometrics if enrolled) for the current user of the device. The caller is expected to launch this activity using @B_android#app#Activity#startActivityForResult_E@ and check for @B_android#app#Activity#RESULT_OK_E@ if the user successfully completes the challenge. Requires the @B_android#content#pm#PackageManager#FEATURE_SECURE_LOCK_SCREEN_E@ feature which can be detected using @B_android#content#pm#PackageManager#hasSystemFeature_E@.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public Intent createConfirmDeviceCredentialIntent (CharSequence title, CharSequence description)"}, "isDeviceSecure()": {"Returns": [["boolean", "true if a PIN, pattern or password was set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the device is secured with a PIN, pattern or password. See also @B_android#app#KeyguardManager#isKeyguardSecure_E@ which treats SIM locked states as secure.", "history": "Added in API level 23", "FullName": "public boolean isDeviceSecure ()"}}, "Inheritance": [], "ClassName": "android.app.KeyguardManager", "ClassDesc": "Class that can be used to lock and unlock the keyguard. The actual class to control the keyguard locking is @B_android#app#KeyguardManager#KeyguardLock_E@."}