{"Functions": {"onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new device configuration. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the device configuration changes while your component is running. Note that, unlike activities, other components are never restarted when a configuration changes: they must always deal with the results of the change, such as by re-retrieving resources. At the time that this function has been called, your Resources object will have been updated to return resource values matching the new configuration. For more information, read", "history": "Added in API level 21", "FullName": "public void onConfigurationChanged (Configuration newConfig)"}, "dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: The PrintWriter to which you should dump your state. This will be closed for you after you return."], ["@B_java#lang#String_E@", "String: additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the Service's state into the given stream. This gets invoked if you run \"adb shell dumpsys activity service <yourservicename>\" (note that for this command to work, the service must be running, and you must specify a fully-qualified service name). This is distinct from \"dumpsys <servicename>\", which only works for named system services and which invokes the @B_android#os#IBinder#dump_E@ method on the @B_android#os#IBinder_E@ interface registered with ServiceManager.", "history": "Added in API level 21", "FullName": "protected void dump (FileDescriptor fd, PrintWriter writer, String[] args)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the system when the service is first created. Do not call this method directly.", "history": "Added in API level 21", "FullName": "public void onCreate ()"}, "onNewSession(android.os.Bundle)": {"Returns": [["@B_android#service#voice#VoiceInteractionSession_E@", "no returns description in source"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public abstract VoiceInteractionSession onNewSession (Bundle args)"}, "onTrimMemory(int)": {"Returns": [], "Parameters": [["int", "int: The context of the trim, giving a hint of the amount of trimming the application may like to perform. Value is @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_MODERATE_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_BACKGROUND_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_UI_HIDDEN_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_CRITICAL_E@, @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_LOW_E@, or @B_android#content#ComponentCallbacks2#TRIM_MEMORY_RUNNING_MODERATE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the operating system has determined that it is a good time for a process to trim unneeded memory from its process. This will happen for example when it goes in the background and there is not enough memory to keep as many background processes running as desired. You should never compare to exact values of the level, since new intermediate values may be added -- you will typically want to compare if the value is greater or equal to a level you are interested in. To retrieve the processes current trim level at any point, you can use @B_android#app#ActivityManager#getMyMemoryState_E@.", "history": "Added in API level 21", "FullName": "public void onTrimMemory (int level)"}, "VoiceInteractionSessionService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public VoiceInteractionSessionService ()"}, "onLowMemory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the overall system is running low on memory, and actively running processes should trim their memory usage. While the exact point at which this will be called is not defined, generally it will happen when all background process have been killed. That is, before reaching the point of killing processes hosting service and foreground UI that we would like to avoid killing. You should implement this method to release any caches or other unnecessary resources you may be holding on to. The system will perform a garbage collection for you after returning from this method. Preferably, you should implement @B_android#content#ComponentCallbacks2#onTrimMemory_E@ from @B_android#content#ComponentCallbacks2_E@ to incrementally unload your resources based on various levels of memory demands. That API is available for API level 14 and higher, so you should only use this @B_android#content#ComponentCallbacks#onLowMemory_E@ method as a fallback for older versions, which can be treated the same as @B_android#content#ComponentCallbacks2#onTrimMemory_E@ with the @B_android#content#ComponentCallbacks2#TRIM_MEMORY_COMPLETE_E@ level.", "history": "Added in API level 21", "FullName": "public void onLowMemory ()"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the communication channel to the service. May return null if clients can not bind to the service. The returned @B_android#os#IBinder_E@ is usually for a complex interface that has been Note that unlike other application components, calls on to the IBinder interface returned here may not happen on the main thread of the process. More information about the main thread can be found in", "history": "Added in API level 21", "FullName": "public IBinder onBind (Intent intent)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.service.voice.VoiceInteractionSessionService", "ClassDesc": "An active voice interaction session, initiated by a @B_android#service#voice#VoiceInteractionService_E@."}