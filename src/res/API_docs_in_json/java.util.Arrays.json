{"Functions": {"copyOfRange(char[], int, int)": {"Returns": [["char[]", "a new array containing the specified range from the original array, truncated or padded with null characters to obtain the required length"]], "Parameters": [["char[]", "char: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static char[] copyOfRange (char[] original, int from, int to)"}, "fill(java.lang.Object[],java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be filled"], ["@B_java#lang#Object_E@", "Object: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the specified value is not of a runtime type that can be stored in the specified array"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified Object reference to each element of the specified array of Objects.", "history": "Added in API level 1", "FullName": "public static void fill (Object[] a, Object val)"}, "fill(long[],int,int,long)": {"Returns": [], "Parameters": [["long[]", "long: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["long", "long: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified long value to each element of the specified range of the specified array of longs. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (long[] a, int fromIndex, int toIndex, long val)"}, "sort(java.lang.Object[],int,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)."]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects into ascending order, according to the fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in this range must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in this range must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "Added in API level 1", "FullName": "public static void sort (Object[] a, int fromIndex, int toIndex)"}, "parallelSetAll(T[],java.util.function.IntFunction<?extendsT>)": {"Returns": [], "Parameters": [["T[]", "T: array to be initialized"], ["@B_java#util#function#IntFunction_E@", "IntFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element. If the generator function throws an exception, an unchecked exception is thrown from parallelSetAll and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void parallelSetAll (T[] array, IntFunction<? extends T> generator)"}, "fill(short[], short)": {"Returns": [], "Parameters": [["short[]", "short: the array to be filled"], ["short", "short: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified short value to each element of the specified array of shorts.", "history": "added in API level 1", "FullName": "public static void fill (short[] a, short val)"}, "spliterator(long[], int, int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "a spliterator for the array elements"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfLong_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int startInclusive, int endExclusive)"}, "copyOf(T[], int)": {"Returns": [["T[]", "a copy of the original array, truncated or padded with nulls to obtain the specified length"]], "Parameters": [["T[]", "T: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static T[] copyOf (T[] original, int newLength)"}, "toString(int[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["int[]", "int: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (int[] a)"}, "equals(boolean[],boolean[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["boolean[]", "boolean: one array to be tested for equality"], ["boolean[]", "boolean: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (boolean[] a, boolean[] a2)"}, "setAll(long[],java.util.function.IntToLongFunction)": {"Returns": [], "Parameters": [["long[]", "long: array to be initialized"], ["@B_java#util#function#IntToLongFunction_E@", "IntToLongFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, using the provided generator function to compute each element. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void setAll (long[] array, IntToLongFunction generator)"}, "copyOf(char[], int)": {"Returns": [["char[]", "a copy of the original array, truncated or padded with null characters to obtain the specified length"]], "Parameters": [["char[]", "char: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static char[] copyOf (char[] original, int newLength)"}, "binarySearch(char[], int, int, char)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["char[]", "char: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["char", "char: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of chars for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 9", "FullName": "public static int binarySearch (char[] a, int fromIndex, int toIndex, char key)"}, "copyOfRange(boolean[],int,int)": {"Returns": [["boolean[]", "a new array containing the specified range from the original array, truncated or padded with false elements to obtain the required length"]], "Parameters": [["boolean[]", "boolean: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static boolean[] copyOfRange (boolean[] original, int from, int to)"}, "spliterator(long[])": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "the spliterator for the array elements"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfLong_E@ covering all of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array)"}, "fill(long[], int, int, long)": {"Returns": [], "Parameters": [["long[]", "long: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["long", "long: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified long value to each element of the specified range of the specified array of longs. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (long[] a, int fromIndex, int toIndex, long val)"}, "hashCode(char[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["char[]", "char: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Character_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (char[] a)"}, "copyOf(double[], int)": {"Returns": [["double[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["double[]", "double: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static double[] copyOf (double[] original, int newLength)"}, "binarySearch(float[],float)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["float[]", "float: the array to be searched"], ["float", "float: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of floats for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "Added in API level 1", "FullName": "public static int binarySearch (float[] a, float key)"}, "copyOf(double[],int)": {"Returns": [["double[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["double[]", "double: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static double[] copyOf (double[] original, int newLength)"}, "copyOfRange(char[],int,int)": {"Returns": [["char[]", "a new array containing the specified range from the original array, truncated or padded with null characters to obtain the required length"]], "Parameters": [["char[]", "char: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static char[] copyOfRange (char[] original, int from, int to)"}, "deepHashCode(java.lang.Object[])": {"Returns": [["int", "a deep-content-based hash code for a"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array whose deep-content-based hash code to compute"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#hashCode_E@"], "Permissions": [], "Description": "Returns a hash code based on the \"deep contents\" of the specified array. If the array contains other arrays as elements, the hash code is based on their contents and so on, ad infinitum. It is therefore unacceptable to invoke this method on an array that contains itself as an element, either directly or indirectly through one or more levels of arrays. The behavior of such an invocation is undefined. For any two arrays The computation of the value returned by this method is similar to that of the value returned by @B_java#util#List#hashCode_E@ on a list containing the same elements as", "history": "Added in API level 1", "FullName": "public static int deepHashCode (Object[] a)"}, "copyOfRange(boolean[], int, int)": {"Returns": [["boolean[]", "a new array containing the specified range from the original array, truncated or padded with false elements to obtain the required length"]], "Parameters": [["boolean[]", "boolean: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static boolean[] copyOfRange (boolean[] original, int from, int to)"}, "fill(short[],short)": {"Returns": [], "Parameters": [["short[]", "short: the array to be filled"], ["short", "short: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified short value to each element of the specified array of shorts.", "history": "Added in API level 1", "FullName": "public static void fill (short[] a, short val)"}, "fill(double[],double)": {"Returns": [], "Parameters": [["double[]", "double: the array to be filled"], ["double", "double: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified double value to each element of the specified array of doubles.", "history": "Added in API level 1", "FullName": "public static void fill (double[] a, double val)"}, "binarySearch(java.lang.Object[],int,int,java.lang.Object)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["@B_java#lang#Object_E@", "Object: the value to be searched for"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the search key is not comparable to the elements of the array within the specified range."], ["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array for the specified object using the binary search algorithm. The range must be sorted into ascending order according to the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. (If the range contains elements that are not mutually comparable (for example, strings and integers), it", "history": "Added in API level 9", "FullName": "public static int binarySearch (Object[] a, int fromIndex, int toIndex, Object key)"}, "equals(double[], double[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["double[]", "double: one array to be tested for equality"], ["double[]", "double: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#equals_E@"], "Permissions": [], "Description": "Returns Two doubles", "history": "added in API level 1", "FullName": "public static boolean equals (double[] a, double[] a2)"}, "sort(short[])": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (short[] a)"}, "binarySearch(int[], int)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["int[]", "int: the array to be searched"], ["int", "int: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of ints for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 1", "FullName": "public static int binarySearch (int[] a, int key)"}, "copyOf(char[],int)": {"Returns": [["char[]", "a copy of the original array, truncated or padded with null characters to obtain the specified length"]], "Parameters": [["char[]", "char: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with null characters (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static char[] copyOf (char[] original, int newLength)"}, "binarySearch(byte[], byte)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["byte[]", "byte: the array to be searched"], ["byte", "byte: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of bytes for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 1", "FullName": "public static int binarySearch (byte[] a, byte key)"}, "parallelSort(int[])": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order.", "history": "Added in API level 24", "FullName": "public static void parallelSort (int[] a)"}, "sort(float[])": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (float[] a)"}, "equals(long[],long[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["long[]", "long: one array to be tested for equality"], ["long[]", "long: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (long[] a, long[] a2)"}, "fill(java.lang.Object[], java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be filled"], ["@B_java#lang#Object_E@", "Object: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the specified value is not of a runtime type that can be stored in the specified array"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified Object reference to each element of the specified array of Objects.", "history": "added in API level 1", "FullName": "public static void fill (Object[] a, Object val)"}, "toString(boolean[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["boolean[]", "boolean: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (boolean[] a)"}, "sort(int[])": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (int[] a)"}, "binarySearch(int[],int)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["int[]", "int: the array to be searched"], ["int", "int: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of ints for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (int[] a, int key)"}, "copyOf(boolean[],int)": {"Returns": [["boolean[]", "a copy of the original array, truncated or padded with false elements to obtain the specified length"]], "Parameters": [["boolean[]", "boolean: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with", "history": "Added in API level 9", "FullName": "public static boolean[] copyOf (boolean[] original, int newLength)"}, "equals(byte[], byte[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["byte[]", "byte: one array to be tested for equality"], ["byte[]", "byte: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (byte[] a, byte[] a2)"}, "fill(byte[],byte)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be filled"], ["byte", "byte: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified byte value to each element of the specified array of bytes.", "history": "Added in API level 1", "FullName": "public static void fill (byte[] a, byte val)"}, "parallelSetAll(double[],java.util.function.IntToDoubleFunction)": {"Returns": [], "Parameters": [["double[]", "double: array to be initialized"], ["@B_java#util#function#IntToDoubleFunction_E@", "IntToDoubleFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element. If the generator function throws an exception, an unchecked exception is thrown from parallelSetAll and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void parallelSetAll (double[] array, IntToDoubleFunction generator)"}, "parallelSort(T[], int, int)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)."]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects into ascending order, according to the fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in this range must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in this range must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be", "history": "added in API level 24", "FullName": "public static void parallelSort (T[] a, int fromIndex, int toIndex)"}, "stream(int[],int,int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream for the array range"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#IntStream_E@ with the specified range of the specified array as its source.", "history": "Added in API level 24", "FullName": "public static IntStream stream (int[] array, int startInclusive, int endExclusive)"}, "parallelPrefix(T[],java.util.function.BinaryOperator<T>)": {"Returns": [], "Parameters": [["T[]", "T: the array, which is modified in-place by this method"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Cumulates, in parallel, each element of the given array in place, using the supplied function. For example if the array initially holds [2, 1, 0, 3] and the operation performs addition, then upon return the array holds [2, 3, 3, 6]. Parallel prefix computation is usually more efficient than sequential loops for large arrays.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (T[] array, BinaryOperator<T> op)"}, "fill(byte[],int,int,byte)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["byte", "byte: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified byte value to each element of the specified range of the specified array of bytes. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (byte[] a, int fromIndex, int toIndex, byte val)"}, "parallelSort(double[],int,int)": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal.", "history": "Added in API level 24", "FullName": "public static void parallelSort (double[] a, int fromIndex, int toIndex)"}, "parallelSort(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "added in API level 24", "FullName": "public static void parallelSort (char[] a, int fromIndex, int toIndex)"}, "sort(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (byte[] a, int fromIndex, int toIndex)"}, "binarySearch(short[], int, int, short)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["short[]", "short: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["short", "short: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of shorts for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 9", "FullName": "public static int binarySearch (short[] a, int fromIndex, int toIndex, short key)"}, "fill(boolean[], int, int, boolean)": {"Returns": [], "Parameters": [["boolean[]", "boolean: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["boolean", "boolean: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified boolean value to each element of the specified range of the specified array of booleans. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (boolean[] a, int fromIndex, int toIndex, boolean val)"}, "toString(byte[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["byte[]", "byte: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (byte[] a)"}, "equals(float[], float[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["float[]", "float: one array to be tested for equality"], ["float[]", "float: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#equals_E@"], "Permissions": [], "Description": "Returns Two floats", "history": "added in API level 1", "FullName": "public static boolean equals (float[] a, float[] a2)"}, "parallelSort(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "added in API level 24", "FullName": "public static void parallelSort (byte[] a, int fromIndex, int toIndex)"}, "parallelSort(long[])": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order.", "history": "Added in API level 24", "FullName": "public static void parallelSort (long[] a)"}, "parallelSort(float[], int, int)": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal.", "history": "added in API level 24", "FullName": "public static void parallelSort (float[] a, int fromIndex, int toIndex)"}, "fill(char[],char)": {"Returns": [], "Parameters": [["char[]", "char: the array to be filled"], ["char", "char: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified char value to each element of the specified array of chars.", "history": "Added in API level 1", "FullName": "public static void fill (char[] a, char val)"}, "asList(T...)": {"Returns": [["@B_java#util#List_E@", "a list view of the specified array"]], "Parameters": [["T...", "T: the array by which the list will be backed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a fixed-size list backed by the specified array. (Changes to the returned list \"write through\" to the array.) This method acts as bridge between array-based and collection-based APIs, in combination with @B_java#util#Collection#toArray_E@. The returned list is serializable and implements @B_java#util#RandomAccess_E@. This method also provides a convenient way to create a fixed-size list initialized to contain several elements:", "history": "Added in API level 1", "FullName": "public static List<T> asList (T... a)"}, "fill(float[],float)": {"Returns": [], "Parameters": [["float[]", "float: the array to be filled"], ["float", "float: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified float value to each element of the specified array of floats.", "history": "Added in API level 1", "FullName": "public static void fill (float[] a, float val)"}, "fill(float[], float)": {"Returns": [], "Parameters": [["float[]", "float: the array to be filled"], ["float", "float: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified float value to each element of the specified array of floats.", "history": "added in API level 1", "FullName": "public static void fill (float[] a, float val)"}, "toString(java.lang.Object[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array whose string representation to return"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#deepToString_E@"], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. If the array contains other arrays as elements, they are converted to strings by the @B_java#lang#Object#toString_E@ method inherited from The value returned by this method is equal to the value that would be returned by", "history": "Added in API level 1", "FullName": "public static String toString (Object[] a)"}, "fill(boolean[],boolean)": {"Returns": [], "Parameters": [["boolean[]", "boolean: the array to be filled"], ["boolean", "boolean: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified boolean value to each element of the specified array of booleans.", "history": "Added in API level 1", "FullName": "public static void fill (boolean[] a, boolean val)"}, "binarySearch(float[], float)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["float[]", "float: the array to be searched"], ["float", "float: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of floats for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "added in API level 1", "FullName": "public static int binarySearch (float[] a, float key)"}, "sort(float[],int,int)": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (float[] a, int fromIndex, int toIndex)"}, "spliterator(int[],int,int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "a spliterator for the array elements"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfInt_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int startInclusive, int endExclusive)"}, "toString(double[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["double[]", "double: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (double[] a)"}, "parallelPrefix(long[],int,int,java.util.function.LongBinaryOperator)": {"Returns": [], "Parameters": [["long[]", "long: the array"], ["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > array.length"], ["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs @B_java#util#Arrays#parallelPrefix_E@ for the given subrange of the array.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (long[] array, int fromIndex, int toIndex, LongBinaryOperator op)"}, "parallelSort(T[],int,int,java.util.Comparator<?superT>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)."]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in the range must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the range). This sort is guaranteed to be", "history": "Added in API level 24", "FullName": "public static void parallelSort (T[] a, int fromIndex, int toIndex, Comparator<? super T> cmp)"}, "copyOf(long[], int)": {"Returns": [["long[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["long[]", "long: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static long[] copyOf (long[] original, int newLength)"}, "sort(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (char[] a, int fromIndex, int toIndex)"}, "parallelSort(T[],int,int)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)."]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects into ascending order, according to the fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in this range must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in this range must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be", "history": "Added in API level 24", "FullName": "public static void parallelSort (T[] a, int fromIndex, int toIndex)"}, "parallelSort(short[],int,int)": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "Added in API level 24", "FullName": "public static void parallelSort (short[] a, int fromIndex, int toIndex)"}, "binarySearch(long[], long)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["long[]", "long: the array to be searched"], ["long", "long: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of longs for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 1", "FullName": "public static int binarySearch (long[] a, long key)"}, "parallelSetAll(long[],java.util.function.IntToLongFunction)": {"Returns": [], "Parameters": [["long[]", "long: array to be initialized"], ["@B_java#util#function#IntToLongFunction_E@", "IntToLongFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element. If the generator function throws an exception, an unchecked exception is thrown from parallelSetAll and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void parallelSetAll (long[] array, IntToLongFunction generator)"}, "fill(double[],int,int,double)": {"Returns": [], "Parameters": [["double[]", "double: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["double", "double: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified double value to each element of the specified range of the specified array of doubles. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (double[] a, int fromIndex, int toIndex, double val)"}, "sort(short[], int, int)": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (short[] a, int fromIndex, int toIndex)"}, "binarySearch(float[],int,int,float)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["float[]", "float: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["float", "float: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of floats for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "Added in API level 9", "FullName": "public static int binarySearch (float[] a, int fromIndex, int toIndex, float key)"}, "spliterator(double[])": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "a spliterator for the array elements"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfDouble_E@ covering all of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array)"}, "binarySearch(int[],int,int,int)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["int[]", "int: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["int", "int: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of ints for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (int[] a, int fromIndex, int toIndex, int key)"}, "copyOf(float[],int)": {"Returns": [["float[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["float[]", "float: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static float[] copyOf (float[] original, int newLength)"}, "copyOfRange(T[], int, int)": {"Returns": [["T[]", "a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length"]], "Parameters": [["T[]", "T: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range ( The resulting array is of exactly the same class as the original array.", "history": "added in API level 9", "FullName": "public static T[] copyOfRange (T[] original, int from, int to)"}, "parallelSort(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "Added in API level 24", "FullName": "public static void parallelSort (byte[] a, int fromIndex, int toIndex)"}, "hashCode(java.lang.Object[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array whose content-based hash code to compute"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#deepHashCode_E@"], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. If the array contains other arrays as elements, the hash code is based on their identities rather than their contents. It is therefore acceptable to invoke this method on an array that contains itself as an element, either directly or indirectly through one or more levels of arrays. For any two arrays The value returned by this method is equal to the value that would be returned by", "history": "Added in API level 1", "FullName": "public static int hashCode (Object[] a)"}, "binarySearch(short[],int,int,short)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["short[]", "short: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["short", "short: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of shorts for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (short[] a, int fromIndex, int toIndex, short key)"}, "copyOfRange(double[],int,int)": {"Returns": [["double[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["double[]", "double: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static double[] copyOfRange (double[] original, int from, int to)"}, "hashCode(boolean[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["boolean[]", "boolean: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Boolean_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (boolean[] a)"}, "equals(short[],short[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["short[]", "short: one array to be tested for equality"], ["short[]", "short: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (short[] a, short[] a2)"}, "binarySearch(T[],int,int,T,java.util.Comparator<?superT>)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["T[]", "T: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["T", "T: the value to be searched for"], ["@B_java#util#Comparator_E@", "Comparator: the comparator by which the array is ordered. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the range contains elements that are not mutually comparable using the specified comparator, or the search key is not comparable to the elements in the range using this comparator."], ["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array for the specified object using the binary search algorithm. The range must be sorted into ascending order according to the specified comparator (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements equal to the specified object, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (T[] a, int fromIndex, int toIndex, T key, Comparator<? super T> c)"}, "binarySearch(char[],int,int,char)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["char[]", "char: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["char", "char: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of chars for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (char[] a, int fromIndex, int toIndex, char key)"}, "parallelSort(float[])": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal.", "history": "Added in API level 24", "FullName": "public static void parallelSort (float[] a)"}, "spliterator(T[])": {"Returns": [["@B_java#util#Spliterator_E@", "a spliterator for the array elements"]], "Parameters": [["T[]", "T: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ covering all of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (T[] array)"}, "sort(float[], int, int)": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (float[] a, int fromIndex, int toIndex)"}, "deepToString(java.lang.Object[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array whose string representation to return"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#toString_E@"], "Permissions": [], "Description": "Returns a string representation of the \"deep contents\" of the specified array. If the array contains other arrays as elements, the string representation contains their contents and so on. This method is designed for converting multidimensional arrays to strings. The string representation consists of a list of the array's elements, enclosed in square brackets (If an element To avoid infinite recursion, if the specified array contains itself as an element, or contains an indirect reference to itself through one or more levels of arrays, the self-reference is converted to the string This method returns", "history": "Added in API level 1", "FullName": "public static String deepToString (Object[] a)"}, "binarySearch(char[], char)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["char[]", "char: the array to be searched"], ["char", "char: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of chars for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 1", "FullName": "public static int binarySearch (char[] a, char key)"}, "copyOf(long[],int)": {"Returns": [["long[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["long[]", "long: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static long[] copyOf (long[] original, int newLength)"}, "spliterator(double[],int,int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "a spliterator for the array elements"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfDouble_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int startInclusive, int endExclusive)"}, "toString(float[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["float[]", "float: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (float[] a)"}, "fill(java.lang.Object[],int,int,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["@B_java#lang#Object_E@", "Object: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ArrayStoreException_E@", "if the specified value is not of a runtime type that can be stored in the specified array"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified Object reference to each element of the specified range of the specified array of Objects. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (Object[] a, int fromIndex, int toIndex, Object val)"}, "copyOf(float[], int)": {"Returns": [["float[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["float[]", "float: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static float[] copyOf (float[] original, int newLength)"}, "stream(long[])": {"Returns": [["@B_java#util#stream#LongStream_E@", "a LongStream for the array"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#LongStream_E@ with the specified array as its source.", "history": "Added in API level 24", "FullName": "public static LongStream stream (long[] array)"}, "binarySearch(char[],char)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["char[]", "char: the array to be searched"], ["char", "char: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of chars for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (char[] a, char key)"}, "fill(boolean[],int,int,boolean)": {"Returns": [], "Parameters": [["boolean[]", "boolean: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["boolean", "boolean: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified boolean value to each element of the specified range of the specified array of booleans. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (boolean[] a, int fromIndex, int toIndex, boolean val)"}, "stream(int[], int, int)": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream for the array range"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#IntStream_E@ with the specified range of the specified array as its source.", "history": "added in API level 24", "FullName": "public static IntStream stream (int[] array, int startInclusive, int endExclusive)"}, "setAll(T[],java.util.function.IntFunction<?extendsT>)": {"Returns": [], "Parameters": [["T[]", "T: array to be initialized"], ["@B_java#util#function#IntFunction_E@", "IntFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, using the provided generator function to compute each element. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void setAll (T[] array, IntFunction<? extends T> generator)"}, "equals(byte[],byte[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["byte[]", "byte: one array to be tested for equality"], ["byte[]", "byte: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (byte[] a, byte[] a2)"}, "copyOfRange(long[], int, int)": {"Returns": [["long[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["long[]", "long: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static long[] copyOfRange (long[] original, int from, int to)"}, "spliterator(long[],int,int)": {"Returns": [["@B_java#util#Spliterator#OfLong_E@", "a spliterator for the array elements"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfLong_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfLong spliterator (long[] array, int startInclusive, int endExclusive)"}, "hashCode(long[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["long[]", "long: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Long_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (long[] a)"}, "parallelSort(int[],int,int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "Added in API level 24", "FullName": "public static void parallelSort (int[] a, int fromIndex, int toIndex)"}, "sort(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (char[] a, int fromIndex, int toIndex)"}, "copyOfRange(short[],int,int)": {"Returns": [["short[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["short[]", "short: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static short[] copyOfRange (short[] original, int from, int to)"}, "parallelSort(T[], java.util.Comparator<? super T>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' natural ordering should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects according to the order induced by the specified comparator. All elements in the array must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be", "history": "added in API level 24", "FullName": "public static void parallelSort (T[] a, Comparator<? super T> cmp)"}, "hashCode(double[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["double[]", "double: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Double_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (double[] a)"}, "deepEquals(java.lang.Object[], java.lang.Object[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: one array to be tested for equality"], ["@B_java#lang#Object_E@", "Object: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#equals_E@", "@B_java#util#Objects#deepEquals_E@"], "Permissions": [], "Description": "Returns @B_java#util#Arrays#equals_E@ method, this method is appropriate for use with nested arrays of arbitrary depth. Two array references are considered deeply equal if both are Two possibly Note that this definition permits If either of the specified arrays contain themselves as elements either directly or indirectly through one or more levels of arrays, the behavior of this method is undefined.", "history": "added in API level 1", "FullName": "public static boolean deepEquals (Object[] a1, Object[] a2)"}, "parallelSort(double[], int, int)": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal.", "history": "added in API level 24", "FullName": "public static void parallelSort (double[] a, int fromIndex, int toIndex)"}, "fill(short[], int, int, short)": {"Returns": [], "Parameters": [["short[]", "short: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["short", "short: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified short value to each element of the specified range of the specified array of shorts. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (short[] a, int fromIndex, int toIndex, short val)"}, "binarySearch(byte[],int,int,byte)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["byte[]", "byte: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["byte", "byte: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of bytes for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (byte[] a, int fromIndex, int toIndex, byte key)"}, "binarySearch(double[], double)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["double[]", "double: the array to be searched"], ["double", "double: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of doubles for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "added in API level 1", "FullName": "public static int binarySearch (double[] a, double key)"}, "copyOfRange(int[],int,int)": {"Returns": [["int[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["int[]", "int: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static int[] copyOfRange (int[] original, int from, int to)"}, "setAll(int[],java.util.function.IntUnaryOperator)": {"Returns": [], "Parameters": [["int[]", "int: array to be initialized"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, using the provided generator function to compute each element. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void setAll (int[] array, IntUnaryOperator generator)"}, "sort(int[],int,int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (int[] a, int fromIndex, int toIndex)"}, "parallelSort(int[], int, int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "added in API level 24", "FullName": "public static void parallelSort (int[] a, int fromIndex, int toIndex)"}, "equals(double[],double[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["double[]", "double: one array to be tested for equality"], ["double[]", "double: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Double#equals_E@"], "Permissions": [], "Description": "Returns Two doubles", "history": "Added in API level 1", "FullName": "public static boolean equals (double[] a, double[] a2)"}, "parallelSort(long[], int, int)": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "added in API level 24", "FullName": "public static void parallelSort (long[] a, int fromIndex, int toIndex)"}, "fill(double[], double)": {"Returns": [], "Parameters": [["double[]", "double: the array to be filled"], ["double", "double: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified double value to each element of the specified array of doubles.", "history": "added in API level 1", "FullName": "public static void fill (double[] a, double val)"}, "fill(boolean[], boolean)": {"Returns": [], "Parameters": [["boolean[]", "boolean: the array to be filled"], ["boolean", "boolean: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified boolean value to each element of the specified array of booleans.", "history": "added in API level 1", "FullName": "public static void fill (boolean[] a, boolean val)"}, "parallelSort(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order.", "history": "Added in API level 24", "FullName": "public static void parallelSort (byte[] a)"}, "fill(double[], int, int, double)": {"Returns": [], "Parameters": [["double[]", "double: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["double", "double: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified double value to each element of the specified range of the specified array of doubles. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (double[] a, int fromIndex, int toIndex, double val)"}, "sort(double[],int,int)": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (double[] a, int fromIndex, int toIndex)"}, "equals(long[], long[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["long[]", "long: one array to be tested for equality"], ["long[]", "long: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (long[] a, long[] a2)"}, "copyOfRange(float[], int, int)": {"Returns": [["float[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["float[]", "float: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static float[] copyOfRange (float[] original, int from, int to)"}, "spliterator(int[])": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "a spliterator for the array elements"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfInt_E@ covering all of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array)"}, "setAll(int[], java.util.function.IntUnaryOperator)": {"Returns": [], "Parameters": [["int[]", "int: array to be initialized"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, using the provided generator function to compute each element. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state.", "history": "added in API level 24", "FullName": "public static void setAll (int[] array, IntUnaryOperator generator)"}, "binarySearch(short[],short)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["short[]", "short: the array to be searched"], ["short", "short: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of shorts for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (short[] a, short key)"}, "parallelSort(short[], int, int)": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "added in API level 24", "FullName": "public static void parallelSort (short[] a, int fromIndex, int toIndex)"}, "binarySearch(java.lang.Object[],java.lang.Object)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be searched"], ["@B_java#lang#Object_E@", "Object: the value to be searched for"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the search key is not comparable to the elements of the array."]], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array for the specified object using the binary search algorithm. The array must be sorted into ascending order according to the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. (If the array contains elements that are not mutually comparable (for example, strings and integers), it", "history": "Added in API level 1", "FullName": "public static int binarySearch (Object[] a, Object key)"}, "sort(short[],int,int)": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (short[] a, int fromIndex, int toIndex)"}, "binarySearch(double[],double)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["double[]", "double: the array to be searched"], ["double", "double: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of doubles for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "Added in API level 1", "FullName": "public static int binarySearch (double[] a, double key)"}, "stream(T[],int,int)": {"Returns": [["@B_java#util#stream#Stream_E@", "a Stream for the array range"]], "Parameters": [["T[]", "T: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#Stream_E@ with the specified range of the specified array as its source.", "history": "Added in API level 24", "FullName": "public static Stream<T> stream (T[] array, int startInclusive, int endExclusive)"}, "fill(long[], long)": {"Returns": [], "Parameters": [["long[]", "long: the array to be filled"], ["long", "long: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified long value to each element of the specified array of longs.", "history": "added in API level 1", "FullName": "public static void fill (long[] a, long val)"}, "copyOfRange(byte[], int, int)": {"Returns": [["byte[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["byte[]", "byte: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static byte[] copyOfRange (byte[] original, int from, int to)"}, "parallelPrefix(double[],java.util.function.DoubleBinaryOperator)": {"Returns": [], "Parameters": [["double[]", "double: the array, which is modified in-place by this method"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a side-effect-free function to perform the cumulation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Cumulates, in parallel, each element of the given array in place, using the supplied function. For example if the array initially holds [2.0, 1.0, 0.0, 3.0] and the operation performs addition, then upon return the array holds [2.0, 3.0, 3.0, 6.0]. Parallel prefix computation is usually more efficient than sequential loops for large arrays. Because floating-point operations may not be strictly associative, the returned result may not be identical to the value that would be obtained if the operation was performed sequentially.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (double[] array, DoubleBinaryOperator op)"}, "sort(T[], java.util.Comparator<? super T>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' natural ordering should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects according to the order induced by the specified comparator. All elements in the array must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "added in API level 1", "FullName": "public static void sort (T[] a, Comparator<? super T> c)"}, "fill(float[],int,int,float)": {"Returns": [], "Parameters": [["float[]", "float: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["float", "float: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified float value to each element of the specified range of the specified array of floats. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (float[] a, int fromIndex, int toIndex, float val)"}, "spliterator(double[], int, int)": {"Returns": [["@B_java#util#Spliterator#OfDouble_E@", "a spliterator for the array elements"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfDouble_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "added in API level 24", "FullName": "public static Spliterator.OfDouble spliterator (double[] array, int startInclusive, int endExclusive)"}, "toString(short[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["short[]", "short: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (short[] a)"}, "parallelSort(short[])": {"Returns": [], "Parameters": [["short[]", "short: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order.", "history": "Added in API level 24", "FullName": "public static void parallelSort (short[] a)"}, "spliterator(T[],int,int)": {"Returns": [["@B_java#util#Spliterator_E@", "a spliterator for the array elements"]], "Parameters": [["T[]", "T: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "Added in API level 24", "FullName": "public static Spliterator<T> spliterator (T[] array, int startInclusive, int endExclusive)"}, "binarySearch(long[], int, int, long)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["long[]", "long: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["long", "long: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of longs for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 9", "FullName": "public static int binarySearch (long[] a, int fromIndex, int toIndex, long key)"}, "fill(long[],long)": {"Returns": [], "Parameters": [["long[]", "long: the array to be filled"], ["long", "long: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified long value to each element of the specified array of longs.", "history": "Added in API level 1", "FullName": "public static void fill (long[] a, long val)"}, "copyOf(T[],int)": {"Returns": [["T[]", "a copy of the original array, truncated or padded with nulls to obtain the specified length"]], "Parameters": [["T[]", "T: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static T[] copyOf (T[] original, int newLength)"}, "copyOfRange(T[],int,int)": {"Returns": [["T[]", "a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length"]], "Parameters": [["T[]", "T: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range ( The resulting array is of exactly the same class as the original array.", "history": "Added in API level 9", "FullName": "public static T[] copyOfRange (T[] original, int from, int to)"}, "parallelSort(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "Added in API level 24", "FullName": "public static void parallelSort (char[] a, int fromIndex, int toIndex)"}, "equals(java.lang.Object[], java.lang.Object[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: one array to be tested for equality"], ["@B_java#lang#Object_E@", "Object: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (Object[] a, Object[] a2)"}, "toString(char[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["char[]", "char: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (char[] a)"}, "copyOfRange(byte[],int,int)": {"Returns": [["byte[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["byte[]", "byte: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static byte[] copyOfRange (byte[] original, int from, int to)"}, "deepEquals(java.lang.Object[],java.lang.Object[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: one array to be tested for equality"], ["@B_java#lang#Object_E@", "Object: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#equals_E@", "@B_java#util#Objects#deepEquals_E@"], "Permissions": [], "Description": "Returns @B_java#util#Arrays#equals_E@ method, this method is appropriate for use with nested arrays of arbitrary depth. Two array references are considered deeply equal if both are Two possibly Note that this definition permits If either of the specified arrays contain themselves as elements either directly or indirectly through one or more levels of arrays, the behavior of this method is undefined.", "history": "Added in API level 1", "FullName": "public static boolean deepEquals (Object[] a1, Object[] a2)"}, "fill(int[], int, int, int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["int", "int: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified int value to each element of the specified range of the specified array of ints. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (int[] a, int fromIndex, int toIndex, int val)"}, "copyOf(U[],int,java.lang.Class<?extendsT[]>)": {"Returns": [["T[]", "a copy of the original array, truncated or padded with nulls to obtain the specified length"]], "Parameters": [["U[]", "U: the array to be copied"], ["int", "int: the length of the copy to be returned"], ["@B_java#lang#Class_E@", "Class: the class of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"], ["@B_java#lang#ArrayStoreException_E@", "if an element copied from original is not of a runtime type that can be stored in an array of class newType"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static T[] copyOf (U[] original, int newLength, Class<? extends T[]> newType)"}, "copyOf(int[], int)": {"Returns": [["int[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["int[]", "int: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static int[] copyOf (int[] original, int newLength)"}, "sort(long[], int, int)": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (long[] a, int fromIndex, int toIndex)"}, "equals(java.lang.Object[],java.lang.Object[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["@B_java#lang#Object_E@", "Object: one array to be tested for equality"], ["@B_java#lang#Object_E@", "Object: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (Object[] a, Object[] a2)"}, "spliterator(int[], int, int)": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "a spliterator for the array elements"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator#OfInt_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "added in API level 24", "FullName": "public static Spliterator.OfInt spliterator (int[] array, int startInclusive, int endExclusive)"}, "parallelPrefix(double[],int,int,java.util.function.DoubleBinaryOperator)": {"Returns": [], "Parameters": [["double[]", "double: the array"], ["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"], ["@B_java#util#function#DoubleBinaryOperator_E@", "DoubleBinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > array.length"], ["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs @B_java#util#Arrays#parallelPrefix_E@ for the given subrange of the array.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (double[] array, int fromIndex, int toIndex, DoubleBinaryOperator op)"}, "sort(T[],java.util.Comparator<?superT>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects according to the order induced by the specified comparator. All elements in the array must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "Added in API level 1", "FullName": "public static void sort (T[] a, Comparator<? super T> c)"}, "stream(T[])": {"Returns": [["@B_java#util#stream#Stream_E@", "a Stream for the array"]], "Parameters": [["T[]", "T: The array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#Stream_E@ with the specified array as its source.", "history": "Added in API level 24", "FullName": "public static Stream<T> stream (T[] array)"}, "stream(T[], int, int)": {"Returns": [["@B_java#util#stream#Stream_E@", "a Stream for the array range"]], "Parameters": [["T[]", "T: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#Stream_E@ with the specified range of the specified array as its source.", "history": "added in API level 24", "FullName": "public static Stream<T> stream (T[] array, int startInclusive, int endExclusive)"}, "parallelSort(T[],java.util.Comparator<?superT>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects according to the order induced by the specified comparator. All elements in the array must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be", "history": "Added in API level 24", "FullName": "public static void parallelSort (T[] a, Comparator<? super T> cmp)"}, "fill(byte[], int, int, byte)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["byte", "byte: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified byte value to each element of the specified range of the specified array of bytes. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (byte[] a, int fromIndex, int toIndex, byte val)"}, "equals(char[],char[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["char[]", "char: one array to be tested for equality"], ["char[]", "char: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (char[] a, char[] a2)"}, "sort(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (byte[] a, int fromIndex, int toIndex)"}, "sort(java.lang.Object[])": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be sorted"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects into ascending order, according to the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in the array must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "Added in API level 1", "FullName": "public static void sort (Object[] a)"}, "hashCode(float[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["float[]", "float: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Float_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (float[] a)"}, "sort(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (byte[] a)"}, "equals(int[],int[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["int[]", "int: one array to be tested for equality"], ["int[]", "int: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public static boolean equals (int[] a, int[] a2)"}, "parallelSort(long[],int,int)": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty.", "history": "Added in API level 24", "FullName": "public static void parallelSort (long[] a, int fromIndex, int toIndex)"}, "equals(short[], short[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["short[]", "short: one array to be tested for equality"], ["short[]", "short: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (short[] a, short[] a2)"}, "parallelSort(double[])": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal.", "history": "Added in API level 24", "FullName": "public static void parallelSort (double[] a)"}, "stream(double[], int, int)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a DoubleStream for the array range"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#DoubleStream_E@ with the specified range of the specified array as its source.", "history": "added in API level 24", "FullName": "public static DoubleStream stream (double[] array, int startInclusive, int endExclusive)"}, "hashCode(short[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["short[]", "short: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Short_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (short[] a)"}, "stream(double[],int,int)": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a DoubleStream for the array range"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#DoubleStream_E@ with the specified range of the specified array as its source.", "history": "Added in API level 24", "FullName": "public static DoubleStream stream (double[] array, int startInclusive, int endExclusive)"}, "stream(long[], int, int)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a LongStream for the array range"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#LongStream_E@ with the specified range of the specified array as its source.", "history": "added in API level 24", "FullName": "public static LongStream stream (long[] array, int startInclusive, int endExclusive)"}, "copyOf(short[], int)": {"Returns": [["short[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["short[]", "short: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static short[] copyOf (short[] original, int newLength)"}, "equals(boolean[], boolean[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["boolean[]", "boolean: one array to be tested for equality"], ["boolean[]", "boolean: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (boolean[] a, boolean[] a2)"}, "copyOfRange(double[], int, int)": {"Returns": [["double[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["double[]", "double: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static double[] copyOfRange (double[] original, int from, int to)"}, "parallelPrefix(int[],int,int,java.util.function.IntBinaryOperator)": {"Returns": [], "Parameters": [["int[]", "int: the array"], ["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > array.length"], ["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs @B_java#util#Arrays#parallelPrefix_E@ for the given subrange of the array.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (int[] array, int fromIndex, int toIndex, IntBinaryOperator op)"}, "fill(char[], int, int, char)": {"Returns": [], "Parameters": [["char[]", "char: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["char", "char: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified char value to each element of the specified range of the specified array of chars. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (char[] a, int fromIndex, int toIndex, char val)"}, "stream(long[],int,int)": {"Returns": [["@B_java#util#stream#LongStream_E@", "a LongStream for the array range"]], "Parameters": [["long[]", "long: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#LongStream_E@ with the specified range of the specified array as its source.", "history": "Added in API level 24", "FullName": "public static LongStream stream (long[] array, int startInclusive, int endExclusive)"}, "copyOfRange(short[], int, int)": {"Returns": [["short[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["short[]", "short: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static short[] copyOfRange (short[] original, int from, int to)"}, "copyOfRange(int[], int, int)": {"Returns": [["int[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["int[]", "int: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "added in API level 9", "FullName": "public static int[] copyOfRange (int[] original, int from, int to)"}, "spliterator(T[], int, int)": {"Returns": [["@B_java#util#Spliterator_E@", "a spliterator for the array elements"]], "Parameters": [["T[]", "T: the array, assumed to be unmodified during use"], ["int", "int: the first index to cover, inclusive"], ["int", "int: index immediately past the last index to cover"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if startInclusive is negative, endExclusive is less than startInclusive, or endExclusive is greater than the array size"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ covering the specified range of the specified array. The spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#IMMUTABLE_E@.", "history": "added in API level 24", "FullName": "public static Spliterator<T> spliterator (T[] array, int startInclusive, int endExclusive)"}, "parallelPrefix(int[],java.util.function.IntBinaryOperator)": {"Returns": [], "Parameters": [["int[]", "int: the array, which is modified in-place by this method"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Cumulates, in parallel, each element of the given array in place, using the supplied function. For example if the array initially holds [2, 1, 0, 3] and the operation performs addition, then upon return the array holds [2, 3, 3, 6]. Parallel prefix computation is usually more efficient than sequential loops for large arrays.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (int[] array, IntBinaryOperator op)"}, "copyOf(byte[], int)": {"Returns": [["byte[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["byte[]", "byte: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static byte[] copyOf (byte[] original, int newLength)"}, "fill(int[],int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be filled"], ["int", "int: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified int value to each element of the specified array of ints.", "history": "Added in API level 1", "FullName": "public static void fill (int[] a, int val)"}, "parallelPrefix(T[],int,int,java.util.function.BinaryOperator<T>)": {"Returns": [], "Parameters": [["T[]", "T: the array"], ["int", "int: the index of the first element, inclusive"], ["int", "int: the index of the last element, exclusive"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > array.length"], ["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Performs @B_java#util#Arrays#parallelPrefix_E@ for the given subrange of the array.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (T[] array, int fromIndex, int toIndex, BinaryOperator<T> op)"}, "sort(int[], int, int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (int[] a, int fromIndex, int toIndex)"}, "hashCode(int[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["int[]", "int: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two non-null The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Integer_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (int[] a)"}, "equals(char[], char[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["char[]", "char: one array to be tested for equality"], ["char[]", "char: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (char[] a, char[] a2)"}, "parallelPrefix(long[],java.util.function.LongBinaryOperator)": {"Returns": [], "Parameters": [["long[]", "long: the array, which is modified in-place by this method"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free, associative function to perform the cumulation"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified array or function is null"]], "SeeAlso": [], "Permissions": [], "Description": "Cumulates, in parallel, each element of the given array in place, using the supplied function. For example if the array initially holds [2, 1, 0, 3] and the operation performs addition, then upon return the array holds [2, 3, 3, 6]. Parallel prefix computation is usually more efficient than sequential loops for large arrays.", "history": "Added in API level 24", "FullName": "public static void parallelPrefix (long[] array, LongBinaryOperator op)"}, "binarySearch(int[], int, int, int)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["int[]", "int: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["int", "int: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of ints for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 9", "FullName": "public static int binarySearch (int[] a, int fromIndex, int toIndex, int key)"}, "toString(long[])": {"Returns": [["@B_java#lang#String_E@", "a string representation of a"]], "Parameters": [["long[]", "long: the array whose string representation to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the contents of the specified array. The string representation consists of a list of the array's elements, enclosed in square brackets (", "history": "Added in API level 1", "FullName": "public static String toString (long[] a)"}, "fill(byte[], byte)": {"Returns": [], "Parameters": [["byte[]", "byte: the array to be filled"], ["byte", "byte: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified byte value to each element of the specified array of bytes.", "history": "added in API level 1", "FullName": "public static void fill (byte[] a, byte val)"}, "parallelSetAll(int[],java.util.function.IntUnaryOperator)": {"Returns": [], "Parameters": [["int[]", "int: array to be initialized"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, in parallel, using the provided generator function to compute each element. If the generator function throws an exception, an unchecked exception is thrown from parallelSetAll and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void parallelSetAll (int[] array, IntUnaryOperator generator)"}, "sort(java.lang.Object[], int, int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"], ["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)."]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects into ascending order, according to the fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in this range must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in this range must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "added in API level 1", "FullName": "public static void sort (Object[] a, int fromIndex, int toIndex)"}, "copyOfRange(long[],int,int)": {"Returns": [["long[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["long[]", "long: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static long[] copyOfRange (long[] original, int from, int to)"}, "copyOf(boolean[], int)": {"Returns": [["boolean[]", "a copy of the original array, truncated or padded with false elements to obtain the specified length"]], "Parameters": [["boolean[]", "boolean: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with", "history": "added in API level 9", "FullName": "public static boolean[] copyOf (boolean[] original, int newLength)"}, "copyOf(byte[],int)": {"Returns": [["byte[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["byte[]", "byte: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static byte[] copyOf (byte[] original, int newLength)"}, "sort(long[])": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (long[] a)"}, "binarySearch(long[],int,int,long)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["long[]", "long: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["long", "long: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of longs for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 9", "FullName": "public static int binarySearch (long[] a, int fromIndex, int toIndex, long key)"}, "sort(double[])": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (double[] a)"}, "binarySearch(double[],int,int,double)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["double[]", "double: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["double", "double: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of doubles for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "Added in API level 9", "FullName": "public static int binarySearch (double[] a, int fromIndex, int toIndex, double key)"}, "sort(T[],int,int,java.util.Comparator<?superT>)": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"], ["int", "int: the index of the first element (inclusive) to be sorted"], ["int", "int: the index of the last element (exclusive) to be sorted"], ["@B_java#util#Comparator_E@", "Comparator: the comparator to determine the order of the array. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator."], ["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex or (optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the specified array of objects according to the order induced by the specified comparator. The range to be sorted extends from index fromIndex, inclusive, to index toIndex, exclusive. (If fromIndex==toIndex, the range to be sorted is empty.) All elements in the range must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the range). This sort is guaranteed to be Implementation note: This implementation is a stable, adaptive, iterative mergesort that requires far fewer than n lg(n) comparisons when the input array is partially sorted, while offering the performance of a traditional mergesort when the input array is randomly ordered. If the input array is nearly sorted, the implementation requires approximately n comparisons. Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays. The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array. The implementation was adapted from Tim Peters's list sort for Python (", "history": "Added in API level 1", "FullName": "public static void sort (T[] a, int fromIndex, int toIndex, Comparator<? super T> c)"}, "sort(double[], int, int)": {"Returns": [], "Parameters": [["double[]", "double: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all double values: -0.0d == 0.0d is true and a Double.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0d is treated as less than value 0.0d and Double.NaN is considered greater than any other value and all Double.NaN values are considered equal. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "added in API level 1", "FullName": "public static void sort (double[] a, int fromIndex, int toIndex)"}, "stream(double[])": {"Returns": [["@B_java#util#stream#DoubleStream_E@", "a DoubleStream for the array"]], "Parameters": [["double[]", "double: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#DoubleStream_E@ with the specified array as its source.", "history": "Added in API level 24", "FullName": "public static DoubleStream stream (double[] array)"}, "copyOf(short[],int)": {"Returns": [["short[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["short[]", "short: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static short[] copyOf (short[] original, int newLength)"}, "fill(float[], int, int, float)": {"Returns": [], "Parameters": [["float[]", "float: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["float", "float: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified float value to each element of the specified range of the specified array of floats. The range to be filled extends from index", "history": "added in API level 1", "FullName": "public static void fill (float[] a, int fromIndex, int toIndex, float val)"}, "copyOf(U[], int, java.lang.Class<? extends T[]>)": {"Returns": [["T[]", "a copy of the original array, truncated or padded with nulls to obtain the specified length"]], "Parameters": [["U[]", "U: the array to be copied"], ["int", "int: the length of the copy to be returned"], ["@B_java#lang#Class_E@", "Class: the class of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"], ["@B_java#lang#ArrayStoreException_E@", "if an element copied from original is not of a runtime type that can be stored in an array of class newType"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with nulls (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "added in API level 9", "FullName": "public static T[] copyOf (U[] original, int newLength, Class<? extends T[]> newType)"}, "binarySearch(long[],long)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["long[]", "long: the array to be searched"], ["long", "long: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of longs for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (long[] a, long key)"}, "parallelSort(char[])": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order.", "history": "Added in API level 24", "FullName": "public static void parallelSort (char[] a)"}, "sort(char[])": {"Returns": [], "Parameters": [["char[]", "char: the array to be sorted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array into ascending numerical order. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (char[] a)"}, "hashCode(byte[])": {"Returns": [["int", "a content-based hash code for a"]], "Parameters": [["byte[]", "byte: the array whose hash value to compute"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the contents of the specified array. For any two The value returned by this method is the same value that would be obtained by invoking the @B_java#util#List#hashCode_E@ method on a @B_java#util#List_E@ containing a sequence of @B_java#lang#Byte_E@ instances representing the elements of", "history": "Added in API level 1", "FullName": "public static int hashCode (byte[] a)"}, "equals(float[],float[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["float[]", "float: one array to be tested for equality"], ["float[]", "float: the other array to be tested for equality"]], "Throws": [], "SeeAlso": ["@B_java#lang#Float#equals_E@"], "Permissions": [], "Description": "Returns Two floats", "history": "Added in API level 1", "FullName": "public static boolean equals (float[] a, float[] a2)"}, "sort(long[],int,int)": {"Returns": [], "Parameters": [["long[]", "long: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. Implementation note: The sorting algorithm is a Dual-Pivot Quicksort by Vladimir Yaroslavskiy, Jon Bentley, and Joshua Bloch. This algorithm offers O(n log(n)) performance on many data sets that cause other quicksorts to degrade to quadratic performance, and is typically faster than traditional (one-pivot) Quicksort implementations.", "history": "Added in API level 1", "FullName": "public static void sort (long[] a, int fromIndex, int toIndex)"}, "copyOf(int[],int)": {"Returns": [["int[]", "a copy of the original array, truncated or padded with zeros to obtain the specified length"]], "Parameters": [["int[]", "int: the array to be copied"], ["int", "int: the length of the copy to be returned"]], "Throws": [["@B_java#lang#NegativeArraySizeException_E@", "if newLength is negative"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified array, truncating or padding with zeros (if necessary) so the copy has the specified length. For all indices that are valid in both the original array and the copy, the two arrays will contain identical values. For any indices that are valid in the copy but not the original, the copy will contain", "history": "Added in API level 9", "FullName": "public static int[] copyOf (int[] original, int newLength)"}, "fill(char[], char)": {"Returns": [], "Parameters": [["char[]", "char: the array to be filled"], ["char", "char: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified char value to each element of the specified array of chars.", "history": "added in API level 1", "FullName": "public static void fill (char[] a, char val)"}, "copyOfRange(float[],int,int)": {"Returns": [["float[]", "a new array containing the specified range from the original array, truncated or padded with zeros to obtain the required length"]], "Parameters": [["float[]", "float: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static float[] copyOfRange (float[] original, int from, int to)"}, "parallelSort(float[],int,int)": {"Returns": [], "Parameters": [["float[]", "float: the array to be sorted"], ["int", "int: the index of the first element, inclusive, to be sorted"], ["int", "int: the index of the last element, exclusive, to be sorted"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified range of the array into ascending numerical order. The range to be sorted extends from the index fromIndex, inclusive, to the index toIndex, exclusive. If fromIndex == toIndex, the range to be sorted is empty. The < relation does not provide a total order on all float values: -0.0f == 0.0f is true and a Float.NaN value compares neither less than, greater than, nor equal to any value, even itself. This method uses the total order imposed by the method @B_java#lang#Comparable#compareTo_E@: -0.0f is treated as less than value 0.0f and Float.NaN is considered greater than any other value and all Float.NaN values are considered equal.", "history": "Added in API level 24", "FullName": "public static void parallelSort (float[] a, int fromIndex, int toIndex)"}, "stream(int[])": {"Returns": [["@B_java#util#stream#IntStream_E@", "an IntStream for the array"]], "Parameters": [["int[]", "int: the array, assumed to be unmodified during use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a sequential @B_java#util#stream#IntStream_E@ with the specified array as its source.", "history": "Added in API level 24", "FullName": "public static IntStream stream (int[] array)"}, "parallelSort(T[])": {"Returns": [], "Parameters": [["T[]", "T: the array to be sorted"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable (for example, strings and integers)"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the natural ordering of the array elements is found to violate the @B_java#lang#Comparable_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts the specified array of objects into ascending order, according to the @B_java#lang#Comparable_E@ interface. Furthermore, all elements in the array must be e1.compareTo(e2) must not throw a ClassCastException for any elements e1 and e2 in the array). This sort is guaranteed to be", "history": "Added in API level 24", "FullName": "public static void parallelSort (T[] a)"}, "binarySearch(byte[], int, int, byte)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["byte[]", "byte: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["byte", "byte: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of bytes for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 9", "FullName": "public static int binarySearch (byte[] a, int fromIndex, int toIndex, byte key)"}, "fill(int[],int,int,int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["int", "int: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified int value to each element of the specified range of the specified array of ints. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (int[] a, int fromIndex, int toIndex, int val)"}, "binarySearch(byte[],byte)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["byte[]", "byte: the array to be searched"], ["byte", "byte: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of bytes for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (byte[] a, byte key)"}, "equals(int[], int[])": {"Returns": [["boolean", "true if the two arrays are equal"]], "Parameters": [["int[]", "int: one array to be tested for equality"], ["int[]", "int: the other array to be tested for equality"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "added in API level 1", "FullName": "public static boolean equals (int[] a, int[] a2)"}, "binarySearch(float[], int, int, float)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["float[]", "float: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["float", "float: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of floats for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "added in API level 9", "FullName": "public static int binarySearch (float[] a, int fromIndex, int toIndex, float key)"}, "copyOfRange(U[],int,int,java.lang.Class<?extendsT[]>)": {"Returns": [["T[]", "a new array containing the specified range from the original array, truncated or padded with nulls to obtain the required length"]], "Parameters": [["U[]", "U: the array from which a range is to be copied"], ["int", "int: the initial index of the range to be copied, inclusive"], ["int", "int: the final index of the range to be copied, exclusive. (This index may lie outside the array.)"], ["@B_java#lang#Class_E@", "Class: the class of the copy to be returned"]], "Throws": [["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if from < 0 or from > original.length"], ["@B_java#lang#IllegalArgumentException_E@", "if from > to"], ["@B_java#lang#NullPointerException_E@", "if original is null"], ["@B_java#lang#ArrayStoreException_E@", "if an element copied from original is not of a runtime type that can be stored in an array of class newType."]], "SeeAlso": [], "Permissions": [], "Description": "Copies the specified range of the specified array into a new array. The initial index of the range (", "history": "Added in API level 9", "FullName": "public static T[] copyOfRange (U[] original, int from, int to, Class<? extends T[]> newType)"}, "fill(short[],int,int,short)": {"Returns": [], "Parameters": [["short[]", "short: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["short", "short: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified short value to each element of the specified range of the specified array of shorts. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (short[] a, int fromIndex, int toIndex, short val)"}, "fill(int[], int)": {"Returns": [], "Parameters": [["int[]", "int: the array to be filled"], ["int", "int: the value to be stored in all elements of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified int value to each element of the specified array of ints.", "history": "added in API level 1", "FullName": "public static void fill (int[] a, int val)"}, "binarySearch(T[],T,java.util.Comparator<?superT>)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["T[]", "T: the array to be searched"], ["T", "T: the value to be searched for"], ["@B_java#util#Comparator_E@", "Comparator: the comparator by which the array is ordered. A null value indicates that the elements' Comparable should be used."]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the array contains elements that are not mutually comparable using the specified comparator, or the search key is not comparable to the elements of the array using this comparator."]], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array for the specified object using the binary search algorithm. The array must be sorted into ascending order according to the specified comparator (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements equal to the specified object, there is no guarantee which one will be found.", "history": "Added in API level 1", "FullName": "public static int binarySearch (T[] a, T key, Comparator<? super T> c)"}, "binarySearch(short[], short)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["short[]", "short: the array to be searched"], ["short", "short: the value to be searched for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array of shorts for the specified value using the binary search algorithm. The array must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the array contains multiple elements with the specified value, there is no guarantee which one will be found.", "history": "added in API level 1", "FullName": "public static int binarySearch (short[] a, short key)"}, "fill(char[],int,int,char)": {"Returns": [], "Parameters": [["char[]", "char: the array to be filled"], ["int", "int: the index of the first element (inclusive) to be filled with the specified value"], ["int", "int: the index of the last element (exclusive) to be filled with the specified value"], ["char", "char: the value to be stored in all elements of the array"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Assigns the specified char value to each element of the specified range of the specified array of chars. The range to be filled extends from index", "history": "Added in API level 1", "FullName": "public static void fill (char[] a, int fromIndex, int toIndex, char val)"}, "setAll(double[],java.util.function.IntToDoubleFunction)": {"Returns": [], "Parameters": [["double[]", "double: array to be initialized"], ["@B_java#util#function#IntToDoubleFunction_E@", "IntToDoubleFunction: a function accepting an index and producing the desired value for that position"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the generator is null"]], "SeeAlso": [], "Permissions": [], "Description": "Set all elements of the specified array, using the provided generator function to compute each element. If the generator function throws an exception, it is relayed to the caller and the array is left in an indeterminate state.", "history": "Added in API level 24", "FullName": "public static void setAll (double[] array, IntToDoubleFunction generator)"}, "binarySearch(double[], int, int, double)": {"Returns": [["int", "index of the search key, if it is contained in the array within the specified range; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element in the range greater than the key, or toIndex if all elements in the range are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["double[]", "double: the array to be searched"], ["int", "int: the index of the first element (inclusive) to be searched"], ["int", "int: the index of the last element (exclusive) to be searched"], ["double", "double: the value to be searched for"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if fromIndex > toIndex"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "if fromIndex < 0 or toIndex > a.length"]], "SeeAlso": [], "Permissions": [], "Description": "Searches a range of the specified array of doubles for the specified value using the binary search algorithm. The range must be sorted (as by the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. If the range contains multiple elements with the specified value, there is no guarantee which one will be found. This method considers all NaN values to be equivalent and equal.", "history": "added in API level 9", "FullName": "public static int binarySearch (double[] a, int fromIndex, int toIndex, double key)"}, "binarySearch(java.lang.Object[], java.lang.Object)": {"Returns": [["int", "index of the search key, if it is contained in the array; otherwise, (-(insertion point) - 1). The insertion point is defined as the point at which the key would be inserted into the array: the index of the first element greater than the key, or a.length if all elements in the array are less than the specified key. Note that this guarantees that the return value will be >= 0 if and only if the key is found."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the array to be searched"], ["@B_java#lang#Object_E@", "Object: the value to be searched for"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the search key is not comparable to the elements of the array."]], "SeeAlso": [], "Permissions": [], "Description": "Searches the specified array for the specified object using the binary search algorithm. The array must be sorted into ascending order according to the @B_java#util#Arrays#sort_E@ method) prior to making this call. If it is not sorted, the results are undefined. (If the array contains elements that are not mutually comparable (for example, strings and integers), it", "history": "added in API level 1", "FullName": "public static int binarySearch (Object[] a, Object key)"}}, "Inheritance": [], "ClassName": "java.util.Arrays", "ClassDesc": "This class contains various methods for manipulating arrays (such as sorting and searching). This class also contains a static factory that allows arrays to be viewed as lists. The methods in this class all throw a NullPointerException, if the specified array reference is null, except where noted. The documentation for the methods contained in this class includes briefs description of the sort(Object[]) does not have to be a MergeSort, but it does have to be This class is a member of the"}