{"Functions": {"tailSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement is not compatible with this set's comparator (or, if the set has no comparator, if fromElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if fromElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and fromElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "subSet(E, boolean, E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement and toElement cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromElement or toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if fromElement is greater than toElement; or if this set itself has a restricted range, and fromElement or toElement lies outside the bounds of the range."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "tailSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than or equal to The returned set will throw an Equivalent to tailSet(fromElement, true).", "history": "Added in API level 9", "FullName": "public abstract SortedSet<E> tailSet (E fromElement)"}, "headSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if toElement is not compatible with this set's comparator (or, if the set has no comparator, if toElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and toElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "descendingSet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order view of this set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the elements contained in this set. The descending set is backed by this set, so changes to the set are reflected in the descending set, and vice-versa. If either set is modified while an iteration over either set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned set has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression s.descendingSet().descendingSet() returns a view of s essentially equivalent to s.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<E> descendingSet ()"}, "lower(E)": {"Returns": [["E", "the greatest element less than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set strictly less than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public abstract E lower (E e)"}, "ceiling(E)": {"Returns": [["E", "the least element greater than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set greater than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public abstract E ceiling (E e)"}, "pollLast()": {"Returns": [["E", "the last element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last (highest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public abstract E pollLast ()"}, "headSet(E, boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement"]], "Parameters": [["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if toElement is not compatible with this set's comparator (or, if the set has no comparator, if toElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and toElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "added in API level 9", "FullName": "public abstract NavigableSet<E> headSet (E toElement, boolean inclusive)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set, in ascending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set, in ascending order.", "history": "Added in API level 9", "FullName": "public abstract Iterator<E> iterator ()"}, "subSet(E,boolean,E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["E", "E: high endpoint of the returned set"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement and toElement cannot be compared to one another using this set's comparator (or, if the set has no comparator, using natural ordering). Implementations may, but are not required to, throw this exception if fromElement or toElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement or toElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if fromElement is greater than toElement; or if this set itself has a restricted range, and fromElement or toElement lies outside the bounds of the range."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from fromElement to toElement. If fromElement and toElement are equal, the returned set is empty unless fromInclusive and toInclusive are both true. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<E> subSet (E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this set, in descending order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this set, in descending order. Equivalent in effect to descendingSet().iterator().", "history": "Added in API level 9", "FullName": "public abstract Iterator<E> descendingIterator ()"}, "subSet(E, E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "added in API level 11", "FullName": "public abstract SortedSet<E> subSet (E fromElement, E toElement)"}, "headSet(E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements are strictly less than toElement"]], "Parameters": [["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are strictly less than The returned set will throw an Equivalent to headSet(toElement, false).", "history": "Added in API level 9", "FullName": "public abstract SortedSet<E> headSet (E toElement)"}, "tailSet(E,boolean)": {"Returns": [["@B_java#util#NavigableSet_E@", "a view of the portion of this set whose elements are greater than or equal to fromElement"]], "Parameters": [["E", "E: low endpoint of the returned set"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if fromElement is not compatible with this set's comparator (or, if the set has no comparator, if fromElement does not implement @B_java#lang#Comparable_E@). Implementations may, but are not required to, throw this exception if fromElement cannot be compared to elements currently in the set."], ["@B_java#lang#NullPointerException_E@", "if fromElement is null and this set does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if this set itself has a restricted range, and fromElement lies outside the bounds of the range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement. The returned set is backed by this set, so changes in the returned set are reflected in this set, and vice-versa. The returned set supports all optional set operations that this set supports. The returned set will throw an IllegalArgumentException on an attempt to insert an element outside its range.", "history": "Added in API level 9", "FullName": "public abstract NavigableSet<E> tailSet (E fromElement, boolean inclusive)"}, "pollFirst()": {"Returns": [["E", "the first element, or null if this set is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first (lowest) element, or returns null if this set is empty.", "history": "Added in API level 9", "FullName": "public abstract E pollFirst ()"}, "subSet(E,E)": {"Returns": [["@B_java#util#SortedSet_E@", "a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive"]], "Parameters": [["E", "E: low endpoint (inclusive) of the returned set"], ["E", "E: high endpoint (exclusive) of the returned set"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", ""], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this set whose elements range from The returned set will throw an Equivalent to subSet(fromElement, true, toElement, false).", "history": "Added in API level 9", "FullName": "public abstract SortedSet<E> subSet (E fromElement, E toElement)"}, "higher(E)": {"Returns": [["E", "the least element greater than e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least element in this set strictly greater than the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public abstract E higher (E e)"}, "floor(E)": {"Returns": [["E", "the greatest element less than or equal to e, or null if there is no such element"]], "Parameters": [["E", "E: the value to match"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified element cannot be compared with the elements currently in the set"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this set does not permit null elements"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.", "history": "Added in API level 9", "FullName": "public abstract E floor (E e)"}}, "Inheritance": [], "ClassName": "java.util.NavigableSet<E>", "ClassDesc": "A @B_java#util#SortedSet_E@ extended with navigation methods reporting closest matches for given search targets. Methods @B_java#util#NavigableSet#lower_E@, @B_java#util#NavigableSet#floor_E@, @B_java#util#NavigableSet#ceiling_E@, and @B_java#util#NavigableSet#higher_E@ return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning null if there is no such element. A NavigableSet may be accessed and traversed in either ascending or descending order. The @B_java#util#NavigableSet#descendingSet_E@ method returns a view of the set with the senses of all relational and directional methods inverted. The performance of ascending operations and views is likely to be faster than that of descending ones. This interface additionally defines methods @B_java#util#NavigableSet#pollFirst_E@ and @B_java#util#NavigableSet#pollLast_E@ that return and remove the lowest and highest element, if one exists, else returning null. Methods @B_java#util#NavigableSet#subSet_E@, @B_java#util#NavigableSet#headSet_E@, and @B_java#util#NavigableSet#tailSet_E@ differ from the like-named SortedSet methods in accepting additional arguments describing whether lower and upper bounds are inclusive versus exclusive. Subsets of any NavigableSet must implement the NavigableSet interface. The return values of navigation methods may be ambiguous in implementations that permit null elements. However, even in this case the result can be disambiguated by checking contains(null). To avoid such issues, implementations of this interface are encouraged to not permit insertion of null elements. (Note that sorted sets of @B_java#lang#Comparable_E@ elements intrinsically do not permit null.) Methods @B_java#util#NavigableSet#subSet_E@, @B_java#util#NavigableSet#headSet_E@, and @B_java#util#NavigableSet#tailSet_E@ are specified to return SortedSet to allow existing implementations of SortedSet to be compatibly retrofitted to implement NavigableSet, but extensions and implementations of this interface are encouraged to override these methods to return NavigableSet."}