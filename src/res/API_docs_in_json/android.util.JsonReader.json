{"Functions": {"hasNext()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the current array or object has another element.", "history": "Added in API level 11", "FullName": "public boolean hasNext ()"}, "beginArray()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Consumes the next token from the JSON stream and asserts that it is the beginning of a new array.", "history": "Added in API level 11", "FullName": "public void beginArray ()"}, "endArray()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Consumes the next token from the JSON stream and asserts that it is the end of the current array.", "history": "Added in API level 11", "FullName": "public void endArray ()"}, "nextName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if the next token in the stream is not a property name."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token, a @B_android#util#JsonToken#NAME_E@, and consumes it.", "history": "Added in API level 11", "FullName": "public String nextName ()"}, "nextNull()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not null or if this reader is closed."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Consumes the next token from the JSON stream and asserts that it is a literal null.", "history": "Added in API level 11", "FullName": "public void nextNull ()"}, "isLenient()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this parser is liberal in what it accepts.", "history": "Added in API level 11", "FullName": "public boolean isLenient ()"}, "peek()": {"Returns": [["@B_android#util#JsonToken_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of the next token without consuming it.", "history": "Added in API level 11", "FullName": "public JsonToken peek ()"}, "setLenient(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Configure this parser to be be liberal in what it accepts. By default, this parser is strict and only accepts JSON as specified by End of line comments starting with // or # and ending with a newline character. C-style comments starting with /* and ending with */. Such comments may not be nested. Names that are unquoted or 'single quoted'. Strings that are unquoted or 'single quoted'. Array elements separated by ; instead of ,. Unnecessary array separators. These are interpreted as if null was the omitted value. Names and values separated by = or => instead of :. Name/value pairs separated by ; instead of ,.", "history": "Added in API level 11", "FullName": "public void setLenient (boolean lenient)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this JSON reader and the underlying @B_java#io#Reader_E@.", "history": "Added in API level 11", "FullName": "public void close ()"}, "beginObject()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Consumes the next token from the JSON stream and asserts that it is the beginning of a new object.", "history": "Added in API level 11", "FullName": "public void beginObject ()"}, "nextInt()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not a literal value."], ["@B_java#lang#NumberFormatException_E@", "if the next literal value cannot be parsed as a number, or exactly represented as an int."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#util#JsonToken#NUMBER_E@ value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as an int. If the next token's numeric value cannot be exactly represented by a Java int, this method throws.", "history": "Added in API level 11", "FullName": "public int nextInt ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "JsonReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance that reads a JSON-encoded stream from in.", "history": "Added in API level 11", "FullName": "public JsonReader (Reader in)"}, "endObject()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Consumes the next token from the JSON stream and asserts that it is the end of the current object.", "history": "Added in API level 11", "FullName": "public void endObject ()"}, "nextBoolean()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not a boolean or if this reader is closed."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#util#JsonToken#BOOLEAN_E@ value of the next token, consuming it.", "history": "Added in API level 11", "FullName": "public boolean nextBoolean ()"}, "nextString()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not a string or if this reader is closed."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#util#JsonToken#STRING_E@ value of the next token, consuming it. If the next token is a number, this method will return its string form.", "history": "Added in API level 11", "FullName": "public String nextString ()"}, "nextDouble()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not a literal value."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#util#JsonToken#NUMBER_E@ value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as a double using @B_java#lang#Double#parseDouble_E@.", "history": "Added in API level 11", "FullName": "public double nextDouble ()"}, "skipValue()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Skips the next value recursively. If it is an object or array, all nested elements are skipped. This method is intended for use when the JSON token stream contains unrecognized or unhandled values.", "history": "Added in API level 11", "FullName": "public void skipValue ()"}, "nextLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the next token is not a literal value."], ["@B_java#lang#NumberFormatException_E@", "if the next literal value cannot be parsed as a number, or exactly represented as a long."], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#util#JsonToken#NUMBER_E@ value of the next token, consuming it. If the next token is a string, this method will attempt to parse it as a long. If the next token's numeric value cannot be exactly represented by a Java long, this method throws.", "history": "Added in API level 11", "FullName": "public long nextLong ()"}}, "Inheritance": [], "ClassName": "android.util.JsonReader", "ClassDesc": "Reads a JSON (JsonReader. Next, create handler methods for each structure in your JSON text. You'll need a method for each object type and for each array type. Within @B_android#util#JsonReader#beginArray_E@ to consume the array's opening bracket. Then create a while loop that accumulates values, terminating when @B_android#util#JsonReader#hasNext_E@ is false. Finally, read the array's closing bracket by calling @B_android#util#JsonReader#endArray_E@. Within @B_android#util#JsonReader#beginObject_E@ to consume the object's opening brace. Then create a while loop that assigns values to local variables based on their name. This loop should terminate when @B_android#util#JsonReader#hasNext_E@ is false. Finally, read the object's closing brace by calling @B_android#util#JsonReader#endObject_E@. When a nested object or array is encountered, delegate to the corresponding handler method. When an unknown name is encountered, strict parsers should fail with an exception. Lenient parsers should call @B_android#util#JsonReader#skipValue_E@ to recursively skip the value's nested tokens, which may otherwise conflict. If a value may be null, you should first check using @B_android#util#JsonReader#peek_E@. Null literals can be consumed using either @B_android#util#JsonReader#nextNull_E@ or @B_android#util#JsonReader#skipValue_E@. [1, \"1\"] may be read using either @B_android#util#JsonReader#nextInt_E@ or @B_android#util#JsonReader#nextString_E@. This behavior is intended to prevent lossy numeric conversions: double is JavaScript's only numeric type and very large values like 9007199254740993 cannot be represented exactly on that platform. To minimize precision loss, extremely large values should be written and read as strings in JSON. Each JsonReader may be used to read a single JSON stream. Instances of this class are not thread safe."}