{"Functions": {"poll()": {"Returns": [["E", "the first element of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E poll ()"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that Objects.equals(o, e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public abstract boolean removeLastOccurrence (Object o)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#Deque#add_E@ method, which can fail to insert an element only by throwing an exception. This method is equivalent to @B_java#util#Deque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean offer (E e)"}, "pollLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E pollLast ()"}, "offerLast(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#Deque#addLast_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public abstract boolean offerLast (E e)"}, "getLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque. This method differs from @B_java#util#Deque#peekLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E getLast ()"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into the queue represented by this deque (in other words, at the tail of this deque) if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use @B_java#util#Deque#offer_E@. This method is equivalent to @B_java#util#Deque#addLast_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean add (E e)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail).", "history": "Added in API level 9", "FullName": "public abstract Iterator<E> iterator ()"}, "getFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque. This method differs from @B_java#util#Deque#peekFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E getFirst ()"}, "pollFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E pollFirst ()"}, "offerFirst(E)": {"Returns": [["boolean", "true if the element was added to this deque, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque unless it would violate capacity restrictions. When using a capacity-restricted deque, this method is generally preferable to the @B_java#util#Deque#addFirst_E@ method, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 9", "FullName": "public abstract boolean offerFirst (E e)"}, "size()": {"Returns": [["int", "the number of elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this deque.", "history": "Added in API level 9", "FullName": "public abstract int size ()"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method @B_java#util#Deque#offerFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract void addFirst (E e)"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. When using a capacity-restricted deque, it is generally preferable to use method @B_java#util#Deque#offerLast_E@. This method is equivalent to @B_java#util#Deque#add_E@.", "history": "Added in API level 9", "FullName": "public abstract void addLast (E e)"}, "peek()": {"Returns": [["E", "the head of the queue represented by this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#peekFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that Objects.equals(o, e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to @B_java#util#Deque#removeFirstOccurrence_E@.", "history": "Added in API level 9", "FullName": "public abstract boolean remove (Object o)"}, "peekLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E peekLast ()"}, "pop()": {"Returns": [["E", "the element at the front of this deque (which is the top of the stack represented by this deque)"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E pop ()"}, "remove()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#Deque#poll_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E remove ()"}, "removeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque. This method differs from @B_java#util#Deque#pollLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E removeLast ()"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to @B_java#util#Deque#addFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract void push (E e)"}, "element()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#Deque#peek_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#getFirst_E@.", "history": "Added in API level 9", "FullName": "public abstract E element ()"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in reverse sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head).", "history": "Added in API level 9", "FullName": "public abstract Iterator<E> descendingIterator ()"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if an element was removed as a result of this call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that Objects.equals(o, e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public abstract boolean removeFirstOccurrence (Object o)"}, "removeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if this deque is empty"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque. This method differs from @B_java#util#Deque#pollFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E removeFirst ()"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this deque contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this deque is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this deque (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this deque does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that Objects.equals(o, e).", "history": "Added in API level 9", "FullName": "public abstract boolean contains (Object o)"}, "peekFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public abstract E peekFirst ()"}}, "Inheritance": [], "ClassName": "java.util.Deque<E>", "ClassDesc": "A linear collection that supports element insertion and removal at both ends. The name Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit. This interface defines methods to access the elements at both ends of the deque. Methods are provided to insert, remove, and examine the element. Each of these methods exists in two forms: one throws an exception if the operation fails, the other returns a special value (either null or false, depending on the operation). The latter form of the insert operation is designed specifically for use with capacity-restricted Deque implementations; in most implementations, insert operations cannot fail. The twelve methods described above are summarized in the following table: This interface extends the @B_java#util#Queue_E@ interface. When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Elements are added at the end of the deque and removed from the beginning. The methods inherited from the Queue interface are precisely equivalent to Deque methods as indicated in the following table: Deques can also be used as LIFO (Last-In-First-Out) stacks. This interface should be used in preference to the legacy @B_java#util#Stack_E@ class. When a deque is used as a stack, elements are pushed and popped from the beginning of the deque. Stack methods are precisely equivalent to Deque methods as indicated in the table below: Note that the @B_java#util#Deque#peek_E@ method works equally well when a deque is used as a queue or a stack; in either case, elements are drawn from the beginning of the deque. This interface provides two methods to remove interior elements, @B_java#util#Deque#removeFirstOccurrence_E@ and @B_java#util#Deque#removeLastOccurrence_E@. Unlike the @B_java#util#List_E@ interface, this interface does not provide support for indexed access to elements. While Deque implementations are not strictly required to prohibit the insertion of null elements, they are strongly encouraged to do so. Users of any Deque implementations that do allow null elements are strongly encouraged null is used as a special return value by various methods to indicated that the deque is empty. Deque implementations generally do not define element-based versions of the equals and hashCode methods, but instead inherit the identity-based versions from class Object."}