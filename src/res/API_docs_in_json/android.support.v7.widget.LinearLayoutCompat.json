{"Functions": {"getBaselineAlignedChildIndex()": {"Returns": [["int", "The index of the child that will be used if this layout is part of a larger layout that is baseline aligned, or -1 if none has been set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getBaselineAlignedChildIndex ()"}, "setBaselineAligned(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to align widgets on their baseline, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines whether widgets contained in this layout are baseline-aligned or not.", "history": "added in version 24.2.0", "FullName": "void setBaselineAligned (boolean baselineAligned)"}, "isBaselineAligned()": {"Returns": [["boolean", "true when widgets are baseline-aligned, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether widgets contained within this layout are aligned on their baseline or not.", "history": "added in version 24.2.0", "FullName": "boolean isBaselineAligned ()"}, "setShowDividers(int)": {"Returns": [], "Parameters": [["int", "int: One or more of @B_android#support#v7#widget#LinearLayoutCompat#SHOW_DIVIDER_BEGINNING_E@, @B_android#support#v7#widget#LinearLayoutCompat#SHOW_DIVIDER_MIDDLE_E@, or @B_android#support#v7#widget#LinearLayoutCompat#SHOW_DIVIDER_END_E@, or @B_android#support#v7#widget#LinearLayoutCompat#SHOW_DIVIDER_NONE_E@ to show no dividers."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set how dividers should be shown between items in this layout", "history": "added in version 24.2.0", "FullName": "void setShowDividers (int showDividers)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#support#v7#widget#LinearLayoutCompat#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "", "FullName": "LinearLayoutCompat.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "getGravity()": {"Returns": [["int", "the current gravity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#LinearLayoutCompat#setGravity_E@"], "Permissions": [], "Description": "Returns the current gravity. See @B_android#view#Gravity_E@", "history": "added in version 25.1.0", "FullName": "int getGravity ()"}, "getShowDividers()": {"Returns": [["int", "A flag set indicating how dividers should be shown around items."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#LinearLayoutCompat#setShowDividers_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "int getShowDividers ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 24.2.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "isMeasureWithLargestChildEnabled()": {"Returns": [["boolean", "True to measure children with a weight using the minimum size of the largest child, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When true, all children with a weight will be considered having the minimum size of the largest child. If false, all children are measured normally.", "history": "added in version 24.2.0", "FullName": "boolean isMeasureWithLargestChildEnabled ()"}, "getWeightSum()": {"Returns": [["float", "A number greater than 0.0f if the weight sum is defined, or a number lower than or equals to 0.0f if not weight sum is to be used."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the desired weights sum.", "history": "added in version 24.2.0", "FullName": "float getWeightSum ()"}, "setMeasureWithLargestChildEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to measure children with a weight using the minimum size of the largest child, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When set to true, all children with a weight will be considered having the minimum size of the largest child. If false, all children are measured normally. Disabled by default.", "history": "added in version 24.2.0", "FullName": "void setMeasureWithLargestChildEnabled (boolean enabled)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setWeightSum(float)": {"Returns": [], "Parameters": [["float", "float: a number greater than 0.0f, or a number lower than or equals to 0.0f if the weight sum should be computed from the children's layout_weight"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines the desired weights sum. If unspecified the weights sum is computed at layout time by adding the layout_weight of each child. This can be used for instance to give a single child 50% of the total available space by giving it a layout_weight of 0.5 and setting the weightSum to 1.0.", "history": "added in version 24.2.0", "FullName": "void setWeightSum (float weightSum)"}, "setBaselineAlignedChildIndex(int)": {"Returns": [], "Parameters": [["int", "int: The index of the child that will be used if this layout is part of a larger layout that is baseline aligned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "void setBaselineAlignedChildIndex (int i)"}, "setHorizontalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "void setHorizontalGravity (int horizontalGravity)"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment, this method returns -1.", "history": "", "FullName": "int getBaseline ()"}, "LinearLayoutCompat(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "LinearLayoutCompat (Context context)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "", "FullName": "void onDraw (Canvas canvas)"}, "setVerticalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "void setVerticalGravity (int verticalGravity)"}, "getOrientation()": {"Returns": [["int", "either @B_android#support#v7#widget#LinearLayoutCompat#HORIZONTAL_E@ or @B_android#support#v7#widget#LinearLayoutCompat#VERTICAL_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current orientation.", "history": "added in version 24.2.0", "FullName": "int getOrientation ()"}, "getDividerPadding()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#LinearLayoutCompat#setShowDividers_E@", "@B_android#support#v7#widget#LinearLayoutCompat#setDividerDrawable_E@", "@B_android#support#v7#widget#LinearLayoutCompat#setDividerPadding_E@"], "Permissions": [], "Description": "Get the padding size used to inset dividers in pixels", "history": "added in version 24.2.0", "FullName": "int getDividerPadding ()"}, "setDividerPadding(int)": {"Returns": [], "Parameters": [["int", "int: Padding value in pixels that will be applied to each end"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#LinearLayoutCompat#setShowDividers_E@", "@B_android#support#v7#widget#LinearLayoutCompat#setDividerDrawable_E@", "@B_android#support#v7#widget#LinearLayoutCompat#getDividerPadding_E@"], "Permissions": [], "Description": "Set padding displayed on both ends of dividers.", "history": "added in version 24.2.0", "FullName": "void setDividerPadding (int padding)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes how the child views are positioned. Defaults to GRAVITY_TOP. If this layout has a VERTICAL orientation, this controls where all the child views are placed if there is extra vertical space. If this layout has a HORIZONTAL orientation, this controls the alignment of the children.", "history": "added in version 24.2.0", "FullName": "void setGravity (int gravity)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#LinearLayoutCompat#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ when the layout's orientation is @B_android#support#v7#widget#LinearLayoutCompat#VERTICAL_E@. When the orientation is @B_android#support#v7#widget#LinearLayoutCompat#HORIZONTAL_E@, the width is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and the height to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "", "FullName": "LinearLayoutCompat.LayoutParams generateDefaultLayoutParams ()"}, "getDividerDrawable()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the divider Drawable that will divide each item."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#LinearLayoutCompat#setDividerDrawable_E@"], "Permissions": [], "Description": "", "history": "added in version 24.2.0", "FullName": "Drawable getDividerDrawable ()"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "", "FullName": "boolean shouldDelayChildPressedState ()"}, "setOrientation(int)": {"Returns": [], "Parameters": [["int", "int: Pass @B_android#support#v7#widget#LinearLayoutCompat#HORIZONTAL_E@ or @B_android#support#v7#widget#LinearLayoutCompat#VERTICAL_E@. Default value is @B_android#support#v7#widget#LinearLayoutCompat#HORIZONTAL_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should the layout be a column or a row.", "history": "added in version 24.2.0", "FullName": "void setOrientation (int orientation)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v7.widget.LinearLayoutCompat", "ClassDesc": "A Layout that arranges its children in a single column or a single row. The direction of the row can be set by calling @B_android#support#v7#widget#LinearLayoutCompat#setOrientation_E@. You can also specify gravity, which specifies the alignment of all the child elements by calling @B_android#support#v7#widget#LinearLayoutCompat#setGravity_E@ or specify that specific children grow to fill up any remaining space in the layout by setting the weight member of @B_android#support#v7#widget#LinearLayoutCompat#LayoutParams_E@. The default orientation is horizontal. See the Also see @B_android#support#v7#widget#LinearLayoutCompat#LayoutParams_E@ for layout attributes"}