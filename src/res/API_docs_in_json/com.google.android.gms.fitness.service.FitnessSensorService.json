{"Functions": {"onUnregister(com.google.android.gms.fitness.data.DataSource)": {"Returns": [["", "true if we were able to unregister from a matching data source"]], "Parameters": [["@B_com#google#android#gms#fitness#data#DataSource_E@", "the data source we wish to stop receiving events from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregisters for events from a particular data source.", "history": "", "FullName": "public abstract boolean onUnregister (DataSource dataSource)"}, "onFindDataSources(java.util.List<com.google.android.gms.fitness.data.DataType>)": {"Returns": [["", "the list of data sources which this application can expose that match the given data types, empty if there is no match"]], "Parameters": [["List", "the data types that the client is interested in"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find application data sources which match the given data types.", "history": "", "FullName": "public abstract List<DataSource> onFindDataSources (List<DataType> dataTypes)"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void onCreate ()"}, "FitnessSensorService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public FitnessSensorService ()"}, "onRegister(com.google.android.gms.fitness.service.FitnessSensorServiceRequest)": {"Returns": [["", "true if we were able to register to a matching data source"]], "Parameters": [["@B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest_E@", "request specifying the data source to register to, the desired sampling rate, and the desired batching interval"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers for events from a particular data source at a given rate. Events should be delivered to the fitness platform using the dispatcher specified in the request, accessible via @B_com#google#android#gms#fitness#service#FitnessSensorServiceRequest#getDispatcher_E@. In case an active registration to the given data source already exists, the request should be treated as an update. In case the given data source is no longer exposed by this application, the request can be ignored and false returned.", "history": "", "FullName": "public abstract boolean onRegister (FitnessSensorServiceRequest request)"}, "onBind(android.content.Intent)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public final IBinder onBind (Intent intent)"}}, "Inheritance": ["java.lang.Object", "android.content.Context", "android.content.ContextWrapper", "android.app.Service"], "ClassName": "com.google.android.gms.fitness.service.FitnessSensorService", "ClassDesc": "A service which allows an installed application to expose sensors to Google Fit, so that they can be used by other applications through the standard @B_com#google#android#gms#fitness#SensorsApi_E@. The service supports finding, registering, and unregistering to application-exposed sensors. Applications should implement the FitnessSensorService when they have access to live sensor data from external devices that are not otherwise compatible with the platform. An example would be a hardware pedometer that connects to the phone via standard Bluetooth. A companion application could expose the pedometer's readings to the platform. The FitnessSensorService can also be used to expose software sensors. For instance, an application may compute step count data in software based on other hardware sensors (such as the accelerometer). The computed data can be made available using this service. To add an application-exposed sensor to the platform, a subclass of @B_com#google#android#gms#fitness#service#FitnessSensorService_E@ must be declared in the manifest as such: The declared service must include one or more mimeType filters, indicating which data types it supports. If no data type is listed, the service will be ignored. The service will be used to find, register, and unregister to the application-exposed sensors. When an active registration exists, Google Fit will bind to the service, and will remain bound until all registrations are removed. In this way, the platform is able to control the lifetime of the sensor service. The Fitness Platform has built-in support for local hardware sensors, BLE devices with standard GATT profiles, and Android Wear devices. Accessing these sensors does not require a custom FitnessSensorService."}