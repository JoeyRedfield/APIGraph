{"Functions": {"type()": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the type of the current target, which is also the type of any future target"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this call site's target. Although targets may change, any call site's type is permanent, and can never change to an unequal type. The setTarget method enforces this invariant by refusing any new target that does not have the previous target's type.", "history": "Added in API level 26", "FullName": "public MethodType type ()"}, "getTarget()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the current linkage state of the call site, its target method handle"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#invoke#ConstantCallSite_E@", "@B_java#lang#invoke#VolatileCallSite_E@", "@B_java#lang#invoke#CallSite#setTarget_E@", "@B_java#lang#invoke#ConstantCallSite#getTarget_E@", "@B_java#lang#invoke#MutableCallSite#getTarget_E@", "@B_java#lang#invoke#VolatileCallSite#getTarget_E@"], "Permissions": [], "Description": "Returns the target method of the call site, according to the behavior defined by this call site's specific class. The immediate subclasses of CallSite document the class-specific behaviors of this method.", "history": "Added in API level 26", "FullName": "public abstract MethodHandle getTarget ()"}, "dynamicInvoker()": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which always invokes this call site's current target"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle equivalent to an invokedynamic instruction which has been linked to this call site. This method is equivalent to the following code:", "history": "Added in API level 26", "FullName": "public abstract MethodHandle dynamicInvoker ()"}, "setTarget(java.lang.invoke.MethodHandle)": {"Returns": [], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: the new target"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the proposed new target is null"], ["@B_java#lang#invoke#WrongMethodTypeException_E@", "if the proposed new target has a method type that differs from the previous target"]], "SeeAlso": ["@B_java#lang#invoke#CallSite#getTarget_E@", "@B_java#lang#invoke#ConstantCallSite#setTarget_E@", "@B_java#lang#invoke#MutableCallSite#setTarget_E@", "@B_java#lang#invoke#VolatileCallSite#setTarget_E@"], "Permissions": [], "Description": "Updates the target method of this call site, according to the behavior defined by this call site's specific class. The immediate subclasses of CallSite document the class-specific behaviors of this method. The type of the new target must be", "history": "Added in API level 26", "FullName": "public abstract void setTarget (MethodHandle newTarget)"}}, "Inheritance": [], "ClassName": "java.lang.invoke.CallSite", "ClassDesc": "A CallSite is a holder for a variable @B_java#lang#invoke#MethodHandle_E@, which is called its target. An invokedynamic instruction linked to a CallSite delegates all calls to the site's current target. A CallSite may be associated with several invokedynamic instructions, or it may be \"free floating\", associated with none. In any case, it may be invoked through an associated method handle called its CallSite is an abstract class which does not allow direct subclassing by users. It has three immediate, concrete subclasses that may be either instantiated or subclassed. If a mutable target is not required, an invokedynamic instruction may be permanently bound by means of a If a mutable target is required which has volatile variable semantics, because updates to the target must be immediately and reliably witnessed by other threads, a Otherwise, if a mutable target is required, a A non-constant call site may be relinked by changing its target. The new target must have the same Here is a sample use of call sites and bootstrap methods which links every dynamic call site to print its arguments:"}