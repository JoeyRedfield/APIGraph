{"Functions": {"getArrowShaftLength()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arrow shaft length in pixels.", "history": "added in version 23.0.0", "FullName": "float getArrowShaftLength ()"}, "getPaint()": {"Returns": [["@B_android#graphics#Paint_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the paint instance used for all drawing.", "history": "added in version 23.1.0", "FullName": "Paint getPaint ()"}, "getColor()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the color of the drawable.", "history": "added in version 23.0.0", "FullName": "int getColor ()"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicWidth ()"}, "setSpinEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the bars should rotate."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#drawable#DrawerArrowDrawable#isSpinEnabled_E@"], "Permissions": [], "Description": "Returns whether the bars should rotate or not during the transition.", "history": "added in version 23.0.0", "FullName": "void setSpinEnabled (boolean enabled)"}, "getProgress()": {"Returns": [["float", "no returns description in source Value is between 0.0 and 1.0 inclusive."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current progress of the arrow.", "history": "added in version 23.0.0", "FullName": "float getProgress ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "added in version 23.0.0", "FullName": "void draw (Canvas canvas)"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "", "FullName": "int getIntrinsicHeight ()"}, "DrawerArrowDrawable(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: used to get the configuration for the drawable from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 23.0.0", "FullName": "DrawerArrowDrawable (Context context)"}, "setProgress(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment Value is between 0.0 and 1.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the progress of the arrow. A value of 0.0 indicates that the arrow should be drawn in its starting position. A value of 1.0 indicates that the arrow should be drawn in its ending position.", "history": "added in version 23.0.0", "FullName": "void setProgress (float progress)"}, "setArrowShaftLength(float)": {"Returns": [], "Parameters": [["float", "float: the length in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the arrow shaft length.", "history": "added in version 23.0.0", "FullName": "void setArrowShaftLength (float length)"}, "getArrowHeadLength()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the arrow head (from tip to edge, perpendicular to the shaft), in pixels.", "history": "added in version 23.0.0", "FullName": "float getArrowHeadLength ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "added in version 23.0.0", "FullName": "int getOpacity ()"}, "setColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the color of the drawable.", "history": "added in version 23.0.0", "FullName": "void setColor (int color)"}, "setVerticalMirror(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If set, canvas is flipped when progress reached to end and going back to start.", "history": "added in version 23.0.0", "FullName": "void setVerticalMirror (boolean verticalMirror)"}, "isSpinEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#drawable#DrawerArrowDrawable#setSpinEnabled_E@"], "Permissions": [], "Description": "Returns whether the bars should rotate or not during the transition.", "history": "added in version 23.0.0", "FullName": "boolean isSpinEnabled ()"}, "getBarThickness()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thickness (stroke width) of the bars.", "history": "added in version 23.0.0", "FullName": "float getBarThickness ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "added in version 23.0.0", "FullName": "void setAlpha (int alpha)"}, "setBarThickness(float)": {"Returns": [], "Parameters": [["float", "float: stroke width in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the thickness (stroke size) for the bars.", "history": "added in version 23.0.0", "FullName": "void setBarThickness (float width)"}, "getBarLength()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The length of the bars when they are parallel to each other.", "history": "added in version 23.0.0", "FullName": "float getBarLength ()"}, "setGapSize(float)": {"Returns": [], "Parameters": [["float", "float: the gap in pixels"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#drawable#DrawerArrowDrawable#getGapSize_E@"], "Permissions": [], "Description": "Sets the max gap between the bars when they are parallel to each other.", "history": "added in version 23.0.0", "FullName": "void setGapSize (float gap)"}, "getDirection()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the arrow direction.", "history": "added in version 23.0.0", "FullName": "int getDirection ()"}, "setArrowHeadLength(float)": {"Returns": [], "Parameters": [["float", "float: the length in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of the arrow head (from tip to edge, perpendicular to the shaft).", "history": "added in version 23.0.0", "FullName": "void setArrowHeadLength (float length)"}, "setDirection(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the arrow direction.", "history": "added in version 23.0.0", "FullName": "void setDirection (int direction)"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "added in version 23.0.0", "FullName": "void setColorFilter (ColorFilter colorFilter)"}, "setBarLength(float)": {"Returns": [], "Parameters": [["float", "float: the length in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of the bars when they are parallel to each other.", "history": "added in version 23.0.0", "FullName": "void setBarLength (float length)"}, "getGapSize()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#drawable#DrawerArrowDrawable#getGapSize_E@"], "Permissions": [], "Description": "Returns the max gap between the bars when they are parallel to each other.", "history": "added in version 23.0.0", "FullName": "float getGapSize ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.support.v7.graphics.drawable.DrawerArrowDrawable", "ClassDesc": "A drawable that can draw a \"Drawer hamburger\" menu or an arrow and animate between them. The progress between the two states is controlled via @B_android#support#v7#graphics#drawable#DrawerArrowDrawable#setProgress_E@."}