{"Functions": {"getSystemWindowInsetLeft()": {"Returns": [["int", "The left system window inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 20", "FullName": "public int getSystemWindowInsetLeft ()"}, "replaceSystemWindowInsets(android.graphics.Rect)": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets This value will never be null."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: New system window insets. Each field is the inset in pixels for that edge"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use Builder#Builder(WindowInsets) with @B_android#view#WindowInsets#Builder#setSystemWindowInsets_E@ instead. Returns a copy of this WindowInsets with selected system window insets replaced with new values. Note: If the system window insets are already consumed, this method will return them unchanged on @B_android#os#Build#VERSION_CODES#Q_E@ and later. Prior to @B_android#os#Build#VERSION_CODES#Q_E@, the new values were applied regardless of whether they were consumed, and this method returns invalid non-zero consumed insets.", "history": "Added in API level 21 Deprecated in API level 29", "FullName": "public WindowInsets replaceSystemWindowInsets (Rect systemWindowInsets)"}, "consumeSystemWindowInsets()": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this WindowInsets with the system window insets fully consumed.", "history": "Added in API level 20", "FullName": "public WindowInsets consumeSystemWindowInsets ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 20", "FullName": "public boolean equals (Object o)"}, "getSystemWindowInsetBottom()": {"Returns": [["int", "The bottom system window inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bottom system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 20", "FullName": "public int getSystemWindowInsetBottom ()"}, "getStableInsetLeft()": {"Returns": [["int", "The left stable inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the left stable inset in pixels. The stable inset represents the area of a full-screen window that", "history": "Added in API level 21", "FullName": "public int getStableInsetLeft ()"}, "consumeStableInsets()": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this WindowInsets with the stable insets fully consumed.", "history": "Added in API level 21", "FullName": "public WindowInsets consumeStableInsets ()"}, "WindowInsets(android.view.WindowInsets)": {"Returns": [], "Parameters": [["@B_android#view#WindowInsets_E@", "WindowInsets: Source to copy insets from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Construct a new WindowInsets, copying all values from a source WindowInsets.", "history": "Added in API level 20", "FullName": "public WindowInsets (WindowInsets src)"}, "isConsumed()": {"Returns": [["boolean", "true if the insets have been fully consumed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if these insets have been fully consumed. Insets are considered \"consumed\" if the applicable consume* methods have been called such that all insets have been set to zero. This affects propagation of insets through the view hierarchy; insets that have not been fully consumed will continue to propagate down to child views. The result of this method is equivalent to the return value of @B_android#view#View#fitSystemWindows_E@.", "history": "Added in API level 21", "FullName": "public boolean isConsumed ()"}, "inset(int,int,int,int)": {"Returns": [["@B_android#view#WindowInsets_E@", "the inset insets This value will never be null."]], "Parameters": [["int", "int: the amount of insets to remove from the left. Must be non-negative. Value is 0 or greater"], ["int", "int: the amount of insets to remove from the top. Must be non-negative. Value is 0 or greater"], ["int", "int: the amount of insets to remove from the right. Must be non-negative. Value is 0 or greater"], ["int", "int: the amount of insets to remove from the bottom. Must be non-negative. Value is 0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this instance inset in the given directions. This is intended for dispatching insets to areas of the window that are smaller than the current area. Example:", "history": "Added in API level 29", "FullName": "public WindowInsets inset (int left, int top, int right, int bottom)"}, "getMandatorySystemGestureInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#WindowInsets#getSystemGestureInsets_E@"], "Permissions": [], "Description": "Returns the mandatory system gesture insets. The mandatory system gesture insets represent the area of a window where mandatory system gestures have priority and may consume some or all touch input, e.g. due to the a system bar occupying it, or it being reserved for touch-only gestures. In contrast to @B_android#view#WindowInsets#getSystemGestureInsets_E@, @B_android#view#View#setSystemGestureExclusionRects_E@. Simple taps are guaranteed to reach the window even within the system gesture insets, as long as they are outside the @B_android#view#WindowInsets#getTappableElementInsets_E@. When @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_STABLE_E@ is requested, an inset will be returned even when the system gestures are inactive due to @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_E@ or @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_E@. This inset is consumed together with the @B_android#view#WindowInsets#getSystemWindowInsets_E@ by @B_android#view#WindowInsets#consumeSystemWindowInsets_E@.", "history": "Added in API level 29", "FullName": "public Insets getMandatorySystemGestureInsets ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 20", "FullName": "public int hashCode ()"}, "getSystemWindowInsetRight()": {"Returns": [["int", "The right system window inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 20", "FullName": "public int getSystemWindowInsetRight ()"}, "replaceSystemWindowInsets(int,int,int,int)": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets This value will never be null."]], "Parameters": [["int", "int: New left inset in pixels"], ["int", "int: New top inset in pixels"], ["int", "int: New right inset in pixels"], ["int", "int: New bottom inset in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use Builder#Builder(WindowInsets) with @B_android#view#WindowInsets#Builder#setSystemWindowInsets_E@ instead. Returns a copy of this WindowInsets with selected system window insets replaced with new values. Note: If the system window insets are already consumed, this method will return them unchanged on @B_android#os#Build#VERSION_CODES#Q_E@ and later. Prior to @B_android#os#Build#VERSION_CODES#Q_E@, the new values were applied regardless of whether they were consumed, and this method returns invalid non-zero consumed insets.", "history": "Added in API level 20 Deprecated in API level 29", "FullName": "public WindowInsets replaceSystemWindowInsets (int left, int top, int right, int bottom)"}, "getStableInsetTop()": {"Returns": [["int", "The top stable inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the top stable inset in pixels. The stable inset represents the area of a full-screen window that", "history": "Added in API level 21", "FullName": "public int getStableInsetTop ()"}, "isRound()": {"Returns": [["boolean", "True if the window is round"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the associated window has a round shape. A round window's left, top, right and bottom edges reach all the way to the associated edges of the window but the corners may not be visible. Views responding to round insets should take care to not lay out critical elements within the corners where they may not be accessible.", "history": "Added in API level 20", "FullName": "public boolean isRound ()"}, "getSystemWindowInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "The system window insets This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system window insets in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 29", "FullName": "public Insets getSystemWindowInsets ()"}, "consumeDisplayCutout()": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this WindowInsets with the cutout fully consumed.", "history": "Added in API level 28", "FullName": "public WindowInsets consumeDisplayCutout ()"}, "hasInsets()": {"Returns": [["boolean", "true if any inset values are nonzero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this WindowInsets has any nonzero insets.", "history": "Added in API level 20", "FullName": "public boolean hasInsets ()"}, "getStableInsetRight()": {"Returns": [["int", "The right stable inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the right stable inset in pixels. The stable inset represents the area of a full-screen window that", "history": "Added in API level 21", "FullName": "public int getStableInsetRight ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 20", "FullName": "public String toString ()"}, "getStableInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "The stable insets This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the stable insets in pixels. The stable inset represents the area of a full-screen window that", "history": "Added in API level 29", "FullName": "public Insets getStableInsets ()"}, "hasSystemWindowInsets()": {"Returns": [["boolean", "true if any of the system window inset values are nonzero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this WindowInsets has nonzero system window insets. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 20", "FullName": "public boolean hasSystemWindowInsets ()"}, "hasStableInsets()": {"Returns": [["boolean", "true if any of the stable inset values are nonzero"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this WindowInsets has nonzero stable insets. The stable inset represents the area of a full-screen window that", "history": "Added in API level 21", "FullName": "public boolean hasStableInsets ()"}, "getTappableElementInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the tappable element insets. The tappable element insets represent how much tappable elements This may be smaller than @B_android#view#WindowInsets#getSystemWindowInsets_E@ if the system window is largely transparent and lets through simple taps (but not necessarily more complex gestures). Note that generally, tappable elements @B_android#view#WindowInsets#getSystemWindowInsets_E@ instead to avoid overlapping with the system bars. When @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_STABLE_E@ is requested, an inset will be returned even when the area covered by the inset would be tappable due to @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_E@ or @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_E@. This inset is consumed together with the @B_android#view#WindowInsets#getSystemWindowInsets_E@ by @B_android#view#WindowInsets#consumeSystemWindowInsets_E@.", "history": "Added in API level 29", "FullName": "public Insets getTappableElementInsets ()"}, "getSystemGestureInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#WindowInsets#getMandatorySystemGestureInsets_E@"], "Permissions": [], "Description": "Returns the system gesture insets. The system gesture insets represent the area of a window where system gestures have priority and may consume some or all touch input, e.g. due to the a system bar occupying it, or it being reserved for touch-only gestures. An app can declare priority over system gestures with @B_android#view#View#setSystemGestureExclusionRects_E@ outside of the @B_android#view#WindowInsets#getMandatorySystemGestureInsets_E@. Note: the system will put a limit of 200dp on the vertical extent of the exclusions it takes into account. The limit does not apply while the navigation bar is @B_android#view#View#SYSTEM_UI_FLAG_IMMERSIVE_STICKY_E@ hidden, nor to the @B_android#inputmethodservice#InputMethodService_E@ and @B_android#content#Intent#CATEGORY_HOME_E@. Simple taps are guaranteed to reach the window even within the system gesture insets, as long as they are outside the @B_android#view#WindowInsets#getTappableElementInsets_E@. When @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_STABLE_E@ is requested, an inset will be returned even when the system gestures are inactive due to @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN_E@ or @B_android#view#View#SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION_E@. This inset is consumed together with the @B_android#view#WindowInsets#getSystemWindowInsets_E@ by @B_android#view#WindowInsets#consumeSystemWindowInsets_E@.", "history": "Added in API level 29", "FullName": "public Insets getSystemGestureInsets ()"}, "getSystemWindowInsetTop()": {"Returns": [["int", "The top system window inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the top system window inset in pixels. The system window inset represents the area of a full-screen window that is partially or fully obscured by the status bar, navigation bar, IME or other system windows.", "history": "Added in API level 20", "FullName": "public int getSystemWindowInsetTop ()"}, "replaceSystemWindowInsets(int, int, int, int)": {"Returns": [["@B_android#view#WindowInsets_E@", "A modified copy of this WindowInsets"]], "Parameters": [["int", "int: New left inset in pixels"], ["int", "int: New top inset in pixels"], ["int", "int: New right inset in pixels"], ["int", "int: New bottom inset in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this WindowInsets with selected system window insets replaced with new values.", "history": "added in API level 20", "FullName": "public WindowInsets replaceSystemWindowInsets (int left, int top, int right, int bottom)"}, "getStableInsetBottom()": {"Returns": [["int", "The bottom stable inset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the bottom stable inset in pixels. The stable inset represents the area of a full-screen window that", "history": "Added in API level 21", "FullName": "public int getStableInsetBottom ()"}, "getDisplayCutout()": {"Returns": [["@B_android#view#DisplayCutout_E@", "the display cutout or null if there is none"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#DisplayCutout_E@"], "Permissions": [], "Description": "Returns the display cutout if there is one.", "history": "Added in API level 28", "FullName": "public DisplayCutout getDisplayCutout ()"}}, "Inheritance": [], "ClassName": "android.view.WindowInsets", "ClassDesc": "Describes a set of insets for window content. WindowInsets are immutable and may be expanded to include more inset types in the future. To adjust insets, use one of the supplied clone methods to obtain a new WindowInsets instance with the adjusted properties. Note: Before @B_android#os#Build#VERSION_CODES#P_E@, WindowInsets instances were only immutable during a single layout pass (i.e. would return the same values between @B_android#view#View#onApplyWindowInsets_E@ and @B_android#view#View#onLayout_E@, but could return other values otherwise). Starting with @B_android#os#Build#VERSION_CODES#P_E@, WindowInsets are always immutable and implement equality."}