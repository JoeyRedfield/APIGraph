{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this certificate."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this certificate.", "history": "Added in API level 1", "FullName": "public abstract String toString ()"}, "getEncoded()": {"Returns": [["byte[]", "encoded form of this certificate"]], "Parameters": [], "Throws": [["@B_javax#security#cert#CertificateEncodingException_E@", "on internal certificate encoding failure"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the encoded form of this certificate. It is assumed that each certificate type would have only a single form of encoding; for example, X.509 certificates would be encoded as ASN.1 DER.", "history": "Added in API level 1", "FullName": "public abstract byte[] getEncoded ()"}, "Certificate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Certificate ()"}, "verify(java.security.PublicKey, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_javax#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider.", "history": "added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}, "getPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the public key."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the public key from this certificate.", "history": "Added in API level 1", "FullName": "public abstract PublicKey getPublicKey ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the encoded forms of the two certificates match, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this certificate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this certificate for equality with the specified object. If the other object is an instanceof Certificate, then its encoded form is retrieved and compared with the encoded form of this certificate.", "history": "Added in API level 1", "FullName": "public boolean equals (Object other)"}, "verify(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "if there's no default provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_javax#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key)"}, "hashCode()": {"Returns": [["int", "the hashcode value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode value for this certificate from its encoded form.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "verify(java.security.PublicKey,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#lang#String_E@", "String: the name of the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#NoSuchProviderException_E@", "on incorrect provider."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_javax#security#cert#CertificateException_E@", "on encoding errors."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider.", "history": "Added in API level 1", "FullName": "public abstract void verify (PublicKey key, String sigProvider)"}}, "Inheritance": [], "ClassName": "javax.security.cert.Certificate", "ClassDesc": "Abstract class for managing a variety of identity certificates. An identity certificate is a guarantee by a principal that a public key is that of another principal. (A principal represents an entity such as an individual user, a group, or a corporation.) This class is an abstraction for certificates that have different formats but important common uses. For example, different types of certificates, such as X.509 and PGP, share general certificate functionality (like encoding and verifying) and some types of information (like a public key). X.509, PGP, and SDSI certificates can all be implemented by subclassing the Certificate class, even though they contain different sets of information, and they store and retrieve the information in different ways. Note: The classes in the package javax.security.cert exist for compatibility with earlier versions of the Java Secure Sockets Extension (JSSE). New applications should instead use the standard Java SE certificate classes located in java.security.cert."}