{"Functions": {"trySplit()": {"Returns": [["@B_java#util#Spliterator#OfInt_E@", "a Spliterator covering some portion of the elements, or null if this spliterator cannot be split"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this spliterator can be partitioned, returns a Spliterator covering elements, that will, upon return from this method, not be covered by this Spliterator. If this Spliterator is @B_java#util#Spliterator#ORDERED_E@, the returned Spliterator must cover a strict prefix of the elements. Unless this Spliterator covers an infinite number of elements, repeated calls to trySplit() must eventually return null. Upon non-null return: the value reported for estimateSize() before splitting, must, after splitting, be greater than or equal to estimateSize() for this and the returned Spliterator; and if this Spliterator is SUBSIZED, then estimateSize() for this spliterator before splitting must be equal to the sum of estimateSize() for this and the returned Spliterator after splitting. This method may return null for any reason, including emptiness, inability to split after traversal has commenced, data structure constraints, and efficiency considerations. This implementation permits limited parallelism.", "history": "Added in API level 24", "FullName": "public Spliterator.OfInt trySplit ()"}, "Spliterators.AbstractIntSpliterator(long,int)": {"Returns": [], "Parameters": [["long", "long: the estimated size of this spliterator if known, otherwise Long.MAX_VALUE."], ["int", "int: properties of this spliterator's source or elements. If SIZED is reported then this spliterator will additionally report SUBSIZED."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a spliterator reporting the given estimated size and characteristics.", "history": "Added in API level 24", "FullName": "protected Spliterators.AbstractIntSpliterator (long est, int additionalCharacteristics)"}, "Spliterators.AbstractIntSpliterator(long, int)": {"Returns": [], "Parameters": [["long", "long: the estimated size of this spliterator if known, otherwise Long.MAX_VALUE."], ["int", "int: properties of this spliterator's source or elements. If SIZED is reported then this spliterator will additionally report SUBSIZED."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a spliterator reporting the given estimated size and characteristics.", "history": "added in API level 24", "FullName": "protected Spliterators.AbstractIntSpliterator (long est, int additionalCharacteristics)"}, "estimateSize()": {"Returns": [["long", "the estimated size, or Long.MAX_VALUE if infinite, unknown, or too expensive to compute."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of elements that would be encountered by a @B_java#util#Spliterator#forEachRemaining_E@ traversal, or returns @B_java#lang#Long#MAX_VALUE_E@ if infinite, unknown, or too expensive to compute. If this Spliterator is @B_java#util#Spliterator#SIZED_E@ and has not yet been partially traversed or split, or this Spliterator is @B_java#util#Spliterator#SUBSIZED_E@ and has not yet been partially traversed, this estimate must be an accurate count of elements that would be encountered by a complete traversal. Otherwise, this estimate may be arbitrarily inaccurate, but must decrease as specified across invocations of @B_java#util#Spliterator#trySplit_E@.", "history": "Added in API level 24", "FullName": "public long estimateSize ()"}, "characteristics()": {"Returns": [["int", "a representation of characteristics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of characteristics of this Spliterator and its elements. The result is represented as ORed values from @B_java#util#Spliterator#ORDERED_E@, @B_java#util#Spliterator#DISTINCT_E@, @B_java#util#Spliterator#SORTED_E@, @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#NONNULL_E@, @B_java#util#Spliterator#IMMUTABLE_E@, @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#SUBSIZED_E@. Repeated calls to characteristics() on a given spliterator, prior to or in-between calls to trySplit, should always return the same result. If a Spliterator reports an inconsistent set of characteristics (either those returned from a single invocation or across multiple invocations), no guarantees can be made about any computation using this Spliterator.", "history": "Added in API level 24", "FullName": "public int characteristics ()"}}, "Inheritance": [], "ClassName": "java.util.Spliterators.AbstractIntSpliterator", "ClassDesc": "An abstract Spliterator.OfInt that implements trySplit to permit limited parallelism. To implement a spliterator an extending class need only implement @B_java#util#Spliterator#OfInt#tryAdvance_E@ tryAdvance}. The extending class should override @B_java#util#Spliterator#OfInt#forEachRemaining_E@ forEach} if it can provide a more performant implementation."}