{"Functions": {"dispatchGesture(android.accessibilityservice.GestureDescription,android.accessibilityservice.AccessibilityService.GestureResultCallback,android.os.Handler)": {"Returns": [["boolean", "true if the gesture is dispatched, false if not."]], "Parameters": [["@B_android#accessibilityservice#GestureDescription_E@", "GestureDescription: The gesture to dispatch This value must never be null."], ["@B_android#accessibilityservice#AccessibilityService#GestureResultCallback_E@", "AccessibilityService.GestureResultCallback: The object to call back when the status of the gesture is known. If null, no status is reported. This value may be null."], ["@B_android#os#Handler_E@", "Handler: The handler on which to call back the callback object. If null, the object is called back on the service's main thread. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a gesture to the touch screen. Any gestures currently in progress, whether from the user, this service, or another service, will be cancelled. The gesture will be dispatched as if it were performed directly on the screen by a user, so the events may be affected by features such as magnification and explore by touch. @B_android#R#styleable#AccessibilityService_canPerformGestures_E@ property in its meta-data. For more information, see @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@.", "history": "Added in API level 24", "FullName": "public final boolean dispatchGesture (GestureDescription gesture, AccessibilityService.GestureResultCallback callback, Handler handler)"}, "getSoftKeyboardController()": {"Returns": [["@B_android#accessibilityservice#AccessibilityService#SoftKeyboardController_E@", "the soft keyboard controller This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the soft keyboard controller, which may be used to query and modify the soft keyboard show mode.", "history": "Added in API level 24", "FullName": "public final AccessibilityService.SoftKeyboardController getSoftKeyboardController ()"}, "onGesture(int)": {"Returns": [["boolean", "Whether the gesture was handled."]], "Parameters": [["int", "int: The unique id of the performed gesture."]], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityService_E@"], "Permissions": [], "Description": "Called by the system when the user performs a specific gesture on the touch screen. @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_REQUEST_TOUCH_EXPLORATION_MODE_E@ flag.", "history": "Added in API level 16", "FullName": "protected boolean onGesture (int gestureId)"}, "onKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "If true then the event will be consumed and not delivered to applications, otherwise it will be delivered as usual."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The event to be processed. This event is owned by the caller and cannot be used after this method returns. Services wishing to use the event after this method returns should make a copy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback that allows an accessibility service to observe the key events before they are passed to the rest of the system. This means that the events are first delivered here before they are passed to the device policy, the input method, or applications.", "history": "Added in API level 18", "FullName": "protected boolean onKeyEvent (KeyEvent event)"}, "getFingerprintGestureController()": {"Returns": [["@B_android#accessibilityservice#FingerprintGestureController_E@", "The controller for fingerprint gestures, or null if gestures are unavailable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#USE_FINGERPRINT_E@"], "Description": "Get the controller for fingerprint gestures. This feature requires @B_android#accessibilityservice#AccessibilityServiceInfo#CAPABILITY_CAN_REQUEST_FINGERPRINT_GESTURES_E@. Requires @B_android#Manifest#permission#USE_FINGERPRINT_E@", "history": "Added in API level 26", "FullName": "public final FingerprintGestureController getFingerprintGestureController ()"}, "getServiceInfo()": {"Returns": [["@B_android#accessibilityservice#AccessibilityServiceInfo_E@", "The accessibility service info."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityServiceInfo_E@"], "Permissions": [], "Description": "Gets the an @B_android#accessibilityservice#AccessibilityServiceInfo_E@ describing this @B_android#accessibilityservice#AccessibilityService_E@. This method is useful if one wants to change some of the dynamically configurable properties at runtime.", "history": "Added in API level 16", "FullName": "public final AccessibilityServiceInfo getServiceInfo ()"}, "performGlobalAction(int)": {"Returns": [["boolean", "Whether the action was successfully performed."]], "Parameters": [["int", "int: The action to perform."]], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityService_E@"], "Permissions": [], "Description": "Performs a global action. Such an action can be performed at any moment regardless of the current application or user location in that application. For example going back, going home, opening recents, etc.", "history": "Added in API level 16", "FullName": "public final boolean performGlobalAction (int action)"}, "onBind(android.content.Intent)": {"Returns": [["@B_android#os#IBinder_E@", "Return an IBinder through which clients can call on to the service."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The Intent that was used to bind to this service, as given to @B_android#content#Context#bindService_E@. Note that any extras that were included with the Intent at that point will not be seen here."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement to return the implementation of the internal accessibility service interface.", "history": "Added in API level 4", "FullName": "public final IBinder onBind (Intent intent)"}, "disableSelf()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the service. After calling this method, the service will be disabled and settings will show that it is turned off.", "history": "Added in API level 24", "FullName": "public final void disableSelf ()"}, "onServiceConnected()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityServiceInfo_E@", "@B_android#accessibilityservice#AccessibilityService#setServiceInfo_E@"], "Permissions": [], "Description": "This method is a part of the @B_android#accessibilityservice#AccessibilityService_E@ lifecycle and is called after the system has successfully bound to the service. If is convenient to use this method for setting the @B_android#accessibilityservice#AccessibilityServiceInfo_E@.", "history": "Added in API level 4", "FullName": "protected void onServiceConnected ()"}, "getWindows()": {"Returns": [["@B_java#util#List_E@", "The windows if there are windows and the service is can retrieve them, otherwise an empty list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the windows on the screen. This method returns only the windows that a sighted user can interact with, as opposed to all windows. For example, if there is a modal dialog shown and the user cannot touch anything behind it, then only the modal window will be reported (assuming it is the top one). For convenience the returned windows are ordered in a descending layer order, which is the windows that are on top are reported first. Since the user can always interact with the window that has input focus by typing, the focused window is always returned (even if covered by a modal window). @B_android#R#styleable#AccessibilityService_canRetrieveWindowContent_E@ property in its meta-data. For details refer to @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@. Also the service has to opt-in to retrieve the interactive windows by setting the @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS_E@ flag.", "history": "Added in API level 21", "FullName": "public List<AccessibilityWindowInfo> getWindows ()"}, "setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)": {"Returns": [], "Parameters": [["@B_android#accessibilityservice#AccessibilityServiceInfo_E@", "AccessibilityServiceInfo: The info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#accessibilityservice#AccessibilityServiceInfo_E@ that describes this service. Note: You can call this method any time but the info will be picked up after the system has bound to this service and when this method is called thereafter.", "history": "Added in API level 4", "FullName": "public final void setServiceInfo (AccessibilityServiceInfo info)"}, "getAccessibilityButtonController()": {"Returns": [["@B_android#accessibilityservice#AccessibilityButtonController_E@", "the accessibility button controller for this @B_android#accessibilityservice#AccessibilityService_E@ This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the controller for the accessibility button within the system's navigation area. This instance may be used to query the accessibility button's state and register listeners for interactions with and state changes for the accessibility button when @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_REQUEST_ACCESSIBILITY_BUTTON_E@ is set.", "history": "Added in API level 26", "FullName": "public final AccessibilityButtonController getAccessibilityButtonController ()"}, "findFocus(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The node info of the focused view or null."]], "Parameters": [["int", "int: The focus to find. One of @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_INPUT_E@ or @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Find the view that has the specified focus type. The search is performed across all windows. @B_android#R#styleable#AccessibilityService_canRetrieveWindowContent_E@ property in its meta-data. For details refer to @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@. Also the service has to opt-in to retrieve the interactive windows by setting the @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_RETRIEVE_INTERACTIVE_WINDOWS_E@ flag. Otherwise, the search will be performed only in the active window.", "history": "Added in API level 21", "FullName": "public AccessibilityNodeInfo findFocus (int focus)"}, "getSystemService(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The service or null if the name does not exist."]], "Parameters": [["@B_java#lang#String_E@", "String: Value is @B_android#content#Context#POWER_SERVICE_E@, @B_android#content#Context#WINDOW_SERVICE_E@, @B_android#content#Context#LAYOUT_INFLATER_SERVICE_E@, @B_android#content#Context#ACCOUNT_SERVICE_E@, @B_android#content#Context#ACTIVITY_SERVICE_E@, @B_android#content#Context#ALARM_SERVICE_E@, @B_android#content#Context#NOTIFICATION_SERVICE_E@, @B_android#content#Context#ACCESSIBILITY_SERVICE_E@, @B_android#content#Context#CAPTIONING_SERVICE_E@, @B_android#content#Context#KEYGUARD_SERVICE_E@, @B_android#content#Context#LOCATION_SERVICE_E@, @B_android#content#Context#SEARCH_SERVICE_E@, @B_android#content#Context#SENSOR_SERVICE_E@, android.content.Context.SENSOR_PRIVACY_SERVICE, @B_android#content#Context#STORAGE_SERVICE_E@, @B_android#content#Context#STORAGE_STATS_SERVICE_E@, @B_android#content#Context#WALLPAPER_SERVICE_E@, android.content.Context.TIME_ZONE_RULES_MANAGER_SERVICE, @B_android#content#Context#VIBRATOR_SERVICE_E@, @B_android#content#Context#CONNECTIVITY_SERVICE_E@, @B_android#content#Context#IPSEC_SERVICE_E@, android.content.Context.TEST_NETWORK_SERVICE, @B_android#content#Context#NETWORK_STATS_SERVICE_E@, @B_android#content#Context#WIFI_SERVICE_E@, @B_android#content#Context#WIFI_AWARE_SERVICE_E@, @B_android#content#Context#WIFI_P2P_SERVICE_E@, android.content.Context.WIFI_SCANNING_SERVICE, @B_android#content#Context#WIFI_RTT_RANGING_SERVICE_E@, @B_android#content#Context#NSD_SERVICE_E@, @B_android#content#Context#AUDIO_SERVICE_E@, @B_android#content#Context#FINGERPRINT_SERVICE_E@, @B_android#content#Context#BIOMETRIC_SERVICE_E@, @B_android#content#Context#MEDIA_ROUTER_SERVICE_E@, @B_android#content#Context#TELEPHONY_SERVICE_E@, @B_android#content#Context#TELEPHONY_SUBSCRIPTION_SERVICE_E@, @B_android#content#Context#CARRIER_CONFIG_SERVICE_E@, @B_android#content#Context#TELECOM_SERVICE_E@, @B_android#content#Context#CLIPBOARD_SERVICE_E@, @B_android#content#Context#INPUT_METHOD_SERVICE_E@, @B_android#content#Context#TEXT_SERVICES_MANAGER_SERVICE_E@, @B_android#content#Context#TEXT_CLASSIFICATION_SERVICE_E@, @B_android#content#Context#APPWIDGET_SERVICE_E@, android.content.Context.ROLLBACK_SERVICE, @B_android#content#Context#DROPBOX_SERVICE_E@, @B_android#content#Context#DEVICE_POLICY_SERVICE_E@, @B_android#content#Context#UI_MODE_SERVICE_E@, @B_android#content#Context#DOWNLOAD_SERVICE_E@, @B_android#content#Context#NFC_SERVICE_E@, @B_android#content#Context#BLUETOOTH_SERVICE_E@, @B_android#content#Context#USB_SERVICE_E@, @B_android#content#Context#LAUNCHER_APPS_SERVICE_E@, @B_android#content#Context#INPUT_SERVICE_E@, @B_android#content#Context#DISPLAY_SERVICE_E@, @B_android#content#Context#USER_SERVICE_E@, @B_android#content#Context#RESTRICTIONS_SERVICE_E@, @B_android#content#Context#APP_OPS_SERVICE_E@, @B_android#content#Context#ROLE_SERVICE_E@, @B_android#content#Context#CAMERA_SERVICE_E@, @B_android#content#Context#PRINT_SERVICE_E@, @B_android#content#Context#CONSUMER_IR_SERVICE_E@, @B_android#content#Context#TV_INPUT_SERVICE_E@, @B_android#content#Context#USAGE_STATS_SERVICE_E@, @B_android#content#Context#MEDIA_SESSION_SERVICE_E@, @B_android#content#Context#BATTERY_SERVICE_E@, @B_android#content#Context#JOB_SCHEDULER_SERVICE_E@, @B_android#content#Context#MEDIA_PROJECTION_SERVICE_E@, @B_android#content#Context#MIDI_SERVICE_E@, android.content.Context.RADIO_SERVICE, @B_android#content#Context#HARDWARE_PROPERTIES_SERVICE_E@, @B_android#content#Context#SHORTCUT_SERVICE_E@, @B_android#content#Context#SYSTEM_HEALTH_SERVICE_E@, @B_android#content#Context#COMPANION_DEVICE_SERVICE_E@, @B_android#content#Context#CROSS_PROFILE_APPS_SERVICE_E@, or android.content.Context.PERMISSION_SERVICE This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the handle to a system-level service by name. The class of the returned object varies by the requested name. Currently available names are: Note: System services obtained via this API may be closely associated with the Context in which they are obtained from. In general, do not share the service objects between various different contexts (Activities, Applications, Services, Providers, etc.) Note: Instant apps, for which @B_android#content#pm#PackageManager#isInstantApp_E@ returns true, don't have access to the following system services: @B_android#content#Context#DEVICE_POLICY_SERVICE_E@, @B_android#content#Context#FINGERPRINT_SERVICE_E@, @B_android#content#Context#KEYGUARD_SERVICE_E@, @B_android#content#Context#SHORTCUT_SERVICE_E@, @B_android#content#Context#USB_SERVICE_E@, @B_android#content#Context#WALLPAPER_SERVICE_E@, @B_android#content#Context#WIFI_P2P_SERVICE_E@, @B_android#content#Context#WIFI_SERVICE_E@, @B_android#content#Context#WIFI_AWARE_SERVICE_E@. For these services this method will return null. Generally, if you are running as an instant app you should always check whether the result of this method is null. Note: When implementing this method, keep in mind that new services can be added on newer Android releases, so if you're looking for just the explicit names mentioned above, make sure to return null when you don't recognize the name \u2014 if you throw a @B_java#lang#RuntimeException_E@ exception instead, you're app might break on new Android releases.", "history": "Added in API level 4", "FullName": "public Object getSystemService (String name)"}, "onInterrupt()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback for interrupting the accessibility feedback.", "history": "Added in API level 4", "FullName": "public abstract void onInterrupt ()"}, "onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityEvent_E@", "AccessibilityEvent: The new event. This event is owned by the caller and cannot be used after this method returns. Services wishing to use the event after this method returns should make a copy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Callback for @B_android#view#accessibility#AccessibilityEvent_E@s.", "history": "Added in API level 4", "FullName": "public abstract void onAccessibilityEvent (AccessibilityEvent event)"}, "AccessibilityService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 4", "FullName": "public AccessibilityService ()"}, "getMagnificationController()": {"Returns": [["@B_android#accessibilityservice#AccessibilityService#MagnificationController_E@", "the magnification controller This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the magnification controller, which may be used to query and modify the state of display magnification. @B_android#R#styleable#AccessibilityService_canControlMagnification_E@ property in its meta-data. For more information, see @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@.", "history": "Added in API level 24", "FullName": "public final AccessibilityService.MagnificationController getMagnificationController ()"}, "getRootInActiveWindow()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The root node if this service can retrieve window content."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the root node in the currently active window if this service can retrieve window content. The active window is the one that the user is currently touching or the window with input focus, if the user is not touching any window. The currently active window is defined as the window that most recently fired one of the following events: @B_android#view#accessibility#AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED_E@, @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@, @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_EXIT_E@. In other words, the last window shown that also has input focus. @B_android#R#styleable#AccessibilityService_canRetrieveWindowContent_E@ property in its meta-data. For details refer to @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeInfo getRootInActiveWindow ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.accessibilityservice.AccessibilityService", "ClassDesc": "Accessibility services should only be used to assist users with disabilities in using Android devices and apps. They run in the background and receive callbacks by the system when @B_android#view#accessibility#AccessibilityEvent_E@s are fired. Such events denote some state transition in the user interface, for example, the focus has changed, a button has been clicked, etc. Such a service can optionally request the capability for querying the content of the active window. Development of an accessibility service requires extending this class and implementing its abstract methods. The lifecycle of an accessibility service is managed exclusively by the system and follows the established service life cycle. Starting an accessibility service is triggered exclusively by the user explicitly turning the service on in device settings. After the system binds to a service, it calls @B_android#accessibilityservice#AccessibilityService#onServiceConnected_E@. This method can be overridden by clients that want to perform post binding setup. An accessibility service stops either when the user turns it off in device settings or when it calls @B_android#accessibilityservice#AccessibilityService#disableSelf_E@. An accessibility is declared as any other service in an AndroidManifest.xml, but it must do two things: An accessibility service can be configured to receive specific types of accessibility events, listen only to specific packages, get events from each type only once in a given time frame, retrieve window content, specify a settings activity, etc. There are two approaches for configuring an accessibility service: Providing a @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@ entry in the manifest when declaring the service. A service declaration with a meta-data tag is presented below: For more details refer to @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@ and <accessibility-service>. Calling @B_android#accessibilityservice#AccessibilityService#setServiceInfo_E@. Note that this method can be called any time to dynamically change the service configuration. @B_android#accessibilityservice#AccessibilityServiceInfo#eventTypes_E@, @B_android#accessibilityservice#AccessibilityServiceInfo#feedbackType_E@, @B_android#accessibilityservice#AccessibilityServiceInfo#flags_E@, @B_android#accessibilityservice#AccessibilityServiceInfo#notificationTimeout_E@, @B_android#accessibilityservice#AccessibilityServiceInfo#packageNames_E@ For more details refer to @B_android#accessibilityservice#AccessibilityServiceInfo_E@. A service can specify in its declaration that it can retrieve window content which is represented as a tree of @B_android#view#accessibility#AccessibilityWindowInfo_E@ and @B_android#view#accessibility#AccessibilityNodeInfo_E@ objects. Note that declaring this capability requires that the service declares its configuration via an XML resource referenced by @B_android#accessibilityservice#AccessibilityService#SERVICE_META_DATA_E@. Window content may be retrieved with @B_android#view#accessibility#AccessibilityRecord#getSource_E@, @B_android#accessibilityservice#AccessibilityService#findFocus_E@, @B_android#accessibilityservice#AccessibilityService#getWindows_E@, or @B_android#accessibilityservice#AccessibilityService#getRootInActiveWindow_E@. All accessibility services are notified of all events they have requested, regardless of their feedback type. @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_CLICKED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_LONG_CLICKED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_FOCUSED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_SELECTED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_TEXT_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_WINDOW_STATE_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_NOTIFICATION_STATE_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_START_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_TOUCH_EXPLORATION_GESTURE_END_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_EXIT_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_SCROLLED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_TEXT_SELECTION_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_ANNOUNCEMENT_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_GESTURE_DETECTION_START_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_GESTURE_DETECTION_END_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_TOUCH_INTERACTION_START_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_TOUCH_INTERACTION_END_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUSED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_WINDOWS_CHANGED_E@ @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_ACCESSIBILITY_FOCUS_CLEARED_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_AUDIBLE_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_HAPTIC_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_AUDIBLE_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_VISUAL_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_GENERIC_E@ @B_android#accessibilityservice#AccessibilityServiceInfo#FEEDBACK_BRAILLE_E@"}