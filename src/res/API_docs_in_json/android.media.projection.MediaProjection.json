{"Functions": {"createVirtualDisplay(java.lang.String,int,int,int,int,android.view.Surface,android.hardware.display.VirtualDisplay.Callback,android.os.Handler)": {"Returns": [["@B_android#hardware#display#VirtualDisplay_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the virtual display, must be non-empty. This value must never be null."], ["int", "int: The width of the virtual display in pixels. Must be greater than 0."], ["int", "int: The height of the virtual display in pixels. Must be greater than 0."], ["int", "int: The density of the virtual display in dpi. Must be greater than 0."], ["int", "int: A combination of virtual display flags. See @B_android#hardware#display#DisplayManager_E@ for the full list of flags."], ["@B_android#view#Surface_E@", "Surface: The surface to which the content of the virtual display should be rendered, or null if there is none initially. This value may be null."], ["@B_android#hardware#display#VirtualDisplay#Callback_E@", "VirtualDisplay.Callback: Callback to call when the virtual display's state changes, or null if none. This value may be null."], ["@B_android#os#Handler_E@", "Handler: The @B_android#os#Handler_E@ on which the callback should be invoked, or null if the callback should be invoked on the calling thread's main @B_android#os#Looper_E@. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#hardware#display#VirtualDisplay_E@"], "Permissions": [], "Description": "Creates a @B_android#hardware#display#VirtualDisplay_E@ to capture the contents of the screen.", "history": "Added in API level 21", "FullName": "public VirtualDisplay createVirtualDisplay (String name, int width, int height, int dpi, int flags, Surface surface, VirtualDisplay.Callback callback, Handler handler)"}, "registerCallback(android.media.projection.MediaProjection.Callback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#media#projection#MediaProjection#Callback_E@", "MediaProjection.Callback: The callback to call."], ["@B_android#os#Handler_E@", "Handler: The handler on which the callback should be invoked, or null if the callback should be invoked on the calling thread's looper."]], "Throws": [], "SeeAlso": ["@B_android#media#projection#MediaProjection#unregisterCallback_E@"], "Permissions": [], "Description": "Register a listener to receive notifications about when the @B_android#media#projection#MediaProjection_E@ changes state.", "history": "Added in API level 21", "FullName": "public void registerCallback (MediaProjection.Callback callback, Handler handler)"}, "unregisterCallback(android.media.projection.MediaProjection.Callback)": {"Returns": [], "Parameters": [["@B_android#media#projection#MediaProjection#Callback_E@", "MediaProjection.Callback: The callback to unregister."]], "Throws": [], "SeeAlso": ["@B_android#media#projection#MediaProjection#registerCallback_E@"], "Permissions": [], "Description": "Unregister a MediaProjection listener.", "history": "Added in API level 21", "FullName": "public void unregisterCallback (MediaProjection.Callback callback)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops projection.", "history": "Added in API level 21", "FullName": "public void stop ()"}}, "Inheritance": [], "ClassName": "android.media.projection.MediaProjection", "ClassDesc": "A token granting applications the ability to capture screen contents and/or record system audio. The exact capabilities granted depend on the type of MediaProjection. A screen capture session can be started through @B_android#media#projection#MediaProjectionManager#createScreenCaptureIntent_E@. This grants the ability to capture screen contents, but not system audio."}