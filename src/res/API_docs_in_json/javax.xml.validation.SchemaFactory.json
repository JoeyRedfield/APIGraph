{"Functions": {"newInstance(java.lang.String)": {"Returns": [["@B_javax#xml#validation#SchemaFactory_E@", "New instance of a SchemaFactory"]], "Parameters": [["@B_java#lang#String_E@", "String: Specifies the schema language which the returned SchemaFactory will understand. See the list of available schema languages for the possible values."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If no implementation of the schema language is available."], ["@B_java#lang#NullPointerException_E@", "If the schemaLanguage parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Lookup an implementation of the SchemaFactory that supports the specified schema language and return it. To find a SchemaFactory object for a given schema language, this method looks the following places in the following order where \"the class loader\" refers to the context class loader: If everything fails, @B_java#lang#IllegalArgumentException_E@ will be thrown. See @B_java#util#Properties#load_E@ for exactly how a property file is parsed. In particular, colons ':' need to be escaped in a property file, so make sure schema language URIs are properly escaped in it. For example:", "history": "Added in API level 8", "FullName": "public static SchemaFactory newInstance (String schemaLanguage)"}, "SchemaFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for derived classes. The constructor does nothing. Derived classes must create @B_javax#xml#validation#SchemaFactory_E@ objects that have null @B_org#xml#sax#ErrorHandler_E@ and null @B_org#w3c#dom#ls#LSResourceResolver_E@.", "history": "Added in API level 8", "FullName": "protected SchemaFactory ()"}, "setProperty(java.lang.String, java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a non-null fully-qualified URI."], ["@B_java#lang#Object_E@", "Object: The requested value for the property."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the property value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the @B_javax#xml#validation#SchemaFactory_E@ recognizes the property name but cannot set the requested value."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to recognize a property name but to be unable to change the current value. @B_javax#xml#validation#SchemaFactory_E@s are not required to recognize setting any specific property names.", "history": "added in API level 8", "FullName": "public void setProperty (String name, Object object)"}, "newInstance(java.lang.String,java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_javax#xml#validation#SchemaFactory_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if factoryClassName is not available, cannot be instantiated, or doesn't support schemaLanguage."]], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of the named implementation of SchemaFactory.", "history": "Added in API level 9", "FullName": "public static SchemaFactory newInstance (String schemaLanguage, String factoryClassName, ClassLoader classLoader)"}, "getFeature(java.lang.String)": {"Returns": [["boolean", "The current value of the feature (true or false)."]], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a non-null fully-qualified URI."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the feature value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the @B_javax#xml#validation#SchemaFactory_E@ recognizes the feature name but cannot determine its value at this time."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#setFeature_E@"], "Permissions": [], "Description": "Look up the value of a feature flag. The feature name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to recognize a feature name but temporarily be unable to return its value. Implementers are free (and encouraged) to invent their own features, using names built on their own URIs.", "history": "Added in API level 8", "FullName": "public boolean getFeature (String name)"}, "isSchemaLanguageSupported(java.lang.String)": {"Returns": [["boolean", "true if SchemaFactory supports schemaLanguage, else false."]], "Parameters": [["@B_java#lang#String_E@", "String: Specifies the schema language which the returned SchemaFactory will understand. schemaLanguage must specify a valid schema language."]], "Throws": [["@B_java#lang#NullPointerException_E@", "If schemaLanguage is null."], ["@B_java#lang#IllegalArgumentException_E@", "If schemaLanguage.length() == 0 or schemaLanguage does not specify a valid schema language."]], "SeeAlso": [], "Permissions": [], "Description": "Is specified schema supported by this SchemaFactory?", "history": "Added in API level 8", "FullName": "public abstract boolean isSchemaLanguageSupported (String schemaLanguage)"}, "getProperty(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "The current value of the property."]], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a non-null fully-qualified URI."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the property value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the XMLReader recognizes the property name but cannot determine its value at this time."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#setProperty_E@"], "Permissions": [], "Description": "Look up the value of a property. The property name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to recognize a property name but temporarily be unable to return its value. @B_javax#xml#validation#SchemaFactory_E@s are not required to recognize any specific property names. Implementers are free (and encouraged) to invent their own properties, using names built on their own URIs.", "history": "Added in API level 8", "FullName": "public Object getProperty (String name)"}, "newSchema()": {"Returns": [["@B_javax#xml#validation#Schema_E@", "Always return non-null valid @B_javax#xml#validation#Schema_E@ object."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "If this operation is not supported by the callee."], ["@B_org#xml#sax#SAXException_E@", "If this operation is supported but failed for some reason."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a special @B_javax#xml#validation#Schema_E@ object. The exact semantics of the returned @B_javax#xml#validation#Schema_E@ object depends on the schema language that this @B_javax#xml#validation#SchemaFactory_E@ is created for. Also, implementations are allowed to use implementation-specific property/feature to alter the semantics of this method. For XML Schema, this method creates a @B_javax#xml#validation#Schema_E@ object that performs validation by using location hints specified in documents. The returned @B_javax#xml#validation#Schema_E@ object assumes that if documents refer to the same URL in the schema location hints, they will always resolve to the same schema document. This assumption allows implementations to reuse parsed results of schema documents so that multiple validations against the same schema will run faster. Note that the use of schema location hints introduces a vulnerability to denial-of-service attacks. RELAX NG does not support this operation.", "history": "Added in API level 8", "FullName": "public abstract Schema newSchema ()"}, "setFeature(java.lang.String,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a non-null fully-qualified URI."], ["boolean", "boolean: The requested value of the feature (true or false)."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the feature value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the @B_javax#xml#validation#SchemaFactory_E@ recognizes the feature name but cannot set the requested value."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#getFeature_E@"], "Permissions": [], "Description": "Set the value of a feature flag. Feature can be used to control the way a @B_javax#xml#validation#SchemaFactory_E@ parses schemas, although @B_javax#xml#validation#SchemaFactory_E@s are not required to recognize any specific feature names. The feature name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to expose a feature value but to be unable to change the current value. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#validation#SchemaFactory#setErrorHandler_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "Added in API level 8", "FullName": "public void setFeature (String name, boolean value)"}, "setFeature(java.lang.String, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The feature name, which is a non-null fully-qualified URI."], ["boolean", "boolean: The requested value of the feature (true or false)."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the feature value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the @B_javax#xml#validation#SchemaFactory_E@ recognizes the feature name but cannot set the requested value."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#getFeature_E@"], "Permissions": [], "Description": "Set the value of a feature flag. Feature can be used to control the way a @B_javax#xml#validation#SchemaFactory_E@ parses schemas, although @B_javax#xml#validation#SchemaFactory_E@s are not required to recognize any specific feature names. The feature name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to expose a feature value but to be unable to change the current value. All implementations are required to support the @B_javax#xml#XMLConstants#FEATURE_SECURE_PROCESSING_E@ feature. When the feature is: true: the implementation will limit XML processing to conform to implementation limits. Examples include entity expansion limits and XML Schema constructs that would consume large amounts of resources. If XML processing is limited for security reasons, it will be reported via a call to the registered @B_org#xml#sax#ErrorHandler#fatalError_E@. See @B_javax#xml#validation#SchemaFactory#setErrorHandler_E@. false: the implementation will processing XML according to the XML specifications without regard to possible implementation limits.", "history": "added in API level 8", "FullName": "public void setFeature (String name, boolean value)"}, "getResourceResolver()": {"Returns": [["@B_org#w3c#dom#ls#LSResourceResolver_E@", "This method returns the object that was last set through the @B_javax#xml#validation#SchemaFactory#setResourceResolver_E@ method, or null if that method has never been called since this @B_javax#xml#validation#SchemaFactory_E@ has created."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#setErrorHandler_E@"], "Permissions": [], "Description": "Gets the current @B_org#w3c#dom#ls#LSResourceResolver_E@ set to this @B_javax#xml#validation#SchemaFactory_E@.", "history": "Added in API level 8", "FullName": "public abstract LSResourceResolver getResourceResolver ()"}, "newSchema(java.io.File)": {"Returns": [["@B_javax#xml#validation#Schema_E@", "New Schema from parsing schema."]], "Parameters": [["@B_java#io#File_E@", "File: File that represents a schema."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "If a SAX error occurs during parsing."], ["@B_java#lang#NullPointerException_E@", "if schema is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified File as a schema and returns it as a Schema. This is a convenience method for @B_javax#xml#validation#SchemaFactory#newSchema_E@.", "history": "Added in API level 8", "FullName": "public Schema newSchema (File schema)"}, "newSchema(java.net.URL)": {"Returns": [["@B_javax#xml#validation#Schema_E@", "New Schema from parsing schema."]], "Parameters": [["@B_java#net#URL_E@", "URL: URL that represents a schema."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "If a SAX error occurs during parsing."], ["@B_java#lang#NullPointerException_E@", "if schema is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified URL as a schema and returns it as a Schema. This is a convenience method for @B_javax#xml#validation#SchemaFactory#newSchema_E@.", "history": "Added in API level 8", "FullName": "public Schema newSchema (URL schema)"}, "newSchema(javax.xml.transform.Source)": {"Returns": [["@B_javax#xml#validation#Schema_E@", "New Schema from parsing schema."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: Source that represents a schema."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "If a SAX error occurs during parsing."], ["@B_java#lang#NullPointerException_E@", "if schema is null."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified source as a schema and returns it as a schema. This is a convenience method for @B_javax#xml#validation#SchemaFactory#newSchema_E@.", "history": "Added in API level 8", "FullName": "public Schema newSchema (Source schema)"}, "setResourceResolver(org.w3c.dom.ls.LSResourceResolver)": {"Returns": [], "Parameters": [["@B_org#w3c#dom#ls#LSResourceResolver_E@", "LSResourceResolver: A new resource resolver to be set. This parameter can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_org#w3c#dom#ls#LSResourceResolver_E@ to customize resource resolution when parsing schemas. @B_javax#xml#validation#SchemaFactory_E@ uses a @B_org#w3c#dom#ls#LSResourceResolver_E@ when it needs to locate external resources while parsing schemas, although exactly what constitutes \"locating external resources\" is up to each schema language. For example, for W3C XML Schema, this includes files Applications can call this method even during a @B_javax#xml#validation#Schema_E@ is being parsed. When the @B_org#w3c#dom#ls#LSResourceResolver_E@ is null, the implementation will behave as if the following @B_org#w3c#dom#ls#LSResourceResolver_E@ is set: If a @B_org#w3c#dom#ls#LSResourceResolver_E@ throws a @B_java#lang#RuntimeException_E@ (or instances of its derived classes), then the @B_javax#xml#validation#SchemaFactory_E@ will abort the parsing and the caller of the newSchema method will receive the same @B_java#lang#RuntimeException_E@. When a new @B_javax#xml#validation#SchemaFactory_E@ object is created, initially this field is set to null. This field will NOT be inherited to @B_javax#xml#validation#Schema_E@s, @B_javax#xml#validation#Validator_E@s, or @B_javax#xml#validation#ValidatorHandler_E@s that are created from this @B_javax#xml#validation#SchemaFactory_E@.", "history": "Added in API level 8", "FullName": "public abstract void setResourceResolver (LSResourceResolver resourceResolver)"}, "setProperty(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The property name, which is a non-null fully-qualified URI."], ["@B_java#lang#Object_E@", "Object: The requested value for the property."]], "Throws": [["@B_org#xml#sax#SAXNotRecognizedException_E@", "If the property value can't be assigned or retrieved."], ["@B_org#xml#sax#SAXNotSupportedException_E@", "When the @B_javax#xml#validation#SchemaFactory_E@ recognizes the property name but cannot set the requested value."], ["@B_java#lang#NullPointerException_E@", "if the name parameter is null."]], "SeeAlso": [], "Permissions": [], "Description": "Set the value of a property. The property name is any fully-qualified URI. It is possible for a @B_javax#xml#validation#SchemaFactory_E@ to recognize a property name but to be unable to change the current value. @B_javax#xml#validation#SchemaFactory_E@s are not required to recognize setting any specific property names.", "history": "Added in API level 8", "FullName": "public void setProperty (String name, Object object)"}, "getErrorHandler()": {"Returns": [["@B_org#xml#sax#ErrorHandler_E@", "This method returns the object that was last set through the @B_javax#xml#validation#SchemaFactory#setErrorHandler_E@ method, or null if that method has never been called since this @B_javax#xml#validation#SchemaFactory_E@ has created."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#xml#validation#SchemaFactory#setErrorHandler_E@"], "Permissions": [], "Description": "Gets the current @B_org#xml#sax#ErrorHandler_E@ set to this @B_javax#xml#validation#SchemaFactory_E@.", "history": "Added in API level 8", "FullName": "public abstract ErrorHandler getErrorHandler ()"}, "setErrorHandler(org.xml.sax.ErrorHandler)": {"Returns": [], "Parameters": [["@B_org#xml#sax#ErrorHandler_E@", "ErrorHandler: A new error handler to be set. This parameter can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_org#xml#sax#ErrorHandler_E@ to receive errors encountered during the newSchema method invocation. Error handler can be used to customize the error handling process during schema parsing. When an @B_org#xml#sax#ErrorHandler_E@ is set, errors found during the parsing of schemas will be first sent to the @B_org#xml#sax#ErrorHandler_E@. The error handler can abort the parsing of a schema immediately by throwing @B_org#xml#sax#SAXException_E@ from the handler. Or for example it can print an error to the screen and try to continue the processing by returning normally from the @B_org#xml#sax#ErrorHandler_E@ If any @B_java#lang#Throwable_E@ (or instances of its derived classes) is thrown from an @B_org#xml#sax#ErrorHandler_E@, the caller of the newSchema method will be thrown the same @B_java#lang#Throwable_E@ object. @B_javax#xml#validation#SchemaFactory_E@ is not allowed to throw @B_org#xml#sax#SAXException_E@ without first reporting it to @B_org#xml#sax#ErrorHandler_E@. Applications can call this method even during a @B_javax#xml#validation#Schema_E@ is being parsed. When the @B_org#xml#sax#ErrorHandler_E@ is null, the implementation will behave as if the following @B_org#xml#sax#ErrorHandler_E@ is set: When a new @B_javax#xml#validation#SchemaFactory_E@ object is created, initially this field is set to null. This field will NOT be inherited to @B_javax#xml#validation#Schema_E@s, @B_javax#xml#validation#Validator_E@s, or @B_javax#xml#validation#ValidatorHandler_E@s that are created from this @B_javax#xml#validation#SchemaFactory_E@.", "history": "Added in API level 8", "FullName": "public abstract void setErrorHandler (ErrorHandler errorHandler)"}, "newSchema(javax.xml.transform.Source[])": {"Returns": [["@B_javax#xml#validation#Schema_E@", "Always return a non-null valid @B_javax#xml#validation#Schema_E@ object. Note that when an error has been reported, there is no guarantee that the returned @B_javax#xml#validation#Schema_E@ object is meaningful."]], "Parameters": [["@B_javax#xml#transform#Source_E@", "Source: inputs to be parsed. @B_javax#xml#validation#SchemaFactory_E@ is required to recognize @B_javax#xml#transform#stream#StreamSource_E@, @B_javax#xml#transform#sax#SAXSource_E@, and @B_javax#xml#transform#dom#DOMSource_E@."]], "Throws": [["@B_org#xml#sax#SAXException_E@", "If an error is found during processing the specified inputs. When an @B_org#xml#sax#ErrorHandler_E@ is set, errors are reported to there first. See @B_javax#xml#validation#SchemaFactory#setErrorHandler_E@."], ["@B_java#lang#NullPointerException_E@", "If the schemas parameter itself is null or any item in the array is null."], ["@B_java#lang#IllegalArgumentException_E@", "If any item in the array is not recognized by this method."], ["@B_java#lang#UnsupportedOperationException_E@", "If the schema language doesn't support this operation."]], "SeeAlso": [], "Permissions": [], "Description": "Parses the specified source(s) as a schema and returns it as a schema. The callee will read all the @B_javax#xml#transform#Source_E@s and combine them into a single schema. The exact semantics of the combination depends on the schema language that this @B_javax#xml#validation#SchemaFactory_E@ object is created for. When an @B_org#xml#sax#ErrorHandler_E@ is set, the callee will report all the errors found in sources to the handler. If the handler throws an exception, it will abort the schema compilation and the same exception will be thrown from this method. Also, after an error is reported to a handler, the callee is allowed to abort the further processing by throwing it. If an error handler is not set, the callee will throw the first error it finds in the sources. The resulting schema contains components from the specified sources. The same result would be achieved if all these sources were imported, using appropriate values for schemaLocation and namespace, into a single schema document with a different targetNamespace and no components of its own, if the import elements were given in the same order as the sources. Section 4.2.3 of the XML Schema recommendation describes the options processors have in this regard. While a processor should be consistent in its treatment of JAXP schema sources and XML Schema imports, the behavior between JAXP-compliant parsers may vary; in particular, parsers may choose to ignore all but the first <import> for a given namespace, regardless of information provided in schemaLocation. If the parsed set of schemas includes error(s) as specified in the section 5.1 of the XML Schema spec, then the error must be reported to the @B_org#xml#sax#ErrorHandler_E@. For RELAX NG, this method must throw @B_java#lang#UnsupportedOperationException_E@ if", "history": "Added in API level 8", "FullName": "public abstract Schema newSchema (Source[] schemas)"}}, "Inheritance": [], "ClassName": "javax.xml.validation.SchemaFactory", "ClassDesc": "Factory that creates @B_javax#xml#validation#Schema_E@ objects. Entry-point to the validation API. @B_javax#xml#validation#SchemaFactory_E@ is a schema compiler. It reads external representations of schemas and prepares them for validation. The @B_javax#xml#validation#SchemaFactory_E@ class is not thread-safe. In other words, it is the application's responsibility to ensure that at most one thread is using a @B_javax#xml#validation#SchemaFactory_E@ object at any given moment. Implementations are encouraged to mark methods as @B_javax#xml#validation#SchemaFactory_E@ is not re-entrant. While one of the newSchema methods is being invoked, applications may not attempt to recursively invoke the newSchema method, even from the same thread. This spec uses a namespace URI to designate a schema language. The following table shows the values defined by this specification. To be compliant with the spec, the implementation is only required to support W3C XML Schema 1.0. However, if it chooses to support other schema languages listed here, it must conform to the relevant behaviors described in this spec. Schema languages not listed here are expected to introduce their own URIs to represent themselves. The @B_javax#xml#validation#SchemaFactory_E@ class is capable of locating other implementations for other schema languages at run-time. Note that because the XML DTD is strongly tied to the parsing process and has a significant effect on the parsing process, it is impossible to define the DTD validation as a process independent from parsing. For this reason, this specification does not define the semantics for the XML DTD. This doesn't prohibit implementers from implementing it in a way they see fit, but users are warned that any DTD validation implemented on this interface necessarily deviate from the XML DTD semantics as defined in the XML 1.0."}