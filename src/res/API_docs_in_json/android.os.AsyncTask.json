{"Functions": {"getStatus()": {"Returns": [["@B_android#os#AsyncTask#Status_E@", "The current status."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current status of this task.", "history": "Added in API level 3", "FullName": "public final AsyncTask.Status getStatus ()"}, "get()": {"Returns": [["Result", "The computed result."]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "If the computation was cancelled."], ["@B_java#util#concurrent#ExecutionException_E@", "If the computation threw an exception."], ["@B_java#lang#InterruptedException_E@", "If the current thread was interrupted while waiting."]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for the computation to complete, and then retrieves its result.", "history": "Added in API level 3", "FullName": "public final Result get ()"}, "onPreExecute()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#onPostExecute_E@", "@B_android#os#AsyncTask#doInBackground_E@"], "Permissions": [], "Description": "Runs on the UI thread before @B_android#os#AsyncTask#doInBackground_E@. Invoked directly by @B_android#os#AsyncTask#execute_E@ or @B_android#os#AsyncTask#executeOnExecutor_E@. The default version does nothing. This method must be called from the", "history": "Added in API level 3", "FullName": "protected void onPreExecute ()"}, "execute(Params...)": {"Returns": [["@B_android#os#AsyncTask_E@", "This instance of AsyncTask."]], "Parameters": [["Params...", "Params: The parameters of the task."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#os#AsyncTask#getStatus_E@ returns either @B_android#os#AsyncTask#Status#RUNNING_E@ or @B_android#os#AsyncTask#Status#FINISHED_E@."]], "SeeAlso": ["@B_android#os#AsyncTask#executeOnExecutor_E@", "@B_android#os#AsyncTask#execute_E@"], "Permissions": [], "Description": "Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. Note: this function schedules the task on a queue for a single background thread or pool of threads depending on the platform version. When first introduced, AsyncTasks were executed serially on a single background thread. Starting with @B_android#os#Build#VERSION_CODES#DONUT_E@, this was changed to a pool of threads allowing multiple tasks to operate in parallel. Starting @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@, tasks are back to being executed on a single thread to avoid common application errors caused by parallel execution. If you truly want parallel execution, you can use the @B_android#os#AsyncTask#executeOnExecutor_E@ version of this method with @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@; however, see commentary there for warnings on its use. This method must be invoked on the UI thread. This method must be called from the", "history": "Added in API level 3", "FullName": "public final AsyncTask<Params, Progress, Result> execute (Params... params)"}, "get(long,java.util.concurrent.TimeUnit)": {"Returns": [["Result", "The computed result."]], "Parameters": [["long", "long: Time to wait before cancelling the operation."], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit for the timeout."]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "If the computation was cancelled."], ["@B_java#util#concurrent#ExecutionException_E@", "If the computation threw an exception."], ["@B_java#lang#InterruptedException_E@", "If the current thread was interrupted while waiting."], ["@B_java#util#concurrent#TimeoutException_E@", "If the wait timed out."]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result.", "history": "Added in API level 3", "FullName": "public final Result get (long timeout, TimeUnit unit)"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["Result", "The computed result."]], "Parameters": [["long", "long: Time to wait before cancelling the operation."], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: The time unit for the timeout."]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", "If the computation was cancelled."], ["@B_java#util#concurrent#ExecutionException_E@", "If the computation threw an exception."], ["@B_java#lang#InterruptedException_E@", "If the current thread was interrupted while waiting."], ["@B_java#util#concurrent#TimeoutException_E@", "If the wait timed out."]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result.", "history": "added in API level 3", "FullName": "public final Result get (long timeout, TimeUnit unit)"}, "execute(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#execute_E@", "@B_android#os#AsyncTask#executeOnExecutor_E@"], "Permissions": [], "Description": "Convenience version of @B_android#os#AsyncTask#execute_E@ for use with a simple Runnable object. See @B_android#os#AsyncTask#execute_E@ for more information on the order of execution. This method must be called from the", "history": "Added in API level 11", "FullName": "public static void execute (Runnable runnable)"}, "onPostExecute(Result)": {"Returns": [], "Parameters": [["Result", "Result: The result of the operation computed by @B_android#os#AsyncTask#doInBackground_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#onPreExecute_E@", "@B_android#os#AsyncTask#doInBackground_E@", "@B_android#os#AsyncTask#onCancelled_E@"], "Permissions": [], "Description": "Runs on the UI thread after @B_android#os#AsyncTask#doInBackground_E@. The specified result is the value returned by @B_android#os#AsyncTask#doInBackground_E@. To better support testing frameworks, it is recommended that this be written to tolerate direct execution as part of the execute() call. The default version does nothing. This method won't be invoked if the task was cancelled. This method must be called from the", "history": "Added in API level 3", "FullName": "protected void onPostExecute (Result result)"}, "executeOnExecutor(java.util.concurrent.Executor,Params...)": {"Returns": [["@B_android#os#AsyncTask_E@", "This instance of AsyncTask."]], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: The executor to use. @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@ is available as a convenient process-wide thread pool for tasks that are loosely coupled."], ["Params...", "Params: The parameters of the task."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If @B_android#os#AsyncTask#getStatus_E@ returns either @B_android#os#AsyncTask#Status#RUNNING_E@ or @B_android#os#AsyncTask#Status#FINISHED_E@."]], "SeeAlso": ["@B_android#os#AsyncTask#execute_E@"], "Permissions": [], "Description": "Executes the task with the specified parameters. The task returns itself (this) so that the caller can keep a reference to it. This method is typically used with @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@ to allow multiple tasks to run in parallel on a pool of threads managed by AsyncTask, however you can also use your own @B_java#util#concurrent#Executor_E@ for custom behavior. Warning: Allowing multiple tasks to run in parallel from a thread pool is generally not what one wants, because the order of their operation is not defined. For example, if these tasks are used to modify any state in common (such as writing a file due to a button click), there are no guarantees on the order of the modifications. Without careful work it is possible in rare cases for the newer version of the data to be over-written by an older one, leading to obscure data loss and stability issues. Such changes are best executed in serial; to guarantee such work is serialized regardless of platform version you can use this function with @B_android#os#AsyncTask#SERIAL_EXECUTOR_E@. This method must be invoked on the UI thread. This method must be called from the", "history": "Added in API level 11", "FullName": "public final AsyncTask<Params, Progress, Result> executeOnExecutor (Executor exec, Params... params)"}, "onCancelled()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#onCancelled_E@", "@B_android#os#AsyncTask#cancel_E@", "@B_android#os#AsyncTask#isCancelled_E@"], "Permissions": [], "Description": "Applications should preferably override @B_android#os#AsyncTask#onCancelled_E@. This method is invoked by the default implementation of @B_android#os#AsyncTask#onCancelled_E@. The default version does nothing. Runs on the UI thread after @B_android#os#AsyncTask#cancel_E@ is invoked and @B_android#os#AsyncTask#doInBackground_E@ has finished. This method must be called from the", "history": "Added in API level 3", "FullName": "protected void onCancelled ()"}, "isCancelled()": {"Returns": [["boolean", "true if task was cancelled before it completed"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#cancel_E@"], "Permissions": [], "Description": "Returns @B_android#os#AsyncTask#cancel_E@ on the task, the value returned by this method should be checked periodically from @B_android#os#AsyncTask#doInBackground_E@ to end the task as soon as possible.", "history": "Added in API level 3", "FullName": "public final boolean isCancelled ()"}, "doInBackground(Params...)": {"Returns": [["Result", "A result, defined by the subclass of this task."]], "Parameters": [["Params...", "Params: The parameters of the task."]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#onPreExecute_E@", "@B_android#os#AsyncTask#onPostExecute_E@", "@B_android#os#AsyncTask#publishProgress_E@"], "Permissions": [], "Description": "Override this method to perform a computation on a background thread. The specified parameters are the parameters passed to @B_android#os#AsyncTask#execute_E@ by the caller of this task. This will normally run on a background thread. But to better support testing frameworks, it is recommended that this also tolerates direct execution on the foreground thread, as part of the @B_android#os#AsyncTask#execute_E@ call. This method can call @B_android#os#AsyncTask#publishProgress_E@ to publish updates on the UI thread. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 3", "FullName": "protected abstract Result doInBackground (Params... params)"}, "onCancelled(Result)": {"Returns": [], "Parameters": [["Result", "Result: The result, if any, computed in @B_android#os#AsyncTask#doInBackground_E@, can be null"]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#cancel_E@", "@B_android#os#AsyncTask#isCancelled_E@"], "Permissions": [], "Description": "Runs on the UI thread after @B_android#os#AsyncTask#cancel_E@ is invoked and @B_android#os#AsyncTask#doInBackground_E@ has finished. The default implementation simply invokes @B_android#os#AsyncTask#onCancelled_E@ and ignores the result. If you write your own implementation, do not call super.onCancelled(result). This method must be called from the", "history": "Added in API level 11", "FullName": "protected void onCancelled (Result result)"}, "cancel(boolean)": {"Returns": [["boolean", "false if the task could not be cancelled, typically because it has already completed normally; true otherwise"]], "Parameters": [["boolean", "boolean: true if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete."]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#isCancelled_E@", "@B_android#os#AsyncTask#onCancelled_E@"], "Permissions": [], "Description": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed, already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when Calling this method will result in @B_android#os#AsyncTask#onCancelled_E@ being invoked on the UI thread after @B_android#os#AsyncTask#doInBackground_E@ returns. Calling this method guarantees that onPostExecute(Object) is never subsequently invoked, even if @B_android#os#AsyncTask#onPostExecute_E@ has not yet run. To finish the task as early as possible, check @B_android#os#AsyncTask#isCancelled_E@ periodically from @B_android#os#AsyncTask#doInBackground_E@. This only requests cancellation. It never waits for a running background task to terminate, even if", "history": "Added in API level 3", "FullName": "public final boolean cancel (boolean mayInterruptIfRunning)"}, "AsyncTask()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new asynchronous task. This constructor must be invoked on the UI thread.", "history": "Added in API level 3", "FullName": "public AsyncTask ()"}, "publishProgress(Progress...)": {"Returns": [], "Parameters": [["Progress...", "Progress: The progress values to update the UI with."]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#onProgressUpdate_E@", "@B_android#os#AsyncTask#doInBackground_E@"], "Permissions": [], "Description": "This method can be invoked from @B_android#os#AsyncTask#doInBackground_E@ to publish updates on the UI thread while the background computation is still running. Each call to this method will trigger the execution of @B_android#os#AsyncTask#onProgressUpdate_E@ on the UI thread. @B_android#os#AsyncTask#onProgressUpdate_E@ will not be called if the task has been canceled. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 3", "FullName": "protected final void publishProgress (Progress... values)"}, "onProgressUpdate(Progress...)": {"Returns": [], "Parameters": [["Progress...", "Progress: The values indicating progress."]], "Throws": [], "SeeAlso": ["@B_android#os#AsyncTask#publishProgress_E@", "@B_android#os#AsyncTask#doInBackground_E@"], "Permissions": [], "Description": "Runs on the UI thread after @B_android#os#AsyncTask#publishProgress_E@ is invoked. The specified values are the values passed to @B_android#os#AsyncTask#publishProgress_E@. The default version does nothing. This method must be called from the", "history": "Added in API level 3", "FullName": "protected void onProgressUpdate (Progress... values)"}}, "Inheritance": [], "ClassName": "android.os.AsyncTask<Params, Progress, Result>", "ClassDesc": "AsyncTask enables proper and easy use of the UI thread. This class allows you to perform background operations and publish results on the UI thread without having to manipulate threads and/or handlers. AsyncTask is designed to be a helper class around @B_java#lang#Thread_E@ and @B_android#os#Handler_E@ and does not constitute a generic threading framework. AsyncTasks should ideally be used for short operations (a few seconds at the most.) If you need to keep threads running for long periods of time, it is highly recommended you use the various APIs provided by the java.util.concurrent package such as @B_java#util#concurrent#Executor_E@, @B_java#util#concurrent#ThreadPoolExecutor_E@ and @B_java#util#concurrent#FutureTask_E@. An asynchronous task is defined by a computation that runs on a background thread and whose result is published on the UI thread. An asynchronous task is defined by 3 generic types, called Params, Progress and Result, and 4 steps, called onPreExecute, doInBackground, onProgressUpdate and onPostExecute. AsyncTask must be subclassed to be used. The subclass will override at least one method (@B_android#os#AsyncTask#doInBackground_E@), and most often will override a second one (@B_android#os#AsyncTask#onPostExecute_E@.) Here is an example of subclassing: Once created, a task is executed very simply: The three types used by an asynchronous task are the following: Not all types are always used by an asynchronous task. To mark a type as unused, simply use the type @B_java#lang#Void_E@: When an asynchronous task is executed, the task goes through 4 steps: A task can be cancelled at any time by invoking @B_android#os#AsyncTask#cancel_E@. Invoking this method will cause subsequent calls to @B_android#os#AsyncTask#isCancelled_E@ to return true. After invoking this method, @B_android#os#AsyncTask#onCancelled_E@, instead of @B_android#os#AsyncTask#onPostExecute_E@ will be invoked after @B_android#os#AsyncTask#doInBackground_E@ returns. To ensure that a task is cancelled as quickly as possible, you should always check the return value of @B_android#os#AsyncTask#isCancelled_E@ periodically from @B_android#os#AsyncTask#doInBackground_E@, if possible (inside a loop for instance.) There are a few threading rules that must be followed for this class to work properly: The AsyncTask class must be loaded on the UI thread. This is done automatically as of @B_android#os#Build#VERSION_CODES#JELLY_BEAN_E@. The task instance must be created on the UI thread. @B_android#os#AsyncTask#execute_E@ must be invoked on the UI thread. Do not call @B_android#os#AsyncTask#onPreExecute_E@, @B_android#os#AsyncTask#onPostExecute_E@, @B_android#os#AsyncTask#doInBackground_E@, @B_android#os#AsyncTask#onProgressUpdate_E@ manually. The task can be executed only once (an exception will be thrown if a second execution is attempted.) AsyncTask guarantees that all callback calls are synchronized to ensure the following without explicit synchronizations. The memory effects of @B_android#os#AsyncTask#onPreExecute_E@, and anything else executed before the call to @B_android#os#AsyncTask#execute_E@, including the construction of the AsyncTask object, are visible to @B_android#os#AsyncTask#doInBackground_E@. The memory effects of @B_android#os#AsyncTask#doInBackground_E@ are visible to @B_android#os#AsyncTask#onPostExecute_E@. Any memory effects of @B_android#os#AsyncTask#doInBackground_E@ preceding a call to @B_android#os#AsyncTask#publishProgress_E@ are visible to the corresponding @B_android#os#AsyncTask#onProgressUpdate_E@ call. (But @B_android#os#AsyncTask#doInBackground_E@ continues to run, and care needs to be taken that later updates in @B_android#os#AsyncTask#doInBackground_E@ do not interfere with an in-progress @B_android#os#AsyncTask#onProgressUpdate_E@ call.) Any memory effects preceding a call to @B_android#os#AsyncTask#cancel_E@ are visible after a call to @B_android#os#AsyncTask#isCancelled_E@ that returns true as a result, or during and after a resulting call to @B_android#os#AsyncTask#onCancelled_E@. When first introduced, AsyncTasks were executed serially on a single background thread. Starting with @B_android#os#Build#VERSION_CODES#DONUT_E@, this was changed to a pool of threads allowing multiple tasks to operate in parallel. Starting with @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@, tasks are executed on a single thread to avoid common application errors caused by parallel execution. If you truly want parallel execution, you can invoke @B_android#os#AsyncTask#executeOnExecutor_E@ with @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."}