{"Functions": {"getLong(java.lang.String)": {"Returns": [["long", "a long value"]], "Parameters": [["@B_java#lang#String_E@", "String: The key the value is stored under Value is @B_android#media#MediaMetadata#METADATA_KEY_DURATION_E@, @B_android#media#MediaMetadata#METADATA_KEY_YEAR_E@, @B_android#media#MediaMetadata#METADATA_KEY_TRACK_NUMBER_E@, @B_android#media#MediaMetadata#METADATA_KEY_NUM_TRACKS_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISC_NUMBER_E@, or @B_android#media#MediaMetadata#METADATA_KEY_BT_FOLDER_TYPE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value associated with the given key, or 0L if no long exists for the given key.", "history": "Added in API level 21", "FullName": "public long getLong (String key)"}, "size()": {"Returns": [["int", "The number of fields in the metadata."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of fields in this metadata.", "history": "Added in API level 21", "FullName": "public int size ()"}, "getBitmap(java.lang.String)": {"Returns": [["@B_android#graphics#Bitmap_E@", "A @B_android#graphics#Bitmap_E@ or null"]], "Parameters": [["@B_java#lang#String_E@", "String: The key the value is stored under Value is @B_android#media#MediaMetadata#METADATA_KEY_ART_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_ART_E@, or @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_ICON_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#graphics#Bitmap_E@ for the given key or null if no bitmap exists for the given key.", "history": "Added in API level 21", "FullName": "public Bitmap getBitmap (String key)"}, "getRating(java.lang.String)": {"Returns": [["@B_android#media#Rating_E@", "A @B_android#media#Rating_E@ or null"]], "Parameters": [["@B_java#lang#String_E@", "String: The key the value is stored under Value is @B_android#media#MediaMetadata#METADATA_KEY_USER_RATING_E@, or @B_android#media#MediaMetadata#METADATA_KEY_RATING_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#media#Rating_E@ for the given key or null if no rating exists for the given key.", "history": "Added in API level 21", "FullName": "public Rating getRating (String key)"}, "getDescription()": {"Returns": [["@B_android#media#MediaDescription_E@", "A simple description of this metadata. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a simple description of this metadata for display purposes.", "history": "Added in API level 21", "FullName": "public MediaDescription getDescription ()"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a Set of String keys"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Set containing the Strings used as keys in this metadata.", "history": "Added in API level 21", "FullName": "public Set<String> keySet ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "a String value, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: The key the value is stored under Value is @B_android#media#MediaMetadata#METADATA_KEY_TITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_ARTIST_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_E@, @B_android#media#MediaMetadata#METADATA_KEY_AUTHOR_E@, @B_android#media#MediaMetadata#METADATA_KEY_WRITER_E@, @B_android#media#MediaMetadata#METADATA_KEY_COMPOSER_E@, @B_android#media#MediaMetadata#METADATA_KEY_COMPILATION_E@, @B_android#media#MediaMetadata#METADATA_KEY_DATE_E@, @B_android#media#MediaMetadata#METADATA_KEY_GENRE_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_ARTIST_E@, @B_android#media#MediaMetadata#METADATA_KEY_ART_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_ART_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_TITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_SUBTITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_DESCRIPTION_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_ICON_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_MEDIA_ID_E@, or @B_android#media#MediaMetadata#METADATA_KEY_MEDIA_URI_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the text value associated with the given key as a String, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. This is equivalent to calling @B_android#media#MediaMetadata#getText_E@ if the value is not null.", "history": "Added in API level 21", "FullName": "public String getString (String key)"}, "containsKey(java.lang.String)": {"Returns": [["boolean", "true if the key exists in this metadata, false otherwise"]], "Parameters": [["@B_java#lang#String_E@", "String: a String key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the given key is contained in the metadata", "history": "Added in API level 21", "FullName": "public boolean containsKey (String key)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "Whether or not the two objects have matching fields (excluding Bitmaps and Ratings)"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The Metadata object to compare this object against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the contents of this object to another MediaMetadata object. It does not compare Bitmaps and Ratings as the media player can choose to forgo these fields depending on how you retrieve the MediaMetadata.", "history": "Added in API level 21", "FullName": "public boolean equals (Object o)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getText(java.lang.String)": {"Returns": [["@B_java#lang#CharSequence_E@", "a CharSequence value, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: The key the value is stored under Value is @B_android#media#MediaMetadata#METADATA_KEY_TITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_ARTIST_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_E@, @B_android#media#MediaMetadata#METADATA_KEY_AUTHOR_E@, @B_android#media#MediaMetadata#METADATA_KEY_WRITER_E@, @B_android#media#MediaMetadata#METADATA_KEY_COMPOSER_E@, @B_android#media#MediaMetadata#METADATA_KEY_COMPILATION_E@, @B_android#media#MediaMetadata#METADATA_KEY_DATE_E@, @B_android#media#MediaMetadata#METADATA_KEY_GENRE_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_ARTIST_E@, @B_android#media#MediaMetadata#METADATA_KEY_ART_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_ALBUM_ART_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_TITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_SUBTITLE_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_DESCRIPTION_E@, @B_android#media#MediaMetadata#METADATA_KEY_DISPLAY_ICON_URI_E@, @B_android#media#MediaMetadata#METADATA_KEY_MEDIA_ID_E@, or @B_android#media#MediaMetadata#METADATA_KEY_MEDIA_URI_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.", "history": "Added in API level 21", "FullName": "public CharSequence getText (String key)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.media.MediaMetadata", "ClassDesc": "Contains metadata about an item, such as the title, artist, etc."}