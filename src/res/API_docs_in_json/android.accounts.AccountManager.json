{"Functions": {"setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to set an auth token for"], ["@B_java#lang#String_E@", "String: The type of the auth token, see {#getAuthToken}"], ["@B_java#lang#String_E@", "String: The auth token to add to the cache"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an auth token to the AccountManager cache for an account. If the account does not exist then this call has no effect. Replaces any previous auth token for this account and auth token type. Intended for use by the authenticator, not directly by applications. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public void setAuthToken (Account account, String authTokenType, String authToken)"}, "setPassword(android.accounts.Account,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account whose password is to be set. Cannot be null."], ["@B_java#lang#String_E@", "String: The password to set, null to clear the password"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets or forgets a saved password. This modifies the local copy of the password used to automatically authenticate the user; it does not change the user's account password on the server. Intended for use by the authenticator, not directly by applications. Calling this method does not update the last authenticated timestamp, referred by @B_android#accounts#AccountManager#KEY_LAST_AUTHENTICATED_TIME_E@. To update it, call @B_android#accounts#AccountManager#notifyAccountAuthenticated_E@ after getting success. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public void setPassword (Account account, String password)"}, "updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if an activity was supplied and the account credentials were successfully updated: KEY_ACCOUNT_NAME - the name of the account KEY_ACCOUNT_TYPE - the type of the account If no activity was specified, the returned Bundle contains @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the password prompt. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the password prompt IOException if the authenticator experienced an I/O problem verifying the password, usually because of network trouble"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to update credentials for"], ["@B_java#lang#String_E@", "String: The credentials entered must allow an auth token of this type to be created (but no actual auth token is returned); may be null"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request; may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to enter a password; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asks the user to enter a new password for an account, updating the saved credentials for the account. Normally this happens automatically when the server rejects credentials during an auth token fetch, but this can be invoked directly to ensure we have the correct credentials stored. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> updateCredentials (Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "newChooseAccountIntent(android.accounts.Account,java.util.List<android.accounts.Account>,java.lang.String[],java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "an @B_android#content#Intent_E@ that can be used to launch the ChooseAccount activity flow."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: if specified, indicates that the @B_android#accounts#Account_E@ is the currently selected one, according to the caller's definition of selected."], ["@B_java#util#List_E@", "List: an optional @B_java#util#List_E@ of accounts that are allowed to be shown. If not specified then this field will not limit the displayed accounts."], ["@B_java#lang#String_E@", "String: an optional string array of account types. These are used both to filter the shown accounts and to filter the list of account types that are shown when adding an account. If not specified then this field will not limit the displayed account types when adding an account."], ["@B_java#lang#String_E@", "String: if non-null this string is used as the description in the accounts chooser screen rather than the default"], ["@B_java#lang#String_E@", "String: this string is passed as the @B_android#accounts#AccountManager#addAccount_E@ authTokenType parameter"], ["@B_java#lang#String_E@", "String: this string array is passed as the @B_android#accounts#AccountManager#addAccount_E@ requiredFeatures parameter"], ["@B_android#os#Bundle_E@", "Bundle: This @B_android#os#Bundle_E@ is passed as the @B_android#accounts#AccountManager#addAccount_E@ options parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an intent to an @B_android#app#Activity_E@ that prompts the user to choose from a list of accounts. The caller will then typically start the activity by calling startActivityForResult(intent, ...);. On success the activity returns a Bundle with the account name and type specified using keys @B_android#accounts#AccountManager#KEY_ACCOUNT_NAME_E@ and @B_android#accounts#AccountManager#KEY_ACCOUNT_TYPE_E@. Chosen account is marked as @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@ to the caller (see @B_android#accounts#AccountManager#setAccountVisibility_E@) and will be returned to it in consequent @B_android#accounts#AccountManager#getAccountsByType_E@) calls. The most common case is to call this with one account type, e.g.:", "history": "Added in API level 23", "FullName": "public static Intent newChooseAccountIntent (Account selectedAccount, List<Account> allowableAccounts, String[] allowableAccountTypes, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)"}, "clearPassword(android.accounts.Account)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account whose password to clear"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Forgets a saved password. This erases the local copy of the password; it does not change the user's account password on the server. Has the same effect as setPassword(account, null) but requires fewer permissions, and may be used by applications or management interfaces to \"sign out\" from an account. This method only successfully clear the account's password when the caller has the same signature as the authenticator that owns the specified account. Otherwise, this method will silently fail. It is safe to call this method from the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public void clearPassword (Account account)"}, "removeOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener)": {"Returns": [], "Parameters": [["@B_android#accounts#OnAccountsUpdateListener_E@", "OnAccountsUpdateListener: The previously added listener to remove"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#IllegalStateException_E@", "if listener was not already added"]], "SeeAlso": [], "Permissions": [], "Description": "Removes an @B_android#accounts#OnAccountsUpdateListener_E@ previously registered with @B_android#accounts#AccountManager#addOnAccountsUpdatedListener_E@. The listener will no longer receive notifications of account changes. It is safe to call this method from the main thread. No permission is required to call this method.", "history": "Added in API level 5", "FullName": "public void removeOnAccountsUpdatedListener (OnAccountsUpdateListener listener)"}, "getAuthenticatorTypes()": {"Returns": [["@B_android#accounts#AuthenticatorDescription_E@", "An array of @B_android#accounts#AuthenticatorDescription_E@ for every authenticator known to the AccountManager service. Empty (never null) if no authenticators are known."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Lists the currently registered authenticators. It is safe to call this method from the main thread. No permission is required to call this method.", "history": "Added in API level 5", "FullName": "public AuthenticatorDescription[] getAuthenticatorTypes ()"}, "addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)": {"Returns": [], "Parameters": [["@B_android#accounts#OnAccountsUpdateListener_E@", "OnAccountsUpdateListener no parameter comment"], ["@B_android#os#Handler_E@", "Handler no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#accounts#AccountManager#addOnAccountsUpdatedListener_E@"], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Adds an @B_android#accounts#OnAccountsUpdateListener_E@ to this instance of the @B_android#accounts#AccountManager_E@. This listener will be notified whenever user or AbstractAcccountAuthenticator made changes to accounts of any type related to the caller. This method is equivalent to addOnAccountsUpdatedListener(listener, handler, updateImmediately, null) Requires @B_android#Manifest#permission#GET_ACCOUNTS_E@", "history": "Added in API level 5", "FullName": "public void addOnAccountsUpdatedListener (OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately)"}, "blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)": {"Returns": [["@B_java#lang#String_E@", "An auth token of the specified type for this account, or null if authentication fails or none can be fetched."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to fetch an auth token for"], ["@B_java#lang#String_E@", "String: The auth token type, see @B_android#accounts#AccountManager#getAuthToken_E@"], ["boolean", "boolean: If true, display a notification and return null if authentication fails; if false, prompt and wait for the user to re-enter correct credentials before returning"]], "Throws": [["@B_android#accounts#AuthenticatorException_E@", "if the authenticator failed to respond"], ["@B_android#accounts#OperationCanceledException_E@", "if the request was canceled for any reason, including the user canceling a credential request"], ["@B_java#io#IOException_E@", "if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble"]], "SeeAlso": [], "Permissions": [], "Description": "This convenience helper synchronously gets an auth token with @B_android#accounts#AccountManager#getAuthToken_E@. This method may block while a network request completes, and must never be made from the main thread. Requires android.Manifest.permission.USE_CREDENTIALS", "history": "Added in API level 5", "FullName": "public String blockingGetAuthToken (Account account, String authTokenType, boolean notifyAuthFailure)"}, "getAccountVisibility(android.accounts.Account,java.lang.String)": {"Returns": [["int", "int Visibility of given account. Value is @B_android#accounts#AccountManager#VISIBILITY_UNDEFINED_E@, @B_android#accounts#AccountManager#VISIBILITY_VISIBLE_E@, @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@, @B_android#accounts#AccountManager#VISIBILITY_NOT_VISIBLE_E@, or @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_NOT_VISIBLE_E@"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: @B_android#accounts#Account_E@ to get visibility"], ["@B_java#lang#String_E@", "String: Package name of the application to get account visibility"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get visibility of certain account for given application. Possible returned values are: @B_android#accounts#AccountManager#VISIBILITY_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_NOT_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_NOT_VISIBLE_E@ This method requires the caller to have a signature match with the authenticator that owns the specified account.", "history": "Added in API level 26", "FullName": "public int getAccountVisibility (Account account, String packageName)"}, "getPassword(android.accounts.Account)": {"Returns": [["@B_java#lang#String_E@", "The account's password, null if none or if the account doesn't exist"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to query for a password. Must not be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the saved password associated with the account. This is intended for authenticators and related code; applications should get an auth token instead. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@ and before, AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public String getPassword (Account account)"}, "getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with at least the following fields on success: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If the user must enter credentials, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch a prompt. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to fetch an auth token for"], ["@B_java#lang#String_E@", "String: The auth token type, an authenticator-dependent string token, must not be null"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request, may be null or empty"], ["boolean", "boolean: True to add a notification to prompt the user for a password if necessary, false to leave that to the caller"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, an @B_android#content#Intent_E@ is returned which, when started, will prompt the user for a password. If the notifyAuthFailure parameter is set, a status bar notification is also created with the same Intent, alerting the user that they need to enter a password at some point. In that case, you may need to wait until the user responds, which could take hours or days or forever. When the user does respond and supply a new password, the account manager will broadcast the @B_android#accounts#AccountManager#LOGIN_ACCOUNTS_CHANGED_ACTION_E@ Intent and notify @B_android#accounts#OnAccountsUpdateListener_E@ which applications can use to try again. If notifyAuthFailure is not set, it is the application's responsibility to launch the returned Intent at some point. Either way, the result from this call will not wait for user action. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.USE_CREDENTIALS", "history": "Added in API level 14", "FullName": "public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, Bundle options, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)"}, "newChooseAccountIntent(android.accounts.Account,java.util.ArrayList<android.accounts.Account>,java.lang.String[],boolean,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#content#Intent_E@", "an @B_android#content#Intent_E@ that can be used to launch the ChooseAccount activity flow."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: if specified, indicates that the @B_android#accounts#Account_E@ is the currently selected one, according to the caller's definition of selected."], ["@B_java#util#ArrayList_E@", "ArrayList: an optional @B_java#util#List_E@ of accounts that are allowed to be shown. If not specified then this field will not limit the displayed accounts."], ["@B_java#lang#String_E@", "String: an optional string array of account types. These are used both to filter the shown accounts and to filter the list of account types that are shown when adding an account. If not specified then this field will not limit the displayed account types when adding an account."], ["boolean", "boolean: boolean that is ignored."], ["@B_java#lang#String_E@", "String: if non-null this string is used as the description in the accounts chooser screen rather than the default"], ["@B_java#lang#String_E@", "String: this string is passed as the @B_android#accounts#AccountManager#addAccount_E@ authTokenType parameter"], ["@B_java#lang#String_E@", "String: this string array is passed as the @B_android#accounts#AccountManager#addAccount_E@ requiredFeatures parameter"], ["@B_android#os#Bundle_E@", "Bundle: This @B_android#os#Bundle_E@ is passed as the @B_android#accounts#AccountManager#addAccount_E@ options parameter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deprecated in favor of @B_android#accounts#AccountManager#newChooseAccountIntent_E@. Returns an intent to an @B_android#app#Activity_E@ that prompts the user to choose from a list of accounts. The caller will then typically start the activity by calling startActivityForResult(intent, ...);. On success the activity returns a Bundle with the account name and type specified using keys @B_android#accounts#AccountManager#KEY_ACCOUNT_NAME_E@ and @B_android#accounts#AccountManager#KEY_ACCOUNT_TYPE_E@. Chosen account is marked as @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@ to the caller (see @B_android#accounts#AccountManager#setAccountVisibility_E@) and will be returned to it in consequent @B_android#accounts#AccountManager#getAccountsByType_E@) calls. The most common case is to call this with one account type, e.g.:", "history": "Added in API level 14 Deprecated in API level 23", "FullName": "public static Intent newChooseAccountIntent (Account selectedAccount, ArrayList<Account> allowableAccounts, String[] allowableAccountTypes, boolean alwaysPromptForAccount, String descriptionOverrideText, String addAccountAuthTokenType, String[] addAccountRequiredFeatures, Bundle addAccountOptions)"}, "getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with at least the following fields: KEY_ACCOUNT_NAME - the name of the account KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling any operation IOException if the authenticator experienced an I/O problem updating settings, usually because of network trouble"]], "Parameters": [["@B_java#lang#String_E@", "String: The account type required (see @B_android#accounts#AccountManager#getAccountsByType_E@), must not be null"], ["@B_java#lang#String_E@", "String: The desired auth token type (see @B_android#accounts#AccountManager#getAuthToken_E@), must not be null"], ["@B_java#lang#String_E@", "String: Required features for the account (see @B_android#accounts#AccountManager#getAccountsByTypeAndFeatures_E@), may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching new sub-Activities to prompt to add an account, select an account, and/or enter a password, as necessary; used only to call startActivity(); should not be null"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options to use for adding new accounts; may be null or empty"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options to use for getting auth tokens; may be null or empty"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This convenience helper combines the functionality of @B_android#accounts#AccountManager#getAccountsByTypeAndFeatures_E@, @B_android#accounts#AccountManager#getAuthToken_E@, and @B_android#accounts#AccountManager#addAccount_E@. This method gets a list of the accounts matching specific type and feature set which are visible to the caller (see @B_android#accounts#AccountManager#getAccountsByType_E@ for details); if there is exactly one already visible account, it is used; if there are some accounts for which user grant visibility, the user is prompted to pick one; if there are none, the user is prompted to add one. Finally, an auth token is acquired for the chosen account. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> getAuthTokenByFeatures (String accountType, String authTokenType, String[] features, Activity activity, Bundle addAccountOptions, Bundle getAuthTokenOptions, AccountManagerCallback<Bundle> callback, Handler handler)"}, "startAddAccountSession(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if activity was specified and user was authenticated with an account: KEY_ACCOUNT_SESSION_BUNDLE - encrypted Bundle for adding the the to the device later. KEY_ACCOUNT_STATUS_TOKEN - optional, token to check status of the account If no activity was specified, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the actual account creation process. If authenticator doesn't support this method, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_ACCOUNT_SESSION_BUNDLE_E@ with encrypted options needed to add account later. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the creation process or adding accounts (of this type) has been disabled by policy IOException if the authenticator experienced an I/O problem creating a new account, usually because of network trouble"]], "Parameters": [["@B_java#lang#String_E@", "String: The type of account to add; must not be null"], ["@B_java#lang#String_E@", "String: The type of auth token (see @B_android#accounts#AccountManager#getAuthToken_E@) this account will need to be able to generate, null for none"], ["@B_java#lang#String_E@", "String: The features (see @B_android#accounts#AccountManager#hasFeatures_E@) this account must have, null for none"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request, may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to create an account; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": ["@B_android#accounts#AccountManager#finishSession_E@"], "Permissions": [], "Description": "Asks the user to authenticate with an account of a specified type. The authenticator for this account type processes this request with the appropriate user interface. If the user does elect to authenticate with a new account, a bundle of session data for installing the account later is returned with optional account password and account status token. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread.", "history": "Added in API level 26", "FullName": "public AccountManagerFuture<Bundle> startAddAccountSession (String accountType, String authTokenType, String[] requiredFeatures, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with at least the following fields: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If an auth token could not be fetched, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to fetch an auth token for"], ["@B_java#lang#String_E@", "String: The auth token type, an authenticator-dependent string token, must not be null"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request, may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user for a password if necessary; used only to call startActivity(); must not be null."], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an auth token of the specified type for a particular account, prompting the user for credentials if necessary. This method is intended for applications running in the foreground where it makes sense to ask the user directly for a password. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, the user is prompted to enter a password. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.USE_CREDENTIALS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "renameAccount(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback<android.accounts.Account>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to the Account after the name change. If successful the account's name will be the specified new name."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to rename"], ["@B_java#lang#String_E@", "String: String name to be associated with the account."], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rename the specified @B_android#accounts#Account_E@. This is equivalent to removing the existing account and adding a new renamed account with the old account's user data. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 21", "FullName": "public AccountManagerFuture<Account> renameAccount (Account account, String newName, AccountManagerCallback<Account> callback, Handler handler)"}, "finishSession(android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if an activity was supplied and an account was added to device or local credentials were updated:: KEY_ACCOUNT_NAME - the name of the account created KEY_ACCOUNT_TYPE - the type of the account KEY_ACCOUNT_STATUS_TOKEN - optional, token to check status of the account If no activity was specified and additional information is needed from user, the returned Bundle may contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the actual account creation process. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the creation process or adding accounts (of this type) has been disabled by policy IOException if the authenticator experienced an I/O problem creating a new account, usually because of network trouble"]], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: a @B_android#os#Bundle_E@ created by @B_android#accounts#AccountManager#startAddAccountSession_E@ or @B_android#accounts#AccountManager#startUpdateCredentialsSession_E@"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to create an account or reauthenticate existing account; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": ["@B_android#accounts#AccountManager#startAddAccountSession_E@"], "Permissions": [], "Description": "Finishes the session started by @B_android#accounts#AccountManager#startAddAccountSession_E@ or @B_android#accounts#AccountManager#startUpdateCredentialsSession_E@. This will either add the account to AccountManager or update the local credentials stored. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread.", "history": "Added in API level 26", "FullName": "public AccountManagerFuture<Bundle> finishSession (Bundle sessionBundle, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle,java.util.Map<java.lang.String,java.lang.Integer>)": {"Returns": [["boolean", "True if the account was successfully added, false if the account already exists, the account is null, or another error occurs."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to add"], ["@B_java#lang#String_E@", "String: The password to associate with the account, null for none"], ["@B_android#os#Bundle_E@", "Bundle: String values to use for the account's userdata, null for none"], ["@B_java#util#Map_E@", "Map: Map from packageName to visibility values which will be set before account is added. See @B_android#accounts#AccountManager#getAccountVisibility_E@ for possible values."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an account directly to the AccountManager. Additionally it specifies Account visibility for given list of packages. Normally used by sign-up wizards associated with authenticators, not directly by applications. Calling this method does not update the last authenticated timestamp, referred by @B_android#accounts#AccountManager#KEY_LAST_AUTHENTICATED_TIME_E@. To update it, call @B_android#accounts#AccountManager#notifyAccountAuthenticated_E@ after getting success. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account.", "history": "Added in API level 26", "FullName": "public boolean addAccountExplicitly (Account account, String password, Bundle extras, Map<String, Integer> visibility)"}, "addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "True if the account was successfully added, false if the account already exists, the account is null, the user is locked, or another error occurs."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to add"], ["@B_java#lang#String_E@", "String: The password to associate with the account, null for none"], ["@B_android#os#Bundle_E@", "Bundle: String values to use for the account's userdata, null for none"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds an account directly to the AccountManager. Normally used by sign-up wizards associated with authenticators, not directly by applications. Calling this method does not update the last authenticated timestamp, referred by @B_android#accounts#AccountManager#KEY_LAST_AUTHENTICATED_TIME_E@. To update it, call @B_android#accounts#AccountManager#notifyAccountAuthenticated_E@ after getting success. However, if this method is called when it is triggered by addAccount() or addAccountAsUser() or similar functions, then there is no need to update timestamp manually as it is updated automatically by framework on successful completion of the mentioned functions. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public boolean addAccountExplicitly (Account account, String password, Bundle userdata)"}, "getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback<android.accounts.Account[]>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to an array of @B_android#accounts#Account_E@, one per account of the specified type which matches the requested features."]], "Parameters": [["@B_java#lang#String_E@", "String: The type of accounts to return, must not be null"], ["@B_java#lang#String_E@", "String: An array of the account features to require, may be null or empty *"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Lists all accounts of a type which have certain features. The account type identifies the authenticator (see @B_android#accounts#AccountManager#getAccountsByType_E@). Account features are authenticator-specific string tokens identifying boolean account properties (see @B_android#accounts#AccountManager#hasFeatures_E@). Unlike @B_android#accounts#AccountManager#getAccountsByType_E@, this method calls the authenticator, which may contact the server or do other work to check account features, so the method returns an @B_android#accounts#AccountManagerFuture_E@. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Caller targeting API level @B_android#os#Build#VERSION_CODES#O_E@ and above, will get list of accounts made visible to it by user (see @B_android#accounts#AccountManager#newChooseAccountIntent_E@) or AbstractAcccountAuthenticator using @B_android#accounts#AccountManager#setAccountVisibility_E@. @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission is not used. Caller targeting API level below @B_android#os#Build#VERSION_CODES#O_E@ that have not been granted the @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission, will only see those accounts managed by AbstractAccountAuthenticators whose signature matches the client. @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@ and before, @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission is needed for those platforms, irrespective of uid or signature match. See docs for this function in API level @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@.", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Account[]> getAccountsByTypeAndFeatures (String type, String[] features, AccountManagerCallback<Account[]> callback, Handler handler)"}, "getAccountsByType(java.lang.String)": {"Returns": [["@B_android#accounts#Account_E@", "An array of @B_android#accounts#Account_E@, one per matching account. Empty (never null) if no accounts of the specified type have been added."]], "Parameters": [["@B_java#lang#String_E@", "String: The type of accounts to return, null to retrieve all accounts"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Lists all accounts of particular type visible to the caller. These accounts may be visible because the user granted access to the account, or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator. The account type is a string token corresponding to the authenticator and useful domain of the account. For example, there are types corresponding to Google and Facebook. The exact string token to use will be published somewhere associated with the authenticator in question. It is safe to call this method from the main thread. Caller targeting API level @B_android#os#Build#VERSION_CODES#O_E@ and above, will get list of accounts made visible to it by user (see @B_android#accounts#AccountManager#newChooseAccountIntent_E@) or AbstractAcccountAuthenticator using @B_android#accounts#AccountManager#setAccountVisibility_E@. @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission is not used. Caller targeting API level below @B_android#os#Build#VERSION_CODES#O_E@ that have not been granted the @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission, will only see those accounts managed by AbstractAccountAuthenticators whose signature matches the client. @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@ and before, @B_android#Manifest#permission#GET_ACCOUNTS_E@ permission is needed for those platforms, irrespective of uid or signature match. See docs for this function in API level @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@. Requires @B_android#Manifest#permission#GET_ACCOUNTS_E@", "history": "Added in API level 5", "FullName": "public Account[] getAccountsByType (String type)"}, "getPreviousName(android.accounts.Account)": {"Returns": [["@B_java#lang#String_E@", "The account's previous name, null if the account has never been renamed."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to query for a previous name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the previous name associated with the account or null, if none. This is intended so that clients of @B_android#accounts#OnAccountsUpdateListener_E@ can determine if an authenticator has renamed an account. It is safe to call this method from the main thread.", "history": "Added in API level 21", "FullName": "public String getPreviousName (Account account)"}, "setAccountVisibility(android.accounts.Account,java.lang.String,int)": {"Returns": [["boolean", "True, if visibility value was successfully updated."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: @B_android#accounts#Account_E@ to update visibility"], ["@B_java#lang#String_E@", "String: Package name of the application to modify account visibility"], ["int", "int: New visibility value Value is @B_android#accounts#AccountManager#VISIBILITY_UNDEFINED_E@, @B_android#accounts#AccountManager#VISIBILITY_VISIBLE_E@, @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@, @B_android#accounts#AccountManager#VISIBILITY_NOT_VISIBLE_E@, or @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_NOT_VISIBLE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set visibility value of given account to certain package. Package name must match installed application, or be equal to @B_android#accounts#AccountManager#PACKAGE_NAME_KEY_LEGACY_VISIBLE_E@ or @B_android#accounts#AccountManager#PACKAGE_NAME_KEY_LEGACY_NOT_VISIBLE_E@. Possible visibility values: @B_android#accounts#AccountManager#VISIBILITY_UNDEFINED_E@ @B_android#accounts#AccountManager#VISIBILITY_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_NOT_VISIBLE_E@ @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_NOT_VISIBLE_E@ This method requires the caller to have a signature match with the authenticator that owns the specified account.", "history": "Added in API level 26", "FullName": "public boolean setAccountVisibility (Account account, String packageName, int visibility)"}, "getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with at least the following fields on success: KEY_ACCOUNT_NAME - the name of the account you supplied KEY_ACCOUNT_TYPE - the type of the account KEY_AUTHTOKEN - the auth token you wanted (Other authenticator-specific values may be returned.) If the user must enter credentials, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch a prompt. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation is canceled for any reason, incluidng the user canceling a credential request IOException if the authenticator experienced an I/O problem creating a new auth token, usually because of network trouble If the account is no longer present on the device, the return value is authenticator-dependent. The caller should verify the validity of the account before requesting an auth token."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to fetch an auth token for"], ["@B_java#lang#String_E@", "String: The auth token type, an authenticator-dependent string token, must not be null"], ["boolean", "boolean: True to add a notification to prompt the user for a password if necessary, false to leave that to the caller"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#accounts#AccountManager#getAuthToken_E@ instead Gets an auth token of the specified type for a particular account, optionally raising a notification if the user must enter credentials. This method is intended for background tasks and services where the user should not be immediately interrupted with a password prompt. If a previously generated auth token is cached for this account and type, then it is returned. Otherwise, if a saved password is available, it is sent to the server to generate a new auth token. Otherwise, an @B_android#content#Intent_E@ is returned which, when started, will prompt the user for a password. If the notifyAuthFailure parameter is set, a status bar notification is also created with the same Intent, alerting the user that they need to enter a password at some point. In that case, you may need to wait until the user responds, which could take hours or days or forever. When the user does respond and supply a new password, the account manager will broadcast the @B_android#accounts#AccountManager#LOGIN_ACCOUNTS_CHANGED_ACTION_E@ Intent and notify @B_android#accounts#OnAccountsUpdateListener_E@ which applications can use to try again. If notifyAuthFailure is not set, it is the application's responsibility to launch the returned Intent at some point. Either way, the result from this call will not wait for user action. Some authenticators have auth token types, whose value is authenticator-dependent. Some services use different token types to access different functionality -- for example, Google uses different auth tokens to access Gmail and Google Calendar for the same account. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.USE_CREDENTIALS", "history": "Added in API level 5 Deprecated in API level 15", "FullName": "public AccountManagerFuture<Bundle> getAuthToken (Account account, String authTokenType, boolean notifyAuthFailure, AccountManagerCallback<Bundle> callback, Handler handler)"}, "notifyAccountAuthenticated(android.accounts.Account)": {"Returns": [["boolean", "boolean true if the authentication of the account has been successfully acknowledged. Otherwise false."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to be updated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the system that the account has just been authenticated. This information may be used by other applications to verify the account. This should be called only when the user has entered correct credentials for the account. It is not safe to call this method from the main thread. As such, call it from another thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 23", "FullName": "public boolean notifyAccountAuthenticated (Account account)"}, "removeAccountExplicitly(android.accounts.Account)": {"Returns": [["boolean", "True if the account was successfully deleted, false if the account did not exist, the account is null, or another error occurs."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to delete."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes an account directly. Normally used by authenticators, not directly by applications. Does not delete the account from the server. The authenticator may have its own policies preventing account deletion, in which case the account will not be deleted. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 22", "FullName": "public boolean removeAccountExplicitly (Account account)"}, "confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if activity or password was supplied and the account was successfully verified: KEY_ACCOUNT_NAME - the name of the account verified KEY_ACCOUNT_TYPE - the type of the account KEY_BOOLEAN_RESULT - true to indicate success If no activity or password was specified, the returned Bundle contains @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the password prompt. Also the returning Bundle may contain KEY_LAST_AUTHENTICATED_TIME indicating the last time the credential was validated/created. If an error occurred,AccountManagerFuture#getResult() throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the password prompt IOException if the authenticator experienced an I/O problem verifying the password, usually because of network trouble"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to confirm password knowledge for"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request; if the @B_android#accounts#AccountManager#KEY_PASSWORD_E@ string field is present, the authenticator may use it directly rather than prompting the user; may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to enter a password; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Confirms that the user knows the password for an account to make extra sure they are the owner of the account. The user-entered password can be supplied directly, otherwise the authenticator for this account type prompts the user with the appropriate interface. This method is intended for applications which want extra assurance; for example, the phone lock screen uses this to let the user unlock the phone with an account password if they forget the lock pattern. If the user-entered password matches a saved password for this account, the request is considered valid; otherwise the authenticator verifies the password (usually by contacting the server). This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> confirmCredentials (Account account, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean,java.lang.String[])": {"Returns": [], "Parameters": [["@B_android#accounts#OnAccountsUpdateListener_E@", "OnAccountsUpdateListener: The listener to send notifications to"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the thread to use for notifications, null for the main thread"], ["boolean", "boolean: If true, the listener will be invoked (on the handler thread) right away with the current account list"], ["@B_java#lang#String_E@", "String: If set, only changes to accounts of given types will be reported."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if listener is null"], ["@B_java#lang#IllegalStateException_E@", "if listener was already added"]], "SeeAlso": [], "Permissions": [], "Description": "Adds an @B_android#accounts#OnAccountsUpdateListener_E@ to this instance of the @B_android#accounts#AccountManager_E@. This listener will be notified whenever user or AbstractAcccountAuthenticator made changes to accounts of given types related to the caller - either list of accounts returned by @B_android#accounts#AccountManager#getAccounts_E@ was changed, or new account was added for which user can grant access to the caller. As long as this listener is present, the AccountManager instance will not be garbage-collected, and neither will the @B_android#content#Context_E@ used to retrieve it, which may be a large Activity instance. To avoid memory leaks, you must remove this listener before then. Normally listeners are added in an Activity or Service's @B_android#app#Activity#onCreate_E@ and removed in @B_android#app#Activity#onDestroy_E@. It is safe to call this method from the main thread.", "history": "Added in API level 26", "FullName": "public void addOnAccountsUpdatedListener (OnAccountsUpdateListener listener, Handler handler, boolean updateImmediately, String[] accountTypes)"}, "removeAccount(android.accounts.Account,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with @B_android#accounts#AccountManager#KEY_BOOLEAN_RESULT_E@ if activity was specified and an account was removed or if active. If no activity was specified, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the actual account removal process, if authenticator needs the activity launch. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the creation process or adding accounts (of this type) has been disabled by policy"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to remove"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to delete an account; used only to call startActivity(); if null, the prompt will not be launched directly, but the @B_android#content#Intent_E@ may be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes an account from the AccountManager. Does nothing if the account does not exist. Does not delete the account from the server. The authenticator may have its own policies preventing account deletion, in which case the account will not be deleted. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 22", "FullName": "public AccountManagerFuture<Bundle> removeAccount (Account account, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "isCredentialsUpdateSuggested(android.accounts.Account,java.lang.String,android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Boolean, true if the credentials of the account should be updated."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to be checked whether @B_android#accounts#AccountManager#updateCredentials_E@ or @B_android#accounts#AccountManager#startUpdateCredentialsSession_E@ should be called"], ["@B_java#lang#String_E@", "String: a String of token to check account staus"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether @B_android#accounts#AccountManager#updateCredentials_E@ or @B_android#accounts#AccountManager#startUpdateCredentialsSession_E@ should be called with respect to the specified account. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread.", "history": "Added in API level 26", "FullName": "public AccountManagerFuture<Boolean> isCredentialsUpdateSuggested (Account account, String statusToken, AccountManagerCallback<Boolean> callback, Handler handler)"}, "addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if activity was specified and an account was created: KEY_ACCOUNT_NAME - the name of the account created KEY_ACCOUNT_TYPE - the type of the account If no activity was specified, the returned Bundle contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the actual account creation process. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the creation process or adding accounts (of this type) has been disabled by policy IOException if the authenticator experienced an I/O problem creating a new account, usually because of network trouble"]], "Parameters": [["@B_java#lang#String_E@", "String: The type of account to add; must not be null"], ["@B_java#lang#String_E@", "String: The type of auth token (see @B_android#accounts#AccountManager#getAuthToken_E@) this account will need to be able to generate, null for none"], ["@B_java#lang#String_E@", "String: The features (see @B_android#accounts#AccountManager#hasFeatures_E@) this account must have, null for none"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request, may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to create an account; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Asks the user to add an account of a specified type. The authenticator for this account type processes this request with the appropriate user interface. If the user does elect to create a new account, the account name is returned. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> addAccount (String accountType, String authTokenType, String[] requiredFeatures, Bundle addAccountOptions, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "getPackagesAndVisibilityForAccount(android.accounts.Account)": {"Returns": [["@B_java#util#Map_E@", "Map from package names to visibility for given account"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account for which visibility data should be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns package names and visibility which were explicitly set for given account. This method requires the caller to have a signature match with the authenticator that owns the specified account.", "history": "Added in API level 26", "FullName": "public Map<String, Integer> getPackagesAndVisibilityForAccount (Account account)"}, "removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Boolean, true if the account has been successfully removed"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to remove"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#accounts#AccountManager#removeAccount_E@ instead Removes an account from the AccountManager. Does nothing if the account does not exist. Does not delete the account from the server. The authenticator may have its own policies preventing account deletion, in which case the account will not be deleted. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5 Deprecated in API level 22", "FullName": "public AccountManagerFuture<Boolean> removeAccount (Account account, AccountManagerCallback<Boolean> callback, Handler handler)"}, "editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle which is empty if properties were edited successfully, or if no activity was specified, contains only @B_android#accounts#AccountManager#KEY_INTENT_E@ needed to launch the authenticator's settings dialog. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if no authenticator was registered for this account type or the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the settings dialog IOException if the authenticator experienced an I/O problem updating settings, usually because of network trouble"]], "Parameters": [["@B_java#lang#String_E@", "String: The account type associated with the authenticator to adjust"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to adjust authenticator settings; used only to call startActivity(); if null, the settings dialog will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offers the user an opportunity to change an authenticator's settings. These properties are for the authenticator in general, not a particular account. Not all authenticators support this method. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. This method requires the caller to have the same signature as the authenticator associated with the specified account type. Requires android.Manifest.permission.MANAGE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public AccountManagerFuture<Bundle> editProperties (String accountType, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback<java.lang.Boolean>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Boolean, true if the account exists and has all of the specified features."]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The @B_android#accounts#Account_E@ to test"], ["@B_java#lang#String_E@", "String: An array of the account features to check"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Finds out whether a particular account has all the specified features. Account features are authenticator-specific string tokens identifying boolean account properties. For example, features are used to tell whether Google accounts have a particular service (such as Google Calendar or Google Talk) enabled. The feature names and their meanings are published somewhere associated with the authenticator in question. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread. If caller target API level is below @B_android#os#Build#VERSION_CODES#O_E@, it is required to hold the permission @B_android#Manifest#permission#GET_ACCOUNTS_E@ or have a signature match with the AbstractAccountAuthenticator that manages the account.", "history": "Added in API level 8", "FullName": "public AccountManagerFuture<Boolean> hasFeatures (Account account, String[] features, AccountManagerCallback<Boolean> callback, Handler handler)"}, "peekAuthToken(android.accounts.Account,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The cached auth token for this account and type, or null if no auth token is cached, the account does not exist, or the user is locked"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account for which an auth token is to be fetched. Cannot be null."], ["@B_java#lang#String_E@", "String: The type of auth token to fetch. Cannot be null."]], "Throws": [], "SeeAlso": ["@B_android#accounts#AccountManager#getAuthToken_E@"], "Permissions": [], "Description": "Gets an auth token from the AccountManager's cache. If no auth token is cached for this account, null will be returned -- a new auth token will not be generated, and the server will not be contacted. Intended for use by the authenticator, not directly by applications. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public String peekAuthToken (Account account, String authTokenType)"}, "getAccountsAndVisibilityForPackage(java.lang.String,java.lang.String)": {"Returns": [["@B_java#util#Map_E@", "Map with visibility for all accounts of given type See @B_android#accounts#AccountManager#getAccountVisibility_E@ for possible values"]], "Parameters": [["@B_java#lang#String_E@", "String: Package name"], ["@B_java#lang#String_E@", "String: @B_android#accounts#Account_E@ type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets all accounts of given type and their visibility for specific package. This method requires the caller to have a signature match with the authenticator that manages accountType. It is a helper method which combines calls to @B_android#accounts#AccountManager#getAccountsByType_E@ by authenticator and @B_android#accounts#AccountManager#getAccountVisibility_E@ for every returned account.", "history": "Added in API level 26", "FullName": "public Map<Account, Integer> getAccountsAndVisibilityForPackage (String packageName, String accountType)"}, "getAccounts()": {"Returns": [["@B_android#accounts#Account_E@", "An array of @B_android#accounts#Account_E@, one for each account. Empty (never null) if no accounts have been added."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#GET_ACCOUNTS_E@"], "Description": "Lists all accounts visible to the caller regardless of type. Equivalent to getAccountsByType(null). These accounts may be visible because the user granted access to the account, or the AbstractAcccountAuthenticator managing the account did so or because the client shares a signature with the managing AbstractAccountAuthenticator. It is safe to call this method from the main thread. Requires @B_android#Manifest#permission#GET_ACCOUNTS_E@", "history": "Added in API level 5", "FullName": "public Account[] getAccounts ()"}, "invalidateAuthToken(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The account type of the auth token to invalidate, must not be null"], ["@B_java#lang#String_E@", "String: The auth token to invalidate, may be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes an auth token from the AccountManager's cache. Does nothing if the auth token is not currently in the cache. Applications must call this method when the auth token is found to have expired or otherwise become invalid for authenticating requests. The AccountManager does not validate or expire cached auth tokens otherwise. It is safe to call this method from the main thread. Requires android.Manifest.permission.MANAGE_ACCOUNTS or android.Manifest.permission.USE_CREDENTIALS", "history": "Added in API level 5", "FullName": "public void invalidateAuthToken (String accountType, String authToken)"}, "startUpdateCredentialsSession(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback<android.os.Bundle>,android.os.Handler)": {"Returns": [["@B_android#accounts#AccountManagerFuture_E@", "An @B_android#accounts#AccountManagerFuture_E@ which resolves to a Bundle with these fields if an activity was supplied and user was successfully re-authenticated to the account: KEY_ACCOUNT_SESSION_BUNDLE - encrypted Bundle for updating the local credentials on device later. KEY_ACCOUNT_STATUS_TOKEN - optional, token to check status of the account If no activity was specified, the returned Bundle contains @B_android#accounts#AccountManager#KEY_INTENT_E@ with the @B_android#content#Intent_E@ needed to launch the password prompt. If an error occurred, @B_android#accounts#AccountManagerFuture#getResult_E@ throws: AuthenticatorException if the authenticator failed to respond OperationCanceledException if the operation was canceled for any reason, including the user canceling the password prompt IOException if the authenticator experienced an I/O problem verifying the password, usually because of network trouble"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to update credentials for"], ["@B_java#lang#String_E@", "String: The credentials entered must allow an auth token of this type to be created (but no actual auth token is returned); may be null"], ["@B_android#os#Bundle_E@", "Bundle: Authenticator-specific options for the request; may be null or empty"], ["@B_android#app#Activity_E@", "Activity: The @B_android#app#Activity_E@ context to use for launching a new authenticator-defined sub-Activity to prompt the user to enter a password; used only to call startActivity(); if null, the prompt will not be launched directly, but the necessary @B_android#content#Intent_E@ will be returned to the caller instead"], ["@B_android#accounts#AccountManagerCallback_E@", "AccountManagerCallback: Callback to invoke when the request completes, null for no callback"], ["@B_android#os#Handler_E@", "Handler: @B_android#os#Handler_E@ identifying the callback thread, null for the main thread"]], "Throws": [], "SeeAlso": ["@B_android#accounts#AccountManager#finishSession_E@"], "Permissions": [], "Description": "Asks the user to enter a new password for the account but not updating the saved credentials for the account until @B_android#accounts#AccountManager#finishSession_E@ is called. This method may be called from any thread, but the returned @B_android#accounts#AccountManagerFuture_E@ must not be used on the main thread.", "history": "Added in API level 26", "FullName": "public AccountManagerFuture<Bundle> startUpdateCredentialsSession (Account account, String authTokenType, Bundle options, Activity activity, AccountManagerCallback<Bundle> callback, Handler handler)"}, "getUserData(android.accounts.Account,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The user data, null if the account, key doesn't exist, or the user is locked"]], "Parameters": [["@B_android#accounts#Account_E@", "Account: The account to query for user data"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the user data named by \"key\" associated with the account. This is intended for authenticators and related code to store arbitrary metadata along with accounts. The meaning of the keys and values is up to the authenticator for the account. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that owns the specified account. @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@ and before, AUTHENTICATE_ACCOUNTS permission is needed for those platforms. See docs for this function in API level @B_android#os#Build#VERSION_CODES#LOLLIPOP_MR1_E@. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public String getUserData (Account account, String key)"}, "setUserData(android.accounts.Account,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#accounts#Account_E@", "Account: Account whose user data is to be set. Must not be null."], ["@B_java#lang#String_E@", "String: String user data key to set. Must not be null"], ["@B_java#lang#String_E@", "String: String value to set, null to clear this user data key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets one userdata key for an account. Intended by use for the authenticator to stash state for itself, not directly by applications. The meaning of the keys and values is up to the authenticator. It is safe to call this method from the main thread. This method requires the caller to have a signature match with the authenticator that manages the specified account. Requires android.Manifest.permission.AUTHENTICATE_ACCOUNTS", "history": "Added in API level 5", "FullName": "public void setUserData (Account account, String key, String value)"}, "get(android.content.Context)": {"Returns": [["@B_android#accounts#AccountManager_E@", "An @B_android#accounts#AccountManager_E@ instance"]], "Parameters": [["@B_android#content#Context_E@", "Context: The @B_android#content#Context_E@ to use when necessary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an AccountManager instance associated with a Context. The @B_android#content#Context_E@ will be used as long as the AccountManager is active, so make sure to use a @B_android#content#Context_E@ whose lifetime is commensurate with any listeners registered to @B_android#accounts#AccountManager#addOnAccountsUpdatedListener_E@ or similar methods. It is safe to call this method from the main thread. No permission is required to call this method.", "history": "Added in API level 5", "FullName": "public static AccountManager get (Context context)"}, "getAccountsByTypeForPackage(java.lang.String,java.lang.String)": {"Returns": [["@B_android#accounts#Account_E@", "An array of @B_android#accounts#Account_E@, one per matching account. Empty (never null) if no accounts of the specified type can be accessed by the package."]], "Parameters": [["@B_java#lang#String_E@", "String: The type of accounts to return, null to retrieve all accounts"], ["@B_java#lang#String_E@", "String: The package name of the app for which the accounts are to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the accounts visible to the specified package in an environment where some apps are not authorized to view all accounts. This method can only be called by system apps and authenticators managing the type. Beginning API level @B_android#os#Build#VERSION_CODES#O_E@ it also return accounts which user can make visible to the application (see @B_android#accounts#AccountManager#VISIBILITY_USER_MANAGED_VISIBLE_E@).", "history": "Added in API level 18", "FullName": "public Account[] getAccountsByTypeForPackage (String type, String packageName)"}}, "Inheritance": [], "ClassName": "android.accounts.AccountManager", "ClassDesc": "This class provides access to a centralized registry of the user's online accounts. The user enters credentials (username and password) once per account, granting applications access to online resources with \"one-click\" approval. Different online services have different ways of handling accounts and authentication, so the account manager uses pluggable authenticator modules for different account types. Authenticators (which may be written by third parties) handle the actual details of validating account credentials and storing account information. For example, Google, Facebook, and Microsoft Exchange each have their own authenticator. Many servers support some notion of an authentication token, which can be used to authenticate a request to the server without sending the user's actual password. (Auth tokens are normally created with a separate request which does include the user's credentials.) AccountManager can generate auth tokens for applications, so the application doesn't need to handle passwords directly. Auth tokens are normally reusable and cached by AccountManager, but must be refreshed periodically. It's the responsibility of applications to invalidate auth tokens when they stop working so the AccountManager knows it needs to regenerate them. Applications accessing a server normally go through these steps: Get an instance of AccountManager using @B_android#accounts#AccountManager#get_E@. List the available accounts using @B_android#accounts#AccountManager#getAccountsByType_E@ or @B_android#accounts#AccountManager#getAccountsByTypeAndFeatures_E@. Normally applications will only be interested in accounts with one particular type, which identifies the authenticator. Account features are used to identify particular account subtypes and capabilities. Both the account type and features are authenticator-specific strings, and must be known by the application in coordination with its preferred authenticators. Select one or more of the available accounts, possibly by asking the user for their preference. If no suitable accounts are available, @B_android#accounts#AccountManager#addAccount_E@ may be called to prompt the user to create an account of the appropriate type. @B_android#accounts#AccountManager#getAccountsByType_E@. Requesting an auth token for an account no longer on the device results in an undefined failure. Request an auth token for the selected account(s) using one of the @B_android#accounts#AccountManager#getAuthToken_E@ methods or related helpers. Refer to the description of each method for exact usage and error handling details. Make the request using the auth token. The form of the auth token, the format of the request, and the protocol used are all specific to the service you are accessing. The application may use whatever network and protocol libraries are useful. @B_android#accounts#AccountManager#invalidateAuthToken_E@ to remove the token from the cache, otherwise requests will continue failing! After invalidating the auth token, immediately go back to the \"Request an auth token\" step above. If the process fails the second time, then it can be treated as a \"genuine\" authentication failure and the user notified or other appropriate actions taken. Some AccountManager methods may need to interact with the user to prompt for credentials, present options, or ask the user to add an account. The caller may choose whether to allow AccountManager to directly launch the necessary user interface and wait for the user, or to return an Intent which the caller may use to launch the interface, or (in some cases) to install a notification which the user can select at any time to launch the interface. To have AccountManager launch the interface directly, the caller must supply the current foreground @B_android#app#Activity_E@ context. Many AccountManager methods take @B_android#accounts#AccountManagerCallback_E@ and @B_android#os#Handler_E@ as parameters. These methods return immediately and run asynchronously. If a callback is provided then @B_android#accounts#AccountManagerCallback#run_E@ will be invoked on the Handler's thread when the request completes, successfully or not. The result is retrieved by calling @B_android#accounts#AccountManagerFuture#getResult_E@ on the @B_android#accounts#AccountManagerFuture_E@ returned by the method (and also passed to the callback). This method waits for the operation to complete (if necessary) and either returns the result or throws an exception if an error occurred during the operation. To make the request synchronously, call @B_android#accounts#AccountManagerFuture#getResult_E@ immediately on receiving the future from the method; no callback need be supplied. Requests which may block, including @B_android#accounts#AccountManagerFuture#getResult_E@, must never be called on the application's main event thread. These operations throw @B_java#lang#IllegalStateException_E@ if they are used on the main thread."}