{"Functions": {"add(int,E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "Added in API level 1", "FullName": "public abstract void add (int index, E element)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this list"]], "SeeAlso": ["@B_java#util#List#add_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "add(int, E)": {"Returns": [], "Parameters": [["int", "int: index at which the specified element is to be inserted"], ["E", "E: element to be inserted"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the specified position in this list (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (adds one to their indices).", "history": "added in API level 1", "FullName": "public abstract void add (int index, E element)"}, "listIterator()": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence).", "history": "Added in API level 1", "FullName": "public abstract ListIterator<E> listIterator ()"}, "sort(java.util.Comparator<?superE>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' Comparable should be used"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#UnsupportedOperationException_E@", "if the list's list-iterator does not support the set operation"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "Added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "sort(java.util.Comparator<? super E>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the Comparator used to compare list elements. A null value indicates that the elements' natural ordering should be used"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the list contains elements that are not mutually comparable using the specified comparator"], ["@B_java#lang#UnsupportedOperationException_E@", "if the list's list-iterator does not support the set operation"], ["@B_java#lang#IllegalArgumentException_E@", "(optional) if the comparator is found to violate the @B_java#util#Comparator_E@ contract"]], "SeeAlso": [], "Permissions": [], "Description": "Sorts this list according to the order induced by the specified @B_java#util#Comparator_E@. All elements in this list must be c.compare(e1, e2) must not throw a ClassCastException for any elements e1 and e2 in the list). If the specified comparator is null then all elements in this list must implement the @B_java#lang#Comparable_E@ interface and the elements' This list must be modifiable, but need not be resizable. For apps running on and targeting Android versions greater than Nougat (API level > 25), @B_java#util#Collections#sort_E@ delegates to this method. Such apps must not call @B_java#util#Collections#sort_E@ from this method. Instead, prefer not overriding this method at all. If you must override it, consider this implementation:", "history": "added in API level 24", "FullName": "public void sort (Comparator<? super E> c)"}, "removeAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be removed from this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the removeAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#List#remove_E@", "@B_java#util#List#contains_E@"], "Permissions": [], "Description": "Removes from this list all of its elements that are contained in the specified collection (optional operation).", "history": "Added in API level 1", "FullName": "public abstract boolean removeAll (Collection<?> c)"}, "remove(int)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: the index of the element to be removed"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the element at the specified position in this list (optional operation). Shifts any subsequent elements to the left (subtracts one from their indices). Returns the element that was removed from the list.", "history": "Added in API level 1", "FullName": "public abstract E remove (int index)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the clear operation is not supported by this list"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this list (optional operation). The list will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_java#util#Spliterator_E@ over the elements in this list. The Spliterator reports @B_java#util#Spliterator#SIZED_E@ and @B_java#util#Spliterator#ORDERED_E@. Implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "addAll(int,java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "Added in API level 1", "FullName": "public abstract boolean addAll (int index, Collection<? extends E> c)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this list in proper sequence.", "history": "Added in API level 1", "FullName": "public abstract Iterator<E> iterator ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this list"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to be compared for equality with this list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this list for equality. Returns", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object o)"}, "containsAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list contains all of the elements of the specified collection"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection to be checked for containment in this list"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the types of one or more elements in the specified collection are incompatible with this list (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this list does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#List#contains_E@"], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean containsAll (Collection<?> c)"}, "retainAll(java.util.Collection<?>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be retained in this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the retainAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this list is incompatible with the specified collection (optional)"], ["@B_java#lang#NullPointerException_E@", "if this list contains a null element and the specified collection does not permit null elements (optional), or if the specified collection is null"]], "SeeAlso": ["@B_java#util#List#remove_E@", "@B_java#util#List#contains_E@"], "Permissions": [], "Description": "Retains only the elements in this list that are contained in the specified collection (optional operation). In other words, removes from this list all of its elements that are not contained in the specified collection.", "history": "Added in API level 1", "FullName": "public abstract boolean retainAll (Collection<?> c)"}, "hashCode()": {"Returns": [["int", "the hash code value for this list"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#List#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this list. The hash code of a list is defined to be the result of the following calculation: @B_java#lang#Object#hashCode_E@.", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this list in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Arrays#asList_E@"], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this list. (In other words, this method must allocate a new array even if this list is backed by an array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 1", "FullName": "public abstract Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this list. If this list contains more than", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "indexOf(java.lang.Object)": {"Returns": [["int", "the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this list (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the first occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the lowest index", "history": "Added in API level 1", "FullName": "public abstract int indexOf (Object o)"}, "set(int,E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the set operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation).", "history": "Added in API level 1", "FullName": "public abstract E set (int index, E element)"}, "listIterator(int)": {"Returns": [["@B_java#util#ListIterator_E@", "a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list"]], "Parameters": [["int", "int: index of the first element to be returned from the list iterator (by a call to @B_java#util#ListIterator#next_E@)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list. The specified index indicates the first element that would be returned by an initial call to @B_java#util#ListIterator#next_E@. An initial call to @B_java#util#ListIterator#previous_E@ would return the element with the specified index minus one.", "history": "Added in API level 1", "FullName": "public abstract ListIterator<E> listIterator (int index)"}, "isEmpty()": {"Returns": [["boolean", "true if this list contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this list contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this list, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this list (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements (optional)"], ["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this list"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this list, if it is present (optional operation). If this list does not contain the element, it is unchanged. More formally, removes the element with the lowest index", "history": "Added in API level 1", "FullName": "public abstract boolean remove (Object o)"}, "addAll(int, java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["int", "int: index at which to insert the first element from the specified collection"], ["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index > size())"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts all of the elements in the specified collection into this list at the specified position (optional operation). Shifts the element currently at that position (if any) and any subsequent elements to the right (increases their indices). The new elements will appear in this list in the order that they are returned by the specified collection's iterator. The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "added in API level 1", "FullName": "public abstract boolean addAll (int index, Collection<? extends E> c)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing the elements of this list"]], "Parameters": [["T[]", "T: the array into which the elements of this list are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose."]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this list"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list. If the list fits in the specified array with room to spare (i.e., the array has more elements than the list), the element in the array immediately following the end of the list is set to Like the @B_java#util#List#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose", "history": "Added in API level 1", "FullName": "public abstract T[] toArray (T[] a)"}, "get(int)": {"Returns": [["E", "the element at the specified position in this list"]], "Parameters": [["int", "int: index of the element to return"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the element at the specified position in this list.", "history": "Added in API level 1", "FullName": "public abstract E get (int index)"}, "subList(int, int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "for an illegal endpoint index value (fromIndex < 0 || toIndex > size || fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is", "history": "added in API level 1", "FullName": "public abstract List<E> subList (int fromIndex, int toIndex)"}, "replaceAll(java.util.function.UnaryOperator<E>)": {"Returns": [], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: the operator to apply to each element"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if this list is unmodifiable. Implementations may throw this exception if an element cannot be replaced or if, in general, modification is not supported"], ["@B_java#lang#NullPointerException_E@", "if the specified operator is null or if the operator result is a null value and this list does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces each element of this list with the result of applying the operator to that element. Errors or runtime exceptions thrown by the operator are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (UnaryOperator<E> operator)"}, "set(int, E)": {"Returns": [["E", "the element previously at the specified position"]], "Parameters": [["int", "int: index of the element to replace"], ["E", "E: element to be stored at the specified position"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the set operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this list"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the index is out of range (index < 0 || index >= size())"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the element at the specified position in this list with the specified element (optional operation).", "history": "added in API level 1", "FullName": "public abstract E set (int index, E element)"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this list changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: collection containing elements to be added to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the addAll operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of the specified collection prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified collection contains one or more null elements and this list does not permit null elements, or if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of an element of the specified collection prevents it from being added to this list"]], "SeeAlso": ["@B_java#util#List#add_E@"], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this list, in the order that they are returned by the specified collection's iterator (optional operation). The behavior of this operation is undefined if the specified collection is modified while the operation is in progress. (Note that this will occur if the specified collection is this list, and it's nonempty.)", "history": "Added in API level 1", "FullName": "public abstract boolean addAll (Collection<? extends E> c)"}, "lastIndexOf(java.lang.Object)": {"Returns": [["int", "the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to search for"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this list (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the last occurrence of the specified element in this list, or -1 if this list does not contain the element. More formally, returns the highest index", "history": "Added in API level 1", "FullName": "public abstract int lastIndexOf (Object o)"}, "subList(int,int)": {"Returns": [["@B_java#util#List_E@", "a view of the specified range within this list"]], "Parameters": [["int", "int: low endpoint (inclusive) of the subList"], ["int", "int: high endpoint (exclusive) of the subList"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "for an illegal endpoint index value (fromIndex < 0 || toIndex > size || fromIndex > toIndex)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this list between the specified This method eliminates the need for explicit range operations (of the sort that commonly exist for arrays). Any operation that expects a list can be used as a range operation by passing a subList view instead of a whole list. For example, the following idiom removes a range of elements from a list: The semantics of the list returned by this method become undefined if the backing list (i.e., this list) is", "history": "Added in API level 1", "FullName": "public abstract List<E> subList (int fromIndex, int toIndex)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this list contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this list is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the type of the specified element is incompatible with this list (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public abstract boolean contains (Object o)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element to be appended to this list"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the add operation is not supported by this list"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this list"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null and this list does not permit null elements"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of this element prevents it from being added to this list"]], "SeeAlso": [], "Permissions": [], "Description": "Appends the specified element to the end of this list (optional operation). Lists that support this operation may place limitations on what elements may be added to this list. In particular, some lists will refuse to add null elements, and others will impose restrictions on the type of elements that may be added. List classes should clearly specify in their documentation any restrictions on what elements may be added.", "history": "Added in API level 1", "FullName": "public abstract boolean add (E e)"}}, "Inheritance": [], "ClassName": "java.util.List<E>", "ClassDesc": "An ordered collection (also known as a Unlike sets, lists typically allow duplicate elements. More formally, lists typically allow pairs of elements The The The The The Note: While it is permissible for lists to contain themselves as elements, extreme caution is advised: the Some list implementations have restrictions on the elements that they may contain. For example, some implementations prohibit null elements, and some have restrictions on the types of their elements. Attempting to add an ineligible element throws an unchecked exception, typically This interface is a member of the"}