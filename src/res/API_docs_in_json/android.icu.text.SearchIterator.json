{"Functions": {"setOverlapping(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: flag indicator if overlapping matches are allowed"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#isOverlapping_E@"], "Permissions": [], "Description": "Determines whether overlapping matches are returned. See the class documentation for more information about overlapping matches. The default setting of this property is false", "history": "Added in API level 24", "FullName": "public void setOverlapping (boolean allowOverlap)"}, "preceding(int)": {"Returns": [["int", "The character index of the first match preceding position, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no matches."]], "Parameters": [["int", "int: where search is to start from."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If position is less than or greater than the text range for searching"]], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the first index less than @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to the index @B_android#icu#text#SearchIterator#DONE_E@ When the overlapping option (@B_android#icu#text#SearchIterator#isOverlapping_E@) is off, the last index of the result match is always less than", "history": "Added in API level 24", "FullName": "public final int preceding (int position)"}, "getBreakIterator()": {"Returns": [["@B_android#icu#text#BreakIterator_E@", "the BreakIterator set to restrict logic matches"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#setBreakIterator_E@", "@B_android#icu#text#BreakIterator_E@"], "Permissions": [], "Description": "Returns the BreakIterator that is used to restrict the indexes at which matches are detected. This will be the same object that was passed to the constructor or to @B_android#icu#text#SearchIterator#setBreakIterator_E@. If the @B_android#icu#text#BreakIterator_E@ has not been set, @B_android#icu#text#SearchIterator#setBreakIterator_E@ for more information.", "history": "Added in API level 24", "FullName": "public BreakIterator getBreakIterator ()"}, "getElementComparisonType()": {"Returns": [["@B_android#icu#text#SearchIterator#ElementComparisonType_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#ElementComparisonType_E@", "@B_android#icu#text#SearchIterator#setElementComparisonType_E@"], "Permissions": [], "Description": "Returns the collation element comparison type.", "history": "Added in API level 24", "FullName": "public SearchIterator.ElementComparisonType getElementComparisonType ()"}, "getMatchStart()": {"Returns": [["int", "index of a substring within the text string that is being searched."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#first_E@", "@B_android#icu#text#SearchIterator#next_E@", "@B_android#icu#text#SearchIterator#previous_E@", "@B_android#icu#text#SearchIterator#last_E@"], "Permissions": [], "Description": "Returns the index to the match in the text string that was searched. This call returns a valid result only after a successful call to @B_android#icu#text#SearchIterator#first_E@, @B_android#icu#text#SearchIterator#next_E@, @B_android#icu#text#SearchIterator#previous_E@, or @B_android#icu#text#SearchIterator#last_E@. Just after construction, or after a searching method returns @B_android#icu#text#SearchIterator#DONE_E@, this method will return @B_android#icu#text#SearchIterator#DONE_E@. Use @B_android#icu#text#SearchIterator#getMatchLength_E@ to get the matched string length.", "history": "Added in API level 24", "FullName": "public int getMatchStart ()"}, "last()": {"Returns": [["int", "The index of the first match, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no matches."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the last index in the target text at which it matches the search pattern. The iterator is adjusted so that its current index (as returned by @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to the index @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "public final int last ()"}, "SearchIterator(java.text.CharacterIterator,android.icu.text.BreakIterator)": {"Returns": [], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: The target text to be searched."], ["@B_android#icu#text#BreakIterator_E@", "BreakIterator: A @B_android#icu#text#BreakIterator_E@ that is used to determine the boundaries of a logical match. This argument can be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when argument target is null, or of length 0"]], "SeeAlso": ["@B_android#icu#text#BreakIterator_E@"], "Permissions": [], "Description": "Protected constructor for use by subclasses. Initializes the iterator with the argument target text for searching and sets the BreakIterator. See class documentation for more details on the use of the target text and @B_android#icu#text#BreakIterator_E@.", "history": "Added in API level 24", "FullName": "protected SearchIterator (CharacterIterator target, BreakIterator breaker)"}, "next()": {"Returns": [["int", "The index of the next match after the current position, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no more matches."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the index of the next point at which the text matches the search pattern, starting from the current position The iterator is adjusted so that its current index (as returned by @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to a position after the end of the text string.", "history": "Added in API level 24", "FullName": "public int next ()"}, "getMatchedText()": {"Returns": [["@B_java#lang#String_E@", "the substring in the target test of the most recent match, or null if there is no match currently."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#first_E@", "@B_android#icu#text#SearchIterator#next_E@", "@B_android#icu#text#SearchIterator#previous_E@", "@B_android#icu#text#SearchIterator#last_E@"], "Permissions": [], "Description": "Returns the text that was matched by the most recent call to @B_android#icu#text#SearchIterator#first_E@, @B_android#icu#text#SearchIterator#next_E@, @B_android#icu#text#SearchIterator#previous_E@, or @B_android#icu#text#SearchIterator#last_E@. If the iterator is not pointing at a valid match (e.g. just after construction or after @B_android#icu#text#SearchIterator#DONE_E@ has been returned, returns an empty string.", "history": "Added in API level 24", "FullName": "public String getMatchedText ()"}, "getTarget()": {"Returns": [["@B_java#text#CharacterIterator_E@", "text string to be searched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the string text to be searched.", "history": "Added in API level 24", "FullName": "public CharacterIterator getTarget ()"}, "setTarget(java.text.CharacterIterator)": {"Returns": [], "Parameters": [["@B_java#text#CharacterIterator_E@", "CharacterIterator: new text iterator to look for match,"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "thrown when text is null or has 0 length"]], "SeeAlso": ["@B_android#icu#text#SearchIterator#getTarget_E@"], "Permissions": [], "Description": "Set the target text to be searched. Text iteration will then begin at the start of the text string. This method is useful if you want to reuse an iterator to search within a different body of text.", "history": "Added in API level 24", "FullName": "public void setTarget (CharacterIterator text)"}, "handlePrevious(int)": {"Returns": [["int", "index at which the match starts, else if match is not found @B_android#icu#text#SearchIterator#DONE_E@ is returned"]], "Parameters": [["int", "int: The index in the target text at which the search should start."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#setMatchLength_E@"], "Permissions": [], "Description": "Abstract method which subclasses override to provide the mechanism for finding the previous match in the target text. This allows different subclasses to provide different search algorithms. If a match is found, the implementation should return the index at which the match starts and should call @B_android#icu#text#SearchIterator#setMatchLength_E@ with the number of characters in the target text that make up the match. If no match is found, the method should return @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "protected abstract int handlePrevious (int startAt)"}, "getMatchLength()": {"Returns": [["int", "The length of the match in the target text, or 0 if there is no match currently."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#first_E@", "@B_android#icu#text#SearchIterator#next_E@", "@B_android#icu#text#SearchIterator#previous_E@", "@B_android#icu#text#SearchIterator#last_E@"], "Permissions": [], "Description": "Returns the length of text in the string which matches the search pattern. This call returns a valid result only after a successful call to @B_android#icu#text#SearchIterator#first_E@, @B_android#icu#text#SearchIterator#next_E@, @B_android#icu#text#SearchIterator#previous_E@, or @B_android#icu#text#SearchIterator#last_E@. Just after construction, or after a searching method returns @B_android#icu#text#SearchIterator#DONE_E@, this method will return 0.", "history": "Added in API level 24", "FullName": "public int getMatchLength ()"}, "getIndex()": {"Returns": [["int", "current index in the text being searched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current index in the text being searched. If the iteration has gone past the end of the text (or past the beginning for a backwards search), @B_android#icu#text#SearchIterator#DONE_E@ is returned.", "history": "Added in API level 24", "FullName": "public abstract int getIndex ()"}, "following(int)": {"Returns": [["int", "The character index of the first match following position, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no matches."]], "Parameters": [["int", "int: where search if to start from."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If position is less than or greater than the text range for searching."]], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the first index equal or greater than @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to the index @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "public final int following (int position)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the iteration. Search will begin at the start of the text string if a forward iteration is initiated before a backwards iteration. Otherwise if a backwards iteration is initiated before a forwards iteration, the search will begin at the end of the text string.", "history": "Added in API level 24", "FullName": "public void reset ()"}, "setMatchLength(int)": {"Returns": [], "Parameters": [["int", "int: new length to set"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#handleNext_E@", "@B_android#icu#text#SearchIterator#handlePrevious_E@"], "Permissions": [], "Description": "Sets the length of the most recent match in the target text. Subclasses' handleNext() and handlePrevious() methods should call this after they find a match in the target text.", "history": "Added in API level 24", "FullName": "protected void setMatchLength (int length)"}, "isOverlapping()": {"Returns": [["boolean", "true if the overlapping property has been set, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#setOverlapping_E@"], "Permissions": [], "Description": "Return true if the overlapping property has been set. See @B_android#icu#text#SearchIterator#setOverlapping_E@ for more information.", "history": "Added in API level 24", "FullName": "public boolean isOverlapping ()"}, "handleNext(int)": {"Returns": [["int", "index at which the match starts, else if match is not found @B_android#icu#text#SearchIterator#DONE_E@ is returned"]], "Parameters": [["int", "int: The index in the target text at which the search should start."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#setMatchLength_E@"], "Permissions": [], "Description": "Abstract method which subclasses override to provide the mechanism for finding the next match in the target text. This allows different subclasses to provide different search algorithms. If a match is found, the implementation should return the index at which the match starts and should call @B_android#icu#text#SearchIterator#setMatchLength_E@ with the number of characters in the target text that make up the match. If no match is found, the method should return @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "protected abstract int handleNext (int start)"}, "previous()": {"Returns": [["int", "The index of the previous match before the current position, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no more matches."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the index of the previous point at which the string text matches the search pattern, starting at the current position. The iterator is adjusted so that its current index (as returned by @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to the index @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "public int previous ()"}, "setBreakIterator(android.icu.text.BreakIterator)": {"Returns": [], "Parameters": [["@B_android#icu#text#BreakIterator_E@", "BreakIterator: A BreakIterator that will be used to restrict the points at which matches are detected. If a match is found, but the match's start or end index is not a boundary as determined by the @B_android#icu#text#BreakIterator_E@, the match will be rejected and another will be searched for. If this parameter is null, no break detection is attempted."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#BreakIterator_E@"], "Permissions": [], "Description": "Set the BreakIterator that will be used to restrict the points at which matches are detected.", "history": "Added in API level 24", "FullName": "public void setBreakIterator (BreakIterator breakiter)"}, "setElementComparisonType(android.icu.text.SearchIterator.ElementComparisonType)": {"Returns": [], "Parameters": [["@B_android#icu#text#SearchIterator#ElementComparisonType_E@", "SearchIterator.ElementComparisonType no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#ElementComparisonType_E@", "@B_android#icu#text#SearchIterator#getElementComparisonType_E@"], "Permissions": [], "Description": "Sets the collation element comparison type. The default comparison type is @B_android#icu#text#SearchIterator#ElementComparisonType#STANDARD_ELEMENT_COMPARISON_E@.", "history": "Added in API level 24", "FullName": "public void setElementComparisonType (SearchIterator.ElementComparisonType type)"}, "first()": {"Returns": [["int", "The character index of the first match, or @B_android#icu#text#SearchIterator#DONE_E@ if there are no matches."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Returns the first index at which the string text matches the search pattern. The iterator is adjusted so that its current index (as returned by @B_android#icu#text#SearchIterator#getIndex_E@) is the match position if one was found. If a match is not found, @B_android#icu#text#SearchIterator#DONE_E@ will be returned and the iterator will be adjusted to the index @B_android#icu#text#SearchIterator#DONE_E@.", "history": "Added in API level 24", "FullName": "public final int first ()"}, "setIndex(int)": {"Returns": [], "Parameters": [["int", "int: position from which to start the next search"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "thrown if argument position is out of the target text range."]], "SeeAlso": ["@B_android#icu#text#SearchIterator#getIndex_E@"], "Permissions": [], "Description": "Sets the position in the target text at which the next search will start. This method clears any previous match.", "history": "Added in API level 24", "FullName": "public void setIndex (int position)"}}, "Inheritance": [], "ClassName": "android.icu.text.SearchIterator", "ClassDesc": "Other options for searching include using a BreakIterator to restrict the points at which matches are detected."}