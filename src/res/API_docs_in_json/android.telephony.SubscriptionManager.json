{"Functions": {"getOpportunisticSubscriptions()": {"Returns": [["@B_java#util#List_E@", "the list of opportunistic subscription info. If none exists, an empty list. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Return opportunistic subscriptions that can be visible to the caller. Opportunistic subscriptions are for opportunistic networks, which are cellular networks with limited capabilities and coverage, for example, CBRS. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public List<SubscriptionInfo> getOpportunisticSubscriptions ()"}, "addOnOpportunisticSubscriptionsChangedListener(java.util.concurrent.Executor,android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#telephony#SubscriptionManager#OnOpportunisticSubscriptionsChangedListener_E@", "SubscriptionManager.OnOpportunisticSubscriptionsChangedListener: an instance of @B_android#telephony#SubscriptionManager#OnOpportunisticSubscriptionsChangedListener_E@ with onOpportunisticSubscriptionsChanged overridden. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register for changes to the list of opportunistic subscription records or to the individual records themselves. When a change occurs the onOpportunisticSubscriptionsChanged method of the listener will be invoked immediately if there has been a notification.", "history": "Added in API level 29", "FullName": "public void addOnOpportunisticSubscriptionsChangedListener (Executor executor, SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener)"}, "removeSubscriptionsFromGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: list of subId that need removing from their groups. This value must never be null."], ["@B_android#os#ParcelUuid_E@", "ParcelUuid: This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."], ["@B_java#lang#IllegalArgumentException_E@", "if the some subscriptions in the list doesn't belong the specified group."], ["@B_java#lang#IllegalStateException_E@", "if Telephony service is in bad state."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Remove a list of subscriptions from their subscription group. See @B_android#telephony#SubscriptionManager#createSubscriptionGroup_E@ for more details. Caller will either have @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ permission or had carrier privilege permission on the subscriptions: @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@ or @B_android#telephony#SubscriptionManager#canManageSubscription_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public void removeSubscriptionsFromGroup (List<Integer> subIdList, ParcelUuid groupUuid)"}, "getActiveSubscriptionInfoCountMax()": {"Returns": [["int", "the maximum number of active subscriptions that will be returned by @B_android#telephony#SubscriptionManager#getActiveSubscriptionInfoList_E@ and the value returned by @B_android#telephony#SubscriptionManager#getActiveSubscriptionInfoCount_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 22", "FullName": "public int getActiveSubscriptionInfoCountMax ()"}, "getDefaultSubscriptionId()": {"Returns": [["int", "the \"system\" default subscription id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system's default subscription id. For a voice capable device, it will return getDefaultVoiceSubscriptionId. For a data only device, it will return the getDefaultDataSubscriptionId. May return an INVALID_SUBSCRIPTION_ID on error.", "history": "Added in API level 24", "FullName": "public static int getDefaultSubscriptionId ()"}, "getActiveSubscriptionInfoForSimSlotIndex(int)": {"Returns": [["@B_android#telephony#SubscriptionInfo_E@", "SubscriptionInfo, maybe null if its not active"]], "Parameters": [["int", "int: the slot which the subscription is inserted"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get the active SubscriptionInfo associated with the slotIndex Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 22", "FullName": "public SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex (int slotIndex)"}, "createSubscriptionGroup(java.util.List<java.lang.Integer>)": {"Returns": [["@B_android#os#ParcelUuid_E@", "groupUUID a UUID assigned to the subscription group. This value will never be null."]], "Parameters": [["@B_java#util#List_E@", "List: list of subId that will be in the same group This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."], ["@B_java#lang#IllegalArgumentException_E@", "if any of the subscriptions in the list doesn't exist."], ["@B_java#lang#IllegalStateException_E@", "if Telephony service is in bad state."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Inform SubscriptionManager that subscriptions in the list are bundled as a group. It can be multiple primary (non-opportunistic) subscriptions, or one or more primary plus one or more opportunistic subscriptions. This API will always create a new immutable group and assign group UUID to all the subscriptions, regardless whether they are in a group already or not. Grouped subscriptions will have below behaviors: 1) They will share the same user settings. 2) The opportunistic subscriptions in the group is considered invisible and will not return from @B_android#telephony#SubscriptionManager#getActiveSubscriptionInfoList_E@, unless caller has carrier privilege permission of the subscriptions. 3) The opportunistic subscriptions in the group can't be active by itself. If all other non-opportunistic ones are deactivated (unplugged or disabled in Settings), the opportunistic ones will be deactivated automatically. Caller will either have @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ permission or had carrier privilege permission on the subscriptions: @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@ or @B_android#telephony#SubscriptionManager#canManageSubscription_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public ParcelUuid createSubscriptionGroup (List<Integer> subIdList)"}, "addSubscriptionsIntoGroup(java.util.List<java.lang.Integer>,android.os.ParcelUuid)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: list of subId that need adding into the group This value must never be null."], ["@B_android#os#ParcelUuid_E@", "ParcelUuid: the groupUuid the subscriptions are being added to. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."], ["@B_java#lang#IllegalArgumentException_E@", "if the some subscriptions in the list doesn't exist, or the groupUuid doesn't exist."], ["@B_java#lang#IllegalStateException_E@", "if Telephony service is in bad state."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Add a list of subscriptions into a group. See @B_android#telephony#SubscriptionManager#createSubscriptionGroup_E@ for more details. Caller will either have @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ permission or had carrier privilege permission on the subscriptions: @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@ or @B_android#telephony#SubscriptionManager#canManageSubscription_E@ Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public void addSubscriptionsIntoGroup (List<Integer> subIdList, ParcelUuid groupUuid)"}, "getSubscriptionIds(int)": {"Returns": [["int[]", "subscription Ids or null if the given slot Index is not valid or there are no active subscriptions in the slot."]], "Parameters": [["int", "int: the slot index."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an array of Subscription Ids for specified slot Index.", "history": "Added in API level 29", "FullName": "public int[] getSubscriptionIds (int slotIndex)"}, "getActiveSubscriptionInfo(int)": {"Returns": [["@B_android#telephony#SubscriptionInfo_E@", "SubscriptionInfo, maybe null if its not active."]], "Parameters": [["int", "int: The unique SubscriptionInfo key in database."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get the active SubscriptionInfo with the input subId. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 22", "FullName": "public SubscriptionInfo getActiveSubscriptionInfo (int subId)"}, "getActiveSubscriptionInfoCount()": {"Returns": [["int", "the current number of active subscriptions. There is no guarantee the value returned by this method will be the same as the length of the list returned by @B_android#telephony#SubscriptionManager#getActiveSubscriptionInfoList_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). In the latter case, the count will include only those subscriptions accessible to the caller. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 22", "FullName": "public int getActiveSubscriptionInfoCount ()"}, "setSubscriptionPlans(int,java.util.List<android.telephony.SubscriptionPlan>)": {"Returns": [], "Parameters": [["int", "int: the subscriber this relationship applies to. An empty list may be sent to clear any existing plans."], ["@B_java#util#List_E@", "List: the list of plans. The first plan is always the primary and most important plan. Any additional plans are secondary and may not be displayed or used by decision making logic. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."]], "SeeAlso": [], "Permissions": [], "Description": "Set the description of the billing relationship plan between a carrier and a specific subscriber. This method is only accessible to the following narrow set of apps: The carrier app for this subscriberId, as determined by @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. The carrier app explicitly delegated access through @B_android#telephony#CarrierConfigManager#KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING_E@.", "history": "Added in API level 28", "FullName": "public void setSubscriptionPlans (int subId, List<SubscriptionPlan> plans)"}, "removeOnOpportunisticSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnOpportunisticSubscriptionsChangedListener)": {"Returns": [], "Parameters": [["@B_android#telephony#SubscriptionManager#OnOpportunisticSubscriptionsChangedListener_E@", "SubscriptionManager.OnOpportunisticSubscriptionsChangedListener: that is to be unregistered. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister the @B_android#telephony#SubscriptionManager#OnOpportunisticSubscriptionsChangedListener_E@ that is currently listening opportunistic subscriptions change. This is not strictly necessary as the listener will automatically be unregistered if an attempt to invoke the listener fails.", "history": "Added in API level 29", "FullName": "public void removeOnOpportunisticSubscriptionsChangedListener (SubscriptionManager.OnOpportunisticSubscriptionsChangedListener listener)"}, "setOpportunistic(boolean,int)": {"Returns": [["boolean", "true if the operation is succeed, false otherwise."]], "Parameters": [["boolean", "boolean: whether it\u2019s opportunistic subscription."], ["int", "int: the unique SubscriptionInfo index in database"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#MODIFY_PHONE_STATE_E@"], "Description": "Set whether a subscription is opportunistic, that is, whether the network it connects to has limited coverage. For example, CBRS. Setting a subscription opportunistic has following impacts: 1) Even if it's active, it will be dormant most of the time. The modem will not try to scan or camp until it knows an available network is nearby to save power. 2) Telephony relies on system app or carrier input to notify nearby available networks. See @B_android#telephony#TelephonyManager#updateAvailableNetworks_E@ for more information. 3) In multi-SIM devices, when the network is nearby and camped, system may automatically switch internet data between it and default data subscription, based on carrier recommendation and its signal strength and metered-ness, etc. Caller will either have @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@ or carrier privilege permission of the subscription. Requires @B_android#Manifest#permission#MODIFY_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public boolean setOpportunistic (boolean opportunistic, int subId)"}, "setSubscriptionOverrideUnmetered(int,boolean,long)": {"Returns": [], "Parameters": [["int", "int: the subscriber this override applies to."], ["boolean", "boolean: set if the billing relationship should be considered unmetered."], ["long", "long: the timeout after which the requested override will be automatically cleared, or 0 to leave in the requested state until explicitly cleared, or the next reboot, whichever happens first. Value is a non-negative duration in milliseconds."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."]], "SeeAlso": [], "Permissions": [], "Description": "Temporarily override the billing relationship plan between a carrier and a specific subscriber to be considered unmetered. This will be reflected to apps via @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_METERED_E@. This method is only accessible to the following narrow set of apps: The carrier app for this subscriberId, as determined by @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. The carrier app explicitly delegated access through @B_android#telephony#CarrierConfigManager#KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING_E@.", "history": "Added in API level 28", "FullName": "public void setSubscriptionOverrideUnmetered (int subId, boolean overrideUnmetered, long timeoutMillis)"}, "isNetworkRoaming(int)": {"Returns": [["boolean", "true if the network for the subscription is roaming, false otherwise"]], "Parameters": [["int", "int: The subscription ID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the device is considered roaming on the current network for a subscription. Availability: Only when user registered to a network.", "history": "Added in API level 22", "FullName": "public boolean isNetworkRoaming (int subId)"}, "getSlotIndex(int)": {"Returns": [["int", "slotIndex as a positive integer or @B_android#telephony#SubscriptionManager#INVALID_SIM_SLOT_INDEX_E@ if the supplied subscriptionId doesn't have an associated slot index."]], "Parameters": [["int", "int: the unique SubscriptionInfo index in database"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get slotIndex associated with the subscription.", "history": "Added in API level 29", "FullName": "public static int getSlotIndex (int subscriptionId)"}, "getActiveSubscriptionInfoList()": {"Returns": [["@B_java#util#List_E@", "Sorted list of the currently @B_android#telephony#SubscriptionInfo_E@ records available on the device. If null is returned the current state is unknown but if a OnSubscriptionsChangedListener has been registered OnSubscriptionsChangedListener#onSubscriptionsChanged will be invoked in the future. If the list is empty then there are no SubscriptionInfo records currently available. if the list is non-empty the list is sorted by SubscriptionInfo#getSimSlotIndex then by SubscriptionInfo#getSubscriptionId."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get the SubscriptionInfo(s) of the currently active SIM(s). The records will be sorted by @B_android#telephony#SubscriptionInfo#getSimSlotIndex_E@ then by @B_android#telephony#SubscriptionInfo#getSubscriptionId_E@. Requires Permission: @B_android#Manifest#permission#READ_PHONE_STATE_E@ or that the calling app has carrier privileges (see @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@). In the latter case, only records accessible to the calling app are returned. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 22", "FullName": "public List<SubscriptionInfo> getActiveSubscriptionInfoList ()"}, "getDefaultDataSubscriptionId()": {"Returns": [["int", "the default data subscription Id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system's default data subscription id. On a voice only device or on error, will return INVALID_SUBSCRIPTION_ID.", "history": "Added in API level 24", "FullName": "public static int getDefaultDataSubscriptionId ()"}, "isActiveSubscriptionId(int)": {"Returns": [["boolean", "true if the supplied subscription ID corresponds to an active subscription; false if it does not correspond to an active subscription; or throw a SecurityException if the caller hasn't got the right permission."]], "Parameters": [["int", "int: the subscription ID."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Checks if the supplied subscription ID corresponds to a subscription which is actively in use on the device. An active subscription ID is a valid and usable subscription ID. Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public boolean isActiveSubscriptionId (int subscriptionId)"}, "from(android.content.Context)": {"Returns": [["@B_android#telephony#SubscriptionManager_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "developers should always obtain references directly from @B_android#content#Context#getSystemService_E@.", "history": "Added in API level 22 Deprecated in API level 28", "FullName": "public static SubscriptionManager from (Context context)"}, "getSubscriptionPlans(int)": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [["int", "int: the subscriber this relationship applies to"]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."]], "SeeAlso": [], "Permissions": [], "Description": "Get the description of the billing relationship plan between a carrier and a specific subscriber. This method is only accessible to the following narrow set of apps: The carrier app for this subscriberId, as determined by @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. The carrier app explicitly delegated access through @B_android#telephony#CarrierConfigManager#KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING_E@.", "history": "Added in API level 28", "FullName": "public List<SubscriptionPlan> getSubscriptionPlans (int subId)"}, "canManageSubscription(android.telephony.SubscriptionInfo)": {"Returns": [["boolean", "whether the app is authorized to manage this subscription per its metadata."]], "Parameters": [["@B_android#telephony#SubscriptionInfo_E@", "SubscriptionInfo: The subscription to check."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if this subscription is not embedded."]], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the app with the given context is authorized to manage the given subscription according to its metadata. Only supported for embedded subscriptions (if SubscriptionInfo#isEmbedded returns true).", "history": "Added in API level 28", "FullName": "public boolean canManageSubscription (SubscriptionInfo info)"}, "getSubscriptionsInGroup(android.os.ParcelUuid)": {"Returns": [["@B_java#util#List_E@", "list of subscriptionInfo that belong to the same group, including the given subscription itself. It will return an empty list if no subscription belongs to the group. This value will never be null."]], "Parameters": [["@B_android#os#ParcelUuid_E@", "ParcelUuid: of which list of subInfo will be returned. This value must never be null."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_PHONE_STATE_E@"], "Description": "Get subscriptionInfo list of subscriptions that are in the same group of given subId. See @B_android#telephony#SubscriptionManager#createSubscriptionGroup_E@ for more details. Caller will either have @B_android#Manifest#permission#READ_PHONE_STATE_E@ permission or had carrier privilege permission on the subscription. @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@ Requires @B_android#Manifest#permission#READ_PHONE_STATE_E@", "history": "Added in API level 29", "FullName": "public List<SubscriptionInfo> getSubscriptionsInGroup (ParcelUuid groupUuid)"}, "getDefaultSmsSubscriptionId()": {"Returns": [["int", "the default SMS subscription Id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system's default SMS subscription id. On a data only device or on error, will return INVALID_SUBSCRIPTION_ID.", "history": "Added in API level 24", "FullName": "public static int getDefaultSmsSubscriptionId ()"}, "isUsableSubscriptionId(int)": {"Returns": [["boolean", "true if the subscription ID is usable; false otherwise."]], "Parameters": [["int", "int: the subscription ID"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the supplied subscription ID is usable. A usable subscription ID is a valid subscription ID, but not necessarily an active subscription ID (see @B_android#telephony#SubscriptionManager#isActiveSubscriptionId_E@). Some subscription APIs require a usable subscription ID, and this is noted in their documentation; otherwise, a subscription ID does not need to be usable for subscription functions, only valid.", "history": "Added in API level 29", "FullName": "public static boolean isUsableSubscriptionId (int subscriptionId)"}, "getDefaultVoiceSubscriptionId()": {"Returns": [["int", "the default voice subscription Id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the system's default voice subscription id. On a data only device or on error, will return INVALID_SUBSCRIPTION_ID.", "history": "Added in API level 24", "FullName": "public static int getDefaultVoiceSubscriptionId ()"}, "switchToSubscription(int,android.app.PendingIntent)": {"Returns": [], "Parameters": [["int", "int: sub id"], ["@B_android#app#PendingIntent_E@", "PendingIntent: pending intent that will be sent after operation is done. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Switch to a certain subscription Requires android.Manifest.permission.WRITE_EMBEDDED_SUBSCRIPTIONS", "history": "Added in API level 29", "FullName": "public void switchToSubscription (int subId, PendingIntent callbackIntent)"}, "setSubscriptionOverrideCongested(int,boolean,long)": {"Returns": [], "Parameters": [["int", "int: the subscriber this override applies to."], ["boolean", "boolean: set if the subscription should be considered congested."], ["long", "long: the timeout after which the requested override will be automatically cleared, or 0 to leave in the requested state until explicitly cleared, or the next reboot, whichever happens first. Value is a non-negative duration in milliseconds."]], "Throws": [["@B_java#lang#SecurityException_E@", "if the caller doesn't meet the requirements outlined above."]], "SeeAlso": [], "Permissions": [], "Description": "Temporarily override the billing relationship plan between a carrier and a specific subscriber to be considered congested. This will cause the device to delay certain network requests when possible, such as developer jobs that are willing to run in a flexible time window. This method is only accessible to the following narrow set of apps: The carrier app for this subscriberId, as determined by @B_android#telephony#TelephonyManager#hasCarrierPrivileges_E@. The carrier app explicitly delegated access through @B_android#telephony#CarrierConfigManager#KEY_CONFIG_PLANS_PACKAGE_OVERRIDE_STRING_E@.", "history": "Added in API level 28", "FullName": "public void setSubscriptionOverrideCongested (int subId, boolean overrideCongested, long timeoutMillis)"}, "isValidSubscriptionId(int)": {"Returns": [["boolean", "true if the supplied subscriptionId is valid; false otherwise."]], "Parameters": [["int", "int: The subscription ID."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the supplied subscription ID is valid. A valid subscription ID is not necessarily an active subscription ID (see @B_android#telephony#SubscriptionManager#isActiveSubscriptionId_E@) or an usable subscription ID (see @B_android#telephony#SubscriptionManager#isUsableSubscriptionId_E@). Unless specifically noted, subscription APIs work with a valid subscription ID.", "history": "Added in API level 29", "FullName": "public static boolean isValidSubscriptionId (int subscriptionId)"}, "removeOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)": {"Returns": [], "Parameters": [["@B_android#telephony#SubscriptionManager#OnSubscriptionsChangedListener_E@", "SubscriptionManager.OnSubscriptionsChangedListener: that is to be unregistered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister the @B_android#telephony#SubscriptionManager#OnSubscriptionsChangedListener_E@. This is not strictly necessary as the listener will automatically be unregistered if an attempt to invoke the listener fails.", "history": "Added in API level 22", "FullName": "public void removeOnSubscriptionsChangedListener (SubscriptionManager.OnSubscriptionsChangedListener listener)"}, "addOnSubscriptionsChangedListener(android.telephony.SubscriptionManager.OnSubscriptionsChangedListener)": {"Returns": [], "Parameters": [["@B_android#telephony#SubscriptionManager#OnSubscriptionsChangedListener_E@", "SubscriptionManager.OnSubscriptionsChangedListener: an instance of @B_android#telephony#SubscriptionManager#OnSubscriptionsChangedListener_E@ with onSubscriptionsChanged overridden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register for changes to the list of active @B_android#telephony#SubscriptionInfo_E@ records or to the individual records themselves. When a change occurs the onSubscriptionsChanged method of the listener will be invoked immediately if there has been a notification. The onSubscriptionChanged method will also be triggered once initially when calling this function.", "history": "Added in API level 22", "FullName": "public void addOnSubscriptionsChangedListener (SubscriptionManager.OnSubscriptionsChangedListener listener)"}, "getAccessibleSubscriptionInfoList()": {"Returns": [["@B_java#util#List_E@", "Sorted list of the current embedded @B_android#telephony#SubscriptionInfo_E@ records available on the device which are accessible to the caller. If null is returned the current state is unknown but if a OnSubscriptionsChangedListener has been registered OnSubscriptionsChangedListener#onSubscriptionsChanged will be invoked in the future. If the list is empty then there are no SubscriptionInfo records currently available. if the list is non-empty the list is sorted by SubscriptionInfo#getSimSlotIndex then by SubscriptionInfo#getSubscriptionId."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the SubscriptionInfo(s) of all embedded subscriptions accessible to the calling app, if any. Only those subscriptions for which the calling app has carrier privileges per the subscription metadata, if any, will be included in the returned list. The records will be sorted by @B_android#telephony#SubscriptionInfo#getSimSlotIndex_E@ then by @B_android#telephony#SubscriptionInfo#getSubscriptionId_E@.", "history": "Added in API level 28", "FullName": "public List<SubscriptionInfo> getAccessibleSubscriptionInfoList ()"}}, "Inheritance": [], "ClassName": "android.telephony.SubscriptionManager", "ClassDesc": "SubscriptionManager is the application interface to SubscriptionController and provides information about the current Telephony Subscriptions."}