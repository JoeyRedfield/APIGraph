{"Functions": {"load(int)": {"Returns": [["@B_android#view#KeyCharacterMap_E@", "The associated key character map."]], "Parameters": [["int", "int: The device id of the keyboard."]], "Throws": [["", "android.view.KeyCharacterMap.UnavailableException UnavailableException} if the key character map could not be loaded because it was malformed or the default key character map is missing from the system."]], "SeeAlso": [], "Permissions": [], "Description": "Loads the key character maps for the keyboard with the specified device id.", "history": "Added in API level 1", "FullName": "public static KeyCharacterMap load (int deviceId)"}, "getModifierBehavior()": {"Returns": [["int", "The modifier behavior for this keyboard."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#KeyCharacterMap_E@"], "Permissions": [], "Description": "Gets a constant that describes the behavior of this keyboard's modifier keys such as @B_android#view#KeyEvent#KEYCODE_SHIFT_LEFT_E@. Currently there are two behaviors that may be combined: Chorded behavior: When the modifier key is pressed together with one or more character keys, the keyboard inserts the modified keys and then resets the modifier state when the modifier key is released. Toggled behavior: When the modifier key is pressed and released on its own it first toggles into a latched state. When latched, the modifier will apply to next character key that is pressed and will then reset itself to the initial state. If the modifier is already latched and the modifier key is pressed and release on its own again, then it toggles into a locked state. When locked, the modifier will apply to all subsequent character keys that are pressed until unlocked by pressing the modifier key on its own one more time to reset it to the initial state. Toggled behavior is useful for small profile keyboards designed for thumb typing. This function currently returns @B_android#view#KeyCharacterMap#MODIFIER_BEHAVIOR_CHORDED_E@ when the @B_android#view#KeyCharacterMap#getKeyboardType_E@ is @B_android#view#KeyCharacterMap#FULL_E@ or @B_android#view#KeyCharacterMap#SPECIAL_FUNCTION_E@ and @B_android#view#KeyCharacterMap#MODIFIER_BEHAVIOR_CHORDED_OR_TOGGLED_E@ otherwise. In the future, the function may also take into account global keyboard accessibility settings, other user preferences, or new device capabilities.", "history": "Added in API level 11", "FullName": "public int getModifierBehavior ()"}, "getMatch(int, char[])": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["int", "int: The keycode."], ["char[]", "char: The array of matching characters to consider."]], "Throws": [["", "IllegalArgumentException} if the passed array of characters is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. This is a convenience function that returns the same value as @B_android#view#KeyCharacterMap#getMatch_E@.", "history": "added in API level 1", "FullName": "public char getMatch (int keyCode, char[] chars)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "get(int,int)": {"Returns": [["int", "The associated character or combining accent, or 0 if none."]], "Parameters": [["int", "int: The key code."], ["int", "int: The meta key modifier state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see @B_android#text#method#MetaKeyKeyListener_E@) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit @B_android#view#KeyCharacterMap#COMBINING_ACCENT_E@ set, the key is a \"dead key\" that should be combined with another to actually produce a character -- see @B_android#view#KeyCharacterMap#getDeadChar_E@ -- after masking with @B_android#view#KeyCharacterMap#COMBINING_ACCENT_MASK_E@.", "history": "Added in API level 1", "FullName": "public int get (int keyCode, int metaState)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 16", "FullName": "public int describeContents ()"}, "getMatch(int,char[],int)": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["int", "int: The key code."], ["char[]", "char: The array of matching characters to consider."], ["int", "int: The preferred meta key modifier state."]], "Throws": [["", "java.lang.IllegalArgumentException IllegalArgumentException} if the passed array of characters is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. If there are multiple choices, prefers the one that would be generated with the specified meta key modifier state.", "history": "Added in API level 1", "FullName": "public char getMatch (int keyCode, char[] chars, int metaState)"}, "getMatch(int, char[], int)": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["int", "int: The key code."], ["char[]", "char: The array of matching characters to consider."], ["int", "int: The preferred meta key modifier state."]], "Throws": [["", "IllegalArgumentException} if the passed array of characters is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. If there are multiple choices, prefers the one that would be generated with the specified meta key modifier state.", "history": "added in API level 1", "FullName": "public char getMatch (int keyCode, char[] chars, int metaState)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 16", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "isPrintingKey(int)": {"Returns": [["boolean", "True if the key is a printing key."]], "Parameters": [["int", "int: The key code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the specified key produces a glyph.", "history": "Added in API level 1", "FullName": "public boolean isPrintingKey (int keyCode)"}, "getNumber(int)": {"Returns": [["char", "The associated numeric or symbolic character, or 0 if none."]], "Parameters": [["int", "int: The key code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number or symbol associated with the key. The character value is returned, not the numeric value. If the key is not a number, but is a symbol, the symbol is retuned. This method is intended to to support dial pads and other numeric or symbolic entry on keyboards where certain keys serve dual function as alphabetic and symbolic keys. This method returns the number or symbol associated with the key independent of whether the user has pressed the required modifier. For example, on one particular keyboard the keys on the top QWERTY row generate numbers when ALT is pressed such that ALT-Q maps to '1'. So for that keyboard when @B_android#view#KeyCharacterMap#getNumber_E@ is called with @B_android#view#KeyEvent#KEYCODE_Q_E@ it returns '1' so that the user can type numbers without pressing ALT when it makes sense.", "history": "Added in API level 1", "FullName": "public char getNumber (int keyCode)"}, "deviceHasKeys(int[])": {"Returns": [["boolean[]", "A new array of the same size as the key codes array whose elements are set to true if at least one attached keyboard supports the corresponding key code at the same index in the key codes array."]], "Parameters": [["int[]", "int: The array of key codes to query."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given array of key codes.", "history": "Added in API level 3", "FullName": "public static boolean[] deviceHasKeys (int[] keyCodes)"}, "getEvents(char[])": {"Returns": [["@B_android#view#KeyEvent_E@", "An array of @B_android#view#KeyEvent_E@ objects, or null if the given char array can not be generated using the current key character map."]], "Parameters": [["char[]", "char: The sequence of characters to generate."]], "Throws": [["", "java.lang.IllegalArgumentException IllegalArgumentException} if the passed array of characters is null."]], "SeeAlso": [], "Permissions": [], "Description": "Get an array of KeyEvent objects that if put into the input stream could plausibly generate the provided sequence of characters. It is not guaranteed that the sequence is the only way to generate these events or that it is optimal. This function is primarily offered for instrumentation and testing purposes. It may fail to map characters to key codes. In particular, the key character map for the @B_android#view#KeyCharacterMap#BUILT_IN_KEYBOARD_E@ device id may be empty. Consider using the key character map associated with the @B_android#view#KeyCharacterMap#VIRTUAL_KEYBOARD_E@ device id instead. For robust text entry, do not use this function. Instead construct a @B_android#view#KeyEvent_E@ with action code @B_android#view#KeyEvent#ACTION_MULTIPLE_E@ that contains the desired string using @B_android#view#KeyEvent#KeyEvent_E@.", "history": "Added in API level 1", "FullName": "public KeyEvent[] getEvents (char[] chars)"}, "getKeyboardType()": {"Returns": [["int", "The keyboard type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the keyboard type. Returns @B_android#view#KeyCharacterMap#NUMERIC_E@, @B_android#view#KeyCharacterMap#PREDICTIVE_E@, @B_android#view#KeyCharacterMap#ALPHA_E@, @B_android#view#KeyCharacterMap#FULL_E@ or @B_android#view#KeyCharacterMap#SPECIAL_FUNCTION_E@. Different keyboard types have different semantics. Refer to the documentation associated with the keyboard type constants for details.", "history": "Added in API level 1", "FullName": "public int getKeyboardType ()"}, "deviceHasKey(int)": {"Returns": [["boolean", "True if at least one attached keyboard supports the specified key code."]], "Parameters": [["int", "int: The key code to query."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries the framework about whether any physical keys exist on the any keyboard attached to the device that are capable of producing the given key code.", "history": "Added in API level 3", "FullName": "public static boolean deviceHasKey (int keyCode)"}, "getDeadChar(int, int)": {"Returns": [["int", "The combined character, or 0 if the characters cannot be combined."]], "Parameters": [["int", "int: The accent character. eg. '`'"], ["int", "int: The basic character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character that is produced by combining the dead key producing accent with the key producing character c. For example, getDeadChar('`', 'e') returns \u00e8. getDeadChar('^', ' ') returns '^' and getDeadChar('^', '^') returns '^'.", "history": "added in API level 1", "FullName": "public static int getDeadChar (int accent, int c)"}, "get(int, int)": {"Returns": [["int", "The associated character or combining accent, or 0 if none."]], "Parameters": [["int", "int: The key code."], ["int", "int: The meta key modifier state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Unicode character generated by the specified key and meta key state combination. Returns the Unicode character that the specified key would produce when the specified meta bits (see @B_android#text#method#MetaKeyKeyListener_E@) were active. Returns 0 if the key is not one that is used to type Unicode characters. If the return value has bit @B_android#view#KeyCharacterMap#COMBINING_ACCENT_E@ set, the key is a \"dead key\" that should be combined with another to actually produce a character -- see @B_android#view#KeyCharacterMap#getDeadChar_E@ -- after masking with @B_android#view#KeyCharacterMap#COMBINING_ACCENT_MASK_E@.", "history": "added in API level 1", "FullName": "public int get (int keyCode, int metaState)"}, "getKeyData(int,android.view.KeyCharacterMap.KeyData)": {"Returns": [["boolean", "True if the key was mapped. If the key was not mapped, results is not modified."]], "Parameters": [["int", "int: The keyCode to query."], ["@B_android#view#KeyCharacterMap#KeyData_E@", "KeyCharacterMap.KeyData: A @B_android#view#KeyCharacterMap#KeyData_E@ instance that will be filled with the results."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "instead use @B_android#view#KeyCharacterMap#getDisplayLabel_E@, @B_android#view#KeyCharacterMap#getNumber_E@ or @B_android#view#KeyCharacterMap#get_E@. Get the character conversion data for a given key code.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public boolean getKeyData (int keyCode, KeyCharacterMap.KeyData results)"}, "getMatch(int,char[])": {"Returns": [["char", "The matching associated character, or 0 if none."]], "Parameters": [["int", "int: The keycode."], ["char[]", "char: The array of matching characters to consider."]], "Throws": [["", "java.lang.IllegalArgumentException IllegalArgumentException} if the passed array of characters is null."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the first character in the character array that can be generated by the specified key code. This is a convenience function that returns the same value as @B_android#view#KeyCharacterMap#getMatch_E@.", "history": "Added in API level 1", "FullName": "public char getMatch (int keyCode, char[] chars)"}, "getDisplayLabel(int)": {"Returns": [["char", "The display label character, or 0 if none (eg. for non-printing keys)."]], "Parameters": [["int", "int: The key code."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the primary character for this key. In other words, the label that is physically printed on it.", "history": "Added in API level 1", "FullName": "public char getDisplayLabel (int keyCode)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 16", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getDeadChar(int,int)": {"Returns": [["int", "The combined character, or 0 if the characters cannot be combined."]], "Parameters": [["int", "int: The accent character. eg. '`'"], ["int", "int: The basic character."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the character that is produced by combining the dead key producing accent with the key producing character c. For example, getDeadChar('`', 'e') returns \u00e8. getDeadChar('^', ' ') returns '^' and getDeadChar('^', '^') returns '^'.", "history": "Added in API level 1", "FullName": "public static int getDeadChar (int accent, int c)"}}, "Inheritance": [], "ClassName": "android.view.KeyCharacterMap", "ClassDesc": "Describes the keys provided by a keyboard device and their associated labels."}