{"Functions": {"getStartDelay(android.view.ViewGroup,android.transition.Transition,android.transition.TransitionValues,android.transition.TransitionValues)": {"Returns": [["long", "A start delay to use with the Animator created by transition. The delay will be offset by the minimum delay of all TransitionPropagations used in the Transition so that the smallest delay will be 0. Returned values may be negative."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The root of the View hierarchy running the transition."], ["@B_android#transition#Transition_E@", "Transition: The transition that created the Animator"], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for a specific target in the start scene."], ["@B_android#transition#TransitionValues_E@", "TransitionValues: The values for the target in the end scene."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by Transition to alter the Animator start delay. All start delays will be adjusted such that the minimum becomes zero.", "history": "Added in API level 21", "FullName": "public abstract long getStartDelay (ViewGroup sceneRoot, Transition transition, TransitionValues startValues, TransitionValues endValues)"}, "TransitionPropagation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public TransitionPropagation ()"}, "captureValues(android.transition.TransitionValues)": {"Returns": [], "Parameters": [["@B_android#transition#TransitionValues_E@", "TransitionValues: The holder for any values that the Transition wishes to store. Values are stored in the values field of this TransitionValues object and are keyed from a String value. For example, to store a view's rotation value, a transition might call transitionValues.values.put(\"appname:transitionname:rotation\", view.getRotation()). The target view will already be stored in the transitionValues structure when this method is called."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Captures the values in the start or end scene for the properties that this transition propagation monitors. These values are then passed as the startValues or endValues structure in a later call to @B_android#transition#TransitionPropagation#getStartDelay_E@. The main concern for an implementation is what the properties are that the transition cares about and what the values are for all of those properties. The start and end values will be compared later during the @B_android#transition#TransitionPropagation#getStartDelay_E@. method to determine the start delay. Subclasses must implement this method. The method should only be called by the transition system; it is not intended to be called from external classes.", "history": "Added in API level 21", "FullName": "public abstract void captureValues (TransitionValues transitionValues)"}, "getPropagationProperties()": {"Returns": [["@B_java#lang#String_E@", "An array of property names as described in the class documentation for @B_android#transition#TransitionValues_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the set of property names stored in the @B_android#transition#TransitionValues_E@ object passed into @B_android#transition#TransitionPropagation#captureValues_E@ that this transition propagation cares about for the purposes of preventing duplicate capturing of property values. A TransitionPropagation must override this method to prevent duplicate capturing of values and must contain at least one", "history": "Added in API level 21", "FullName": "public abstract String[] getPropagationProperties ()"}}, "Inheritance": [], "ClassName": "android.transition.TransitionPropagation", "ClassDesc": "Extend TransitionPropagation to customize start delays for Animators created in @B_android#transition#Transition#createAnimator_E@. A Transition such as @B_android#transition#Explode_E@ defaults to using @B_android#transition#CircularPropagation_E@ and Views closer to the epicenter will move out of the scene later and into the scene sooner than Views farther from the epicenter, giving the appearance of inertia. With no TransitionPropagation, all Views will react simultaneously to the start of the transition."}