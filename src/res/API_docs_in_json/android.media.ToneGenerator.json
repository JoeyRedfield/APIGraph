{"Functions": {"ToneGenerator(int,int)": {"Returns": [], "Parameters": [["int", "int: The streame type used for tone playback (e.g. STREAM_MUSIC)."], ["int", "int: The volume of the tone, given in percentage of maximum volume (from 0-100)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ToneGenerator class contructor specifying output stream type and volume.", "history": "Added in API level 1", "FullName": "public ToneGenerator (int streamType, int volume)"}, "stopTone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#ToneGenerator#ToneGenerator_E@"], "Permissions": [], "Description": "This method stops the tone currently playing playback.", "history": "Added in API level 1", "FullName": "public void stopTone ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases resources associated with this ToneGenerator object. It is good practice to call this method when you're done using the ToneGenerator.", "history": "Added in API level 1", "FullName": "public void release ()"}, "startTone(int, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: The type of tone generated @see @B_android#media#ToneGenerator#startTone_E@."], ["int", "int: The tone duration in milliseconds. If the tone is limited in time by definition, the actual duration will be the minimum of durationMs and the defined tone duration. Setting durationMs to -1, is equivalent to calling @B_android#media#ToneGenerator#startTone_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method starts the playback of a tone of the specified type for the specified duration.", "history": "added in API level 5", "FullName": "public boolean startTone (int toneType, int durationMs)"}, "getAudioSessionId()": {"Returns": [["int", "the ID of the audio session this ToneGenerator belongs to or 0 if an error occured."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the audio session ID.", "history": "Added in API level 16", "FullName": "public final int getAudioSessionId ()"}, "startTone(int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: The type of tone generated @see @B_android#media#ToneGenerator#startTone_E@."], ["int", "int: The tone duration in milliseconds. If the tone is limited in time by definition, the actual duration will be the minimum of durationMs and the defined tone duration. Setting durationMs to -1, is equivalent to calling @B_android#media#ToneGenerator#startTone_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method starts the playback of a tone of the specified type for the specified duration.", "history": "Added in API level 5", "FullName": "public boolean startTone (int toneType, int durationMs)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "startTone(int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int: The type of tone generated chosen from the following list: TONE_DTMF_0 TONE_DTMF_1 TONE_DTMF_2 TONE_DTMF_3 TONE_DTMF_4 TONE_DTMF_5 TONE_DTMF_6 TONE_DTMF_7 TONE_DTMF_8 TONE_DTMF_9 TONE_DTMF_A TONE_DTMF_B TONE_DTMF_C TONE_DTMF_D TONE_SUP_DIAL TONE_SUP_BUSY TONE_SUP_CONGESTION TONE_SUP_RADIO_ACK TONE_SUP_RADIO_NOTAVAIL TONE_SUP_ERROR TONE_SUP_CALL_WAITING TONE_SUP_RINGTONE TONE_PROP_BEEP TONE_PROP_ACK TONE_PROP_NACK TONE_PROP_PROMPT TONE_PROP_BEEP2 TONE_SUP_INTERCEPT TONE_SUP_INTERCEPT_ABBREV TONE_SUP_CONGESTION_ABBREV TONE_SUP_CONFIRM TONE_SUP_PIP TONE_CDMA_DIAL_TONE_LITE TONE_CDMA_NETWORK_USA_RINGBACK TONE_CDMA_INTERCEPT TONE_CDMA_ABBR_INTERCEPT TONE_CDMA_REORDER TONE_CDMA_ABBR_REORDER TONE_CDMA_NETWORK_BUSY TONE_CDMA_CONFIRM TONE_CDMA_ANSWER TONE_CDMA_NETWORK_CALLWAITING TONE_CDMA_PIP TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI TONE_CDMA_CALL_SIGNAL_ISDN_PAT3 TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING TONE_CDMA_CALL_SIGNAL_ISDN_PAT5 TONE_CDMA_CALL_SIGNAL_ISDN_PAT6 TONE_CDMA_CALL_SIGNAL_ISDN_PAT7 TONE_CDMA_HIGH_L TONE_CDMA_MED_L TONE_CDMA_LOW_L TONE_CDMA_HIGH_SS TONE_CDMA_MED_SS TONE_CDMA_LOW_SS TONE_CDMA_HIGH_SSL TONE_CDMA_MED_SSL TONE_CDMA_LOW_SSL TONE_CDMA_HIGH_SS_2 TONE_CDMA_MED_SS_2 TONE_CDMA_LOW_SS_2 TONE_CDMA_HIGH_SLS TONE_CDMA_MED_SLS TONE_CDMA_LOW_SLS TONE_CDMA_HIGH_S_X4 TONE_CDMA_MED_S_X4 TONE_CDMA_LOW_S_X4 TONE_CDMA_HIGH_PBX_L TONE_CDMA_MED_PBX_L TONE_CDMA_LOW_PBX_L TONE_CDMA_HIGH_PBX_SS TONE_CDMA_MED_PBX_SS TONE_CDMA_LOW_PBX_SS TONE_CDMA_HIGH_PBX_SSL TONE_CDMA_MED_PBX_SSL TONE_CDMA_LOW_PBX_SSL TONE_CDMA_HIGH_PBX_SLS TONE_CDMA_MED_PBX_SLS TONE_CDMA_LOW_PBX_SLS TONE_CDMA_HIGH_PBX_S_X4 TONE_CDMA_MED_PBX_S_X4 TONE_CDMA_LOW_PBX_S_X4 TONE_CDMA_ALERT_NETWORK_LITE TONE_CDMA_ALERT_AUTOREDIAL_LITE TONE_CDMA_ONE_MIN_BEEP TONE_CDMA_KEYPAD_VOLUME_KEY_LITE TONE_CDMA_PRESSHOLDKEY_LITE TONE_CDMA_ALERT_INCALL_LITE TONE_CDMA_EMERGENCY_RINGBACK TONE_CDMA_ALERT_CALL_GUARD TONE_CDMA_SOFT_ERROR_LITE TONE_CDMA_CALLDROP_LITE TONE_CDMA_NETWORK_BUSY_ONE_SHOT TONE_CDMA_ABBR_ALERT TONE_CDMA_SIGNAL_OFF"]], "Throws": [], "SeeAlso": ["@B_android#media#ToneGenerator#ToneGenerator_E@"], "Permissions": [], "Description": "This method starts the playback of a tone of the specified type. only one tone can play at a time: if a tone is playing while this method is called, this tone is stopped and replaced by the one requested.", "history": "Added in API level 1", "FullName": "public boolean startTone (int toneType)"}, "ToneGenerator(int, int)": {"Returns": [], "Parameters": [["int", "int: The streame type used for tone playback (e.g. STREAM_MUSIC)."], ["int", "int: The volume of the tone, given in percentage of maximum volume (from 0-100)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "ToneGenerator class contructor specifying output stream type and volume.", "history": "added in API level 1", "FullName": "public ToneGenerator (int streamType, int volume)"}}, "Inheritance": [], "ClassName": "android.media.ToneGenerator", "ClassDesc": "This class provides methods to play DTMF tones (ITU-T Recommendation Q.23), call supervisory tones (3GPP TS 22.001, CEPT) and proprietary tones (3GPP TS 31.111). Depending on call state and routing options, tones are mixed to the downlink audio or output to the speaker phone or headset. This API is not for generating tones over the uplink audio path."}