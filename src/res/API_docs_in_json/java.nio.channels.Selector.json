{"Functions": {"Selector()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 1", "FullName": "protected Selector ()"}, "isOpen()": {"Returns": [["boolean", "true if, and only if, this selector is open"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this selector is open.", "history": "Added in API level 1", "FullName": "public abstract boolean isOpen ()"}, "select(long)": {"Returns": [["int", "The number of keys, possibly zero, whose ready-operation sets were updated"]], "Parameters": [["long", "long: If positive, block for up to timeout milliseconds, more or less, while waiting for a channel to become ready; if zero, block indefinitely; must not be negative"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If this selector is closed"], ["@B_java#lang#IllegalArgumentException_E@", "If the value of the timeout argument is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a blocking @B_java#nio#channels#Selector#wakeup_E@ method is invoked, the current thread is interrupted, or the given timeout period expires, whichever comes first. This method does not offer real-time guarantees: It schedules the timeout as if by invoking the @B_java#lang#Object#wait_E@ method.", "history": "Added in API level 1", "FullName": "public abstract int select (long timeout)"}, "keys()": {"Returns": [["@B_java#util#Set_E@", "This selector's key set"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedSelectorException_E@", "If this selector is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this selector's key set. The key set is not directly modifiable. A key is removed only after it has been cancelled and its channel has been deregistered. Any attempt to modify the key set will cause an @B_java#lang#UnsupportedOperationException_E@ to be thrown. The key set is", "history": "Added in API level 1", "FullName": "public abstract Set<SelectionKey> keys ()"}, "wakeup()": {"Returns": [["@B_java#nio#channels#Selector_E@", "This selector"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes the first selection operation that has not yet returned to return immediately. If another thread is currently blocked in an invocation of the @B_java#nio#channels#Selector#select_E@ or @B_java#nio#channels#Selector#select_E@ methods then that invocation will return immediately. If no selection operation is currently in progress then the next invocation of one of these methods will return immediately unless the @B_java#nio#channels#Selector#selectNow_E@ method is invoked in the meantime. In any case the value returned by that invocation may be non-zero. Subsequent invocations of the @B_java#nio#channels#Selector#select_E@ or @B_java#nio#channels#Selector#select_E@ methods will block as usual unless this method is invoked again in the meantime. Invoking this method more than once between two successive selection operations has the same effect as invoking it just once.", "history": "Added in API level 1", "FullName": "public abstract Selector wakeup ()"}, "selectNow()": {"Returns": [["int", "The number of keys, possibly zero, whose ready-operation sets were updated by the selection operation"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If this selector is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a non-blocking Invoking this method clears the effect of any previous invocations of the @B_java#nio#channels#Selector#wakeup_E@ method.", "history": "Added in API level 1", "FullName": "public abstract int selectNow ()"}, "select()": {"Returns": [["int", "The number of keys, possibly zero, whose ready-operation sets were updated"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#nio#channels#ClosedSelectorException_E@", "If this selector is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Selects a set of keys whose corresponding channels are ready for I/O operations. This method performs a blocking @B_java#nio#channels#Selector#wakeup_E@ method is invoked, or the current thread is interrupted, whichever comes first.", "history": "Added in API level 1", "FullName": "public abstract int select ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this selector. If a thread is currently blocked in one of this selector's selection methods then it is interrupted as if by invoking the selector's @B_java#nio#channels#Selector#wakeup_E@ method. Any uncancelled keys still associated with this selector are invalidated, their channels are deregistered, and any other resources associated with this selector are released. If this selector is already closed then invoking this method has no effect. After a selector is closed, any further attempt to use it, except by invoking this method or the @B_java#nio#channels#Selector#wakeup_E@ method, will cause a @B_java#nio#channels#ClosedSelectorException_E@ to be thrown.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "selectedKeys()": {"Returns": [["@B_java#util#Set_E@", "This selector's selected-key set"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedSelectorException_E@", "If this selector is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this selector's selected-key set. Keys may be removed from, but not directly added to, the selected-key set. Any attempt to add an object to the key set will cause an @B_java#lang#UnsupportedOperationException_E@ to be thrown. The selected-key set is", "history": "Added in API level 1", "FullName": "public abstract Set<SelectionKey> selectedKeys ()"}, "open()": {"Returns": [["@B_java#nio#channels#Selector_E@", "A new selector"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Opens a selector. The new selector is created by invoking the @B_java#nio#channels#spi#SelectorProvider#openSelector_E@ method of the system-wide default @B_java#nio#channels#spi#SelectorProvider_E@ object.", "history": "Added in API level 1", "FullName": "public static Selector open ()"}, "provider()": {"Returns": [["@B_java#nio#channels#spi#SelectorProvider_E@", "The provider that created this channel"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider that created this channel.", "history": "Added in API level 1", "FullName": "public abstract SelectorProvider provider ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.Selector", "ClassDesc": "A multiplexor of @B_java#nio#channels#SelectableChannel_E@ objects. A selector may be created by invoking the @B_java#nio#channels#Selector#open_E@ method of this class, which will use the system's default @B_java#nio#channels#spi#SelectorProvider_E@ to create a new selector. A selector may also be created by invoking the @B_java#nio#channels#spi#SelectorProvider#openSelector_E@ method of a custom selector provider. A selector remains open until it is closed via its @B_java#nio#channels#Selector#close_E@ method. A selectable channel's registration with a selector is represented by a @B_java#nio#channels#SelectionKey_E@ object. A selector maintains three sets of selection keys: The @B_java#nio#channels#Selector#keys_E@ method. The @B_java#nio#channels#Selector#selectedKeys_E@ method. The selected-key set is always a subset of the key set. The All three sets are empty in a newly-created selector. A key is added to a selector's key set as a side effect of registering a channel via the channel's @B_java#nio#channels#SelectableChannel#register_E@ method. Cancelled keys are removed from the key set during selection operations. The key set itself is not directly modifiable. A key is added to its selector's cancelled-key set when it is cancelled, whether by closing its channel or by invoking its @B_java#nio#channels#SelectionKey#cancel_E@ method. Cancelling a key will cause its channel to be deregistered during the next selection operation, at which time the key will removed from all of the selector's key sets. Keys are added to the selected-key set by selection operations. A key may be removed directly from the selected-key set by invoking the set's @B_java#util#Set#remove_E@ method or by invoking the @B_java#util#Iterator#remove_E@ method of an @B_java#util#Iterator_E@ obtained from the set. Keys are never removed from the selected-key set in any other way; they are not, in particular, removed as a side effect of selection operations. Keys may not be added directly to the selected-key set. During each selection operation, keys may be added to and removed from a selector's selected-key set and may be removed from its key and cancelled-key sets. Selection is performed by the @B_java#nio#channels#Selector#select_E@, @B_java#nio#channels#Selector#select_E@, and @B_java#nio#channels#Selector#selectNow_E@ methods, and involves three steps: Whether or not a selection operation blocks to wait for one or more channels to become ready, and if so for how long, is the only essential difference between the three selection methods. Selectors are themselves safe for use by multiple concurrent threads; their key sets, however, are not. The selection operations synchronize on the selector itself, on the key set, and on the selected-key set, in that order. They also synchronize on the cancelled-key set during steps (1) and (3) above. Changes made to the interest sets of a selector's keys while a selection operation is in progress have no effect upon that operation; they will be seen by the next selection operation. Keys may be cancelled and channels may be closed at any time. Hence the presence of a key in one or more of a selector's key sets does not imply that the key is valid or that its channel is open. Application code should be careful to synchronize and check these conditions as necessary if there is any possibility that another thread will cancel a key or close a channel. A thread blocked in one of the @B_java#nio#channels#Selector#select_E@ or @B_java#nio#channels#Selector#select_E@ methods may be interrupted by some other thread in one of three ways: By invoking the selector's @B_java#nio#channels#Selector#wakeup_E@ method, By invoking the selector's @B_java#nio#channels#Selector#close_E@ method, or By invoking the blocked thread's @B_java#lang#Thread#interrupt_E@ method, in which case its interrupt status will be set and the selector's @B_java#nio#channels#Selector#wakeup_E@ method will be invoked. The @B_java#nio#channels#Selector#close_E@ method synchronizes on the selector and all three key sets in the same order as in a selection operation. A selector's key and selected-key sets are not, in general, safe for use by multiple concurrent threads. If such a thread might modify one of these sets directly then access should be controlled by synchronizing on the set itself. The iterators returned by these sets' @B_java#util#Set#iterator_E@ methods are @B_java#util#Iterator#remove_E@ method, then a @B_java#util#ConcurrentModificationException_E@ will be thrown."}