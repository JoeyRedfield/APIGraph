{"Functions": {"scrollBy(int, int)": {"Returns": [], "Parameters": [["int", "int: the amount of pixels to scroll by horizontally"], ["int", "int: the amount of pixels to scroll by vertically"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the scrolled position of your view. This will cause a call to @B_android#view#View#onScrollChanged_E@ and the view will be invalidated.", "history": "added in API level 11", "FullName": "public void scrollBy (int x, int y)"}, "computeScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a parent to request that a child update its values for mScrollX and mScrollY if necessary. This will typically be done if the child is animating a scroll using a @B_android#widget#Scroller_E@ object.", "history": "Added in API level 11", "FullName": "public void computeScroll ()"}, "getAccessibilityNodeProvider()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeProvider_E@", "The provider."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to @B_android#accessibilityservice#AccessibilityService_E@s that explore the window content. If this method returns an instance, this instance is responsible for managing @B_android#view#accessibility#AccessibilityNodeInfo_E@s describing the virtual sub-tree rooted at this View including the one representing the View itself. Similarly the returned instance is responsible for performing accessibility actions on any virtual view or the root view itself. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#getAccessibilityNodeProvider_E@ is responsible for handling this call.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeProvider getAccessibilityNodeProvider ()"}, "NumberPicker(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new number picker.", "history": "Added in API level 11", "FullName": "public NumberPicker (Context context)"}, "performClick()": {"Returns": [["boolean", "True there was an assigned OnClickListener that was called, false otherwise is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this view's OnClickListener, if it is defined. Performs all normal actions associated with clicking: reporting accessibility event, playing a sound, etc.", "history": "Added in API level 11", "FullName": "public boolean performClick ()"}, "computeVerticalScrollExtent()": {"Returns": [["int", "the vertical extent of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical extent of the vertical scrollbar's thumb within the vertical range. This value is used to compute the length of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollOffset_E@. The default extent is the drawing height of this view.", "history": "Added in API level 11", "FullName": "protected int computeVerticalScrollExtent ()"}, "setOnValueChangedListener(android.widget.NumberPicker.OnValueChangeListener)": {"Returns": [], "Parameters": [["@B_android#widget#NumberPicker#OnValueChangeListener_E@", "NumberPicker.OnValueChangeListener: The listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener to be notified on change of the current value.", "history": "Added in API level 11", "FullName": "public void setOnValueChangedListener (NumberPicker.OnValueChangeListener onValueChangedListener)"}, "dispatchTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass the touch screen motion event down to the target view, or this view if it is the target.", "history": "Added in API level 11", "FullName": "public boolean dispatchTouchEvent (MotionEvent event)"}, "getMinValue()": {"Returns": [["int", "The min value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the min value of the picker.", "history": "Added in API level 11", "FullName": "public int getMinValue ()"}, "getMaxValue()": {"Returns": [["int", "The max value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the max value of the picker.", "history": "Added in API level 11", "FullName": "public int getMaxValue ()"}, "NumberPicker(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The application environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: A collection of attributes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new number picker.", "history": "Added in API level 11", "FullName": "public NumberPicker (Context context, AttributeSet attrs)"}, "setValue(int)": {"Returns": [], "Parameters": [["int", "int: The current value."]], "Throws": [], "SeeAlso": ["@B_android#widget#NumberPicker#setWrapSelectorWheel_E@", "@B_android#widget#NumberPicker#setMinValue_E@", "@B_android#widget#NumberPicker#setMaxValue_E@"], "Permissions": [], "Description": "Set the current value for the number picker. If the argument is less than the @B_android#widget#NumberPicker#getMinValue_E@ and @B_android#widget#NumberPicker#getWrapSelectorWheel_E@ is false the current value is set to the @B_android#widget#NumberPicker#getMinValue_E@ value. If the argument is less than the @B_android#widget#NumberPicker#getMinValue_E@ and @B_android#widget#NumberPicker#getWrapSelectorWheel_E@ is true the current value is set to the @B_android#widget#NumberPicker#getMaxValue_E@ value. If the argument is more than the @B_android#widget#NumberPicker#getMaxValue_E@ and @B_android#widget#NumberPicker#getWrapSelectorWheel_E@ is false the current value is set to the @B_android#widget#NumberPicker#getMaxValue_E@ value. If the argument is more than the @B_android#widget#NumberPicker#getMaxValue_E@ and @B_android#widget#NumberPicker#getWrapSelectorWheel_E@ is true the current value is set to the @B_android#widget#NumberPicker#getMinValue_E@ value.", "history": "Added in API level 11", "FullName": "public void setValue (int value)"}, "computeVerticalScrollRange()": {"Returns": [["int", "the total vertical range represented by the vertical scrollbar The default range is the drawing height of this view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical range that the vertical scrollbar represents. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollExtent_E@ and @B_android#view#View#computeVerticalScrollOffset_E@.", "history": "Added in API level 11", "FullName": "protected int computeVerticalScrollRange ()"}, "drawableStateChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called whenever the state of the view changes in such a way that it impacts the state of drawables being shown. If the View has a StateListAnimator, it will also be called to run necessary state change animations. Be sure to call through to the superclass when overriding this function. If you override this method you must call through to the superclass implementation. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void drawableStateChanged ()"}, "setTextColor(int)": {"Returns": [], "Parameters": [["int", "int: A color value in the form 0xAARRGGBB."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text color for all the states (normal, selected, focused) to be the given color.", "history": "Added in API level 29", "FullName": "public void setTextColor (int color)"}, "getTopFadingEdgeStrength()": {"Returns": [["float", "the intensity of the top fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the top faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 11", "FullName": "protected float getTopFadingEdgeStrength ()"}, "setOnLongPressUpdateInterval(long)": {"Returns": [], "Parameters": [["long", "long: The speed (in milliseconds) at which the numbers will be incremented and decremented."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the speed at which the numbers be incremented and decremented when the up and down buttons are long pressed respectively. The default value is 300 ms.", "history": "Added in API level 11", "FullName": "public void setOnLongPressUpdateInterval (long intervalMillis)"}, "setMaxValue(int)": {"Returns": [], "Parameters": [["int", "int: The max value inclusive. Note: The length of the displayed values array set via @B_android#widget#NumberPicker#setDisplayedValues_E@ must be equal to the range of selectable numbers which is equal to @B_android#widget#NumberPicker#getMaxValue_E@ - @B_android#widget#NumberPicker#getMinValue_E@ + 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the max value of the picker.", "history": "Added in API level 11", "FullName": "public void setMaxValue (int maxValue)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to handle touch screen motion events. If this method is used to detect click actions, it is recommended that the actions be performed by implementing and calling @B_android#view#View#performClick_E@. This will ensure consistent system behavior, including: obeying click sound preferences dispatching OnClickListener calls handling @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ when accessibility features are enabled", "history": "Added in API level 11", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "getTextColor()": {"Returns": [["int", "the text color."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public int getTextColor ()"}, "getSelectionDividerHeight()": {"Returns": [["int", "The height of the divider This units of this value are pixels. {}"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the height for the divider that separates the currently selected value from the others. This units of this value are pixels.", "history": "Added in API level 29", "FullName": "public int getSelectionDividerHeight ()"}, "scrollBy(int,int)": {"Returns": [], "Parameters": [["int", "int: the amount of pixels to scroll by horizontally"], ["int", "int: the amount of pixels to scroll by vertically"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the scrolled position of your view. This will cause a call to @B_android#view#View#onScrollChanged_E@ and the view will be invalidated.", "history": "Added in API level 11", "FullName": "public void scrollBy (int x, int y)"}, "setWrapSelectorWheel(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to wrap."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the selector wheel shown during flinging/scrolling should wrap around the @B_android#widget#NumberPicker#getMinValue_E@ and @B_android#widget#NumberPicker#getMaxValue_E@ values. By default if the range (max - min) is more than the number of items shown on the selector wheel the selector wheel wrapping is enabled. @B_android#widget#NumberPicker#getMaxValue_E@ - @B_android#widget#NumberPicker#getMinValue_E@) is less than the number of items shown on the selector wheel, the selector wheel will not wrap. Hence, in such a case calling this method is a NOP.", "history": "Added in API level 11", "FullName": "public void setWrapSelectorWheel (boolean wrapSelectorWheel)"}, "getSolidColor()": {"Returns": [["int", "The known solid color background for this view, or 0 if the color may vary"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this if your view is known to always be drawn on top of a solid color background, and needs to draw fading edges. Returning a non-zero color enables the view system to optimize the drawing of the fading edges. If you do return a non-zero color, the alpha should be set to 0xFF.", "history": "Added in API level 11", "FullName": "public int getSolidColor ()"}, "jumpDrawablesToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#graphics#drawable#Drawable#jumpToCurrentState_E@ on all Drawable objects associated with this view. Also calls @B_android#animation#StateListAnimator#jumpToCurrentState_E@ if there is a StateListAnimator attached to this view. If you override this method you must call through to the superclass implementation. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "public void jumpDrawablesToCurrentState ()"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 11", "FullName": "public void setEnabled (boolean enabled)"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "Since: API Level 11", "FullName": "public void draw (Canvas canvas)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "dispatchKeyEvent(android.view.KeyEvent)": {"Returns": [["boolean", "True if the event was handled, false otherwise."]], "Parameters": [["@B_android#view#KeyEvent_E@", "KeyEvent: The key event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a key event to the next view on the focus path. This path runs from the top of the view tree down to the currently focused view. If this view has focus, it will dispatch to itself. Otherwise it will dispatch the next node down the focus path. This method also fires any key listeners.", "history": "Added in API level 11", "FullName": "public boolean dispatchKeyEvent (KeyEvent event)"}, "dispatchHoverEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a hover event. Do not call this method directly. Call @B_android#view#View#dispatchGenericMotionEvent_E@ instead.", "history": "Added in API level 14", "FullName": "protected boolean dispatchHoverEvent (MotionEvent event)"}, "NumberPicker(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: a collection of attributes."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new number picker", "history": "Added in API level 11", "FullName": "public NumberPicker (Context context, AttributeSet attrs, int defStyleAttr)"}, "computeVerticalScrollOffset()": {"Returns": [["int", "the vertical offset of the scrollbar's thumb"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compute the vertical offset of the vertical scrollbar's thumb within the horizontal range. This value is used to compute the position of the thumb within the scrollbar's track. The range is expressed in arbitrary units that must be the same as the units used by @B_android#view#View#computeVerticalScrollRange_E@ and @B_android#view#View#computeVerticalScrollExtent_E@. The default offset is the scroll offset of this view.", "history": "Added in API level 11", "FullName": "protected int computeVerticalScrollOffset ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 11", "FullName": "protected void onLayout (boolean changed, int left, int top, int right, int bottom)"}, "getWrapSelectorWheel()": {"Returns": [["boolean", "True if the selector wheel wraps."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#NumberPicker#getMinValue_E@", "@B_android#widget#NumberPicker#getMaxValue_E@"], "Permissions": [], "Description": "Gets whether the selector wheel wraps when reaching the min/max value.", "history": "Added in API level 11", "FullName": "public boolean getWrapSelectorWheel ()"}, "setFormatter(android.widget.NumberPicker.Formatter)": {"Returns": [], "Parameters": [["@B_android#widget#NumberPicker#Formatter_E@", "NumberPicker.Formatter: The formatter object. If formatter is null, @B_java#lang#String#valueOf_E@ will be used."]], "Throws": [], "SeeAlso": ["@B_android#widget#NumberPicker#setDisplayedValues_E@"], "Permissions": [], "Description": "Set the formatter to be used for formatting the current value. Note: If you have provided alternative values for the values this formatter is never invoked.", "history": "Added in API level 11", "FullName": "public void setFormatter (NumberPicker.Formatter formatter)"}, "getValue()": {"Returns": [["int", "The value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the picker.", "history": "Added in API level 11", "FullName": "public int getValue ()"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 11", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getDisplayedValues()": {"Returns": [["@B_java#lang#String_E@", "The displayed values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the values to be displayed instead of string values.", "history": "Added in API level 11", "FullName": "public String[] getDisplayedValues ()"}, "dispatchDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "the canvas on which to draw the view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by draw to draw the child views. This may be overridden by derived classes to gain control just before its children are drawn (but after its own view has been drawn).", "history": "Since: API Level 11", "FullName": "protected void dispatchDraw (Canvas canvas)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 11", "FullName": "protected void onDetachedFromWindow ()"}, "dispatchTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "True if the event was handled by the view, false otherwise."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event to be dispatched."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pass a trackball motion event down to the focused view.", "history": "Added in API level 11", "FullName": "public boolean dispatchTrackballEvent (MotionEvent event)"}, "NumberPicker(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment."], ["@B_android#util#AttributeSet_E@", "AttributeSet: a collection of attributes."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new number picker", "history": "Added in API level 21", "FullName": "public NumberPicker (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getTextSize()": {"Returns": [["float", "the size (in pixels) of the text size in this NumberPicker. Value is 0.0 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 29", "FullName": "public float getTextSize ()"}, "setTextSize(float)": {"Returns": [], "Parameters": [["float", "float: The size in pixel units. Value is 0.0 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text size to the given value. This value must be > 0", "history": "Added in API level 29", "FullName": "public void setTextSize (float size)"}, "sendAccessibilityEvent(int)": {"Returns": [], "Parameters": [["int", "The type of the event to send, as defined by several types from @B_android#view#accessibility#AccessibilityEvent_E@, such as @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_CLICKED_E@ or @B_android#view#accessibility#AccessibilityEvent#TYPE_VIEW_HOVER_ENTER_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends an accessibility event of the given type. If accessiiblity is not enabled this method has no effect. The default implementation calls @B_android#view#View#onInitializeAccessibilityEvent_E@ first to populate information about the event source (this View), then calls @B_android#view#View#dispatchPopulateAccessibilityEvent_E@ to populate the text content of the event source including its descendants, and last calls @B_android#view#ViewParent#requestSendAccessibilityEvent_E@ on its parent to resuest sending of the event to interested parties. If an @B_android#view#View#AccessibilityDelegate_E@ has been specified via calling @B_android#view#View#setAccessibilityDelegate_E@ its @B_android#view#View#AccessibilityDelegate#sendAccessibilityEvent_E@ is responsible for handling this call.", "history": "Since: API Level 11", "FullName": "public void sendAccessibilityEvent (int eventType)"}, "performLongClick()": {"Returns": [["boolean", "true if one of the above receivers consumed the event, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls this view's OnLongClickListener, if it is defined. Invokes the context menu if the OnLongClickListener did not consume the event.", "history": "Added in API level 11", "FullName": "public boolean performLongClick ()"}, "setMinValue(int)": {"Returns": [], "Parameters": [["int", "int: The min value inclusive. Note: The length of the displayed values array set via @B_android#widget#NumberPicker#setDisplayedValues_E@ must be equal to the range of selectable numbers which is equal to @B_android#widget#NumberPicker#getMaxValue_E@ - @B_android#widget#NumberPicker#getMinValue_E@ + 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the min value of the picker.", "history": "Added in API level 11", "FullName": "public void setMinValue (int minValue)"}, "setDisplayedValues(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The displayed values. Note: The length of the displayed values array must be equal to the range of selectable numbers which is equal to @B_android#widget#NumberPicker#getMaxValue_E@ - @B_android#widget#NumberPicker#getMinValue_E@ + 1."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the values to be displayed.", "history": "Added in API level 11", "FullName": "public void setDisplayedValues (String[] displayedValues)"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "Since: API Level 11", "FullName": "protected void onAttachedToWindow ()"}, "setOnScrollListener(android.widget.NumberPicker.OnScrollListener)": {"Returns": [], "Parameters": [["@B_android#widget#NumberPicker#OnScrollListener_E@", "NumberPicker.OnScrollListener: The listener."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set listener to be notified for scroll state changes.", "history": "Added in API level 11", "FullName": "public void setOnScrollListener (NumberPicker.OnScrollListener onScrollListener)"}, "getBottomFadingEdgeStrength()": {"Returns": [["float", "the intensity of the bottom fade as a float between 0.0f and 1.0f"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the strength, or intensity, of the bottom faded edge. The strength is a value between 0.0 (no fade) and 1.0 (full fade). The default implementation returns 0.0 or 1.0 but no value in between. Subclasses should override this method to provide a smoother fade transition when scrolling occurs.", "history": "Added in API level 11", "FullName": "protected float getBottomFadingEdgeStrength ()"}, "onInterceptTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "Return true to steal motion events from the children and have them dispatched to this ViewGroup through onTouchEvent(). The current target will receive an ACTION_CANCEL event, and no further messages will be delivered here."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being dispatched down the hierarchy."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this method to intercept all touch screen motion events. This allows you to watch events as they are dispatched to your children, and take ownership of the current gesture at any point. Using this function takes some care, as it has a fairly complicated interaction with @B_android#view#View#onTouchEvent_E@, and using it requires implementing that method as well as this one in the correct way. Events will be received in the following order:", "history": "Added in API level 11", "FullName": "public boolean onInterceptTouchEvent (MotionEvent event)"}, "setSelectionDividerHeight(int)": {"Returns": [], "Parameters": [["int", "int: The height to be set Value is 0 or greater This units of this value are pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the height for the divider that separates the currently selected value from the others.", "history": "Added in API level 29", "FullName": "public void setSelectionDividerHeight (int height)"}, "onDraw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: the canvas on which the background will be drawn"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to do your drawing.", "history": "Added in API level 11", "FullName": "protected void onDraw (Canvas canvas)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.NumberPicker", "ClassDesc": "A widget that enables the user to select a number from a predefined range. There are two flavors of this widget and which one is presented to the user depends on the current theme. If the current theme is derived from @B_android#R#style#Theme_E@ the widget presents the current value as an editable input field with an increment button above and a decrement button below. Long pressing the buttons allows for a quick change of the current value. Tapping on the input field allows to type in a desired value. If the current theme is derived from @B_android#R#style#Theme_Holo_E@ or @B_android#R#style#Theme_Holo_Light_E@ the widget presents the current value as an editable input field with a lesser value above and a greater value below. Tapping on the lesser or greater value selects it by animating the number axis up or down to make the chosen value current. Flinging up or down allows for multiple increments or decrements of the current value. Long pressing on the lesser and greater values also allows for a quick change of the current value. Tapping on the current value allows to type in a desired value. If the current theme is derived from @B_android#R#style#Theme_Material_E@ the widget presents the current value as a scrolling vertical selector with the selected value in the center and the previous and following numbers above and below, separated by a divider. The value is changed by flinging vertically. The thickness of the divider can be changed by using the @B_android#R#attr#selectionDividerHeight_E@ attribute and the color of the divider can be changed by using the @B_android#R#attr#colorControlNormal_E@ attribute. For an example of using this widget, see @B_android#widget#TimePicker_E@."}