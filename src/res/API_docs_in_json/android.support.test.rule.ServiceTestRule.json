{"Functions": {"withTimeout(long, java.util.concurrent.TimeUnit)": {"Returns": [["@B_android#support#test#rule#ServiceTestRule_E@", "a @B_android#support#test#rule#ServiceTestRule_E@ with the desired timeout"]], "Parameters": [["long", "long: the amount of time to wait for a service to connect."], ["TimeUnit", "TimeUnit: the time unit representing how the timeout parameter should be interpreted"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Factory method to create a @B_android#support#test#rule#ServiceTestRule_E@ with a custom timeout", "history": "", "FullName": "ServiceTestRule withTimeout (long timeout, TimeUnit timeUnit)"}, "afterService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this method to do your own service specific clean up after the service is shutdown. The method is called after each test method is executed including any method annotated with", "history": "", "FullName": "void afterService ()"}, "beforeService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this method to do your own service specific initialization before starting or binding to the service. The method is called before each test method is executed including any method annotated with", "history": "", "FullName": "void beforeService ()"}, "startService(android.content.Intent)": {"Returns": [], "Parameters": [["Intent", "Intent: An Intent that identifies a service, of the same form as the Intent passed to @B_android#content#Context#startService_E@."]], "Throws": [["SecurityException", "if you do not have permission to bind to the given service."], ["TimeoutException", "if timed out waiting for a successful connection with the service."]], "SeeAlso": [], "Permissions": [], "Description": "Starts the service under test and blocks until the service is connected, in the same way as if it were started by @B_android#content#Context#startService_E@ with an @B_android#content#Intent_E@ that identifies a service. If you use this method to start the service, it is automatically stopped at the end of the test run. However, it also binds to the service and waits for @B_android#content#ServiceConnection#onServiceConnected_E@ to be called to ensure successful connection.", "history": "", "FullName": "void startService (Intent intent)"}, "ServiceTestRule()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#support#test#rule#ServiceTestRule_E@ with a default timeout of 5 seconds", "history": "", "FullName": "ServiceTestRule ()"}, "bindService(android.content.Intent)": {"Returns": [["IBinder", "no returns description in source"]], "Parameters": [["Intent", "Intent no parameter comment"]], "Throws": [["TimeoutException", ""]], "SeeAlso": ["@B_android#support#test#rule#ServiceTestRule#bindService_E@"], "Permissions": [], "Description": "Works just like @B_android#support#test#rule#ServiceTestRule#bindService_E@ except uses an internal @B_android#content#ServiceConnection_E@ to guarantee successful bound. The operation option flag defaults to @B_android#content#Context#BIND_AUTO_CREATE_E@", "history": "", "FullName": "IBinder bindService (Intent intent)"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.rule.ServiceTestRule", "ClassDesc": "A JUnit rule that provides a simplified mechanism to start and shutdown your service before and after the duration of your test. It also guarantees that the service is successfully connected when starting (or binding to) a service. The service can be started (or bound) using one of the helper methods. It will automatically be stopped (or unbound) after the test completes and any methods annotated with Note: This rule doesn't support https:##developer#android#com@B_android#app#IntentService_E@ because it's automatically destroyed when https:##developer#android#com@B_android#app#IntentService#onHandleIntent_E@ finishes all outstanding commands. So there is no guarantee to establish a successful connection in a timely manner. Usage:"}