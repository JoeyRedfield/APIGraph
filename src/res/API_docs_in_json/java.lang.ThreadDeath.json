{"Functions": {"ThreadDeath()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "public class ThreadDeath @B_java#lang#Error_E@ An instance of ThreadDeath is thrown in the victim thread when the (deprecated) @B_java#lang#Thread#stop_E@ method is invoked. An application should catch instances of this class only if it must clean up after being terminated asynchronously. If ThreadDeath is caught by a method, it is important that it be rethrown so that the thread actually dies. The ThreadDeath is never caught. The class ThreadDeath is specifically a subclass of Error rather than Exception, even though it is a \"normal occurrence\", because many applications catch all occurrences of Exception and then discard the exception.", "history": "", "FullName": "public ThreadDeath ()"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Error_E@"], "ClassName": "java.lang.ThreadDeath", "ClassDesc": "An instance of ThreadDeath is thrown in the victim thread when the (deprecated) @B_java#lang#Thread#stop_E@ method is invoked. An application should catch instances of this class only if it must clean up after being terminated asynchronously. If ThreadDeath is caught by a method, it is important that it be rethrown so that the thread actually dies. The ThreadDeath is never caught. The class ThreadDeath is specifically a subclass of Error rather than Exception, even though it is a \"normal occurrence\", because many applications catch all occurrences of Exception and then discard the exception."}