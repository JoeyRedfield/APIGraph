{"Functions": {"hasCarrierFrequencyHz()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if @B_android#location#GnssMeasurement#getCarrierFrequencyHz_E@ is available, false otherwise.", "history": "Added in API level 24", "FullName": "public boolean hasCarrierFrequencyHz ()"}, "getReceivedSvTimeUncertaintyNanos()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the error estimate (1-sigma) for the received GNSS time, in nanoseconds.", "history": "Added in API level 24", "FullName": "public long getReceivedSvTimeUncertaintyNanos ()"}, "getMultipathIndicator()": {"Returns": [["int", "Value is @B_android#location#GnssMeasurement#MULTIPATH_INDICATOR_UNKNOWN_E@, @B_android#location#GnssMeasurement#MULTIPATH_INDICATOR_DETECTED_E@, or @B_android#location#GnssMeasurement#MULTIPATH_INDICATOR_NOT_DETECTED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a value indicating the 'multipath' state of the event.", "history": "Added in API level 24", "FullName": "public int getMultipathIndicator ()"}, "getSnrInDb()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the (post-correlation & integration) Signal-to-Noise ratio (SNR) in dB. The value is only available if @B_android#location#GnssMeasurement#hasSnrInDb_E@ is true.", "history": "Added in API level 24", "FullName": "public double getSnrInDb ()"}, "hasAutomaticGainControlLevelDb()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if @B_android#location#GnssMeasurement#getAutomaticGainControlLevelDb_E@ is available, false otherwise.", "history": "Added in API level 26", "FullName": "public boolean hasAutomaticGainControlLevelDb ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 24", "FullName": "public int describeContents ()"}, "hasCarrierPhase()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeState_E@ instead. Returns true if @B_android#location#GnssMeasurement#getCarrierPhase_E@ is available, false otherwise.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public boolean hasCarrierPhase ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 24", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getCn0DbHz()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Carrier-to-noise density in dB-Hz. Typical range: 10-50 db-Hz. The value contains the measured C/N0 for the signal at the antenna input.", "history": "Added in API level 24", "FullName": "public double getCn0DbHz ()"}, "hasCodeType()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if @B_android#location#GnssMeasurement#getCodeType_E@ is available, false otherwise.", "history": "Added in API level 29", "FullName": "public boolean hasCodeType ()"}, "getAccumulatedDeltaRangeUncertaintyMeters()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the accumulated delta range's uncertainty (1-Sigma) in meters. The uncertainty is represented as an absolute (single sided) value. The status of the value is represented by @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeState_E@.", "history": "Added in API level 24", "FullName": "public double getAccumulatedDeltaRangeUncertaintyMeters ()"}, "getCarrierPhase()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeMeters_E@ instead. Gets the RF phase detected by the receiver. Range: [0.0, 1.0]. This is the fractional part of the complete carrier phase measurement. The reference frequency is given by the value of @B_android#location#GnssMeasurement#getCarrierFrequencyHz_E@. The error estimate for this value is @B_android#location#GnssMeasurement#getCarrierPhaseUncertainty_E@. The value is only available if @B_android#location#GnssMeasurement#hasCarrierPhase_E@ is true.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public double getCarrierPhase ()"}, "hasCarrierCycles()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeState_E@ instead. Returns true if @B_android#location#GnssMeasurement#getCarrierCycles_E@ is available, false otherwise.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public boolean hasCarrierCycles ()"}, "getTimeOffsetNanos()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time offset at which the measurement was taken in nanoseconds. The reference receiver's time from which this is offset is specified by @B_android#location#GnssClock#getTimeNanos_E@. The sign of this value is given by the following equation: The value provides an individual time-stamp for the measurement, and allows sub-nanosecond accuracy.", "history": "Added in API level 24", "FullName": "public double getTimeOffsetNanos ()"}, "getSvid()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the satellite ID. Interpretation depends on @B_android#location#GnssMeasurement#getConstellationType_E@. See @B_android#location#GnssStatus#getSvid_E@.", "history": "Added in API level 24", "FullName": "public int getSvid ()"}, "getState()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#location#GnssMeasurement#STATE_CODE_LOCK_E@, @B_android#location#GnssMeasurement#STATE_BIT_SYNC_E@, @B_android#location#GnssMeasurement#STATE_SUBFRAME_SYNC_E@, @B_android#location#GnssMeasurement#STATE_TOW_DECODED_E@, @B_android#location#GnssMeasurement#STATE_MSEC_AMBIGUOUS_E@, @B_android#location#GnssMeasurement#STATE_SYMBOL_SYNC_E@, @B_android#location#GnssMeasurement#STATE_GLO_STRING_SYNC_E@, @B_android#location#GnssMeasurement#STATE_GLO_TOD_DECODED_E@, @B_android#location#GnssMeasurement#STATE_BDS_D2_BIT_SYNC_E@, @B_android#location#GnssMeasurement#STATE_BDS_D2_SUBFRAME_SYNC_E@, @B_android#location#GnssMeasurement#STATE_GAL_E1BC_CODE_LOCK_E@, @B_android#location#GnssMeasurement#STATE_GAL_E1C_2ND_CODE_LOCK_E@, @B_android#location#GnssMeasurement#STATE_GAL_E1B_PAGE_SYNC_E@, @B_android#location#GnssMeasurement#STATE_SBAS_SYNC_E@, @B_android#location#GnssMeasurement#STATE_TOW_KNOWN_E@, @B_android#location#GnssMeasurement#STATE_GLO_TOD_KNOWN_E@, and @B_android#location#GnssMeasurement#STATE_2ND_CODE_LOCK_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets per-satellite sync state. It represents the current sync state for the associated satellite. This value helps interpret @B_android#location#GnssMeasurement#getReceivedSvTimeNanos_E@.", "history": "Added in API level 24", "FullName": "public int getState ()"}, "getAccumulatedDeltaRangeState()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#location#GnssMeasurement#ADR_STATE_VALID_E@, @B_android#location#GnssMeasurement#ADR_STATE_RESET_E@, @B_android#location#GnssMeasurement#ADR_STATE_CYCLE_SLIP_E@, @B_android#location#GnssMeasurement#ADR_STATE_HALF_CYCLE_RESOLVED_E@, and @B_android#location#GnssMeasurement#ADR_STATE_HALF_CYCLE_REPORTED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets 'Accumulated Delta Range' state. It indicates whether @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeMeters_E@ is reset or there is a cycle slip (indicating 'loss of lock').", "history": "Added in API level 24", "FullName": "public int getAccumulatedDeltaRangeState ()"}, "hasSnrInDb()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if @B_android#location#GnssMeasurement#getSnrInDb_E@ is available, false otherwise.", "history": "Added in API level 24", "FullName": "public boolean hasSnrInDb ()"}, "getPseudorangeRateUncertaintyMetersPerSecond()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the pseudorange's rate uncertainty (1-Sigma) in m/s. The uncertainty is represented as an absolute (single sided) value.", "history": "Added in API level 24", "FullName": "public double getPseudorangeRateUncertaintyMetersPerSecond ()"}, "getPseudorangeRateMetersPerSecond()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Pseudorange rate at the timestamp in m/s. The error estimate for this value is @B_android#location#GnssMeasurement#getPseudorangeRateUncertaintyMetersPerSecond_E@. The value is uncorrected, i.e. corrections for receiver and satellite clock frequency errors are not included. A positive 'uncorrected' value indicates that the SV is moving away from the receiver. The sign of the 'uncorrected' 'pseudorange rate' and its relation to the sign of 'doppler shift' is given by the equation:", "history": "Added in API level 24", "FullName": "public double getPseudorangeRateMetersPerSecond ()"}, "getCarrierCycles()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeMeters_E@ instead. The number of full carrier cycles between the satellite and the receiver. The reference frequency is given by the value of @B_android#location#GnssMeasurement#getCarrierFrequencyHz_E@. The value is only available if @B_android#location#GnssMeasurement#hasCarrierCycles_E@ is true.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public long getCarrierCycles ()"}, "hasCarrierPhaseUncertainty()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeState_E@ instead. Returns true if @B_android#location#GnssMeasurement#getCarrierPhaseUncertainty_E@ is available, false otherwise.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public boolean hasCarrierPhaseUncertainty ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "getConstellationType()": {"Returns": [["int", "Value is @B_android#location#GnssStatus#CONSTELLATION_UNKNOWN_E@, @B_android#location#GnssStatus#CONSTELLATION_GPS_E@, @B_android#location#GnssStatus#CONSTELLATION_SBAS_E@, @B_android#location#GnssStatus#CONSTELLATION_GLONASS_E@, @B_android#location#GnssStatus#CONSTELLATION_QZSS_E@, @B_android#location#GnssStatus#CONSTELLATION_BEIDOU_E@, @B_android#location#GnssStatus#CONSTELLATION_GALILEO_E@, or @B_android#location#GnssStatus#CONSTELLATION_IRNSS_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the constellation type. The return value is one of those constants with CONSTELLATION_ prefix in @B_android#location#GnssStatus_E@.", "history": "Added in API level 24", "FullName": "public int getConstellationType ()"}, "getReceivedSvTimeNanos()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the received GNSS satellite time, at the measurement time, in nanoseconds. The received satellite time is relative to the beginning of the system week for all constellations except for Glonass where it is relative to the beginning of the Glonass system day. The table below indicates the valid range of the received GNSS satellite time. These ranges depend on the constellation and code being tracked and the state of the tracking algorithms given by the @B_android#location#GnssMeasurement#getState_E@ method. The minimum value of this field is zero. The maximum value of this field is determined by looking across all of the state flags that are set, for the given constellation and code type, and finding the the maximum value in this table. For example, for GPS L1 C/A, if STATE_TOW_KNOWN is set, this field can be any value from 0 to 1 week (in nanoseconds), and for GAL E1B code, if only STATE_GAL_E1BC_CODE_LOCK is set, then this field can be any value from 0 to 4 milliseconds (in nanoseconds.) Note: TOW Known refers to the case where TOW is possibly not decoded over the air but has been determined from other sources. If TOW decoded is set then TOW Known must also be set. Note well: if there is any ambiguity in integer millisecond, STATE_MSEC_AMBIGUOUS must be set accordingly, in the 'state' field. This value must be populated, unless the 'state' == STATE_UNKNOWN. Note on optional flags: For L1 C/A and B1I, STATE_SYMBOL_SYNC is optional since the symbol length is the same as the bit length. For L5Q and E5aQ, STATE_BIT_SYNC and STATE_SYMBOL_SYNC are optional since they are implied by STATE_CODE_LOCK. STATE_2ND_CODE_LOCK for L5I is optional since it is implied by STATE_SYMBOL_SYNC. STATE_2ND_CODE_LOCK for E1C is optional since it is implied by STATE_GAL_E1C_2ND_CODE_LOCK. For E1B and E1C, STATE_SYMBOL_SYNC is optional, because it is implied by STATE_GAL_E1BC_CODE_LOCK.", "history": "Added in API level 24", "FullName": "public long getReceivedSvTimeNanos ()"}, "getCarrierFrequencyHz()": {"Returns": [["float", "the carrier frequency of the signal tracked in Hz."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the carrier frequency of the tracked signal. For example it can be the GPS central frequency for L1 = 1575.45 MHz, or L2 = 1227.60 MHz, L5 = 1176.45 MHz, varying GLO channels, etc. If the field is not set, it is the primary common use central frequency, e.g. L1 = 1575.45 MHz for GPS. For an L1, L5 receiver tracking a satellite on L1 and L5 at the same time, two raw measurement objects will be reported for this same satellite, in one of the measurement objects, all the values related to L1 will be filled, and in the other all of the values related to L5 will be filled. The value is only available if @B_android#location#GnssMeasurement#hasCarrierFrequencyHz_E@ is true.", "history": "Added in API level 24", "FullName": "public float getCarrierFrequencyHz ()"}, "getAutomaticGainControlLevelDb()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the Automatic Gain Control level in dB. AGC acts as a variable gain amplifier adjusting the power of the incoming signal. The AGC level may be used to indicate potential interference. When AGC is at a nominal level, this value must be set as 0. Higher gain (and/or lower input power) shall be output as a positive number. Hence in cases of strong jamming, in the band of this signal, this value will go more negative. Note: Different hardware designs (e.g. antenna, pre-amplification, or other RF HW components) may also affect the typical output of of this value on any given hardware design in an open sky test - the important aspect of this output is that changes in this value are indicative of changes on input signal power in the frequency band for this measurement. The value is only available if @B_android#location#GnssMeasurement#hasAutomaticGainControlLevelDb_E@ is true", "history": "Added in API level 26", "FullName": "public double getAutomaticGainControlLevelDb ()"}, "getAccumulatedDeltaRangeMeters()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the accumulated delta range since the last channel reset, in meters. The error estimate for this value is @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeUncertaintyMeters_E@. The availability of the value is represented by @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeState_E@. A positive value indicates that the SV is moving away from the receiver. The sign of @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeMeters_E@ and its relation to the sign of @B_android#location#GnssMeasurement#getCarrierPhase_E@ is given by the equation: Similar to the concept of an RTCM \"Phaserange\", when the accumulated delta range is initially chosen, and whenever it is reset, it will retain the integer nature of the relative carrier phase offset between satellites observed by this receiver, such that the double difference of this value between receivers and satellites may be used, together with integer ambiguity resolution, to determine highly precise relative location between receivers. This includes ensuring that all half-cycle ambiguities are resolved before this value is reported as @B_android#location#GnssMeasurement#ADR_STATE_VALID_E@. The alignment of the phase measurement will not be adjusted by the receiver so the in-phase and quadrature phase components will have a quarter cycle offset as they do when transmitted from the satellites. If the measurement is from a combination of the in-phase and quadrature phase components, then the alignment of the phase measurement will be aligned to the in-phase component.", "history": "Added in API level 24", "FullName": "public double getAccumulatedDeltaRangeMeters ()"}, "getCodeType()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the GNSS measurement's code type. Similar to the Attribute field described in RINEX 3.03, e.g., in Tables 4-10, and Table A2 at the RINEX 3.03 Update 1 Document. Returns \"A\" for GALILEO E1A, GALILEO E6A, IRNSS L5A, IRNSS SA. Returns \"B\" for GALILEO E1B, GALILEO E6B, IRNSS L5B, IRNSS SB. Returns \"C\" for GPS L1 C/A, GPS L2 C/A, GLONASS G1 C/A, GLONASS G2 C/A, GALILEO E1C, GALILEO E6C, SBAS L1 C/A, QZSS L1 C/A, IRNSS L5C. Returns \"I\" for GPS L5 I, GLONASS G3 I, GALILEO E5a I, GALILEO E5b I, GALILEO E5a+b I, SBAS L5 I, QZSS L5 I, BDS B1 I, BDS B2 I, BDS B3 I. Returns \"L\" for GPS L1C (P), GPS L2C (L), QZSS L1C (P), QZSS L2C (L), LEX(6) L. Returns \"M\" for GPS L1M, GPS L2M. Returns \"N\" for GPS L1 codeless, GPS L2 codeless. Returns \"P\" for GPS L1P, GPS L2P, GLONASS G1P, GLONASS G2P. Returns \"Q\" for GPS L5 Q, GLONASS G3 Q, GALILEO E5a Q, GALILEO E5b Q, GALILEO E5a+b Q, SBAS L5 Q, QZSS L5 Q, BDS B1 Q, BDS B2 Q, BDS B3 Q. Returns \"S\" for GPS L1C (D), GPS L2C (M), QZSS L1C (D), QZSS L2C (M), LEX(6) S. Returns \"W\" for GPS L1 Z-tracking, GPS L2 Z-tracking. Returns \"X\" for GPS L1C (D+P), GPS L2C (M+L), GPS L5 (I+Q), GLONASS G3 (I+Q), GALILEO E1 (B+C), GALILEO E5a (I+Q), GALILEO E5b (I+Q), GALILEO E5a+b(I+Q), GALILEO E6 (B+C), SBAS L5 (I+Q), QZSS L1C (D+P), QZSS L2C (M+L), QZSS L5 (I+Q), LEX(6) (S+L), BDS B1 (I+Q), BDS B2 (I+Q), BDS B3 (I+Q), IRNSS L5 (B+C). Returns \"Y\" for GPS L1Y, GPS L2Y. Returns \"Z\" for GALILEO E1 (A+B+C), GALILEO E6 (A+B+C), QZSS L1-SAIF. Returns \"UNKNOWN\" if the GNSS Measurement's code type is unknown. This is used to specify the observation descriptor defined in GNSS Observation Data File Header Section Description in the RINEX standard (Version 3.XX), in cases where the code type does not align with the above listed values. For example, if a code type \"G\" is added, this string shall be set to \"G\".", "history": "Added in API level 29", "FullName": "public String getCodeType ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 24", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "getCarrierPhaseUncertainty()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#location#GnssMeasurement#getAccumulatedDeltaRangeUncertaintyMeters_E@ instead. Gets the carrier-phase's uncertainty (1-Sigma). The uncertainty is represented as an absolute (single sided) value. The value is only available if @B_android#location#GnssMeasurement#hasCarrierPhaseUncertainty_E@ is true.", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public double getCarrierPhaseUncertainty ()"}}, "Inheritance": [], "ClassName": "android.location.GnssMeasurement", "ClassDesc": "A class representing a GNSS satellite measurement, containing raw and computed information."}