{"Functions": {"add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: element whose presence in this collection is to be ensured"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this deque. As the deque is unbounded, this method will never throw @B_java#lang#IllegalStateException_E@ or return false.", "history": "Added in API level 21", "FullName": "public boolean add (E e)"}, "poll()": {"Returns": [["E", "the first element of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#pollFirst_E@.", "history": "Added in API level 21", "FullName": "public E poll ()"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 21", "FullName": "public boolean removeLastOccurrence (Object o)"}, "addAll(java.util.Collection<? extends E>)": {"Returns": [["boolean", "true if this deque changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this deque"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if the collection is this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator. Attempts to addAll of a deque to itself result in IllegalArgumentException.", "history": "added in API level 21", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the tail of this deque. As the deque is unbounded, this method will never return false.", "history": "Added in API level 21", "FullName": "public boolean offer (E e)"}, "pollLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 21", "FullName": "public E pollLast ()"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in proper sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in proper sequence. The elements will be returned in order from first (head) to last (tail). The returned iterator is", "history": "Added in API level 21", "FullName": "public Iterator<E> iterator ()"}, "offerLast(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerLast_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque. As the deque is unbounded, this method will never return false. This method is equivalent to @B_java#util#concurrent#ConcurrentLinkedDeque#add_E@.", "history": "Added in API level 21", "FullName": "public boolean offerLast (E e)"}, "ConcurrentLinkedDeque(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection of elements to initially contain"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a deque initially containing the elements of the given collection, added in traversal order of the collection's iterator.", "history": "Added in API level 21", "FullName": "public ConcurrentLinkedDeque (Collection<? extends E> c)"}, "getLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque. This method differs from @B_java#util#Deque#peekLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 21", "FullName": "public E getLast ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this deque.", "history": "Added in API level 21", "FullName": "public void clear ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Spliterator_E@ over the elements in this deque. The returned spliterator is The Spliterator reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 21", "FullName": "public boolean removeFirstOccurrence (Object o)"}, "getFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque. This method differs from @B_java#util#Deque#peekFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 21", "FullName": "public E getFirst ()"}, "pollFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 21", "FullName": "public E pollFirst ()"}, "offerFirst(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerFirst_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque. As the deque is unbounded, this method will never return false.", "history": "Added in API level 21", "FullName": "public boolean offerFirst (E e)"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this deque"]], "Parameters": [["T[]", "T: the array into which the elements of the deque are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque, in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the @B_java#util#concurrent#ConcurrentLinkedDeque#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 21", "FullName": "public T[] toArray (T[] a)"}, "size()": {"Returns": [["int", "the number of elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this deque. If this deque contains more than Integer.MAX_VALUE elements, it returns Integer.MAX_VALUE. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these deques, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.", "history": "Added in API level 21", "FullName": "public int size ()"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque. As the deque is unbounded, this method will never throw @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 21", "FullName": "public void addFirst (E e)"}, "removeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque. This method differs from @B_java#util#Deque#pollLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 21", "FullName": "public E removeLast ()"}, "ConcurrentLinkedDeque()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty deque.", "history": "Added in API level 21", "FullName": "public ConcurrentLinkedDeque ()"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque. As the deque is unbounded, this method will never throw @B_java#lang#IllegalStateException_E@. This method is equivalent to @B_java#util#concurrent#ConcurrentLinkedDeque#add_E@.", "history": "Added in API level 21", "FullName": "public void addLast (E e)"}, "peek()": {"Returns": [["E", "the head of the queue represented by this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#Deque#peekFirst_E@.", "history": "Added in API level 21", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if the deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to @B_java#util#concurrent#ConcurrentLinkedDeque#removeFirstOccurrence_E@.", "history": "Added in API level 21", "FullName": "public boolean remove (Object o)"}, "peekLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 21", "FullName": "public E peekLast ()"}, "pop()": {"Returns": [["E", "the element at the front of this deque (which is the top of the stack represented by this deque)"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 21", "FullName": "public E pop ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this collection"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this collection. The string representation consists of a list of the collection's elements in the order they are returned by its iterator, enclosed in square brackets (@B_java#lang#String#valueOf_E@.", "history": "Added in API level 21", "FullName": "public String toString ()"}, "remove()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#Deque#poll_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#removeFirst_E@.", "history": "Added in API level 21", "FullName": "public E remove ()"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this deque (in other words, at the head of this deque) if it is possible to do so immediately without violating capacity restrictions, throwing an IllegalStateException if no space is currently available. This method is equivalent to @B_java#util#Deque#addFirst_E@.", "history": "Added in API level 21", "FullName": "public void push (E e)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this deque contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element whose presence in this deque is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e).", "history": "Added in API level 21", "FullName": "public boolean contains (Object o)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque, in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this deque. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 21", "FullName": "public Object[] toArray ()"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in reverse order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head). The returned iterator is", "history": "Added in API level 21", "FullName": "public Iterator<E> descendingIterator ()"}, "addAll(java.util.Collection<?extendsE>)": {"Returns": [["boolean", "true if this deque changed as a result of the call"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the elements to be inserted into this deque"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection or any of its elements are null"], ["@B_java#lang#IllegalArgumentException_E@", "if the collection is this deque"]], "SeeAlso": [], "Permissions": [], "Description": "Appends all of the elements in the specified collection to the end of this deque, in the order that they are returned by the specified collection's iterator. Attempts to addAll of a deque to itself result in IllegalArgumentException.", "history": "Added in API level 21", "FullName": "public boolean addAll (Collection<? extends E> c)"}, "removeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque. This method differs from @B_java#util#Deque#pollFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 21", "FullName": "public E removeFirst ()"}, "isEmpty()": {"Returns": [["boolean", "true if this collection contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this collection contains no elements.", "history": "Added in API level 21", "FullName": "public boolean isEmpty ()"}, "element()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque (in other words, the first element of this deque). This method differs from @B_java#util#Deque#peek_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#Deque#getFirst_E@.", "history": "Added in API level 21", "FullName": "public E element ()"}, "peekFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 21", "FullName": "public E peekFirst ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@"], "ClassName": "java.util.concurrent.ConcurrentLinkedDeque<E>", "ClassDesc": "An unbounded concurrent ConcurrentLinkedDeque is an appropriate choice when many threads will share access to a common collection. Like most other concurrent collection implementations, this class does not permit the use of null elements. Iterators and spliterators are Beware that, unlike in most collections, the size method is NOT a constant-time operation. Because of the asynchronous nature of these deques, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically. For example, an iterator operating concurrently with an addAll operation might view only some of the added elements. This class and its iterator implement all of the optional methods of the @B_java#util#Deque_E@ and @B_java#util#Iterator_E@ interfaces. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a ConcurrentLinkedDeque ConcurrentLinkedDeque in another thread."}