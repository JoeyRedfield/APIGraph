{"Functions": {"getObject(java.security.Key, java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the original object."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key used to unseal the object."], ["@B_java#lang#String_E@", "String: the name of the provider of the algorithm to unseal the object."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given provider is null or empty."], ["@B_java#io#IOException_E@", "if an error occurs during de-serialiazation."], ["@B_java#lang#ClassNotFoundException_E@", "if an error occurs during de-serialiazation."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm to unseal the object is not available."], ["@B_java#security#NoSuchProviderException_E@", "if the given provider is not configured."], ["@B_java#security#InvalidKeyException_E@", "if the given key cannot be used to unseal the object (e.g., it has the wrong algorithm)."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the original (encapsulated) object. This method creates a cipher for the algorithm that had been used in the sealing operation, using an implementation of that algorithm from the given provider. The Cipher object is initialized for decryption, using the given key and the parameters (if any) that had been used in the sealing operation. The encapsulated object is unsealed and de-serialized, before it is returned.", "history": "added in API level 1", "FullName": "public final Object getObject (Key key, String provider)"}, "SealedObject(javax.crypto.SealedObject)": {"Returns": [], "Parameters": [["@B_javax#crypto#SealedObject_E@", "SealedObject: a SealedObject object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given sealed object is null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SealedObject object from the passed-in SealedObject.", "history": "Added in API level 1", "FullName": "protected SealedObject (SealedObject so)"}, "getObject(java.security.Key,java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the original object."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key used to unseal the object."], ["@B_java#lang#String_E@", "String: the name of the provider of the algorithm to unseal the object."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the given provider is null or empty."], ["@B_java#io#IOException_E@", "if an error occurs during de-serialiazation."], ["@B_java#lang#ClassNotFoundException_E@", "if an error occurs during de-serialiazation."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm to unseal the object is not available."], ["@B_java#security#NoSuchProviderException_E@", "if the given provider is not configured."], ["@B_java#security#InvalidKeyException_E@", "if the given key cannot be used to unseal the object (e.g., it has the wrong algorithm)."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the original (encapsulated) object. This method creates a cipher for the algorithm that had been used in the sealing operation, using an implementation of that algorithm from the given provider. The Cipher object is initialized for decryption, using the given key and the parameters (if any) that had been used in the sealing operation. The encapsulated object is unsealed and de-serialized, before it is returned.", "history": "Added in API level 1", "FullName": "public final Object getObject (Key key, String provider)"}, "getObject(javax.crypto.Cipher)": {"Returns": [["@B_java#lang#Object_E@", "the original object."]], "Parameters": [["@B_javax#crypto#Cipher_E@", "Cipher: the cipher used to unseal the object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given cipher is null."], ["@B_java#io#IOException_E@", "if an error occurs during de-serialiazation"], ["@B_java#lang#ClassNotFoundException_E@", "if an error occurs during de-serialiazation"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if the given cipher is a block cipher, no padding has been requested, and the total input length is not a multiple of the cipher's block size"], ["@B_javax#crypto#BadPaddingException_E@", "if the given cipher has been initialized for decryption, and padding has been specified, but the input data does not have proper expected padding bytes"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the original (encapsulated) object. The encapsulated object is unsealed (using the given Cipher, assuming that the Cipher is already properly initialized) and de-serialized, before it is returned.", "history": "Added in API level 1", "FullName": "public final Object getObject (Cipher c)"}, "SealedObject(java.io.Serializable,javax.crypto.Cipher)": {"Returns": [], "Parameters": [["@B_java#io#Serializable_E@", "Serializable: the object to be sealed; can be null."], ["@B_javax#crypto#Cipher_E@", "Cipher: the cipher used to seal the object."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the given cipher is null."], ["@B_java#io#IOException_E@", "if an error occurs during serialization"], ["@B_javax#crypto#IllegalBlockSizeException_E@", "if the given cipher is a block cipher, no padding has been requested, and the total input length (i.e., the length of the serialized object contents) is not a multiple of the cipher's block size"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a SealedObject from any Serializable object. The given object is serialized, and its serialized contents are encrypted using the given Cipher, which must be fully initialized. Any algorithm parameters that may be used in the encryption operation are stored inside of the new SealedObject.", "history": "Added in API level 1", "FullName": "public SealedObject (Serializable object, Cipher c)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm that was used to seal this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the algorithm that was used to seal this object.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getObject(java.security.Key)": {"Returns": [["@B_java#lang#Object_E@", "the original object."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key used to unseal the object."]], "Throws": [["@B_java#io#IOException_E@", "if an error occurs during de-serialiazation."], ["@B_java#lang#ClassNotFoundException_E@", "if an error occurs during de-serialiazation."], ["@B_java#security#NoSuchAlgorithmException_E@", "if the algorithm to unseal the object is not available."], ["@B_java#security#InvalidKeyException_E@", "if the given key cannot be used to unseal the object (e.g., it has the wrong algorithm)."], ["@B_java#lang#NullPointerException_E@", "if key is null."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the original (encapsulated) object. This method creates a cipher for the algorithm that had been used in the sealing operation. If the default provider package provides an implementation of that algorithm, an instance of Cipher containing that implementation is used. If the algorithm is not available in the default package, other packages are searched. The Cipher object is initialized for decryption, using the given key and the parameters (if any) that had been used in the sealing operation. The encapsulated object is unsealed and de-serialized, before it is returned.", "history": "Added in API level 1", "FullName": "public final Object getObject (Key key)"}}, "Inheritance": [], "ClassName": "javax.crypto.SealedObject", "ClassDesc": "This class enables a programmer to create an object and protect its confidentiality with a cryptographic algorithm. Given any Serializable object, one can create a SealedObject that encapsulates the original object, in serialized format (i.e., a \"deep copy\"), and seals (encrypts) its serialized contents, using a cryptographic algorithm such as DES, to protect its confidentiality. The encrypted content can later be decrypted (with the corresponding algorithm using the correct decryption key) and de-serialized, yielding the original object. Note that the Cipher object must be fully initialized with the correct algorithm, key, padding scheme, etc., before being applied to a SealedObject. The original object that was sealed can be recovered in two different ways: by using the @B_javax#crypto#SealedObject#getObject_E@ method that takes a Cipher object. This method requires a fully initialized Cipher object, initialized with the exact same algorithm, key, padding scheme, etc., that were used to seal the object. This approach has the advantage that the party who unseals the sealed object does not require knowledge of the decryption key. For example, after one party has initialized the cipher object with the required decryption key, it could hand over the cipher object to another party who then unseals the sealed object. by using one of the @B_javax#crypto#SealedObject#getObject_E@ methods that take a Key object. In this approach, the getObject method creates a cipher object for the appropriate decryption algorithm and initializes it with the given decryption key and the algorithm parameters (if any) that were stored in the sealed object. This approach has the advantage that the party who unseals the object does not need to keep track of the parameters (e.g., an IV) that were used to seal the object."}