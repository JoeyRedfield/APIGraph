{"Functions": {"accept(T, double)": {"Returns": [], "Parameters": [["T", "T: the first input argument"], ["double", "double: the second input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given arguments.", "history": "added in API level 24", "FullName": "public abstract void accept (T t, double value)"}, "accept(T,double)": {"Returns": [], "Parameters": [["T", "T: the first input argument"], ["double", "double: the second input argument"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs this operation on the given arguments.", "history": "Added in API level 24", "FullName": "public abstract void accept (T t, double value)"}}, "Inheritance": [], "ClassName": "java.util.function.ObjDoubleConsumer<T>", "ClassDesc": "Represents an operation that accepts an object-valued and a double-valued argument, and returns no result. This is the (reference, double) specialization of @B_java#util#function#BiConsumer_E@. Unlike most other functional interfaces, ObjDoubleConsumer is expected to operate via side-effects. This is a @B_java#util#function#ObjDoubleConsumer#accept_E@."}