{"Functions": {"skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If n is negative."], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips characters. This method will block until some characters are available, an I/O error occurs, or the end of the stream is reached.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "Reader()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character-stream reader whose critical sections will synchronize on the reader itself.", "history": "Added in API level 1", "FullName": "protected Reader ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If the stream has not been marked, or if the mark has been invalidated, or if the stream does not support reset(), or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream. If the stream has been marked, then attempt to reposition it at the mark. If the stream has not been marked, then attempt to reset it in some way appropriate to the particular stream, for example by repositioning it to its starting point. Not all character-input streams support the reset() operation, and some support reset() without supporting mark().", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.", "history": "added in API level 1", "FullName": "public abstract int read (char[] cbuf, int off, int len)"}, "read()": {"Returns": [["int", "The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character. This method will block until a character is available, an I/O error occurs, or the end of the stream is reached. Subclasses that intend to support efficient single-character input should override this method.", "history": "Added in API level 1", "FullName": "public int read ()"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}, "read(java.nio.CharBuffer)": {"Returns": [["int", "The number of characters added to the buffer, or -1 if this source of characters is at its end"]], "Parameters": [["@B_java#nio#CharBuffer_E@", "CharBuffer: the buffer to read characters into"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "if target is null"], ["@B_java#nio#ReadOnlyBufferException_E@", "if target is a read only buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to read characters into the specified character buffer. The buffer is used as a repository of characters as-is: the only changes made are the results of a put operation. No flipping or rewinding of the buffer is performed.", "history": "Added in API level 1", "FullName": "public int read (CharBuffer target)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail."]], "Throws": [["@B_java#io#IOException_E@", "If the stream does not support mark(), or if some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point. Not all character-input streams support the mark() operation.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "read(char[],int,int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.", "history": "Added in API level 1", "FullName": "public abstract int read (char[] cbuf, int off, int len)"}, "read(char[])": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into an array. This method will block until some input is available, an I/O error occurs, or the end of the stream is reached.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf)"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation. The default implementation always returns false. Subclasses should override this method.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "Reader(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The Object to synchronize on."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new character-stream reader whose critical sections will synchronize on the given object.", "history": "Added in API level 1", "FullName": "protected Reader (Object lock)"}}, "Inheritance": [], "ClassName": "java.io.Reader", "ClassDesc": "Abstract class for reading character streams. The only methods that a subclass must implement are read(char[], int, int) and close(). Most subclasses, however, will override some of the methods defined here in order to provide higher efficiency, additional functionality, or both."}