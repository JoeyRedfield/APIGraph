{"Functions": {"setContentView(int)": {"Returns": [], "Parameters": [["int", "Resource ID to be inflated."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the activity content from a layout resource. The resource will be inflated, adding all top-level views to the activity.", "history": "", "FullName": "public void setContentView (int layoutResID)"}, "getSupportActionBar()": {"Returns": [["", "The Activity's ActionBar, or null if it does not have one."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#getActionBar_E@. Retrieve a reference to this activity's ActionBar.", "history": "", "FullName": "public ActionBar getSupportActionBar ()"}, "onSupportContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Activity#onContentChanged_E@"], "Permissions": [], "Description": "This hook is called whenever the content view of the screen changes.", "history": "", "FullName": "public void onSupportContentChanged ()"}, "ActionBarActivity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "ActionBarActivity ()"}, "onContentChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v7#app#ActionBarActivity#onSupportContentChanged_E@ instead.", "history": "", "FullName": "public final void onContentChanged ()"}, "onTitleChanged(java.lang.CharSequence, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "protected void onTitleChanged (CharSequence title, int color)"}, "onCreatePanelMenu(int, android.view.Menu)": {"Returns": [["", "boolean You must return true for the panel to be displayed; if you return false it will not be shown."]], "Parameters": [["int", "The panel being created."], ["@B_android#view#Menu_E@", "The menu inside the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch to Fragment.onCreateOptionsMenu().", "history": "", "FullName": "public boolean onCreatePanelMenu (int featureId, Menu menu)"}, "getDrawerToggleDelegate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public final ActionBarDrawerToggle.Delegate getDrawerToggleDelegate ()"}, "supportNavigateUpTo(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "An intent representing the target destination for up navigation"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Navigate from sourceActivity to the activity specified by upIntent, finishing sourceActivity in the process. upIntent will have the flag @B_android#content#Intent#FLAG_ACTIVITY_CLEAR_TOP_E@ set by this method, along with any others required for proper up navigation as outlined in the Android Design Guide. This method should be used when performing up navigation from within the same task as the destination. If up navigation should cross tasks in some cases, see @B_android#support#v7#app#ActionBarActivity#supportShouldUpRecreateTask_E@.", "history": "", "FullName": "public void supportNavigateUpTo (Intent upIntent)"}, "onBackPressed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take care of popping the fragment back stack or finishing the activity as appropriate.", "history": "", "FullName": "public void onBackPressed ()"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "If the activity is being re-initialized after previously being shut down then this Bundle contains the data it most recently supplied in @B_android#support#v4#app#FragmentActivity#onSaveInstanceState_E@. Note: Otherwise it is null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform initialization of all fragments and loaders.", "history": "", "FullName": "protected void onCreate (Bundle savedInstanceState)"}, "onSupportNavigateUp()": {"Returns": [["", "true if Up navigation completed successfully and this Activity was finished, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called whenever the user chooses to navigate Up within your application's activity hierarchy from the action bar. If a parent was specified in the manifest for this activity or an activity-alias to it, default Up navigation will be handled automatically. See @B_android#support#v7#app#ActionBarActivity#getSupportParentActivityIntent_E@ for how to specify the parent. If any activity along the parent chain requires extra Intent arguments, the Activity subclass should override the method @B_android#support#v7#app#ActionBarActivity#onPrepareSupportNavigateUpTaskStack_E@ to supply those arguments. See See the @B_android#support#v4#app#TaskStackBuilder_E@ class and the Activity methods @B_android#support#v7#app#ActionBarActivity#getSupportParentActivityIntent_E@, @B_android#support#v7#app#ActionBarActivity#supportShouldUpRecreateTask_E@, and @B_android#support#v7#app#ActionBarActivity#supportNavigateUpTo_E@ for help implementing custom Up navigation.", "history": "", "FullName": "public boolean onSupportNavigateUp ()"}, "getV7DrawerToggleDelegate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public ActionBarDrawerToggle.Delegate getV7DrawerToggleDelegate ()"}, "setSupportProgressBarIndeterminate(boolean)": {"Returns": [], "Parameters": [["boolean", "Whether the horizontal progress bar should be indeterminate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#setProgressBarIndeterminate_E@ Sets whether the horizontal progress bar in the title should be indeterminate (the circular is always indeterminate). In order for the progress bar to be shown, the feature must be requested via @B_android#support#v7#app#ActionBarActivity#supportRequestWindowFeature_E@.", "history": "", "FullName": "public void setSupportProgressBarIndeterminate (boolean indeterminate)"}, "getSupportFragmentManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public abstract FragmentManager getSupportFragmentManager ()"}, "onMenuOpened(int, android.view.Menu)": {"Returns": [["", "The default implementation returns true."]], "Parameters": [["int", "The panel that the menu is in."], ["@B_android#view#Menu_E@", "The menu that is opened."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a panel's menu is opened by the user. This may also be called when the menu is changing from one type to another (for example, from the icon menu to the expanded menu).", "history": "", "FullName": "public boolean onMenuOpened (int featureId, Menu menu)"}, "onStop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onStop() to all fragments. Ensure all loaders are stopped.", "history": "", "FullName": "protected void onStop ()"}, "onPanelClosed(int, android.view.Menu)": {"Returns": [], "Parameters": [["int", "The panel that is being displayed."], ["@B_android#view#Menu_E@", "If onCreatePanelView() returned null, this is the Menu being displayed in the panel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call onOptionsMenuClosed() on fragments.", "history": "", "FullName": "public void onPanelClosed (int featureId, Menu menu)"}, "getSupportParentActivityIntent()": {"Returns": [["", "a new Intent targeting the defined parent activity of sourceActivity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain an @B_android#content#Intent_E@ that will launch an explicit target activity specified by sourceActivity's @B_android#support#v4#app#NavUtils#PARENT_ACTIVITY_E@ <meta-data> element in the application's manifest. If the device is running Jellybean or newer, the android:parentActivityName attribute will be preferred if it is present.", "history": "", "FullName": "public Intent getSupportParentActivityIntent ()"}, "supportRequestWindowFeature(int)": {"Returns": [["", "Returns true if the requested feature is supported and now enabled."]], "Parameters": [["int", "The desired feature as defined in @B_android#view#Window_E@ or @B_android#support#v4#view#WindowCompat_E@."]], "Throws": [], "SeeAlso": ["@B_android#app#Activity#requestWindowFeature_E@", "@B_android#view#Window#requestFeature_E@"], "Permissions": [], "Description": "Enable extended support library window features. This is a convenience for calling @B_android#view#Window#requestFeature_E@.", "history": "", "FullName": "public boolean supportRequestWindowFeature (int featureId)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["", "Return true to prevent this event from being propagated further, or false to indicate that you have not handled this event and it should continue to be propagated."]], "Parameters": [["int", "The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take care of calling onBackPressed() for pre-Eclair platforms.", "history": "", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setContentView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "The desired content to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the activity content to an explicit view. This view is placed directly into the activity's view hierarchy. It can itself be a complex view hierarchy. When calling this method, the layout parameters of the specified view are ignored. Both the width and the height of the view are set by default to @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@. To use your own layout parameters, invoke @B_android#app#Activity#setContentView_E@ instead.", "history": "", "FullName": "public void setContentView (View view)"}, "setSupportProgress(int)": {"Returns": [], "Parameters": [["int", "The progress for the progress bar. Valid ranges are from 0 to 10000 (both inclusive). If 10000 is given, the progress bar will be completely filled and will fade out."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#setProgress_E@. Sets the progress for the progress bars in the title. In order for the progress bar to be shown, the feature must be requested via @B_android#support#v7#app#ActionBarActivity#supportRequestWindowFeature_E@.", "history": "", "FullName": "public void setSupportProgress (int progress)"}, "onMenuItemSelected(int, android.view.MenuItem)": {"Returns": [["", "boolean Return true to finish processing of selection, or false to perform the normal menu handling (calling its Runnable or sending a Message to its target Handler)."]], "Parameters": [["int", "The panel that the menu is in."], ["@B_android#view#MenuItem_E@", "The menu item that was selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch context and options menu to fragments.", "history": "", "FullName": "public final boolean onMenuItemSelected (int featureId, MenuItem item)"}, "onDestroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy all fragments and loaders.", "history": "", "FullName": "protected void onDestroy ()"}, "getMenuInflater()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#view#MenuInflater_E@ with this context.", "history": "", "FullName": "public MenuInflater getMenuInflater ()"}, "setSupportProgressBarVisibility(boolean)": {"Returns": [], "Parameters": [["boolean", "Whether to show the progress bars in the title."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#setProgressBarVisibility_E@ Sets the visibility of the progress bar in the title. In order for the progress bar to be shown, the feature must be requested via @B_android#support#v7#app#ActionBarActivity#supportRequestWindowFeature_E@.", "history": "", "FullName": "public void setSupportProgressBarVisibility (boolean visible)"}, "onKeyShortcut(int, android.view.KeyEvent)": {"Returns": [["", "True if the key shortcut was handled."]], "Parameters": [["int", "The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a key shortcut event is not handled by any of the views in the Activity. Override this method to implement global key shortcuts for the Activity. Key shortcuts can also be implemented by setting the @B_android#view#MenuItem#setShortcut_E@ property of menu items.", "history": "", "FullName": "public boolean onKeyShortcut (int keyCode, KeyEvent event)"}, "onCreatePanelView(int)": {"Returns": [["", "view The top-level view to place in the panel."]], "Parameters": [["int", "Which panel is being created."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#Window#Callback#onCreatePanelView_E@ for activities. This simply returns null so that all panel sub-windows will have the default menu behavior.", "history": "", "FullName": "public View onCreatePanelView (int featureId)"}, "supportInvalidateOptionsMenu()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Support library version of @B_android#app#Activity#invalidateOptionsMenu_E@. Invalidate the activity's options menu. This will cause relevant presentations of the menu to fully update via calls to onCreateOptionsMenu and onPrepareOptionsMenu the next time the menu is requested.", "history": "", "FullName": "public void supportInvalidateOptionsMenu ()"}, "onPostResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch onResume() to fragments.", "history": "", "FullName": "protected void onPostResume ()"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#view#ContextThemeWrapper_E@", "@B_android#app#Activity_E@", "@B_android#support#v4#app#FragmentActivity_E@", "@B_android#support#v7#app#AppCompatActivity_E@"], "ClassName": "android.support.v7.app.ActionBarActivity", "ClassDesc": "Use @B_android#support#v7#app#AppCompatActivity_E@ instead."}