{"Functions": {"IdentityHashMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty identity hash map with a default expected maximum size (21).", "history": "Added in API level 1", "FullName": "public IdentityHashMap ()"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if the specified object reference is a key in this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: possible key"]], "Throws": [], "SeeAlso": ["@B_java#util#IdentityHashMap#containsValue_E@"], "Permissions": [], "Description": "Tests whether the specified object reference is a key in this identity hash map.", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "an identity-based set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#lang#System#identityHashCode_E@"], "Permissions": [], "Description": "Returns an identity-based set view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress, the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the The", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: the key with which the specified value is to be associated"], ["V", "V: the value to be associated with the specified key"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#IdentityHashMap#get_E@", "@B_java#util#IdentityHashMap#containsKey_E@"], "Permissions": [], "Description": "Associates the specified value with the specified key in this identity hash map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map. The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this map"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Compares the specified object with this map for equality. Returns", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this identity hash map: the keys and values themselves are not cloned.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["int", "the hash code value for this map"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#IdentityHashMap#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's @B_java#lang#Object#hashCode_E@.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [], "SeeAlso": ["@B_java#util#IdentityHashMap#put_E@"], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that (key == k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not null. The @B_java#util#IdentityHashMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this identity hash map.", "history": "Added in API level 1", "FullName": "public int size ()"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings will replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> m)"}, "IdentityHashMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed into this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new identity hash map containing the keys-value mappings in the specified map.", "history": "Added in API level 1", "FullName": "public IdentityHashMap (Map<? extends K, ? extends V> m)"}, "isEmpty()": {"Returns": [["boolean", "true if this identity hash map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress, the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose mapping is to be removed from the map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for this key from this map if present.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified object reference"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": ["@B_java#util#IdentityHashMap#containsKey_E@"], "Permissions": [], "Description": "Tests whether the specified object reference is a value in this identity hash map.", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the identity-mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. Each element in the returned set is a reference-equality-based Like the backing map, the", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "IdentityHashMap(int)": {"Returns": [], "Parameters": [["int", "int: the expected maximum size of the map"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if expectedMaxSize is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty map with the specified expected maximum size. Putting more than the expected number of key-value mappings into the map may cause the internal data structure to grow, which may be somewhat time-consuming.", "history": "Added in API level 1", "FullName": "public IdentityHashMap (int expectedMaxSize)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: the key with which the specified value is to be associated"], ["V", "V: the value to be associated with the specified key"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@", "@B_java#util#IdentityHashMap#get_E@", "@B_java#util#IdentityHashMap#containsKey_E@"], "Permissions": [], "Description": "Associates the specified value with the specified key in this identity hash map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.IdentityHashMap<K, V>", "ClassDesc": "This class implements the A typical use of this class is This class provides all of the optional map operations, and permits This class provides constant-time performance for the basic operations (@B_java#lang#System#identityHashCode_E@) disperses elements properly among the buckets. This class has one tuning parameter (which affects performance but not semantics): If the size of the map (the number of key-value mappings) sufficiently exceeds the expected maximum size, the number of buckets is increased. Increasing the number of buckets (\"rehashing\") may be fairly expensive, so it pays to create identity hash maps with a sufficiently large expected maximum size. On the other hand, iteration over collection views requires time proportional to the number of buckets in the hash table, so it pays not to set the expected maximum size too high if you are especially concerned with iteration performance or memory usage. @B_java#util#Collections#synchronizedMap_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the map:The iterators returned by the @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw Implementation note: This is a simple @B_java#util#HashMap_E@ (which uses This class is a member of the"}