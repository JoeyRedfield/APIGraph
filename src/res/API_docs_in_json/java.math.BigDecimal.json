{"Functions": {"longValueExact()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is necessary or the number doesn't fit in a long."]], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a long value if it has no fractional part and if its value fits to the int range ([-2ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public long longValueExact ()"}, "compareTo(java.math.BigDecimal)": {"Returns": [["int", "1 if this > val, -1 if this < val, 0 if this == val."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be compared with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if val == null."]], "SeeAlso": [], "Permissions": [], "Description": "Compares this BigDecimal with val. Returns one of the three values 1, 0, or -1. The method behaves as if this.subtract(val) is computed. If this difference is > 0 then 1 is returned, if the difference is < 0 then -1 is returned, and if the difference is 0 then 0 is returned. This means, that if two decimal instances are compared which are equal in value but differ in scale, then these two instances are considered as equal.", "history": "Added in API level 1", "FullName": "public int compareTo (BigDecimal val)"}, "BigDecimal(char[],int,int,java.math.MathContext)": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."], ["int", "int: first index to be copied."], ["int", "int: number of characters to be used."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if offset < 0 || len <= 0 || offset+len-1 < 0 || offset+len-1 >= in.length, or if in does not contain a valid string representation of a big decimal."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array.", "history": "Added in API level 1", "FullName": "public BigDecimal (char[] in, int offset, int len, MathContext mc)"}, "BigDecimal(int,java.math.MathContext)": {"Returns": [], "Parameters": [["int", "int: int value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and c.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given int val. The scale of the result is 0. The result is rounded according to the specified math context.", "history": "Added in API level 1", "FullName": "public BigDecimal (int val, MathContext mc)"}, "plus()": {"Returns": [["@B_java#math#BigDecimal_E@", "this"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is +this. The scale of the result is the same as the scale of this.", "history": "Added in API level 1", "FullName": "public BigDecimal plus ()"}, "divide(java.math.BigDecimal,java.math.RoundingMode)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["@B_java#math#RoundingMode_E@", "RoundingMode: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null or roundingMode == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == RoundingMode.UNNECESSARY and rounding is necessary according to the scale of this."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. The scale of the result is the scale of this. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, RoundingMode roundingMode)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if x is a BigDecimal instance and if this instance is equal to this big decimal. Two big decimals are equal if their unscaled value and their scale is equal. For example, 1.0 (10*10", "history": "Added in API level 1", "FullName": "public boolean equals (Object x)"}, "setScale(int, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance with the specified scale."]], "Parameters": [["int", "int: scale of the result returned."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. In this case no rounding is necessary. If the new scale is smaller than the old scale, then trailing digits are removed. If these trailing digits are not zero, then the remaining unscaled value has to be rounded. For this rounding operation the specified rounding mode is used.", "history": "added in API level 1", "FullName": "public BigDecimal setScale (int newScale, int roundingMode)"}, "BigDecimal(java.math.BigInteger,int)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if unscaledVal == null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a given unscaled value unscaledVal and a given scale. The value of this instance is unscaledVal * 10<sup>-scale</sup>).", "history": "Added in API level 1", "FullName": "public BigDecimal (BigInteger unscaledVal, int scale)"}, "scaleByPowerOfTen(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this * 10<sup>n</sup>. The scale of the result is this.scale() - n. The precision of the result is the precision of this. This method has the same effect as @B_java#math#BigDecimal#movePointRight_E@, except that the precision is not changed.", "history": "Added in API level 1", "FullName": "public BigDecimal scaleByPowerOfTen (int n)"}, "subtract(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "this - subtrahend."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be subtracted from this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if subtrahend == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this - subtrahend. The scale of the result is the maximum of the scales of the two arguments.", "history": "Added in API level 1", "FullName": "public BigDecimal subtract (BigDecimal subtrahend)"}, "BigDecimal(java.math.BigInteger)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given big integer val. The scale of the result is 0.", "history": "Added in API level 1", "FullName": "public BigDecimal (BigInteger val)"}, "divide(java.math.BigDecimal, int, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["int", "int: the scale of the result returned."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. As scale of the result the parameter scale is used. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, int scale, int roundingMode)"}, "movePointRight(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance where the decimal point has been moved n places to the right. If n < 0 then the decimal point is moved -n places to the left. The result is obtained by changing its scale. If the scale of the result becomes negative, then its precision is increased such that the scale is zero. Note, that movePointRight(0) returns a result which is mathematically equivalent, but which has scale >= 0.", "history": "Added in API level 1", "FullName": "public BigDecimal movePointRight (int n)"}, "min(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "min(this, val."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be used to compute the minimum with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if val == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum of this BigDecimal and val.", "history": "Added in API level 1", "FullName": "public BigDecimal min (BigDecimal val)"}, "byteValueExact()": {"Returns": [["byte", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is necessary or the number doesn't fit in a byte."]], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a byte value if it has no fractional part and if its value fits to the byte range ([-128..127]). If these conditions are not met, an ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public byte byteValueExact ()"}, "valueOf(long, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance whose value is equal to unscaledVal * 10<sup>-scale</sup>). The scale of the result is scale, and its unscaled value is unscaledVal.", "history": "added in API level 1", "FullName": "public static BigDecimal valueOf (long unscaledVal, int scale)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this in scientific notation if necessary."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a canonical string representation of this BigDecimal. If necessary, scientific notation is used. This representation always prints all significant digits of this value. If the scale is negative or if scale - precision >= 6 then scientific notation is used.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "stripTrailingZeros()": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance equivalent to this where the trailing zeros of the unscaled value have been removed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the same value as this but with a unscaled value where the trailing zeros have been removed. If the unscaled value of this has n trailing zeros, then the scale and the precision of the result has been reduced by n.", "history": "Added in API level 1", "FullName": "public BigDecimal stripTrailingZeros ()"}, "round(java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this rounded according to the passed context."]], "Parameters": [["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and this cannot be represented within the given precision."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this, rounded according to the passed context mc. If mc.precision = 0, then no rounding is performed. If mc.precision > 0 and mc.roundingMode == UNNECESSARY, then an ArithmeticException is thrown if the result cannot be represented exactly within the given precision.", "history": "Added in API level 1", "FullName": "public BigDecimal round (MathContext mc)"}, "BigDecimal(java.math.BigInteger,java.math.MathContext)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given big integer val. The scale of the result is 0.", "history": "Added in API level 1", "FullName": "public BigDecimal (BigInteger val, MathContext mc)"}, "multiply(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this * multiplicand."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be multiplied with this."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if multiplicand == null or mc == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this * multiplicand. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal multiply (BigDecimal multiplicand, MathContext mc)"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as an int value. Any fractional part is discarded. If the integral part of this is too big to be represented as an int, then this % 2<sup>32</sup> is returned.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as an long value. Any fractional part is discarded. If the integral part of this is too big to be represented as an long, then this % 2<sup>64</sup> is returned.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "toPlainString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this without exponent part."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this BigDecimal. No scientific notation is used. This methods adds zeros where necessary. If this string representation is used to create a new instance, this instance is generally not identical to this as the precision changes. x.equals(new BigDecimal(x.toPlainString()) usually returns false. x.compareTo(new BigDecimal(x.toPlainString()) returns 0.", "history": "Added in API level 1", "FullName": "public String toPlainString ()"}, "BigDecimal(char[], int, int)": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."], ["int", "int: first index to be copied."], ["int", "int: number of characters to be used."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if offset < 0 || len <= 0 || offset+len-1 < 0 || offset+len-1 >= in.length, or if in does not contain a valid string representation of a big decimal."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array.", "history": "added in API level 1", "FullName": "public BigDecimal (char[] in, int offset, int len)"}, "toBigInteger()": {"Returns": [["@B_java#math#BigInteger_E@", "this BigDecimal as a big integer instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a big integer instance. A fractional part is discarded.", "history": "Added in API level 1", "FullName": "public BigInteger toBigInteger ()"}, "BigDecimal(java.math.BigInteger, int)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["int", "int no parameter comment"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if unscaledVal == null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a given unscaled value unscaledVal and a given scale. The value of this instance is unscaledVal * 10<sup>-scale</sup>).", "history": "added in API level 1", "FullName": "public BigDecimal (BigInteger unscaledVal, int scale)"}, "divide(java.math.BigDecimal,int,java.math.RoundingMode)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["int", "int: the scale of the result returned."], ["@B_java#math#RoundingMode_E@", "RoundingMode: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null or roundingMode == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == RoundingMode.UNNECESSARY and rounding is necessary according to the given scale and given precision."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. As scale of the result the parameter scale is used. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, int scale, RoundingMode roundingMode)"}, "pow(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0 or n > 999999999."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this<sup>n</sup>. The scale of the result is n * this.scale(). x.pow(0) returns 1, even if x == 0. Implementation Note: The implementation is based on the ANSI standard X3.274-1996 algorithm.", "history": "Added in API level 1", "FullName": "public BigDecimal pow (int n)"}, "setScale(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance with the specified scale."]], "Parameters": [["int", "int: scale of the result returned."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding would be necessary."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. If the new scale is smaller than the old scale, then trailing zeros are removed. If the trailing digits are not zeros then an ArithmeticException is thrown. If no exception is thrown, then the following equation holds: x.setScale(s).compareTo(x) == 0.", "history": "Added in API level 1", "FullName": "public BigDecimal setScale (int newScale)"}, "toEngineeringString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this in engineering notation if necessary."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of this BigDecimal. This representation always prints all significant digits of this value. If the scale is negative or if scale - precision >= 6 then engineering notation is used. Engineering notation is similar to the scientific notation except that the exponent is made to be a multiple of 3 such that the integer part is >= 1 and < 1000.", "history": "Added in API level 1", "FullName": "public String toEngineeringString ()"}, "BigDecimal(char[])": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if in does not contain a valid string representation of a big decimal."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array.", "history": "Added in API level 1", "FullName": "public BigDecimal (char[] in)"}, "divide(java.math.BigDecimal,int,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["int", "int: the scale of the result returned."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. As scale of the result the parameter scale is used. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, int scale, int roundingMode)"}, "intValueExact()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is necessary or the number doesn't fit in an int."]], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a int value if it has no fractional part and if its value fits to the int range ([-2ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public int intValueExact ()"}, "BigDecimal(char[],java.math.MathContext)": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if in does not contain a valid string representation of a big decimal."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array. The result is rounded according to the specified math context.", "history": "Added in API level 1", "FullName": "public BigDecimal (char[] in, MathContext mc)"}, "scale()": {"Returns": [["int", "the scale of this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the scale of this BigDecimal. The scale is the number of digits behind the decimal point. The value of this BigDecimal is the unsignedValue * 10<sup>-scale</sup>. If the scale is negative, then this BigDecimal represents a big integer.", "history": "Added in API level 1", "FullName": "public int scale ()"}, "signum()": {"Returns": [["int", "-1 if this < 0, 0 if this == 0, 1 if this > 0."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the sign of this BigDecimal.", "history": "Added in API level 1", "FullName": "public int signum ()"}, "remainder(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "this % divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this % divisor. The remainder is defined as this - this.divideToIntegralValue(divisor) * divisor.", "history": "Added in API level 1", "FullName": "public BigDecimal remainder (BigDecimal divisor)"}, "max(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "max(this, val."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be used to compute the maximum with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if val == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum of this BigDecimal and val.", "history": "Added in API level 1", "FullName": "public BigDecimal max (BigDecimal val)"}, "floatValue()": {"Returns": [["float", "this BigDecimal as a float value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a float value. If this is too big to be represented as an float, then Float.POSITIVE_INFINITY or Float.NEGATIVE_INFINITY is returned. Note, that if the unscaled value has more than 24 significant digits, then this decimal cannot be represented exactly in a float variable. In this case the result is rounded. For example, if the instance x1 = new BigDecimal(\"0.1\") cannot be represented exactly as a float, and thus x1.equals(new BigDecimal(x1.floatValue()) returns false for this case. Similarly, if the instance new BigDecimal(16777217) is converted to a float, the result is 1.6777216E7.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "BigDecimal(double, java.math.MathContext)": {"Returns": [], "Parameters": [["double", "double: double value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val is infinity or not a number."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the 64bit double val. The constructed big decimal is equivalent to the given double. For example, new BigDecimal(0.1) is equal to 0.1000000000000000055511151231257827021181583404541015625. This happens as 0.1 cannot be represented exactly in binary. To generate a big decimal instance which is equivalent to 0.1 use the BigDecimal(String) constructor.", "history": "added in API level 1", "FullName": "public BigDecimal (double val, MathContext mc)"}, "divide(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if the result cannot be represented exactly."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. The scale of the result is the difference of the scales of this and divisor. If the exact result requires more digits, then the scale is adjusted accordingly. For example, 1/128 = 0.0078125 which has a scale of 7 and precision 5.", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor)"}, "pow(int, java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0 or n > 999999999."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this<sup>n</sup>. The result is rounded according to the passed context mc. Implementation Note: The implementation is based on the ANSI standard X3.274-1996 algorithm.", "history": "added in API level 1", "FullName": "public BigDecimal pow (int n, MathContext mc)"}, "plus(java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this, rounded"]], "Parameters": [["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is +this. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal plus (MathContext mc)"}, "pow(int,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if n < 0 or n > 999999999."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this<sup>n</sup>. The result is rounded according to the passed context mc. Implementation Note: The implementation is based on the ANSI standard X3.274-1996 algorithm.", "history": "Added in API level 1", "FullName": "public BigDecimal pow (int n, MathContext mc)"}, "BigDecimal(long, java.math.MathContext)": {"Returns": [], "Parameters": [["long", "long: long value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given long val. The scale of the result is 0. The result is rounded according to the specified math context.", "history": "added in API level 1", "FullName": "public BigDecimal (long val, MathContext mc)"}, "BigDecimal(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val does not contain a valid string representation of a big decimal."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation.", "history": "Added in API level 1", "FullName": "public BigDecimal (String val)"}, "divideAndRemainder(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "[this.divideToIntegralValue(divisor), this.remainder(divisor)]."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["@B_java#math#MathContext_E@", "MathContext: math context which determines the maximal precision of the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": ["@B_java#math#BigDecimal#divideToIntegralValue_E@", "@B_java#math#BigDecimal#remainder_E@"], "Permissions": [], "Description": "Returns a BigDecimal array which contains the integral part of this / divisor at index 0 and the remainder this % divisor at index 1. The quotient is rounded down towards zero to the next integer. The rounding mode passed with the parameter mc is not considered. But if the precision of mc > 0 and the integral part requires more digits, then an ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public BigDecimal[] divideAndRemainder (BigDecimal divisor, MathContext mc)"}, "ulp()": {"Returns": [["@B_java#math#BigDecimal_E@", "unit in the last place (ULP) of this BigDecimal instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unit in the last place (ULP) of this BigDecimal instance. An ULP is the distance to the nearest big decimal with the same precision. The amount of a rounding error in the evaluation of a floating-point operation is often expressed in ULPs. An error of 1 ULP is often seen as a tolerable error. For class BigDecimal, the ULP of a number is simply 10new BigDecimal(0.1).ulp() returns 1E-55.", "history": "Added in API level 1", "FullName": "public BigDecimal ulp ()"}, "BigDecimal(char[],int,int)": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."], ["int", "int: first index to be copied."], ["int", "int: number of characters to be used."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if offset < 0 || len <= 0 || offset+len-1 < 0 || offset+len-1 >= in.length, or if in does not contain a valid string representation of a big decimal."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array.", "history": "Added in API level 1", "FullName": "public BigDecimal (char[] in, int offset, int len)"}, "valueOf(long,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance whose value is equal to unscaledVal * 10<sup>-scale</sup>). The scale of the result is scale, and its unscaled value is unscaledVal.", "history": "Added in API level 1", "FullName": "public static BigDecimal valueOf (long unscaledVal, int scale)"}, "BigDecimal(long)": {"Returns": [], "Parameters": [["long", "long: long value to be converted to a BigDecimal instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given long val. The scale of the result is 0.", "history": "Added in API level 1", "FullName": "public BigDecimal (long val)"}, "BigDecimal(long,java.math.MathContext)": {"Returns": [], "Parameters": [["long", "long: long value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given long val. The scale of the result is 0. The result is rounded according to the specified math context.", "history": "Added in API level 1", "FullName": "public BigDecimal (long val, MathContext mc)"}, "divideToIntegralValue(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "integral part of this / divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is the integral part of this / divisor. The quotient is rounded down towards zero to the next integer. For example, 0.5/0.2 = 2.", "history": "Added in API level 1", "FullName": "public BigDecimal divideToIntegralValue (BigDecimal divisor)"}, "hashCode()": {"Returns": [["int", "hash code for this."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code for this BigDecimal.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "setScale(int,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance with the specified scale."]], "Parameters": [["int", "int: scale of the result returned."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. In this case no rounding is necessary. If the new scale is smaller than the old scale, then trailing digits are removed. If these trailing digits are not zero, then the remaining unscaled value has to be rounded. For this rounding operation the specified rounding mode is used.", "history": "Added in API level 1", "FullName": "public BigDecimal setScale (int newScale, int roundingMode)"}, "movePointLeft(int)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance where the decimal point has been moved n places to the left. If n < 0 then the decimal point is moved -n places to the right. The result is obtained by changing its scale. If the scale of the result becomes negative, then its precision is increased such that the scale is zero. Note, that movePointLeft(0) returns a result which is mathematically equivalent, but which has scale >= 0.", "history": "Added in API level 1", "FullName": "public BigDecimal movePointLeft (int n)"}, "precision()": {"Returns": [["int", "the precision of this BigDecimal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the precision of this BigDecimal. The precision is the number of decimal digits used to represent this decimal. It is equivalent to the number of digits of the unscaled value. The precision of 0 is 1 (independent of the scale).", "history": "Added in API level 1", "FullName": "public int precision ()"}, "multiply(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "this * multiplicand."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be multiplied with this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if multiplicand == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this * multiplicand. The scale of the result is the sum of the scales of the two arguments.", "history": "Added in API level 1", "FullName": "public BigDecimal multiply (BigDecimal multiplicand)"}, "divideAndRemainder(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "[this.divideToIntegralValue(divisor), this.remainder(divisor)]."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."]], "SeeAlso": ["@B_java#math#BigDecimal#divideToIntegralValue_E@", "@B_java#math#BigDecimal#remainder_E@"], "Permissions": [], "Description": "Returns a BigDecimal array which contains the integral part of this / divisor at index 0 and the remainder this % divisor at index 1. The quotient is rounded down towards zero to the next integer.", "history": "Added in API level 1", "FullName": "public BigDecimal[] divideAndRemainder (BigDecimal divisor)"}, "valueOf(long)": {"Returns": [["@B_java#math#BigDecimal_E@", "BigDecimal instance with the value unscaledVal."]], "Parameters": [["long", "long: value to be converted to a BigDecimal."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance whose value is equal to unscaledVal. The scale of the result is 0, and its unscaled value is unscaledVal.", "history": "Added in API level 1", "FullName": "public static BigDecimal valueOf (long unscaledVal)"}, "divide(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null or mc == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if mc.getRoundingMode() == UNNECESSARY and rounding is necessary according mc.getPrecision()."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. The result is rounded according to the passed context mc. If the passed math context specifies precision 0, then this call is equivalent to this.divide(divisor).", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, MathContext mc)"}, "remainder(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this % divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision to be used."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if mc.getPrecision() > 0 and the result of this.divideToIntegralValue(divisor, mc) requires more digits to be represented."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this % divisor. The remainder is defined as this - this.divideToIntegralValue(divisor) * divisor. The specified rounding mode mc is used for the division only.", "history": "Added in API level 1", "FullName": "public BigDecimal remainder (BigDecimal divisor, MathContext mc)"}, "valueOf(double)": {"Returns": [["@B_java#math#BigDecimal_E@", "BigDecimal instance with the value val."]], "Parameters": [["double", "double: double value to be converted to a BigDecimal."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val is infinite or val is not a number"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance whose value is equal to val. The new decimal is constructed as if the BigDecimal(String) constructor is called with an argument which is equal to Double.toString(val). For example, valueOf(\"0.1\") is converted to (unscaled=1, scale=1), although the double 0.1 cannot be represented exactly as a double value. In contrast to that, a new BigDecimal(0.1) instance has the value 0.1000000000000000055511151231257827021181583404541015625 with an unscaled value 1000000000000000055511151231257827021181583404541015625 and the scale 55.", "history": "Added in API level 1", "FullName": "public static BigDecimal valueOf (double val)"}, "abs()": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the absolute value of this. The scale of the result is the same as the scale of this.", "history": "Added in API level 1", "FullName": "public BigDecimal abs ()"}, "unscaledValue()": {"Returns": [["@B_java#math#BigInteger_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unscaled value (mantissa) of this BigDecimal instance as a BigInteger. The unscaled value can be computed as this * 10<sup>scale</sup>.", "history": "Added in API level 1", "FullName": "public BigInteger unscaledValue ()"}, "toBigIntegerExact()": {"Returns": [["@B_java#math#BigInteger_E@", "this BigDecimal as a big integer value."]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is necessary."]], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a big integer instance if it has no fractional part. If this BigDecimal has a fractional part, i.e. if rounding would be necessary, an ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public BigInteger toBigIntegerExact ()"}, "BigDecimal(java.lang.String,java.math.MathContext)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val does not contain a valid string representation of a big decimal."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation. The result is rounded according to the specified math context.", "history": "Added in API level 1", "FullName": "public BigDecimal (String val, MathContext mc)"}, "BigDecimal(int)": {"Returns": [], "Parameters": [["int", "int: int value to be converted to a BigDecimal instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given int val. The scale of the result is 0.", "history": "Added in API level 1", "FullName": "public BigDecimal (int val)"}, "add(java.math.BigDecimal, java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this + augend."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be added to this."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if augend == null or mc == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this + augend. The result is rounded according to the passed context mc.", "history": "added in API level 1", "FullName": "public BigDecimal add (BigDecimal augend, MathContext mc)"}, "add(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this + augend."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be added to this."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if augend == null or mc == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this + augend. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal add (BigDecimal augend, MathContext mc)"}, "setScale(int, java.math.RoundingMode)": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance with the specified scale."]], "Parameters": [["int", "int: scale of the result returned."], ["@B_java#math#RoundingMode_E@", "RoundingMode: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if roundingMode == null."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. In this case no rounding is necessary. If the new scale is smaller than the old scale, then trailing digits are removed. If these trailing digits are not zero, then the remaining unscaled value has to be rounded. For this rounding operation the specified rounding mode is used.", "history": "added in API level 1", "FullName": "public BigDecimal setScale (int newScale, RoundingMode roundingMode)"}, "BigDecimal(java.math.BigInteger,int,java.math.MathContext)": {"Returns": [], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["int", "int no parameter comment"], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."], ["@B_java#lang#NullPointerException_E@", "if unscaledVal == null."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a given unscaled value unscaledVal and a given scale. The value of this instance is {@code unscaledVal * 10", "history": "Added in API level 1", "FullName": "public BigDecimal (BigInteger unscaledVal, int scale, MathContext mc)"}, "doubleValue()": {"Returns": [["double", "this BigDecimal as a double value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a double value. If this is too big to be represented as an float, then Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY is returned. Note, that if the unscaled value has more than 53 significant digits, then this decimal cannot be represented exactly in a double variable. In this case the result is rounded. For example, if the instance x1 = new BigDecimal(\"0.1\") cannot be represented exactly as a double, and thus x1.equals(new BigDecimal(x1.doubleValue()) returns false for this case. Similarly, if the instance new BigDecimal(9007199254740993L) is converted to a double, the result is 9.007199254740992E15.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "negate()": {"Returns": [["@B_java#math#BigDecimal_E@", "-this"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is the -this. The scale of the result is the same as the scale of this.", "history": "Added in API level 1", "FullName": "public BigDecimal negate ()"}, "BigDecimal(double,java.math.MathContext)": {"Returns": [], "Parameters": [["double", "double: double value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val is infinity or not a number."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the 64bit double val. The constructed big decimal is equivalent to the given double. For example, new BigDecimal(0.1) is equal to 0.1000000000000000055511151231257827021181583404541015625. This happens as 0.1 cannot be represented exactly in binary. To generate a big decimal instance which is equivalent to 0.1 use the BigDecimal(String) constructor.", "history": "Added in API level 1", "FullName": "public BigDecimal (double val, MathContext mc)"}, "shortValueExact()": {"Returns": [["short", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if rounding is necessary of the number doesn't fit in a short."]], "SeeAlso": [], "Permissions": [], "Description": "Returns this BigDecimal as a short value if it has no fractional part and if its value fits to the short range ([-2ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public short shortValueExact ()"}, "divide(java.math.BigDecimal, int)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the scale of this."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. The scale of the result is the scale of this. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, int roundingMode)"}, "BigDecimal(char[], java.math.MathContext)": {"Returns": [], "Parameters": [["char[]", "char: array of characters containing the string representation of this BigDecimal."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if in does not contain a valid string representation of a big decimal."], ["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and mc.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from a string representation given as a character array. The result is rounded according to the specified math context.", "history": "added in API level 1", "FullName": "public BigDecimal (char[] in, MathContext mc)"}, "add(java.math.BigDecimal)": {"Returns": [["@B_java#math#BigDecimal_E@", "this + augend."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be added to this."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if augend == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this + augend. The scale of the result is the maximum of the scales of the two arguments.", "history": "Added in API level 1", "FullName": "public BigDecimal add (BigDecimal augend)"}, "divide(java.math.BigDecimal,int)": {"Returns": [["@B_java#math#BigDecimal_E@", "this / divisor rounded according to the given rounding mode."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["int", "int: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null."], ["@B_java#lang#IllegalArgumentException_E@", "if roundingMode is not a valid rounding mode."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the scale of this."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this / divisor. The scale of the result is the scale of this. If rounding is required to meet the specified scale, then the specified rounding mode roundingMode is applied.", "history": "Added in API level 1", "FullName": "public BigDecimal divide (BigDecimal divisor, int roundingMode)"}, "setScale(int,java.math.RoundingMode)": {"Returns": [["@B_java#math#BigDecimal_E@", "a new BigDecimal instance with the specified scale."]], "Parameters": [["int", "int: scale of the result returned."], ["@B_java#math#RoundingMode_E@", "RoundingMode: rounding mode to be used to round the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if roundingMode == null."], ["@B_java#lang#ArithmeticException_E@", "if roundingMode == ROUND_UNNECESSARY and rounding is necessary according to the given scale."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal instance with the specified scale. If the new scale is greater than the old scale, then additional zeros are added to the unscaled value. In this case no rounding is necessary. If the new scale is smaller than the old scale, then trailing digits are removed. If these trailing digits are not zero, then the remaining unscaled value has to be rounded. For this rounding operation the specified rounding mode is used.", "history": "Added in API level 1", "FullName": "public BigDecimal setScale (int newScale, RoundingMode roundingMode)"}, "BigDecimal(int, java.math.MathContext)": {"Returns": [], "Parameters": [["int", "int: int value to be converted to a BigDecimal instance."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if mc.precision > 0 and c.roundingMode == UNNECESSARY and the new big decimal cannot be represented within the given precision without rounding."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the given int val. The scale of the result is 0. The result is rounded according to the specified math context.", "history": "added in API level 1", "FullName": "public BigDecimal (int val, MathContext mc)"}, "divideToIntegralValue(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "integral part of this / divisor."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value by which this is divided."], ["@B_java#math#MathContext_E@", "MathContext: math context which determines the maximal precision of the result."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if divisor == null or mc == null."], ["@B_java#lang#ArithmeticException_E@", "if divisor == 0."], ["@B_java#lang#ArithmeticException_E@", "if mc.getPrecision() > 0 and the result requires more digits to be represented."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is the integral part of this / divisor. The quotient is rounded down towards zero to the next integer. The rounding mode passed with the parameter mc is not considered. But if the precision of mc > 0 and the integral part requires more digits, then an ArithmeticException is thrown.", "history": "Added in API level 1", "FullName": "public BigDecimal divideToIntegralValue (BigDecimal divisor, MathContext mc)"}, "abs(java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "no returns description in source"]], "Parameters": [["@B_java#math#MathContext_E@", "MathContext no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a BigDecimal whose value is the absolute value of this. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal abs (MathContext mc)"}, "negate(java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "-this"]], "Parameters": [["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is the -this. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal negate (MathContext mc)"}, "subtract(java.math.BigDecimal,java.math.MathContext)": {"Returns": [["@B_java#math#BigDecimal_E@", "this - subtrahend."]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal: value to be subtracted from this."], ["@B_java#math#MathContext_E@", "MathContext: rounding mode and precision for the result of this operation."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if subtrahend == null or mc == null."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new BigDecimal whose value is this - subtrahend. The result is rounded according to the passed context mc.", "history": "Added in API level 1", "FullName": "public BigDecimal subtract (BigDecimal subtrahend, MathContext mc)"}, "BigDecimal(double)": {"Returns": [], "Parameters": [["double", "double: double value to be converted to a BigDecimal instance."]], "Throws": [["@B_java#lang#NumberFormatException_E@", "if val is infinity or not a number."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new BigDecimal instance from the 64bit double val. The constructed big decimal is equivalent to the given double. For example, new BigDecimal(0.1) is equal to 0.1000000000000000055511151231257827021181583404541015625. This happens as 0.1 cannot be represented exactly in binary. To generate a big decimal instance which is equivalent to 0.1 use the BigDecimal(String) constructor.", "history": "Added in API level 1", "FullName": "public BigDecimal (double val)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.math.BigDecimal", "ClassDesc": "An immutable arbitrary-precision signed decimal. A value is represented by an arbitrary-precision \"unscaled value\" and a signed 32-bit \"scale\", combined thus: unscaled * 10<sup>-scale</sup>. See @B_java#math#BigDecimal#unscaledValue_E@ and @B_java#math#BigDecimal#scale_E@. Most operations allow you to supply a @B_java#math#MathContext_E@ to specify a desired rounding mode."}