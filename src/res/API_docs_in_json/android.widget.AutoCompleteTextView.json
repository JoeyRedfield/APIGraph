{"Functions": {"AutoCompleteTextView(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new auto-complete text view with the given context's theme, the supplied attribute set, and default style attribute.", "history": "Added in API level 1", "FullName": "public AutoCompleteTextView (Context context, AttributeSet attrs, int defStyleAttr)"}, "getOnItemClickListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "the item click listener"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the listener that is notified whenever the user clicks an item in the drop down list.", "history": "Added in API level 3", "FullName": "public AdapterView.OnItemClickListener getOnItemClickListener ()"}, "setFrame(int,int,int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onKeyPreIme(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle a key event before it is processed by any input method associated with the view hierarchy. This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.", "history": "added in API level 3", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "refreshAutoCompleteResults()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Refreshes the auto complete results. You usually shouldn't have to manually refresh the AutoCompleteResults as this is done automatically whenever the text changes. However if the results are not available and have to be fetched, you can call this function after fetching the results.", "history": "Added in API level 29", "FullName": "public final void refreshAutoCompleteResults ()"}, "getThreshold()": {"Returns": [["int", "the minimum number of characters to type to show the drop down"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#setThreshold_E@"], "Permissions": [], "Description": "Returns the number of characters the user must type before the drop down list is shown.", "history": "Added in API level 1", "FullName": "public int getThreshold ()"}, "getAdapter()": {"Returns": [["@B_android#widget#ListAdapter_E@", "a data adapter used for auto completion"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a filterable list adapter used for auto completion.", "history": "Added in API level 1", "FullName": "public ListAdapter getAdapter ()"}, "getFilter()": {"Returns": [["@B_android#widget#Filter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Filter obtained from @B_android#widget#Filterable#getFilter_E@, or null if @B_android#widget#AutoCompleteTextView#setAdapter_E@ was not called with a Filterable.", "history": "Added in API level 1", "FullName": "protected Filter getFilter ()"}, "AutoCompleteTextView(android.content.Context,android.util.AttributeSet,int,int,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context against which the view is inflated, which provides access to the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: The theme against which the completion popup window should be inflated. May be null to use the view theme. If set, this will override any value specified by @B_android#R#styleable#AutoCompleteTextView_popupTheme_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new auto-complete text view with the given context, the supplied attribute set, default styles, and the theme against which the completion popup should be inflated.", "history": "Added in API level 24", "FullName": "public AutoCompleteTextView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes, Resources.Theme popupTheme)"}, "setOnClickListener(android.view.View.OnClickListener)": {"Returns": [], "Parameters": [["@B_android#view#View#OnClickListener_E@", "View.OnClickListener: The callback that will run This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when this view is clicked. If this view is not clickable, it becomes clickable.", "history": "Added in API level 1", "FullName": "public void setOnClickListener (View.OnClickListener listener)"}, "dismissDropDown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the drop down if present on screen.", "history": "Added in API level 1", "FullName": "public void dismissDropDown ()"}, "setDropDownHeight(int)": {"Returns": [], "Parameters": [["int", "int: the height to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current height for the auto-complete drop down list. This can be a fixed width, or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to fill the screen, or @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ to fit the width of its anchor view.", "history": "Added in API level 4", "FullName": "public void setDropDownHeight (int height)"}, "setOnItemClickListener(android.widget.AdapterView.OnItemClickListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "AdapterView.OnItemClickListener: the item click listener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that will be notified when the user clicks an item in the drop down list.", "history": "Added in API level 1", "FullName": "public void setOnItemClickListener (AdapterView.OnItemClickListener l)"}, "setDropDownBackgroundResource(int)": {"Returns": [], "Parameters": [["int", "int: the id of the drawable to set as the background"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the background of the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public void setDropDownBackgroundResource (int id)"}, "getOnItemSelectedListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "the item selected listener"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the listener that is notified whenever the user selects an item in the drop down list.", "history": "Added in API level 3", "FullName": "public AdapterView.OnItemSelectedListener getOnItemSelectedListener ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onAttachedToWindow ()"}, "clearListSelection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clear the list selection. This may only be temporary, as user input will often bring it back.", "history": "Added in API level 3", "FullName": "public void clearListSelection ()"}, "getInputMethodMode()": {"Returns": [["int", "Value is @B_android#widget#ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE_E@, @B_android#widget#ListPopupWindow#INPUT_METHOD_NEEDED_E@, or @B_android#widget#ListPopupWindow#INPUT_METHOD_NOT_NEEDED_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input method mode used by the auto complete dropdown.", "history": "Added in API level 29", "FullName": "public int getInputMethodMode ()"}, "AutoCompleteTextView(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."], ["int", "int: An attribute in the current theme that contains a reference to a style resource that supplies default values for the view. Can be 0 to not look for defaults."], ["int", "int: A resource identifier of a style resource that supplies default values for the view, used only if defStyleAttr is 0 or can not be found in the theme. Can be 0 to not look for defaults."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new auto-complete text view with the given context's theme, the supplied attribute set, and default styles.", "history": "Added in API level 21", "FullName": "public AutoCompleteTextView (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getDropDownBackground()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "the background drawable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the background of the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public Drawable getDropDownBackground ()"}, "getListSelection()": {"Returns": [["int", "the position of the current selection, if there is one, or @B_android#widget#AdapterView#INVALID_POSITION_E@ if not."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AdapterView#getSelectedItemPosition_E@"], "Permissions": [], "Description": "Get the position of the dropdown view selection, if there is one. Returns @B_android#widget#AdapterView#INVALID_POSITION_E@ if there is no dropdown or if there is no selection.", "history": "Added in API level 3", "FullName": "public int getListSelection ()"}, "AutoCompleteTextView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new auto-complete text view with the given context's theme.", "history": "Added in API level 1", "FullName": "public AutoCompleteTextView (Context context)"}, "setDropDownWidth(int)": {"Returns": [], "Parameters": [["int", "int: the width to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current width for the auto-complete drop down list. This can be a fixed width, or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to fill the screen, or @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ to fit the width of its anchor view.", "history": "Added in API level 3", "FullName": "public void setDropDownWidth (int width)"}, "setFrame(int, int, int, int)": {"Returns": [["boolean", "true if the new size and position are different than the previous ones"]], "Parameters": [["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Assign a size and position to this view. This is called from layout.", "history": "added in API level 1", "FullName": "protected boolean setFrame (int l, int t, int r, int b)"}, "onFocusChanged(boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the View has focus; false otherwise."], ["int", "int: The direction focus has moved when requestFocus() is called to give this view focus. Values are @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, or @B_android#view#View#FOCUS_BACKWARD_E@. It may not always apply, in which case use the default. Value is @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_RIGHT_E@, or @B_android#view#View#FOCUS_DOWN_E@"], ["@B_android#graphics#Rect_E@", "Rect: The rectangle, in this view's coordinate system, of the previously focused view. If applicable, this will be passed in as finer grained information about where the focus is coming from (in addition to direction). Will be null otherwise. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the view system when the focus state of this view changes. When the focus change event is caused by directional navigation, direction and previouslyFocusedRect provide insight into where the focus is coming from. When overriding, be sure to call up through to the super class so that the standard focus handling will occur. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onFocusChanged (boolean focused, int direction, Rect previouslyFocusedRect)"}, "isPerformingCompletion()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Identifies whether the view is currently performing a text completion, so subclasses can decide whether to respond to text changed events.", "history": "Added in API level 3", "FullName": "public boolean isPerformingCompletion ()"}, "getItemSelectedListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "the item selected listener"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#AutoCompleteTextView#getOnItemSelectedListener_E@ intead Returns the listener that is notified whenever the user selects an item in the drop down list.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public AdapterView.OnItemSelectedListener getItemSelectedListener ()"}, "onKeyPreIme(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handle a key event before it is processed by any input method associated with the view hierarchy. This can be used to intercept key events in special situations before the IME consumes them; a typical example would be handling the BACK key to update the application's UI instead of allowing the IME to see it and close itself.", "history": "Added in API level 3", "FullName": "public boolean onKeyPreIme (int keyCode, KeyEvent event)"}, "performFiltering(java.lang.CharSequence, int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the filtering pattern"], ["int", "int: the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts filtering the content of the drop down list. The filtering pattern is the content of the edit box. Subclasses should override this method to filter with a different pattern, for instance a substring of text.", "history": "added in API level 1", "FullName": "protected void performFiltering (CharSequence text, int keyCode)"}, "getDropDownHorizontalOffset()": {"Returns": [["int", "the horizontal offset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the horizontal offset used for the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public int getDropDownHorizontalOffset ()"}, "getDropDownVerticalOffset()": {"Returns": [["int", "the vertical offset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the vertical offset used for the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public int getDropDownVerticalOffset ()"}, "setDropDownHorizontalOffset(int)": {"Returns": [], "Parameters": [["int", "int: the horizontal offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the horizontal offset used for the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public void setDropDownHorizontalOffset (int offset)"}, "getDropDownWidth()": {"Returns": [["int", "the width for the drop down list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current width for the auto-complete drop down list. This can be a fixed width, or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to fill the screen, or @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ to fit the width of its anchor view.", "history": "Added in API level 3", "FullName": "public int getDropDownWidth ()"}, "onWindowFocusChanged(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the window containing this view now has focus, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the window containing this view gains or loses focus. Note that this is separate from view focus: to receive key events, both your view and its window must have focus. If a window is displayed on top of yours that takes input focus, then your own window will lose focus but the view focus will remain unchanged.", "history": "Added in API level 1", "FullName": "public void onWindowFocusChanged (boolean hasWindowFocus)"}, "getDropDownAnchor()": {"Returns": [["int", "the view's id, or @B_android#view#View#NO_ID_E@ if none specified"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the id for the view that the auto-complete drop down list is anchored to.", "history": "Added in API level 3", "FullName": "public int getDropDownAnchor ()"}, "onCommitCompletion(android.view.inputmethod.CompletionInfo)": {"Returns": [], "Parameters": [["@B_android#view#inputmethod#CompletionInfo_E@", "CompletionInfo: The auto complete text the user has selected."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the framework in response to a text completion from the current input method, provided by it calling @B_android#view#inputmethod#InputConnection#commitCompletion_E@. The default implementation does nothing; text views that are supporting auto-completion should override this to do their desired behavior.", "history": "Added in API level 3", "FullName": "public void onCommitCompletion (CompletionInfo completion)"}, "onFilterComplete(int)": {"Returns": [], "Parameters": [["int", "int: the number of values computed by the filter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notifies the end of a filtering operation.", "history": "Added in API level 1", "FullName": "public void onFilterComplete (int count)"}, "setText(java.lang.CharSequence, boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["boolean", "boolean: If false, no filtering will be performed as a result of this call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#widget#TextView#setText_E@, except that it can disable filtering.", "history": "added in API level 17", "FullName": "public void setText (CharSequence text, boolean filter)"}, "convertSelectionToString(java.lang.Object)": {"Returns": [["@B_java#lang#CharSequence_E@", "a sequence of characters representing the selected suggestion"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the item selected by the user for completion"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the selected item from the drop down list into a sequence of character that can be used in the edit box.", "history": "Added in API level 1", "FullName": "protected CharSequence convertSelectionToString (Object selectedItem)"}, "getCompletionHint()": {"Returns": [["@B_java#lang#CharSequence_E@", "The hint text, if any"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#setCompletionHint_E@"], "Permissions": [], "Description": "Gets the optional hint text displayed at the bottom of the the matching list.", "history": "Added in API level 16", "FullName": "public CharSequence getCompletionHint ()"}, "setOnItemSelectedListener(android.widget.AdapterView.OnItemSelectedListener)": {"Returns": [], "Parameters": [["@B_android#widget#AdapterView#OnItemSelectedListener_E@", "AdapterView.OnItemSelectedListener: the item selected listener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that will be notified when the user selects an item in the drop down list.", "history": "Added in API level 1", "FullName": "public void setOnItemSelectedListener (AdapterView.OnItemSelectedListener l)"}, "setInputMethodMode(int)": {"Returns": [], "Parameters": [["int", "int: speficies the input method mode. use one of the following values: @B_android#widget#ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE_E@ IME Displayed if the auto-complete box is focusable. @B_android#widget#ListPopupWindow#INPUT_METHOD_NEEDED_E@ Always display the IME. @B_android#widget#ListPopupWindow#INPUT_METHOD_NOT_NEEDED_E@. The auto-complete suggestions are always displayed, even if the suggestions cover/hide the input method. Value is @B_android#widget#ListPopupWindow#INPUT_METHOD_FROM_FOCUSABLE_E@, @B_android#widget#ListPopupWindow#INPUT_METHOD_NEEDED_E@, or @B_android#widget#ListPopupWindow#INPUT_METHOD_NOT_NEEDED_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use this method to specify when the IME should be displayed. This function can be used to prevent the dropdown from obscuring the IME.", "history": "Added in API level 29", "FullName": "public void setInputMethodMode (int mode)"}, "getDropDownHeight()": {"Returns": [["int", "the height for the drop down list"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current height for the auto-complete drop down list. This can be a fixed width, or @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@ to fill the screen, or @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ to fit the width of its anchor view.", "history": "Added in API level 4", "FullName": "public int getDropDownHeight ()"}, "setListSelection(int)": {"Returns": [], "Parameters": [["int", "int: The position to move the selector to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the position of the dropdown view selection.", "history": "Added in API level 3", "FullName": "public void setListSelection (int position)"}, "setOnDismissListener(android.widget.AutoCompleteTextView.OnDismissListener)": {"Returns": [], "Parameters": [["@B_android#widget#AutoCompleteTextView#OnDismissListener_E@", "AutoCompleteTextView.OnDismissListener: Listener to invoke when completions are dismissed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener that will be invoked whenever the AutoCompleteTextView's list of completions is dismissed.", "history": "Added in API level 17", "FullName": "public void setOnDismissListener (AutoCompleteTextView.OnDismissListener dismissListener)"}, "setThreshold(int)": {"Returns": [], "Parameters": [["int", "int: the number of characters to type before the drop down is shown"]], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#getThreshold_E@"], "Permissions": [], "Description": "Specifies the minimum number of characters the user has to type in the edit box before the drop down list is shown. When threshold is less than or equals 0, a threshold of 1 is applied.", "history": "Added in API level 1", "FullName": "public void setThreshold (int threshold)"}, "setAdapter(T)": {"Returns": [], "Parameters": [["T", "T: the adapter holding the auto completion data"]], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#getAdapter_E@", "@B_android#widget#Filterable_E@", "@B_android#widget#ListAdapter_E@"], "Permissions": [], "Description": "Changes the list of data used for auto completion. The provided list must be a filterable list adapter. The caller is still responsible for managing any resources used by the adapter. Notably, when the AutoCompleteTextView is closed or released, the adapter is not notified. A common case is the use of @B_android#widget#CursorAdapter_E@, which contains a @B_android#database#Cursor_E@ that must be closed. This can be done automatically (see @B_android#app#Activity#startManagingCursor_E@), or by manually closing the cursor when the AutoCompleteTextView is dismissed.", "history": "Added in API level 1", "FullName": "public void setAdapter (T adapter)"}, "setDropDownVerticalOffset(int)": {"Returns": [], "Parameters": [["int", "int: the vertical offset"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the vertical offset used for the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public void setDropDownVerticalOffset (int offset)"}, "replaceText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the selected suggestion in the drop down list"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the text completion by replacing the current text by the selected item. Subclasses should override this method to avoid replacing the whole content of the edit box.", "history": "Added in API level 1", "FullName": "protected void replaceText (CharSequence text)"}, "isPopupShowing()": {"Returns": [["boolean", "true if the popup menu is showing, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the popup menu is showing.", "history": "Added in API level 1", "FullName": "public boolean isPopupShowing ()"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onDetachedFromWindow ()"}, "setValidator(android.widget.AutoCompleteTextView.Validator)": {"Returns": [], "Parameters": [["@B_android#widget#AutoCompleteTextView#Validator_E@", "AutoCompleteTextView.Validator: The validator used to validate the text entered in this widget."]], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#getValidator_E@", "@B_android#widget#AutoCompleteTextView#performValidation_E@"], "Permissions": [], "Description": "Sets the validator used to perform text validation.", "history": "Added in API level 1", "FullName": "public void setValidator (AutoCompleteTextView.Validator validator)"}, "getValidator()": {"Returns": [["@B_android#widget#AutoCompleteTextView#Validator_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#setValidator_E@", "@B_android#widget#AutoCompleteTextView#performValidation_E@"], "Permissions": [], "Description": "Returns the Validator set with @B_android#widget#AutoCompleteTextView#setValidator_E@, or null if it was not set.", "history": "Added in API level 1", "FullName": "public AutoCompleteTextView.Validator getValidator ()"}, "setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: the drawable to set as the background"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the background of the auto-complete drop-down list.", "history": "Added in API level 5", "FullName": "public void setDropDownBackgroundDrawable (Drawable d)"}, "onDisplayHint(int)": {"Returns": [], "Parameters": [["int", "int: A hint about whether or not this view is displayed: @B_android#view#View#VISIBLE_E@ or @B_android#view#View#INVISIBLE_E@. Value is @B_android#view#View#VISIBLE_E@, @B_android#view#View#INVISIBLE_E@, or @B_android#view#View#GONE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gives this view a hint about whether is displayed or not. For instance, when a View moves out of the screen, it might receives a display hint indicating the view is not displayed. Applications should not rely on this hint as there is no guarantee that they will receive one.", "history": "Added in API level 8", "FullName": "protected void onDisplayHint (int hint)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "enoughToFilter()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the amount of text in the field meets or exceeds the @B_android#widget#AutoCompleteTextView#getThreshold_E@ requirement. You can override this to impose a different standard for when filtering will be triggered.", "history": "Added in API level 1", "FullName": "public boolean enoughToFilter ()"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: a key code that represents the button pressed, from @B_android#view#KeyEvent_E@"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the KeyEvent object that defines the button action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: perform press of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@ or @B_android#view#KeyEvent#KEYCODE_ENTER_E@ is released, if the view is enabled and clickable. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "getItemClickListener()": {"Returns": [["@B_android#widget#AdapterView#OnItemClickListener_E@", "the item click listener"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#widget#AutoCompleteTextView#getOnItemClickListener_E@ intead Returns the listener that is notified whenever the user clicks an item in the drop down list.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public AdapterView.OnItemClickListener getItemClickListener ()"}, "setCompletionHint(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to be displayed to the user"]], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#getCompletionHint_E@"], "Permissions": [], "Description": "Sets the optional hint text that is displayed at the bottom of the the matching list. This can be used as a cue to the user on how to best use the list, or to provide extra information.", "history": "Added in API level 1", "FullName": "public void setCompletionHint (CharSequence hint)"}, "performCompletion()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the text completion by converting the selected item from the drop down list into a string, replacing the text box's content with this string and finally dismissing the drop down menu.", "history": "Added in API level 1", "FullName": "public void performCompletion ()"}, "performValidation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#AutoCompleteTextView#getValidator_E@", "@B_android#widget#AutoCompleteTextView#setValidator_E@"], "Permissions": [], "Description": "If a validator was set on this view and the current string is not valid, ask the validator to fix it.", "history": "Added in API level 1", "FullName": "public void performValidation ()"}, "AutoCompleteTextView(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The Context the view is running in, through which it can access the current theme, resources, etc."], ["@B_android#util#AttributeSet_E@", "AttributeSet: The attributes of the XML tag that is inflating the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new auto-complete text view with the given context's theme and the supplied attribute set.", "history": "Added in API level 1", "FullName": "public AutoCompleteTextView (Context context, AttributeSet attrs)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: A key code that represents the button pressed, from @B_android#view#KeyEvent_E@."], ["@B_android#view#KeyEvent_E@", "KeyEvent: The KeyEvent object that defines the button action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: perform clicking of the view when @B_android#view#KeyEvent#KEYCODE_DPAD_CENTER_E@, @B_android#view#KeyEvent#KEYCODE_ENTER_E@ or @B_android#view#KeyEvent#KEYCODE_SPACE_E@ is released. Key presses in software keyboards will generally NOT trigger this listener, although some may elect to do so in some situations. Do not rely on this to catch software key presses.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setText(java.lang.CharSequence,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["boolean", "boolean: If false, no filtering will be performed as a result of this call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Like @B_android#widget#TextView#setText_E@, except that it can disable filtering.", "history": "Added in API level 17", "FullName": "public void setText (CharSequence text, boolean filter)"}, "setDropDownAnchor(int)": {"Returns": [], "Parameters": [["int", "int: the id to anchor the drop down list view to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view to which the auto-complete drop down list should anchor. The view corresponding to this id will not be loaded until the next time it is needed to avoid loading a view which is not yet instantiated.", "history": "Added in API level 3", "FullName": "public void setDropDownAnchor (int id)"}, "showDropDown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Displays the drop down on screen.", "history": "Added in API level 1", "FullName": "public void showDropDown ()"}, "performFiltering(java.lang.CharSequence,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the filtering pattern"], ["int", "int: the last character inserted in the edit box; beware that this will be null when text is being added through a soft input method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts filtering the content of the drop down list. The filtering pattern is the content of the edit box. Subclasses should override this method to filter with a different pattern, for instance a substring of text.", "history": "Added in API level 1", "FullName": "protected void performFiltering (CharSequence text, int keyCode)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#TextView_E@", "@B_android#widget#EditText_E@"], "ClassName": "android.widget.AutoCompleteTextView", "ClassDesc": "An editable text view that shows completion suggestions automatically while the user is typing. The list of suggestions is displayed in a drop down menu from which the user can choose an item to replace the content of the edit box with. The drop down can be dismissed at any time by pressing the back key or, if no item is selected in the drop down, by pressing the enter/dpad center key. The list of suggestions is obtained from a data adapter and appears only after a given number of characters defined by @B_android#widget#AutoCompleteTextView#getThreshold_E@. The following code snippet shows how to create a text view which suggests various countries names while the user is typing: See the"}