{"Functions": {"getMinVelocity()": {"Returns": [["float", "the minimum velocity that will be detected"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the currently configured minimum velocity. Any flings with a magnitude less than this value in pixels per second. Callback methods accepting a velocity will receive zero as a velocity value if the real detected velocity was below this threshold.", "history": "added in version 22.0.0", "FullName": "float getMinVelocity ()"}, "checkTouchSlop(int, int)": {"Returns": [["boolean", "true if the slop threshold has been crossed, false otherwise"]], "Parameters": [["int", "int: Combination of direction flags, see @B_android#support#v4#widget#ViewDragHelper#DIRECTION_HORIZONTAL_E@, @B_android#support#v4#widget#ViewDragHelper#DIRECTION_VERTICAL_E@, @B_android#support#v4#widget#ViewDragHelper#DIRECTION_ALL_E@"], ["int", "int: ID of the pointer to slop check as specified by MotionEvent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the specified pointer tracked in the current gesture has crossed the required slop threshold. This depends on internal state populated by @B_android#support#v4#widget#ViewDragHelper#shouldInterceptTouchEvent_E@ or @B_android#support#v4#widget#ViewDragHelper#processTouchEvent_E@. You should only rely on the results of this method after all currently available touch data has been provided to one of these two methods.", "history": "added in version 22.0.0", "FullName": "boolean checkTouchSlop (int directions, int pointerId)"}, "getCapturedView()": {"Returns": [["@B_android#view#View_E@", "The currently captured view, or null if no view has been captured."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "View getCapturedView ()"}, "getViewDragState()": {"Returns": [["int", "The current drag state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current drag state of this helper. This will return one of @B_android#support#v4#widget#ViewDragHelper#STATE_IDLE_E@, @B_android#support#v4#widget#ViewDragHelper#STATE_DRAGGING_E@ or @B_android#support#v4#widget#ViewDragHelper#STATE_SETTLING_E@.", "history": "added in version 22.0.0", "FullName": "int getViewDragState ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The result of a call to this method is equivalent to @B_android#support#v4#widget#ViewDragHelper#processTouchEvent_E@ receiving an ACTION_CANCEL event.", "history": "added in version 22.0.0", "FullName": "void cancel ()"}, "setMinVelocity(float)": {"Returns": [], "Parameters": [["float", "float: Minimum velocity to detect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the minimum velocity that will be detected as having a magnitude greater than zero in pixels per second. Callback methods accepting a velocity will be clamped appropriately.", "history": "added in version 22.0.0", "FullName": "void setMinVelocity (float minVel)"}, "isCapturedViewUnder(int, int)": {"Returns": [["boolean", "true if the captured view is under the given point, false otherwise"]], "Parameters": [["int", "int: X position to test in the parent's coordinate system"], ["int", "int: Y position to test in the parent's coordinate system"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if the currently captured view is under the given point in the parent view's coordinate system. If there is no captured view this method will return false.", "history": "added in version 22.0.0", "FullName": "boolean isCapturedViewUnder (int x, int y)"}, "isEdgeTouched(int, int)": {"Returns": [["boolean", "true if any of the edges specified were initially touched in the current gesture"]], "Parameters": [["int", "int: Edges to check for an initial edge touch. See @B_android#support#v4#widget#ViewDragHelper#EDGE_LEFT_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_TOP_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_RIGHT_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_BOTTOM_E@ and @B_android#support#v4#widget#ViewDragHelper#EDGE_ALL_E@"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if any of the edges specified were initially touched by the pointer with the specified ID. If there is no currently active gesture or if there is no pointer with the given ID currently down this method will return false.", "history": "added in version 22.0.0", "FullName": "boolean isEdgeTouched (int edges, int pointerId)"}, "findTopChildUnder(int, int)": {"Returns": [["@B_android#view#View_E@", "The topmost child view under (x, y) or null if none found."]], "Parameters": [["int", "int: X position to test in the parent's coordinate system"], ["int", "int: Y position to test in the parent's coordinate system"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Find the topmost child under the given point within the parent view's coordinate system. The child order is determined using @B_android#support#v4#widget#ViewDragHelper#Callback#getOrderedChildIndex_E@.", "history": "added in version 22.0.0", "FullName": "View findTopChildUnder (int x, int y)"}, "setEdgeTrackingEnabled(int)": {"Returns": [], "Parameters": [["int", "int: Combination of edge flags describing the edges to watch"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ViewDragHelper_E@"], "Permissions": [], "Description": "Enable edge tracking for the selected edges of the parent view. The callback's @B_android#support#v4#widget#ViewDragHelper#Callback#onEdgeTouched_E@ and @B_android#support#v4#widget#ViewDragHelper#Callback#onEdgeDragStarted_E@ methods will only be invoked for edges for which edge tracking has been enabled.", "history": "added in version 22.0.0", "FullName": "void setEdgeTrackingEnabled (int edgeFlags)"}, "continueSettling(boolean)": {"Returns": [["boolean", "true if settle is still in progress"]], "Parameters": [["boolean", "boolean: true if state callbacks should be deferred via posted message. Set this to true if you are calling this method from @B_android#view#View#computeScroll_E@ or similar methods invoked as part of layout or drawing."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the captured settling view by the appropriate amount for the current time. If continueSettling returns true, the caller should call it again on the next frame to continue.", "history": "added in version 22.0.0", "FullName": "boolean continueSettling (boolean deferCallbacks)"}, "checkTouchSlop(int)": {"Returns": [["boolean", "true if the slop threshold has been crossed, false otherwise"]], "Parameters": [["int", "int: Combination of direction flags, see @B_android#support#v4#widget#ViewDragHelper#DIRECTION_HORIZONTAL_E@, @B_android#support#v4#widget#ViewDragHelper#DIRECTION_VERTICAL_E@, @B_android#support#v4#widget#ViewDragHelper#DIRECTION_ALL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if any pointer tracked in the current gesture has crossed the required slop threshold. This depends on internal state populated by @B_android#support#v4#widget#ViewDragHelper#shouldInterceptTouchEvent_E@ or @B_android#support#v4#widget#ViewDragHelper#processTouchEvent_E@. You should only rely on the results of this method after all currently available touch data has been provided to one of these two methods.", "history": "added in version 22.0.0", "FullName": "boolean checkTouchSlop (int directions)"}, "isViewUnder(android.view.View, int, int)": {"Returns": [["boolean", "true if the supplied view is under the given point, false otherwise"]], "Parameters": [["@B_android#view#View_E@", "View: Child view of the parent to hit test"], ["int", "int: X position to test in the parent's coordinate system"], ["int", "int: Y position to test in the parent's coordinate system"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determine if the supplied view is under the given point in the parent view's coordinate system.", "history": "added in version 22.0.0", "FullName": "boolean isViewUnder (View view, int x, int y)"}, "isPointerDown(int)": {"Returns": [["boolean", "true if the pointer with the given ID is still down"]], "Parameters": [["int", "int: pointer ID to check; corresponds to IDs provided by MotionEvent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the given pointer ID represents a pointer that is currently down (to the best of the ViewDragHelper's knowledge). The state used to report this information is populated by the methods @B_android#support#v4#widget#ViewDragHelper#shouldInterceptTouchEvent_E@ or @B_android#support#v4#widget#ViewDragHelper#processTouchEvent_E@. If one of these methods has not been called for all relevant MotionEvents to track, the information reported by this method may be stale or incorrect.", "history": "added in version 22.0.0", "FullName": "boolean isPointerDown (int pointerId)"}, "processTouchEvent(android.view.MotionEvent)": {"Returns": [], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The touch event received by the parent view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Process a touch event received by the parent view. This method will dispatch callback events as needed before returning. The parent view's onTouchEvent implementation should call this.", "history": "added in version 22.0.0", "FullName": "void processTouchEvent (MotionEvent ev)"}, "captureChildView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child view to capture"], ["int", "int: ID of the pointer that is dragging the captured child view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Capture a specific child view for dragging within the parent. The callback will be notified but @B_android#support#v4#widget#ViewDragHelper#Callback#tryCaptureView_E@ will not be asked permission to capture this view.", "history": "added in version 22.0.0", "FullName": "void captureChildView (View childView, int activePointerId)"}, "getEdgeSize()": {"Returns": [["int", "The size of an edge in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#widget#ViewDragHelper#setEdgeTrackingEnabled_E@"], "Permissions": [], "Description": "Return the size of an edge. This is the range in pixels along the edges of this view that will actively detect edge touches or drags if edge tracking is enabled.", "history": "added in version 22.0.0", "FullName": "int getEdgeSize ()"}, "abort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#support#v4#widget#ViewDragHelper#cancel_E@, but also abort all motion in progress and snap to the end of any animation.", "history": "added in version 22.0.0", "FullName": "void abort ()"}, "getTouchSlop()": {"Returns": [["int", "The minimum distance in pixels that the user must travel to initiate a drag"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getTouchSlop ()"}, "getActivePointerId()": {"Returns": [["int", "The ID of the pointer currently dragging the captured view, or @B_android#support#v4#widget#ViewDragHelper#INVALID_POINTER_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getActivePointerId ()"}, "flingCapturedView(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Minimum X position for the view's left edge"], ["int", "int: Minimum Y position for the view's top edge"], ["int", "int: Maximum X position for the view's left edge"], ["int", "int: Maximum Y position for the view's top edge"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Settle the captured view based on standard free-moving fling behavior. The caller should invoke @B_android#support#v4#widget#ViewDragHelper#continueSettling_E@ on each subsequent frame to continue the motion until it returns false.", "history": "added in version 22.0.0", "FullName": "void flingCapturedView (int minLeft, int minTop, int maxLeft, int maxTop)"}, "smoothSlideViewTo(android.view.View, int, int)": {"Returns": [["boolean", "true if animation should continue through @B_android#support#v4#widget#ViewDragHelper#continueSettling_E@ calls"]], "Parameters": [["@B_android#view#View_E@", "View: Child view to capture and animate"], ["int", "int: Final left position of child"], ["int", "int: Final top position of child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Animate the view child to the given (left, top) position. If this method returns true, the caller should invoke @B_android#support#v4#widget#ViewDragHelper#continueSettling_E@ on each subsequent frame to continue the motion until it returns false. If this method returns false there is no further work to do to complete the movement. This operation does not count as a capture event, though @B_android#support#v4#widget#ViewDragHelper#getCapturedView_E@ will still report the sliding view while the slide is in progress.", "history": "added in version 22.0.0", "FullName": "boolean smoothSlideViewTo (View child, int finalLeft, int finalTop)"}, "isEdgeTouched(int)": {"Returns": [["boolean", "true if any of the edges specified were initially touched in the current gesture"]], "Parameters": [["int", "int: Edges to check for an initial edge touch. See @B_android#support#v4#widget#ViewDragHelper#EDGE_LEFT_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_TOP_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_RIGHT_E@, @B_android#support#v4#widget#ViewDragHelper#EDGE_BOTTOM_E@ and @B_android#support#v4#widget#ViewDragHelper#EDGE_ALL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if any of the edges specified were initially touched in the currently active gesture. If there is no currently active gesture this method will return false.", "history": "added in version 22.0.0", "FullName": "boolean isEdgeTouched (int edges)"}, "settleCapturedViewAt(int, int)": {"Returns": [["boolean", "true if animation should continue through @B_android#support#v4#widget#ViewDragHelper#continueSettling_E@ calls"]], "Parameters": [["int", "int: Settled left edge position for the captured view"], ["int", "int: Settled top edge position for the captured view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Settle the captured view at the given (left, top) position. The appropriate velocity from prior motion will be taken into account. If this method returns true, the caller should invoke @B_android#support#v4#widget#ViewDragHelper#continueSettling_E@ on each subsequent frame to continue the motion until it returns false. If this method returns false there is no further work to do to complete the movement.", "history": "added in version 22.0.0", "FullName": "boolean settleCapturedViewAt (int finalLeft, int finalTop)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.widget.ViewDragHelper", "ClassDesc": "ViewDragHelper is a utility class for writing custom ViewGroups. It offers a number of useful operations and state tracking for allowing a user to drag and reposition views within their parent ViewGroup."}