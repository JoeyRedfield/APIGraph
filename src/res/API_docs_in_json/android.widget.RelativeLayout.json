{"Functions": {"onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void requestLayout ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#RelativeLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public RelativeLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "getGravity()": {"Returns": [["int", "the gravity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#setGravity_E@", "@B_android#view#Gravity_E@"], "Permissions": [], "Description": "Describes how the child views are positioned.", "history": "Added in API level 16", "FullName": "public int getGravity ()"}, "RelativeLayout(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public RelativeLayout (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "shouldDelayChildPressedState()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the pressed state should be delayed for children or descendants of this ViewGroup. Generally, this should be done for containers that can scroll, such as a List. This prevents the pressed state from appearing when the user is actually trying to scroll the content. The default implementation returns true for compatibility reasons. Subclasses that do not scroll should generally override this method and return false.", "history": "Added in API level 14", "FullName": "public boolean shouldDelayChildPressedState ()"}, "setIgnoreGravity(int)": {"Returns": [], "Parameters": [["int", "int: The id of the View to be ignored by gravity, or 0 if no View should be ignored."]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#setGravity_E@"], "Permissions": [], "Description": "Defines which View is ignored when the gravity is applied. This setting has no effect if the gravity is Gravity.START | Gravity.TOP.", "history": "Added in API level 1", "FullName": "public void setIgnoreGravity (int viewId)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "RelativeLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout (Context context)"}, "setHorizontalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setHorizontalGravity (int horizontalGravity)"}, "getBaseline()": {"Returns": [["int", "the offset of the baseline within the widget's bounds or -1 if baseline alignment is not supported"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the offset of the widget's text baseline from the widget's top boundary. If this widget does not support baseline alignment, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getBaseline ()"}, "getIgnoreGravity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the id of the View to be ignored by gravity", "history": "Added in API level 29", "FullName": "public int getIgnoreGravity ()"}, "setVerticalGravity(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setVerticalGravity (int verticalGravity)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: See @B_android#view#Gravity_E@"]], "Throws": [], "SeeAlso": ["@B_android#widget#RelativeLayout#setHorizontalGravity_E@", "@B_android#widget#RelativeLayout#setVerticalGravity_E@"], "Permissions": [], "Description": "Describes how the child views are positioned. Defaults to Gravity.START | Gravity.TOP. Note that since RelativeLayout considers the positioning of each child relative to one another to be significant, setting gravity will affect the positioning of all children as a single unit within the parent. This happens after children have been relatively positioned.", "history": "Added in API level 1", "FullName": "public void setGravity (int gravity)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1", "FullName": "protected ViewGroup.LayoutParams generateLayoutParams (ViewGroup.LayoutParams lp)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#view#ViewGroup#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@, a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and no spanning.", "history": "Added in API level 1", "FullName": "protected ViewGroup.LayoutParams generateDefaultLayoutParams ()"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "RelativeLayout(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout (Context context, AttributeSet attrs, int defStyleAttr)"}, "RelativeLayout(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public RelativeLayout (Context context, AttributeSet attrs)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@"], "ClassName": "android.widget.RelativeLayout", "ClassDesc": "A Layout where the positions of the children can be described in relation to each other or to the parent. Note that you cannot have a circular dependency between the size of the RelativeLayout and the position of its children. For example, you cannot have a RelativeLayout whose height is set to @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@ and a child set to @B_android#widget#RelativeLayout#ALIGN_PARENT_BOTTOM_E@. @B_android#view#View#MeasureSpec_E@ values. (See @B_android#view#View#MeasureSpec#makeMeasureSpec_E@ for more details.) This was triggered when a RelativeLayout container was placed in a scrolling container, such as a ScrollView or HorizontalScrollView. If a custom view not equipped to properly measure with the MeasureSpec mode @B_android#view#View#MeasureSpec#UNSPECIFIED_E@ was placed in a RelativeLayout, this would silently work anyway as RelativeLayout would pass a very large @B_android#view#View#MeasureSpec#AT_MOST_E@ MeasureSpec instead. This behavior has been preserved for apps that set android:targetSdkVersion=\"17\" or older in their manifest's uses-sdk tag for compatibility. Apps targeting SDK version 18 or newer will receive the correct behavior. See the Also see @B_android#widget#RelativeLayout#LayoutParams_E@ for layout attributes"}