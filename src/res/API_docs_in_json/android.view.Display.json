{"Functions": {"isWideColorGamut()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this display can be used to display wide color gamut content. This does not necessarily mean the device itself can render wide color gamut content. To ensure wide color gamut content can be produced, refer to @B_android#content#res#Configuration#isScreenWideColorGamut_E@.", "history": "Added in API level 26", "FullName": "public boolean isWideColorGamut ()"}, "getFlags()": {"Returns": [["int", "The display flags."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Display_E@"], "Permissions": [], "Description": "Returns a combination of flags that describe the capabilities of the display.", "history": "Added in API level 17", "FullName": "public int getFlags ()"}, "getSupportedModes()": {"Returns": [["@B_android#view#Display#Mode_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the supported modes of this display.", "history": "Added in API level 23", "FullName": "public Mode[] getSupportedModes ()"}, "getDisplayId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the display id. Each logical display has a unique id. The default display has id @B_android#view#Display#DEFAULT_DISPLAY_E@.", "history": "Added in API level 1", "FullName": "public int getDisplayId ()"}, "getPresentationDeadlineNanos()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is how far in advance a buffer must be queued for presentation at a given time. If you want a buffer to appear on the screen at time N, you must submit the buffer before (N - presentationDeadline). The desired presentation time for GLES rendering may be set with @B_android#opengl#EGLExt#eglPresentationTimeANDROID_E@. For video decoding, use @B_android#media#MediaCodec#releaseOutputBuffer_E@. Times are expressed in nanoseconds, using the system monotonic clock (@B_java#lang#System#nanoTime_E@).", "history": "Added in API level 21", "FullName": "public long getPresentationDeadlineNanos ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getRectSize(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: A @B_android#graphics#Rect_E@ object to receive the size information."]], "Throws": [], "SeeAlso": ["@B_android#view#Display#getSize_E@"], "Permissions": [], "Description": "Gets the size of the display as a rectangle, in pixels.", "history": "Added in API level 13", "FullName": "public void getRectSize (Rect outSize)"}, "getOrientation()": {"Returns": [["int", "orientation of this display. Value is @B_android#view#Surface#ROTATION_0_E@, @B_android#view#Surface#ROTATION_90_E@, @B_android#view#Surface#ROTATION_180_E@, or @B_android#view#Surface#ROTATION_270_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#Display#getRotation_E@", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getOrientation ()"}, "getMetrics(android.util.DisplayMetrics)": {"Returns": [], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: A @B_android#util#DisplayMetrics_E@ object to receive the metrics."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets display metrics that describe the size and density of this display. The size returned by this method does not necessarily represent the actual raw size (native resolution) of the display. 1. The returned size may be adjusted to exclude certain system decor elements that are always visible. 2. It may be scaled to provide compatibility with older applications that were originally designed for smaller displays. 3. It can be different depending on the WindowManager to which the display belongs. - If requested from non-Activity context (e.g. Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE)) metrics will report the size of the entire display based on current rotation and with subtracted system decoration areas. - If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE)) resulting metrics will correspond to current app window metrics. In this case the size can be smaller than physical size in multi-window mode.", "history": "Added in API level 1", "FullName": "public void getMetrics (DisplayMetrics outMetrics)"}, "getPixelFormat()": {"Returns": [["int", "One of the constants defined in @B_android#graphics#PixelFormat_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer supported. The result is always @B_android#graphics#PixelFormat#RGBA_8888_E@. Gets the pixel format of the display.", "history": "Added in API level 1 Deprecated in API level 17", "FullName": "public int getPixelFormat ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The display's name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the name of the display. Note that some displays may be renamed by the user.", "history": "Added in API level 17", "FullName": "public String getName ()"}, "getState()": {"Returns": [["int", "The state of the display: one of @B_android#view#Display#STATE_OFF_E@, @B_android#view#Display#STATE_ON_E@, @B_android#view#Display#STATE_DOZE_E@, @B_android#view#Display#STATE_DOZE_SUSPEND_E@, @B_android#view#Display#STATE_ON_SUSPEND_E@, or @B_android#view#Display#STATE_UNKNOWN_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of the display, such as whether it is on or off.", "history": "Added in API level 20", "FullName": "public int getState ()"}, "getAppVsyncOffsetNanos()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the app VSYNC offset, in nanoseconds. This is a positive value indicating the phase offset of the VSYNC events provided by Choreographer relative to the display refresh. For example, if Choreographer reports that the refresh occurred at time N, it actually occurred at (N - appVsyncOffset). Apps generally do not need to be aware of this. It's only useful for fine-grained A/V synchronization.", "history": "Added in API level 21", "FullName": "public long getAppVsyncOffsetNanos ()"}, "getRotation()": {"Returns": [["int", "Value is @B_android#view#Surface#ROTATION_0_E@, @B_android#view#Surface#ROTATION_90_E@, @B_android#view#Surface#ROTATION_180_E@, or @B_android#view#Surface#ROTATION_270_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the rotation of the screen from its \"natural\" orientation. The returned value may be @B_android#view#Surface#ROTATION_0_E@ (no rotation), @B_android#view#Surface#ROTATION_90_E@, @B_android#view#Surface#ROTATION_180_E@, or @B_android#view#Surface#ROTATION_270_E@. For example, if a device has a naturally tall screen, and the user has turned it on its side to go into a landscape orientation, the value returned here may be either @B_android#view#Surface#ROTATION_90_E@ or @B_android#view#Surface#ROTATION_270_E@ depending on the direction it was turned. The angle is the rotation of the drawn graphics on the screen, which is the opposite direction of the physical rotation of the device. For example, if the device is rotated 90 degrees counter-clockwise, to compensate rendering will be rotated by 90 degrees clockwise and thus the returned value here will be @B_android#view#Surface#ROTATION_90_E@.", "history": "Added in API level 8", "FullName": "public int getRotation ()"}, "getMode()": {"Returns": [["@B_android#view#Display#Mode_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the active mode of the display.", "history": "Added in API level 23", "FullName": "public Display.Mode getMode ()"}, "getSupportedRefreshRates()": {"Returns": [["float[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#view#Display#getSupportedModes_E@ instead Get the supported refresh rates of this display in frames per second. This method only returns refresh rates for the display's default modes. For more options, use @B_android#view#Display#getSupportedModes_E@.", "history": "Added in API level 21 Deprecated in API level 23", "FullName": "public float[] getSupportedRefreshRates ()"}, "getPreferredWideGamutColorSpace()": {"Returns": [["@B_android#graphics#ColorSpace_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the preferred wide color space of the Display. The returned wide gamut color space is based on hardware capability and is preferred by the composition pipeline. Returns null if the display doesn't support wide color gamut. @B_android#view#Display#isWideColorGamut_E@.", "history": "Added in API level 29", "FullName": "public ColorSpace getPreferredWideGamutColorSpace ()"}, "getRefreshRate()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the refresh rate of this display in frames per second.", "history": "Added in API level 1", "FullName": "public float getRefreshRate ()"}, "getSize(android.graphics.Point)": {"Returns": [], "Parameters": [["@B_android#graphics#Point_E@", "Point: A @B_android#graphics#Point_E@ object to receive the size information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the size of the display, in pixels. Value returned by this method does not necessarily represent the actual raw size (native resolution) of the display. 1. The returned size may be adjusted to exclude certain system decor elements that are always visible. 2. It may be scaled to provide compatibility with older applications that were originally designed for smaller displays. 3. It can be different depending on the WindowManager to which the display belongs. - If requested from non-Activity context (e.g. Application context via (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE)) it will report the size of the entire display based on current rotation and with subtracted system decoration areas. - If requested from activity (either using getWindowManager() or (WindowManager) getSystemService(Context.WINDOW_SERVICE)) resulting size will correspond to current app window size. In this case it can be smaller than physical size in multi-window mode. Typically for the purposes of layout apps should make a request from activity context to obtain size available for the app content.", "history": "Added in API level 13", "FullName": "public void getSize (Point outSize)"}, "getCutout()": {"Returns": [["@B_android#view#DisplayCutout_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#DisplayCutout_E@"], "Permissions": [], "Description": "Returns the @B_android#view#DisplayCutout_E@, or null if there is none.", "history": "Added in API level 29", "FullName": "public DisplayCutout getCutout ()"}, "getRealMetrics(android.util.DisplayMetrics)": {"Returns": [], "Parameters": [["@B_android#util#DisplayMetrics_E@", "DisplayMetrics: A @B_android#util#DisplayMetrics_E@ object to receive the metrics."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets display metrics based on the real size of this display. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).", "history": "Added in API level 17", "FullName": "public void getRealMetrics (DisplayMetrics outMetrics)"}, "getHdrCapabilities()": {"Returns": [["@B_android#view#Display#HdrCapabilities_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Display#isHdr_E@"], "Permissions": [], "Description": "Returns the display's HDR capabilities.", "history": "Added in API level 24", "FullName": "public Display.HdrCapabilities getHdrCapabilities ()"}, "getRealSize(android.graphics.Point)": {"Returns": [], "Parameters": [["@B_android#graphics#Point_E@", "Point: Set to the real size of the display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the real size of the display without subtracting any window decor or applying any compatibility scale factors. The size is adjusted based on the current rotation of the display. The real size may be smaller than the physical size of the screen when the window manager is emulating a smaller display (using adb shell wm size).", "history": "Added in API level 17", "FullName": "public void getRealSize (Point outSize)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#Display#getSize_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getHeight ()"}, "isValid()": {"Returns": [["boolean", "True if the display is still valid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this display is still valid, false if the display has been removed. If the display is invalid, then the methods of this class will continue to report the most recently observed display information. However, it is unwise (and rather fruitless) to continue using a @B_android#view#Display_E@ object after the display's demise. It's possible for a display that was previously invalid to become valid again if a display with the same id is reconnected.", "history": "Added in API level 17", "FullName": "public boolean isValid ()"}, "isHdr()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#Display#getHdrCapabilities_E@", "@B_android#view#Display#HdrCapabilities#getSupportedHdrTypes_E@"], "Permissions": [], "Description": "Returns whether this display supports any HDR type.", "history": "Added in API level 26", "FullName": "public boolean isHdr ()"}, "getCurrentSizeRange(android.graphics.Point,android.graphics.Point)": {"Returns": [], "Parameters": [["@B_android#graphics#Point_E@", "Point: Filled in with the smallest width and height that the application will encounter, in pixels (not dp units). The x (width) dimension here directly corresponds to @B_android#content#res#Configuration#smallestScreenWidthDp_E@, except the value here is in raw screen pixels rather than dp units. Your application may of course still get smaller space yet if, for example, a soft keyboard is being displayed."], ["@B_android#graphics#Point_E@", "Point: Filled in with the largest width and height that the application will encounter, in pixels (not dp units). Your application may of course still get larger space than this if, for example, screen decorations like the status bar are being hidden."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the range of display sizes an application can expect to encounter under normal operation, as long as there is no physical change in screen size. This is basically the sizes you will see as the orientation changes, taking into account whatever screen decoration there is in each rotation. For example, the status bar is always at the top of the screen, so it will reduce the height both in landscape and portrait, and the smallest height returned here will be the smaller of the two. This is intended for applications to get an idea of the range of sizes they will encounter while going through device rotations, to provide a stable UI through rotation. The sizes here take into account all standard system decorations that reduce the size actually available to the application: the status bar, navigation bar, system bar, etc. It does not take into account more transient elements like an IME soft keyboard.", "history": "Added in API level 16", "FullName": "public void getCurrentSizeRange (Point outSmallestSize, Point outLargestSize)"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#Display#getSize_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public int getWidth ()"}}, "Inheritance": [], "ClassName": "android.view.Display", "ClassDesc": "Provides information about the size and density of a logical display. The display area is described in two different ways. The application display area specifies the part of the display that may contain an application window, excluding the system decorations. The application display area may be smaller than the real display area because the system subtracts the space needed for decor elements such as the status bar. Use the following methods to query the application display area: @B_android#view#Display#getSize_E@, @B_android#view#Display#getRectSize_E@ and @B_android#view#Display#getMetrics_E@. The real display area specifies the part of the display that contains content including the system decorations. Even so, the real display area may be smaller than the physical size of the display if the window manager is emulating a smaller display using (adb shell wm size). Use the following methods to query the real display area: @B_android#view#Display#getRealSize_E@, @B_android#view#Display#getRealMetrics_E@. A logical display does not necessarily represent a particular physical display device such as the built-in screen or an external monitor. The contents of a logical display may be presented on one or more physical displays according to the devices that are currently attached and whether mirroring has been enabled."}