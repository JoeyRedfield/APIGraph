{"Functions": {"newDocument()": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new instance of a DOM Document object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain a new instance of a DOM @B_org#w3c#dom#Document_E@ object to build a DOM tree with.", "history": "Added in API level 1", "FullName": "public abstract Document newDocument ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset this DocumentBuilder to its original configuration. DocumentBuilder is reset to the same state as when it was created with @B_javax#xml#parsers#DocumentBuilderFactory#newDocumentBuilder_E@. reset() is designed to allow the reuse of existing DocumentBuilders thus saving resources associated with the creation of new DocumentBuilders. The reset DocumentBuilder is not guaranteed to have the same @B_org#xml#sax#EntityResolver_E@ or @B_org#xml#sax#ErrorHandler_E@ Objects, e.g. @B_java#lang#Object#equals_E@. It is guaranteed to have a functionally equal EntityResolver and ErrorHandler.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "parse(java.io.InputStream,java.lang.String)": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new DOM Document object."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: InputStream containing the content to be parsed."], ["@B_java#lang#String_E@", "String: Provide a base for resolving relative URIs."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given InputStream as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the InputStream is null.", "history": "Added in API level 1", "FullName": "public Document parse (InputStream is, String systemId)"}, "isXIncludeAware()": {"Returns": [["boolean", "the return value of the @B_javax#xml#parsers#DocumentBuilderFactory#isXIncludeAware_E@ when this parser was created from factory."]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": ["@B_javax#xml#parsers#DocumentBuilderFactory#setXIncludeAware_E@"], "Permissions": [], "Description": "Get the XInclude processing mode for this parser.", "history": "Added in API level 1", "FullName": "public boolean isXIncludeAware ()"}, "getSchema()": {"Returns": [["@B_javax#xml#validation#Schema_E@", "@B_javax#xml#validation#Schema_E@ being used or null if none in use"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "For backward compatibility, when implementations for earlier versions of JAXP is used, this exception will be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Get a reference to the the @B_javax#xml#validation#Schema_E@ being used by the XML processor. If no schema is being used, null is returned.", "history": "Added in API level 8", "FullName": "public Schema getSchema ()"}, "setErrorHandler(org.xml.sax.ErrorHandler)": {"Returns": [], "Parameters": [["@B_org#xml#sax#ErrorHandler_E@", "ErrorHandler: The ErrorHandler to be used by the parser."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the @B_org#xml#sax#ErrorHandler_E@ to be used by the parser. Setting this to null will result in the underlying implementation using it's own default implementation and behavior.", "history": "Added in API level 1", "FullName": "public abstract void setErrorHandler (ErrorHandler eh)"}, "parse(org.xml.sax.InputSource)": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new DOM Document object."]], "Parameters": [["@B_org#xml#sax#InputSource_E@", "InputSource: InputSource containing the content to be parsed."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given input source as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the InputSource is null null.", "history": "Added in API level 1", "FullName": "public abstract Document parse (InputSource is)"}, "setEntityResolver(org.xml.sax.EntityResolver)": {"Returns": [], "Parameters": [["@B_org#xml#sax#EntityResolver_E@", "EntityResolver: The EntityResolver to be used to resolve entities present in the XML document to be parsed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the @B_org#xml#sax#EntityResolver_E@ to be used to resolve entities present in the XML document to be parsed. Setting this to null will result in the underlying implementation using it's own default implementation and behavior.", "history": "Added in API level 1", "FullName": "public abstract void setEntityResolver (EntityResolver er)"}, "getDOMImplementation()": {"Returns": [["@B_org#w3c#dom#DOMImplementation_E@", "A new instance of a DOMImplementation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtain an instance of a @B_org#w3c#dom#DOMImplementation_E@ object.", "history": "Added in API level 1", "FullName": "public abstract DOMImplementation getDOMImplementation ()"}, "isValidating()": {"Returns": [["boolean", "true if this parser is configured to validate XML documents; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this parser is configured to validate XML documents.", "history": "Added in API level 1", "FullName": "public abstract boolean isValidating ()"}, "parse(java.io.InputStream)": {"Returns": [["@B_org#w3c#dom#Document_E@", "Document result of parsing the InputStream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: InputStream containing the content to be parsed."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given InputStream as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the InputStream is null.", "history": "Added in API level 1", "FullName": "public Document parse (InputStream is)"}, "DocumentBuilder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected constructor", "history": "Added in API level 1", "FullName": "protected DocumentBuilder ()"}, "parse(java.lang.String)": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new DOM Document object."]], "Parameters": [["@B_java#lang#String_E@", "String: The location of the content to be parsed."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given URI as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the URI is null null.", "history": "Added in API level 1", "FullName": "public Document parse (String uri)"}, "parse(java.io.File)": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new DOM Document object."]], "Parameters": [["@B_java#io#File_E@", "File: The file containing the XML to parse."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given file as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the File is null null.", "history": "Added in API level 1", "FullName": "public Document parse (File f)"}, "parse(java.io.InputStream, java.lang.String)": {"Returns": [["@B_org#w3c#dom#Document_E@", "A new DOM Document object."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: InputStream containing the content to be parsed."], ["@B_java#lang#String_E@", "String: Provide a base for resolving relative URIs."]], "Throws": [["@B_java#io#IOException_E@", "If any IO errors occur."], ["@B_org#xml#sax#SAXException_E@", "If any parse errors occur."]], "SeeAlso": ["@B_org#xml#sax#DocumentHandler_E@"], "Permissions": [], "Description": "Parse the content of the given InputStream as an XML document and return a new DOM @B_org#w3c#dom#Document_E@ object. An IllegalArgumentException is thrown if the InputStream is null.", "history": "added in API level 1", "FullName": "public Document parse (InputStream is, String systemId)"}, "isNamespaceAware()": {"Returns": [["boolean", "true if this parser is configured to understand namespaces; false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this parser is configured to understand namespaces.", "history": "Added in API level 1", "FullName": "public abstract boolean isNamespaceAware ()"}}, "Inheritance": [], "ClassName": "javax.xml.parsers.DocumentBuilder", "ClassDesc": "Defines the API to obtain DOM Document instances from an XML document. Using this class, an application programmer can obtain a @B_org#w3c#dom#Document_E@ from XML. An instance of this class can be obtained from the @B_javax#xml#parsers#DocumentBuilderFactory#newDocumentBuilder_E@ method. Once an instance of this class is obtained, XML can be parsed from a variety of input sources. These input sources are InputStreams, Files, URLs, and SAX InputSources. Note that this class reuses several classes from the SAX API. This does not require that the implementor of the underlying DOM implementation use a SAX parser to parse XML document into a Document. It merely requires that the implementation communicate with the application using these existing APIs."}