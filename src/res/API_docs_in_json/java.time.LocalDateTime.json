{"Functions": {"minusHours(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the hours subtracted, not null"]], "Parameters": [["long", "long: the hours to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of hours subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusHours (long hours)"}, "plus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a LocalDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. Date units are added as per @B_java#time#LocalDate#plus_E@. Time units are added as per @B_java#time#LocalTime#plus_E@ with any overflow in days added equivalent to using @B_java#time#LocalDateTime#plusDays_E@. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plus (long amountToAdd, TemporalUnit unit)"}, "of(java.time.LocalDate, java.time.LocalTime)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the local date, not null"], ["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from a date and time.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (LocalDate date, LocalTime time)"}, "of(int, java.time.Month, int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute and second. The day must be valid for the year and month, otherwise an exception will be thrown. The nanosecond field will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute, int second)"}, "of(int, int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour and minute. The day must be valid for the year and month, otherwise an exception will be thrown. The second and nanosecond fields will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute)"}, "getYear()": {"Returns": [["int", "the year, from MIN_YEAR to MAX_YEAR"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the year field. This method returns the primitive int value for the year. The year returned by this method is proleptic as per get(YEAR). To obtain the year-of-era, use get(YEAR_OF_ERA).", "history": "Added in API level 26", "FullName": "public int getYear ()"}, "getLong(java.time.temporal.TemporalField)": {"Returns": [["long", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as a long. This queries this date-time for the value of the specified field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDateTime#isSupported_E@ will return valid values based on this date-time. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public long getLong (TemporalField field)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other date-time"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to another date-time. Compares this LocalDateTime with another ensuring that the date-time is the same. Only objects of type LocalDateTime are compared, other types return false.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "minusNanos(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the nanoseconds subtracted, not null"]], "Parameters": [["long", "long: the nanos to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of nanoseconds subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusNanos (long nanos)"}, "getDayOfMonth()": {"Returns": [["int", "the day-of-month, from 1 to 31"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-month field. This method returns the primitive int value for the day-of-month.", "history": "Added in API level 26", "FullName": "public int getDayOfMonth ()"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the subtraction made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a LocalDateTime, based on this one, with the specified amount subtracted. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#subtractFrom_E@. The amount implementation is free to implement the subtraction in any way it wishes, however it typically calls back to @B_java#time#LocalDateTime#minus_E@. Consult the documentation of the amount implementation to determine if it can be successfully subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minus (TemporalAmount amountToSubtract)"}, "withDayOfYear(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date with the requested day, not null"]], "Parameters": [["int", "int: the day-of-year to set in the result, from 1 to 365-366"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-year value is invalid, or if the day-of-year is invalid for the year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the day-of-year altered. If the resulting date-time is invalid, an exception is thrown. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withDayOfYear (int dayOfYear)"}, "isEqual(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if this date-time is equal to the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is equal to the specified date-time. This checks to see if this date-time represents the same point on the local time-line as the other date-time. This method only considers the position of the two date-times on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDateTime#compareTo_E@, but is the same approach as @B_java#time#chrono#ChronoLocalDateTime#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isEqual (ChronoLocalDateTime<?> other)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this date-time as a String, such as 2007-12-03T10:15:30. The output will be one of the following ISO-8601 formats: uuuu-MM-dd'T'HH:mm uuuu-MM-dd'T'HH:mm:ss uuuu-MM-dd'T'HH:mm:ss.SSS uuuu-MM-dd'T'HH:mm:ss.SSSSSS uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "truncatedTo(java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the time truncated, not null"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to truncate to, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to truncate"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the time truncated. Truncation returns a copy of the original date-time with fields smaller than the specified unit set to zero. For example, truncating with the @B_java#time#temporal#ChronoUnit#MINUTES_E@ unit will set the second-of-minute and nano-of-second field to zero. The unit must have a @B_java#time#temporal#ChronoUnit_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Other units throw an exception. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime truncatedTo (TemporalUnit unit)"}, "minusYears(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the years subtracted, not null"]], "Parameters": [["long", "long: the years to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of years subtracted. This method subtracts the specified amount from the years field in three steps: For example, 2008-02-29 (leap year) minus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusYears (long years)"}, "plusNanos(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the nanoseconds added, not null"]], "Parameters": [["long", "long: the nanos to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of nanoseconds added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusNanos (long nanos)"}, "of(int, java.time.Month, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour and minute. The day must be valid for the year and month, otherwise an exception will be thrown. The second and nanosecond fields will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute)"}, "atZone(java.time.ZoneId)": {"Returns": [["@B_java#time#ZonedDateTime_E@", "the zoned date-time formed from this date-time, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date-time with a time-zone to create a ZonedDateTime. This returns a ZonedDateTime formed from this date-time at the specified time-zone. The result will match this date-time as closely as possible. Time-zone rules, such as daylight savings, mean that not every local date-time is valid for the specified zone, thus the local date-time may be adjusted. The local date-time is resolved to a single instant on the time-line. This is achieved by finding a valid offset from UTC/Greenwich for the local date-time as defined by the @B_java#time#zone#ZoneRules_E@ of the zone ID. In most cases, there is only one valid offset for a local date-time. In the case of an overlap, where clocks are set back, there are two valid offsets. This method uses the earlier offset typically corresponding to \"summer\". In the case of a gap, where clocks jump forward, there is no valid offset. Instead, the local date-time is adjusted to be later by the length of the gap. For a typical one hour daylight savings change, the local date-time will be moved one hour later into the offset typically corresponding to \"summer\". To obtain the later offset during an overlap, call @B_java#time#ZonedDateTime#withLaterOffsetAtOverlap_E@ on the result of this method. To throw an exception when there is a gap or overlap, use @B_java#time#ZonedDateTime#ofStrict_E@.", "history": "Added in API level 26", "FullName": "public ZonedDateTime atZone (ZoneId zone)"}, "plus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the specified amount added, not null"]], "Parameters": [["long", "long: the amount of the unit to add to the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a LocalDateTime, based on this one, with the amount in terms of the unit added. If it is not possible to add the amount, because the unit is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoUnit_E@ then the addition is implemented here. Date units are added as per @B_java#time#LocalDate#plus_E@. Time units are added as per @B_java#time#LocalTime#plus_E@ with any overflow in days added equivalent to using @B_java#time#LocalDateTime#plusDays_E@. If the field is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.addTo(Temporal, long) passing this as the argument. In this case, the unit determines whether and how to perform the addition. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public LocalDateTime plus (long amountToAdd, TemporalUnit unit)"}, "format(java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#lang#String_E@", "the formatted date-time string, not null"]], "Parameters": [["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if an error occurs during printing"]], "SeeAlso": [], "Permissions": [], "Description": "Formats this date-time using the specified formatter. This date-time will be passed to the formatter to produce a string.", "history": "Added in API level 26", "FullName": "public String format (DateTimeFormatter formatter)"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the addition made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the amount to add, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the addition cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount added. This returns a LocalDateTime, based on this one, with the specified amount added. The amount is typically @B_java#time#Period_E@ or @B_java#time#Duration_E@ but may be any other type implementing the @B_java#time#temporal#TemporalAmount_E@ interface. The calculation is delegated to the amount object by calling @B_java#time#temporal#TemporalAmount#addTo_E@. The amount implementation is free to implement the addition in any way it wishes, however it typically calls back to @B_java#time#LocalDateTime#plus_E@. Consult the documentation of the amount implementation to determine if it can be successfully added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plus (TemporalAmount amountToAdd)"}, "plusHours(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the hours added, not null"]], "Parameters": [["long", "long: the hours to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of hours added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusHours (long hours)"}, "getSecond()": {"Returns": [["int", "the second-of-minute, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the second-of-minute field.", "history": "Added in API level 26", "FullName": "public int getSecond ()"}, "getDayOfWeek()": {"Returns": [["@B_java#time#DayOfWeek_E@", "the day-of-week, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-week field, which is an enum DayOfWeek. This method returns the enum @B_java#time#DayOfWeek_E@ for the day-of-week. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#DayOfWeek#getValue_E@. Additional information can be obtained from the DayOfWeek. This includes textual names of the values.", "history": "Added in API level 26", "FullName": "public DayOfWeek getDayOfWeek ()"}, "ofInstant(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from an Instant and zone ID. This creates a local date-time based on the specified instant. First, the offset from UTC/Greenwich is obtained using the zone ID and instant, which is simple as there is only one valid offset for each instant. Then, the instant and offset are used to calculate the local date-time.", "history": "added in API level 26", "FullName": "public static LocalDateTime ofInstant (Instant instant, ZoneId zone)"}, "of(int,java.time.Month,int,int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute, second and nanosecond. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)"}, "isSupported(java.time.temporal.TemporalField)": {"Returns": [["boolean", "true if the field is supported on this date-time, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified field is supported. This checks if this date-time can be queried for the specified field. If false, then calling the @B_java#time#LocalDateTime#range_E@, @B_java#time#LocalDateTime#get_E@ and @B_java#time#LocalDateTime#with_E@ methods will throw an exception. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The supported fields are: NANO_OF_SECOND NANO_OF_DAY MICRO_OF_SECOND MICRO_OF_DAY MILLI_OF_SECOND MILLI_OF_DAY SECOND_OF_MINUTE SECOND_OF_DAY MINUTE_OF_HOUR MINUTE_OF_DAY HOUR_OF_AMPM CLOCK_HOUR_OF_AMPM HOUR_OF_DAY CLOCK_HOUR_OF_DAY AMPM_OF_DAY DAY_OF_WEEK ALIGNED_DAY_OF_WEEK_IN_MONTH ALIGNED_DAY_OF_WEEK_IN_YEAR DAY_OF_MONTH DAY_OF_YEAR EPOCH_DAY ALIGNED_WEEK_OF_MONTH ALIGNED_WEEK_OF_YEAR MONTH_OF_YEAR PROLEPTIC_MONTH YEAR_OF_ERA YEAR ERA All other ChronoField instances will return false. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.isSupportedBy(TemporalAccessor) passing this as the argument. Whether the field is supported is determined by the field.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalField field)"}, "getMonth()": {"Returns": [["@B_java#time#Month_E@", "the month-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#LocalDateTime#getMonthValue_E@"], "Permissions": [], "Description": "Gets the month-of-year field using the Month enum. This method returns the enum @B_java#time#Month_E@ for the month. This avoids confusion as to what int values mean. If you need access to the primitive int value then the enum provides the @B_java#time#Month#getValue_E@.", "history": "Added in API level 26", "FullName": "public Month getMonth ()"}, "now(java.time.Clock)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the current date-time, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the clock to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the specified clock. This will query the specified clock to obtain the current date-time. Using this method allows the use of an alternate clock for testing. The alternate clock may be introduced using @B_java#time#Clock_E@.", "history": "Added in API level 26", "FullName": "public static LocalDateTime now (Clock clock)"}, "of(int, int, int, int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute, second and nanosecond. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)"}, "minusWeeks(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the weeks subtracted, not null"]], "Parameters": [["long", "long: the weeks to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of weeks subtracted. This method subtracts the specified amount in weeks from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-07 minus one week would result in 2008-12-31. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusWeeks (long weeks)"}, "withNano(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested nanosecond, not null"]], "Parameters": [["int", "int: the nano-of-second to set in the result, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the nano value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the nano-of-second altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withNano (int nanoOfSecond)"}, "minusDays(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the days subtracted, not null"]], "Parameters": [["long", "long: the days to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of days subtracted. This method subtracts the specified amount from the days field decrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2009-01-01 minus one day would result in 2008-12-31. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusDays (long days)"}, "of(int,java.time.Month,int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute and second. The day must be valid for the year and month, otherwise an exception will be thrown. The nanosecond field will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute, int second)"}, "isSupported(java.time.temporal.TemporalUnit)": {"Returns": [["boolean", "true if the unit can be added/subtracted, false if not"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified unit is supported. This checks if the specified unit can be added to, or subtracted from, this date-time. If false, then calling the @B_java#time#LocalDateTime#plus_E@ and @B_java#time#LocalDateTime#minus_E@ methods will throw an exception. If the unit is a @B_java#time#temporal#ChronoUnit_E@ then the query is implemented here. The supported units are: NANOS MICROS MILLIS SECONDS MINUTES HOURS HALF_DAYS DAYS WEEKS MONTHS YEARS DECADES CENTURIES MILLENNIA ERAS All other ChronoUnit instances will return false. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.isSupportedBy(Temporal) passing this as the argument. Whether the unit is supported is determined by the unit.", "history": "Added in API level 26", "FullName": "public boolean isSupported (TemporalUnit unit)"}, "from(java.time.temporal.TemporalAccessor)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAccessor_E@", "TemporalAccessor: the temporal object to convert, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to convert to a LocalDateTime"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from a temporal object. This obtains a local date-time based on the specified temporal. A TemporalAccessor represents an arbitrary set of date and time information, which this factory converts to an instance of LocalDateTime. The conversion extracts and combines the LocalDate and the LocalTime from the temporal object. Implementations are permitted to perform optimizations such as accessing those fields that are equivalent to the relevant objects. This method matches the signature of the functional interface @B_java#time#temporal#TemporalQuery_E@ allowing it to be used as a query via method reference, LocalDateTime::from.", "history": "Added in API level 26", "FullName": "public static LocalDateTime from (TemporalAccessor temporal)"}, "withDayOfMonth(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested day, not null"]], "Parameters": [["int", "int: the day-of-month to set in the result, from 1 to 28-31"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the day-of-month value is invalid, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the day-of-month altered. If the resulting date-time is invalid, an exception is thrown. The time does not affect the calculation and will be the same in the result. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withDayOfMonth (int dayOfMonth)"}, "withHour(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested hour, not null"]], "Parameters": [["int", "int: the hour-of-day to set in the result, from 0 to 23"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the hour value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the hour-of-day altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withHour (int hour)"}, "now(java.time.ZoneId)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the current date-time using the system clock, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the zone ID to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the specified time-zone. This will query the @B_java#time#Clock#system_E@ to obtain the current date-time. Specifying the time-zone avoids dependence on the default time-zone. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalDateTime now (ZoneId zone)"}, "with(java.time.temporal.TemporalAdjuster)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAdjuster_E@", "TemporalAdjuster: the adjuster to use, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the adjustment cannot be made"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an adjusted copy of this date-time. This returns a LocalDateTime, based on this one, with the date-time adjusted. The adjustment takes place using the specified adjuster strategy object. Read the documentation of the adjuster to understand what adjustment will be made. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in @B_java#time#temporal#TemporalAdjusters_E@. These include finding the \"last day of the month\" and \"next Wednesday\". Key date-time classes also implement the TemporalAdjuster interface, such as @B_java#time#Month_E@ and @B_java#time#MonthDay_E@. The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years. For example this code returns a date on the last day of July: The classes @B_java#time#LocalDate_E@ and @B_java#time#LocalTime_E@ implement TemporalAdjuster, thus this method can be used to change the date, time or offset: The result of this method is obtained by invoking the @B_java#time#temporal#TemporalAdjuster#adjustInto_E@ method on the specified adjuster passing this as the argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime with (TemporalAdjuster adjuster)"}, "atOffset(java.time.ZoneOffset)": {"Returns": [["@B_java#time#OffsetDateTime_E@", "the offset date-time formed from this date-time and the specified offset, not null"]], "Parameters": [["@B_java#time#ZoneOffset_E@", "ZoneOffset: the offset to combine with, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Combines this date-time with an offset to create an OffsetDateTime. This returns an OffsetDateTime formed from this date-time at the specified offset. All possible combinations of date-time and offset are valid.", "history": "Added in API level 26", "FullName": "public OffsetDateTime atOffset (ZoneOffset offset)"}, "ofEpochSecond(long,int,java.time.ZoneOffset)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["long", "long: the number of seconds from the epoch of 1970-01-01T00:00:00Z"], ["int", "int: the nanosecond within the second, from 0 to 999,999,999"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range, or if the nano-of-second is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z. This allows the @B_java#time#temporal#ChronoField#INSTANT_SECONDS_E@ field to be converted to a local date-time. This is primarily intended for low-level conversions rather than general application usage.", "history": "Added in API level 26", "FullName": "public static LocalDateTime ofEpochSecond (long epochSecond, int nanoOfSecond, ZoneOffset offset)"}, "plusYears(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the years added, not null"]], "Parameters": [["long", "long: the years to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of years added. This method adds the specified amount to the years field in three steps: For example, 2008-02-29 (leap year) plus one year would result in the invalid date 2009-02-29 (standard year). Instead of returning an invalid result, the last valid day of the month, 2009-02-28, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusYears (long years)"}, "isBefore(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if this date-time is before the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is before the specified date-time. This checks to see if this date-time represents a point on the local time-line before the other date-time. This method only considers the position of the two date-times on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDateTime#compareTo_E@, but is the same approach as @B_java#time#chrono#ChronoLocalDateTime#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isBefore (ChronoLocalDateTime<?> other)"}, "toLocalTime()": {"Returns": [["@B_java#time#LocalTime_E@", "the time part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalTime part of this date-time. This returns a LocalTime with the same hour, minute, second and nanosecond as this date-time.", "history": "Added in API level 26", "FullName": "public LocalTime toLocalTime ()"}, "minus(long, java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a LocalDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "added in API level 27", "FullName": "public LocalDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "plusSeconds(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the seconds added, not null"]], "Parameters": [["long", "long: the seconds to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of seconds added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusSeconds (long seconds)"}, "minusSeconds(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the seconds subtracted, not null"]], "Parameters": [["long", "long: the seconds to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of seconds subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusSeconds (long seconds)"}, "plusMinutes(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the minutes added, not null"]], "Parameters": [["long", "long: the minutes to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of minutes added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusMinutes (long minutes)"}, "now()": {"Returns": [["@B_java#time#LocalDateTime_E@", "the current date-time using the system clock and default time-zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the current date-time from the system clock in the default time-zone. This will query the @B_java#time#Clock#systemDefaultZone_E@ in the default time-zone to obtain the current date-time. Using this method will prevent the ability to use an alternate clock for testing because the clock is hard-coded.", "history": "Added in API level 26", "FullName": "public static LocalDateTime now ()"}, "with(java.time.temporal.TemporalField,long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns a LocalDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The @B_java#time#LocalDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDate#with_E@ or @B_java#time#LocalTime#with_E@. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime with (TemporalField field, long newValue)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this date-time.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "withSecond(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested second, not null"]], "Parameters": [["int", "int: the second-of-minute to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the second value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the second-of-minute altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withSecond (int second)"}, "of(java.time.LocalDate,java.time.LocalTime)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["@B_java#time#LocalDate_E@", "LocalDate: the local date, not null"], ["@B_java#time#LocalTime_E@", "LocalTime: the local time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from a date and time.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (LocalDate date, LocalTime time)"}, "getMonthValue()": {"Returns": [["int", "the month-of-year, from 1 to 12"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#LocalDateTime#getMonth_E@"], "Permissions": [], "Description": "Gets the month-of-year field from 1 to 12. This method returns the month as an int from 1 to 12. Application code is frequently clearer if the enum @B_java#time#Month_E@ is used by calling @B_java#time#LocalDateTime#getMonth_E@.", "history": "Added in API level 26", "FullName": "public int getMonthValue ()"}, "withYear(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested year, not null"]], "Parameters": [["int", "int: the year to set in the result, from MIN_YEAR to MAX_YEAR"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the year altered. The time does not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withYear (int year)"}, "minusMonths(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the months subtracted, not null"]], "Parameters": [["long", "long: the months to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of months subtracted. This method subtracts the specified amount from the months field in three steps: For example, 2007-03-31 minus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusMonths (long months)"}, "of(int,int,int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute and second. The day must be valid for the year and month, otherwise an exception will be thrown. The nanosecond field will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second)"}, "compareTo(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["int", "the comparator value, negative if less, positive if greater"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this date-time to another date-time. The comparison is primarily based on the date-time, from earliest to latest. It is \"consistent with equals\", as defined by @B_java#lang#Comparable_E@. If all the date-times being compared are instances of LocalDateTime, then the comparison will be entirely based on the date-time. If some dates being compared are in different chronologies, then the chronology is also considered, see @B_java#lang#Comparable#compareTo_E@.", "history": "Added in API level 26", "FullName": "public int compareTo (ChronoLocalDateTime<?> other)"}, "toLocalDate()": {"Returns": [["@B_java#time#LocalDate_E@", "the date part of this date-time, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the LocalDate part of this date-time. This returns a LocalDate with the same year, month and day as this date-time.", "history": "Added in API level 26", "FullName": "public LocalDate toLocalDate ()"}, "ofInstant(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to create the date-time from, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone, which may be an offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from an Instant and zone ID. This creates a local date-time based on the specified instant. First, the offset from UTC/Greenwich is obtained using the zone ID and instant, which is simple as there is only one valid offset for each instant. Then, the instant and offset are used to calculate the local date-time.", "history": "Added in API level 26", "FullName": "public static LocalDateTime ofInstant (Instant instant, ZoneId zone)"}, "getDayOfYear()": {"Returns": [["int", "the day-of-year, from 1 to 365, or 366 in a leap year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the day-of-year field. This method returns the primitive int value for the day-of-year.", "history": "Added in API level 26", "FullName": "public int getDayOfYear ()"}, "getHour()": {"Returns": [["int", "the hour-of-day, from 0 to 23"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hour-of-day field.", "history": "Added in API level 26", "FullName": "public int getHour ()"}, "parse(java.lang.CharSequence,java.time.format.DateTimeFormatter)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the parsed local date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse, not null"], ["@B_java#time#format#DateTimeFormatter_E@", "DateTimeFormatter: the formatter to use, not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from a text string using a specific formatter. The text is parsed using the formatter, returning a date-time.", "history": "Added in API level 26", "FullName": "public static LocalDateTime parse (CharSequence text, DateTimeFormatter formatter)"}, "of(int,java.time.Month,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour and minute. The day must be valid for the year and month, otherwise an exception will be thrown. The second and nanosecond fields will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute)"}, "isAfter(java.time.chrono.ChronoLocalDateTime<?>)": {"Returns": [["boolean", "true if this date-time is after the specified date-time"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDateTime_E@", "ChronoLocalDateTime: the other date-time to compare to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this date-time is after the specified date-time. This checks to see if this date-time represents a point on the local time-line after the other date-time. This method only considers the position of the two date-times on the local time-line. It does not take into account the chronology, or calendar system. This is different from the comparison in @B_java#time#LocalDateTime#compareTo_E@, but is the same approach as @B_java#time#chrono#ChronoLocalDateTime#timeLineOrder_E@.", "history": "Added in API level 26", "FullName": "public boolean isAfter (ChronoLocalDateTime<?> other)"}, "of(int,int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour and minute, setting the second and nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour and minute. The day must be valid for the year and month, otherwise an exception will be thrown. The second and nanosecond fields will be set to zero.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute)"}, "of(int, int, int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute and second, setting the nanosecond to zero. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute and second. The day must be valid for the year and month, otherwise an exception will be thrown. The nanosecond field will be set to zero.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second)"}, "plusMonths(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the months added, not null"]], "Parameters": [["long", "long: the months to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of months added. This method adds the specified amount to the months field in three steps: For example, 2007-03-31 plus one month would result in the invalid date 2007-04-31. Instead of returning an invalid result, the last valid day of the month, 2007-04-30, is selected instead. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusMonths (long months)"}, "minusMinutes(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the minutes subtracted, not null"]], "Parameters": [["long", "long: the minutes to subtract, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of minutes subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minusMinutes (long minutes)"}, "adjustInto(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "the adjusted object, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the target object to be adjusted, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to make the adjustment"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adjusts the specified temporal object to have the same date and time as this object. This returns a temporal object of the same observable type as the input with the date and time changed to be the same as this. The adjustment is equivalent to using @B_java#time#temporal#Temporal#with_E@ twice, passing @B_java#time#temporal#ChronoField#EPOCH_DAY_E@ and @B_java#time#temporal#ChronoField#NANO_OF_DAY_E@ as the fields. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#with_E@: This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public Temporal adjustInto (Temporal temporal)"}, "of(int,int,int,int,int,int,int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["int", "int: the month-of-year to represent, from 1 (January) to 12 (December)"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute, second and nanosecond. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "Added in API level 26", "FullName": "public static LocalDateTime of (int year, int month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)"}, "withMinute(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested minute, not null"]], "Parameters": [["int", "int: the minute-of-hour to set in the result, from 0 to 59"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the minute value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the minute-of-hour altered. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withMinute (int minute)"}, "ofEpochSecond(long, int, java.time.ZoneOffset)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["long", "long: the number of seconds from the epoch of 1970-01-01T00:00:00Z"], ["int", "int: the nanosecond within the second, from 0 to 999,999,999"], ["@B_java#time#ZoneOffset_E@", "ZoneOffset: the zone offset, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported range, or if the nano-of-second is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime using seconds from the epoch of 1970-01-01T00:00:00Z. This allows the @B_java#time#temporal#ChronoField#INSTANT_SECONDS_E@ field to be converted to a local date-time. This is primarily intended for low-level conversions rather than general application usage.", "history": "added in API level 26", "FullName": "public static LocalDateTime ofEpochSecond (long epochSecond, int nanoOfSecond, ZoneOffset offset)"}, "query(java.time.temporal.TemporalQuery<R>)": {"Returns": [["R", "the query result, null may be returned (defined by the query)"]], "Parameters": [["@B_java#time#temporal#TemporalQuery_E@", "TemporalQuery: the query to invoke, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to query (defined by the query)"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs (defined by the query)"]], "SeeAlso": [], "Permissions": [], "Description": "Queries this date-time using the specified query. This queries this date-time using the specified query strategy object. The TemporalQuery object defines the logic to be used to obtain the result. Read the documentation of the query to understand what the result of this method will be. The result of this method is obtained by invoking the @B_java#time#temporal#TemporalQuery#queryFrom_E@ method on the specified query passing this as the argument.", "history": "Added in API level 26", "FullName": "public R query (TemporalQuery<R> query)"}, "with(java.time.temporal.TemporalField, long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this with the specified field set, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to set in the result, not null"], ["long", "long: the new value of the field in the result"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the field cannot be set"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified field set to a new value. This returns a LocalDateTime, based on this one, with the value for the specified field changed. This can be used to change any supported field, such as the year, month or day-of-month. If it is not possible to set the value, because the field is not supported or for some other reason, an exception is thrown. In some cases, changing the specified field can cause the resulting date-time to become invalid, such as changing the month from 31st January to February would make the day-of-month invalid. In cases like this, the field is responsible for resolving the date. Typically it will choose the previous valid date, which would be the last valid day of February in this example. If the field is a @B_java#time#temporal#ChronoField_E@ then the adjustment is implemented here. The @B_java#time#LocalDateTime#isSupported_E@ will behave as per the matching method on @B_java#time#LocalDate#with_E@ or @B_java#time#LocalTime#with_E@. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.adjustInto(Temporal, long) passing this as the argument. In this case, the field determines whether and how to adjust the instant. This instance is immutable and unaffected by this method call.", "history": "added in API level 26", "FullName": "public LocalDateTime with (TemporalField field, long newValue)"}, "plusDays(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the days added, not null"]], "Parameters": [["long", "long: the days to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of days added. This method adds the specified amount to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one day would result in 2009-01-01. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusDays (long days)"}, "until(java.time.temporal.Temporal,java.time.temporal.TemporalUnit)": {"Returns": [["long", "the amount of time between this date-time and the end date-time"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the end date, exclusive, which is converted to a LocalDateTime, not null"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit to measure the amount in, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the amount cannot be calculated, or the end temporal cannot be converted to a LocalDateTime"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Calculates the amount of time until another date-time in terms of the specified unit. This calculates the amount of time between two LocalDateTime objects in terms of a single TemporalUnit. The start and end points are this and the specified date-time. The result will be negative if the end is before the start. The Temporal passed to this method is converted to a LocalDateTime using @B_java#time#LocalDateTime#from_E@. For example, the amount in days between two date-times can be calculated using startDateTime.until(endDateTime, DAYS). The calculation returns a whole number, representing the number of complete units between the two date-times. For example, the amount in months between 2012-06-15T00:00 and 2012-08-14T23:59 will only be one month as it is one minute short of two months. There are two equivalent ways of using this method. The first is to invoke this method. The second is to use @B_java#time#temporal#TemporalUnit#between_E@: The calculation is implemented in this method for @B_java#time#temporal#ChronoUnit_E@. The units NANOS, MICROS, MILLIS, SECONDS, MINUTES, HOURS and HALF_DAYS, DAYS, WEEKS, MONTHS, YEARS, DECADES, CENTURIES, MILLENNIA and ERAS are supported. Other ChronoUnit values will throw an exception. If the unit is not a ChronoUnit, then the result of this method is obtained by invoking TemporalUnit.between(Temporal, Temporal) passing this as the first argument and the converted input temporal as the second argument. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public long until (Temporal endExclusive, TemporalUnit unit)"}, "range(java.time.temporal.TemporalField)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the range of valid values for the field, not null"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to query the range for, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the range for the field cannot be obtained"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the range of valid values for the specified field. The range object expresses the minimum and maximum valid values for a field. This date-time is used to enhance the accuracy of the returned range. If it is not possible to return the range, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDateTime#isSupported_E@ will return appropriate range instances. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.rangeRefinedBy(TemporalAccessor) passing this as the argument. Whether the range can be obtained is determined by the field.", "history": "Added in API level 26", "FullName": "public ValueRange range (TemporalField field)"}, "of(int, java.time.Month, int, int, int, int, int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the local date-time, not null"]], "Parameters": [["int", "int: the year to represent, from MIN_YEAR to MAX_YEAR"], ["@B_java#time#Month_E@", "Month: the month-of-year to represent, not null"], ["int", "int: the day-of-month to represent, from 1 to 31"], ["int", "int: the hour-of-day to represent, from 0 to 23"], ["int", "int: the minute-of-hour to represent, from 0 to 59"], ["int", "int: the second-of-minute to represent, from 0 to 59"], ["int", "int: the nano-of-second to represent, from 0 to 999,999,999"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the value of any field is out of range, or if the day-of-month is invalid for the month-year"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from year, month, day, hour, minute, second and nanosecond. This returns a LocalDateTime with the specified year, month, day-of-month, hour, minute, second and nanosecond. The day must be valid for the year and month, otherwise an exception will be thrown.", "history": "added in API level 26", "FullName": "public static LocalDateTime of (int year, Month month, int dayOfMonth, int hour, int minute, int second, int nanoOfSecond)"}, "minus(long,java.time.temporal.TemporalUnit)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the specified amount subtracted, not null"]], "Parameters": [["long", "long: the amount of the unit to subtract from the result, may be negative"], ["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the unit of the amount to subtract, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the subtraction cannot be made"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this date-time with the specified amount subtracted. This returns a LocalDateTime, based on this one, with the amount in terms of the unit subtracted. If it is not possible to subtract the amount, because the unit is not supported or for some other reason, an exception is thrown. This method is equivalent to @B_java#time#LocalDateTime#plus_E@ with the amount negated. See that method for a full description of how addition, and thus subtraction, works. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime minus (long amountToSubtract, TemporalUnit unit)"}, "withMonth(int)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the requested month, not null"]], "Parameters": [["int", "int: the month-of-year to set in the result, from 1 (January) to 12 (December)"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the month-of-year value is invalid"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the month-of-year altered. The time does not affect the calculation and will be the same in the result. If the day-of-month is invalid for the year, it will be changed to the last valid day of the month. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime withMonth (int month)"}, "get(java.time.temporal.TemporalField)": {"Returns": [["int", "the value for the field"]], "Parameters": [["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field to get, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if a value for the field cannot be obtained or the value is outside the range of valid values for the field"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the field is not supported or the range of values exceeds an int"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the specified field from this date-time as an int. This queries this date-time for the value of the specified field. The returned value will always be within the valid range of values for the field. If it is not possible to return the value, because the field is not supported or for some other reason, an exception is thrown. If the field is a @B_java#time#temporal#ChronoField_E@ then the query is implemented here. The @B_java#time#LocalDateTime#isSupported_E@ will return valid values based on this date-time, except NANO_OF_DAY, MICRO_OF_DAY, EPOCH_DAY and PROLEPTIC_MONTH which are too large to fit in an int and throw a DateTimeException. All other ChronoField instances will throw an UnsupportedTemporalTypeException. If the field is not a ChronoField, then the result of this method is obtained by invoking TemporalField.getFrom(TemporalAccessor) passing this as the argument. Whether the value can be obtained, and what the value represents, is determined by the field.", "history": "Added in API level 26", "FullName": "public int get (TemporalField field)"}, "plusWeeks(long)": {"Returns": [["@B_java#time#LocalDateTime_E@", "a LocalDateTime based on this date-time with the weeks added, not null"]], "Parameters": [["long", "long: the weeks to add, may be negative"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the result exceeds the supported date range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this LocalDateTime with the specified number of weeks added. This method adds the specified amount in weeks to the days field incrementing the month and year fields as necessary to ensure the result remains valid. The result is only invalid if the maximum/minimum year is exceeded. For example, 2008-12-31 plus one week would result in 2009-01-07. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public LocalDateTime plusWeeks (long weeks)"}, "parse(java.lang.CharSequence)": {"Returns": [["@B_java#time#LocalDateTime_E@", "the parsed local date-time, not null"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse such as \"2007-12-03T10:15:30\", not null"]], "Throws": [["@B_java#time#format#DateTimeParseException_E@", "if the text cannot be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of LocalDateTime from a text string such as 2007-12-03T10:15:30. The string must represent a valid date-time and is parsed using @B_java#time#format#DateTimeFormatter#ISO_LOCAL_DATE_TIME_E@.", "history": "Added in API level 26", "FullName": "public static LocalDateTime parse (CharSequence text)"}, "getNano()": {"Returns": [["int", "the nano-of-second, from 0 to 999,999,999"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the nano-of-second field.", "history": "Added in API level 26", "FullName": "public int getNano ()"}, "getMinute()": {"Returns": [["int", "the minute-of-hour, from 0 to 59"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minute-of-hour field.", "history": "Added in API level 26", "FullName": "public int getMinute ()"}}, "Inheritance": [], "ClassName": "java.time.LocalDateTime", "ClassDesc": "A date-time without a time-zone in the ISO-8601 calendar system, such as 2007-12-03T10:15:30. LocalDateTime is an immutable date-time object that represents a date-time, often viewed as year-month-day-hour-minute-second. Other date and time fields, such as day-of-year, day-of-week and week-of-year, can also be accessed. Time is represented to nanosecond precision. For example, the value \"2nd October 2007 at 13:45.30.123456789\" can be stored in a LocalDateTime. This class does not store or represent a time-zone. Instead, it is a description of the date, as used for birthdays, combined with the local time as seen on a wall clock. It cannot represent an instant on the time-line without additional information such as an offset or time-zone. The ISO-8601 calendar system is the modern civil calendar system used today in most of the world. It is equivalent to the proleptic Gregorian calendar system, in which today's rules for leap years are applied for all time. For most applications written today, the ISO-8601 rules are entirely suitable. However, any application that makes use of historical dates, and requires them to be accurate will find the ISO-8601 approach unsuitable."}