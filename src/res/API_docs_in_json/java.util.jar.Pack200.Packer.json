{"Functions": {"pack(java.util.jar.JarInputStream,java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#util#jar#JarInputStream_E@", "JarInputStream: a JarInputStream"], ["@B_java#io#OutputStream_E@", "OutputStream: an OutputStream"]], "Throws": [["@B_java#io#IOException_E@", "if an error is encountered."]], "SeeAlso": ["@B_java#util#jar#Pack200#Packer_E@"], "Permissions": [], "Description": "Takes a JarInputStream and converts it into a Pack200 archive. Closes its input but not its output. (Pack200 archives are appendable.) The modification time and deflation hint attributes are not available, for the JAR manifest file and its containing directory.", "history": "Added in API level 1", "FullName": "public abstract void pack (JarInputStream in, OutputStream out)"}, "addPropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: An object to be invoked when a property is changed."]], "Throws": [], "SeeAlso": ["@B_java#util#jar#Pack200#Packer#properties_E@", "@B_java#util#jar#Pack200#Packer_E@"], "Permissions": [], "Description": "The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Applications that need to monitor progress of the packer can poll the value of the @B_java#util#jar#Pack200#Packer#PROGRESS_E@ property instead. Registers a listener for PropertyChange events on the properties map. This is typically used by applications to update a progress bar. The default implementation of this method does nothing and has no side-effects. java.beans package.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public void addPropertyChangeListener (PropertyChangeListener listener)"}, "properties()": {"Returns": [["@B_java#util#SortedMap_E@", "A sorted association of property key strings to property values."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the set of this engine's properties. This set is a \"live view\", so that changing its contents immediately affects the Packer engine, and changes from the engine (such as progress indications) are immediately visible in the map. The property map may contain pre-defined implementation specific and default properties. Users are encouraged to read the information and fully understand the implications, before modifying pre-existing properties. Implementation specific properties are prefixed with a package name associated with the implementor, beginning with Unknown properties may be ignored or rejected with an unspecified error, and invalid entries may cause an unspecified error to be thrown. The returned map implements all optional @B_java#util#SortedMap_E@ operations", "history": "Added in API level 1", "FullName": "public abstract SortedMap<String, String> properties ()"}, "pack(java.util.jar.JarFile,java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#util#jar#JarFile_E@", "JarFile: a JarFile"], ["@B_java#io#OutputStream_E@", "OutputStream: an OutputStream"]], "Throws": [["@B_java#io#IOException_E@", "if an error is encountered."]], "SeeAlso": [], "Permissions": [], "Description": "Takes a JarFile and converts it into a Pack200 archive. Closes its input but not its output. (Pack200 archives are appendable.)", "history": "Added in API level 1", "FullName": "public abstract void pack (JarFile in, OutputStream out)"}, "pack(java.util.jar.JarFile, java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#util#jar#JarFile_E@", "JarFile: a JarFile"], ["@B_java#io#OutputStream_E@", "OutputStream: an OutputStream"]], "Throws": [["@B_java#io#IOException_E@", "if an error is encountered."]], "SeeAlso": [], "Permissions": [], "Description": "Takes a JarFile and converts it into a Pack200 archive. Closes its input but not its output. (Pack200 archives are appendable.)", "history": "added in API level 1", "FullName": "public abstract void pack (JarFile in, OutputStream out)"}, "removePropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChange listener to be removed."]], "Throws": [], "SeeAlso": ["@B_java#util#jar#Pack200#Packer#addPropertyChangeListener_E@"], "Permissions": [], "Description": "The dependency on PropertyChangeListener creates a significant impediment to future modularization of the Java platform. This method will be removed in a future release. Remove a listener for PropertyChange events, added by the @B_java#util#jar#Pack200#Packer#addPropertyChangeListener_E@. The default implementation of this method does nothing and has no side-effects. java.beans package.", "history": "Added in API level 3 Deprecated in API level 26", "FullName": "public void removePropertyChangeListener (PropertyChangeListener listener)"}}, "Inheritance": [], "ClassName": "java.util.jar.Pack200.Packer", "ClassDesc": "The packer engine applies various transformations to the input JAR file, making the pack stream highly compressible by a compressor such as gzip or zip. An instance of the engine can be obtained using @B_java#util#jar#Pack200#newPacker_E@. The high degree of compression is achieved by using a number of techniques described in the JSR 200 specification. Some of the techniques are sorting, re-ordering and co-location of the constant pool. The pack engine is initialized to an initial state as described by their properties below. The initial state can be manipulated by getting the engine properties (using @B_java#util#jar#Pack200#Packer#properties_E@) and storing the modified properties on the map. The resource files will be passed through with no changes at all. The class files will not contain identical bytes, since the unpacker is free to change minor class file features such as constant pool order. However, the class files will be semantically identical, as specified in By default, the packer does not change the order of JAR elements. Also, the modification time and deflation hint of each JAR element is passed unchanged. (Any other ZIP-archive information, such as extra attributes giving Unix file permissions, are lost.) Note that packing and unpacking a JAR will in general alter the bytewise contents of classfiles in the JAR. This means that packing and unpacking will in general invalidate any digital signatures which rely on bytewise images of JAR elements. In order both to sign and to pack a JAR, you must first pack and unpack the JAR to \"normalize\" it, then compute signatures on the unpacked JAR elements, and finally repack the signed JAR. Both packing steps should use precisely the same options, and the segment limit may also need to be set to \"-1\", to prevent accidental variation of segment boundaries as class file sizes change slightly. (Here's why this works: Any reordering the packer does of any classfile structures is idempotent, so the second packing does not change the orderings produced by the first packing. Also, the unpacker is guaranteed by the JSR 200 specification to produce a specific bytewise image for any given transmission ordering of archive elements.) In order to maintain backward compatibility, the pack file's version is set to accommodate the class files present in the input JAR file. In other words, the pack file version will be the latest, if the class files are the latest and conversely the pack file version will be the oldest if the class file versions are also the oldest. For intermediate class file versions the corresponding pack file version will be used. For example: If the input JAR-files are solely comprised of 1.5 (or lesser) class files, a 1.5 compatible pack file is produced. This will also be the case for archives that have no class files. If the input JAR-files contains a 1.6 class file, then the pack file version will be set to 1.6. Note: Unless otherwise noted, passing a @B_java#lang#NullPointerException_E@ to be thrown."}