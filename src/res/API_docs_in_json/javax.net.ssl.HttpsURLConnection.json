{"Functions": {"getDefaultHostnameVerifier()": {"Returns": [["@B_javax#net#ssl#HostnameVerifier_E@", "the default host name verifier"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#setDefaultHostnameVerifier_E@"], "Permissions": [], "Description": "Gets the default HostnameVerifier that is inherited by new instances of this class.", "history": "Added in API level 1", "FullName": "public static HostnameVerifier getDefaultHostnameVerifier ()"}, "setDefaultHostnameVerifier(javax.net.ssl.HostnameVerifier)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#HostnameVerifier_E@", "HostnameVerifier: the default host name verifier"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the HostnameVerifier parameter is null."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkPermission method does not allow SSLPermission(\"setHostnameVerifier\")"]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getDefaultHostnameVerifier_E@"], "Permissions": [], "Description": "Sets the default HostnameVerifier inherited by a new instance of this class. Developers are strongly discouraged from changing the default HostnameVerifier as @B_javax#net#ssl#HttpsURLConnection#getDefaultHostnameVerifier_E@ is used by several classes for hostname verification on Android. If this method is not called, the default HostnameVerifier will check the hostname according to RFC 2818.", "history": "Added in API level 1", "FullName": "public static void setDefaultHostnameVerifier (HostnameVerifier v)"}, "getCipherSuite()": {"Returns": [["@B_java#lang#String_E@", "the cipher suite"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this method is called before the connection has been established."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the cipher suite in use on this connection.", "history": "Added in API level 1", "FullName": "public abstract String getCipherSuite ()"}, "getHostnameVerifier()": {"Returns": [["@B_javax#net#ssl#HostnameVerifier_E@", "the host name verifier"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#setHostnameVerifier_E@", "@B_javax#net#ssl#HttpsURLConnection#setDefaultHostnameVerifier_E@"], "Permissions": [], "Description": "Gets the HostnameVerifier in place on this instance.", "history": "Added in API level 1", "FullName": "public HostnameVerifier getHostnameVerifier ()"}, "setSSLSocketFactory(javax.net.ssl.SSLSocketFactory)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLSocketFactory_E@", "SSLSocketFactory: the SSL socket factory"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the SSLSocketFactory parameter is null."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method does not allow a socket factory to be specified."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getSSLSocketFactory_E@"], "Permissions": [], "Description": "Sets the SSLSocketFactory to be used when this instance creates sockets for secure https URL connections. New instances of this class inherit the default static SSLSocketFactory set by @B_javax#net#ssl#HttpsURLConnection#setDefaultSSLSocketFactory_E@. Calls to this method replace this object's SSLSocketFactory.", "history": "Added in API level 1", "FullName": "public void setSSLSocketFactory (SSLSocketFactory sf)"}, "getLocalCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of certificates, with the client's own certificate first followed by any certificate authorities. If no certificates were sent, then null is returned."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this method is called before the connection has been established."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the certificate(s) that were sent to the server during handshaking. Note: This method is useful only when using certificate-based cipher suites. When multiple certificates are available for use in a handshake, the implementation chooses what it considers the \"best\" certificate chain available, and transmits that to the other side. This method allows the caller to know which certificate chain was actually sent.", "history": "Added in API level 1", "FullName": "public abstract Certificate[] getLocalCertificates ()"}, "getDefaultSSLSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "the default SSLSocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#setDefaultSSLSocketFactory_E@"], "Permissions": [], "Description": "Gets the default static SSLSocketFactory that is inherited by new instances of this class. The socket factories are used when creating sockets for secure https URL connections.", "history": "Added in API level 1", "FullName": "public static SSLSocketFactory getDefaultSSLSocketFactory ()"}, "HttpsURLConnection(java.net.URL)": {"Returns": [], "Parameters": [["@B_java#net#URL_E@", "URL: the URL"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an HttpsURLConnection using the URL specified.", "history": "Added in API level 1", "FullName": "protected HttpsURLConnection (URL url)"}, "getPeerPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the server's principal. Returns an X500Principal of the end-entity certiticate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer was not verified"], ["@B_java#lang#IllegalStateException_E@", "if this method is called before the connection has been established."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getServerCertificates_E@", "@B_javax#net#ssl#HttpsURLConnection#getLocalPrincipal_E@"], "Permissions": [], "Description": "Returns the server's principal which was established as part of defining the session. Note: Subclasses should override this method. If not overridden, it will default to returning the X500Principal of the server's end-entity certificate for certificate-based ciphersuites, or throw an SSLPeerUnverifiedException for non-certificate based ciphersuites, such as Kerberos.", "history": "Added in API level 1", "FullName": "public Principal getPeerPrincipal ()"}, "getLocalPrincipal()": {"Returns": [["@B_java#security#Principal_E@", "the principal sent to the server. Returns an X500Principal of the end-entity certificate for X509-based cipher suites, and KerberosPrincipal for Kerberos cipher suites. If no principal was sent, then null is returned."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this method is called before the connection has been established."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getLocalCertificates_E@", "@B_javax#net#ssl#HttpsURLConnection#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the principal that was sent to the server during handshaking. Note: Subclasses should override this method. If not overridden, it will default to returning the X500Principal of the end-entity certificate that was sent to the server for certificate-based ciphersuites or, return null for non-certificate based ciphersuites, such as Kerberos.", "history": "Added in API level 1", "FullName": "public Principal getLocalPrincipal ()"}, "setHostnameVerifier(javax.net.ssl.HostnameVerifier)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#HostnameVerifier_E@", "HostnameVerifier: the host name verifier"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the HostnameVerifier parameter is null."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getHostnameVerifier_E@", "@B_javax#net#ssl#HttpsURLConnection#setDefaultHostnameVerifier_E@"], "Permissions": [], "Description": "Sets the HostnameVerifier for this instance. New instances of this class inherit the default static hostname verifier set by @B_javax#net#ssl#HttpsURLConnection#setDefaultHostnameVerifier_E@. Calls to this method replace this object's HostnameVerifier. Android's HttpsURLConnection relies on the HostnameVerifier for the entire hostname verification step.", "history": "Added in API level 1", "FullName": "public void setHostnameVerifier (HostnameVerifier v)"}, "getSSLSocketFactory()": {"Returns": [["@B_javax#net#ssl#SSLSocketFactory_E@", "the SSLSocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#setSSLSocketFactory_E@"], "Permissions": [], "Description": "Gets the SSL socket factory to be used when creating sockets for secure https URL connections.", "history": "Added in API level 1", "FullName": "public SSLSocketFactory getSSLSocketFactory ()"}, "getServerCertificates()": {"Returns": [["@B_java#security#cert#Certificate_E@", "an ordered array of server certificates, with the peer's own certificate first followed by any certificate authorities."]], "Parameters": [], "Throws": [["@B_javax#net#ssl#SSLPeerUnverifiedException_E@", "if the peer is not verified."], ["@B_java#lang#IllegalStateException_E@", "if this method is called before the connection has been established."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getPeerPrincipal_E@"], "Permissions": [], "Description": "Returns the server's certificate chain which was established as part of defining the session. Note: This method can be used only when using certificate-based cipher suites; using it with non-certificate-based cipher suites, such as Kerberos, will throw an SSLPeerUnverifiedException.", "history": "Added in API level 1", "FullName": "public abstract Certificate[] getServerCertificates ()"}, "setDefaultSSLSocketFactory(javax.net.ssl.SSLSocketFactory)": {"Returns": [], "Parameters": [["@B_javax#net#ssl#SSLSocketFactory_E@", "SSLSocketFactory: the default SSL socket factory"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the SSLSocketFactory parameter is null."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSetFactory method does not allow a socket factory to be specified."]], "SeeAlso": ["@B_javax#net#ssl#HttpsURLConnection#getDefaultSSLSocketFactory_E@"], "Permissions": [], "Description": "Sets the default SSLSocketFactory inherited by new instances of this class. The socket factories are used when creating sockets for secure https URL connections.", "history": "Added in API level 1", "FullName": "public static void setDefaultSSLSocketFactory (SSLSocketFactory sf)"}}, "Inheritance": ["@B_java#net#URLConnection_E@", "@B_java#net#HttpURLConnection_E@"], "ClassName": "javax.net.ssl.HttpsURLConnection", "ClassDesc": "HttpsURLConnection extends HttpURLConnection with support for https-specific features. See This class uses HostnameVerifier and SSLSocketFactory. There are default implementations defined for both classes. However, the implementations can be replaced on a per-class (static) or per-instance basis. All new HttpsURLConnections instances will be assigned the \"default\" static values at instance creation, but they can be overriden by calling the appropriate per-instance set method(s) before connecting."}