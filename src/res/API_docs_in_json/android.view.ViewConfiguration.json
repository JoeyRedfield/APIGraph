{"Functions": {"getTouchSlop()": {"Returns": [["int", "Distance in dips a touch can wander before we think the user is scrolling"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledTouchSlop_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getTouchSlop ()"}, "getAmbiguousGestureMultiplier()": {"Returns": [["float", "The multiplication factor for inhibiting default gestures. Value is 1.0 or greater"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If a MotionEvent has @B_android#view#MotionEvent#CLASSIFICATION_AMBIGUOUS_GESTURE_E@ set, then certain actions, such as scrolling, will be inhibited. However, to account for the possibility of incorrect classification, the default scrolling will only be inhibited if the pointer travels less than (getScaledTouchSlop() * this factor). Likewise, the default long press timeout will be increased by this factor for some situations where the default behaviour is to cancel it.", "history": "Added in API level 29", "FullName": "public static float getAmbiguousGestureMultiplier ()"}, "getScrollBarFadeDuration()": {"Returns": [["int", "Duration of the fade when scrollbars fade away in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public static int getScrollBarFadeDuration ()"}, "getDefaultActionModeHideDuration()": {"Returns": [["long", "the default duration in milliseconds for @B_android#view#ActionMode#hide_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 23", "FullName": "public static long getDefaultActionModeHideDuration ()"}, "getScaledHorizontalScrollFactor()": {"Returns": [["float", "Amount to scroll in response to a horizontal @B_android#view#MotionEvent#ACTION_SCROLL_E@ event. Multiply this by the event's axis value to obtain the number of pixels to be scrolled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public float getScaledHorizontalScrollFactor ()"}, "getFadingEdgeLength()": {"Returns": [["int", "the length of the fading edges in dips"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledFadingEdgeLength_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getFadingEdgeLength ()"}, "getScaledMinimumFlingVelocity()": {"Returns": [["int", "Minimum velocity to initiate a fling, as measured in pixels per second."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledMinimumFlingVelocity ()"}, "getScrollFriction()": {"Returns": [["float", "A scalar dimensionless value representing the coefficient of friction."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of friction applied to scrolls and flings.", "history": "Added in API level 1", "FullName": "public static float getScrollFriction ()"}, "getMinimumFlingVelocity()": {"Returns": [["int", "Minimum velocity to initiate a fling, as measured in dips per second."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledMinimumFlingVelocity_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getMinimumFlingVelocity ()"}, "getEdgeSlop()": {"Returns": [["int", "Inset in dips to look for touchable content when the user touches the edge of the screen"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledEdgeSlop_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getEdgeSlop ()"}, "getTapTimeout()": {"Returns": [["int", "the duration in milliseconds we will wait to see if a touch event is a tap or a scroll. If the user does not move within this interval, it is considered to be a tap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static int getTapTimeout ()"}, "getWindowTouchSlop()": {"Returns": [["int", "Distance in dips a touch must be outside the bounds of a window for it to be counted as outside the window for purposes of dismissing that window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledWindowTouchSlop_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getWindowTouchSlop ()"}, "getScaledMinimumScalingSpan()": {"Returns": [["int", "The distance in pixels"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this method is called on a ViewConfiguration that was instantiated using a constructor with no Context parameter."]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the distance in pixels between touches that must be reached for a gesture to be interpreted as scaling. In general, scaling shouldn't start until this distance has been met or surpassed, and scaling should end when the distance in pixels between touches drops below this distance.", "history": "Added in API level 29", "FullName": "public int getScaledMinimumScalingSpan ()"}, "getMaximumFlingVelocity()": {"Returns": [["int", "Maximum velocity to initiate a fling, as measured in dips per second."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledMaximumFlingVelocity_E@ instead.", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public static int getMaximumFlingVelocity ()"}, "getScaledFadingEdgeLength()": {"Returns": [["int", "the length of the fading edges in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledFadingEdgeLength ()"}, "getKeyRepeatDelay()": {"Returns": [["int", "the time between successive key repeats in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public static int getKeyRepeatDelay ()"}, "getScaledEdgeSlop()": {"Returns": [["int", "Inset in pixels to look for touchable content when the user touches the edge of the screen"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledEdgeSlop ()"}, "getScrollDefaultDelay()": {"Returns": [["int", "Default delay before the scrollbars fade in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public static int getScrollDefaultDelay ()"}, "getDoubleTapTimeout()": {"Returns": [["int", "the duration in milliseconds between the first tap's up event and the second tap's down event for an interaction to be considered a double-tap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static int getDoubleTapTimeout ()"}, "getLongPressTimeout()": {"Returns": [["int", "the duration in milliseconds before a press turns into a long press"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static int getLongPressTimeout ()"}, "getScaledHoverSlop()": {"Returns": [["int", "Distance in pixels a hover can wander while it is still considered \"stationary\"."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 28", "FullName": "public int getScaledHoverSlop ()"}, "getPressedStateDuration()": {"Returns": [["int", "the duration in milliseconds of the pressed state in child components."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static int getPressedStateDuration ()"}, "ViewConfiguration()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#get_E@ instead.", "history": "Added in API level 1", "FullName": "public ViewConfiguration ()"}, "getGlobalActionKeyTimeout()": {"Returns": [["long", "how long a user needs to press the relevant key to bring up the global actions dialog."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This timeout should not be used by applications The amount of time a user needs to press the relevant key to bring up the global actions dialog.", "history": "Added in API level 1 Deprecated in API level 20", "FullName": "public static long getGlobalActionKeyTimeout ()"}, "getMaximumDrawingCacheSize()": {"Returns": [["int", "the maximum size of View's drawing cache expressed in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledMaximumDrawingCacheSize_E@ instead. The maximum drawing cache size expressed in bytes.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getMaximumDrawingCacheSize ()"}, "getScaledPagingTouchSlop()": {"Returns": [["int", "Distance in pixels a touch can wander before we think the user is scrolling a full page"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 8", "FullName": "public int getScaledPagingTouchSlop ()"}, "getScaledOverscrollDistance()": {"Returns": [["int", "The maximum distance a View should overscroll by when showing edge effects (in pixels)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public int getScaledOverscrollDistance ()"}, "hasPermanentMenuKey()": {"Returns": [["boolean", "true if a permanent menu key is present, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report if the device has a permanent menu key available to the user. As of Android 3.0, devices may not have a permanent menu key available. Apps should use the action bar to present menu options to users. However, there are some apps where the action bar is inappropriate or undesirable. This method may be used to detect if a menu key is present. If not, applications should provide another on-screen affordance to access functionality.", "history": "Added in API level 14", "FullName": "public boolean hasPermanentMenuKey ()"}, "getScaledDoubleTapSlop()": {"Returns": [["int", "Distance in pixels between the first touch and second touch to still be considered a double tap"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledDoubleTapSlop ()"}, "getScaledMaximumFlingVelocity()": {"Returns": [["int", "Maximum velocity to initiate a fling, as measured in pixels per second."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 4", "FullName": "public int getScaledMaximumFlingVelocity ()"}, "getScaledScrollBarSize()": {"Returns": [["int", "The width of the horizontal scrollbar and the height of the vertical scrollbar in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledScrollBarSize ()"}, "shouldShowMenuShortcutsWhenKeyboardPresent()": {"Returns": [["boolean", "True if shortcuts should be displayed in menus."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if shortcuts should be displayed in menus.", "history": "Added in API level 28", "FullName": "public boolean shouldShowMenuShortcutsWhenKeyboardPresent ()"}, "get(android.content.Context)": {"Returns": [["@B_android#view#ViewConfiguration_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Context_E@", "Context: The application context used to initialize the view configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a configuration for the specified context. The configuration depends on various parameters of the context, like the dimension of the display or the density of the display.", "history": "Added in API level 3", "FullName": "public static ViewConfiguration get (Context context)"}, "getScaledVerticalScrollFactor()": {"Returns": [["float", "Amount to scroll in response to a vertical @B_android#view#MotionEvent#ACTION_SCROLL_E@ event. Multiply this by the event's axis value to obtain the number of pixels to be scrolled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 26", "FullName": "public float getScaledVerticalScrollFactor ()"}, "getKeyRepeatTimeout()": {"Returns": [["int", "the time before the first key repeat in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 12", "FullName": "public static int getKeyRepeatTimeout ()"}, "getJumpTapTimeout()": {"Returns": [["int", "the duration in milliseconds we will wait to see if a touch event is a jump tap. If the user does not move within this interval, it is considered to be a tap."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static int getJumpTapTimeout ()"}, "getZoomControlsTimeout()": {"Returns": [["long", "the time the zoom controls should be visible expressed in milliseconds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time that the zoom controls should be displayed on the screen expressed in milliseconds.", "history": "Added in API level 1", "FullName": "public static long getZoomControlsTimeout ()"}, "getScaledOverflingDistance()": {"Returns": [["int", "The maximum distance a View should overfling by when showing edge effects (in pixels)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 9", "FullName": "public int getScaledOverflingDistance ()"}, "getScrollBarSize()": {"Returns": [["int", "The width of the horizontal scrollbar and the height of the vertical scrollbar in dips"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#ViewConfiguration#getScaledScrollBarSize_E@ instead.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static int getScrollBarSize ()"}, "getScaledTouchSlop()": {"Returns": [["int", "Distance in pixels a touch can wander before we think the user is scrolling"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledTouchSlop ()"}, "getScaledMaximumDrawingCacheSize()": {"Returns": [["int", "the maximum size of View's drawing cache expressed in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The maximum drawing cache size expressed in bytes.", "history": "Added in API level 3", "FullName": "public int getScaledMaximumDrawingCacheSize ()"}, "getScaledWindowTouchSlop()": {"Returns": [["int", "Distance in pixels a touch must be outside the bounds of a window for it to be counted as outside the window for purposes of dismissing that window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public int getScaledWindowTouchSlop ()"}}, "Inheritance": [], "ClassName": "android.view.ViewConfiguration", "ClassDesc": "Contains methods to standard constants used in the UI for timeouts, sizes, and distances."}