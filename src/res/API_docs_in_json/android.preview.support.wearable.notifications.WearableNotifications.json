{"Functions": {"getGroupKey(android.app.Notification)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the key used to group this notification into a cluster or stack with other notifications. This key is unique within a package.", "history": "", "FullName": "public static String getGroupKey (Notification notif)"}, "setBigActionIcon(android.app.Notification, int)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["int", "icon to display for the content action."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a big action display to this notification. Big actions show a hint to users about the action taken when the content intent is triggered.", "history": "", "FullName": "public static void setBigActionIcon (Notification notif, int icon)"}, "getBigActionSubtext(android.app.Notification)": {"Returns": [["", "the subtext of the big action icon or null if it wasn't exist."]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": ["@B_android#preview#support#wearable#notifications#WearableNotifications#setBigActionIcon_E@"], "Permissions": [], "Description": "Get the big action icon subtext to be shown with a big action icon.", "history": "", "FullName": "public static CharSequence getBigActionSubtext (Notification notif)"}, "getBigActionIcon(android.app.Notification)": {"Returns": [["", "the icon or 0 if it wasn't set"]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": ["@B_android#preview#support#wearable#notifications#WearableNotifications#setBigActionIcon_E@"], "Permissions": [], "Description": "Get the big action icon to be displayed with this notification. Big actions show a hint to users about the action taken when the content intent is triggered.", "history": "", "FullName": "public static int getBigActionIcon (Notification notif)"}, "setLocalOnly(android.app.Notification, boolean)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["boolean", "set to true to keep the notification on this device only, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether or not this notification is only relevant to the current device. Some notifications can be bridged to other devices for remote display. This hint can be set to recommend this notification not be bridged.", "history": "", "FullName": "public static void setLocalOnly (Notification notif, boolean localOnly)"}, "setHintHideIcon(android.app.Notification, boolean)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["boolean", "true to hide this icon, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a hint that this notification's icon should not be displayed.", "history": "", "FullName": "public static void setHintHideIcon (Notification notif, boolean hintHideIcon)"}, "setMinPriority(android.app.Notification)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the priority of this notification to be minimum priority level (@B_android#app#Notification#PRIORITY_MIN_E@). When set via WearableNotifications, these minimum priority notifications will bypass the notification manager on platforms that do not support ambient level notifications.", "history": "", "FullName": "public static void setMinPriority (Notification notif)"}, "getContentIntentRemoteInputs(android.app.Notification)": {"Returns": [["", "array of RemoteInput objects or null if it doesn't exist"]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#preview#support#wearable#notifications#RemoteInput_E@ objects associated with the content intent.", "history": "", "FullName": "public static RemoteInput[] getContentIntentRemoteInputs (Notification notif)"}, "getAction(android.app.Notification, int)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"], ["int", "the index of the desired action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a @B_android#preview#support#wearable#notifications#WearableNotifications#Action_E@ wrapper for the notification at actionIndex in the @B_android#app#Notification#actions_E@ array.", "history": "", "FullName": "public static WearableNotifications.Action getAction (Notification notif, int actionIndex)"}, "getHintHideIcon(android.app.Notification)": {"Returns": [["", "true if this icon should not be displayed, false otherwise. The default value is false if this was never set."]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a hint that this notification's icon should not be displayed.", "history": "", "FullName": "public static boolean getHintHideIcon (Notification notif)"}, "setGroup(android.app.Notification, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["@B_java#lang#String_E@", "The group key of the group. Unique within a package."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this notification to be part of a group of notifications sharing the same key. Grouped notifications may display in a cluster or stack on devices which support such rendering. Use the default ordering within a group.", "history": "", "FullName": "public static void setGroup (Notification notif, String groupKey)"}, "getActionCount(android.app.Notification)": {"Returns": [["", "the number of actions for this notification"]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": ["@B_android#app#Notification#actions_E@"], "Permissions": [], "Description": "Get the number of actions present on this notification.", "history": "", "FullName": "public static int getActionCount (Notification notif)"}, "getGroupOrder(android.app.Notification)": {"Returns": [["", "the sort order of this notification within this group"]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the sort order of this notification within a group of notifications with the same group key set. Group orders are 0-indexed integers that are used to sort notifications in ascending order. Can also be the sentinel value @B_android#preview#support#wearable#notifications#WearableNotifications#GROUP_ORDER_SUMMARY_E@ if this is the summary notification for a group.", "history": "", "FullName": "public static int getGroupOrder (Notification notif)"}, "setContentIntentRemoteInputs(android.app.Notification, android.preview.support.wearable.notifications.RemoteInput[])": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["@B_android#preview#support#wearable#notifications#RemoteInput_E@", "array of @B_android#preview#support#wearable#notifications#RemoteInput_E@ objects desired from the user."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets @B_android#preview#support#wearable#notifications#RemoteInput_E@s to be collected when the user triggers the contentIntent. These function just as if they were attached to an @B_android#preview#support#wearable#notifications#WearableNotifications#Action_E@.", "history": "", "FullName": "public static void setContentIntentRemoteInputs (Notification notif, RemoteInput[] inputs)"}, "getPages(android.app.Notification)": {"Returns": [["", "the pages for this notification"]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the array of additional pages of content for displaying this notification. The current notification forms the first page, and elements within this array form subsequent pages. This field can be used to separate a notification into multiple sections.", "history": "", "FullName": "public static Notification[] getPages (Notification notif)"}, "setPages(android.app.Notification, android.app.Notification[])": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["@B_android#app#Notification_E@", "the pages to add to the current notification. Replaces any existing pages with this value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set additional pages of content to display with this notification. The current notification forms the first page, and pages set using this function form subsequent pages. This field can be used to separate a notification into multiple sections.", "history": "", "FullName": "public static void setPages (Notification notif, Notification[] pages)"}, "getExtras(android.app.Notification)": {"Returns": [["", "the extras associated with this notification."]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#app#Notification#extras_E@ field from a notification in a backward-compatible manner. Extras field was supported from JellyBean (API level 16) forwards. This function will return null on older API levels.", "history": "", "FullName": "public static Bundle getExtras (Notification notif)"}, "setBigActionIcon(android.app.Notification, int, java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["int", "icon to display for the content action."], ["@B_java#lang#CharSequence_E@", "Optional subtext to display with the big action icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a big action display to this notification. Big actions show a hint to users about the action taken when the content intent is triggered.", "history": "", "FullName": "public static void setBigActionIcon (Notification notif, int icon, CharSequence subtext)"}, "setGroup(android.app.Notification, java.lang.String, int)": {"Returns": [], "Parameters": [["@B_android#app#Notification_E@", "the notification to modify"], ["@B_java#lang#String_E@", "The group key of the group. Unique within a package."], ["int", "The 0-indexed sort order within the group. Can also be set to the sentinel value @B_android#preview#support#wearable#notifications#WearableNotifications#GROUP_ORDER_SUMMARY_E@ to mark this notification as being the group summary."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set this notification to be part of a group of notifications sharing the same key. Grouped notifications may display in a cluster or stack on devices which support such rendering.", "history": "", "FullName": "public static void setGroup (Notification notif, String groupKey, int groupOrder)"}, "getLocalOnly(android.app.Notification)": {"Returns": [["", "true if this notification is local only, false otherwise. Default value is false if not set."]], "Parameters": [["@B_android#app#Notification_E@", "the notification to inspect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get whether or not this notification is only relevant to the current device. Some notifications can be bridged to other devices for remote display. If this hint is set, it is recommended that this notification not be bridged.", "history": "", "FullName": "public static boolean getLocalOnly (Notification notif)"}}, "Inheritance": [], "ClassName": "android.preview.support.wearable.notifications.WearableNotifications", "ClassDesc": "Helper class that contains wearable extensions for notifications. Always use the @B_android#preview#support#wearable#notifications#WearableNotifications#Builder_E@ to create instances of this class. See To create a notification with wearable extensions: When you receive a notification object from the builder, the methods in this class let you access the values of various notification fields in a backward-compatible manner."}