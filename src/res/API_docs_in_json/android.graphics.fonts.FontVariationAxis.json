{"Functions": {"toFontVariationSettings(android.graphics.fonts.FontVariationAxis[])": {"Returns": [["@B_java#lang#String_E@", "String a valid font variation settings string. This value will never be null."]], "Parameters": [["@B_android#graphics#fonts#FontVariationAxis_E@", "FontVariationAxis: an array of FontVariationAxis. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stringify the array of FontVariationAxis.", "history": "Added in API level 26", "FullName": "public static String toFontVariationSettings (FontVariationAxis[] axes)"}, "getStyleValue()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the style value associated to the given axis for this font.", "history": "Added in API level 26", "FullName": "public float getStyleValue ()"}, "FontVariationAxis(java.lang.String, float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment This value must never be null."], ["float", "float no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If given tag string is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Construct FontVariationAxis. The axis tag must contain four ASCII characters. Tag string that are longer or shorter than four characters, or contains characters outside of U+0020..U+007E are invalid.", "history": "added in API level 26", "FullName": "public FontVariationAxis (String tagString, float styleValue)"}, "getTag()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the variable font axis tag associated to this axis.", "history": "Added in API level 26", "FullName": "public String getTag ()"}, "fromFontVariationSettings(java.lang.String)": {"Returns": [["@B_android#graphics#fonts#FontVariationAxis_E@", "FontVariationAxis[] the array of parsed font variation axis. null if settings has no font variation settings."]], "Parameters": [["@B_java#lang#String_E@", "String: font variation settings. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If given string is not a valid font variation settings format."]], "SeeAlso": [], "Permissions": [], "Description": "Construct FontVariationAxis array from font variation settings. The settings string is constructed from multiple pairs of axis tag and style values. The axis tag must contain four ASCII characters and must be wrapped with single quotes (U+0027) or double quotes (U+0022). Axis strings that are longer or shorter than four characters, or contain characters outside of U+0020..U+007E are invalid. If a specified axis name is not defined in the font, the settings will be ignored.", "history": "Added in API level 26", "FullName": "public static FontVariationAxis[] fromFontVariationSettings (String settings)"}, "FontVariationAxis(java.lang.String,float)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."], ["float", "float no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If given tag string is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Construct FontVariationAxis. The axis tag must contain four ASCII characters. Tag string that are longer or shorter than four characters, or contains characters outside of U+0020..U+007E are invalid.", "history": "Added in API level 26", "FullName": "public FontVariationAxis (String tagString, float styleValue)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a valid font variation setting string for this object.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 26", "FullName": "public boolean equals (Object o)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.graphics.fonts.FontVariationAxis", "ClassDesc": "Class that holds information about single font variation axis."}