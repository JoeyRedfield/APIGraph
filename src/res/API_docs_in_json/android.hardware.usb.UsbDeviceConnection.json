{"Functions": {"setConfiguration(android.hardware.usb.UsbConfiguration)": {"Returns": [["boolean", "true if the configuration was successfully set"]], "Parameters": [["@B_android#hardware#usb#UsbConfiguration_E@", "UsbConfiguration no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the device's current @B_android#hardware#usb#UsbConfiguration_E@.", "history": "Added in API level 21", "FullName": "public boolean setConfiguration (UsbConfiguration configuration)"}, "controlTransfer(int,int,int,int,byte[],int,int)": {"Returns": [["int", "length of data transferred (or zero) for success, or negative value for failure"]], "Parameters": [["int", "int: request type for this transaction"], ["int", "int: request ID for this transaction"], ["int", "int: value field for this transaction"], ["int", "int: index field for this transaction"], ["byte[]", "byte: buffer for data portion of transaction, or null if no data needs to be sent or received"], ["int", "int: the length of the data to send or receive"], ["int", "int: in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a control transaction on endpoint zero for this device. The direction of the transfer is determined by the request type. If requestType & @B_android#hardware#usb#UsbConstants#USB_ENDPOINT_DIR_MASK_E@ is @B_android#hardware#usb#UsbConstants#USB_DIR_OUT_E@, then the transfer is a write, and if it is @B_android#hardware#usb#UsbConstants#USB_DIR_IN_E@, then the transfer is a read. This method transfers data starting from index 0 in the buffer. To specify a different offset, use @B_android#hardware#usb#UsbDeviceConnection#controlTransfer_E@.", "history": "Added in API level 12", "FullName": "public int controlTransfer (int requestType, int request, int value, int index, byte[] buffer, int length, int timeout)"}, "releaseInterface(android.hardware.usb.UsbInterface)": {"Returns": [["boolean", "true if the interface was successfully released"]], "Parameters": [["@B_android#hardware#usb#UsbInterface_E@", "UsbInterface no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases exclusive access to a @B_android#hardware#usb#UsbInterface_E@.", "history": "Added in API level 12", "FullName": "public boolean releaseInterface (UsbInterface intf)"}, "setInterface(android.hardware.usb.UsbInterface)": {"Returns": [["boolean", "true if the interface was successfully selected"]], "Parameters": [["@B_android#hardware#usb#UsbInterface_E@", "UsbInterface no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current @B_android#hardware#usb#UsbInterface_E@. Used to select between two interfaces with the same ID but different alternate setting.", "history": "Added in API level 21", "FullName": "public boolean setInterface (UsbInterface intf)"}, "bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)": {"Returns": [["int", "length of data transferred (or zero) for success, or negative value for failure"]], "Parameters": [["@B_android#hardware#usb#UsbEndpoint_E@", "UsbEndpoint: the endpoint for this transaction"], ["byte[]", "byte: buffer for data to send or receive; can be null to wait for next transaction without reading data"], ["int", "int: the length of the data to send or receive. Before @B_android#os#Build#VERSION_CODES#P_E@, a value larger than 16384 bytes would be truncated down to 16384. In API @B_android#os#Build#VERSION_CODES#P_E@ and after, any value of length is valid."], ["int", "int: in milliseconds, 0 is infinite"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a bulk transaction on the given endpoint. The direction of the transfer is determined by the direction of the endpoint. This method transfers data starting from index 0 in the buffer. To specify a different offset, use @B_android#hardware#usb#UsbDeviceConnection#bulkTransfer_E@.", "history": "Added in API level 12", "FullName": "public int bulkTransfer (UsbEndpoint endpoint, byte[] buffer, int length, int timeout)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases all system resources related to the device. Once the object is closed it cannot be used again. The client must call @B_android#hardware#usb#UsbManager#openDevice_E@ again to retrieve a new instance to reestablish communication with the device.", "history": "Added in API level 12", "FullName": "public void close ()"}, "claimInterface(android.hardware.usb.UsbInterface,boolean)": {"Returns": [["boolean", "true if the interface was successfully claimed"]], "Parameters": [["@B_android#hardware#usb#UsbInterface_E@", "UsbInterface: the interface to claim"], ["boolean", "boolean: true to disconnect kernel driver if necessary"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Claims exclusive access to a @B_android#hardware#usb#UsbInterface_E@. This must be done before sending or receiving data on any @B_android#hardware#usb#UsbEndpoint_E@s belonging to the interface.", "history": "Added in API level 12", "FullName": "public boolean claimInterface (UsbInterface intf, boolean force)"}, "controlTransfer(int,int,int,int,byte[],int,int,int)": {"Returns": [["int", "length of data transferred (or zero) for success, or negative value for failure"]], "Parameters": [["int", "int: request type for this transaction"], ["int", "int: request ID for this transaction"], ["int", "int: value field for this transaction"], ["int", "int: index field for this transaction"], ["byte[]", "byte: buffer for data portion of transaction, or null if no data needs to be sent or received"], ["int", "int: the index of the first byte in the buffer to send or receive"], ["int", "int: the length of the data to send or receive"], ["int", "int: in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a control transaction on endpoint zero for this device. The direction of the transfer is determined by the request type. If requestType & @B_android#hardware#usb#UsbConstants#USB_ENDPOINT_DIR_MASK_E@ is @B_android#hardware#usb#UsbConstants#USB_DIR_OUT_E@, then the transfer is a write, and if it is @B_android#hardware#usb#UsbConstants#USB_DIR_IN_E@, then the transfer is a read.", "history": "Added in API level 18", "FullName": "public int controlTransfer (int requestType, int request, int value, int index, byte[] buffer, int offset, int length, int timeout)"}, "getSerial()": {"Returns": [["@B_java#lang#String_E@", "the device serial number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the serial number for the device. This will return null if the device has not been opened.", "history": "Added in API level 12", "FullName": "public String getSerial ()"}, "getRawDescriptors()": {"Returns": [["byte[]", "raw USB descriptors"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw USB descriptors for the device. This can be used to access descriptors not supported directly via the higher level APIs.", "history": "Added in API level 13", "FullName": "public byte[] getRawDescriptors ()"}, "requestWait()": {"Returns": [["@B_android#hardware#usb#UsbRequest_E@", "a completed USB request, or null if an error occurred"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "Before API @B_android#os#Build#VERSION_CODES#O_E@: if the number of bytes read or written is more than the limit of the request's buffer. The number of bytes is determined by the length parameter of @B_android#hardware#usb#UsbRequest#queue_E@"], ["@B_java#nio#BufferOverflowException_E@", "In API @B_android#os#Build#VERSION_CODES#O_E@ and after: if the number of bytes read or written is more than the limit of the request's buffer. The number of bytes is determined by the length parameter of @B_android#hardware#usb#UsbRequest#queue_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Waits for the result of a @B_android#hardware#usb#UsbRequest#queue_E@ operation Note that this may return requests queued on multiple @B_android#hardware#usb#UsbEndpoint_E@s. When multiple endpoints are in use, @B_android#hardware#usb#UsbRequest#getEndpoint_E@ and @B_android#hardware#usb#UsbRequest#getClientData_E@ can be useful in determining how to process the result of this function.", "history": "Added in API level 12", "FullName": "public UsbRequest requestWait ()"}, "getFileDescriptor()": {"Returns": [["int", "the native file descriptor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the native file descriptor for the device, or -1 if the device is not opened. This is intended for passing to native code to access the device.", "history": "Added in API level 12", "FullName": "public int getFileDescriptor ()"}, "requestWait(long)": {"Returns": [["@B_android#hardware#usb#UsbRequest_E@", "a completed USB request, or null if an error occurred"]], "Parameters": [["long", "long: timeout in milliseconds. If 0 this method does not wait."]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "if the number of bytes read or written is more than the limit of the request's buffer. The number of bytes is determined by the length parameter of @B_android#hardware#usb#UsbRequest#queue_E@"], ["@B_java#util#concurrent#TimeoutException_E@", "if no request was received in timeout milliseconds."]], "SeeAlso": [], "Permissions": [], "Description": "Waits for the result of a @B_android#hardware#usb#UsbRequest#queue_E@ operation Note that this may return requests queued on multiple @B_android#hardware#usb#UsbEndpoint_E@s. When multiple endpoints are in use, @B_android#hardware#usb#UsbRequest#getEndpoint_E@ and @B_android#hardware#usb#UsbRequest#getClientData_E@ can be useful in determining how to process the result of this function. Android processes @B_android#hardware#usb#UsbRequest_E@ asynchronously. Hence it is not guaranteed that @B_android#hardware#usb#UsbDeviceConnection#requestWait_E@ returns a request that has been queued right before even if the request could have been processed immediately.", "history": "Added in API level 26", "FullName": "public UsbRequest requestWait (long timeout)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 12", "FullName": "protected void finalize ()"}, "bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int,int)": {"Returns": [["int", "length of data transferred (or zero) for success, or negative value for failure"]], "Parameters": [["@B_android#hardware#usb#UsbEndpoint_E@", "UsbEndpoint: the endpoint for this transaction"], ["byte[]", "byte: buffer for data to send or receive"], ["int", "int: the index of the first byte in the buffer to send or receive"], ["int", "int: the length of the data to send or receive. Before @B_android#os#Build#VERSION_CODES#P_E@, a value larger than 16384 bytes would be truncated down to 16384. In API @B_android#os#Build#VERSION_CODES#P_E@ and after, any value of length is valid."], ["int", "int: in milliseconds, 0 is infinite"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a bulk transaction on the given endpoint. The direction of the transfer is determined by the direction of the endpoint.", "history": "Added in API level 18", "FullName": "public int bulkTransfer (UsbEndpoint endpoint, byte[] buffer, int offset, int length, int timeout)"}}, "Inheritance": [], "ClassName": "android.hardware.usb.UsbDeviceConnection", "ClassDesc": "This class is used for sending and receiving data and control messages to a USB device. Instances of this class are created by @B_android#hardware#usb#UsbManager#openDevice_E@."}