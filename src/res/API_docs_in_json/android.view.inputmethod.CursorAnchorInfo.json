{"Functions": {"CursorAnchorInfo(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public CursorAnchorInfo (Parcel source)"}, "getComposingTextStart()": {"Returns": [["int", "-1 if there is no composing text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index where the composing text starts.", "history": "Added in API level 21", "FullName": "public int getComposingTextStart ()"}, "getInsertionMarkerBaseline()": {"Returns": [["float", "y coordinate that is compatible with @B_android#text#Layout#getLineBaseline_E@. java.lang.Float.NaN if not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the vertical baseline position of the insertion marker, in the local coordinates that will be transformed with @B_android#view#inputmethod#CursorAnchorInfo#getMatrix_E@ when rendered on the screen.", "history": "Added in API level 21", "FullName": "public float getInsertionMarkerBaseline ()"}, "getSelectionEnd()": {"Returns": [["int", "-1 if there is no selection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index where the selection ends.", "history": "Added in API level 21", "FullName": "public int getSelectionEnd ()"}, "getInsertionMarkerFlags()": {"Returns": [["int", "the flag of the insertion marker. 0 if no flag is specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the flag of the insertion marker.", "history": "Added in API level 21", "FullName": "public int getInsertionMarkerFlags ()"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "getMatrix()": {"Returns": [["@B_android#graphics#Matrix_E@", "a new instance (copy) of the transformation matrix."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance of @B_android#graphics#Matrix_E@ that indicates the transformation matrix that is to be applied other positional data in this class.", "history": "Added in API level 21", "FullName": "public Matrix getMatrix ()"}, "getComposingText()": {"Returns": [["@B_java#lang#CharSequence_E@", "null if there is no composition."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the entire composing text.", "history": "Added in API level 21", "FullName": "public CharSequence getComposingText ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getCharacterBoundsFlags(int)": {"Returns": [["int", "0 if no flag is specified."]], "Parameters": [["int", "int: index of the character in a Java chars."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the flags associated with the character bounds specified with the index.", "history": "Added in API level 21", "FullName": "public int getCharacterBoundsFlags (int index)"}, "getSelectionStart()": {"Returns": [["int", "-1 if there is no selection."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the index where the selection starts.", "history": "Added in API level 21", "FullName": "public int getSelectionStart ()"}, "getInsertionMarkerBottom()": {"Returns": [["float", "y coordinate that is compatible with @B_android#text#Layout#getLineBottom_E@. java.lang.Float.NaN if not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the vertical bottom position of the insertion marker, in the local coordinates that will be transformed with @B_android#view#inputmethod#CursorAnchorInfo#getMatrix_E@ when rendered on the screen.", "history": "Added in API level 21", "FullName": "public float getInsertionMarkerBottom ()"}, "getCharacterBounds(int)": {"Returns": [["@B_android#graphics#RectF_E@", "the character bounds in local coordinates as a new instance of @B_android#graphics#RectF_E@."]], "Parameters": [["int", "int: index of the character in a Java chars."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance of @B_android#graphics#RectF_E@ that indicates the location of the character specified with the index.", "history": "Added in API level 21", "FullName": "public RectF getCharacterBounds (int index)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getInsertionMarkerHorizontal()": {"Returns": [["float", "x coordinate that is compatible with @B_android#text#Layout#getPrimaryHorizontal_E@. Pay special care to RTL/LTR handling. java.lang.Float.NaN if not specified."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#text#Layout#getPrimaryHorizontal_E@"], "Permissions": [], "Description": "Returns the horizontal start of the insertion marker, in the local coordinates that will be transformed with @B_android#view#inputmethod#CursorAnchorInfo#getMatrix_E@ when rendered on the screen.", "history": "Added in API level 21", "FullName": "public float getInsertionMarkerHorizontal ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The @B_android#os#Parcel_E@ to be written."], ["int", "int: The flags used for parceling."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Used to package this object into a @B_android#os#Parcel_E@.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getInsertionMarkerTop()": {"Returns": [["float", "y coordinate that is compatible with @B_android#text#Layout#getLineTop_E@. java.lang.Float.NaN if not specified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the vertical top position of the insertion marker, in the local coordinates that will be transformed with @B_android#view#inputmethod#CursorAnchorInfo#getMatrix_E@ when rendered on the screen.", "history": "Added in API level 21", "FullName": "public float getInsertionMarkerTop ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.view.inputmethod.CursorAnchorInfo", "ClassDesc": "Positional information about the text insertion point and characters in the composition string. This class encapsulates locations of the text insertion point and the composition string in the screen coordinates so that IMEs can render their UI components near where the text is actually inserted."}