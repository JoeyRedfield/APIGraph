{"Functions": {"decrementAndGet(int)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the element at index i.", "history": "Added in API level 1", "FullName": "public final int decrementAndGet (int i)"}, "addAndGet(int, int)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"], ["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "added in API level 1", "FullName": "public final int addAndGet (int i, int delta)"}, "lazySet(int, int)": {"Returns": [], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "added in API level 9", "FullName": "public final void lazySet (int i, int newValue)"}, "addAndGet(int,int)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"], ["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "Added in API level 1", "FullName": "public final int addAndGet (int i, int delta)"}, "AtomicIntegerArray(int[])": {"Returns": [], "Parameters": [["int[]", "int: the array to copy elements from"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicIntegerArray with the same length as, and all elements copied from, the given array.", "history": "Added in API level 1", "FullName": "public AtomicIntegerArray (int[] array)"}, "set(int, int)": {"Returns": [], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "added in API level 1", "FullName": "public final void set (int i, int newValue)"}, "getAndIncrement(int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the element at index i.", "history": "Added in API level 1", "FullName": "public final int getAndIncrement (int i)"}, "getAndSet(int, int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "added in API level 1", "FullName": "public final int getAndSet (int i, int newValue)"}, "set(int,int)": {"Returns": [], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "Added in API level 1", "FullName": "public final void set (int i, int newValue)"}, "weakCompareAndSet(int, int, int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, int expect, int update)"}, "getAndDecrement(int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the element at index i.", "history": "Added in API level 1", "FullName": "public final int getAndDecrement (int i)"}, "incrementAndGet(int)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the element at index i.", "history": "Added in API level 1", "FullName": "public final int incrementAndGet (int i)"}, "getAndUpdate(int,java.util.function.IntUnaryOperator)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final int getAndUpdate (int i, IntUnaryOperator updateFunction)"}, "weakCompareAndSet(int,int,int)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, int expect, int update)"}, "getAndSet(int,int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final int getAndSet (int i, int newValue)"}, "compareAndSet(int,int,int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (int i, int expect, int update)"}, "accumulateAndGet(int,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"], ["int", "int: the update value"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final int accumulateAndGet (int i, int x, IntBinaryOperator accumulatorFunction)"}, "compareAndSet(int, int, int)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["int", "int: the expected value"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (int i, int expect, int update)"}, "get(int)": {"Returns": [["int", "the current value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value at position i.", "history": "Added in API level 1", "FullName": "public final int get (int i)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current values of array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current values of array.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "lazySet(int,int)": {"Returns": [], "Parameters": [["int", "int: the index"], ["int", "int: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (int i, int newValue)"}, "updateAndGet(int,java.util.function.IntUnaryOperator)": {"Returns": [["int", "the updated value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#IntUnaryOperator_E@", "IntUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final int updateAndGet (int i, IntUnaryOperator updateFunction)"}, "length()": {"Returns": [["int", "the length of the array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the array.", "history": "Added in API level 1", "FullName": "public final int length ()"}, "AtomicIntegerArray(int)": {"Returns": [], "Parameters": [["int", "int: the length of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicIntegerArray of the given length, with all elements initially zero.", "history": "Added in API level 1", "FullName": "public AtomicIntegerArray (int length)"}, "getAndAdd(int,int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "Added in API level 1", "FullName": "public final int getAndAdd (int i, int delta)"}, "getAndAccumulate(int,int,java.util.function.IntBinaryOperator)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["int", "int: the update value"], ["@B_java#util#function#IntBinaryOperator_E@", "IntBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final int getAndAccumulate (int i, int x, IntBinaryOperator accumulatorFunction)"}, "getAndAdd(int, int)": {"Returns": [["int", "the previous value"]], "Parameters": [["int", "int: the index"], ["int", "int: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the element at index i.", "history": "added in API level 1", "FullName": "public final int getAndAdd (int i, int delta)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicIntegerArray", "ClassDesc": "An int array in which elements may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables."}