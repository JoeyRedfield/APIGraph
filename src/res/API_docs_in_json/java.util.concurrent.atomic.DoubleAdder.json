{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the @B_java#util#concurrent#atomic#DoubleAdder#sum_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the @B_java#util#concurrent#atomic#DoubleAdder#sum_E@.", "history": "Added in API level 24", "FullName": "public String toString ()"}, "DoubleAdder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new adder with initial sum of zero.", "history": "Added in API level 24", "FullName": "public DoubleAdder ()"}, "add(double)": {"Returns": [], "Parameters": [["double", "double: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds the given value.", "history": "Added in API level 24", "FullName": "public void add (double x)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets variables maintaining the sum to zero. This method may be a useful alternative to creating a new adder, but is only effective if there are no concurrent updates. Because this method is intrinsically racy, it should only be used when it is known that no threads are concurrently updating.", "history": "Added in API level 24", "FullName": "public void reset ()"}, "doubleValue()": {"Returns": [["double", "the sum"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent to @B_java#util#concurrent#atomic#DoubleAdder#sum_E@.", "history": "Added in API level 24", "FullName": "public double doubleValue ()"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#util#concurrent#atomic#DoubleAdder#sum_E@ as a long after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public long longValue ()"}, "sum()": {"Returns": [["double", "the sum"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current sum. The returned value is NOT an atomic snapshot; invocation in the absence of concurrent updates returns an accurate result, but concurrent updates that occur while the sum is being calculated might not be incorporated. Also, because floating-point arithmetic is not strictly associative, the returned result need not be identical to the value that would be obtained in a sequential series of updates to a single variable.", "history": "Added in API level 24", "FullName": "public double sum ()"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#util#concurrent#atomic#DoubleAdder#sum_E@ as an int after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public int intValue ()"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_java#util#concurrent#atomic#DoubleAdder#sum_E@ as a float after a narrowing primitive conversion.", "history": "Added in API level 24", "FullName": "public float floatValue ()"}, "sumThenReset()": {"Returns": [["double", "the sum"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Equivalent in effect to @B_java#util#concurrent#atomic#DoubleAdder#sum_E@ followed by @B_java#util#concurrent#atomic#DoubleAdder#reset_E@. This method may apply for example during quiescent points between multithreaded computations. If there are updates concurrent with this method, the returned value is not guaranteed to be the final value occurring before the reset.", "history": "Added in API level 24", "FullName": "public double sumThenReset ()"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.util.concurrent.atomic.DoubleAdder", "ClassDesc": "One or more variables that together maintain an initially zero double sum. When updates (method @B_java#util#concurrent#atomic#DoubleAdder#add_E@) are contended across threads, the set of variables may grow dynamically to reduce contention. Method @B_java#util#concurrent#atomic#DoubleAdder#sum_E@ (or, equivalently @B_java#util#concurrent#atomic#DoubleAdder#doubleValue_E@) returns the current total combined across the variables maintaining the sum. The order of accumulation within or across threads is not guaranteed. Thus, this class may not be applicable if numerical stability is required, especially when combining values of substantially different orders of magnitude. This class is usually preferable to alternatives when multiple threads update a common value that is used for purposes such as summary statistics that are frequently updated but less frequently read. This class extends @B_java#lang#Number_E@, but does not define methods such as equals, hashCode and compareTo because instances are expected to be mutated, and so are not useful as collection keys."}