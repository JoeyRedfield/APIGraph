{"Functions": {"getApplicationInfo(java.lang.String,int,android.os.UserHandle)": {"Returns": [["@B_android#content#pm#ApplicationInfo_E@", "@B_android#content#pm#ApplicationInfo_E@ containing information about the package. Returns null if the package isn't installed for the given profile, or the profile isn't enabled."]], "Parameters": [["@B_java#lang#String_E@", "String: The package name of the application This value must never be null."], ["int", "int: Additional option flags @B_android#content#pm#PackageManager#getApplicationInfo_E@ Value is either 0 or a combination of @B_android#content#pm#PackageManager#GET_META_DATA_E@, @B_android#content#pm#PackageManager#GET_SHARED_LIBRARY_FILES_E@, @B_android#content#pm#PackageManager#MATCH_UNINSTALLED_PACKAGES_E@, @B_android#content#pm#PackageManager#MATCH_SYSTEM_ONLY_E@, android.content.pm.PackageManager.MATCH_DEBUG_TRIAGED_MISSING, @B_android#content#pm#PackageManager#MATCH_DISABLED_COMPONENTS_E@, @B_android#content#pm#PackageManager#MATCH_DISABLED_UNTIL_USED_COMPONENTS_E@, android.content.pm.PackageManager.MATCH_INSTANT, android.content.pm.PackageManager.MATCH_STATIC_SHARED_LIBRARIES, @B_android#content#pm#PackageManager#GET_DISABLED_UNTIL_USED_COMPONENTS_E@, @B_android#content#pm#PackageManager#GET_UNINSTALLED_PACKAGES_E@, and android.content.pm.PackageManager.MATCH_HIDDEN_UNTIL_INSTALLED_COMPONENTS"], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile. This value must never be null."]], "Throws": [["@B_android#content#pm#PackageManager#NameNotFoundException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns @B_android#content#pm#ApplicationInfo_E@ about an application installed for a specific user profile.", "history": "Added in API level 26", "FullName": "public ApplicationInfo getApplicationInfo (String packageName, int flags, UserHandle user)"}, "getShortcutConfigActivityIntent(android.content.pm.LauncherActivityInfo)": {"Returns": [["@B_android#content#IntentSender_E@", "This value may be null."]], "Parameters": [["@B_android#content#pm#LauncherActivityInfo_E@", "LauncherActivityInfo: a configuration activity returned by @B_android#content#pm#LauncherApps#getShortcutConfigActivityList_E@ This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked or not running."], ["@B_java#lang#SecurityException_E@", "if @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@ is false."]], "SeeAlso": ["@B_android#content#pm#LauncherApps#getPinItemRequest_E@", "@B_android#content#Intent_E@", "@B_android#app#Activity#startIntentSenderForResult_E@"], "Permissions": [], "Description": "Returns an intent sender which can be used to start the configure activity for creating custom shortcuts. Use this method if the provider is in another profile as you are not allowed to start an activity in another profile. The caller should receive @B_android#content#pm#LauncherApps#PinItemRequest_E@ in onActivityResult on @B_android#app#Activity#RESULT_OK_E@. Callers must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 26", "FullName": "public IntentSender getShortcutConfigActivityIntent (LauncherActivityInfo info)"}, "getAllPackageInstallerSessions()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageInstaller#getAllSessions_E@"], "Permissions": [], "Description": "Return list of all known install sessions in this user and managed profiles, regardless of the installer.", "history": "Added in API level 29", "FullName": "public List<PackageInstaller.SessionInfo> getAllPackageInstallerSessions ()"}, "startMainActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The ComponentName of the activity to launch"], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile"], ["@B_android#graphics#Rect_E@", "Rect: The Rect containing the source bounds of the clicked icon"], ["@B_android#os#Bundle_E@", "Bundle: Options to pass to startActivity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts a Main activity in the specified profile.", "history": "Added in API level 21", "FullName": "public void startMainActivity (ComponentName component, UserHandle user, Rect sourceBounds, Bundle opts)"}, "unregisterCallback(android.content.pm.LauncherApps.Callback)": {"Returns": [], "Parameters": [["@B_android#content#pm#LauncherApps#Callback_E@", "LauncherApps.Callback: The callback to unregister."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#LauncherApps#registerCallback_E@"], "Permissions": [], "Description": "Unregisters a callback that was previously registered.", "history": "Added in API level 21", "FullName": "public void unregisterCallback (LauncherApps.Callback callback)"}, "startAppDetailsActivity(android.content.ComponentName,android.os.UserHandle,android.graphics.Rect,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The ComponentName of the package to launch settings for."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile"], ["@B_android#graphics#Rect_E@", "Rect: The Rect containing the source bounds of the clicked icon"], ["@B_android#os#Bundle_E@", "Bundle: Options to pass to startActivity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the settings activity to show the application details for a package in the specified profile.", "history": "Added in API level 21", "FullName": "public void startAppDetailsActivity (ComponentName component, UserHandle user, Rect sourceBounds, Bundle opts)"}, "getShortcuts(android.content.pm.LauncherApps.ShortcutQuery,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "the IDs of @B_android#content#pm#ShortcutInfo_E@s that match the query. This value may be null."]], "Parameters": [["@B_android#content#pm#LauncherApps#ShortcutQuery_E@", "LauncherApps.ShortcutQuery: result includes shortcuts matching this query. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager_E@"], "Permissions": [], "Description": "Returns @B_android#content#pm#ShortcutInfo_E@s that match query. Callers must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public List<ShortcutInfo> getShortcuts (LauncherApps.ShortcutQuery query, UserHandle user)"}, "startShortcut(java.lang.String,java.lang.String,android.graphics.Rect,android.os.Bundle,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The target shortcut package name. This value must never be null."], ["@B_java#lang#String_E@", "String: The target shortcut ID. This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: The Rect containing the source bounds of the clicked icon. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: Options to pass to startActivity. This value may be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."], ["@B_android#content#ActivityNotFoundException_E@", "failed to start shortcut. (e.g. the shortcut no longer exists, is disabled, the intent receiver activity doesn't exist, etc)"]], "SeeAlso": [], "Permissions": [], "Description": "Starts a shortcut. The calling launcher application must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public void startShortcut (String packageName, String shortcutId, Rect sourceBounds, Bundle startActivityOptions, UserHandle user)"}, "registerPackageInstallerSessionCallback(java.util.concurrent.Executor,android.content.pm.PackageInstaller.SessionCallback)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Executor_E@", "Executor: @B_java#util#concurrent#Executor_E@ to handle the callbacks, cannot be null. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."], ["@B_android#content#pm#PackageInstaller#SessionCallback_E@", "PackageInstaller.SessionCallback: The callback to register. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#PackageInstaller#registerSessionCallback_E@"], "Permissions": [], "Description": "Register a callback to watch for session lifecycle events in this user and managed profiles.", "history": "Added in API level 29", "FullName": "public void registerPackageInstallerSessionCallback (Executor executor, PackageInstaller.SessionCallback callback)"}, "resolveActivity(android.content.Intent,android.os.UserHandle)": {"Returns": [["@B_android#content#pm#LauncherActivityInfo_E@", "An activity info object if there is a match."]], "Parameters": [["@B_android#content#Intent_E@", "Intent: The intent to find a match for."], ["@B_android#os#UserHandle_E@", "UserHandle: The profile to look in for a match."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the activity info for a given intent and user handle, if it resolves. Otherwise it returns null.", "history": "Added in API level 21", "FullName": "public LauncherActivityInfo resolveActivity (Intent intent, UserHandle user)"}, "shouldHideFromSuggestions(java.lang.String,android.os.UserHandle)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: The package for which to check. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: the @B_android#os#UserHandle_E@ of the profile. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a package should be hidden from suggestions to the user. Currently, this could be done because the package was marked as distracting to the user via PackageManager.setDistractingPackageRestrictions(String[], int).", "history": "Added in API level 29", "FullName": "public boolean shouldHideFromSuggestions (String packageName, UserHandle user)"}, "getShortcutIconDrawable(android.content.pm.ShortcutInfo,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The drawable associated with the shortcut."]], "Parameters": [["@B_android#content#pm#ShortcutInfo_E@", "ShortcutInfo: This value must never be null."], ["int", "int: The preferred density of the icon, zero for default density. Use density DPI values from @B_android#util#DisplayMetrics_E@."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager_E@", "@B_android#content#pm#LauncherApps#getShortcutBadgedIconDrawable_E@", "@B_android#util#DisplayMetrics_E@"], "Permissions": [], "Description": "Returns the icon for this shortcut, without any badging for the profile. The calling launcher application must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public Drawable getShortcutIconDrawable (ShortcutInfo shortcut, int density)"}, "getActivityList(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "List of launchable activities. Can be an empty list but will not be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The specific package to query. If null, it checks all installed packages in the profile."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a list of activities that specify @B_android#content#Intent#ACTION_MAIN_E@ and @B_android#content#Intent#CATEGORY_LAUNCHER_E@, across all apps, for a specified user. If an app doesn't have any activities that specify ACTION_MAIN or CATEGORY_LAUNCHER, the system adds a synthesized activity to the list. This synthesized activity represents the app's details page within system settings. As of The app is a system app. The app doesn't request any The app doesn't have a launcher activity that is enabled by default. A launcher activity has an intent containing the ACTION_MAIN action and the CATEGORY_LAUNCHER category. Additionally, the system hides synthesized activities for some or all apps in the following enterprise-related cases: If the device is a If the current user has a", "history": "Added in API level 21", "FullName": "public List<LauncherActivityInfo> getActivityList (String packageName, UserHandle user)"}, "startShortcut(android.content.pm.ShortcutInfo,android.graphics.Rect,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#pm#ShortcutInfo_E@", "ShortcutInfo: The target shortcut. This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: The Rect containing the source bounds of the clicked icon. This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: Options to pass to startActivity. This value may be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."], ["@B_android#content#ActivityNotFoundException_E@", "failed to start shortcut. (e.g. the shortcut no longer exists, is disabled, the intent receiver activity doesn't exist, etc)"]], "SeeAlso": [], "Permissions": [], "Description": "Launches a shortcut. The calling launcher application must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public void startShortcut (ShortcutInfo shortcut, Rect sourceBounds, Bundle startActivityOptions)"}, "getSuspendedPackageLauncherExtras(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_android#os#Bundle_E@", "A @B_android#os#Bundle_E@ of launcher extras. Or null if the package is not currently suspended."]], "Parameters": [["@B_java#lang#String_E@", "String: The package for which to fetch the launcher extras."], ["@B_android#os#UserHandle_E@", "UserHandle: The @B_android#os#UserHandle_E@ of the profile."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#LauncherApps#Callback#onPackagesSuspended_E@", "@B_android#content#pm#PackageManager#isPackageSuspended_E@"], "Permissions": [], "Description": "Gets the launcher extras supplied to the system when the given package was suspended via PackageManager#setPackagesSuspended(String[], boolean, PersistableBundle, PersistableBundle, String). The contents of this @B_android#os#Bundle_E@ are supposed to be a contract between the suspending app and the launcher. Note: This just returns whatever extras were provided to the system, which might even be null.", "history": "Added in API level 28", "FullName": "public Bundle getSuspendedPackageLauncherExtras (String packageName, UserHandle user)"}, "isPackageEnabled(java.lang.String,android.os.UserHandle)": {"Returns": [["boolean", "true if the package exists and is enabled."]], "Parameters": [["@B_java#lang#String_E@", "String: The package to check."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the package is installed and enabled for a profile.", "history": "Added in API level 21", "FullName": "public boolean isPackageEnabled (String packageName, UserHandle user)"}, "getShortcutConfigActivityList(java.lang.String,android.os.UserHandle)": {"Returns": [["@B_java#util#List_E@", "List of config activities. Can be an empty list but will not be null."]], "Parameters": [["@B_java#lang#String_E@", "String: The specific package to query. If null, it checks all installed packages in the profile. This value may be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@", "@B_android#content#pm#LauncherApps#getShortcutConfigActivityIntent_E@"], "Permissions": [], "Description": "Retrieves a list of config activities for creating @B_android#content#pm#ShortcutInfo_E@.", "history": "Added in API level 26", "FullName": "public List<LauncherActivityInfo> getShortcutConfigActivityList (String packageName, UserHandle user)"}, "registerCallback(android.content.pm.LauncherApps.Callback)": {"Returns": [], "Parameters": [["@B_android#content#pm#LauncherApps#Callback_E@", "LauncherApps.Callback: The callback to register."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback for changes to packages in this user and managed profiles.", "history": "Added in API level 21", "FullName": "public void registerCallback (LauncherApps.Callback callback)"}, "pinShortcuts(java.lang.String,java.util.List<java.lang.String>,android.os.UserHandle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The target package name. This value must never be null."], ["@B_java#util#List_E@", "List: The IDs of the shortcut to be pinned. This value must never be null."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager_E@"], "Permissions": [], "Description": "Pin shortcuts on a package. This API is The calling launcher application must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public void pinShortcuts (String packageName, List<String> shortcutIds, UserHandle user)"}, "getProfiles()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a list of profiles that the caller can access via the @B_android#content#pm#LauncherApps_E@ APIs. If the caller is running on a managed profile, it'll return only the current profile. Otherwise it'll return the same list as @B_android#os#UserManager#getUserProfiles_E@ would.", "history": "Added in API level 26", "FullName": "public List<UserHandle> getProfiles ()"}, "isActivityEnabled(android.content.ComponentName,android.os.UserHandle)": {"Returns": [["boolean", "true if the activity exists and is enabled."]], "Parameters": [["@B_android#content#ComponentName_E@", "ComponentName: The activity to check."], ["@B_android#os#UserHandle_E@", "UserHandle: The UserHandle of the profile."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the activity exists and it enabled for a profile. The activity may still not be exported, in which case @B_android#content#pm#LauncherApps#startMainActivity_E@ will throw a @B_java#lang#SecurityException_E@ unless the caller has the same UID as the target app's.", "history": "Added in API level 21", "FullName": "public boolean isActivityEnabled (ComponentName component, UserHandle user)"}, "hasShortcutHostPermission()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager_E@"], "Permissions": [], "Description": "Returns whether the caller can access the shortcut information. Access is currently available to: The current launcher (or default launcher if there is no set current launcher). The currently active voice interaction service. Note when this method returns false, it may be a temporary situation because the user is trying a new launcher application. The user may decide to change the default launcher back to the calling application again, so even if a launcher application loses this permission, it does", "history": "Added in API level 25", "FullName": "public boolean hasShortcutHostPermission ()"}, "getShortcutBadgedIconDrawable(android.content.pm.ShortcutInfo,int)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "A badged icon for the shortcut."]], "Parameters": [["@B_android#content#pm#ShortcutInfo_E@", "ShortcutInfo no parameter comment"], ["int", "int: Optional density for the icon, or 0 to use the default density. Use"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked, or when the user user is locked or not running."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager_E@", "@B_android#content#pm#LauncherApps#getShortcutIconDrawable_E@", "@B_android#util#DisplayMetrics_E@"], "Permissions": [], "Description": "Returns the shortcut icon with badging appropriate for the profile. The calling launcher application must be allowed to access the shortcut information, as defined in @B_android#content#pm#LauncherApps#hasShortcutHostPermission_E@.", "history": "Added in API level 25", "FullName": "public Drawable getShortcutBadgedIconDrawable (ShortcutInfo shortcut, int density)"}, "startPackageInstallerSessionDetailsActivity(android.content.pm.PackageInstaller.SessionInfo,android.graphics.Rect,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionInfo_E@", "PackageInstaller.SessionInfo: The SessionInfo of the session This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: The Rect containing the source bounds of the clicked icon This value may be null."], ["@B_android#os#Bundle_E@", "Bundle: Options to pass to startActivity This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts an activity to show the details of the specified session.", "history": "Added in API level 29", "FullName": "public void startPackageInstallerSessionDetailsActivity (PackageInstaller.SessionInfo sessionInfo, Rect sourceBounds, Bundle opts)"}, "registerCallback(android.content.pm.LauncherApps.Callback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#content#pm#LauncherApps#Callback_E@", "LauncherApps.Callback: The callback to register."], ["@B_android#os#Handler_E@", "Handler: that should be used to post callbacks on, may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback for changes to packages in this user and managed profiles.", "history": "Added in API level 21", "FullName": "public void registerCallback (LauncherApps.Callback callback, Handler handler)"}, "unregisterPackageInstallerSessionCallback(android.content.pm.PackageInstaller.SessionCallback)": {"Returns": [], "Parameters": [["@B_android#content#pm#PackageInstaller#SessionCallback_E@", "PackageInstaller.SessionCallback: The callback to unregister. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#content#pm#LauncherApps#registerPackageInstallerSessionCallback_E@"], "Permissions": [], "Description": "Unregisters a callback that was previously registered.", "history": "Added in API level 29", "FullName": "public void unregisterPackageInstallerSessionCallback (PackageInstaller.SessionCallback callback)"}, "getPinItemRequest(android.content.Intent)": {"Returns": [["@B_android#content#pm#LauncherApps#PinItemRequest_E@", "no returns description in source"]], "Parameters": [["@B_android#content#Intent_E@", "Intent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A helper method to extract a @B_android#content#pm#LauncherApps#PinItemRequest_E@ set to the @B_android#content#pm#LauncherApps#EXTRA_PIN_ITEM_REQUEST_E@ extra.", "history": "Added in API level 26", "FullName": "public LauncherApps.PinItemRequest getPinItemRequest (Intent intent)"}}, "Inheritance": [], "ClassName": "android.content.pm.LauncherApps", "ClassDesc": "Class for retrieving a list of launchable activities for the current user and any associated managed profiles that are visible to the current user, which can be retrieved with @B_android#content#pm#LauncherApps#getProfiles_E@. This is mainly for use by launchers. Apps can be queried for each user profile. Since the PackageManager will not deliver package broadcasts for other profiles, you can register for package changes here. To watch for managed profiles being added or removed, register for the following broadcasts: @B_android#content#Intent#ACTION_MANAGED_PROFILE_ADDED_E@ and @B_android#content#Intent#ACTION_MANAGED_PROFILE_REMOVED_E@. Note as of Android O, apps on a managed profile are no longer allowed to access apps on the main profile. Apps can only access profiles returned by @B_android#content#pm#LauncherApps#getProfiles_E@."}