{"Functions": {"onStartJob(android.app.job.JobParameters)": {"Returns": [["boolean", "true if your service will continue running, using a separate thread when appropriate. false means that this job has completed its work."]], "Parameters": [["@B_android#app#job#JobParameters_E@", "JobParameters: Parameters specifying info about this job, including the optional extras configured with {@link JobInfo.Builder#setExtras(android.os.PersistableBundle). This object serves to identify this specific running job instance when calling {@link #jobFinished(JobParameters, boolean)}."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to indicate that the job has begun executing. Override this method with the logic for your job. Like all other component lifecycle callbacks, this method executes on your application's main thread. Return true from this method if your job needs to continue running. If you do this, the job remains active until you call @B_android#app#job#JobService#jobFinished_E@ to tell the system that it has completed its work, or until the job's required constraints are no longer satisfied. For example, if the job was scheduled using @B_android#app#job#JobInfo#Builder#setRequiresCharging_E@, it will be immediately halted by the system if the user unplugs the device from power, the job's @B_android#app#job#JobService#onStopJob_E@ callback will be invoked, and the app will be expected to shut down all ongoing work connected with that job. The system holds a wakelock on behalf of your app as long as your job is executing. This wakelock is acquired before this method is invoked, and is not released until either you call @B_android#app#job#JobService#jobFinished_E@, or after the system invokes @B_android#app#job#JobService#onStopJob_E@ to notify your job that it is being shut down prematurely. Returning false from this method means your job is already finished. The system's wakelock for the job will be released, and @B_android#app#job#JobService#onStopJob_E@ will not be invoked.", "history": "added in API level 21", "FullName": "public abstract boolean onStartJob (JobParameters params)"}, "JobService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public JobService ()"}, "jobFinished(android.app.job.JobParameters,boolean)": {"Returns": [], "Parameters": [["@B_android#app#job#JobParameters_E@", "JobParameters: The parameters identifying this job, as supplied to the job in the @B_android#app#job#JobService#onStartJob_E@ callback."], ["boolean", "boolean: true if this job should be rescheduled according to the back-off criteria specified when it was first scheduled; false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this to inform the JobScheduler that the job has finished its work. When the system receives this message, it releases the wakelock being held for the job. You can request that the job be scheduled again by passing true as the wantsReschedule parameter. This will apply back-off policy for the job; this policy can be adjusted through the @B_android#app#job#JobInfo#Builder#setBackoffCriteria_E@ method when the job is originally scheduled. The job's initial requirements are preserved when jobs are rescheduled, regardless of backed-off policy. A job running while the device is dozing will not be rescheduled with the normal back-off policy. Instead, the job will be re-added to the queue and executed again during a future idle maintenance window.", "history": "Added in API level 21", "FullName": "public final void jobFinished (JobParameters params, boolean wantsReschedule)"}, "onStopJob(android.app.job.JobParameters)": {"Returns": [["boolean", "true to indicate to the JobManager whether you'd like to reschedule this job based on the retry criteria provided at job creation-time; or false to end the job entirely. Regardless of the value returned, your job must stop executing."]], "Parameters": [["@B_android#app#job#JobParameters_E@", "JobParameters: The parameters identifying this job, as supplied to the job in the @B_android#app#job#JobService#onStartJob_E@ callback."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called if the system has determined that you must stop execution of your job even before you've had a chance to call @B_android#app#job#JobService#jobFinished_E@. This will happen if the requirements specified at schedule time are no longer met. For example you may have requested WiFi with @B_android#app#job#JobInfo#Builder#setRequiredNetworkType_E@, yet while your job was executing the user toggled WiFi. Another example is if you had specified @B_android#app#job#JobInfo#Builder#setRequiresDeviceIdle_E@, and the phone left its idle maintenance window. You are solely responsible for the behavior of your application upon receipt of this message; your app will likely start to misbehave if you ignore it. Once this method returns, the system releases the wakelock that it is holding on behalf of the job.", "history": "Added in API level 21", "FullName": "public abstract boolean onStopJob (JobParameters params)"}}, "Inheritance": ["@B_android#content#Context_E@", "@B_android#content#ContextWrapper_E@", "@B_android#app#Service_E@"], "ClassName": "android.app.job.JobService", "ClassDesc": "Entry point for the callback from the @B_android#app#job#JobScheduler_E@. This is the base class that handles asynchronous requests that were previously scheduled. You are responsible for overriding @B_android#app#job#JobService#onStartJob_E@, which is where you will implement your job logic. This service executes each incoming job on a @B_android#os#Handler_E@ running on your application's main thread. This means that you @B_android#os#AsyncTask_E@ of your choosing. Not doing so will result in blocking any future callbacks from the JobManager - specifically @B_android#app#job#JobService#onStopJob_E@, which is meant to inform you that the scheduling requirements are no longer being met."}