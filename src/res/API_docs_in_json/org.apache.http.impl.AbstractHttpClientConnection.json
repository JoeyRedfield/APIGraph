{"Functions": {"assertOpen()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected abstract void assertOpen ()"}, "createHttpResponseFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpResponseFactory createHttpResponseFactory ()"}, "createEntitySerializer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected EntitySerializer createEntitySerializer ()"}, "receiveResponseEntity(org.apache.http.HttpResponse)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpResponse_E@", "the response to attach the entity to"]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the next response entity available from this connection and attaches it to an existing HttpResponse object.", "history": "Added in API level 1", "FullName": "public void receiveResponseEntity (HttpResponse response)"}, "isStale()": {"Returns": [["", "true if attempts to use this connection are likely to succeed, or false if they are likely to fail and this connection should be closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this connection has gone down. Network connections may get closed during some time of inactivity for several reasons. The next time a read is attempted on such a connection it will throw an IOException. This method tries to alleviate this inconvenience by trying to find out if a connection is still usable. Implementations may do that by attempting a read with a very small timeout. Thus this method may block for a small amount of time before returning a result. It is therefore an", "history": "Added in API level 1", "FullName": "public boolean isStale ()"}, "receiveResponseHeader()": {"Returns": [["", "a new HttpResponse object with status line and headers initialized."]], "Parameters": [], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the request line and headers of the next response available from this connection. The caller should examine the HttpResponse object to find out if it should try to receive a response entity as well.", "history": "Added in API level 1", "FullName": "public HttpResponse receiveResponseHeader ()"}, "doFlush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void doFlush ()"}, "createRequestWriter(org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpMessageWriter createRequestWriter (SessionOutputBuffer buffer, HttpParams params)"}, "isResponseAvailable(int)": {"Returns": [["", "true if data is available; false if there was no data available even after waiting for timeout milliseconds."]], "Parameters": [["int", "the maximum time in milliseconds to wait for data"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks if response data is available from the connection. May wait for the specified time until some data becomes available. Note that some implementations may completely ignore the timeout parameter.", "history": "Added in API level 1", "FullName": "public boolean isResponseAvailable (int timeout)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes out all pending buffered data over the open connection.", "history": "Added in API level 1", "FullName": "public void flush ()"}, "getMetrics()": {"Returns": [["", "HttpConnectionMetrics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection of connection metrcis", "history": "Added in API level 1", "FullName": "public HttpConnectionMetrics getMetrics ()"}, "init(org.apache.http.io.SessionInputBuffer, org.apache.http.io.SessionOutputBuffer, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void init (SessionInputBuffer inbuffer, SessionOutputBuffer outbuffer, HttpParams params)"}, "sendRequestHeader(org.apache.http.HttpRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpRequest_E@", "the request whose headers to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request line and all headers over the connection.", "history": "Added in API level 1", "FullName": "public void sendRequestHeader (HttpRequest request)"}, "createEntityDeserializer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected EntityDeserializer createEntityDeserializer ()"}, "sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpEntityEnclosingRequest_E@", "the request whose entity to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request entity over the connection.", "history": "Added in API level 1", "FullName": "public void sendRequestEntity (HttpEntityEnclosingRequest request)"}, "createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpMessageParser createResponseParser (SessionInputBuffer buffer, HttpResponseFactory responseFactory, HttpParams params)"}, "AbstractHttpClientConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public AbstractHttpClientConnection ()"}}, "Inheritance": [], "ClassName": "org.apache.http.impl.AbstractHttpClientConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Abstract client-side HTTP connection capable of transmitting and receiving data using arbitrary @B_org#apache#http#io#SessionInputBuffer_E@ and @B_org#apache#http#io#SessionOutputBuffer_E@"}