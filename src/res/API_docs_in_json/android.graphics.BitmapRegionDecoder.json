{"Functions": {"newInstance(java.io.FileDescriptor,boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor containing the data to decode"], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported.", "history": "Added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable)"}, "newInstance(byte[],int,int,boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["byte[]", "byte: byte array of compressed image data."], ["int", "int: offset into data for where the decoder should begin parsing."], ["int", "int: the number of bytes, beginning at offset, to parse"], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported.", "history": "Added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (byte[] data, int offset, int length, boolean isShareable)"}, "newInstance(java.lang.String,boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#lang#String_E@", "String: complete path name for the file to be decoded."], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from a file path. Currently only the JPEG and PNG formats are supported.", "history": "Added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (String pathName, boolean isShareable)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 10", "FullName": "protected void finalize ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Frees up the memory associated with this region decoder, and mark the region decoder as \"dead\", meaning it will throw an exception if decodeRegion(), getWidth() or getHeight() is called. This operation cannot be reversed, so it should only be called if you are sure there are no further uses for the region decoder. This is an advanced call, and normally need not be called, since the normal GC process will free up this memory when there are no more references to this region decoder.", "history": "Added in API level 10", "FullName": "public void recycle ()"}, "newInstance(byte[], int, int, boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["byte[]", "byte: byte array of compressed image data."], ["int", "int: offset into data for where the decoder should begin parsing."], ["int", "int: the number of bytes, beginning at offset, to parse"], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from the specified byte array. Currently only the JPEG and PNG formats are supported.", "history": "added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (byte[] data, int offset, int length, boolean isShareable)"}, "newInstance(java.io.InputStream, boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: The input stream that holds the raw data to be decoded into a BitmapRegionDecoder."], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded. Prior to Build.VERSION_CODES.KITKAT, if is.markSupported() returns true, is.mark(1024) would be called. As of Build.VERSION_CODES.KITKAT, this is no longer the case."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from an input stream. The stream's position will be where ever it was after the encoded data was read. Currently only the JPEG and PNG formats are supported.", "history": "added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (InputStream is, boolean isShareable)"}, "getHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the original image's height", "history": "Added in API level 10", "FullName": "public int getHeight ()"}, "newInstance(java.io.FileDescriptor, boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: The file descriptor containing the data to decode"], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from the file descriptor. The position within the descriptor will not be changed when this returns, so the descriptor can be used again as is. Currently only the JPEG and PNG formats are supported.", "history": "added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (FileDescriptor fd, boolean isShareable)"}, "isRecycled()": {"Returns": [["boolean", "true if the region decoder has been recycled"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this region decoder has been recycled. If so, then it is an error to try use its method.", "history": "Added in API level 10", "FullName": "public boolean isRecycled ()"}, "newInstance(java.lang.String, boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#lang#String_E@", "String: complete path name for the file to be decoded."], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from a file path. Currently only the JPEG and PNG formats are supported.", "history": "added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (String pathName, boolean isShareable)"}, "decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory.Options)": {"Returns": [["@B_android#graphics#Bitmap_E@", "The decoded bitmap, or null if the image data could not be decoded."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle that specified the region to be decode."], ["@B_android#graphics#BitmapFactory#Options_E@", "BitmapFactory.Options: null-ok; Options that control downsampling. inPurgeable is not supported."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#graphics#BitmapFactory#Options#inPreferredConfig_E@ is @B_android#graphics#Bitmap#Config#HARDWARE_E@ and @B_android#graphics#BitmapFactory#Options#inMutable_E@ is set, if the specified color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, or if the specified color space's transfer function is not an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Decodes a rectangle region in the image specified by rect.", "history": "Added in API level 10", "FullName": "public Bitmap decodeRegion (Rect rect, BitmapFactory.Options options)"}, "getWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the original image's width", "history": "Added in API level 10", "FullName": "public int getWidth ()"}, "newInstance(java.io.InputStream,boolean)": {"Returns": [["@B_android#graphics#BitmapRegionDecoder_E@", "BitmapRegionDecoder, or null if the image data could not be decoded."]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: The input stream that holds the raw data to be decoded into a BitmapRegionDecoder."], ["boolean", "boolean: If this is true, then the BitmapRegionDecoder may keep a shallow reference to the input. If this is false, then the BitmapRegionDecoder will explicitly make a copy of the input data, and keep that. Even if sharing is allowed, the implementation may still decide to make a deep copy of the input data. If an image is progressively encoded, allowing sharing may degrade the decoding speed."]], "Throws": [["@B_java#io#IOException_E@", "if the image format is not supported or can not be decoded. Prior to Build.VERSION_CODES.KITKAT, if InputStream#markSupported returns true, is.mark(1024) would be called. As of Build.VERSION_CODES.KITKAT, this is no longer the case."]], "SeeAlso": [], "Permissions": [], "Description": "Create a BitmapRegionDecoder from an input stream. The stream's position will be where ever it was after the encoded data was read. Currently only the JPEG and PNG formats are supported.", "history": "Added in API level 10", "FullName": "public static BitmapRegionDecoder newInstance (InputStream is, boolean isShareable)"}}, "Inheritance": [], "ClassName": "android.graphics.BitmapRegionDecoder", "ClassDesc": "BitmapRegionDecoder can be used to decode a rectangle region from an image. BitmapRegionDecoder is particularly useful when an original image is large and you only need parts of the image. To create a BitmapRegionDecoder, call newInstance(...). Given a BitmapRegionDecoder, users can call decodeRegion() repeatedly to get a decoded Bitmap of the specified region."}