{"Functions": {"isTracing()": {"Returns": [["boolean", "True if tracing is enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the WebView framework is tracing.", "history": "Added in API level 28", "FullName": "public abstract boolean isTracing ()"}, "getInstance()": {"Returns": [["@B_android#webkit#TracingController_E@", "The default TracingController instance. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default TracingController instance. At present there is only one TracingController instance for all WebView instances, however this restriction may be relaxed in a future Android release.", "history": "Added in API level 28", "FullName": "public static TracingController getInstance ()"}, "stop(java.io.OutputStream,java.util.concurrent.Executor)": {"Returns": [["boolean", "False if the WebView framework was not tracing at the time of the call, true otherwise."]], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: The output stream the tracing data will be sent to. If null the tracing data will be discarded. This value may be null."], ["@B_java#util#concurrent#Executor_E@", "Executor: The @B_java#util#concurrent#Executor_E@ on which the outputStream @B_java#io#OutputStream#write_E@ and @B_java#io#OutputStream#close_E@ methods will be invoked. This value must never be null. Callback and listener events are dispatched through this @B_java#util#concurrent#Executor_E@, providing an easy way to control which thread is used. To dispatch events through the main thread of your application, you can use @B_android#content#Context#getMainExecutor_E@. To dispatch events through a shared thread pool, you can use @B_android#os#AsyncTask#THREAD_POOL_EXECUTOR_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops tracing and flushes tracing data to the specified outputStream. The data is sent to the specified output stream in json format typically in chunks by invoking @B_java#io#OutputStream#write_E@. On completion the @B_java#io#OutputStream#close_E@ method is called.", "history": "Added in API level 28", "FullName": "public abstract boolean stop (OutputStream outputStream, Executor executor)"}, "start(android.webkit.TracingConfig)": {"Returns": [], "Parameters": [["@B_android#webkit#TracingConfig_E@", "TracingConfig: Configuration options to use for tracing. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the system is already tracing."], ["@B_java#lang#IllegalArgumentException_E@", "If the configuration is invalid (e.g. invalid category pattern or invalid tracing mode)."]], "SeeAlso": [], "Permissions": [], "Description": "Starts tracing all webviews. Depending on the trace mode in traceConfig specifies how the trace events are recorded. For tracing modes @B_android#webkit#TracingConfig#RECORD_UNTIL_FULL_E@ and @B_android#webkit#TracingConfig#RECORD_CONTINUOUSLY_E@ the events are recorded using an internal buffer and flushed to the outputStream when @B_android#webkit#TracingController#stop_E@ is called.", "history": "Added in API level 28", "FullName": "public abstract void start (TracingConfig tracingConfig)"}, "TracingController()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This class should not be constructed by applications, use @B_android#webkit#TracingController#getInstance_E@ instead to fetch the singleton instance.", "history": "Added in API level 28", "FullName": "public TracingController ()"}}, "Inheritance": [], "ClassName": "android.webkit.TracingController", "ClassDesc": "Manages tracing of WebViews. In particular provides functionality for the app to enable/disable tracing of parts of code and to collect tracing data. This is useful for profiling performance issues, debugging and memory usage analysis in production and real life scenarios. The resulting trace data is sent back as a byte sequence in json format. This file can be loaded in \"chrome://tracing\" for further analysis. Example usage:"}