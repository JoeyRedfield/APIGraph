{"Functions": {"engineUpdate(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes"], ["int", "int: the offset to start from in the array of bytes"], ["int", "int: the number of bytes to use, starting at offset"]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.", "history": "added in API level 1", "FullName": "protected abstract void engineUpdate (byte[] b, int off, int len)"}, "engineInitSign(java.security.PrivateKey)": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: the private key of the identity whose signature will be generated."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is improperly encoded, parameters are missing, and so on."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this signature object with the specified private key for signing operations.", "history": "Added in API level 1", "FullName": "protected abstract void engineInitSign (PrivateKey privateKey)"}, "engineVerify(byte[],int,int)": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. Note: Subclasses should overwrite the default implementation.", "history": "Added in API level 1", "FullName": "protected boolean engineVerify (byte[] sigBytes, int offset, int length)"}, "engineUpdate(byte)": {"Returns": [], "Parameters": [["byte", "byte: the byte to use for the update."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly."]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified using the specified byte.", "history": "Added in API level 1", "FullName": "protected abstract void engineUpdate (byte b)"}, "engineSetParameter(java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the parameters"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if this method is not overridden by a provider"], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if this method is overridden by a provider and the given parameters are inappropriate for this signature engine"]], "SeeAlso": [], "Permissions": [], "Description": "This method is overridden by providers to initialize this signature engine with the specified parameter set.", "history": "Added in API level 1", "FullName": "protected void engineSetParameter (AlgorithmParameterSpec params)"}, "engineGetParameters()": {"Returns": [["@B_java#security#AlgorithmParameters_E@", "the parameters used with this signature engine, or null if this signature engine does not use any parameters"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if this method is not overridden by a provider"]], "SeeAlso": [], "Permissions": [], "Description": "This method is overridden by providers to return the parameters used with this signature engine, or null if this signature engine does not use any parameters. The returned parameters may be the same that were used to initialize this signature engine, or may contain a combination of default and randomly generated parameter values used by the underlying signature implementation if this signature engine requires algorithm parameters but was not initialized with any.", "history": "Added in API level 1", "FullName": "protected AlgorithmParameters engineGetParameters ()"}, "engineSign()": {"Returns": [["byte[]", "the signature bytes of the signing operation's result."]], "Parameters": [], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly or if this signature algorithm is unable to process the input data provided."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the signature bytes of all the data updated so far. The format of the signature depends on the underlying signature scheme.", "history": "Added in API level 1", "FullName": "protected abstract byte[] engineSign ()"}, "engineGetParameter(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the object that represents the parameter value, or null if there is none."]], "Parameters": [["@B_java#lang#String_E@", "String: the string name of the parameter."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if param is an invalid parameter for this engine, or another exception occurs while trying to get this parameter."]], "SeeAlso": [], "Permissions": [], "Description": "Deprecated. Gets the value of the specified algorithm parameter. This method supplies a general-purpose mechanism through which it is possible to get the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "protected abstract Object engineGetParameter (String param)"}, "engineUpdate(java.nio.ByteBuffer)": {"Returns": [], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: the ByteBuffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified using the specified ByteBuffer. Processes the data.remaining() bytes starting at at data.position(). Upon return, the buffer's position will be equal to its limit; its limit will not have changed.", "history": "Added in API level 1", "FullName": "protected void engineUpdate (ByteBuffer input)"}, "engineSign(byte[],int,int)": {"Returns": [["int", "the number of bytes placed into outbuf"]], "Parameters": [["byte[]", "byte: buffer for the signature result."], ["int", "int: offset into outbuf where the signature is stored."], ["int", "int: number of bytes within outbuf allotted for the signature. Both this default implementation and the SUN provider do not return partial digests. If the value of this parameter is less than the actual signature length, this method will throw a SignatureException. This parameter is ignored if its value is greater than or equal to the actual signature length."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly, if this signature algorithm is unable to process the input data provided, or if len is less than the actual signature length."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset. The format of the signature depends on the underlying signature scheme. The signature implementation is reset to its initial state (the state it was in after a call to one of the engineInitSign methods) and can be reused to generate further signatures with the same private key. This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method.", "history": "Added in API level 1", "FullName": "protected int engineSign (byte[] outbuf, int offset, int len)"}, "engineSign(byte[], int, int)": {"Returns": [["int", "the number of bytes placed into outbuf"]], "Parameters": [["byte[]", "byte: buffer for the signature result."], ["int", "int: offset into outbuf where the signature is stored."], ["int", "int: number of bytes within outbuf allotted for the signature. Both this default implementation and the SUN provider do not return partial digests. If the value of this parameter is less than the actual signature length, this method will throw a SignatureException. This parameter is ignored if its value is greater than or equal to the actual signature length."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly, if this signature algorithm is unable to process the input data provided, or if len is less than the actual signature length."]], "SeeAlso": [], "Permissions": [], "Description": "Finishes this signature operation and stores the resulting signature bytes in the provided buffer outbuf, starting at offset. The format of the signature depends on the underlying signature scheme. The signature implementation is reset to its initial state (the state it was in after a call to one of the engineInitSign methods) and can be reused to generate further signatures with the same private key. This method should be abstract, but we leave it concrete for binary compatibility. Knowledgeable providers should override this method.", "history": "added in API level 1", "FullName": "protected int engineSign (byte[] outbuf, int offset, int len)"}, "engineVerify(byte[])": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature.", "history": "Added in API level 1", "FullName": "protected abstract boolean engineVerify (byte[] sigBytes)"}, "SignatureSpi()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public SignatureSpi ()"}, "engineInitVerify(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the public key of the identity whose signature is going to be verified."]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is improperly encoded, parameters are missing, and so on."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this signature object with the specified public key for verification operations.", "history": "Added in API level 1", "FullName": "protected abstract void engineInitVerify (PublicKey publicKey)"}, "engineVerify(byte[], int, int)": {"Returns": [["boolean", "true if the signature was verified, false if not."]], "Parameters": [["byte[]", "byte: the signature bytes to be verified."], ["int", "int: the offset to start from in the array of bytes."], ["int", "int: the number of bytes to use, starting at offset."]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly, the passed-in signature is improperly encoded or of the wrong type, if this signature algorithm is unable to process the input data provided, etc."]], "SeeAlso": [], "Permissions": [], "Description": "Verifies the passed-in signature in the specified array of bytes, starting at the specified offset. Note: Subclasses should overwrite the default implementation.", "history": "added in API level 1", "FullName": "protected boolean engineVerify (byte[] sigBytes, int offset, int length)"}, "engineUpdate(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the array of bytes"], ["int", "int: the offset to start from in the array of bytes"], ["int", "int: the number of bytes to use, starting at offset"]], "Throws": [["@B_java#security#SignatureException_E@", "if the engine is not initialized properly"]], "SeeAlso": [], "Permissions": [], "Description": "Updates the data to be signed or verified, using the specified array of bytes, starting at the specified offset.", "history": "Added in API level 1", "FullName": "protected abstract void engineUpdate (byte[] b, int off, int len)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone if the implementation is cloneable."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", "if this is called on an implementation that does not support Cloneable."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a clone if the implementation is cloneable.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "engineInitSign(java.security.PrivateKey,java.security.SecureRandom)": {"Returns": [], "Parameters": [["@B_java#security#PrivateKey_E@", "PrivateKey: the private key of the identity whose signature will be generated."], ["@B_java#security#SecureRandom_E@", "SecureRandom: the source of randomness"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the key is improperly encoded, parameters are missing, and so on."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this signature object with the specified private key and source of randomness for signing operations. This concrete method has been added to this previously-defined abstract class. (For backwards compatibility, it cannot be abstract.)", "history": "Added in API level 1", "FullName": "protected void engineInitSign (PrivateKey privateKey, SecureRandom random)"}, "engineSetParameter(java.lang.String,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the string identifier of the parameter."], ["@B_java#lang#Object_E@", "Object: the parameter value."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if param is an invalid parameter for this signature algorithm engine, the parameter is already set and cannot be set again, a security exception occurs, and so on."]], "SeeAlso": [], "Permissions": [], "Description": "Replaced by @B_java#security#SignatureSpi#engineSetParameter_E@. Sets the specified algorithm parameter to the specified value. This method supplies a general-purpose mechanism through which it is possible to set the various parameters of this object. A parameter may be any settable parameter for the algorithm, such as a parameter size, or a source of random bits for signature generation (if appropriate), or an indication of whether or not to perform a specific but optional computation. A uniform algorithm-specific naming scheme for each parameter is desirable but left unspecified at this time.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "protected abstract void engineSetParameter (String param, Object value)"}}, "Inheritance": [], "ClassName": "java.security.SignatureSpi", "ClassDesc": "This class defines the Signature class, which is used to provide the functionality of a digital signature algorithm. Digital signatures are used for authentication and integrity assurance of digital data. . All the abstract methods in this class must be implemented by each cryptographic service provider who wishes to supply the implementation of a particular signature algorithm."}