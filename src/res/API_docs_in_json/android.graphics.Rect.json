{"Functions": {"width()": {"Returns": [["int", "the rectangle's width. This does not check for a valid rectangle (i.e. left <= right) so the result may be negative."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int width ()"}, "union(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle being unioned with this rectangle This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle.", "history": "Added in API level 1", "FullName": "public void union (Rect r)"}, "Rect()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty Rect. All coordinates are initialized to 0.", "history": "Added in API level 1", "FullName": "public Rect ()"}, "set(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle whose coordinates are copied into this rectangle. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the coordinates from src into this rectangle.", "history": "Added in API level 1", "FullName": "public void set (Rect src)"}, "union(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The left edge being unioned with this rectangle"], ["int", "int: The top edge being unioned with this rectangle"], ["int", "int: The right edge being unioned with this rectangle"], ["int", "int: The bottom edge being unioned with this rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle.", "history": "Added in API level 1", "FullName": "public void union (int left, int top, int right, int bottom)"}, "centerX()": {"Returns": [["int", "the horizontal center of the rectangle. If the computed value is fractional, this method returns the largest integer that is less than the computed value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int centerX ()"}, "contains(int, int)": {"Returns": [["boolean", "true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom"]], "Parameters": [["int", "int: The X coordinate of the point being tested for containment"], ["int", "int: The Y coordinate of the point being tested for containment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point.", "history": "added in API level 1", "FullName": "public boolean contains (int x, int y)"}, "exactCenterY()": {"Returns": [["float", "the exact vertical center of the rectangle as a float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public float exactCenterY ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "Rect(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle whose coordinates are copied into the new rectangle. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new rectangle, initialized with the values in the specified rectangle (which is left unmodified).", "history": "Added in API level 1", "FullName": "public Rect (Rect r)"}, "union(int,int)": {"Returns": [], "Parameters": [["int", "int: The x coordinate of the point to add to the rectangle"], ["int", "int: The y coordinate of the point to add to the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty.", "history": "Added in API level 1", "FullName": "public void union (int x, int y)"}, "intersect(int, int, int, int)": {"Returns": [["boolean", "true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle."]], "Parameters": [["int", "int: The left side of the rectangle being intersected with this rectangle"], ["int", "int: The top of the rectangle being intersected with this rectangle"], ["int", "int: The right side of the rectangle being intersected with this rectangle."], ["int", "int: The bottom of the rectangle being intersected with this rectangle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use @B_android#graphics#Rect#intersects_E@.", "history": "added in API level 1", "FullName": "public boolean intersect (int left, int top, int right, int bottom)"}, "intersect(int,int,int,int)": {"Returns": [["boolean", "true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle."]], "Parameters": [["int", "int: The left side of the rectangle being intersected with this rectangle"], ["int", "int: The top of the rectangle being intersected with this rectangle"], ["int", "int: The right side of the rectangle being intersected with this rectangle."], ["int", "int: The bottom of the rectangle being intersected with this rectangle."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the rectangle specified by left,top,right,bottom intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. Note: To just test for intersection, use @B_android#graphics#Rect#intersects_E@.", "history": "Added in API level 1", "FullName": "public boolean intersect (int left, int top, int right, int bottom)"}, "contains(int,int)": {"Returns": [["boolean", "true iff (x,y) are contained by the rectangle, where containment means left <= x < right and top <= y < bottom"]], "Parameters": [["int", "int: The X coordinate of the point being tested for containment"], ["int", "int: The Y coordinate of the point being tested for containment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if (x,y) is inside the rectangle. The left and top are considered to be inside, while the right and bottom are not. This means that for a x,y to be contained: left <= x < right and top <= y < bottom. An empty rectangle never contains any point.", "history": "Added in API level 1", "FullName": "public boolean contains (int x, int y)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "set(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The X coordinate of the left side of the rectangle"], ["int", "int: The Y coordinate of the top of the rectangle"], ["int", "int: The X coordinate of the right side of the rectangle"], ["int", "int: The Y coordinate of the bottom of the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom.", "history": "added in API level 1", "FullName": "public void set (int left, int top, int right, int bottom)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "toShortString()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation of the rectangle in a compact form.", "history": "Added in API level 3", "FullName": "public String toShortString ()"}, "offset(int,int)": {"Returns": [], "Parameters": [["int", "int: The amount to add to the rectangle's left and right coordinates"], ["int", "int: The amount to add to the rectangle's top and bottom coordinates"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates.", "history": "Added in API level 1", "FullName": "public void offset (int dx, int dy)"}, "intersects(int, int, int, int)": {"Returns": [["boolean", "true iff the specified rectangle intersects this rectangle. In no event is this rectangle modified."]], "Parameters": [["int", "int: The left side of the rectangle being tested for intersection"], ["int", "int: The top of the rectangle being tested for intersection"], ["int", "int: The right side of the rectangle being tested for intersection"], ["int", "int: The bottom of the rectangle being tested for intersection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this rectangle intersects the specified rectangle. In no event is this rectangle modified. No check is performed to see if either rectangle is empty. To record the intersection, use intersect() or setIntersect().", "history": "added in API level 1", "FullName": "public boolean intersects (int left, int top, int right, int bottom)"}, "offsetTo(int,int)": {"Returns": [], "Parameters": [["int", "int: The new \"left\" coordinate for the rectangle"], ["int", "int: The new \"top\" coordinate for the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the rectangle to a specific (left, top) position, keeping its width and height the same.", "history": "Added in API level 1", "FullName": "public void offsetTo (int newLeft, int newTop)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The parcel to write the rectangle's coordinates into"], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write this rectangle to the specified parcel. To restore a rectangle from a parcel, use readFromParcel()", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "intersect(android.graphics.Rect)": {"Returns": [["boolean", "true if the specified rectangle and this rectangle intersect (and this rectangle is then set to that intersection) else return false and do not change this rectangle."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle being intersected with this rectangle. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If the specified rectangle intersects this rectangle, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects()", "history": "Added in API level 1", "FullName": "public boolean intersect (Rect r)"}, "intersects(android.graphics.Rect,android.graphics.Rect)": {"Returns": [["boolean", "true iff the two specified rectangles intersect. In no event are either of the rectangles modified."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The first rectangle being tested for intersection This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: The second rectangle being tested for intersection This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff the two specified rectangles intersect. In no event are either of the rectangles modified. To record the intersection, use @B_android#graphics#Rect#intersect_E@ or @B_android#graphics#Rect#setIntersect_E@.", "history": "Added in API level 1", "FullName": "public static boolean intersects (Rect a, Rect b)"}, "offsetTo(int, int)": {"Returns": [], "Parameters": [["int", "int: The new \"left\" coordinate for the rectangle"], ["int", "int: The new \"top\" coordinate for the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the rectangle to a specific (left, top) position, keeping its width and height the same.", "history": "added in API level 1", "FullName": "public void offsetTo (int newLeft, int newTop)"}, "inset(int, int)": {"Returns": [], "Parameters": [["int", "int: The amount to add(subtract) from the rectangle's left(right)"], ["int", "int: The amount to add(subtract) from the rectangle's top(bottom)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inset the rectangle by (dx,dy). If dx is positive, then the sides are moved inwards, making the rectangle narrower. If dx is negative, then the sides are moved outwards, making the rectangle wider. The same holds true for dy and the top and bottom.", "history": "added in API level 1", "FullName": "public void inset (int dx, int dy)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parcelable interface methods", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "centerY()": {"Returns": [["int", "the vertical center of the rectangle. If the computed value is fractional, this method returns the largest integer that is less than the computed value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int centerY ()"}, "readFromParcel(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The parcel to read the rectangle's coordinates from This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rectangle's coordinates from the data stored in the specified parcel. To write a rectangle to a parcel, call writeToParcel().", "history": "Added in API level 1", "FullName": "public void readFromParcel (Parcel in)"}, "sort()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Swap top/bottom or left/right if there are flipped (i.e. left > right and/or top > bottom). This can be called if the edges are computed separately, and may have crossed over each other. If the edges are already correct (i.e. left <= right and top <= bottom) then nothing is done.", "history": "Added in API level 1", "FullName": "public void sort ()"}, "setEmpty()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rectangle to (0,0,0,0)", "history": "Added in API level 1", "FullName": "public void setEmpty ()"}, "intersects(int,int,int,int)": {"Returns": [["boolean", "true iff the specified rectangle intersects this rectangle. In no event is this rectangle modified."]], "Parameters": [["int", "int: The left side of the rectangle being tested for intersection"], ["int", "int: The top of the rectangle being tested for intersection"], ["int", "int: The right side of the rectangle being tested for intersection"], ["int", "int: The bottom of the rectangle being tested for intersection"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this rectangle intersects the specified rectangle. In no event is this rectangle modified. No check is performed to see if either rectangle is empty. To record the intersection, use intersect() or setIntersect().", "history": "Added in API level 1", "FullName": "public boolean intersects (int left, int top, int right, int bottom)"}, "contains(int,int,int,int)": {"Returns": [["boolean", "true iff the the 4 specified sides of a rectangle are inside or equal to this rectangle"]], "Parameters": [["int", "int: The left side of the rectangle being tested for containment"], ["int", "int: The top of the rectangle being tested for containment"], ["int", "int: The right side of the rectangle being tested for containment"], ["int", "int: The bottom of the rectangle being tested for containment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle.", "history": "Added in API level 1", "FullName": "public boolean contains (int left, int top, int right, int bottom)"}, "set(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The X coordinate of the left side of the rectangle"], ["int", "int: The Y coordinate of the top of the rectangle"], ["int", "int: The X coordinate of the right side of the rectangle"], ["int", "int: The Y coordinate of the bottom of the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the rectangle's coordinates to the specified values. Note: no range checking is performed, so it is up to the caller to ensure that left <= right and top <= bottom.", "history": "Added in API level 1", "FullName": "public void set (int left, int top, int right, int bottom)"}, "contains(android.graphics.Rect)": {"Returns": [["boolean", "true iff the specified rectangle r is inside or equal to this rectangle"]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The rectangle being tested for containment. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff the specified rectangle r is inside or equal to this rectangle. An empty rectangle never contains another rectangle.", "history": "Added in API level 1", "FullName": "public boolean contains (Rect r)"}, "Rect(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The X coordinate of the left side of the rectangle"], ["int", "int: The Y coordinate of the top of the rectangle"], ["int", "int: The X coordinate of the right side of the rectangle"], ["int", "int: The Y coordinate of the bottom of the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom.", "history": "added in API level 1", "FullName": "public Rect (int left, int top, int right, int bottom)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The parcel to write the rectangle's coordinates into"], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write this rectangle to the specified parcel. To restore a rectangle from a parcel, use readFromParcel()", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "unflattenFromString(java.lang.String)": {"Returns": [["@B_android#graphics#Rect_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Rect from a string of the form returned by @B_android#graphics#Rect#flattenToString_E@, or null if the string is not of that form.", "history": "Added in API level 7", "FullName": "public static Rect unflattenFromString (String str)"}, "contains(int, int, int, int)": {"Returns": [["boolean", "true iff the the 4 specified sides of a rectangle are inside or equal to this rectangle"]], "Parameters": [["int", "int: The left side of the rectangle being tested for containment"], ["int", "int: The top of the rectangle being tested for containment"], ["int", "int: The right side of the rectangle being tested for containment"], ["int", "int: The bottom of the rectangle being tested for containment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true iff the 4 specified sides of a rectangle are inside or equal to this rectangle. i.e. is this rectangle a superset of the specified rectangle. An empty rectangle never contains another rectangle.", "history": "added in API level 1", "FullName": "public boolean contains (int left, int top, int right, int bottom)"}, "setIntersect(android.graphics.Rect,android.graphics.Rect)": {"Returns": [["boolean", "true iff the two specified rectangles intersect. If they do, set this rectangle to that intersection. If they do not, return false and do not change this rectangle."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The first rectangle being intersected with This value must never be null."], ["@B_android#graphics#Rect_E@", "Rect: The second rectangle being intersected with This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If rectangles a and b intersect, return true and set this rectangle to that intersection, otherwise return false and do not change this rectangle. No check is performed to see if either rectangle is empty. To just test for intersection, use intersects()", "history": "Added in API level 1", "FullName": "public boolean setIntersect (Rect a, Rect b)"}, "union(int, int)": {"Returns": [], "Parameters": [["int", "int: The x coordinate of the point to add to the rectangle"], ["int", "int: The y coordinate of the point to add to the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update this Rect to enclose itself and the [x,y] coordinate. There is no check to see that this rectangle is non-empty.", "history": "added in API level 1", "FullName": "public void union (int x, int y)"}, "isEmpty()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the rectangle is empty (left >= right or top >= bottom)", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "offset(int, int)": {"Returns": [], "Parameters": [["int", "int: The amount to add to the rectangle's left and right coordinates"], ["int", "int: The amount to add to the rectangle's top and bottom coordinates"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset the rectangle by adding dx to its left and right coordinates, and adding dy to its top and bottom coordinates.", "history": "added in API level 1", "FullName": "public void offset (int dx, int dy)"}, "Rect(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The X coordinate of the left side of the rectangle"], ["int", "int: The Y coordinate of the top of the rectangle"], ["int", "int: The X coordinate of the right side of the rectangle"], ["int", "int: The Y coordinate of the bottom of the rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new rectangle with the specified coordinates. Note: no range checking is performed, so the caller must ensure that left <= right and top <= bottom.", "history": "Added in API level 1", "FullName": "public Rect (int left, int top, int right, int bottom)"}, "inset(int,int)": {"Returns": [], "Parameters": [["int", "int: The amount to add(subtract) from the rectangle's left(right)"], ["int", "int: The amount to add(subtract) from the rectangle's top(bottom)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inset the rectangle by (dx,dy). If dx is positive, then the sides are moved inwards, making the rectangle narrower. If dx is negative, then the sides are moved outwards, making the rectangle wider. The same holds true for dy and the top and bottom.", "history": "Added in API level 1", "FullName": "public void inset (int dx, int dy)"}, "union(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The left edge being unioned with this rectangle"], ["int", "int: The top edge being unioned with this rectangle"], ["int", "int: The right edge being unioned with this rectangle"], ["int", "int: The bottom edge being unioned with this rectangle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update this Rect to enclose itself and the specified rectangle. If the specified rectangle is empty, nothing is done. If this rectangle is empty it is set to the specified rectangle.", "history": "added in API level 1", "FullName": "public void union (int left, int top, int right, int bottom)"}, "height()": {"Returns": [["int", "the rectangle's height. This does not check for a valid rectangle (i.e. top <= bottom) so the result may be negative."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int height ()"}, "flattenToString()": {"Returns": [["@B_java#lang#String_E@", "Returns a new String of the form \"left top right bottom\" This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a string representation of the rectangle in a well-defined format. You can later recover the Rect from this string through @B_android#graphics#Rect#unflattenFromString_E@.", "history": "Added in API level 7", "FullName": "public String flattenToString ()"}, "exactCenterX()": {"Returns": [["float", "the exact horizontal center of the rectangle as a float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public float exactCenterX ()"}}, "Inheritance": [], "ClassName": "android.graphics.Rect", "ClassDesc": "Rect holds four integer coordinates for a rectangle. The rectangle is represented by the coordinates of its 4 edges (left, top, right bottom). These fields can be accessed directly. Use width() and height() to retrieve the rectangle's width and height. Note: most methods do not check to see that the coordinates are sorted correctly (i.e. left <= right and top <= bottom). Note that the right and bottom coordinates are exclusive. This means a Rect being drawn untransformed onto a @B_android#graphics#Canvas_E@ will draw into the column and row described by its left and top coordinates, but not those of its bottom and right."}