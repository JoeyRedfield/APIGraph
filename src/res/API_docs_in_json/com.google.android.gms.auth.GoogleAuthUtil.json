{"Functions": {"getAccountId(android.content.Context, java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [["@B_com#google#android#gms#auth#GooglePlayServicesAvailabilityException_E@", "containing the appropriate connection status error code."], ["@B_com#google#android#gms#auth#UserRecoverableAuthException_E@", "wrapping an Intent for initiating user intervention. The wrapped intent must be called with @B_android#app#Activity#startActivityForResult_E@."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a stable account id for the given account name. In the event of a missing id, user intervention may be required. In such cases, a @B_com#google#android#gms#auth#UserRecoverableAuthException_E@ will be thrown. To initiate the user recovery workflow, clients must start the @B_android#content#Intent_E@ returned by @B_com#google#android#gms#auth#UserRecoverableAuthException#getIntent_E@ for result. Upon successfully returning a client should invoke this method again to get an id.", "history": "", "FullName": "public static String getAccountId (Context ctx, String accountName)"}, "getTokenWithNotification(android.content.Context, android.accounts.Account, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["Account", "Authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for background tasks. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, Account account, String scope, Bundle extras)"}, "getTokenWithNotification(android.content.Context, java.lang.String, java.lang.String, android.os.Bundle, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["String", "String representing the authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."], ["String", "Authority for firing a sync request. Must not be empty or null."], ["Bundle", "extras for firing a sync request. This bundle must pass ContentResolver.validateSyncExtrasBundle(). If no extras are needed can a null value can be passed."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for sync adaptors. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. After the user addresses the notification, a sync request will be kicked off using the given params. If the user cancels then the sync is not fired. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, String accountName, String scope, Bundle extras, String authority, Bundle syncBundle)"}, "getToken(android.content.Context, java.lang.String, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["String", "String representing the authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."]], "Throws": [["@B_com#google#android#gms#auth#GooglePlayServicesAvailabilityException_E@", "containing the appropriate connection status error code."], ["@B_com#google#android#gms#auth#UserRecoverableAuthException_E@", "wrapping an Intent for initiating user intervention. The wrapped intent must be called with @B_android#app#Activity#startActivityForResult_E@."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a token to be consumed by some specified services on behalf of a specified user account. How the token is consumed depends on the scope string provided. Note that this method requires substantial network IO and thus should be run off the UI thread. In the event of an error, one of several @B_java#lang#Exception_E@s will be thrown. In the case of a transient (typically network related) error a @B_java#io#IOException_E@ will be thrown. It is left to clients to implement a backoff/abandonment strategy appropriate to their latency requirements. If user intervention is required to provide consent, enter a password, etc, a @B_com#google#android#gms#auth#UserRecoverableAuthException_E@ will be thrown. To initiate the user recovery workflow, clients must start the @B_android#content#Intent_E@ returned by @B_com#google#android#gms#auth#UserRecoverableAuthException#getIntent_E@ for result. Upon successfully returning a client should invoke this method again to get a token. In the cases of errors that are neither transient nor recoverable by the the user, a @B_com#google#android#gms#auth#GoogleAuthException_E@ will be thrown. These errors will typically result from client errors (e.g. providing an invalid scope). By way of example, client code might have a block of code executing in a locally declared implementation of @B_java#lang#Thread_E@ or @B_android#os#AsyncTask_E@ as follows: Those clients that have their own splash screens may wish to suppress the progress screen provided by Google Play services. The \"Signing in...\" progress screen provided by Google Play services by including setting @B_com#google#android#gms#auth#GoogleAuthUtil#KEY_SUPPRESS_PROGRESS_SCREEN_E@ to true in the supplied options @B_android#os#Bundle_E@.", "history": "", "FullName": "public static String getToken (Context context, String accountName, String scope, Bundle extras)"}, "getToken(android.content.Context, android.accounts.Account, java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [["IOException", ""], ["@B_com#google#android#gms#auth#UserRecoverableAuthException_E@", ""], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", ""]], "SeeAlso": ["@B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@"], "Permissions": [], "Description": "", "history": "", "FullName": "public static String getToken (Context context, Account account, String scope)"}, "getTokenWithNotification(android.content.Context, java.lang.String, java.lang.String, android.os.Bundle, android.content.Intent)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["String", "String representing the authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."], ["Intent", "A broadcast intent with a valid receiver that has been exported for other apps to send broadcasts to it. This intent must be serializable using toUri(Intent.URI_INTENT_SCHEME) and Intent.parseUri(intentUri, Intent.URI_INTENT_SCHEME). Cannot be null."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for background tasks. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. After the user addresses the notification, the callback is broadcasted. If the user cancels then the callback is not fired. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, String accountName, String scope, Bundle extras, Intent callback)"}, "getAccountChangeEvents(android.content.Context, int, java.lang.String)": {"Returns": [], "Parameters": [["int", "An event index to restrict results by. If 0 then all events will be fetched. Otherwise, events greater than this index will be fetched. Callers can store the last event index seen and use this field to limit results to only events more recent than the ones seen prior."], ["String", "The account name to restrict the event list to."]], "Throws": [["@B_com#google#android#gms#auth#GoogleAuthException_E@", ""], ["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Get a list of events for the given account. The result is in reverse chronological order.", "history": "", "FullName": "public static List<AccountChangeEvent> getAccountChangeEvents (Context ctx, int eventIndex, String accountName)"}, "clearToken(android.content.Context, java.lang.String)": {"Returns": [], "Parameters": [["Context", "Context of the token."], ["String", "The token to clear."]], "Throws": [["@B_com#google#android#gms#auth#GooglePlayServicesAvailabilityException_E@", ""], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", ""], ["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Clear the specified token in local cache with respect to the @B_android#content#Context_E@. Note that the context must be the same as that used to initialize the token in a previous call to @B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@ or @B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@.", "history": "", "FullName": "public static void clearToken (Context context, String token)"}, "getTokenWithNotification(android.content.Context, android.accounts.Account, java.lang.String, android.os.Bundle, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["Account", "Authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."], ["String", "Authority for firing a sync request. Must not be empty or null."], ["Bundle", "extras for firing a sync request. This bundle must pass ContentResolver.validateSyncExtrasBundle(). If no extras are needed can a null value can be passed."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for sync adaptors. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. After the user addresses the notification, a sync request will be kicked off using the given params. If the user cancels then the sync is not fired. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, Account account, String scope, Bundle extras, String authority, Bundle syncBundle)"}, "getTokenWithNotification(android.content.Context, android.accounts.Account, java.lang.String, android.os.Bundle, android.content.Intent)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["Account", "Authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."], ["Intent", "A broadcast intent with a valid receiver that has been exported for other apps to send broadcasts to it. This intent must be serializable using toUri(Intent.URI_INTENT_SCHEME) and Intent.parseUri(intentUri, Intent.URI_INTENT_SCHEME). Cannot be null."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for background tasks. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. After the user addresses the notification, the callback is broadcasted. If the user cancels then the callback is not fired. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, Account account, String scope, Bundle extras, Intent callback)"}, "getTokenWithNotification(android.content.Context, java.lang.String, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["String", "String representing the authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."]], "Throws": [["@B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@", "if a user addressable error occurred and a notification was pushed."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Authenticates the user and returns a valid Google authentication token, or throws an @B_java#lang#Exception_E@ if there was an error while getting the token. This method is specifically provided for background tasks. In the event of an error that needs user intervention, this method takes care of pushing relevant notification. The exception thrown depends upon the underlying error and support for recovery. @B_com#google#android#gms#auth#UserRecoverableNotifiedException_E@ will be thrown if the error can be resolved by user intervention and a notification has already been posted to address it. @B_java#io#IOException_E@s will be thrown if the underlying error might be solved by some intelligent retry strategy. Alternatively, @B_com#google#android#gms#auth#GoogleAuthException_E@s represent a broad class of @B_java#lang#Exception_E@s that cannot be recovered programmatically.", "history": "", "FullName": "public static String getTokenWithNotification (Context context, String accountName, String scope, Bundle extras)"}, "getToken(android.content.Context, java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [["IOException", ""], ["@B_com#google#android#gms#auth#UserRecoverableAuthException_E@", ""], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", ""]], "SeeAlso": ["@B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@"], "Permissions": [], "Description": "", "history": "", "FullName": "public static String getToken (Context context, String accountName, String scope)"}, "invalidateToken(android.content.Context, java.lang.String)": {"Returns": [], "Parameters": [["Context", "Context of the token."], ["String", "String containing the token to invalidate."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidates the specified token with respect to the @B_android#content#Context_E@. Note that the context must be the same as that used to initialize the token in a previous call to @B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@ or @B_com#google#android#gms#auth#GoogleAuthUtil#getToken_E@.", "history": "", "FullName": "public static void invalidateToken (Context context, String token)"}, "getToken(android.content.Context, android.accounts.Account, java.lang.String, android.os.Bundle)": {"Returns": [["", "String containing a valid token."]], "Parameters": [["Context", "Context associated with the desired token."], ["Account", "Authenticating user account."], ["String", "String representing the authentication scope. To specify multiple scopes, separate them with a space (for example, \"oauth2:scope1 scope2 scope3\")."], ["Bundle", "Bundle containing additional information that may be relevant to the authentication scope."]], "Throws": [["@B_com#google#android#gms#auth#GooglePlayServicesAvailabilityException_E@", "containing the appropriate connection status error code."], ["@B_com#google#android#gms#auth#UserRecoverableAuthException_E@", "wrapping an Intent for initiating user intervention. The wrapped intent must be called with @B_android#app#Activity#startActivityForResult_E@."], ["@B_com#google#android#gms#auth#GoogleAuthException_E@", "signaling a potentially unrecoverable authentication error."], ["IOException", "signaling a potentially transient error."], ["IllegalStateException", "if the method is invoked in the main event thread."]], "SeeAlso": [], "Permissions": [], "Description": "Gets a token to be consumed by some specified services on behalf of a specified user account. How the token is consumed depends on the scope string provided. Note that this method requires substantial network IO and thus should be run off the UI thread. In the event of an error, one of several @B_java#lang#Exception_E@s will be thrown. In the case of a transient (typically network related) error a @B_java#io#IOException_E@ will be thrown. It is left to clients to implement a backoff/abandonment strategy appropriate to their latency requirements. If user intervention is required to provide consent, enter a password, etc, a @B_com#google#android#gms#auth#UserRecoverableAuthException_E@ will be thrown. To initiate the user recovery workflow, clients must start the @B_android#content#Intent_E@ returned by @B_com#google#android#gms#auth#UserRecoverableAuthException#getIntent_E@ for result. Upon successfully returning a client should invoke this method again to get a token. In the cases of errors that are neither transient nor recoverable by the the user, a @B_com#google#android#gms#auth#GoogleAuthException_E@ will be thrown. These errors will typically result from client errors (e.g. providing an invalid scope). By way of example, client code might have a block of code executing in a locally declared implementation of @B_java#lang#Thread_E@ or @B_android#os#AsyncTask_E@ as follows: Those clients that have their own splash screens may wish to suppress the progress screen provided by Google Play services. The \"Signing in...\" progress screen provided by Google Play services by including setting @B_com#google#android#gms#auth#GoogleAuthUtil#KEY_SUPPRESS_PROGRESS_SCREEN_E@ to true in the supplied options @B_android#os#Bundle_E@.", "history": "", "FullName": "public static String getToken (Context context, Account account, String scope, Bundle extras)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.auth.GoogleAuthUtil", "ClassDesc": "GoogleAuthUtil provides static utility methods to acquire and invalidate authentication tokens."}