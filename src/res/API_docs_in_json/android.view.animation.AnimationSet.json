{"Functions": {"getAnimations()": {"Returns": [["@B_java#util#List_E@", "All the child animations in this AnimationSet. Note that this may include other AnimationSets, which are not expanded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public List<Animation> getAnimations ()"}, "scaleCurrentDuration(float)": {"Returns": [], "Parameters": [["float", "float: The amount to scale the duration."]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#scaleCurrentDuration_E@"], "Permissions": [], "Description": "How much to scale the duration by.", "history": "Added in API level 1", "FullName": "public void scaleCurrentDuration (float scale)"}, "getDuration()": {"Returns": [["long", "the duration in milliseconds of the animation"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#getDuration_E@"], "Permissions": [], "Description": "The duration of an AnimationSet is defined to be the duration of the longest child animation.", "history": "Added in API level 1", "FullName": "public long getDuration ()"}, "initialize(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#initialize_E@"], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}, "willChangeTransformationMatrix()": {"Returns": [["boolean", "true if this animation will change the transformation matrix"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this animation will affect the transformation matrix. For instance, a fade animation will not affect the matrix whereas a scale animation will.", "history": "Added in API level 1", "FullName": "public boolean willChangeTransformationMatrix ()"}, "AnimationSet(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Application context to use"], ["@B_android#util#AttributeSet_E@", "AttributeSet: Attribute set from which to read values"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor used when an AnimationSet is loaded from a resource.", "history": "Added in API level 1", "FullName": "public AnimationSet (Context context, AttributeSet attrs)"}, "restrictDuration(long)": {"Returns": [], "Parameters": [["long", "long: The maximum duration the animation is allowed to run."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensure that the duration that this animation will run is not longer than", "history": "Added in API level 1", "FullName": "public void restrictDuration (long durationMillis)"}, "addAnimation(android.view.animation.Animation)": {"Returns": [], "Parameters": [["@B_android#view#animation#Animation_E@", "Animation: Animation to add."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a child animation to this animation set. The transforms of the child animations are applied in the order that they were added", "history": "Added in API level 1", "FullName": "public void addAnimation (Animation a)"}, "AnimationSet(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Pass true if all of the animations in this set should use the interpolator associated with this AnimationSet. Pass false if each animation should use its own interpolator."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor to use when building an AnimationSet from code", "history": "Added in API level 1", "FullName": "public AnimationSet (boolean shareInterpolator)"}, "setStartTime(long)": {"Returns": [], "Parameters": [["long", "long: the start time in milliseconds"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#setStartTime_E@"], "Permissions": [], "Description": "Sets the start time of this animation and all child animations", "history": "Added in API level 1", "FullName": "public void setStartTime (long startTimeMillis)"}, "willChangeBounds()": {"Returns": [["boolean", "true if this animation will change the view's bounds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether or not this animation will affect the bounds of the animated view. For instance, a fade animation will not affect the bounds whereas a 200% scale animation will.", "history": "Added in API level 1", "FullName": "public boolean willChangeBounds ()"}, "clone()": {"Returns": [["@B_android#view#animation#AnimationSet_E@", "a clone of this instance."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 1", "FullName": "protected AnimationSet clone ()"}, "setRepeatMode(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#view#animation#Animation#RESTART_E@ or @B_android#view#animation#Animation#REVERSE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Defines what this animation should do when it reaches the end. This setting is applied only when the repeat count is either greater than 0 or @B_android#view#animation#Animation#INFINITE_E@. Defaults to @B_android#view#animation#Animation#RESTART_E@.", "history": "Added in API level 1", "FullName": "public void setRepeatMode (int repeatMode)"}, "getStartTime()": {"Returns": [["long", "the time in milliseconds when the animation should start or @B_android#view#animation#Animation#START_ON_FIRST_FRAME_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start. If the animation has not startet yet, this method might return @B_android#view#animation#Animation#START_ON_FIRST_FRAME_E@.", "history": "Added in API level 1", "FullName": "public long getStartTime ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the initialization state of this animation.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "setFillAfter(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the animation should apply its transformation after it ends"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If fillAfter is true, the transformation that this animation performed will persist when it is finished. Defaults to false if not set. Note that this applies to individual animations and when using an @B_android#view#animation#AnimationSet_E@ to chain animations.", "history": "Added in API level 1", "FullName": "public void setFillAfter (boolean fillAfter)"}, "setDuration(long)": {"Returns": [], "Parameters": [["long", "long: the duration of the animation, in milliseconds, for every child in this set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration of every child animation.", "history": "Added in API level 1", "FullName": "public void setDuration (long durationMillis)"}, "computeDurationHint()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#computeDurationHint_E@"], "Permissions": [], "Description": "The duration hint of an animation set is the maximum of the duration hints of all of its component animations.", "history": "Added in API level 3", "FullName": "public long computeDurationHint ()"}, "initialize(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Width of the object being animated"], ["int", "int: Height of the object being animated"], ["int", "int: Width of the animated object's parent"], ["int", "int: Height of the animated object's parent"]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#initialize_E@"], "Permissions": [], "Description": "Initialize this animation with the dimensions of the object being animated as well as the objects parents. (This is to support animation sizes being specified relative to these dimensions.) Objects that interpret Animations should call this method when the sizes of the object being animated and its parent are known, and before calling @B_android#view#animation#Animation#getTransformation_E@.", "history": "Added in API level 1", "FullName": "public void initialize (int width, int height, int parentWidth, int parentHeight)"}, "setStartOffset(long)": {"Returns": [], "Parameters": [["long", "long: When this Animation should start, in milliseconds from the start time of the root AnimationSet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "When this animation should start relative to the start time. This is most useful when composing complex animations using an @B_android#view#animation#AnimationSet_E@ where some of the animations components start at different times.", "history": "Added in API level 1", "FullName": "public void setStartOffset (long startOffset)"}, "setFillBefore(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the animation should apply its transformation before it starts"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If fillBefore is true, this animation will apply its transformation before the start time of the animation. Defaults to true if @B_android#view#animation#Animation#setFillEnabled_E@ is not set to true. Note that this applies when using an @B_android#view#animation#AnimationSet_E@ to chain animations. The transformation is not applied before the AnimationSet itself starts.", "history": "Added in API level 1", "FullName": "public void setFillBefore (boolean fillBefore)"}, "getTransformation(long,android.view.animation.Transformation)": {"Returns": [["boolean", "True if the animation is still running"]], "Parameters": [["long", "long: Where we are in the animation. This is wall clock time."], ["@B_android#view#animation#Transformation_E@", "Transformation: A transformation object that is provided by the caller and will be filled in by the animation."]], "Throws": [], "SeeAlso": ["@B_android#view#animation#Animation#getTransformation_E@"], "Permissions": [], "Description": "The transformation of an animation set is the concatenation of all of its component animations.", "history": "Added in API level 1", "FullName": "public boolean getTransformation (long currentTime, Transformation t)"}}, "Inheritance": ["@B_android#view#animation#Animation_E@"], "ClassName": "android.view.animation.AnimationSet", "ClassDesc": "Represents a group of Animations that should be played together. The transformation of each individual animation are composed together into a single transform. If AnimationSet sets any properties that its children also set (for example, duration or fillBefore), the values of AnimationSet override the child values. The way that AnimationSet inherits behavior from Animation is important to understand. Some of the Animation attributes applied to AnimationSet affect the AnimationSet itself, some are pushed down to the children, and some are ignored, as follows: duration, repeatMode, fillBefore, fillAfter: These properties, when set on an AnimationSet object, will be pushed down to all child animations. repeatCount, fillEnabled: These properties are ignored for AnimationSet. startOffset, shareInterpolator: These properties apply to the AnimationSet itself. Starting with @B_android#os#Build#VERSION_CODES#ICE_CREAM_SANDWICH_E@, the behavior of these properties is the same in XML resources and at runtime (prior to that release, the values set in XML were ignored for AnimationSet). That is, calling setDuration(500) on an AnimationSet has the same effect as declaring android:duration=\"500\" in an XML resource for an AnimationSet object."}