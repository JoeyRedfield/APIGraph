{"Functions": {"read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to b.length bytes of data from this input stream into an array of bytes. This method blocks until some input is available.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in the destination array b"], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this input stream into an array of bytes. If len is not zero, the method blocks until some input is available; otherwise, no bytes are read and 0 is returned.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this file input stream and releases any system resources associated with the stream. If this stream has an associated channel then the channel is closed as well.", "history": "Added in API level 1", "FullName": "public void close ()"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the file is reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte of data from this input stream. This method blocks if no input is yet available.", "history": "Added in API level 1", "FullName": "public int read ()"}, "ParcelFileDescriptor.AutoCloseInputStream(android.os.ParcelFileDescriptor)": {"Returns": [], "Parameters": [["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ParcelFileDescriptor.AutoCloseInputStream (ParcelFileDescriptor pfd)"}}, "Inheritance": ["@B_java#io#InputStream_E@", "@B_java#io#FileInputStream_E@"], "ClassName": "android.os.ParcelFileDescriptor.AutoCloseInputStream", "ClassDesc": "An InputStream you can create on a ParcelFileDescriptor, which will take care of calling @B_android#os#ParcelFileDescriptor#close_E@ for you when the stream is closed."}