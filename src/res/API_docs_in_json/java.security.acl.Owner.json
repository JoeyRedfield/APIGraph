{"Functions": {"isOwner(java.security.Principal)": {"Returns": [["boolean", "true if the passed principal is in the list of owners, false if not."]], "Parameters": [["@B_java#security#Principal_E@", "Principal: the principal to be checked to determine whether or not it is an owner."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the given principal is an owner of the ACL.", "history": "Added in API level 1", "FullName": "public abstract boolean isOwner (Principal owner)"}, "addOwner(java.security.Principal,java.security.Principal)": {"Returns": [["boolean", "true if successful, false if owner is already an owner."]], "Parameters": [["@B_java#security#Principal_E@", "Principal: the principal invoking this method. It must be an owner of the ACL."], ["@B_java#security#Principal_E@", "Principal: the owner that should be added to the list of owners."]], "Throws": [["@B_java#security#acl#NotOwnerException_E@", "if the caller principal is not an owner of the ACL."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an owner. Only owners can modify ACL contents. The caller principal must be an owner of the ACL in order to invoke this method. That is, only an owner can add another owner. The initial owner is configured at ACL construction time.", "history": "Added in API level 1", "FullName": "public abstract boolean addOwner (Principal caller, Principal owner)"}, "deleteOwner(java.security.Principal,java.security.Principal)": {"Returns": [["boolean", "true if the owner is removed, false if the owner is not part of the list of owners."]], "Parameters": [["@B_java#security#Principal_E@", "Principal: the principal invoking this method. It must be an owner of the ACL."], ["@B_java#security#Principal_E@", "Principal: the owner to be removed from the list of owners."]], "Throws": [["@B_java#security#acl#NotOwnerException_E@", "if the caller principal is not an owner of the ACL."], ["@B_java#security#acl#LastOwnerException_E@", "if there is only one owner left, so that deleteOwner would leave the ACL owner-less."]], "SeeAlso": [], "Permissions": [], "Description": "Deletes an owner. If this is the last owner in the ACL, an exception is raised. The caller principal must be an owner of the ACL in order to invoke this method.", "history": "Added in API level 1", "FullName": "public abstract boolean deleteOwner (Principal caller, Principal owner)"}}, "Inheritance": [], "ClassName": "java.security.acl.Owner", "ClassDesc": "Interface for managing owners of Access Control Lists (ACLs) or ACL configurations. (Note that the Acl interface in the java.security.acl package extends this Owner interface.) The initial owner Principal should be specified as an argument to the constructor of the class implementing this interface."}