{"Functions": {"unregisterContentObserver(android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#database#ContentObserver_E@", "ContentObserver: the object to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an observer that has previously been registered with this cursor via @B_android#database#Cursor#registerContentObserver_E@.", "history": "Added in API level 1", "FullName": "public void unregisterContentObserver (ContentObserver observer)"}, "getType(int)": {"Returns": [["int", "column value type"]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns data type of the given column's value. The preferred type of the column is returned but the data may be converted to other types as documented in the get-type methods such as @B_android#database#Cursor#getInt_E@, @B_android#database#Cursor#getFloat_E@ etc. Returned column types are @B_android#database#Cursor#FIELD_TYPE_NULL_E@ @B_android#database#Cursor#FIELD_TYPE_INTEGER_E@ @B_android#database#Cursor#FIELD_TYPE_FLOAT_E@ @B_android#database#Cursor#FIELD_TYPE_STRING_E@ @B_android#database#Cursor#FIELD_TYPE_BLOB_E@", "history": "Added in API level 11", "FullName": "public int getType (int column)"}, "deactivate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deactivates the Cursor, making all calls on it fail until @B_android#database#Cursor#requery_E@ is called. Inactive Cursors use fewer resources than active Cursors. Calling @B_android#database#Cursor#requery_E@ will make the cursor active again.", "history": "Added in API level 1", "FullName": "public void deactivate ()"}, "getFloat(int)": {"Returns": [["float", "the value of that column as a float."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a float. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a float value is implementation-defined.", "history": "Added in API level 1", "FullName": "public float getFloat (int column)"}, "registerContentObserver(android.database.ContentObserver)": {"Returns": [], "Parameters": [["@B_android#database#ContentObserver_E@", "ContentObserver: the object that gets notified when the content backing the cursor changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register an observer that is called when changes happen to the content backing this cursor. Typically the data set won't change until @B_android#database#Cursor#requery_E@ is called.", "history": "Added in API level 1", "FullName": "public void registerContentObserver (ContentObserver observer)"}, "getInt(int)": {"Returns": [["int", "the value of that column as an int."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as an int. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Integer.MIN_VALUE, Integer.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public int getInt (int column)"}, "getBlob(int)": {"Returns": [["byte[]", "the value of that column as a byte array."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a byte array. The result and whether this method throws an exception when the column value is null or the column type is not a blob type is implementation-defined.", "history": "Added in API level 1", "FullName": "public byte[] getBlob (int column)"}, "onMove(int, int)": {"Returns": [["boolean", "true if the move is successful, false otherwise"]], "Parameters": [["int", "int: the position that we're moving from"], ["int", "int: the position that we're moving to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position.", "history": "added in API level 1", "FullName": "public boolean onMove (int oldPosition, int newPosition)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes the Cursor, releasing all of its resources and making it completely invalid. Unlike @B_android#database#Cursor#deactivate_E@ a call to @B_android#database#Cursor#requery_E@ will not make the Cursor valid again.", "history": "Added in API level 1", "FullName": "public void close ()"}, "getColumnNames()": {"Returns": [["@B_java#lang#String_E@", "the names of the columns returned in this query."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string array holding the names of all of the columns in the result set in the order in which they were listed in the result.", "history": "Added in API level 1", "FullName": "public String[] getColumnNames ()"}, "getCount()": {"Returns": [["int", "the number of rows in the cursor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the numbers of rows in the cursor.", "history": "Added in API level 1", "FullName": "public int getCount ()"}, "requery()": {"Returns": [["boolean", "true if the requery succeeded, false if not, in which case the cursor becomes invalid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the query that created the cursor again, refreshing its contents. This may be done at any time, including after a call to @B_android#database#Cursor#deactivate_E@. Since this method could execute a query on the database and potentially take a while, it could cause ANR if it is called on Main (UI) thread. A warning is printed if this method is being executed on Main thread.", "history": "Added in API level 1", "FullName": "public boolean requery ()"}, "MergeCursor(android.database.Cursor[])": {"Returns": [], "Parameters": [["@B_android#database#Cursor_E@", "Cursor no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public MergeCursor (Cursor[] cursors)"}, "onMove(int,int)": {"Returns": [["boolean", "true if the move is successful, false otherwise"]], "Parameters": [["int", "int: the position that we're moving from"], ["int", "int: the position that we're moving to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This function is called every time the cursor is successfully scrolled to a new position, giving the subclass a chance to update any state it may have. If it returns false the move function will also do so and the cursor will scroll to the beforeFirst position.", "history": "Added in API level 1", "FullName": "public boolean onMove (int oldPosition, int newPosition)"}, "getString(int)": {"Returns": [["@B_java#lang#String_E@", "the value of that column as a String."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a String. The result and whether this method throws an exception when the column value is null or the column type is not a string type is implementation-defined.", "history": "Added in API level 1", "FullName": "public String getString (int column)"}, "isNull(int)": {"Returns": [["boolean", "whether the column value is null."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the value in the indicated column is null.", "history": "Added in API level 1", "FullName": "public boolean isNull (int column)"}, "getLong(int)": {"Returns": [["long", "the value of that column as a long."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a long. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Long.MIN_VALUE, Long.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public long getLong (int column)"}, "unregisterDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an observer that has previously been registered with this cursor via @B_android#database#Cursor#registerContentObserver_E@.", "history": "Added in API level 1", "FullName": "public void unregisterDataSetObserver (DataSetObserver observer)"}, "getShort(int)": {"Returns": [["short", "the value of that column as a short."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a short. The result and whether this method throws an exception when the column value is null, the column type is not an integral type, or the integer value is outside the range [Short.MIN_VALUE, Short.MAX_VALUE] is implementation-defined.", "history": "Added in API level 1", "FullName": "public short getShort (int column)"}, "registerDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object that gets notified when the cursors data set changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register an observer that is called when changes happen to the contents of the this cursors data set, for example, when the data set is changed via @B_android#database#Cursor#requery_E@, @B_android#database#Cursor#deactivate_E@, or @B_android#database#Cursor#close_E@.", "history": "Added in API level 1", "FullName": "public void registerDataSetObserver (DataSetObserver observer)"}, "getDouble(int)": {"Returns": [["double", "the value of that column as a double."]], "Parameters": [["int", "int: the zero-based index of the target column."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the requested column as a double. The result and whether this method throws an exception when the column value is null, the column type is not a floating-point type, or the floating-point value is not representable as a double value is implementation-defined.", "history": "Added in API level 1", "FullName": "public double getDouble (int column)"}}, "Inheritance": ["@B_android#database#AbstractCursor_E@"], "ClassName": "android.database.MergeCursor", "ClassDesc": "A convenience class that lets you present an array of Cursors as a single linear Cursor. The schema of the cursors presented is entirely up to the creator of the MergeCursor, and may be different if that is desired. Calls to getColumns, getColumnIndex, etc will return the value for the row that the MergeCursor is currently pointing at."}