{"Functions": {"getDisplayName(android.content.Context,java.lang.String,android.content.pm.ApplicationInfo)": {"Returns": [["@B_java#lang#CharSequence_E@", "a display name for this subtype. The string resource of the label (mSubtypeNameResId) can have only one %s in it. If there is, the %s part will be replaced with the locale's display name by the formatter. If there is not, this method simply returns the string specified by mSubtypeNameResId. If mSubtypeNameResId is not specified (== 0), it's up to the framework to generate an appropriate display name."]], "Parameters": [["@B_android#content#Context_E@", "Context: Context will be used for getting Locale and PackageManager."], ["@B_java#lang#String_E@", "String: The package name of the spell checker"], ["@B_android#content#pm#ApplicationInfo_E@", "ApplicationInfo: The application info of the spell checker"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public CharSequence getDisplayName (Context context, String packageName, ApplicationInfo appInfo)"}, "SpellCheckerSubtype(int,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The name of the subtype"], ["@B_java#lang#String_E@", "String: The locale supported by the subtype"], ["@B_java#lang#String_E@", "String: The extra value of the subtype"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "There is no public API that requires developers to directly instantiate custom @B_android#view#textservice#SpellCheckerSubtype_E@ objects right now. Hence only the system is expected to be able to instantiate @B_android#view#textservice#SpellCheckerSubtype_E@ object. Constructor.", "history": "Added in API level 14", "FullName": "public SpellCheckerSubtype (int nameId, String locale, String extraValue)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 14", "FullName": "public int describeContents ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 14", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "getNameResId()": {"Returns": [["int", "the name of the subtype"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public int getNameResId ()"}, "getExtraValue()": {"Returns": [["@B_java#lang#String_E@", "the extra value of the subtype"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public String getExtraValue ()"}, "getExtraValueOf(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the specified key"]], "Parameters": [["@B_java#lang#String_E@", "String: the key of extra value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4", "history": "Added in API level 16", "FullName": "public String getExtraValueOf (String key)"}, "getLanguageTag()": {"Returns": [["@B_java#lang#String_E@", "the BCP-47 Language Tag of the subtype. Returns an empty string when no Language Tag is specified. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#forLanguageTag_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getLanguageTag ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 14", "FullName": "public boolean equals (Object o)"}, "containsExtraValueKey(java.lang.String)": {"Returns": [["boolean", "the subtype contains specified the extra value"]], "Parameters": [["@B_java#lang#String_E@", "String: the key of extra value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The string of ExtraValue in subtype should be defined as follows: example: key0,key1=value1,key2,key3,key4=value4", "history": "Added in API level 16", "FullName": "public boolean containsExtraValueKey (String key)"}, "getLocale()": {"Returns": [["@B_java#lang#String_E@", "the locale of the subtype This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#textservice#SpellCheckerSubtype#getLanguageTag_E@ instead.", "history": "Added in API level 14 Deprecated in API level 24", "FullName": "public String getLocale ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 14", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 14", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.view.textservice.SpellCheckerSubtype", "ClassDesc": "This class is used to specify meta information of a subtype contained in a spell checker. Subtype can describe locale (e.g. en_US, fr_FR...) used for settings."}