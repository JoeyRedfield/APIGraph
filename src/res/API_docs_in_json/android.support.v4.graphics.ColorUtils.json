{"Functions": {"blendARGB(int, int, float)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: the first ARGB color"], ["int", "int: the second ARGB color"], ["float", "float: the blend ratio of color1 to color2 Value is between 0.0 and 1.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Blend between two ARGB colors using the given ratio. A blend ratio of 0.0 will result in color1, 0.5 will give an even blend, 1.0 will result in color2.", "history": "added in version 23.2.0", "FullName": "int blendARGB (int color1, int color2, float ratio)"}, "blendHSL(float[], float[], float, float[])": {"Returns": [], "Parameters": [["float[]", "float: 3-element array which holds the first HSL color"], ["float[]", "float: 3-element array which holds the second HSL color"], ["float", "float: the blend ratio of hsl1 to hsl2Value is between 0.0 and 1.0 inclusive."], ["float[]", "float: 3-element array which holds the resulting HSL components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Blend between hsl1 and hsl2 using the given ratio. This will interpolate the hue using the shortest angle. A blend ratio of 0.0 will result in hsl1, 0.5 will give an even blend, 1.0 will result in hsl2.", "history": "added in version 23.2.0", "FullName": "void blendHSL (float[] hsl1, float[] hsl2, float ratio, float[] outResult)"}, "RGBToXYZ(int, int, int, double[])": {"Returns": [], "Parameters": [["int", "int: red component value [0..255]Value is 255 or less."], ["int", "int: green component value [0..255]Value is 255 or less."], ["int", "int: blue component value [0..255]Value is 255 or less."], ["double[]", "double: 3-element array which holds the resulting XYZ components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert RGB components to its CIE XYZ representative components. The resulting XYZ representation will use the D65 illuminant and the CIE 2\u00b0 Standard Observer (1931). outXyz[0] is X [0 ...95.047) outXyz[1] is Y [0...100) outXyz[2] is Z [0...108.883)", "history": "added in version 23.2.0", "FullName": "void RGBToXYZ (int r, int g, int b, double[] outXyz)"}, "LABToColor(double, double, double)": {"Returns": [["int", "int containing the RGB representation"]], "Parameters": [["double", "double: L component value [0...100]Value is between 0.0 and 100.0 inclusive."], ["double", "double: A component value [-128...127]Value is between -128.0 and 127.0 inclusive."], ["double", "double: B component value [-128...127]Value is between -128.0 and 127.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a color from CIE Lab to its RGB representation.", "history": "added in version 23.2.0", "FullName": "int LABToColor (double l, double a, double b)"}, "blendLAB(double[], double[], double, double[])": {"Returns": [], "Parameters": [["double[]", "double: 3-element array which holds the first LAB color"], ["double[]", "double: 3-element array which holds the second LAB color"], ["double", "double: the blend ratio of lab1 to lab2Value is between 0.0 and 1.0 inclusive."], ["double[]", "double: 3-element array which holds the resulting LAB components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Blend between two CIE-LAB colors using the given ratio. A blend ratio of 0.0 will result in lab1, 0.5 will give an even blend, 1.0 will result in lab2.", "history": "added in version 23.2.0", "FullName": "void blendLAB (double[] lab1, double[] lab2, double ratio, double[] outResult)"}, "calculateContrast(int, int)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the contrast ratio between foreground and background. background must be opaque. Formula defined", "history": "added in version 22.1.0", "FullName": "double calculateContrast (int foreground, int background)"}, "HSLToColor(float[])": {"Returns": [["int", "the resulting RGB color"]], "Parameters": [["float[]", "float: 3-element array which holds the input HSL components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert HSL (hue-saturation-lightness) components to a RGB color. hsl[0] is Hue [0 .. 360) hsl[1] is Saturation [0...1] hsl[2] is Lightness [0...1] If hsv values are out of range, they are pinned.", "history": "added in version 22.1.0", "FullName": "int HSLToColor (float[] hsl)"}, "XYZToLAB(double, double, double, double[])": {"Returns": [], "Parameters": [["double", "double: X component value [0...95.047)Value is between 0.0 and 95.047 inclusive."], ["double", "double: Y component value [0...100)Value is between 0.0 and 100.0 inclusive."], ["double", "double: Z component value [0...108.883)Value is between 0.0 and 108.883 inclusive."], ["double[]", "double: 3-element array which holds the resulting Lab components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a color from CIE XYZ to CIE Lab representation. This method expects the XYZ representation to use the D65 illuminant and the CIE 2\u00b0 Standard Observer (1931). outLab[0] is L [0 ...1) outLab[1] is a [-128...127) outLab[2] is b [-128...127)", "history": "added in version 23.2.0", "FullName": "void XYZToLAB (double x, double y, double z, double[] outLab)"}, "XYZToColor(double, double, double)": {"Returns": [["int", "int containing the RGB representation"]], "Parameters": [["double", "double: X component value [0...95.047)Value is between 0.0 and 95.047 inclusive."], ["double", "double: Y component value [0...100)Value is between 0.0 and 100.0 inclusive."], ["double", "double: Z component value [0...108.883)Value is between 0.0 and 108.883 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a color from CIE XYZ to its RGB representation. This method expects the XYZ representation to use the D65 illuminant and the CIE 2\u00b0 Standard Observer (1931).", "history": "added in version 23.2.0", "FullName": "int XYZToColor (double x, double y, double z)"}, "RGBToHSL(int, int, int, float[])": {"Returns": [], "Parameters": [["int", "int: red component value [0..255]Value is 255 or less."], ["int", "int: green component value [0..255]Value is 255 or less."], ["int", "int: blue component value [0..255]Value is 255 or less."], ["float[]", "float: 3-element array which holds the resulting HSL components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert RGB components to HSL (hue-saturation-lightness). outHsl[0] is Hue [0 .. 360) outHsl[1] is Saturation [0...1] outHsl[2] is Lightness [0...1]", "history": "added in version 22.1.0", "FullName": "void RGBToHSL (int r, int g, int b, float[] outHsl)"}, "colorToLAB(int, double[])": {"Returns": [], "Parameters": [["int", "int: the ARGB color to convert. The alpha component is ignored"], ["double[]", "double: 3-element array which holds the resulting LAB components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the ARGB color to its CIE Lab representative components.", "history": "added in version 23.2.0", "FullName": "void colorToLAB (int color, double[] outLab)"}, "colorToXYZ(int, double[])": {"Returns": [], "Parameters": [["int", "int: the ARGB color to convert. The alpha component is ignored"], ["double[]", "double: 3-element array which holds the resulting LAB components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the ARGB color to its CIE XYZ representative components. The resulting XYZ representation will use the D65 illuminant and the CIE 2\u00b0 Standard Observer (1931). outXyz[0] is X [0 ...95.047) outXyz[1] is Y [0...100) outXyz[2] is Z [0...108.883)", "history": "added in version 23.2.0", "FullName": "void colorToXYZ (int color, double[] outXyz)"}, "setAlphaComponent(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment Value is 255 or less."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the alpha component of color to be alpha.", "history": "added in version 22.1.0", "FullName": "int setAlphaComponent (int color, int alpha)"}, "RGBToLAB(int, int, int, double[])": {"Returns": [], "Parameters": [["int", "int: red component value [0..255]Value is 255 or less."], ["int", "int: green component value [0..255]Value is 255 or less."], ["int", "int: blue component value [0..255]Value is 255 or less."], ["double[]", "double: 3-element array which holds the resulting LAB components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert RGB components to its CIE Lab representative components. outLab[0] is L [0 ...1) outLab[1] is a [-128...127) outLab[2] is b [-128...127)", "history": "added in version 23.2.0", "FullName": "void RGBToLAB (int r, int g, int b, double[] outLab)"}, "compositeColors(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Composite two potentially translucent colors over each other and returns the result.", "history": "added in version 22.1.0", "FullName": "int compositeColors (int foreground, int background)"}, "calculateMinimumAlpha(int, int, float)": {"Returns": [["int", "the alpha value in the range 0-255, or -1 if no value could be calculated"]], "Parameters": [["int", "int: the foreground color"], ["int", "int: the opaque background color"], ["float", "float: the minimum contrast ratio"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculates the minimum alpha value which can be applied to foreground so that would have a contrast value of at least minContrastRatio when compared to background.", "history": "added in version 22.1.0", "FullName": "int calculateMinimumAlpha (int foreground, int background, float minContrastRatio)"}, "LABToXYZ(double, double, double, double[])": {"Returns": [], "Parameters": [["double", "double: L component value [0...100)Value is between 0.0 and 100.0 inclusive."], ["double", "double: A component value [-128...127)Value is between -128.0 and 127.0 inclusive."], ["double", "double: B component value [-128...127)Value is between -128.0 and 127.0 inclusive."], ["double[]", "double: 3-element array which holds the resulting XYZ components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts a color from CIE Lab to CIE XYZ representation. The resulting XYZ representation will use the D65 illuminant and the CIE 2\u00b0 Standard Observer (1931). outXyz[0] is X [0 ...95.047) outXyz[1] is Y [0...100) outXyz[2] is Z [0...108.883)", "history": "added in version 23.2.0", "FullName": "void LABToXYZ (double l, double a, double b, double[] outXyz)"}, "calculateLuminance(int)": {"Returns": [["double", "no returns description in source Value is between 0.0 and 1.0 inclusive."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the luminance of a color as a float between 0.0 and 1.0. Defined as the Y component in the XYZ representation of color.", "history": "added in version 22.1.0", "FullName": "double calculateLuminance (int color)"}, "colorToHSL(int, float[])": {"Returns": [], "Parameters": [["int", "int: the ARGB color to convert. The alpha component is ignored"], ["float[]", "float: 3-element array which holds the resulting HSL components"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convert the ARGB color to its HSL (hue-saturation-lightness) components. outHsl[0] is Hue [0 .. 360) outHsl[1] is Saturation [0...1] outHsl[2] is Lightness [0...1]", "history": "added in version 22.1.0", "FullName": "void colorToHSL (int color, float[] outHsl)"}, "distanceEuclidean(double[], double[])": {"Returns": [["double", "no returns description in source"]], "Parameters": [["double[]", "double no parameter comment"], ["double[]", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the euclidean distance between two LAB colors.", "history": "added in version 23.2.0", "FullName": "double distanceEuclidean (double[] labX, double[] labY)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.graphics.ColorUtils", "ClassDesc": "A set of color-related utility methods, building upon those available in Color."}