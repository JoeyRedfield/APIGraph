{"Functions": {"unfreezeRotation()": {"Returns": [], "Parameters": [], "Throws": [["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Re-enables the sensors and un-freezes the device rotation allowing its contents to rotate with the device physical rotation. During a test execution, it is best to keep the device frozen in a specific orientation until the test case execution has completed.", "history": "", "FullName": "void unfreezeRotation ()"}, "pressDPadRight()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the RIGHT button.", "history": "", "FullName": "boolean pressDPadRight ()"}, "pressDPadUp()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the UP button.", "history": "", "FullName": "boolean pressDPadUp ()"}, "setOrientationNatural()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Simulates orienting the device into its natural orientation and also freezes rotation by disabling the sensors. If you want to un-freeze the rotation and re-enable the sensors see @B_android#support#test#uiautomator#UiDevice#unfreezeRotation_E@.", "history": "", "FullName": "void setOrientationNatural ()"}, "freezeRotation()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Disables the sensors and freezes the device rotation at its current rotation state.", "history": "", "FullName": "void freezeRotation ()"}, "pressRecentApps()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the Recent Apps button.", "history": "", "FullName": "boolean pressRecentApps ()"}, "isScreenOn()": {"Returns": [["boolean", "true if the screen is ON else false"]], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Checks the power manager if the screen is ON.", "history": "", "FullName": "boolean isScreenOn ()"}, "getDisplayWidth()": {"Returns": [["int", "width in pixels or zero on failure"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the width of the display, in pixels. The width and height details are reported based on the current orientation of the display.", "history": "", "FullName": "int getDisplayWidth ()"}, "click(int, int)": {"Returns": [["boolean", "true if the click succeeded else false"]], "Parameters": [["int", "int: coordinate"], ["int", "int: coordinate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Perform a click at arbitrary coordinates specified by the user", "history": "", "FullName": "boolean click (int x, int y)"}, "takeScreenshot(java.io.File)": {"Returns": [["boolean", "true if screen shot is created successfully, false otherwise"]], "Parameters": [["File", "File: where the PNG should be written to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take a screenshot of current window and store it as PNG Default scale of 1.0f (original size) and 90% quality is used The screenshot is adjusted per screen rotation", "history": "", "FullName": "boolean takeScreenshot (File storePath)"}, "pressDPadCenter()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the CENTER button.", "history": "", "FullName": "boolean pressDPadCenter ()"}, "dumpWindowHierarchy(java.io.File)": {"Returns": [], "Parameters": [["File", "File: The file in which to store the window hierarchy information."]], "Throws": [["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Dump the current window hierarchy to a @B_java#io#File_E@.", "history": "", "FullName": "void dumpWindowHierarchy (File dest)"}, "swipe(android.graphics.Point[], int)": {"Returns": [["boolean", "true on success"]], "Parameters": [["Point[]", "Point: is Point array containing at least one Point object"], ["int", "int: steps to inject between two Points"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a swipe between points in the Point array. Each step execution is throttled to 5ms per step. So for a 100 steps, the swipe will take about 1/2 second to complete", "history": "", "FullName": "boolean swipe (Point[] segments, int segmentSteps)"}, "getDisplayHeight()": {"Returns": [["int", "height in pixels or zero on failure"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the height of the display, in pixels. The size is adjusted based on the current orientation of the display.", "history": "", "FullName": "int getDisplayHeight ()"}, "removeWatcher(java.lang.String)": {"Returns": [], "Parameters": [["String", "String: used to register the UiWatcher"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a previously registered @B_android#support#test#uiautomator#UiWatcher_E@. See @B_android#support#test#uiautomator#UiDevice#registerWatcher_E@", "history": "", "FullName": "void removeWatcher (String name)"}, "dumpWindowHierarchy(java.io.OutputStream)": {"Returns": [], "Parameters": [["OutputStream", "OutputStream: The output stream that the window hierarchy information is written to."]], "Throws": [["IOException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Dump the current window hierarchy to an @B_java#io#OutputStream_E@.", "history": "", "FullName": "void dumpWindowHierarchy (OutputStream out)"}, "setOrientationRight()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Simulates orienting the device to the right and also freezes rotation by disabling the sensors. If you want to un-freeze the rotation and re-enable the sensors see @B_android#support#test#uiautomator#UiDevice#unfreezeRotation_E@.", "history": "", "FullName": "void setOrientationRight ()"}, "getCurrentPackageName()": {"Returns": [["String", "String name of package"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the name of the last package to report accessibility events.", "history": "", "FullName": "String getCurrentPackageName ()"}, "isNaturalOrientation()": {"Returns": [["boolean", "true if it is in natural orientation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the device is in its natural orientation. This is determined by checking if the orientation is at 0 or 180 degrees.", "history": "", "FullName": "boolean isNaturalOrientation ()"}, "openQuickSettings()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens the Quick Settings shade.", "history": "", "FullName": "boolean openQuickSettings ()"}, "pressBack()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the BACK button.", "history": "", "FullName": "boolean pressBack ()"}, "pressDelete()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the DELETE key.", "history": "", "FullName": "boolean pressDelete ()"}, "waitForIdle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Waits for the current application to idle. Default wait timeout is 10 seconds", "history": "", "FullName": "void waitForIdle ()"}, "getInstance(android.app.Instrumentation)": {"Returns": [["@B_android#support#test#uiautomator#UiDevice_E@", "UiDevice instance"]], "Parameters": [["Instrumentation", "Instrumentation no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves a singleton instance of UiDevice", "history": "", "FullName": "UiDevice getInstance (Instrumentation instrumentation)"}, "getProductName()": {"Returns": [["String", "product name of the device"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the product name of the device. This method provides information on what type of device the test is running on. This value is the same as returned by invoking #adb shell getprop ro.product.name.", "history": "", "FullName": "String getProductName ()"}, "resetWatcherTriggers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets a @B_android#support#test#uiautomator#UiWatcher_E@ that has been triggered. If a UiWatcher runs and its @B_android#support#test#uiautomator#UiWatcher#checkForCondition_E@ call returned true, then the UiWatcher is considered triggered. See @B_android#support#test#uiautomator#UiDevice#registerWatcher_E@", "history": "", "FullName": "void resetWatcherTriggers ()"}, "getDisplayRotation()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current rotation of the display, as defined in @B_android#view#Surface_E@", "history": "", "FullName": "int getDisplayRotation ()"}, "pressEnter()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the ENTER key.", "history": "", "FullName": "boolean pressEnter ()"}, "openNotification()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens the notification shade.", "history": "", "FullName": "boolean openNotification ()"}, "pressMenu()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the MENU button.", "history": "", "FullName": "boolean pressMenu ()"}, "sleep()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "This method simply presses the power button if the screen is ON else it does nothing if the screen is already OFF.", "history": "", "FullName": "void sleep ()"}, "drag(int, int, int, int, int)": {"Returns": [["boolean", "true if swipe is performed, false if the operation fails or the coordinates are invalid"]], "Parameters": [["int", "int: X-axis value for the starting coordinate"], ["int", "int: Y-axis value for the starting coordinate"], ["int", "int: X-axis value for the ending coordinate"], ["int", "int: Y-axis value for the ending coordinate"], ["int", "int: is the number of steps for the swipe action"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a swipe from one coordinate to another coordinate. You can control the smoothness and speed of the swipe by specifying the number of steps. Each step execution is throttled to 5 milliseconds per step, so for a 100 steps, the swipe will take around 0.5 seconds to complete.", "history": "", "FullName": "boolean drag (int startX, int startY, int endX, int endY, int steps)"}, "getCurrentActivityName()": {"Returns": [["String", "String name of activity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The results returned should be considered unreliable Retrieves the last activity to report accessibility events.", "history": "", "FullName": "String getCurrentActivityName ()"}, "clearLastTraversedText()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the text from the last UI traversal event. See @B_android#support#test#uiautomator#UiDevice#getLastTraversedText_E@.", "history": "", "FullName": "void clearLastTraversedText ()"}, "pressDPadDown()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the DOWN button.", "history": "", "FullName": "boolean pressDPadDown ()"}, "hasWatcherTriggered(java.lang.String)": {"Returns": [["boolean", "true if triggered else false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if a specific registered @B_android#support#test#uiautomator#UiWatcher_E@ has triggered. See @B_android#support#test#uiautomator#UiDevice#registerWatcher_E@. If a UiWatcher runs and its @B_android#support#test#uiautomator#UiWatcher#checkForCondition_E@ call returned true, then the UiWatcher is considered triggered. This is helpful if a watcher is detecting errors from ANR or crash dialogs and the test needs to know if a UiWatcher has been triggered.", "history": "", "FullName": "boolean hasWatcherTriggered (String watcherName)"}, "dumpWindowHierarchy(java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#test#uiautomator#UiDevice#dumpWindowHierarchy_E@ or @B_android#support#test#uiautomator#UiDevice#dumpWindowHierarchy_E@ instead. Helper method used for debugging to dump the current window's layout hierarchy. Relative file paths are stored the application's internal private storage location.", "history": "", "FullName": "void dumpWindowHierarchy (String fileName)"}, "waitForIdle(long)": {"Returns": [], "Parameters": [["long", "long: in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Waits for the current application to idle.", "history": "", "FullName": "void waitForIdle (long timeout)"}, "wakeUp()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "This method simulates pressing the power button if the screen is OFF else it does nothing if the screen is already ON. If the screen was OFF and it just got turned ON, this method will insert a 500ms delay to allow the device time to wake up and accept input.", "history": "", "FullName": "void wakeUp ()"}, "pressDPadLeft()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the LEFT button.", "history": "", "FullName": "boolean pressDPadLeft ()"}, "setCompressedLayoutHeirarchy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable compression; else, false to disable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables layout hierarchy compression. If compression is enabled, the layout hierarchy derived from the Acessibility framework will only contain nodes that are important for uiautomator testing. Any unnecessary surrounding layout nodes that make viewing and searching the hierarchy inefficient are removed.", "history": "", "FullName": "void setCompressedLayoutHeirarchy (boolean compressed)"}, "hasAnyWatcherTriggered()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if any registered @B_android#support#test#uiautomator#UiWatcher_E@ have triggered. See @B_android#support#test#uiautomator#UiDevice#registerWatcher_E@ See @B_android#support#test#uiautomator#UiDevice#hasWatcherTriggered_E@", "history": "", "FullName": "boolean hasAnyWatcherTriggered ()"}, "swipe(int, int, int, int, int)": {"Returns": [["boolean", "false if the operation fails or the coordinates are invalid"]], "Parameters": [["int", "int: is the number of move steps sent to the system"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs a swipe from one coordinate to another using the number of steps to determine smoothness and speed. Each step execution is throttled to 5ms per step. So for a 100 steps, the swipe will take about 1/2 second to complete.", "history": "", "FullName": "boolean swipe (int startX, int startY, int endX, int endY, int steps)"}, "runWatchers()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method forces all registered watchers to run. See @B_android#support#test#uiautomator#UiDevice#registerWatcher_E@", "history": "", "FullName": "void runWatchers ()"}, "waitForWindowUpdate(java.lang.String, long)": {"Returns": [["boolean", "true if a window update occurred, false if timeout has elapsed or if the current window does not have the specified package name"]], "Parameters": [["String", "String: the specified window package name (can be null). If null, a window update from any front-end window will end the wait"], ["long", "long: the timeout for the wait"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Waits for a window content update event to occur. If a package name for the window is specified, but the current window does not have the same package name, the function returns immediately.", "history": "", "FullName": "boolean waitForWindowUpdate (String packageName, long timeout)"}, "getInstance()": {"Returns": [["@B_android#support#test#uiautomator#UiDevice_E@", "UiDevice instance"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Should use @B_android#support#test#uiautomator#UiDevice#getInstance_E@ instead. This version hides UiDevice's dependency on having an Instrumentation reference and is prone to misuse. Retrieves a singleton instance of UiDevice", "history": "", "FullName": "UiDevice getInstance ()"}, "getDisplaySizeDp()": {"Returns": [["Point", "a Point containing the display size in dp"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the display size in dp (device-independent pixel) The returned display size is adjusted per screen rotation. Also this will return the actual size of the screen, rather than adjusted per system decorations (like status bar).", "history": "", "FullName": "Point getDisplaySizeDp ()"}, "pressSearch()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the SEARCH button.", "history": "", "FullName": "boolean pressSearch ()"}, "getLauncherPackageName()": {"Returns": [["String", "package name of the default launcher"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves default launcher package name", "history": "", "FullName": "String getLauncherPackageName ()"}, "takeScreenshot(java.io.File, float, int)": {"Returns": [["boolean", "true if screen shot is created successfully, false otherwise"]], "Parameters": [["File", "File: where the PNG should be written to"], ["float", "float: scale the screenshot down if needed; 1.0f for original size"], ["int", "int: quality of the PNG compression; range: 0-100"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Take a screenshot of current window and store it as PNG The screenshot is adjusted per screen rotation", "history": "", "FullName": "boolean takeScreenshot (File storePath, float scale, int quality)"}, "pressKeyCode(int, int)": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [["int", "int: the key code of the event."], ["int", "int: an integer in which each bit set to 1 represents a pressed meta key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press using a key code. See @B_android#view#KeyEvent_E@.", "history": "", "FullName": "boolean pressKeyCode (int keyCode, int metaState)"}, "pressHome()": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press on the HOME button.", "history": "", "FullName": "boolean pressHome ()"}, "getLastTraversedText()": {"Returns": [["String", "text of the last traversal event, else return an empty string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the text from the last UI traversal event received. You can use this method to read the contents in a WebView container because the accessibility framework fires events as each text is highlighted. You can write a test to perform directional arrow presses to focus on different elements inside a WebView, and call this method to get the text from each traversed element. If you are testing a view container that can return a reference to a Document Object Model (DOM) object, your test should use the view's DOM instead.", "history": "", "FullName": "String getLastTraversedText ()"}, "pressKeyCode(int)": {"Returns": [["boolean", "true if successful, else return false"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Simulates a short press using a key code. See @B_android#view#KeyEvent_E@", "history": "", "FullName": "boolean pressKeyCode (int keyCode)"}, "setOrientationLeft()": {"Returns": [], "Parameters": [], "Throws": [["", "RemoteException"], ["RemoteException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Simulates orienting the device to the left and also freezes rotation by disabling the sensors. If you want to un-freeze the rotation and re-enable the sensors see @B_android#support#test#uiautomator#UiDevice#unfreezeRotation_E@.", "history": "", "FullName": "void setOrientationLeft ()"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.uiautomator.UiDevice", "ClassDesc": "UiDevice provides access to state information about the device. You can also use this class to simulate user actions on the device, such as pressing the d-pad or pressing the Home and Menu buttons."}