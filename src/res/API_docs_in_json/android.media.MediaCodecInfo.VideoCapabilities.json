{"Functions": {"getAchievableFrameRatesFor(int,int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [["int", "int: the width of the video"], ["int", "int: the height of the video"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the video size is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of achievable video frame rates for a video size. May return null, if the codec did not publish any measurement data. This is a performance estimate provided by the device manufacturer based on statistical sampling of full-speed decoding and encoding measurements in various configurations of common video sizes supported by the codec. As such it should only be used to compare individual codecs on the device. The value is not suitable for comparing different devices or even different android releases for the same device. On @B_android#os#Build#VERSION_CODES#M_E@ release the returned range corresponds to the fastest frame rates achieved in the tested configurations. As such, it should not be used to gauge guaranteed or even average codec performance on the device. On @B_android#os#Build#VERSION_CODES#N_E@ release the returned range corresponds closer to sustained performance in tested configurations. One can expect to achieve sustained performance higher than the lower limit more than 50% of the time, and higher than half of the lower limit at least 90% of the time in tested configurations. Conversely, one can expect performance lower than twice the upper limit at least 90% of the time. Tested configurations use a single active codec. For use cases where multiple codecs are active, applications can expect lower and in most cases significantly lower performance. The returned range value is interpolated from the nearest frame size(s) tested. Codec performance is severely impacted by other activity on the device as well as environmental factors (such as battery level, temperature or power source), and can vary significantly even in a steady environment. Use this method in cases where only codec performance matters, e.g. to evaluate if a codec has any chance of meeting a performance target. Codecs are listed in @B_android#media#MediaCodecList_E@ in the preferred order as defined by the device manufacturer. As such, applications should use the first suitable codec in the list to achieve the best balance between power use and performance.", "history": "Added in API level 23", "FullName": "public Range<Double> getAchievableFrameRatesFor (int width, int height)"}, "getHeightAlignment()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alignment requirement for video height (in pixels). This is a power-of-2 value that video height must be a multiple of.", "history": "Added in API level 21", "FullName": "public int getHeightAlignment ()"}, "getAchievableFrameRatesFor(int, int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source This value may be null."]], "Parameters": [["int", "int: the width of the video"], ["int", "int: the height of the video"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the video size is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of achievable video frame rates for a video size. May return null, if the codec did not publish any measurement data. This is a performance estimate provided by the device manufacturer based on statistical sampling of full-speed decoding and encoding measurements in various configurations of common video sizes supported by the codec. As such it should only be used to compare individual codecs on the device. The value is not suitable for comparing different devices or even different android releases for the same device. On @B_android#os#Build#VERSION_CODES#M_E@ release the returned range corresponds to the fastest frame rates achieved in the tested configurations. As such, it should not be used to gauge guaranteed or even average codec performance on the device. On @B_android#os#Build#VERSION_CODES#N_E@ release the returned range corresponds closer to sustained performance in tested configurations. One can expect to achieve sustained performance higher than the lower limit more than 50% of the time, and higher than half of the lower limit at least 90% of the time in tested configurations. Conversely, one can expect performance lower than twice the upper limit at least 90% of the time. Tested configurations use a single active codec. For use cases where multiple codecs are active, applications can expect lower and in most cases significantly lower performance. The returned range value is interpolated from the nearest frame size(s) tested. Codec performance is severely impacted by other activity on the device as well as environmental factors (such as battery level, temperature or power source), and can vary significantly even in a steady environment. Use this method in cases where only codec performance matters, e.g. to evaluate if a codec has any chance of meeting a performance target. Codecs are listed in @B_android#media#MediaCodecList_E@ in the preferred order as defined by the device manufacturer. As such, applications should use the first suitable codec in the list to achieve the best balance between power use and performance.", "history": "added in API level 23", "FullName": "public Range<Double> getAchievableFrameRatesFor (int width, int height)"}, "areSizeAndRateSupported(int, int, double)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a given video size (width and height) and frameRate combination is supported.", "history": "added in API level 21", "FullName": "public boolean areSizeAndRateSupported (int width, int height, double frameRate)"}, "getSupportedWidthsFor(int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [["int", "int: the height of the video"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video widths for a video height.", "history": "Added in API level 21", "FullName": "public Range<Integer> getSupportedWidthsFor (int height)"}, "areSizeAndRateSupported(int,int,double)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a given video size (width and height) and frameRate combination is supported.", "history": "Added in API level 21", "FullName": "public boolean areSizeAndRateSupported (int width, int height, double frameRate)"}, "getSupportedWidths()": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video widths.", "history": "Added in API level 21", "FullName": "public Range<Integer> getSupportedWidths ()"}, "getWidthAlignment()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the alignment requirement for video width (in pixels). This is a power-of-2 value that video width must be a multiple of.", "history": "Added in API level 21", "FullName": "public int getWidthAlignment ()"}, "isSizeSupported(int,int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a given video size (width and height) is supported.", "history": "Added in API level 21", "FullName": "public boolean isSizeSupported (int width, int height)"}, "isSizeSupported(int, int)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a given video size (width and height) is supported.", "history": "added in API level 21", "FullName": "public boolean isSizeSupported (int width, int height)"}, "getSupportedHeights()": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video heights.", "history": "Added in API level 21", "FullName": "public Range<Integer> getSupportedHeights ()"}, "getSupportedFrameRatesFor(int, int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [["int", "int: the width of the video"], ["int", "int: the height of the video"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video frame rates for a video size. This is not a performance indicator. Rather, it expresses the limits specified in the coding standard, based on the complexities of encoding material of a given size for later playback at a certain frame rate, or the decoding of such material in non-realtime.", "history": "added in API level 21", "FullName": "public Range<Double> getSupportedFrameRatesFor (int width, int height)"}, "getSupportedPerformancePoints()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the supported performance points. May return null if the codec did not publish any performance point information (e.g. the vendor codecs have not been updated to the latest android release). May return an empty list if the codec published that if does not guarantee any performance points. This is a performance guarantee provided by the device manufacturer for hardware codecs based on hardware capabilities of the device. The returned list is sorted first by decreasing number of pixels, then by decreasing width, and finally by decreasing frame rate. Performance points assume a single active codec. For use cases where multiple codecs are active, should use that highest pixel count, and add the frame rates of each individual codec.", "history": "Added in API level 29", "FullName": "public List<MediaCodecInfo.VideoCapabilities.PerformancePoint> getSupportedPerformancePoints ()"}, "getSupportedFrameRates()": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported frame rates. This is not a performance indicator. Rather, it expresses the limits specified in the coding standard, based on the complexities of encoding material for later playback at a certain frame rate, or the decoding of such material in non-realtime.", "history": "Added in API level 21", "FullName": "public Range<Integer> getSupportedFrameRates ()"}, "getSupportedFrameRatesFor(int,int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [["int", "int: the width of the video"], ["int", "int: the height of the video"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video frame rates for a video size. This is not a performance indicator. Rather, it expresses the limits specified in the coding standard, based on the complexities of encoding material of a given size for later playback at a certain frame rate, or the decoding of such material in non-realtime.", "history": "Added in API level 21", "FullName": "public Range<Double> getSupportedFrameRatesFor (int width, int height)"}, "getBitrateRange()": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported bitrates in bits/second.", "history": "Added in API level 21", "FullName": "public Range<Integer> getBitrateRange ()"}, "getSupportedHeightsFor(int)": {"Returns": [["@B_android#util#Range_E@", "no returns description in source"]], "Parameters": [["int", "int: the width of the video"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the range of supported video heights for a video width", "history": "Added in API level 21", "FullName": "public Range<Integer> getSupportedHeightsFor (int width)"}}, "Inheritance": [], "ClassName": "android.media.MediaCodecInfo.VideoCapabilities", "ClassDesc": "A class that supports querying the video capabilities of a codec."}