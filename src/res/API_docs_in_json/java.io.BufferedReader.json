{"Functions": {"BufferedReader(java.io.Reader, int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader"], ["int", "int: Input-buffer size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If sz <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a buffering character-input stream that uses an input buffer of the specified size.", "history": "added in API level 1", "FullName": "public BufferedReader (Reader in, int sz)"}, "skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If n is negative."], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Skips characters.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If the stream has never been marked, or if the mark has been invalidated"]], "SeeAlso": [], "Permissions": [], "Description": "Resets the stream to the most recent mark.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array. This method implements the general contract of the corresponding read method of the Reader class. As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the read method of the underlying stream. This iterated read continues until one of the following conditions becomes true: The specified number of characters have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The ready method of the underlying stream returns false, indicating that further input requests would block. If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1. Otherwise this method returns the number of characters actually read. Subclasses of this class are encouraged, but not required, to attempt to read as many characters as possible in the same fashion. Ordinarily this method takes characters from this stream's character buffer, filling it from the underlying stream as necessary. If, however, the buffer is empty, the mark is not valid, and the requested length is at least as large as the buffer, then this method will read characters directly from the underlying stream into the given array. Thus redundant BufferedReaders will not copy data unnecessarily.", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "read()": {"Returns": [["int", "The character read, as an integer in the range 0 to 65535 (0x00-0xffff), or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "ready()": {"Returns": [["boolean", "True if the next read() is guaranteed not to block for input, false otherwise. Note that returning false does not guarantee that the next read will block."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream is ready to be read. A buffered character stream is ready if the buffer is not empty, or if the underlying character stream is ready.", "history": "Added in API level 1", "FullName": "public boolean ready ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes the stream and releases any system resources associated with it. Once the stream has been closed, further read(), ready(), mark(), reset(), or skip() invocations will throw an IOException. Closing a previously closed stream has no effect.", "history": "Added in API level 1", "FullName": "public void close ()"}, "BufferedReader(java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader"], ["int", "int: Input-buffer size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If sz <= 0"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a buffering character-input stream that uses an input buffer of the specified size.", "history": "Added in API level 1", "FullName": "public BufferedReader (Reader in, int sz)"}, "readLine()": {"Returns": [["@B_java#lang#String_E@", "A String containing the contents of the line, not including any line-termination characters, or null if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": ["@B_java#nio#file#Files#readAllLines_E@"], "Permissions": [], "Description": "Reads a line of text. A line is considered to be terminated by any one of a line feed ('\\n'), a carriage return ('\\r'), or a carriage return followed immediately by a linefeed.", "history": "Added in API level 1", "FullName": "public String readLine ()"}, "read(char[],int,int)": {"Returns": [["int", "The number of characters read, or -1 if the end of the stream has been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads characters into a portion of an array. This method implements the general contract of the corresponding Reader#read(char[], int, int) method of the Reader class. As an additional convenience, it attempts to read as many characters as possible by repeatedly invoking the read method of the underlying stream. This iterated read continues until one of the following conditions becomes true: The specified number of characters have been read, The read method of the underlying stream returns -1, indicating end-of-file, or The ready method of the underlying stream returns false, indicating that further input requests would block. If the first read on the underlying stream returns -1 to indicate end-of-file then this method returns -1. Otherwise this method returns the number of characters actually read. Subclasses of this class are encouraged, but not required, to attempt to read as many characters as possible in the same fashion. Ordinarily this method takes characters from this stream's character buffer, filling it from the underlying stream as necessary. If, however, the buffer is empty, the mark is not valid, and the requested length is at least as large as the buffer, then this method will read characters directly from the underlying stream into the given array. Thus redundant BufferedReaders will not copy data unnecessarily.", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "lines()": {"Returns": [["@B_java#util#stream#Stream_E@", "a Stream<String> providing the lines of text described by this BufferedReader"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Stream, the elements of which are lines read from this BufferedReader. The @B_java#util#stream#Stream_E@ is lazily populated, i.e., read only occurs during the The reader must not be operated on during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined. After execution of the terminal stream operation there are no guarantees that the reader will be at a specific position from which to read the next character or line. If an @B_java#io#IOException_E@ is thrown when accessing the underlying BufferedReader, it is wrapped in an @B_java#io#UncheckedIOException_E@ which will be thrown from the Stream method that caused the read to take place. This method will return a Stream if invoked on a BufferedReader that is closed. Any operation on that stream that requires reading from the BufferedReader after it is closed, will cause an UncheckedIOException to be thrown.", "history": "Added in API level 24", "FullName": "public Stream<String> lines ()"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. An attempt to reset the stream after reading characters up to this limit or beyond may fail. A limit value larger than the size of the input buffer will cause a new buffer to be allocated whose size is no smaller than limit. Therefore large values should be used with care."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If readAheadLimit < 0"], ["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Marks the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "markSupported()": {"Returns": [["boolean", "true if and only if this stream supports the mark operation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this stream supports the mark() operation, which it does.", "history": "Added in API level 1", "FullName": "public boolean markSupported ()"}, "BufferedReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a buffering character-input stream that uses a default-sized input buffer.", "history": "Added in API level 1", "FullName": "public BufferedReader (Reader in)"}}, "Inheritance": ["@B_java#io#Reader_E@"], "ClassName": "java.io.BufferedReader", "ClassDesc": "Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines. The buffer size may be specified, or the default size may be used. The default is large enough for most purposes. In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders. For example, Programs that use DataInputStreams for textual input can be localized by replacing each DataInputStream with an appropriate BufferedReader."}