{"Functions": {"getFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque. This method differs from @B_java#util#Deque#peekFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E getFirst ()"}, "ArrayDeque(int)": {"Returns": [], "Parameters": [["int", "int: lower bound on initial capacity of the deque"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty array deque with an initial capacity sufficient to hold the specified number of elements.", "history": "Added in API level 9", "FullName": "public ArrayDeque (int numElements)"}, "removeLastOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the last occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the last element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public boolean removeLastOccurrence (Object o)"}, "pollLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E pollLast ()"}, "offerLast(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerLast_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque.", "history": "Added in API level 9", "FullName": "public boolean offerLast (E e)"}, "peekFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E peekFirst ()"}, "getLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque. This method differs from @B_java#util#Deque#peekLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E getLast ()"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the elements from this deque. The deque will be empty after this call returns.", "history": "Added in API level 9", "FullName": "public void clear ()"}, "ArrayDeque(java.util.Collection<?extendsE>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into the deque"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator. (The first element returned by the collection's iterator becomes the first element, or", "history": "Added in API level 9", "FullName": "public ArrayDeque (Collection<? extends E> c)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque. This method is equivalent to @B_java#util#ArrayDeque#addLast_E@.", "history": "Added in API level 9", "FullName": "public boolean add (E e)"}, "iterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque. The elements will be ordered from first (head) to last (tail). This is the same order that elements would be dequeued (via successive calls to @B_java#util#ArrayDeque#remove_E@ or popped (via successive calls to @B_java#util#ArrayDeque#pop_E@).", "history": "Added in API level 9", "FullName": "public Iterator<E> iterator ()"}, "poll()": {"Returns": [["E", "the head of the queue represented by this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque (in other words, the first element of this deque), or returns null if this deque is empty. This method is equivalent to @B_java#util#ArrayDeque#pollFirst_E@.", "history": "Added in API level 9", "FullName": "public E poll ()"}, "pollFirst()": {"Returns": [["E", "the head of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E pollFirst ()"}, "clone()": {"Returns": [["@B_java#util#ArrayDeque_E@", "a copy of this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this deque.", "history": "Added in API level 9", "FullName": "public ArrayDeque<E> clone ()"}, "offerFirst(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Deque#offerFirst_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque.", "history": "Added in API level 9", "FullName": "public boolean offerFirst (E e)"}, "toArray()": {"Returns": [["@B_java#lang#Object_E@", "an array containing all of the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element). The returned array will be \"safe\" in that no references to it are maintained by this deque. (In other words, this method must allocate a new array). The caller is thus free to modify the returned array. This method acts as bridge between array-based and collection-based APIs.", "history": "Added in API level 9", "FullName": "public Object[] toArray ()"}, "size()": {"Returns": [["int", "the number of elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of elements in this deque.", "history": "Added in API level 9", "FullName": "public int size ()"}, "isEmpty()": {"Returns": [["boolean", "true if this deque contains no elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains no elements.", "history": "Added in API level 9", "FullName": "public boolean isEmpty ()"}, "addFirst(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the front of this deque.", "history": "Added in API level 9", "FullName": "public void addFirst (E e)"}, "offer(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Queue#offer_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque. This method is equivalent to @B_java#util#ArrayDeque#offerLast_E@.", "history": "Added in API level 9", "FullName": "public boolean offer (E e)"}, "addLast(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element at the end of this deque. This method is equivalent to @B_java#util#ArrayDeque#add_E@.", "history": "Added in API level 9", "FullName": "public void addLast (E e)"}, "peek()": {"Returns": [["E", "the head of the queue represented by this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque, or returns null if this deque is empty. This method is equivalent to @B_java#util#ArrayDeque#peekFirst_E@.", "history": "Added in API level 9", "FullName": "public E peek ()"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this deque. If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call). This method is equivalent to @B_java#util#ArrayDeque#removeFirstOccurrence_E@.", "history": "Added in API level 9", "FullName": "public boolean remove (Object o)"}, "peekLast()": {"Returns": [["E", "the tail of this deque, or null if this deque is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the last element of this deque, or returns null if this deque is empty.", "history": "Added in API level 9", "FullName": "public E peekLast ()"}, "pop()": {"Returns": [["E", "the element at the front of this deque (which is the top of the stack represented by this deque)"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Pops an element from the stack represented by this deque. In other words, removes and returns the first element of this deque. This method is equivalent to @B_java#util#ArrayDeque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public E pop ()"}, "toArray(T[])": {"Returns": [["T[]", "an array containing all of the elements in this deque"]], "Parameters": [["T[]", "T: the array into which the elements of the deque are to be stored, if it is big enough; otherwise, a new array of the same runtime type is allocated for this purpose"]], "Throws": [["@B_java#lang#ArrayStoreException_E@", "if the runtime type of the specified array is not a supertype of the runtime type of every element in this deque"], ["@B_java#lang#NullPointerException_E@", "if the specified array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns an array containing all of the elements in this deque in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the deque fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this deque. If this deque fits in the specified array with room to spare (i.e., the array has more elements than this deque), the element in the array immediately following the end of the deque is set to null. Like the @B_java#util#ArrayDeque#toArray_E@ method, this method acts as bridge between array-based and collection-based APIs. Further, this method allows precise control over the runtime type of the output array, and may, under certain circumstances, be used to save allocation costs. Suppose x is a deque known to contain only strings. The following code can be used to dump the deque into a newly allocated array of String: toArray(new Object[0]) is identical in function to toArray().", "history": "Added in API level 9", "FullName": "public T[] toArray (T[] a)"}, "remove()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of the queue represented by this deque. This method differs from @B_java#util#ArrayDeque#poll_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#ArrayDeque#removeFirst_E@.", "history": "Added in API level 9", "FullName": "public E remove ()"}, "removeLast()": {"Returns": [["E", "the tail of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the last element of this deque. This method differs from @B_java#util#Deque#pollLast_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E removeLast ()"}, "push(E)": {"Returns": [], "Parameters": [["E", "E: the element to push"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified element is null"]], "SeeAlso": [], "Permissions": [], "Description": "Pushes an element onto the stack represented by this deque. In other words, inserts the element at the front of this deque. This method is equivalent to @B_java#util#ArrayDeque#addFirst_E@.", "history": "Added in API level 9", "FullName": "public void push (E e)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this deque contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this deque"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this deque contains the specified element. More formally, returns true if and only if this deque contains at least one element e such that o.equals(e).", "history": "Added in API level 9", "FullName": "public boolean contains (Object o)"}, "ArrayDeque()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty array deque with an initial capacity sufficient to hold 16 elements.", "history": "Added in API level 9", "FullName": "public ArrayDeque ()"}, "descendingIterator()": {"Returns": [["@B_java#util#Iterator_E@", "an iterator over the elements in this deque in reverse sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an iterator over the elements in this deque in reverse sequential order. The elements will be returned in order from last (tail) to first (head).", "history": "Added in API level 9", "FullName": "public Iterator<E> descendingIterator ()"}, "removeFirstOccurrence(java.lang.Object)": {"Returns": [["boolean", "true if the deque contained the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this deque, if present"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the first occurrence of the specified element in this deque (when traversing the deque from head to tail). If the deque does not contain the element, it is unchanged. More formally, removes the first element e such that o.equals(e) (if such an element exists). Returns true if this deque contained the specified element (or equivalently, if this deque changed as a result of the call).", "history": "Added in API level 9", "FullName": "public boolean removeFirstOccurrence (Object o)"}, "removeFirst()": {"Returns": [["E", "the head of this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the first element of this deque. This method differs from @B_java#util#Deque#pollFirst_E@ only in that it throws an exception if this deque is empty.", "history": "Added in API level 9", "FullName": "public E removeFirst ()"}, "ArrayDeque(java.util.Collection<? extends E>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection whose elements are to be placed into the deque"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified collection is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a deque containing the elements of the specified collection, in the order they are returned by the collection's iterator. (The first element returned by the collection's iterator becomes the first element, or", "history": "added in API level 9", "FullName": "public ArrayDeque (Collection<? extends E> c)"}, "element()": {"Returns": [["E", "the head of the queue represented by this deque"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves, but does not remove, the head of the queue represented by this deque. This method differs from @B_java#util#ArrayDeque#peek_E@ only in that it throws an exception if this deque is empty. This method is equivalent to @B_java#util#ArrayDeque#getFirst_E@.", "history": "Added in API level 9", "FullName": "public E element ()"}, "spliterator()": {"Returns": [["@B_java#util#Spliterator_E@", "a Spliterator over the elements in this deque"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a and fail-fast @B_java#util#Spliterator_E@ over the elements in this deque. The Spliterator reports @B_java#util#Spliterator#SIZED_E@, @B_java#util#Spliterator#SUBSIZED_E@, @B_java#util#Spliterator#ORDERED_E@, and @B_java#util#Spliterator#NONNULL_E@. Overriding implementations should document the reporting of additional characteristic values.", "history": "Added in API level 24", "FullName": "public Spliterator<E> spliterator ()"}}, "Inheritance": ["@B_java#util#AbstractCollection_E@"], "ClassName": "java.util.ArrayDeque<E>", "ClassDesc": "Resizable-array implementation of the @B_java#util#Deque_E@ interface. Array deques have no capacity restrictions; they grow as necessary to support usage. They are not thread-safe; in the absence of external synchronization, they do not support concurrent access by multiple threads. Null elements are prohibited. This class is likely to be faster than @B_java#util#Stack_E@ when used as a stack, and faster than @B_java#util#LinkedList_E@ when used as a queue. Most ArrayDeque operations run in amortized constant time. Exceptions include @B_java#util#ArrayDeque#remove_E@, @B_java#util#ArrayDeque#removeFirstOccurrence_E@, @B_java#util#ArrayDeque#removeLastOccurrence_E@, @B_java#util#ArrayDeque#contains_E@, @B_java#util#ArrayDeque#iterator_E@, and the bulk operations, all of which run in linear time. The iterators returned by this class's @B_java#util#ArrayDeque#iterator_E@ method are fail-fast: If the deque is modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will generally throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: This class and its iterator implement all of the optional methods of the @B_java#util#Collection_E@ and @B_java#util#Iterator_E@ interfaces."}