{"Functions": {"getItemCount()": {"Returns": [["int", "The total number of items in this adapter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total number of items in the data set held by the adapter.", "history": "added in version 22.0.0", "FullName": "int getItemCount ()"}, "notifyItemChanged(int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: Position of the item that has changed"], ["@B_java#lang#Object_E@", "Object: Optional parameter, use null to identify a \"full\" update"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeChanged_E@"], "Permissions": [], "Description": "Notify any registered observers that the item at position has changed with an optional payload object. This is an item change event, not a structural change event. It indicates that any reflection of the data at position is out of date and should be updated. The item at position retains the same identity. Client can optionally pass a payload for partial change. These payloads will be merged and may be passed to adapter's @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ if the item is already represented by a ViewHolder and it will be rebound to the same ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing payloads on that item and prevent future payload until @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ is called. Adapter should not assume that the payload will always be passed to onBindViewHolder(), e.g. when the view is not attached, the payload will be simply dropped.", "history": "added in version 23.0.0", "FullName": "void notifyItemChanged (int position, Object payload)"}, "onFailedToRecycleView(VH)": {"Returns": [["boolean", "True if the View should be recycled, false otherwise. Note that if this method returns true, RecyclerView will ignore the transient state of the View and recycle it regardless. If this method returns false, RecyclerView will check the View's transient state again before giving a final decision. Default implementation returns false."]], "Parameters": [["VH", "VH: The ViewHolder containing the View that could not be recycled due to its transient state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the RecyclerView if a ViewHolder created by this Adapter cannot be recycled due to its transient state. Upon receiving this callback, Adapter can clear the animation(s) that effect the View's transient state and return true so that the View can be recycled. Keep in mind that the View in question is already removed from the RecyclerView. In some cases, it is acceptable to recycle a View although it has transient state. Most of the time, this is a case where the transient state will be cleared in @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ call when View is rebound to a new position. For this reason, RecyclerView leaves the decision to the Adapter and uses the return value of this method to decide whether the View should be recycled or not. Note that when all animations are created by @B_android#support#v7#widget#RecyclerView#ItemAnimator_E@, you should never receive this callback because RecyclerView keeps those Views as children until their animations are complete. This callback is useful when children of the item views create animations which may not be easy to implement using an @B_android#support#v7#widget#RecyclerView#ItemAnimator_E@. You should never fix this issue by calling holder.itemView.setHasTransientState(false); unless you've previously called holder.itemView.setHasTransientState(true);. Each View.setHasTransientState(true) call must be matched by a View.setHasTransientState(false) call, otherwise, the state of the View may become inconsistent. You should always prefer to end or cancel animations that are triggering the transient state instead of handling it manually.", "history": "added in version 22.0.0", "FullName": "boolean onFailedToRecycleView (VH holder)"}, "onViewRecycled(VH)": {"Returns": [], "Parameters": [["VH", "VH: The ViewHolder for the view being recycled"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view created by this adapter has been recycled. A view is recycled when a @B_android#support#v7#widget#RecyclerView#LayoutManager_E@ decides that it no longer needs to be attached to its parent @B_android#support#v7#widget#RecyclerView_E@. This can be because it has fallen out of visibility or a set of cached views represented by views still attached to the parent RecyclerView. If an item view has large or expensive data bound to it such as large bitmaps, this may be a good place to release those resources. RecyclerView calls this method right before clearing ViewHolder's internal data and sending it to RecycledViewPool. This way, if ViewHolder was holding valid information before being recycled, you can call @B_android#support#v7#widget#RecyclerView#ViewHolder#getAdapterPosition_E@ to get its adapter position.", "history": "added in version 22.0.0", "FullName": "void onViewRecycled (VH holder)"}, "onBindViewHolder(VH, int)": {"Returns": [], "Parameters": [["VH", "VH: The ViewHolder which should be updated to represent the contents of the item at the given position in the data set."], ["int", "int: The position of the item within the adapter's data set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by RecyclerView to display the data at the specified position. This method should update the contents of the @B_android#support#v7#widget#RecyclerView#ViewHolder#itemView_E@ to reflect the item at the given position. Note that unlike @B_android#widget#ListView_E@, RecyclerView will not call this method again if the position of the item changes in the data set unless the item itself is invalidated or the new position cannot be determined. For this reason, you should only use the position parameter while acquiring the related data item inside this method and should not keep a copy of it. If you need the position of an item later on (e.g. in a click listener), use @B_android#support#v7#widget#RecyclerView#ViewHolder#getAdapterPosition_E@ which will have the updated adapter position. Override @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ instead if Adapter can handle efficient partial bind.", "history": "added in version 22.0.0", "FullName": "void onBindViewHolder (VH holder, int position)"}, "notifyItemRemoved(int)": {"Returns": [], "Parameters": [["int", "int: Position of the item that has now been removed"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeRemoved_E@"], "Permissions": [], "Description": "Notify any registered observers that the item previously located at position has been removed from the data set. The items previously located at and after position may now be found at oldPosition - 1. This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.", "history": "added in version 22.0.0", "FullName": "void notifyItemRemoved (int position)"}, "onCreateViewHolder(android.view.ViewGroup, int)": {"Returns": [["VH", "A new ViewHolder that holds a View of the given view type."]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The ViewGroup into which the new View will be added after it is bound to an adapter position."], ["int", "int: The view type of the new View."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#getItemViewType_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@"], "Permissions": [], "Description": "Called when RecyclerView needs a new @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ of the given type to represent an item. This new ViewHolder should be constructed with a new View that can represent the items of the given type. You can either create a new View manually or inflate it from an XML layout file. The new ViewHolder will be used to display items of the adapter using @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@. Since it will be re-used to display different items in the data set, it is a good idea to cache references to sub views of the View to avoid unnecessary @B_android#view#View#findViewById_E@ calls.", "history": "added in version 22.0.0", "FullName": "VH onCreateViewHolder (ViewGroup parent, int viewType)"}, "onViewAttachedToWindow(VH)": {"Returns": [], "Parameters": [["VH", "VH: Holder of the view being attached"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view created by this adapter has been attached to a window. This can be used as a reasonable signal that the view is about to be seen by the user. If the adapter previously freed any resources in @B_android#support#v7#widget#RecyclerView#Adapter#onViewDetachedFromWindow_E@ those resources should be restored here.", "history": "added in version 22.0.0", "FullName": "void onViewAttachedToWindow (VH holder)"}, "notifyItemRangeChanged(int, int)": {"Returns": [], "Parameters": [["int", "int: Position of the first item that has changed"], ["int", "int: Number of items that have changed"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemChanged_E@"], "Permissions": [], "Description": "Notify any registered observers that the itemCount items starting at position positionStart have changed. Equivalent to calling notifyItemRangeChanged(position, itemCount, null);. This is an item change event, not a structural change event. It indicates that any reflection of the data in the given position range is out of date and should be updated. The items in the given range retain the same identity.", "history": "added in version 22.0.0", "FullName": "void notifyItemRangeChanged (int positionStart, int itemCount)"}, "notifyItemMoved(int, int)": {"Returns": [], "Parameters": [["int", "int: Previous position of the item."], ["int", "int: New position of the item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify any registered observers that the item reflected at fromPosition has been moved to toPosition. This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.", "history": "added in version 22.0.0", "FullName": "void notifyItemMoved (int fromPosition, int toPosition)"}, "bindViewHolder(VH, int)": {"Returns": [], "Parameters": [["VH", "VH no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@"], "Permissions": [], "Description": "This method internally calls @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ to update the @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ contents with the item at the given position and also sets up some private fields to be used by RecyclerView.", "history": "added in version 22.0.0", "FullName": "void bindViewHolder (VH holder, int position)"}, "notifyDataSetChanged()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemChanged_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemInserted_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRemoved_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeChanged_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeInserted_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeRemoved_E@"], "Permissions": [], "Description": "Notify any registered observers that the data set has changed. There are two different classes of data change events, item changes and structural changes. Item changes are when a single item has its data updated but no positional changes have occurred. Structural changes are when items are inserted, removed or moved within the data set. This event does not specify what about the data set has changed, forcing any observers to assume that all existing items and structure may no longer be valid. LayoutManagers will be forced to fully rebind and relayout all visible views. RecyclerView will attempt to synthesize visible structural change events for adapters that report that they have @B_android#support#v7#widget#RecyclerView#Adapter#hasStableIds_E@ when this method is used. This can help for the purposes of animation and visual object persistence but individual item views will still need to be rebound and relaid out. If you are writing an adapter it will always be more efficient to use the more specific change events if you can. Rely on notifyDataSetChanged() as a last resort.", "history": "added in version 22.0.0", "FullName": "void notifyDataSetChanged ()"}, "getItemViewType(int)": {"Returns": [["int", "integer value identifying the type of the view needed to represent the item at position. Type codes need not be contiguous."]], "Parameters": [["int", "int: position to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the view type of the item at position for the purposes of view recycling. The default implementation of this method returns 0, making the assumption of a single view type for the adapter. Unlike ListView adapters, types need not be contiguous. Consider using id resources to uniquely identify item view types.", "history": "added in version 22.0.0", "FullName": "int getItemViewType (int position)"}, "notifyItemInserted(int)": {"Returns": [], "Parameters": [["int", "int: Position of the newly inserted item in the data set"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeInserted_E@"], "Permissions": [], "Description": "Notify any registered observers that the item reflected at position has been newly inserted. The item previously at position is now at position position + 1. This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.", "history": "added in version 22.0.0", "FullName": "void notifyItemInserted (int position)"}, "onViewDetachedFromWindow(VH)": {"Returns": [], "Parameters": [["VH", "VH: Holder of the view being detached"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when a view created by this adapter has been detached from its window. Becoming detached from the window is not necessarily a permanent condition; the consumer of an Adapter's views may choose to cache views offscreen while they are not visible, attaching and detaching them as appropriate.", "history": "added in version 22.0.0", "FullName": "void onViewDetachedFromWindow (VH holder)"}, "RecyclerView.Adapter()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "RecyclerView.Adapter ()"}, "notifyItemRangeRemoved(int, int)": {"Returns": [], "Parameters": [["int", "int: Previous position of the first item that was removed"], ["int", "int: Number of items removed from the data set"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify any registered observers that the itemCount items previously located at positionStart have been removed from the data set. The items previously located at and after positionStart + itemCount may now be found at oldPosition - itemCount. This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.", "history": "added in version 22.0.0", "FullName": "void notifyItemRangeRemoved (int positionStart, int itemCount)"}, "notifyItemRangeInserted(int, int)": {"Returns": [], "Parameters": [["int", "int: Position of the first item that was inserted"], ["int", "int: Number of items inserted"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemInserted_E@"], "Permissions": [], "Description": "Notify any registered observers that the currently reflected itemCount items starting at positionStart have been newly inserted. The items previously located at positionStart and beyond can now be found starting at position positionStart + itemCount. This is a structural change event. Representations of other existing items in the data set are still considered up to date and will not be rebound, though their positions may be altered.", "history": "added in version 22.0.0", "FullName": "void notifyItemRangeInserted (int positionStart, int itemCount)"}, "getItemId(int)": {"Returns": [["long", "the stable ID of the item at position"]], "Parameters": [["int", "int: Adapter position to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the stable ID for the item at position. If @B_android#support#v7#widget#RecyclerView#Adapter#hasStableIds_E@ would return false this method should return @B_android#support#v7#widget#RecyclerView#NO_ID_E@. The default implementation of this method returns @B_android#support#v7#widget#RecyclerView#NO_ID_E@.", "history": "added in version 22.0.0", "FullName": "long getItemId (int position)"}, "hasStableIds()": {"Returns": [["boolean", "true if this adapter's items have stable IDs"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this adapter publishes a unique long value that can act as a key for the item at a given position in the data set. If that item is relocated in the data set, the ID returned for that item should be the same.", "history": "added in version 22.0.0", "FullName": "boolean hasStableIds ()"}, "notifyItemRangeChanged(int, int, java.lang.Object)": {"Returns": [], "Parameters": [["int", "int: Position of the first item that has changed"], ["int", "int: Number of items that have changed"], ["@B_java#lang#Object_E@", "Object: Optional parameter, use null to identify a \"full\" update"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemChanged_E@"], "Permissions": [], "Description": "Notify any registered observers that the itemCount items starting at position positionStart have changed. An optional payload can be passed to each changed item. This is an item change event, not a structural change event. It indicates that any reflection of the data in the given position range is out of date and should be updated. The items in the given range retain the same identity. Client can optionally pass a payload for partial change. These payloads will be merged and may be passed to adapter's @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ if the item is already represented by a ViewHolder and it will be rebound to the same ViewHolder. A notifyItemRangeChanged() with null payload will clear all existing payloads on that item and prevent future payload until @B_android#support#v7#widget#RecyclerView#Adapter#onBindViewHolder_E@ is called. Adapter should not assume that the payload will always be passed to onBindViewHolder(), e.g. when the view is not attached, the payload will be simply dropped.", "history": "added in version 23.0.0", "FullName": "void notifyItemRangeChanged (int positionStart, int itemCount, Object payload)"}, "setHasStableIds(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether items in data set have unique identifiers or not."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#hasStableIds_E@", "@B_android#support#v7#widget#RecyclerView#Adapter#getItemId_E@"], "Permissions": [], "Description": "Indicates whether each item in the data set can be represented with a unique identifier of type @B_java#lang#Long_E@.", "history": "added in version 22.0.0", "FullName": "void setHasStableIds (boolean hasStableIds)"}, "notifyItemChanged(int)": {"Returns": [], "Parameters": [["int", "int: Position of the item that has changed"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRangeChanged_E@"], "Permissions": [], "Description": "Notify any registered observers that the item at position has changed. Equivalent to calling notifyItemChanged(position, null);. This is an item change event, not a structural change event. It indicates that any reflection of the data at position is out of date and should be updated. The item at position retains the same identity.", "history": "added in version 22.0.0", "FullName": "void notifyItemChanged (int position)"}, "createViewHolder(android.view.ViewGroup, int)": {"Returns": [["VH", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#Adapter#onCreateViewHolder_E@"], "Permissions": [], "Description": "This method calls @B_android#support#v7#widget#RecyclerView#Adapter#onCreateViewHolder_E@ to create a new @B_android#support#v7#widget#RecyclerView#ViewHolder_E@ and initializes some private fields to be used by RecyclerView.", "history": "added in version 22.0.0", "FullName": "VH createViewHolder (ViewGroup parent, int viewType)"}, "hasObservers()": {"Returns": [["boolean", "true if this adapter has observers"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if one or more observers are attached to this adapter.", "history": "added in version 22.0.0", "FullName": "boolean hasObservers ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "@B_android#support#v7#widget#RecyclerView#ViewHolder_E@", "ClassDesc": "Base class for an Adapter Adapters provide a binding from an app-specific data set to views that are displayed within a @B_android#support#v7#widget#RecyclerView_E@."}