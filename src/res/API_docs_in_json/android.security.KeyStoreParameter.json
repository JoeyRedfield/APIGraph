{"Functions": {"isEncryptionRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#KeyguardManager#isDeviceSecure_E@"], "Permissions": [], "Description": "Returns true if the @B_java#security#KeyStore_E@ entry must be encrypted at rest. This will protect the entry with the secure lock screen credential (e.g., password, PIN, or pattern). Note that encrypting the key at rest requires that the secure lock screen (e.g., password, PIN, pattern) is set up, otherwise key generation will fail. Moreover, this key will be deleted when the secure lock screen is disabled or reset (e.g., by the user or a Device Administrator). Finally, this key cannot be used until the user unlocks the secure lock screen after boot.", "history": "Added in API level 18 Deprecated in API level 23", "FullName": "public boolean isEncryptionRequired ()"}}, "Inheritance": [], "ClassName": "android.security.KeyStoreParameter", "ClassDesc": "Use @B_android#security#keystore#KeyProtection_E@ instead. This provides the optional parameters that can be specified for KeyStore entries that work with @B_java#security#KeyStore_E@ API using the AndroidKeyStore provider. The context passed in may be used to pop up some UI to ask the user to unlock or initialize the Android KeyStore facility. Any entries placed in the KeyStore may be retrieved later. Note that there is only one logical instance of the KeyStore per application UID so apps using the sharedUid facility will also share a KeyStore. Keys may be generated using the @B_java#security#KeyPairGenerator_E@ facility with a @B_android#security#KeyPairGeneratorSpec_E@ to specify the entry's alias. A self-signed X.509 certificate will be attached to generated entries, but that may be replaced at a later time by a certificate signed by a real Certificate Authority."}