{"Functions": {"setRandomizedEncryptionRequired(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether encryption using this key must be sufficiently randomized to produce different ciphertexts for the same plaintext every time. The formal cryptographic property being required is indistinguishability under chosen-plaintext attack (IND-CPA). This property is important because it mitigates several classes of weaknesses due to which ciphertext may leak information about plaintext. For example, if a given plaintext always produces the same ciphertext, an attacker may see the repeated ciphertexts and be able to deduce something about the plaintext. By default, IND-CPA is required. When IND-CPA is required: encryption/decryption transformation which do not offer IND-CPA, such as ECB with a symmetric encryption algorithm, or RSA encryption/decryption without padding, are prohibited; in block modes which use an IV, such as GCM, CBC, and CTR, caller-provided IVs are rejected when encrypting, to ensure that only random IVs are used. Before disabling this requirement, consider the following approaches instead: If you are generating a random IV for encryption and then initializing a Cipher using the IV, the solution is to let the Cipher generate a random IV instead. This will occur if the Cipher is initialized for encryption without an IV. The IV can then be queried via @B_javax#crypto#Cipher#getIV_E@. If you are generating a non-random IV (e.g., an IV derived from something not fully random, such as the name of the file being encrypted, or transaction ID, or password, or a device identifier), consider changing your design to use a random IV which will then be provided in addition to the ciphertext to the entities which need to decrypt the ciphertext. If you are using RSA encryption without padding, consider switching to encryption padding schemes which offer IND-CPA, such as PKCS#1 or OAEP.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setRandomizedEncryptionRequired (boolean required)"}, "setKeyValidityStart(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityEnd_E@"], "Permissions": [], "Description": "Sets the time instant before which the key is not yet valid. By default, the key is valid at any instant.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setKeyValidityStart (Date startDate)"}, "setEncryptionPaddings(java.lang.String...)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Value is @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_NONE_E@, @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_PKCS7_E@, @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_RSA_PKCS1_E@, or @B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_RSA_OAEP_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the set of padding schemes (e.g., PKCS7Padding, OAEPPadding, PKCS1Padding, NoPadding) with which the key can be used when encrypting/decrypting. Attempts to use the key with any other padding scheme will be rejected. This must be specified for keys which are used for encryption/decryption. For RSA private keys used by TLS/SSL servers to authenticate themselves to clients it is usually necessary to authorize the use of no/any padding (@B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_NONE_E@) and/or PKCS#1 encryption padding (@B_android#security#keystore#KeyProperties#ENCRYPTION_PADDING_RSA_PKCS1_E@). This is because RSA decryption is required by some cipher suites, and some stacks request decryption using no padding whereas others request PKCS#1 padding. See @B_android#security#keystore#KeyProperties_E@.ENCRYPTION_PADDING constants.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setEncryptionPaddings (String... paddings)"}, "setKeyValidityForConsumptionEnd(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityForOriginationEnd_E@"], "Permissions": [], "Description": "Sets the time instant after which the key is no longer valid for decryption and verification. By default, the key is valid at any instant.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setKeyValidityForConsumptionEnd (Date endDate)"}, "setInvalidatedByBiometricEnrollment(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this key should be invalidated on biometric enrollment. This applies only to keys which require user authentication (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@) and if no positive validity duration has been set (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidityDurationSeconds_E@, meaning the key is valid for biometric authentication only. By default, invalidateKey is true, so keys that are valid for biometric authentication only are irreversibly invalidated when a new biometric is enrolled, or when all existing biometrics are deleted. That may be changed by calling this method with invalidateKey set to false. Invalidating keys on enrollment of a new biometric or unenrollment of all biometrics improves security by ensuring that an unauthorized person who obtains the password can't gain the use of biometric-authenticated keys by enrolling their own biometric. However, invalidating keys makes key-dependent operations impossible, requiring some fallback procedure to authenticate the user and set up a new key.", "history": "Added in API level 24", "FullName": "public KeyGenParameterSpec.Builder setInvalidatedByBiometricEnrollment (boolean invalidateKey)"}, "setDigests(java.lang.String...)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Value is @B_android#security#keystore#KeyProperties#DIGEST_NONE_E@, @B_android#security#keystore#KeyProperties#DIGEST_MD5_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA1_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA224_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA256_E@, @B_android#security#keystore#KeyProperties#DIGEST_SHA384_E@, or @B_android#security#keystore#KeyProperties#DIGEST_SHA512_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the set of digests algorithms (e.g., SHA-256, SHA-384) with which the key can be used. Attempts to use the key with any other digest algorithm will be rejected. This must be specified for signing/verification keys and RSA encryption/decryption keys used with RSA OAEP padding scheme because these operations involve a digest. For HMAC keys, the default is the digest associated with the key algorithm (e.g., SHA-256 for key algorithm HmacSHA256). HMAC keys cannot be authorized for more than one digest. For private keys used for TLS/SSL client or server authentication it is usually necessary to authorize the use of no digest (@B_android#security#keystore#KeyProperties#DIGEST_NONE_E@). This is because TLS/SSL stacks typically generate the necessary digest(s) themselves and then use a private key to sign it. See @B_android#security#keystore#KeyProperties_E@.DIGEST constants.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setDigests (String... digests)"}, "setCertificateSerialNumber(java.math.BigInteger)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the serial number used for the self-signed certificate of the generated key pair. By default, the serial number is 1.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setCertificateSerialNumber (BigInteger serialNumber)"}, "setIsStrongBoxBacked(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this key should be protected by a StrongBox security chip.", "history": "Added in API level 28", "FullName": "public KeyGenParameterSpec.Builder setIsStrongBoxBacked (boolean isStrongBoxBacked)"}, "setAlgorithmParameterSpec(java.security.spec.AlgorithmParameterSpec)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "no returns description in source"]], "Parameters": [["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the algorithm-specific key generation parameters. For example, for RSA keys this may be an instance of @B_java#security#spec#RSAKeyGenParameterSpec_E@ whereas for EC keys this may be an instance of @B_java#security#spec#ECGenParameterSpec_E@. These key generation parameters must match other explicitly set parameters (if any), such as key size.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setAlgorithmParameterSpec (AlgorithmParameterSpec spec)"}, "build()": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Builds an instance of KeyGenParameterSpec.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec build ()"}, "setKeyValidityEnd(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityStart_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityForConsumptionEnd_E@", "@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityForOriginationEnd_E@"], "Permissions": [], "Description": "Sets the time instant after which the key is no longer valid. By default, the key is valid at any instant.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setKeyValidityEnd (Date endDate)"}, "setCertificateNotBefore(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the start of the validity period for the self-signed certificate of the generated key pair. By default, this date is Jan 1 1970.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setCertificateNotBefore (Date date)"}, "setSignaturePaddings(java.lang.String...)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Value is @B_android#security#keystore#KeyProperties#SIGNATURE_PADDING_RSA_PKCS1_E@, or @B_android#security#keystore#KeyProperties#SIGNATURE_PADDING_RSA_PSS_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the set of padding schemes (e.g., PSS, PKCS#1) with which the key can be used when signing/verifying. Attempts to use the key with any other padding scheme will be rejected. This must be specified for RSA keys which are used for signing/verification. See @B_android#security#keystore#KeyProperties_E@.SIGNATURE_PADDING constants.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setSignaturePaddings (String... paddings)"}, "setUnlockedDeviceRequired(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the keystore requires the screen to be unlocked before allowing decryption using this key. If this is set to true, any attempt to decrypt or sign using this key while the screen is locked will fail. A locked device requires a PIN, password, biometric, or other trusted factor to access. While the screen is locked, the key can still be used for encryption or signature verification.", "history": "Added in API level 28", "FullName": "public KeyGenParameterSpec.Builder setUnlockedDeviceRequired (boolean unlockedDeviceRequired)"}, "setBlockModes(java.lang.String...)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#lang#String_E@", "String: Value is @B_android#security#keystore#KeyProperties#BLOCK_MODE_ECB_E@, @B_android#security#keystore#KeyProperties#BLOCK_MODE_CBC_E@, @B_android#security#keystore#KeyProperties#BLOCK_MODE_CTR_E@, or @B_android#security#keystore#KeyProperties#BLOCK_MODE_GCM_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the set of block modes (e.g., GCM, CBC) with which the key can be used when encrypting/decrypting. Attempts to use the key with any other block modes will be rejected. This must be specified for symmetric encryption/decryption keys. See @B_android#security#keystore#KeyProperties_E@.BLOCK_MODE constants.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setBlockModes (String... blockModes)"}, "setUserAuthenticationValidityDurationSeconds(int)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["int", "int: duration in seconds or -1 if user authentication must take place for every use of the key. Value is -1 or greater"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@", "@B_android#hardware#biometrics#BiometricPrompt_E@", "@B_android#hardware#biometrics#BiometricPrompt#CryptoObject_E@", "@B_android#app#KeyguardManager_E@"], "Permissions": [], "Description": "Sets the duration of time (seconds) for which this key is authorized to be used after the user is successfully authenticated. This has effect if the key requires user authentication for its use (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@). By default, if user authentication is required, it must take place for every use of the key. Cryptographic operations involving keys which require user authentication to take place for every operation can only use biometric authentication. This is achieved by initializing a cryptographic operation (@B_java#security#Signature_E@, @B_javax#crypto#Cipher_E@, @B_javax#crypto#Mac_E@) with the key, wrapping it into a @B_android#hardware#biometrics#BiometricPrompt#CryptoObject_E@, invoking BiometricPrompt.authenticate with CryptoObject, and proceeding with the cryptographic operation only if the authentication flow succeeds. Cryptographic operations involving keys which are authorized to be used for a duration of time after a successful user authentication event can only use secure lock screen authentication. These cryptographic operations will throw @B_android#security#keystore#UserNotAuthenticatedException_E@ during initialization if the user needs to be authenticated to proceed. This situation can be resolved by the user unlocking the secure lock screen of the Android or by going through the confirm credential flow initiated by @B_android#app#KeyguardManager#createConfirmDeviceCredentialIntent_E@. Once resolved, initializing a new cryptographic operation using this key (or any other key which is authorized to be used for a fixed duration of time after user authentication) should succeed provided the user authentication flow completed successfully.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setUserAuthenticationValidityDurationSeconds (int seconds)"}, "setUserAuthenticationValidWhileOnBody(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean: if true, and if the device supports on-body detection, key will be invalidated when the device is removed from the user's body or when the authentication validity expires, whichever occurs first."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the key will remain authorized only until the device is removed from the user's body up to the limit of the authentication validity period (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidityDurationSeconds_E@ and @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@). Once the device has been removed from the user's body, the key will be considered unauthorized and the user will need to re-authenticate to use it. For keys without an authentication validity period this parameter has no effect. Similarly, on devices that do not have an on-body sensor, this parameter will have no effect; the device will always be considered to be \"on-body\" and the key will therefore remain authorized until the validity period ends.", "history": "Added in API level 24", "FullName": "public KeyGenParameterSpec.Builder setUserAuthenticationValidWhileOnBody (boolean remainsValid)"}, "setUserAuthenticationRequired(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidityDurationSeconds_E@", "@B_android#app#KeyguardManager#isDeviceSecure_E@", "@B_android#hardware#biometrics#BiometricManager#canAuthenticate_E@"], "Permissions": [], "Description": "Sets whether this key is authorized to be used only if the user has been authenticated. By default, the key is authorized to be used regardless of whether the user has been authenticated. When user authentication is required: The key can only be generated if secure lock screen is set up (see @B_android#app#KeyguardManager#isDeviceSecure_E@). Additionally, if the key requires that user authentication takes place for every use of the key (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationValidityDurationSeconds_E@), at least one biometric must be enrolled (see @B_android#hardware#biometrics#BiometricManager#canAuthenticate_E@). The use of the key must be authorized by the user by authenticating to this Android device using a subset of their secure lock screen credentials such as password/PIN/pattern or biometric. The key will become irreversibly invalidated once the secure lock screen is disabled (reconfigured to None, Swipe or other mode which does not authenticate the user) or when the secure lock screen is forcibly reset (e.g., by a Device Administrator). Additionally, if the key requires that user authentication takes place for every use of the key, it is also irreversibly invalidated once a new biometric is enrolled or once\\ * no more biometrics are enrolled, unless @B_android#security#keystore#KeyGenParameterSpec#Builder#setInvalidatedByBiometricEnrollment_E@ is used to allow validity after enrollment. Attempts to initialize cryptographic operations using such keys will throw @B_android#security#keystore#KeyPermanentlyInvalidatedException_E@. This authorization applies only to secret key and private key operations. Public key operations are not restricted.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setUserAuthenticationRequired (boolean required)"}, "setKeyValidityForOriginationEnd(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#security#keystore#KeyGenParameterSpec#Builder#setKeyValidityForConsumptionEnd_E@"], "Permissions": [], "Description": "Sets the time instant after which the key is no longer valid for encryption and signing. By default, the key is valid at any instant.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setKeyValidityForOriginationEnd (Date endDate)"}, "setCertificateSubject(javax.security.auth.x500.X500Principal)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_javax#security#auth#x500#X500Principal_E@", "X500Principal: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the subject used for the self-signed certificate of the generated key pair. By default, the subject is CN=fake.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setCertificateSubject (X500Principal subject)"}, "KeyGenParameterSpec.Builder(java.lang.String, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: alias of the entry in which the generated key will appear in Android KeyStore. Must not be empty.This value must never be null."], ["int", "int: set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used. Attempts to use the key for any other purpose will be rejected. If the set of purposes for which the key can be used does not contain KeyProperties.PURPOSE_SIGN, the self-signed certificate generated by KeyPairGenerator of AndroidKeyStore provider will contain an invalid signature. This is OK if the certificate is only used for obtaining the public key from Android KeyStore. See KeyProperties.PURPOSE flags. Value is either 0 or combination of PURPOSE_ENCRYPT, PURPOSE_DECRYPT, PURPOSE_SIGN, PURPOSE_VERIFY or PURPOSE_WRAP_KEY."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of the Builder.", "history": "added in API level 23", "FullName": "public KeyGenParameterSpec.Builder (String keystoreAlias, int purposes)"}, "setUserConfirmationRequired(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this key is authorized to be used only for messages confirmed by the user. Confirmation is separate from user authentication (see @B_android#security#keystore#KeyGenParameterSpec#Builder#setUserAuthenticationRequired_E@). Keys can be created that require confirmation but not user authentication, or user authentication but not confirmation, or both. Confirmation verifies that some user with physical possession of the device has approved a displayed message. User authentication verifies that the correct user is present and has authenticated. This authorization applies only to secret key and private key operations. Public key operations are not restricted. See @B_android#security#ConfirmationPrompt_E@ class for more details about user confirmations.", "history": "Added in API level 28", "FullName": "public KeyGenParameterSpec.Builder setUserConfirmationRequired (boolean required)"}, "setKeySize(int)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the size (in bits) of the key to be generated. For instance, for RSA keys this sets the modulus size, for EC keys this selects a curve with a matching field size, and for symmetric keys this sets the size of the bitstring which is their key material. The default key size is specific to each key algorithm. If key size is not set via this method, it should be looked up from the algorithm-specific parameters (if any) provided via @B_android#security#keystore#KeyGenParameterSpec#Builder#setAlgorithmParameterSpec_E@.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setKeySize (int keySize)"}, "setAttestationChallenge(byte[])": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether an attestation certificate will be generated for this key pair, and what challenge value will be placed in the certificate. The attestation certificate chain can be retrieved with with @B_java#security#KeyStore#getCertificateChain_E@. If attestationChallenge is not null, the public key certificate for this key pair will contain an extension that describes the details of the key's configuration and authorizations, including the attestationChallenge value. If the key is in secure hardware, and if the secure hardware supports attestation, the certificate will be signed by a chain of certificates rooted at a trustworthy CA key. Otherwise the chain will be rooted at an untrusted certificate. The purpose of the challenge value is to enable relying parties to verify that the key was created in response to a specific request. If attestation is desired but no challenged is needed, any non-null value may be used, including an empty byte array. If attestationChallenge is null, and this spec is used to generate an asymmetric (RSA or EC) key pair, the public key certificate will be self-signed if the key has purpose @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@. If the key does not have purpose @B_android#security#keystore#KeyProperties#PURPOSE_SIGN_E@, it is not possible to use the key to sign a certificate, so the public key certificate will contain a dummy signature. Symmetric keys, such as AES and HMAC keys, do not have public key certificates. If a @B_android#security#keystore#KeyGenParameterSpec#getAttestationChallenge_E@ returns non-null and the spec is used to generate a symmetric (AES or HMAC) key, @B_javax#crypto#KeyGenerator#generateKey_E@ will throw @B_java#security#InvalidAlgorithmParameterException_E@.", "history": "Added in API level 24", "FullName": "public KeyGenParameterSpec.Builder setAttestationChallenge (byte[] attestationChallenge)"}, "setCertificateNotAfter(java.util.Date)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["@B_java#util#Date_E@", "Date: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the end of the validity period for the self-signed certificate of the generated key pair. By default, this date is Jan 1 2048.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder setCertificateNotAfter (Date date)"}, "setUserPresenceRequired(boolean)": {"Returns": [["@B_android#security#keystore#KeyGenParameterSpec#Builder_E@", "This value will never be null."]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether a test of user presence is required to be performed between the Signature.initSign() and Signature.sign() method calls. It requires that the KeyStore implementation have a direct way to validate the user presence for example a KeyStore hardware backed strongbox can use a button press that is observable in hardware. A test for user presence is tangential to authentication. The test can be part of an authentication step as long as this step can be validated by the hardware protecting the key and cannot be spoofed. For example, a physical button press can be used as a test of user presence if the other pins connected to the button are not able to simulate a button press.There must be no way for the primary processor to fake a button press, or that button must not be used as a test of user presence.", "history": "Added in API level 28", "FullName": "public KeyGenParameterSpec.Builder setUserPresenceRequired (boolean required)"}, "KeyGenParameterSpec.Builder(java.lang.String,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: alias of the entry in which the generated key will appear in Android KeyStore. Must not be empty. This value must never be null."], ["int", "int: set of purposes (e.g., encrypt, decrypt, sign) for which the key can be used. Attempts to use the key for any other purpose will be rejected. If the set of purposes for which the key can be used does not contain KeyProperties#PURPOSE_SIGN, the self-signed certificate generated by KeyPairGenerator of AndroidKeyStore provider will contain an invalid signature. This is OK if the certificate is only used for obtaining the public key from Android KeyStore. See KeyProperties.PURPOSE flags. Value is either 0 or a combination of KeyProperties.PURPOSE_ENCRYPT, KeyProperties.PURPOSE_DECRYPT, KeyProperties.PURPOSE_SIGN, KeyProperties.PURPOSE_VERIFY, and KeyProperties.PURPOSE_WRAP_KEY"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance of the Builder.", "history": "Added in API level 23", "FullName": "public KeyGenParameterSpec.Builder (String keystoreAlias, int purposes)"}}, "Inheritance": [], "ClassName": "android.security.keystore.KeyGenParameterSpec.Builder", "ClassDesc": "Builder of @B_android#security#keystore#KeyGenParameterSpec_E@ instances."}