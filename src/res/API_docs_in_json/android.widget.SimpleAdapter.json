{"Functions": {"SimpleAdapter(android.content.Context,java.util.List<?extendsjava.util.Map<java.lang.String,?>>,int,java.lang.String[],int[])": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context where the View associated with this SimpleAdapter is running"], ["@B_java#util#List_E@", "List: A List of Maps. Each entry in the List corresponds to one row in the list. The Maps contain the data for each row, and should include all the entries specified in \"from\""], ["int", "int: Resource identifier of a view layout that defines the views for this list item. The layout file should include at least those named views defined in \"to\""], ["@B_java#lang#String_E@", "String: A list of column names that will be added to the Map associated with each item."], ["int[]", "int: The views that should display column in the \"from\" parameter. These should all be TextViews. The first N views in this list are given the values of the first N columns in the from parameter."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor", "history": "Added in API level 1", "FullName": "public SimpleAdapter (Context context, List<? extends Map<String, ?>> data, int resource, String[] from, int[] to)"}, "setViewImage(android.widget.ImageView, int)": {"Returns": [], "Parameters": [["@B_android#widget#ImageView_E@", "ImageView: ImageView to receive an image"], ["int", "int: the value retrieved from the data set"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#setViewImage_E@"], "Permissions": [], "Description": "Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. This method is called instead of @B_android#widget#SimpleAdapter#setViewImage_E@ if the supplied data is an int or Integer.", "history": "added in API level 1", "FullName": "public void setViewImage (ImageView v, int value)"}, "setViewText(android.widget.TextView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#widget#TextView_E@", "TextView: TextView to receive text"], ["@B_java#lang#String_E@", "String: the text to be set for the TextView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by bindView() to set the text for a TextView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to a TextView.", "history": "Added in API level 1", "FullName": "public void setViewText (TextView v, String text)"}, "getItem(int)": {"Returns": [["@B_java#lang#Object_E@", "The data at the specified position."]], "Parameters": [["int", "int: Position of the item whose data we want within the adapter's data set."]], "Throws": [], "SeeAlso": ["@B_android#widget#Adapter#getItem_E@"], "Permissions": [], "Description": "Get the data item associated with the specified position in the data set.", "history": "Added in API level 1", "FullName": "public Object getItem (int position)"}, "getViewBinder()": {"Returns": [["@B_android#widget#SimpleAdapter#ViewBinder_E@", "a ViewBinder or null if the binder does not exist"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#setViewBinder_E@"], "Permissions": [], "Description": "Returns the @B_android#widget#SimpleAdapter#ViewBinder_E@ used to bind data to views.", "history": "Added in API level 1", "FullName": "public SimpleAdapter.ViewBinder getViewBinder ()"}, "setViewBinder(android.widget.SimpleAdapter.ViewBinder)": {"Returns": [], "Parameters": [["@B_android#widget#SimpleAdapter#ViewBinder_E@", "SimpleAdapter.ViewBinder: the binder used to bind data to views, can be null to remove the existing binder"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#getViewBinder_E@"], "Permissions": [], "Description": "Sets the binder used to bind data to views.", "history": "Added in API level 1", "FullName": "public void setViewBinder (SimpleAdapter.ViewBinder viewBinder)"}, "getDropDownViewTheme()": {"Returns": [["@B_android#content#res#Resources#Theme_E@", "the @B_android#content#res#Resources#Theme_E@ against which drop-down views are inflated, or null if one has not been explicitly set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value previously set by a call to @B_android#widget#ThemedSpinnerAdapter#setDropDownViewTheme_E@.", "history": "Added in API level 23", "FullName": "public Resources.Theme getDropDownViewTheme ()"}, "getCount()": {"Returns": [["int", "Count of items."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#Adapter#getCount_E@"], "Permissions": [], "Description": "How many items are in the data set represented by this Adapter.", "history": "Added in API level 1", "FullName": "public int getCount ()"}, "setViewImage(android.widget.ImageView,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#widget#ImageView_E@", "ImageView: ImageView to receive an image"], ["@B_java#lang#String_E@", "String: the value retrieved from the data set"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#setViewImage_E@"], "Permissions": [], "Description": "Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. By default, the value will be treated as an image resource. If the value cannot be used as an image resource, the value is used as an image Uri. This method is called instead of @B_android#widget#SimpleAdapter#setViewImage_E@ if the supplied data is not an int or Integer.", "history": "Added in API level 1", "FullName": "public void setViewImage (ImageView v, String value)"}, "setDropDownViewResource(int)": {"Returns": [], "Parameters": [["int", "int: the layout resource defining the drop down views"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#getDropDownView_E@"], "Permissions": [], "Description": "Sets the layout resource to create the drop down views.", "history": "Added in API level 1", "FullName": "public void setDropDownViewResource (int resource)"}, "getFilter()": {"Returns": [["@B_android#widget#Filter_E@", "a filter used to constrain data"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a filter that can be used to constrain data with a filtering pattern. This method is usually implemented by @B_android#widget#Adapter_E@ classes.", "history": "Added in API level 1", "FullName": "public Filter getFilter ()"}, "getItemId(int)": {"Returns": [["long", "The id of the item at the specified position."]], "Parameters": [["int", "int: The position of the item within the adapter's data set whose row id we want."]], "Throws": [], "SeeAlso": ["@B_android#widget#Adapter#getItemId_E@"], "Permissions": [], "Description": "Get the row id associated with the specified position in the list.", "history": "Added in API level 1", "FullName": "public long getItemId (int position)"}, "setDropDownViewTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme against which to inflate drop-down views or null to use the theme from the adapter's context"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#getDropDownView_E@"], "Permissions": [], "Description": "Sets the @B_android#content#res#Resources#Theme_E@ against which drop-down views are inflated. By default, drop-down views are inflated against the theme of the @B_android#content#Context_E@ passed to the adapter's constructor.", "history": "Added in API level 23", "FullName": "public void setDropDownViewTheme (Resources.Theme theme)"}, "setViewImage(android.widget.ImageView,int)": {"Returns": [], "Parameters": [["@B_android#widget#ImageView_E@", "ImageView: ImageView to receive an image"], ["int", "int: the value retrieved from the data set"]], "Throws": [], "SeeAlso": ["@B_android#widget#SimpleAdapter#setViewImage_E@"], "Permissions": [], "Description": "Called by bindView() to set the image for an ImageView but only if there is no existing ViewBinder or if the existing ViewBinder cannot handle binding to an ImageView. This method is called instead of @B_android#widget#SimpleAdapter#setViewImage_E@ if the supplied data is an int or Integer.", "history": "Added in API level 1", "FullName": "public void setViewImage (ImageView v, int value)"}, "getView(int,android.view.View,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "A View corresponding to the data at the specified position."]], "Parameters": [["int", "int: The position of the item within the adapter's data set of the item whose view we want."], ["@B_android#view#View_E@", "View: The old view to reuse, if possible. Note: You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view. Heterogeneous lists can specify their number of view types, so that this View is always of the right type (see @B_android#widget#BaseAdapter#getViewTypeCount_E@ and @B_android#widget#BaseAdapter#getItemViewType_E@)."], ["@B_android#view#ViewGroup_E@", "ViewGroup: The parent that this view will eventually be attached to"]], "Throws": [], "SeeAlso": ["@B_android#widget#Adapter#getView_E@"], "Permissions": [], "Description": "Get a View that displays the data at the specified position in the data set. You can either create a View manually or inflate it from an XML layout file. When the View is inflated, the parent View (GridView, ListView...) will apply default layout parameters unless you use @B_android#view#LayoutInflater#inflate_E@ to specify a root view and to prevent attachment to the root.", "history": "Added in API level 1", "FullName": "public View getView (int position, View convertView, ViewGroup parent)"}, "getDropDownView(int,android.view.View,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "a @B_android#view#View_E@ corresponding to the data at the specified position."]], "Parameters": [["int", "int: index of the item whose view we want."], ["@B_android#view#View_E@", "View: the old view to reuse, if possible. Note: You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view."], ["@B_android#view#ViewGroup_E@", "ViewGroup: the parent that this view will eventually be attached to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a @B_android#view#View_E@ that displays in the drop down popup the data at the specified position in the data set.", "history": "Added in API level 1", "FullName": "public View getDropDownView (int position, View convertView, ViewGroup parent)"}}, "Inheritance": ["@B_android#widget#BaseAdapter_E@"], "ClassName": "android.widget.SimpleAdapter", "ClassDesc": "An easy adapter to map static data to views defined in an XML file. You can specify the data backing the list as an ArrayList of Maps. Each entry in the ArrayList corresponds to one row in the list. The Maps contain the data for each row. You also specify an XML file that defines the views used to display the row, and a mapping from keys in the Map to specific views. Binding data to views occurs in two phases. First, if a @B_android#widget#SimpleAdapter#ViewBinder_E@ is available, @B_android#widget#SimpleAdapter#ViewBinder#setViewValue_E@ is invoked. If the returned value is true, binding has occurred. If the returned value is false, the following views are then tried in order: A view that implements Checkable (e.g. CheckBox). The expected bind value is a boolean. TextView. The expected bind value is a string and @B_android#widget#SimpleAdapter#setViewText_E@ is invoked. ImageView. The expected bind value is a resource id or a string and @B_android#widget#SimpleAdapter#setViewImage_E@ or @B_android#widget#SimpleAdapter#setViewImage_E@ is invoked. If no appropriate binding can be found, an @B_java#lang#IllegalStateException_E@ is thrown."}