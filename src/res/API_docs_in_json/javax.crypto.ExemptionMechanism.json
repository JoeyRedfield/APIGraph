{"Functions": {"genExemptionBlob()": {"Returns": [["byte[]", "the new buffer with the result key blob."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this exemption mechanism is in a wrong state (e.g., has not been initialized)."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob.", "history": "Added in API level 1", "FullName": "public final byte[] genExemptionBlob ()"}, "ExemptionMechanism(javax.crypto.ExemptionMechanismSpi,java.security.Provider,java.lang.String)": {"Returns": [], "Parameters": [["@B_javax#crypto#ExemptionMechanismSpi_E@", "ExemptionMechanismSpi: the delegate"], ["@B_java#security#Provider_E@", "Provider: the provider"], ["@B_java#lang#String_E@", "String: the exemption mechanism"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a ExemptionMechanism object.", "history": "Added in API level 1", "FullName": "protected ExemptionMechanism (ExemptionMechanismSpi exmechSpi, Provider provider, String mechanism)"}, "init(java.security.Key,java.security.spec.AlgorithmParameterSpec)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"], ["@B_java#security#spec#AlgorithmParameterSpec_E@", "AlgorithmParameterSpec: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.", "history": "Added in API level 1", "FullName": "public final void init (Key key, AlgorithmParameterSpec params)"}, "getInstance(java.lang.String,java.security.Provider)": {"Returns": [["@B_javax#crypto#ExemptionMechanism_E@", "the new ExemptionMechanism object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard exemption mechanism names."], ["@B_java#security#Provider_E@", "Provider: the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if an ExemptionMechanismSpi implementation for the specified algorithm is not available from the specified Provider object."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified Provider object is returned. Note that the specified Provider object does not have to be registered in the provider list.", "history": "Added in API level 1", "FullName": "public static final ExemptionMechanism getInstance (String algorithm, Provider provider)"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the provider of this ExemptionMechanism object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the provider of this ExemptionMechanism object.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "getInstance(java.lang.String, java.lang.String)": {"Returns": [["@B_javax#crypto#ExemptionMechanism_E@", "the new ExemptionMechanism object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard exemption mechanism names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if an ExemptionMechanismSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "added in API level 1", "FullName": "public static final ExemptionMechanism getInstance (String algorithm, String provider)"}, "isCryptoAllowed(java.security.Key)": {"Returns": [["boolean", "whether the result blob of the same key has been generated successfully by this exemption mechanism; false if key is null."]], "Parameters": [["@B_java#security#Key_E@", "Key: the key the crypto is going to use."]], "Throws": [["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered while determining whether the result blob has been generated successfully by this exemption mechanism object."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the result blob has been generated successfully by this exemption mechanism. The method also makes sure that the key passed in is the same as the one this exemption mechanism used in initializing and generating phases.", "history": "Added in API level 1", "FullName": "public final boolean isCryptoAllowed (Key key)"}, "genExemptionBlob(byte[],int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this exemption mechanism is in a wrong state (e.g., has not been initialized)."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#ExemptionMechanism#getOutputSize_E@ to determine how big the output buffer should be.", "history": "Added in API level 1", "FullName": "public final int genExemptionBlob (byte[] output, int outputOffset)"}, "init(java.security.Key)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key. If this exemption mechanism requires any algorithm parameters that cannot be derived from the given key, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidKeyException is raised.", "history": "Added in API level 1", "FullName": "public final void init (Key key)"}, "getOutputSize(int)": {"Returns": [["int", "the required output buffer size (in bytes)"]], "Parameters": [["int", "int: the input length (in bytes)"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this exemption mechanism is in a wrong state (e.g., has not yet been initialized)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the length in bytes that an output buffer would need to be in order to hold the result of the next @B_javax#crypto#ExemptionMechanism#genExemptionBlob_E@ operation, given the input length inputLen (in bytes). The actual output length of the next @B_javax#crypto#ExemptionMechanism#genExemptionBlob_E@ call may be smaller than the length returned by this method.", "history": "Added in API level 1", "FullName": "public final int getOutputSize (int inputLen)"}, "getInstance(java.lang.String)": {"Returns": [["@B_javax#crypto#ExemptionMechanism_E@", "the new ExemptionMechanism object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard exemption mechanism names."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if no Provider supports an ExemptionMechanismSpi implementation for the specified algorithm."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. This method traverses the list of registered security Providers, starting with the most preferred Provider. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the first Provider that supports the specified algorithm is returned. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final ExemptionMechanism getInstance (String algorithm)"}, "genExemptionBlob(byte[], int)": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"], ["int", "int: the offset in output where the result is stored"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this exemption mechanism is in a wrong state (e.g., has not been initialized)."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob, and stores the result in the output buffer, starting at outputOffset inclusive. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#ExemptionMechanism#getOutputSize_E@ to determine how big the output buffer should be.", "history": "added in API level 1", "FullName": "public final int genExemptionBlob (byte[] output, int outputOffset)"}, "init(java.security.Key,java.security.AlgorithmParameters)": {"Returns": [], "Parameters": [["@B_java#security#Key_E@", "Key: the key for this exemption mechanism"], ["@B_java#security#AlgorithmParameters_E@", "AlgorithmParameters: the algorithm parameters"]], "Throws": [["@B_java#security#InvalidKeyException_E@", "if the given key is inappropriate for this exemption mechanism."], ["@B_java#security#InvalidAlgorithmParameterException_E@", "if the given algorithm parameters are inappropriate for this exemption mechanism."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of initializing."]], "SeeAlso": [], "Permissions": [], "Description": "Initializes this exemption mechanism with a key and a set of algorithm parameters. If this exemption mechanism requires any algorithm parameters and params is null, the underlying exemption mechanism implementation is supposed to generate the required parameters itself (using provider-specific default values); in the case that algorithm parameters must be specified by the caller, an InvalidAlgorithmParameterException is raised.", "history": "Added in API level 1", "FullName": "public final void init (Key key, AlgorithmParameters params)"}, "getInstance(java.lang.String,java.lang.String)": {"Returns": [["@B_javax#crypto#ExemptionMechanism_E@", "the new ExemptionMechanism object."]], "Parameters": [["@B_java#lang#String_E@", "String: the standard name of the requested exemption mechanism. See the ExemptionMechanism section in the Java Cryptography Architecture Standard Algorithm Name Documentation for information about standard exemption mechanism names."], ["@B_java#lang#String_E@", "String: the name of the provider."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if algorithm is null."], ["@B_java#security#NoSuchAlgorithmException_E@", "if an ExemptionMechanismSpi implementation for the specified algorithm is not available from the specified provider."], ["@B_java#security#NoSuchProviderException_E@", "if the specified provider is not registered in the security provider list."], ["@B_java#lang#IllegalArgumentException_E@", "if the provider is null or empty."]], "SeeAlso": ["@B_java#security#Provider_E@"], "Permissions": [], "Description": "Returns an ExemptionMechanism object that implements the specified exemption mechanism algorithm. A new ExemptionMechanism object encapsulating the ExemptionMechanismSpi implementation from the specified provider is returned. The specified provider must be registered in the security provider list. Note that the list of registered providers may be retrieved via the @B_java#security#Security#getProviders_E@ method.", "history": "Added in API level 1", "FullName": "public static final ExemptionMechanism getInstance (String algorithm, String provider)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures that the key stored away by this ExemptionMechanism object will be wiped out when there are no more references to it.", "history": "added in API level 1", "FullName": "void finalize ()"}, "genExemptionBlob(byte[])": {"Returns": [["int", "the number of bytes stored in output"]], "Parameters": [["byte[]", "byte: the buffer for the result"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this exemption mechanism is in a wrong state (e.g., has not been initialized)."], ["@B_javax#crypto#ShortBufferException_E@", "if the given output buffer is too small to hold the result."], ["@B_javax#crypto#ExemptionMechanismException_E@", "if problem(s) encountered in the process of generating."]], "SeeAlso": [], "Permissions": [], "Description": "Generates the exemption mechanism key blob, and stores the result in the output buffer. If the output buffer is too small to hold the result, a ShortBufferException is thrown. In this case, repeat this call with a larger output buffer. Use @B_javax#crypto#ExemptionMechanism#getOutputSize_E@ to determine how big the output buffer should be.", "history": "Added in API level 1", "FullName": "public final int genExemptionBlob (byte[] output)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the exemption mechanism name of this ExemptionMechanism object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the exemption mechanism name of this ExemptionMechanism object. This is the same name that was specified in one of the getInstance calls that created this ExemptionMechanism object.", "history": "Added in API level 1", "FullName": "public final String getName ()"}}, "Inheritance": [], "ClassName": "javax.crypto.ExemptionMechanism", "ClassDesc": "This class provides the functionality of an exemption mechanism, examples of which are Applications or applets that use an exemption mechanism may be granted stronger encryption capabilities than those which don't."}