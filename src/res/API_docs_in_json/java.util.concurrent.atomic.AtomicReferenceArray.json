{"Functions": {"accumulateAndGet(int,E,java.util.function.BinaryOperator<E>)": {"Returns": [["E", "the updated value"]], "Parameters": [["int", "int: the index"], ["E", "E: the update value"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final E accumulateAndGet (int i, E x, BinaryOperator<E> accumulatorFunction)"}, "lazySet(int,E)": {"Returns": [], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (int i, E newValue)"}, "set(int,E)": {"Returns": [], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "Added in API level 1", "FullName": "public final void set (int i, E newValue)"}, "getAndSet(int, E)": {"Returns": [["E", "the previous value"]], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "added in API level 1", "FullName": "public final E getAndSet (int i, E newValue)"}, "compareAndSet(int, E, E)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["E", "E: the expected value"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (int i, E expect, E update)"}, "updateAndGet(int,java.util.function.UnaryOperator<E>)": {"Returns": [["E", "the updated value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final E updateAndGet (int i, UnaryOperator<E> updateFunction)"}, "lazySet(int, E)": {"Returns": [], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets the element at position i to the given value.", "history": "added in API level 9", "FullName": "public final void lazySet (int i, E newValue)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current values of array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current values of array.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "compareAndSet(int,E,E)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["int", "int: the index"], ["E", "E: the expected value"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (int i, E expect, E update)"}, "AtomicReferenceArray(int)": {"Returns": [], "Parameters": [["int", "int: the length of the array"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicReferenceArray of the given length, with all elements initially null.", "history": "Added in API level 1", "FullName": "public AtomicReferenceArray (int length)"}, "get(int)": {"Returns": [["E", "the current value"]], "Parameters": [["int", "int: the index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value at position i.", "history": "Added in API level 1", "FullName": "public final E get (int i)"}, "getAndSet(int,E)": {"Returns": [["E", "the previous value"]], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final E getAndSet (int i, E newValue)"}, "getAndAccumulate(int,E,java.util.function.BinaryOperator<E>)": {"Returns": [["E", "the previous value"]], "Parameters": [["int", "int: the index"], ["E", "E: the update value"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value at index i as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final E getAndAccumulate (int i, E x, BinaryOperator<E> accumulatorFunction)"}, "length()": {"Returns": [["int", "the length of the array"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of the array.", "history": "Added in API level 1", "FullName": "public final int length ()"}, "AtomicReferenceArray(E[])": {"Returns": [], "Parameters": [["E[]", "E: the array to copy elements from"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if array is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicReferenceArray with the same length as, and all elements copied from, the given array.", "history": "Added in API level 1", "FullName": "public AtomicReferenceArray (E[] array)"}, "getAndUpdate(int,java.util.function.UnaryOperator<E>)": {"Returns": [["E", "the previous value"]], "Parameters": [["int", "int: the index"], ["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the element at index i with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final E getAndUpdate (int i, UnaryOperator<E> updateFunction)"}, "weakCompareAndSet(int,E,E)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["E", "E: the expected value"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, E expect, E update)"}, "set(int, E)": {"Returns": [], "Parameters": [["int", "int: the index"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the element at position i to the given value.", "history": "added in API level 1", "FullName": "public final void set (int i, E newValue)"}, "weakCompareAndSet(int, E, E)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["int", "int: the index"], ["E", "E: the expected value"], ["E", "E: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the element at position i to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (int i, E expect, E update)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicReferenceArray<E>", "ClassDesc": "An array of object references in which elements may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables."}