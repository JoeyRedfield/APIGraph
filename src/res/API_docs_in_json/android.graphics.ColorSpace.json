{"Functions": {"toXyz(float, float, float)": {"Returns": [["float[]", "A new array of 3 floats, containing tristimulus XYZ values"]], "Parameters": [["float", "float: The first component of the value to convert from (typically R in RGB)"], ["float", "float: The second component of the value to convert from (typically G in RGB)"], ["float", "float: The third component of the value to convert from (typically B in RGB)"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#toXyz_E@", "@B_android#graphics#ColorSpace#fromXyz_E@"], "Permissions": [], "Description": "Converts a color value from this color space's model to tristimulus CIE XYZ values. If the color model of this color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, it is assumed that the target CIE XYZ space uses a @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ standard illuminant. This method is a convenience for color spaces with a model of 3 components (@B_android#graphics#ColorSpace#Model#RGB_E@ or @B_android#graphics#ColorSpace#Model#LAB_E@ for instance). With color spaces using fewer or more components, use @B_android#graphics#ColorSpace#toXyz_E@ instead.", "history": "added in API level 26", "FullName": "public float[] toXyz (float r, float g, float b)"}, "getMinValue(int)": {"Returns": [["float", "A floating point value less than @B_android#graphics#ColorSpace#getMaxValue_E@"]], "Parameters": [["int", "int: The index of the component Value is between 0 and 3 inclusive"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#getMaxValue_E@", "@B_android#graphics#ColorSpace#Model#getComponentCount_E@"], "Permissions": [], "Description": "Returns the minimum valid value for the specified component of this color space's color model.", "history": "Added in API level 26", "FullName": "public abstract float getMinValue (int component)"}, "connect(android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)": {"Returns": [["@B_android#graphics#ColorSpace#Connector_E@", "A non-null connector between the specified color space and sRGB"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors from This value must never be null."], ["@B_android#graphics#ColorSpace#RenderIntent_E@", "ColorSpace.RenderIntent: The render intent to map colors from the source to the destination This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#connect_E@"], "Permissions": [], "Description": "Connects the specified color spaces to sRGB. If the source color space does not use CIE XYZ D65 as its profile connection space, the two spaces are chromatically adapted to use the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ as needed. If the source is the sRGB color space, an optimized connector is returned to avoid unnecessary computations and loss of precision.", "history": "Added in API level 26", "FullName": "public static ColorSpace.Connector connect (ColorSpace source, ColorSpace.RenderIntent intent)"}, "fromXyz(float,float,float)": {"Returns": [["float[]", "A new array whose size is equal to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@ This value will never be null."]], "Parameters": [["float", "float: The X component of the color value"], ["float", "float: The Y component of the color value"], ["float", "float: The Z component of the color value"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#fromXyz_E@", "@B_android#graphics#ColorSpace#toXyz_E@"], "Permissions": [], "Description": "Converts tristimulus values from the CIE XYZ space to this color space's color model.", "history": "Added in API level 26", "FullName": "public float[] fromXyz (float x, float y, float z)"}, "getComponentCount()": {"Returns": [["int", "An integer between 1 and 4 Value is between 1 and 4 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Model_E@", "@B_android#graphics#ColorSpace#getModel_E@"], "Permissions": [], "Description": "Returns the number of components that form a color value according to this color space's color model.", "history": "Added in API level 26", "FullName": "public int getComponentCount ()"}, "adapt(android.graphics.ColorSpace, float[])": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A @B_android#graphics#ColorSpace_E@ instance with the same name, primaries, transfer functions and range as the specified color space"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to chromatically adapt"], ["float[]", "float: The new white point"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Adaptation_E@", "@B_android#graphics#ColorSpace#adapt_E@"], "Permissions": [], "Description": "Performs the chromatic adaptation of a color space from its native white point to the specified white point. The chromatic adaptation is performed using the @B_android#graphics#ColorSpace#Adaptation#BRADFORD_E@ matrix. The color space returned by this method always has an ID of @B_android#graphics#ColorSpace#MIN_ID_E@.", "history": "added in API level 26", "FullName": "public static ColorSpace adapt (ColorSpace colorSpace, float[] whitePoint)"}, "getMaxValue(int)": {"Returns": [["float", "A floating point value greater than @B_android#graphics#ColorSpace#getMinValue_E@"]], "Parameters": [["int", "int: The index of the component Value is between 0 and 3 inclusive"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#getMinValue_E@", "@B_android#graphics#ColorSpace#Model#getComponentCount_E@"], "Permissions": [], "Description": "Returns the maximum valid value for the specified component of this color space's color model.", "history": "Added in API level 26", "FullName": "public abstract float getMaxValue (int component)"}, "getModel()": {"Returns": [["@B_android#graphics#ColorSpace#Model_E@", "A non-null @B_android#graphics#ColorSpace#Model_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Model_E@", "@B_android#graphics#ColorSpace#getComponentCount_E@"], "Permissions": [], "Description": "Return the color model of this color space.", "history": "Added in API level 26", "FullName": "public ColorSpace.Model getModel ()"}, "isSrgb()": {"Returns": [["boolean", "True if this color space is the sRGB color space (or a close approximation), false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this color space is the sRGB color space or equivalent to the sRGB color space. A color space is considered sRGB if it meets all the following conditions: Its color model is @B_android#graphics#ColorSpace#Model#RGB_E@. Its primaries are within 1e-3 of the true @B_android#graphics#ColorSpace#Named#SRGB_E@ primaries. Its white point is within 1e-3 of the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D65_E@. Its opto-electronic transfer function is not linear. Its electro-optical transfer function is not linear. Its transfer functions yield values within 1e-3 of @B_android#graphics#ColorSpace#Named#SRGB_E@. Its range is \\([0..1]\\). This method always returns true for @B_android#graphics#ColorSpace#Named#SRGB_E@.", "history": "Added in API level 26", "FullName": "public boolean isSrgb ()"}, "adapt(android.graphics.ColorSpace,float[])": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A @B_android#graphics#ColorSpace_E@ instance with the same name, primaries, transfer functions and range as the specified color space This value will never be null."]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to chromatically adapt This value must never be null."], ["float[]", "float: The new white point This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Adaptation_E@", "@B_android#graphics#ColorSpace#adapt_E@"], "Permissions": [], "Description": "Performs the chromatic adaptation of a color space from its native white point to the specified white point. The chromatic adaptation is performed using the @B_android#graphics#ColorSpace#Adaptation#BRADFORD_E@ matrix. The color space returned by this method always has an ID of @B_android#graphics#ColorSpace#MIN_ID_E@.", "history": "Added in API level 26", "FullName": "public static ColorSpace adapt (ColorSpace colorSpace, float[] whitePoint)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 26", "FullName": "public boolean equals (Object o)"}, "getId()": {"Returns": [["int", "An integer between @B_android#graphics#ColorSpace#MIN_ID_E@ and @B_android#graphics#ColorSpace#MAX_ID_E@ Value is between MIN_ID and MAX_ID inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ID of this color space. Positive IDs match the color spaces enumerated in @B_android#graphics#ColorSpace#Named_E@. A negative ID indicates a color space created by calling one of the public constructors.", "history": "Added in API level 26", "FullName": "public int getId ()"}, "fromXyz(float, float, float)": {"Returns": [["float[]", "A new array whose size is equal to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@"]], "Parameters": [["float", "float: The X component of the color value"], ["float", "float: The Y component of the color value"], ["float", "float: The Z component of the color value"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#fromXyz_E@", "@B_android#graphics#ColorSpace#toXyz_E@"], "Permissions": [], "Description": "Converts tristimulus values from the CIE XYZ space to this color space's color model.", "history": "added in API level 26", "FullName": "public float[] fromXyz (float x, float y, float z)"}, "isWideGamut()": {"Returns": [["boolean", "True if this color space is a wide-gamut color space, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this color space is a wide-gamut color space. An RGB color space is wide-gamut if its gamut entirely contains the @B_android#graphics#ColorSpace#Named#SRGB_E@ gamut and if the area of its gamut is 90% of greater than the area of the @B_android#graphics#ColorSpace#Named#NTSC_1953_E@ gamut.", "history": "Added in API level 26", "FullName": "public abstract boolean isWideGamut ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "A non-null String of length >= 1"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this color space. The name is never null and contains always at least 1 character. Color space names are recommended to be unique but are not guaranteed to be. There is no defined format but the name usually falls in one of the following categories: Generic names used to identify color spaces in non-RGB color models. For instance: @B_android#graphics#ColorSpace#Named#CIE_LAB_E@. Names tied to a particular specification. For instance: @B_android#graphics#ColorSpace#Named#SRGB_E@ or @B_android#graphics#ColorSpace#Named#ACES_E@. Ad-hoc names, often generated procedurally or by the user during a calibration workflow. These names often contain the make and model of the display. Because the format of color space names is not defined, it is not recommended to programmatically identify a color space by its name alone. Names can be used as a first approximation. It is however perfectly acceptable to display color space names to users in a UI, or in debuggers and logs. When displaying a color space name to the user, it is recommended to add extra information to avoid ambiguities: color model, a representation of the color space's gamut, white point, etc.", "history": "Added in API level 26", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "toXyz(float[])": {"Returns": [["float[]", "The array passed in parameter This value will never be null."]], "Parameters": [["float[]", "float: An array of color components containing the color space's color value to convert to XYZ, and large enough to hold the resulting tristimulus XYZ values This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#toXyz_E@", "@B_android#graphics#ColorSpace#fromXyz_E@"], "Permissions": [], "Description": "Converts a color value from this color space's model to tristimulus CIE XYZ values. If the color model of this color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, it is assumed that the target CIE XYZ space uses a @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ standard illuminant. The specified array's length must be at least equal to to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@.", "history": "Added in API level 26", "FullName": "public abstract float[] toXyz (float[] v)"}, "match(float[],android.graphics.ColorSpace.Rgb.TransferParameters)": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A non-null @B_android#graphics#ColorSpace_E@ if a match is found, null otherwise"]], "Parameters": [["float[]", "float: 3x3 column-major transform matrix from RGB to the profile connection space CIE XYZ as an array of 9 floats, cannot be null This value must never be null."], ["@B_android#graphics#ColorSpace#Rgb#TransferParameters_E@", "ColorSpace.Rgb.TransferParameters: Parameters for the transfer functions This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#graphics#ColorSpace#Named_E@ instance of @B_android#graphics#ColorSpace_E@ that matches the specified RGB to CIE XYZ transform and transfer functions. If no instance can be found, this method returns null. The color transform matrix is assumed to target the CIE XYZ space a @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ standard illuminant.", "history": "Added in API level 26", "FullName": "public static ColorSpace match (float[] toXYZD50, ColorSpace.Rgb.TransferParameters function)"}, "get(android.graphics.ColorSpace.Named)": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A non-null @B_android#graphics#ColorSpace_E@ instance"]], "Parameters": [["@B_android#graphics#ColorSpace#Named_E@", "ColorSpace.Named: The name of the color space to get an instance of This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an instance of @B_android#graphics#ColorSpace_E@ identified by the specified name. The list of names provided in the @B_android#graphics#ColorSpace#Named_E@ enum gives access to a variety of common RGB color spaces. This method always returns the same instance for a given name. This method is thread-safe.", "history": "Added in API level 26", "FullName": "public static ColorSpace get (ColorSpace.Named name)"}, "connect(android.graphics.ColorSpace,android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#ColorSpace#Connector_E@", "A non-null connector between the two specified color spaces"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors from This value must never be null."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors to This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#connect_E@"], "Permissions": [], "Description": "Connects two color spaces to allow conversion from the source color space to the destination color space. If the source and destination color spaces do not have the same profile connection space (CIE XYZ with the same white point), they are chromatically adapted to use the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ as needed. If the source and destination are the same, an optimized connector is returned to avoid unnecessary computations and loss of precision. Colors are mapped from the source color space to the destination color space using the @B_android#graphics#ColorSpace#RenderIntent#PERCEPTUAL_E@ render intent.", "history": "Added in API level 26", "FullName": "public static ColorSpace.Connector connect (ColorSpace source, ColorSpace destination)"}, "adapt(android.graphics.ColorSpace,float[],android.graphics.ColorSpace.Adaptation)": {"Returns": [["@B_android#graphics#ColorSpace_E@", "A new color space if the specified color space has an RGB model and a white point different from the specified white point; the specified color space otherwise This value will never be null."]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to chromatically adapt This value must never be null."], ["float[]", "float: The new white point This value must never be null."], ["@B_android#graphics#ColorSpace#Adaptation_E@", "ColorSpace.Adaptation: The adaptation matrix This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#Adaptation_E@", "@B_android#graphics#ColorSpace#adapt_E@"], "Permissions": [], "Description": "Performs the chromatic adaptation of a color space from its native white point to the specified white point. If the specified color space does not have an @B_android#graphics#ColorSpace#Model#RGB_E@ color model, or if the color space already has the target white point, the color space is returned unmodified. The chromatic adaptation is performed using the von Kries method described in the documentation of @B_android#graphics#ColorSpace#Adaptation_E@. The color space returned by this method always has an ID of @B_android#graphics#ColorSpace#MIN_ID_E@.", "history": "Added in API level 26", "FullName": "public static ColorSpace adapt (ColorSpace colorSpace, float[] whitePoint, ColorSpace.Adaptation adaptation)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string representation of the object This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. This method returns a string equal to the value of: For instance, the string representation of the @B_android#graphics#ColorSpace#Named#SRGB_E@ color space is equal to the following value:", "history": "Added in API level 26", "FullName": "public String toString ()"}, "fromXyz(float[])": {"Returns": [["float[]", "The array passed in parameter This value will never be null."]], "Parameters": [["float[]", "float: An array of color components containing the XYZ values to convert from, and large enough to hold the number of components of this color space's model This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#fromXyz_E@", "@B_android#graphics#ColorSpace#toXyz_E@"], "Permissions": [], "Description": "Converts tristimulus values from the CIE XYZ space to this color space's color model. The resulting value is passed back in the specified array. The specified array's length must be at least equal to to the number of color components as returned by @B_android#graphics#ColorSpace#Model#getComponentCount_E@, and its first 3 values must be the XYZ components to convert from.", "history": "Added in API level 26", "FullName": "public abstract float[] fromXyz (float[] v)"}, "connect(android.graphics.ColorSpace)": {"Returns": [["@B_android#graphics#ColorSpace#Connector_E@", "A non-null connector between the specified color space and sRGB"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors from This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#connect_E@"], "Permissions": [], "Description": "Connects the specified color spaces to sRGB. If the source color space does not use CIE XYZ D65 as its profile connection space, the two spaces are chromatically adapted to use the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ as needed. If the source is the sRGB color space, an optimized connector is returned to avoid unnecessary computations and loss of precision. Colors are mapped from the source color space to the destination color space using the @B_android#graphics#ColorSpace#RenderIntent#PERCEPTUAL_E@ render intent.", "history": "Added in API level 26", "FullName": "public static ColorSpace.Connector connect (ColorSpace source)"}, "toXyz(float,float,float)": {"Returns": [["float[]", "A new array of 3 floats, containing tristimulus XYZ values This value will never be null."]], "Parameters": [["float", "float: The first component of the value to convert from (typically R in RGB)"], ["float", "float: The second component of the value to convert from (typically G in RGB)"], ["float", "float: The third component of the value to convert from (typically B in RGB)"]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#toXyz_E@", "@B_android#graphics#ColorSpace#fromXyz_E@"], "Permissions": [], "Description": "Converts a color value from this color space's model to tristimulus CIE XYZ values. If the color model of this color space is not @B_android#graphics#ColorSpace#Model#RGB_E@, it is assumed that the target CIE XYZ space uses a @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ standard illuminant. This method is a convenience for color spaces with a model of 3 components (@B_android#graphics#ColorSpace#Model#RGB_E@ or @B_android#graphics#ColorSpace#Model#LAB_E@ for instance). With color spaces using fewer or more components, use @B_android#graphics#ColorSpace#toXyz_E@ instead.", "history": "Added in API level 26", "FullName": "public float[] toXyz (float r, float g, float b)"}, "connect(android.graphics.ColorSpace,android.graphics.ColorSpace,android.graphics.ColorSpace.RenderIntent)": {"Returns": [["@B_android#graphics#ColorSpace#Connector_E@", "A non-null connector between the two specified color spaces"]], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors from This value must never be null."], ["@B_android#graphics#ColorSpace_E@", "ColorSpace: The color space to convert colors to This value must never be null."], ["@B_android#graphics#ColorSpace#RenderIntent_E@", "ColorSpace.RenderIntent: The render intent to map colors from the source to the destination This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#graphics#ColorSpace#connect_E@"], "Permissions": [], "Description": "Connects two color spaces to allow conversion from the source color space to the destination color space. If the source and destination color spaces do not have the same profile connection space (CIE XYZ with the same white point), they are chromatically adapted to use the CIE standard illuminant @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ as needed. If the source and destination are the same, an optimized connector is returned to avoid unnecessary computations and loss of precision.", "history": "Added in API level 26", "FullName": "public static ColorSpace.Connector connect (ColorSpace source, ColorSpace destination, ColorSpace.RenderIntent intent)"}}, "Inheritance": [], "ClassName": "android.graphics.ColorSpace", "ClassDesc": "A @B_android#graphics#ColorSpace_E@ is used to identify a specific organization of colors. Each color space is characterized by a @B_android#graphics#ColorSpace#Model_E@ that defines how a color value is represented (for instance the @B_android#graphics#ColorSpace#Model#RGB_E@ color model defines a color value as a triplet of numbers). Each component of a color must fall within a valid range, specific to each color space, defined by @B_android#graphics#ColorSpace#getMinValue_E@ and @B_android#graphics#ColorSpace#getMaxValue_E@ This range is commonly \\([0..1]\\). While it is recommended to use values in the valid range, a color space always clamps input and output values when performing operations such as converting to a different color space. This implementation provides a pre-defined set of common color spaces described in the @B_android#graphics#ColorSpace#Named_E@ enum. To obtain an instance of one of the pre-defined color spaces, simply invoke @B_android#graphics#ColorSpace#get_E@: The @B_android#graphics#ColorSpace#get_E@ method always returns the same instance for a given name. Color spaces with an @B_android#graphics#ColorSpace#Model#RGB_E@ color model can be safely cast to @B_android#graphics#ColorSpace#Rgb_E@. Doing so gives you access to more APIs to query various properties of RGB color models: color gamut primaries, transfer functions, conversions to and from linear space, etc. Please refer to @B_android#graphics#ColorSpace#Rgb_E@ for more information. The documentation of @B_android#graphics#ColorSpace#Named_E@ provides a detailed description of the various characteristics of each available color space. To allow conversion between color spaces, this implementation uses the CIE XYZ profile connection space (PCS). Color values can be converted to and from this PCS using @B_android#graphics#ColorSpace#toXyz_E@ and @B_android#graphics#ColorSpace#fromXyz_E@. For color space with a non-RGB color model, the white point of the PCS must be the CIE standard illuminant D50. RGB color spaces use their native white point (D65 for @B_android#graphics#ColorSpace#Named#SRGB_E@ for instance and must undergo @B_android#graphics#ColorSpace#Adaptation_E@ as necessary. Since the white point of the PCS is not defined for RGB color space, it is highly recommended to use the variants of the @B_android#graphics#ColorSpace#connect_E@ method to perform conversions between color spaces. A color space can be manually adapted to a specific white point using @B_android#graphics#ColorSpace#adapt_E@. Please refer to the documentation of @B_android#graphics#ColorSpace#Rgb_E@ for more information. Several common CIE standard illuminants are provided in this class as reference (see @B_android#graphics#ColorSpace#ILLUMINANT_D65_E@ or @B_android#graphics#ColorSpace#ILLUMINANT_D50_E@ for instance). Here is an example of how to convert from a color space to another: You can easily convert to @B_android#graphics#ColorSpace#Named#SRGB_E@ by omitting the second parameter: Conversions also work between color spaces with different color models: Color spaces and other related classes (@B_android#graphics#ColorSpace#Connector_E@ for instance) are immutable and stateless. They can be safely used from multiple concurrent threads. Public static methods provided by this class, such as @B_android#graphics#ColorSpace#get_E@ and @B_android#graphics#ColorSpace#connect_E@, are also guaranteed to be thread-safe."}