{"Functions": {"onError(android.hardware.camera2.CameraDevice,int)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraDevice_E@", "CameraDevice: The device reporting the error This value must never be null."], ["int", "int: The error code. Value is @B_android#hardware#camera2#CameraDevice#StateCallback#ERROR_CAMERA_IN_USE_E@, @B_android#hardware#camera2#CameraDevice#StateCallback#ERROR_MAX_CAMERAS_IN_USE_E@, @B_android#hardware#camera2#CameraDevice#StateCallback#ERROR_CAMERA_DISABLED_E@, @B_android#hardware#camera2#CameraDevice#StateCallback#ERROR_CAMERA_DEVICE_E@, or @B_android#hardware#camera2#CameraDevice#StateCallback#ERROR_CAMERA_SERVICE_E@"]], "Throws": [], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#StateCallback_E@"], "Permissions": [], "Description": "The method called when a camera device has encountered a serious error. This callback may be called instead of @B_android#hardware#camera2#CameraDevice#StateCallback#onOpened_E@ if opening the camera fails. This indicates a failure of the camera device or camera service in some way. Any attempt to call methods on this CameraDevice in the future will throw a @B_android#hardware#camera2#CameraAccessException_E@ with the @B_android#hardware#camera2#CameraAccessException#CAMERA_ERROR_E@ reason. There may still be capture completion or camera stream callbacks that will be called after this error is received. You should clean up the camera with @B_android#hardware#camera2#CameraDevice#close_E@ after this happens. Further attempts at recovery are error-code specific.", "history": "Added in API level 21", "FullName": "public abstract void onError (CameraDevice camera, int error)"}, "onDisconnected(android.hardware.camera2.CameraDevice)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraDevice_E@", "CameraDevice: the device that has been disconnected This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The method called when a camera device is no longer available for use. This callback may be called instead of @B_android#hardware#camera2#CameraDevice#StateCallback#onOpened_E@ if opening the camera fails. Any attempt to call methods on this CameraDevice will throw a @B_android#hardware#camera2#CameraAccessException_E@. The disconnection could be due to a change in security policy or permissions; the physical disconnection of a removable camera device; or the camera being needed for a higher-priority camera API client. There may still be capture callbacks that are invoked after this method is called, or new image buffers that are delivered to active outputs. The default implementation logs a notice to the system log about the disconnection. You should clean up the camera with @B_android#hardware#camera2#CameraDevice#close_E@ after this happens, as it is not recoverable until the camera can be opened again. For most use cases, this will be when the camera again becomes @B_android#hardware#camera2#CameraManager#AvailabilityCallback#onCameraAvailable_E@.", "history": "Added in API level 21", "FullName": "public abstract void onDisconnected (CameraDevice camera)"}, "onOpened(android.hardware.camera2.CameraDevice)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraDevice_E@", "CameraDevice: the camera device that has become opened This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The method called when a camera device has finished opening. At this point, the camera device is ready to use, and @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ can be called to set up the first capture session.", "history": "Added in API level 21", "FullName": "public abstract void onOpened (CameraDevice camera)"}, "CameraDevice.StateCallback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public CameraDevice.StateCallback ()"}, "onClosed(android.hardware.camera2.CameraDevice)": {"Returns": [], "Parameters": [["@B_android#hardware#camera2#CameraDevice_E@", "CameraDevice: the camera device that has become closed This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The method called when a camera device has been closed with @B_android#hardware#camera2#CameraDevice#close_E@. Any attempt to call methods on this CameraDevice in the future will throw a @B_java#lang#IllegalStateException_E@. The default implementation of this method does nothing.", "history": "Added in API level 21", "FullName": "public void onClosed (CameraDevice camera)"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.CameraDevice.StateCallback", "ClassDesc": "A callback objects for receiving updates about the state of a camera device. A callback instance must be provided to the @B_android#hardware#camera2#CameraManager#openCamera_E@ method to open a camera device. These state updates include notifications about the device completing startup ( allowing for @B_android#hardware#camera2#CameraDevice#createCaptureSession_E@ to be called), about device disconnection or closure, and about unexpected device errors. Events about the progress of specific @B_android#hardware#camera2#CaptureRequest_E@ are provided through a @B_android#hardware#camera2#CameraCaptureSession#CaptureCallback_E@ given to the @B_android#hardware#camera2#CameraCaptureSession#capture_E@, @B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@, @B_android#hardware#camera2#CameraCaptureSession#setRepeatingRequest_E@, or @B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@ methods."}