{"Functions": {"toString()": {"Returns": [["", "A string representation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a string representation of this pair.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getValue()": {"Returns": [["", "String value The current value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value.", "history": "Added in API level 1", "FullName": "public String getValue ()"}, "equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this Object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare this instance with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See equals method. The general contract for the equals and @B_java#lang#Object#hashCode_E@ methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them.", "history": "Added in API level 1", "FullName": "public boolean equals (Object object)"}, "BasicNameValuePair(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "The name."], ["@B_java#lang#String_E@", "The value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default Constructor taking a name and a value. The value may be null.", "history": "Added in API level 1", "FullName": "public BasicNameValuePair (String name, String value)"}, "clone()": {"Returns": [["", "a copy of this object."]], "Parameters": [], "Throws": [["@B_java#lang#CloneNotSupportedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this Object. The default implementation returns a so-called \"shallow\" copy: It creates a new instance of the same class and then copies the field values (including object references) from this instance to the new instance. A \"deep\" copy, in contrast, would also recursively clone nested objects. A subclass that needs to implement this kind of cloning should call super.clone() to create the new instance and then create deep copies of the nested, mutable objects.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getName()": {"Returns": [["", "String name The name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["", "this object's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an integer hash code for this object. By contract, any two objects for which @B_java#lang#Object#equals_E@ returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See hashCode method.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.message.BasicNameValuePair", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A simple class encapsulating an attribute/value pair. This class comforms to the generic grammar and formatting rules outlined in the The following rules are used throughout this specification to describe basic parsing constructs. The US-ASCII coded character set is defined by ANSI X3.4-1986. Many HTTP/1.1 header field values consist of words separated by LWS or special characters. These special characters MUST be in a quoted string to be used within a parameter value (as defined in section 3.6). A string of text is parsed as a single word if it is quoted using double-quote marks. The backslash character (\"\\\") MAY be used as a single-character quoting mechanism only within quoted-string and comment constructs. Parameters are in the form of attribute/value pairs."}