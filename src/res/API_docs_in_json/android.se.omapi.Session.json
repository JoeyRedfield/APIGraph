{"Functions": {"getATR()": {"Returns": [["byte[]", "the ATR as a byte array or null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if there was an error connecting to SE or if the service was not connected."]], "SeeAlso": [], "Permissions": [], "Description": "Get the Answer to Reset of this Secure Element. The returned byte array can be null if the ATR for this Secure Element is not available.", "history": "Added in API level 28", "FullName": "public byte[] getATR ()"}, "openBasicChannel(byte[],byte)": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel if available or null."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array, or null if no Applet is to be selected. This value may be null."], ["byte", "byte: the P2 parameter of the SELECT APDU executed on this channel. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element session is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device"]], "SeeAlso": [], "Permissions": [], "Description": "Get an access to the basic channel, as defined in the ISO/IEC 7816-4 specification (the one that has number 0). The obtained object is an instance of the Channel class. If the AID is null, it means no Applet is to be selected on this channel and the default Applet is used. If the AID is defined then the corresponding Applet is selected. Once this channel has been opened by a device application, it is considered as \"locked\" by this device application, and other calls to this method will return null, until the channel is closed. Some Secure Elements (like the UICC) might always keep the basic channel locked (i.e. return null to applications), to prevent access to the basic channel, while some other might return a channel object implementing some kind of filtering on the commands, restricting the set of accepted command to a smaller set. It is recommended for the UICC to reject the opening of the basic channel to a specific applet, by always answering null to such a request. For other Secure Elements, the recommendation is to accept opening the basic channel on the default applet until another applet is selected on the basic channel. As there is no other way than a reset to select again the default applet, the implementation of the transport API should guarantee that the openBasicChannel(null) command will return null until a reset occurs. With previous release (V2.05) it was not possible to set P2 value, this value was always set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is recommended that the device allows all values for P2, however only the following values are mandatory: '00', '04', '08', '0C'(as defined in [2]) The implementation of the underlying SELECT command within this method shall be based on ISO 7816-4 with following options: CLA = '00' INS = 'A4' P1 = '04' (Select by DF name/application identifier) The select response data can be retrieved with byte[] getSelectResponse(). The API shall handle received status word as follow. If the status word indicates that the Secure Element was able to open a channel (e.g. status word '90 00' or status words referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the channel opened and the next getSelectResponse() shall return the received status word. Other received status codes indicating that the Secure Element was able not to open a channel shall be considered as an error and the corresponding channel shall not be opened. The function without P2 as parameter is provided for backwards compatibility and will fall back to a select command with P2='00'.", "history": "Added in API level 28", "FullName": "public Channel openBasicChannel (byte[] aid, byte p2)"}, "openLogicalChannel(byte[],byte)": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel. Null if the Secure Element is unable to provide a new logical channel."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array. This value may be null."], ["byte", "byte: the P2 parameter of the SELECT APDU executed on this channel. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected or a logical channel is already open to a non-multiselectable Applet."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device."]], "SeeAlso": [], "Permissions": [], "Description": "Open a logical channel with the Secure Element, selecting the Applet represented by the given AID. If the AID is null, which means no Applet is to be selected on this channel, the default Applet is used. It's up to the Secure Element to choose which logical channel will be used. With previous release (V2.05) it was not possible to set P2 value, this value was always set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is recommended that the device allows all values for P2, however only the following values are mandatory: '00', '04', '08', '0C'(as defined in [2]) The implementation of the underlying SELECT command within this method shall be based on ISO 7816-4 with following options: CLA = '01' to '03', '40 to 4F' INS = 'A4' P1 = '04' (Select by DF name/application identifier) The select response data can be retrieved with byte[] getSelectResponse(). The API shall handle received status word as follow. If the status word indicates that the Secure Element was able to open a channel (e.g. status word '90 00' or status words referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the channel opened and the next getSelectResponse() shall return the received status word. Other received status codes indicating that the Secure Element was able not to open a channel shall be considered as an error and the corresponding channel shall not be opened. In case of UICC it is recommended for the API to reject the opening of the logical channel without a specific AID, by always answering null to such a request. The function without P2 as parameter is provided for backwards compatibility and will fall back to a select command with P2=00.", "history": "Added in API level 28", "FullName": "public Channel openLogicalChannel (byte[] aid, byte p2)"}, "isClosed()": {"Returns": [["boolean", "true if the session is closed, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this session is closed.", "history": "Added in API level 28", "FullName": "public boolean isClosed ()"}, "openBasicChannel(byte[])": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel if available or null."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array, or null if no Applet is to be selected. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element session is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device"]], "SeeAlso": [], "Permissions": [], "Description": "This method is provided to ease the development of mobile application and for compliancy with existing applications. This method is equivalent to openBasicChannel(aid, P2=0x00)", "history": "Added in API level 28", "FullName": "public Channel openBasicChannel (byte[] aid)"}, "openBasicChannel(byte[], byte)": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel if available or null."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array, or null if no Applet is to be selected."], ["byte", "byte: the P2 parameter of the SELECT APDU executed on this channel.This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element session is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device"]], "SeeAlso": [], "Permissions": [], "Description": "Get an access to the basic channel, as defined in the ISO/IEC 7816-4 specification (the one that has number 0). The obtained object is an instance of the Channel class. If the AID is null, it means no Applet is to be selected on this channel and the default Applet is used. If the AID is defined then the corresponding Applet is selected. Once this channel has been opened by a device application, it is considered as \"locked\" by this device application, and other calls to this method will return null, until the channel is closed. Some Secure Elements (like the UICC) might always keep the basic channel locked (i.e. return null to applications), to prevent access to the basic channel, while some other might return a channel object implementing some kind of filtering on the commands, restricting the set of accepted command to a smaller set. It is recommended for the UICC to reject the opening of the basic channel to a specific applet, by always answering null to such a request. For other Secure Elements, the recommendation is to accept opening the basic channel on the default applet until another applet is selected on the basic channel. As there is no other way than a reset to select again the default applet, the implementation of the transport API should guarantee that the openBasicChannel(null) command will return null until a reset occurs. With previous release (V2.05) it was not possible to set P2 value, this value was always set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is recommended that the device allows all values for P2, however only the following values are mandatory: '00', '04', '08', '0C'(as defined in [2]) The implementation of the underlying SELECT command within this method shall be based on ISO 7816-4 with following options: CLA = '00' INS = 'A4' P1 = '04' (Select by DF name/application identifier) The select response data can be retrieved with byte[] getSelectResponse(). The API shall handle received status word as follow. If the status word indicates that the Secure Element was able to open a channel (e.g. status word '90 00' or status words referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the channel opened and the next getSelectResponse() shall return the received status word. Other received status codes indicating that the Secure Element was able not to open a channel shall be considered as an error and the corresponding channel shall not be opened. The function without P2 as parameter is provided for backwards compatibility and will fall back to a select command with P2='00'.", "history": "added in API level 28", "FullName": "public Channel openBasicChannel (byte[] aid, byte p2)"}, "openLogicalChannel(byte[])": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel. Null if the Secure Element is unable to provide a new logical channel. This value may be null."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array. This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected or a logical channel is already open to a non-multiselectable Applet."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device."]], "SeeAlso": [], "Permissions": [], "Description": "This method is provided to ease the development of mobile application and for compliancy with existing applications. This method is equivalent to openLogicalChannel(aid, P2=0x00)", "history": "Added in API level 28", "FullName": "public Channel openLogicalChannel (byte[] aid)"}, "getReader()": {"Returns": [["@B_android#se#omapi#Reader_E@", "The Reader object. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the reader that provides this session.", "history": "Added in API level 28", "FullName": "public Reader getReader ()"}, "closeChannels()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close any channel opened on this session.", "history": "Added in API level 28", "FullName": "public void closeChannels ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Close the connection with the Secure Element. This will close any channels opened by this application with this Secure Element.", "history": "Added in API level 28", "FullName": "public void close ()"}, "openLogicalChannel(byte[], byte)": {"Returns": [["@B_android#se#omapi#Channel_E@", "an instance of Channel. Null if the Secure Element is unable to provide a new logical channel. This value may be null."]], "Parameters": [["byte[]", "byte: the AID of the Applet to be selected on this channel, as a byte array.This value may be null."], ["byte", "byte: the P2 parameter of the SELECT APDU executed on this channel.This value may be null."]], "Throws": [["@B_java#io#IOException_E@", "if there is a communication problem to the reader or the Secure Element."], ["@B_java#lang#IllegalStateException_E@", "if the Secure Element is used after being closed."], ["@B_java#lang#IllegalArgumentException_E@", "if the aid's length is not within 5 to 16 (inclusive)."], ["@B_java#lang#SecurityException_E@", "if the calling application cannot be granted access to this AID or the default Applet on this session."], ["@B_java#util#NoSuchElementException_E@", "if the AID on the Secure Element is not available or cannot be selected or a logical channel is already open to a non-multiselectable Applet."], ["@B_java#lang#UnsupportedOperationException_E@", "if the given P2 parameter is not supported by the device."]], "SeeAlso": [], "Permissions": [], "Description": "Open a logical channel with the Secure Element, selecting the Applet represented by the given AID. If the AID is null, which means no Applet is to be selected on this channel, the default Applet is used. It's up to the Secure Element to choose which logical channel will be used. With previous release (V2.05) it was not possible to set P2 value, this value was always set to '00'.Except for specific needs it is recommended to keep P2 to '00'. It is recommended that the device allows all values for P2, however only the following values are mandatory: '00', '04', '08', '0C'(as defined in [2]) The implementation of the underlying SELECT command within this method shall be based on ISO 7816-4 with following options: CLA = '01' to '03', '40 to 4F' INS = 'A4' P1 = '04' (Select by DF name/application identifier) The select response data can be retrieved with byte[] getSelectResponse(). The API shall handle received status word as follow. If the status word indicates that the Secure Element was able to open a channel (e.g. status word '90 00' or status words referencing a warning in ISO-7816-4: '62 XX' or '63 XX') the API shall keep the channel opened and the next getSelectResponse() shall return the received status word. Other received status codes indicating that the Secure Element was able not to open a channel shall be considered as an error and the corresponding channel shall not be opened. In case of UICC it is recommended for the API to reject the opening of the logical channel without a specific AID, by always answering null to such a request. The function without P2 as parameter is provided for backwards compatibility and will fall back to a select command with P2=00.", "history": "added in API level 28", "FullName": "public Channel openLogicalChannel (byte[] aid, byte p2)"}}, "Inheritance": [], "ClassName": "android.se.omapi.Session", "ClassDesc": "Instances of this class represent a connection session to one of the Secure Elements available on the device. These objects can be used to get a communication channel with an Applet in the Secure Element. This channel can be the basic channel or a logical channel."}