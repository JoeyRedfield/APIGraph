{"Functions": {"invalidateAll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invalidates all binding expressions and requests a new rebind to refresh UI.", "history": "", "FullName": "void invalidateAll ()"}, "executePendingBindings()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Evaluates the pending bindings, updating any Views that have expressions bound to modified variables. This", "history": "", "FullName": "void executePendingBindings ()"}, "getRoot()": {"Returns": [["@B_android#view#View_E@", "the outermost View in the layout file associated with the Binding."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the outermost View in the layout file associated with the Binding. If this binding is for a merge layout file, this will return the first root in the merge tag.", "history": "", "FullName": "View getRoot ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "", "FullName": "void finalize ()"}, "unbind()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes binding listeners to expression variables.", "history": "", "FullName": "void unbind ()"}, "setVariable(int, java.lang.Object)": {"Returns": [["boolean", "true if the variable is declared or used in the binding or false otherwise."]], "Parameters": [["int", "int: the BR id of the variable to be set. For example, if the variable is x, then variableId will be BR.x."], ["@B_java#lang#Object_E@", "Object: The new value of the variable to be set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a value value in the Binding class. Typically, the developer will be able to call the subclass's set method directly. For example, if there is a variable x in the Binding, a setX method will be generated. However, there are times when the specific subclass of ViewDataBinding is unknown, so the generated method cannot be discovered without reflection. The setVariable call allows the values of variables to be set without reflection.", "history": "", "FullName": "boolean setVariable (int variableId, Object value)"}, "hasPendingBindings()": {"Returns": [["boolean", "true if any field has changed and the binding should be evaluated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the UI needs to be refresh to represent the current data.", "history": "", "FullName": "boolean hasPendingBindings ()"}}, "Inheritance": ["http:##developer#android#com@B_java#lang#Object_E@", "@B_android#databinding#BaseObservable_E@"], "ClassName": "android.databinding.ViewDataBinding", "ClassDesc": "Base class for generated data binding classes. If possible, the generated binding should be instantiated using one of its generated static bind or inflate methods. If the specific binding is unknown, @B_android#databinding#DataBindingUtil#bind_E@ or @B_android#databinding#DataBindingUtil#inflate_E@ should be used."}