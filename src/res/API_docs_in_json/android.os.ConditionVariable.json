{"Functions": {"ConditionVariable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create the ConditionVariable in the default closed state.", "history": "Added in API level 1", "FullName": "public ConditionVariable ()"}, "ConditionVariable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create the ConditionVariable with the given state. Pass true for opened and false for closed.", "history": "Added in API level 1", "FullName": "public ConditionVariable (boolean state)"}, "block()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Block the current thread until the condition is opened. If the condition is already opened, return immediately.", "history": "Added in API level 1", "FullName": "public void block ()"}, "open()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Open the condition, and release all threads that are blocked. Any threads that later approach block() will not block unless close() is called.", "history": "Added in API level 1", "FullName": "public void open ()"}, "block(long)": {"Returns": [["boolean", "true if the condition was opened, false if the call returns because of the timeout."]], "Parameters": [["long", "long: the maximum time to wait in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Block the current thread until the condition is opened or until timeoutMs milliseconds have passed. If the condition is already opened, return immediately.", "history": "Added in API level 1", "FullName": "public boolean block (long timeoutMs)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reset the condition to the closed state. Any threads that call block() will block until someone calls open.", "history": "Added in API level 1", "FullName": "public void close ()"}}, "Inheritance": [], "ClassName": "android.os.ConditionVariable", "ClassDesc": "Class that implements the condition variable locking paradigm. This differs from the built-in java.lang.Object wait() and notify() in that this class contains the condition to wait on itself. That means open(), close() and block() are sticky. If open() is called before block(), block() will not block, and instead return immediately. This class uses itself as the object to wait on, so if you wait() or notify() on a ConditionVariable, the results are undefined."}