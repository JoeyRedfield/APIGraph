{"Functions": {"getId()": {"Returns": [["", "this ground overlay's id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets this ground overlay's id. The id will be unique amongst all GroundOverlays on a map.", "history": "", "FullName": "public String getId ()"}, "getPosition()": {"Returns": [["", "the position on the map (a @B_com#google#android#gms#maps#model#LatLng_E@)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the location of the anchored point.", "history": "", "FullName": "public LatLng getPosition ()"}, "setPositionFromBounds(com.google.android.gms.maps.model.LatLngBounds)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#model#LatLngBounds_E@", "a @B_com#google#android#gms#maps#model#LatLngBounds_E@ in which to place the ground overlay"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the ground overlay by fitting it to the given @B_com#google#android#gms#maps#model#LatLngBounds_E@. This method will ignore the rotation (bearing) of the ground overlay when positioning it, but the bearing will still be used when drawing it.", "history": "", "FullName": "public void setPositionFromBounds (LatLngBounds bounds)"}, "setZIndex(float)": {"Returns": [], "Parameters": [["float", "the zIndex of this ground overlay"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the zIndex of this ground overlay. See the documentation at the top of this class for more information.", "history": "", "FullName": "public void setZIndex (float zIndex)"}, "setTransparency(float)": {"Returns": [], "Parameters": [["float", "a float in the range [0..1] where 0 means that the ground overlay is opaque and 1 means that the ground overlay is transparent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the transparency of this ground overlay. See the documentation at the top of this class for more information.", "history": "", "FullName": "public void setTransparency (float transparency)"}, "setDimensions(float, float)": {"Returns": [], "Parameters": [["float", "width in meters"], ["float", "height in meters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the dimensions of the ground overlay. The image will be stretched (and hence may not retain its proportions) to fit these dimensions.", "history": "", "FullName": "public void setDimensions (float width, float height)"}, "isVisible()": {"Returns": [["", "this ground overlay's visibility."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the visibility of this ground overlay. Note that this does not return whether the ground overlay is actually on screen, but whether it will be drawn if it is contained in the camera's viewport.", "history": "", "FullName": "public boolean isVisible ()"}, "setDimensions(float)": {"Returns": [], "Parameters": [["float", "width in meters"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the dimensions of the ground overlay. The height of the ground overlay will be calculated to preserve the proportions inherited from the bitmap.", "history": "", "FullName": "public void setDimensions (float width)"}, "setVisible(boolean)": {"Returns": [], "Parameters": [["boolean", "if true, then the ground overlay is visible; if false, it is not"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visibility of this ground overlay. When not visible, a ground overlay is not drawn, but it keeps all of its other properties.", "history": "", "FullName": "public void setVisible (boolean visible)"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes this ground overlay from the map. After a ground overlay has been removed, the behavior of all its methods is undefined.", "history": "", "FullName": "public void remove ()"}, "getHeight()": {"Returns": [["", "the height of the ground overlay in meters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the height of the ground overlay.", "history": "", "FullName": "public float getHeight ()"}, "getBounds()": {"Returns": [["", "a @B_com#google#android#gms#maps#model#LatLngBounds_E@ that contains the ground overlay, ignoring rotation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the bounds for the ground overlay. This ignores the rotation of the ground overlay.", "history": "", "FullName": "public LatLngBounds getBounds ()"}, "getBearing()": {"Returns": [["", "the bearing of the ground overlay."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the bearing of the ground overlay in degrees clockwise from north.", "history": "", "FullName": "public float getBearing ()"}, "setBearing(float)": {"Returns": [], "Parameters": [["float", "bearing in degrees clockwise from north"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bearing of the ground overlay (the direction that the vertical axis of the ground overlay points) in degrees clockwise from north. The rotation is performed about the anchor point.", "history": "", "FullName": "public void setBearing (float bearing)"}, "getZIndex()": {"Returns": [["", "the zIndex of the ground overlay."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the zIndex of this ground overlay.", "history": "", "FullName": "public float getZIndex ()"}, "getTransparency()": {"Returns": [["", "the transparency of this ground overlay."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the transparency of this ground overlay.", "history": "", "FullName": "public float getTransparency ()"}, "setPosition(com.google.android.gms.maps.model.LatLng)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#model#LatLng_E@", "a @B_com#google#android#gms#maps#model#LatLng_E@ that is the new location to place the anchor point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the ground overlay by changing the location of the anchored point. Preserves all other properties of the image.", "history": "", "FullName": "public void setPosition (LatLng latLng)"}, "setImage(com.google.android.gms.maps.model.BitmapDescriptor)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#model#BitmapDescriptor_E@", "the @B_com#google#android#gms#maps#model#BitmapDescriptor_E@ to use for this ground overlay."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the image for the Ground Overlay. The new image will occupy the same bounds as the old image.", "history": "", "FullName": "public void setImage (BitmapDescriptor image)"}, "getWidth()": {"Returns": [["", "the width of the ground overlay in meters."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the width of the ground overlay.", "history": "", "FullName": "public float getWidth ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object other)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.model.GroundOverlay", "ClassDesc": "A ground overlay is an image that is fixed to a map. A ground overlay has the following properties: @B_java#lang#IllegalStateException_E@ will be thrown at runtime."}