{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string identifying this lock, as well as its lock state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string identifying this lock, as well as its lock state. The state, in brackets, includes the String \"Read locks =\" followed by the number of held read locks.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "ReentrantReadWriteLock.ReadLock(java.util.concurrent.locks.ReentrantReadWriteLock)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#locks#ReentrantReadWriteLock_E@", "ReentrantReadWriteLock: the outer lock object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the lock is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructor for use by subclasses.", "history": "Added in API level 1", "FullName": "protected ReentrantReadWriteLock.ReadLock (ReentrantReadWriteLock lock)"}, "tryLock()": {"Returns": [["boolean", "true if the read lock was acquired"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the read lock only if the write lock is not held by another thread at the time of invocation. Acquires the read lock if the write lock is not held by another thread and returns immediately with the value true. Even when this lock has been set to use a fair ordering policy, a call to tryLock() will immediately acquire the read lock if it is available, whether or not other threads are currently waiting for the read lock. This \"barging\" behavior can be useful in certain circumstances, even though it breaks fairness. If you want to honor the fairness setting for this lock, then use @B_java#util#concurrent#locks#ReentrantReadWriteLock#ReadLock#tryLock_E@ which is almost equivalent (it also detects interruption). If the write lock is held by another thread then this method will return immediately with the value false.", "history": "Added in API level 1", "FullName": "public boolean tryLock ()"}, "unlock()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalMonitorStateException_E@", "if the current thread does not hold this lock"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to release this lock. If the number of readers is now zero then the lock is made available for write lock attempts. If the current thread does not hold this lock then @B_java#lang#IllegalMonitorStateException_E@ is thrown.", "history": "Added in API level 1", "FullName": "public void unlock ()"}, "lockInterruptibly()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the read lock unless the current thread is Acquires the read lock if the write lock is not held by another thread and returns immediately. If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of two things happens: The read lock is acquired by the current thread; or Some other thread If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock.", "history": "Added in API level 1", "FullName": "public void lockInterruptibly ()"}, "lock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Acquires the read lock. Acquires the read lock if the write lock is not held by another thread and returns immediately. If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until the read lock has been acquired.", "history": "Added in API level 1", "FullName": "public void lock ()"}, "newCondition()": {"Returns": [["@B_java#util#concurrent#locks#Condition_E@", "A new @B_java#util#concurrent#locks#Condition_E@ instance for this Lock instance"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "always"]], "SeeAlso": [], "Permissions": [], "Description": "Throws UnsupportedOperationException because ReadLocks do not support conditions.", "history": "Added in API level 1", "FullName": "public Condition newCondition ()"}, "tryLock(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the read lock was acquired"]], "Parameters": [["long", "long: the time to wait for the read lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been Acquires the read lock if the write lock is not held by another thread and returns immediately with the value true. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantReadWriteLock#ReadLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The read lock is acquired by the current thread; or Some other thread The specified waiting time elapses. If the read lock is acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "Added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}, "tryLock(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the read lock was acquired"]], "Parameters": [["long", "long: the time to wait for the read lock"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted"], ["@B_java#lang#NullPointerException_E@", "if the time unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Acquires the read lock if the write lock is not held by another thread within the given waiting time and the current thread has not been Acquires the read lock if the write lock is not held by another thread and returns immediately with the value true. If this lock has been set to use a fair ordering policy then an available lock will not be acquired if any other threads are waiting for the lock. This is in contrast to the @B_java#util#concurrent#locks#ReentrantReadWriteLock#ReadLock#tryLock_E@ method. If you want a timed tryLock that does permit barging on a fair lock then combine the timed and un-timed forms together: If the write lock is held by another thread then the current thread becomes disabled for thread scheduling purposes and lies dormant until one of three things happens: The read lock is acquired by the current thread; or Some other thread The specified waiting time elapses. If the read lock is acquired then the value true is returned. If the current thread: has its interrupted status set on entry to this method; or is then @B_java#lang#InterruptedException_E@ is thrown and the current thread's interrupted status is cleared. If the specified waiting time elapses then the value false is returned. If the time is less than or equal to zero, the method will not wait at all. In this implementation, as this method is an explicit interruption point, preference is given to responding to the interrupt over normal or reentrant acquisition of the lock, and over reporting the elapse of the waiting time.", "history": "added in API level 1", "FullName": "public boolean tryLock (long timeout, TimeUnit unit)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock", "ClassDesc": "The lock returned by method @B_java#util#concurrent#locks#ReentrantReadWriteLock#readLock_E@."}