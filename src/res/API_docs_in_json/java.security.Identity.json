{"Functions": {"setPublicKey(java.security.PublicKey)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the public key for this identity."]], "Throws": [["@B_java#security#KeyManagementException_E@", "if another identity in the identity's scope has the same public key, or if another exception occurs."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow setting the public key."]], "SeeAlso": ["@B_java#security#Identity#getPublicKey_E@", "@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Sets this identity's public key. The old key and all of this identity's certificates are removed by this operation. First, if there is a security manager, its checkSecurityAccess method is called with \"setIdentityPublicKey\" as its argument to see if it's ok to set the public key.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public void setPublicKey (PublicKey key)"}, "toString(boolean)": {"Returns": [["@B_java#lang#String_E@", "information about this identity. If detailed is true, then this method returns more information than that provided by the toString method without any arguments."]], "Parameters": [["boolean", "boolean: whether or not to provide detailed information."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow returning a string describing this identity."]], "SeeAlso": ["@B_java#security#Identity#toString_E@", "@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Returns a string representation of this identity, with optionally more details than that provided by the toString method without any arguments. First, if there is a security manager, its checkSecurityAccess method is called with \"printIdentity\" as its argument to see if it's ok to return the string.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public String toString (boolean detailed)"}, "certificates()": {"Returns": [["@B_java#security#Certificate_E@", "a copy of all the certificates for this identity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of all the certificates for this identity.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public Certificate[] certificates ()"}, "addCertificate(java.security.Certificate)": {"Returns": [], "Parameters": [["@B_java#security#Certificate_E@", "Certificate: the certificate to be added."]], "Throws": [["@B_java#security#KeyManagementException_E@", "if the certificate is not valid, if the public key in the certificate being added conflicts with this identity's public key, or if another exception occurs."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow adding a certificate."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Adds a certificate for this identity. If the identity has a public key, the public key in the certificate must be the same, and if the identity does not have a public key, the identity's public key is set to be that specified in the certificate. First, if there is a security manager, its checkSecurityAccess method is called with \"addIdentityCertificate\" as its argument to see if it's ok to add a certificate.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public void addCertificate (Certificate certificate)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "information about this identity, such as its name and the name of its scope (if any)."]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow returning a string describing this identity."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Returns a short string describing this identity, telling its name and its scope (if any). First, if there is a security manager, its checkSecurityAccess method is called with \"printIdentity\" as its argument to see if it's ok to return the string.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public String toString ()"}, "getScope()": {"Returns": [["@B_java#security#IdentityScope_E@", "the scope of this identity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this identity's scope.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public final IdentityScope getScope ()"}, "identityEquals(java.security.Identity)": {"Returns": [["boolean", "true if the identities are considered equal, false otherwise."]], "Parameters": [["@B_java#security#Identity_E@", "Identity: the identity to test for equality with this identity."]], "Throws": [], "SeeAlso": ["@B_java#security#Identity#equals_E@"], "Permissions": [], "Description": "Tests for equality between the specified identity and this identity. This method should be overriden by subclasses to test for equality. The default behavior is to return true if the names and public keys are equal.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "protected boolean identityEquals (Identity identity)"}, "getPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the public key for this identity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Identity#setPublicKey_E@"], "Permissions": [], "Description": "Returns this identity's public key.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public PublicKey getPublicKey ()"}, "setInfo(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the information string."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow setting the information string."]], "SeeAlso": ["@B_java#security#Identity#getInfo_E@", "@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Specifies a general information string for this identity. First, if there is a security manager, its checkSecurityAccess method is called with \"setIdentityInfo\" as its argument to see if it's ok to specify the information string.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public void setInfo (String info)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are considered equal, false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to test for equality with this identity."]], "Throws": [], "SeeAlso": ["@B_java#security#Identity#identityEquals_E@"], "Permissions": [], "Description": "Tests for equality between the specified object and this identity. This first tests to see if the entities actually refer to the same object, in which case it returns true. Next, it checks to see if the entities have the same name and the same scope. If they do, the method returns true. Otherwise, it calls @B_java#security#Identity#identityEquals_E@, which subclasses should override.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public final boolean equals (Object identity)"}, "Identity(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the identity name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an identity with the specified name and no scope.", "history": "Added in API level 1", "FullName": "public Identity (String name)"}, "removeCertificate(java.security.Certificate)": {"Returns": [], "Parameters": [["@B_java#security#Certificate_E@", "Certificate: the certificate to be removed."]], "Throws": [["@B_java#security#KeyManagementException_E@", "if the certificate is missing, or if another exception occurs."], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkSecurityAccess method doesn't allow removing a certificate."]], "SeeAlso": ["@B_java#lang#SecurityManager#checkSecurityAccess_E@"], "Permissions": [], "Description": "Removes a certificate from this identity. First, if there is a security manager, its checkSecurityAccess method is called with \"removeIdentityCertificate\" as its argument to see if it's ok to remove a certificate.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public void removeCertificate (Certificate certificate)"}, "Identity(java.lang.String,java.security.IdentityScope)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the identity name."], ["@B_java#security#IdentityScope_E@", "IdentityScope: the scope of the identity."]], "Throws": [["@B_java#security#KeyManagementException_E@", "if there is already an identity with the same name in the scope."]], "SeeAlso": [], "Permissions": [], "Description": "Constructs an identity with the specified name and scope.", "history": "Added in API level 1", "FullName": "public Identity (String name, IdentityScope scope)"}, "Identity()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for serialization only.", "history": "Added in API level 1", "FullName": "protected Identity ()"}, "getInfo()": {"Returns": [["@B_java#lang#String_E@", "general information about this identity."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#Identity#setInfo_E@"], "Permissions": [], "Description": "Returns general information previously specified for this identity.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public String getInfo ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the name of this identity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this identity's name.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public final String getName ()"}, "hashCode()": {"Returns": [["int", "a hashcode for this identity."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this identity.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.security.Identity", "ClassDesc": "This class is no longer used. Its functionality has been replaced by java.security.KeyStore, the java.security.cert package, and java.security.Principal. This class represents identities: real-world objects such as people, companies or organizations whose identities can be authenticated using their public keys. Identities may also be more abstract (or concrete) constructs, such as daemon threads or smart cards. All Identity objects have a name and a public key. Names are immutable. Identities may also be scoped. That is, if an Identity is specified to have a particular scope, then the name and public key of the Identity are unique within that scope. An Identity also has a set of certificates (all certifying its own public key). The Principal names specified in these certificates need not be the same, only the key. An Identity can be subclassed, to include postal and email addresses, telephone numbers, images of faces and logos, and so on."}