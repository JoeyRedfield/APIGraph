{"Functions": {"stopAnimation()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops the camera animation if there is one in progress. When the method is called, the camera stops moving immediately and remains in that position.", "history": "", "FullName": "public final void stopAnimation ()"}, "setTrafficEnabled(boolean)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turns the traffic layer on or off.", "history": "", "FullName": "public final void setTrafficEnabled (boolean enabled)"}, "animateCamera(com.google.android.gms.maps.CameraUpdate)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#CameraUpdate_E@", "The change that should be applied to the camera."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Animates the movement of the camera from the current position to the position defined in the update. During the animation, a call to @B_com#google#android#gms#maps#GoogleMap#getCameraPosition_E@ returns an intermediate location of the camera. See @B_com#google#android#gms#maps#CameraUpdateFactory_E@ for a set of updates.", "history": "", "FullName": "public final void animateCamera (CameraUpdate update)"}, "setOnInfoWindowClickListener(com.google.android.gms.maps.GoogleMap.OnInfoWindowClickListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnInfoWindowClickListener_E@", "The callback that's invoked when a marker info window is clicked. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when a marker info window is clicked.", "history": "", "FullName": "public final void setOnInfoWindowClickListener (GoogleMap.OnInfoWindowClickListener listener)"}, "getMaxZoomLevel()": {"Returns": [["", "The maximum zoom level available at the current camera position."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum zoom level for the current camera position. This takes into account what map type is currently being used, e.g., satellite or terrain may have a lower max zoom level than the base map tiles.", "history": "", "FullName": "public final float getMaxZoomLevel ()"}, "snapshot(com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#SnapshotReadyCallback_E@", "Callback method invoked when the snapshot is taken."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Takes a snapshot of the map. You can use snapshots within your application when an interactive map would be difficult, or impossible, to use. For example, images produced with the snapshot() method can be used to display a thumbnail of the map in your app, or a snapshot in the notification center.", "history": "", "FullName": "public final void snapshot (GoogleMap.SnapshotReadyCallback callback)"}, "getFocusedBuilding()": {"Returns": [["", "The current focused building or null if no building is focused."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the currently focused building.", "history": "", "FullName": "public IndoorBuilding getFocusedBuilding ()"}, "addPolyline(com.google.android.gms.maps.model.PolylineOptions)": {"Returns": [["", "The Polyline object that was added to the map."]], "Parameters": [["@B_com#google#android#gms#maps#model#PolylineOptions_E@", "A polyline options object that defines how to render the Polyline."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a polyline to this map.", "history": "", "FullName": "public final Polyline addPolyline (PolylineOptions options)"}, "setOnMarkerClickListener(com.google.android.gms.maps.GoogleMap.OnMarkerClickListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMarkerClickListener_E@", "The callback that's invoked when a marker is clicked. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when a marker is clicked.", "history": "", "FullName": "public final void setOnMarkerClickListener (GoogleMap.OnMarkerClickListener listener)"}, "animateCamera(com.google.android.gms.maps.CameraUpdate, int, com.google.android.gms.maps.GoogleMap.CancelableCallback)": {"Returns": [], "Parameters": [["int", "The duration of the animation in milliseconds. This must be strictly positive, otherwise an @B_java#lang#IllegalArgumentException_E@ will be thrown."], ["@B_com#google#android#gms#maps#GoogleMap#CancelableCallback_E@", "An optional callback to be notified from the main thread when the animation stops. If the animation stops due to its natural completion, the callback will be notified with @B_com#google#android#gms#maps#GoogleMap#CancelableCallback#onFinish_E@. If the animation stops due to interruption by a later camera movement or a user gesture, @B_com#google#android#gms#maps#GoogleMap#CancelableCallback#onCancel_E@ will be called. The callback should not attempt to move or animate the camera in its cancellation method. If a callback isn't required, leave it as null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Moves the map according to the update with an animation over a specified duration, and calls an optional callback on completion. See @B_com#google#android#gms#maps#CameraUpdateFactory_E@ for a set of updates. If @B_com#google#android#gms#maps#GoogleMap#getCameraPosition_E@ is called during the animation, it will return the current location of the camera in flight.", "history": "", "FullName": "public final void animateCamera (CameraUpdate update, int durationMs, GoogleMap.CancelableCallback callback)"}, "isBuildingsEnabled()": {"Returns": [["", "True if buildings are enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether 3D buildings layer is enabled.", "history": "", "FullName": "public final boolean isBuildingsEnabled ()"}, "addCircle(com.google.android.gms.maps.model.CircleOptions)": {"Returns": [["", "The Circle object that is added to the map"]], "Parameters": [["@B_com#google#android#gms#maps#model#CircleOptions_E@", "A circle options object that defines how to render the Circle"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a circle to this map.", "history": "", "FullName": "public final Circle addCircle (CircleOptions options)"}, "setOnIndoorStateChangeListener(com.google.android.gms.maps.GoogleMap.OnIndoorStateChangeListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnIndoorStateChangeListener_E@", "the listener for indoor events if non-null; otherwise, clears the listener"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets or clears the listener for indoor events. Only one listener can ever be set. Setting a new listener will remove the previous listener.", "history": "", "FullName": "public final void setOnIndoorStateChangeListener (GoogleMap.OnIndoorStateChangeListener listener)"}, "isIndoorEnabled()": {"Returns": [["", "true if indoor maps are enabled; false if indoor maps are disabled;"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether indoor maps are currently enabled.", "history": "", "FullName": "public final boolean isIndoorEnabled ()"}, "getCameraPosition()": {"Returns": [["", "The current position of the Camera."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current position of the camera. The @B_com#google#android#gms#maps#model#CameraPosition_E@ returned is a snapshot of the current position, and will not automatically update when the camera moves.", "history": "", "FullName": "public final CameraPosition getCameraPosition ()"}, "addPolygon(com.google.android.gms.maps.model.PolygonOptions)": {"Returns": [["", "The Polygon object that is added to the map."]], "Parameters": [["@B_com#google#android#gms#maps#model#PolygonOptions_E@", "A polygon options object that defines how to render the Polygon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a polygon to this map.", "history": "", "FullName": "public final Polygon addPolygon (PolygonOptions options)"}, "setOnMapClickListener(com.google.android.gms.maps.GoogleMap.OnMapClickListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMapClickListener_E@", "The callback that's invoked when the map is tapped. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when the map is tapped.", "history": "", "FullName": "public final void setOnMapClickListener (GoogleMap.OnMapClickListener listener)"}, "setOnMyLocationChangeListener(com.google.android.gms.maps.GoogleMap.OnMyLocationChangeListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMyLocationChangeListener_E@", "The callback that's invoked when the My Location dot changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when the My Location dot changes location.", "history": "", "FullName": "public final void setOnMyLocationChangeListener (GoogleMap.OnMyLocationChangeListener listener)"}, "setOnMapLoadedCallback(com.google.android.gms.maps.GoogleMap.OnMapLoadedCallback)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMapLoadedCallback_E@", "The callback invoked when the map has finished rendering. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that is invoked when this map has finished rendering. The callback will only be invoked once. If this method is called when the map is fully rendered, the callback will be invoked immediately. This event will not fire if the map never loads due to connectivity issues, or if the map is continuously changing and never completes loading due to the user constantly interacting with the map.", "history": "", "FullName": "public void setOnMapLoadedCallback (GoogleMap.OnMapLoadedCallback callback)"}, "isMyLocationEnabled()": {"Returns": [["", "True if the my-location layer is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the status of the my-location layer.", "history": "", "FullName": "public final boolean isMyLocationEnabled ()"}, "setInfoWindowAdapter(com.google.android.gms.maps.GoogleMap.InfoWindowAdapter)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#InfoWindowAdapter_E@", "The adapter to use for info window contents, or null to use the default content rendering in info windows."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a custom renderer for the contents of info windows. Like the map's event listeners, this state is not serialized with the map. If the map gets re-created (e.g., due to a configuration change), you must ensure that you call this method again in order to preserve the customization.", "history": "", "FullName": "public final void setInfoWindowAdapter (GoogleMap.InfoWindowAdapter adapter)"}, "animateCamera(com.google.android.gms.maps.CameraUpdate, com.google.android.gms.maps.GoogleMap.CancelableCallback)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#CameraUpdate_E@", "The change that should be applied to the camera."], ["@B_com#google#android#gms#maps#GoogleMap#CancelableCallback_E@", "The callback to invoke from the main thread when the animation stops. If the animation completes normally, @B_com#google#android#gms#maps#GoogleMap#CancelableCallback#onFinish_E@ is called; otherwise, @B_com#google#android#gms#maps#GoogleMap#CancelableCallback#onCancel_E@ is called. Do not update or animate the camera from within @B_com#google#android#gms#maps#GoogleMap#CancelableCallback#onCancel_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Animates the movement of the camera from the current position to the position defined in the update and calls an optional callback on completion. See @B_com#google#android#gms#maps#CameraUpdateFactory_E@ for a set of updates. During the animation, a call to @B_com#google#android#gms#maps#GoogleMap#getCameraPosition_E@ returns an intermediate location of the camera.", "history": "", "FullName": "public final void animateCamera (CameraUpdate update, GoogleMap.CancelableCallback callback)"}, "setOnMyLocationButtonClickListener(com.google.android.gms.maps.GoogleMap.OnMyLocationButtonClickListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMyLocationButtonClickListener_E@", "The callback that's invoked when the My Location button is clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when the my location button is clicked. If the listener returns true, the event is consumed and the default behavior will not occur. If it returns false, the default behavior will occur (i.e. The camera moves such that it is centered on the user's location).", "history": "", "FullName": "public final void setOnMyLocationButtonClickListener (GoogleMap.OnMyLocationButtonClickListener listener)"}, "setLocationSource(com.google.android.gms.maps.LocationSource)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#LocationSource_E@", "A location source to use in the my-location layer. Set to null to use the default location source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the location source of the my-location layer.", "history": "", "FullName": "public final void setLocationSource (LocationSource source)"}, "getUiSettings()": {"Returns": [["", "The @B_com#google#android#gms#maps#UiSettings_E@ for this map."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the user interface settings for the map.", "history": "", "FullName": "public final UiSettings getUiSettings ()"}, "setMapType(int)": {"Returns": [], "Parameters": [["int", "The type of map to display."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the type of map tiles that should be displayed. The allowable values are: @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_NORMAL_E@: Basic map with roads. @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_SATELLITE_E@: Satellite view with roads. @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_TERRAIN_E@: Terrain view without roads.", "history": "", "FullName": "public final void setMapType (int type)"}, "setOnCameraChangeListener(com.google.android.gms.maps.GoogleMap.OnCameraChangeListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnCameraChangeListener_E@", "The callback that's invoked when the camera changes. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when the camera changes.", "history": "", "FullName": "public final void setOnCameraChangeListener (GoogleMap.OnCameraChangeListener listener)"}, "moveCamera(com.google.android.gms.maps.CameraUpdate)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#CameraUpdate_E@", "The change that should be applied to the camera."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Repositions the camera according to the instructions defined in the update. The move is instantaneous, and a subsequent @B_com#google#android#gms#maps#GoogleMap#getCameraPosition_E@ will reflect the new position. See @B_com#google#android#gms#maps#CameraUpdateFactory_E@ for a set of updates.", "history": "", "FullName": "public final void moveCamera (CameraUpdate update)"}, "setContentDescription(java.lang.String)": {"Returns": [], "Parameters": [["String", "a string to use as a description."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a contentDescription for the map. This is used to provide a spoken description of the map in accessibility mode. The default value is \"Google Map\"", "history": "", "FullName": "public final void setContentDescription (String description)"}, "addMarker(com.google.android.gms.maps.model.MarkerOptions)": {"Returns": [["", "The @B_com#google#android#gms#maps#model#Marker_E@ that was added to the map."]], "Parameters": [["@B_com#google#android#gms#maps#model#MarkerOptions_E@", "A marker options object that defines how to render the marker."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a marker to this map. The marker's icon is rendered on the map at the location Marker.position. Clicking the marker centers the camera on the marker. If Marker.title is defined, the map shows an info box with the marker's title and snippet. If the marker is draggable, long-clicking and then dragging the marker moves it.", "history": "", "FullName": "public final Marker addMarker (MarkerOptions options)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all markers, polylines, polygons, overlays, etc from the map.", "history": "", "FullName": "public final void clear ()"}, "setOnMarkerDragListener(com.google.android.gms.maps.GoogleMap.OnMarkerDragListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMarkerDragListener_E@", "The callback that's invoked on marker drag events. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when a marker is dragged.", "history": "", "FullName": "public final void setOnMarkerDragListener (GoogleMap.OnMarkerDragListener listener)"}, "addGroundOverlay(com.google.android.gms.maps.model.GroundOverlayOptions)": {"Returns": [["", "The @B_com#google#android#gms#maps#model#GroundOverlay_E@ that was added to the map."]], "Parameters": [["@B_com#google#android#gms#maps#model#GroundOverlayOptions_E@", "A ground-overlay options object that defines how to render the overlay. Options must have an image (AnchoredBitmap) and position specified."]], "Throws": [["IllegalArgumentException", "if either the image or the position is unspecified in the options."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an image to this map.", "history": "", "FullName": "public final GroundOverlay addGroundOverlay (GroundOverlayOptions options)"}, "getMyLocation()": {"Returns": [["", "The currently displayed @B_android#location#Location_E@."]], "Parameters": [], "Throws": [["IllegalStateException", "if the my-location layer is not enabled."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the currently displayed user location, or null if there is no location data available.", "history": "", "FullName": "public final Location getMyLocation ()"}, "setIndoorEnabled(boolean)": {"Returns": [["", "whether it was possible to enable indoor maps."]], "Parameters": [["boolean", "true to try to enable indoor maps; false to disable indoor maps."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether indoor maps should be enabled. Currently, indoor maps can only be shown on one map at a time and by default, this is the first map added to your application. To enable indoor maps on another map, you must first disable indoor maps on the original map. If you try to enable indoor maps when it is enabled on another map, nothing will happen and this will return false. When Indoor is not enabled for a map, all methods related to indoor will return null, or false.", "history": "", "FullName": "public final boolean setIndoorEnabled (boolean enabled)"}, "setOnMapLongClickListener(com.google.android.gms.maps.GoogleMap.OnMapLongClickListener)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#OnMapLongClickListener_E@", "The callback that's invoked when the map is long pressed. To unset the callback, use null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a callback that's invoked when the map is long pressed.", "history": "", "FullName": "public final void setOnMapLongClickListener (GoogleMap.OnMapLongClickListener listener)"}, "snapshot(com.google.android.gms.maps.GoogleMap.SnapshotReadyCallback, android.graphics.Bitmap)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#GoogleMap#SnapshotReadyCallback_E@", "Callback method invoked when the snapshot is taken."], ["Bitmap", "A preallocated bitmap. If null, behaves like @B_com#google#android#gms#maps#GoogleMap#snapshot_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Takes a snapshot of the map. This method is equivalent to @B_com#google#android#gms#maps#GoogleMap#snapshot_E@ but lets you provide a preallocated @B_android#graphics#Bitmap_E@. If the bitmap does not match the current dimensions of the map, another bitmap will be allocated that fits the map's dimensions. Although in most cases the object passed by the callback method is the same as the one given in the parameter to this method, in some cases the returned object can be different (e.g., if the view's dimensions have changed by the time the snapshot is actually taken). Thus, you should only trust the content of the bitmap passed by the callback method.", "history": "", "FullName": "public final void snapshot (GoogleMap.SnapshotReadyCallback callback, Bitmap bitmap)"}, "getMinZoomLevel()": {"Returns": [["", "The minimum zoom level available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum zoom level. This is the same for every location (unlike the maximum zoom level) but may vary between devices and map sizes.", "history": "", "FullName": "public final float getMinZoomLevel ()"}, "addTileOverlay(com.google.android.gms.maps.model.TileOverlayOptions)": {"Returns": [["", "The @B_com#google#android#gms#maps#model#TileOverlay_E@ that was added to the map."]], "Parameters": [["@B_com#google#android#gms#maps#model#TileOverlayOptions_E@", "A tile-overlay options object that defines how to render the overlay. Options must have a @B_com#google#android#gms#maps#model#TileProvider_E@ specified, otherwise an @B_java#lang#IllegalArgumentException_E@ will be thrown."]], "Throws": [["IllegalArgumentException", "if the @B_com#google#android#gms#maps#model#TileProvider_E@ is unspecified in the options."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a tile overlay to this map. See @B_com#google#android#gms#maps#model#TileOverlay_E@ for more information. Note that unlike other overlays, if the map is recreated, tile overlays are not automatically restored and must be re-added manually.", "history": "", "FullName": "public final TileOverlay addTileOverlay (TileOverlayOptions options)"}, "setPadding(int, int, int, int)": {"Returns": [], "Parameters": [["int", "the number of pixels of padding to be added on the left of the map."], ["int", "the number of pixels of padding to be added on the top of the map."], ["int", "the number of pixels of padding to be added on the right of the map."], ["int", "the number of pixels of padding to be added on the bottom of the map."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets padding on the map. This method allows you to define a visible region on the map, to signal to the map that portions of the map around the edges may be obscured, by setting padding on each of the four edges of the map. Map functions will be adapted to the padding. For example, the zoom controls, compass, copyright notices and Google logo will be moved to fit inside the defined region, camera movements will be relative to the center of the visible region, etc.", "history": "", "FullName": "public final void setPadding (int left, int top, int right, int bottom)"}, "getMapType()": {"Returns": [["", "The map type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the type of map that's currently displayed. See @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_NORMAL_E@, @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_SATELLITE_E@, @B_com#google#android#gms#maps#GoogleMap#MAP_TYPE_TERRAIN_E@ for possible values.", "history": "", "FullName": "public final int getMapType ()"}, "setMyLocationEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "True to enable; false to disable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the my-location layer. While enabled, the my-location layer continuously draws an indication of a user's current location and bearing, and displays UI controls that allow a user to interact with their location (for example, to enable or disable camera tracking of their location and bearing).", "history": "", "FullName": "public final void setMyLocationEnabled (boolean enabled)"}, "getProjection()": {"Returns": [["", "The @B_com#google#android#gms#maps#Projection_E@ of the map in its current state."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_com#google#android#gms#maps#Projection_E@ object that you can use to convert between screen coordinates and latitude/longitude coordinates. The Projection returned is a snapshot of the current projection, and will not automatically update when the camera moves. As this operation is expensive, you should get the projection only once per screen. Google Maps uses the Mercator projection to create its maps from geographic data and convert points on the map into geographic coordinates.", "history": "", "FullName": "public final Projection getProjection ()"}, "isTrafficEnabled()": {"Returns": [["", "True if traffic data is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the map is drawing traffic data. This is subject to the availability of traffic data.", "history": "", "FullName": "public final boolean isTrafficEnabled ()"}, "setBuildingsEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "true to enable the 3D buildings layer; false to disable 3D buildings."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Turns the 3D buildings layer on or off.", "history": "", "FullName": "public final void setBuildingsEnabled (boolean enabled)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.GoogleMap", "ClassDesc": "This is the main class of the Google Maps Android API and is the entry point for all methods related to the map. You cannot instantiate a @B_com#google#android#gms#maps#GoogleMap_E@ object directly, rather, you must obtain one from the getMap() method on a @B_com#google#android#gms#maps#MapFragment_E@ or @B_com#google#android#gms#maps#MapView_E@ that you have added to your application. Note: Similar to a @B_android#view#View_E@ object, a @B_com#google#android#gms#maps#GoogleMap_E@ can only be read and modified from the main thread. Calling @B_com#google#android#gms#maps#GoogleMap_E@ methods from another thread will result in an exception. To get started, read the"}