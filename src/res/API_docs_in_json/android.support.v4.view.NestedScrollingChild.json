{"Functions": {"isNestedScrollingEnabled()": {"Returns": [["boolean", "true if nested scrolling is enabled"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#setNestedScrollingEnabled_E@"], "Permissions": [], "Description": "Returns true if nested scrolling is enabled for this view. If nested scrolling is enabled and this View class implementation supports it, this view will act as a nested scrolling child view when applicable, forwarding data about the scroll operation in progress to a compatible and cooperating nested scrolling parent.", "history": "added in version 22.1.0", "FullName": "boolean isNestedScrollingEnabled ()"}, "hasNestedScrollingParent()": {"Returns": [["boolean", "whether this view has a nested scrolling parent"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this view has a nested scrolling parent. The presence of a nested scrolling parent indicates that this view has initiated a nested scroll and it was accepted by an ancestor view further up the view hierarchy.", "history": "added in version 22.1.0", "FullName": "boolean hasNestedScrollingParent ()"}, "dispatchNestedPreFling(float, float)": {"Returns": [["boolean", "true if a nested scrolling parent consumed the fling"]], "Parameters": [["float", "float: Horizontal fling velocity in pixels per second"], ["float", "float: Vertical fling velocity in pixels per second"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a fling to a nested scrolling parent before it is processed by this view. Nested pre-fling events are to nested fling events what touch intercept is to touch and what nested pre-scroll is to nested scroll. dispatchNestedPreFling offsets an opportunity for the parent view in a nested fling to fully consume the fling before the child view consumes it. If this method returns true, a nested parent view consumed the fling and this view should not scroll as a result. For a better user experience, only one view in a nested scrolling chain should consume the fling at a time. If a parent view consumed the fling this method will return false. Custom view implementations should account for this in two ways: If a custom view is paged and needs to settle to a fixed page-point, do not call dispatchNestedPreFling; consume the fling and settle to a valid position regardless. If a nested parent does consume the fling, this view should not scroll at all, even to settle back to a valid idle position. Views should also not offer fling velocities to nested parent views along an axis where scrolling is not currently supported; a @B_android#widget#ScrollView_E@ should not offer a horizontal fling velocity to its parents since scrolling along that axis is not permitted and carrying velocity along that motion does not make sense.", "history": "added in version 22.1.0", "FullName": "boolean dispatchNestedPreFling (float velocityX, float velocityY)"}, "dispatchNestedScroll(int, int, int, int, int[])": {"Returns": [["boolean", "true if the event was dispatched, false if it could not be dispatched."]], "Parameters": [["int", "int: Horizontal distance in pixels consumed by this view during this scroll step"], ["int", "int: Vertical distance in pixels consumed by this view during this scroll step"], ["int", "int: Horizontal scroll distance in pixels not consumed by this view"], ["int", "int: Horizontal scroll distance in pixels not consumed by this view"], ["int[]", "int: Optional. If not null, on return this will contain the offset in local view coordinates of this view from before this operation to after it completes. View implementations may use this to adjust expected input coordinate tracking."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#dispatchNestedPreScroll_E@"], "Permissions": [], "Description": "Dispatch one step of a nested scroll in progress. Implementations of views that support nested scrolling should call this to report info about a scroll in progress to the current nested scrolling parent. If a nested scroll is not currently in progress or nested scrolling is not @B_android#support#v4#view#NestedScrollingChild#isNestedScrollingEnabled_E@ for this view this method does nothing. Compatible View implementations should also call @B_android#support#v4#view#NestedScrollingChild#dispatchNestedPreScroll_E@ before consuming a component of the scroll event themselves.", "history": "added in version 22.1.0", "FullName": "boolean dispatchNestedScroll (int dxConsumed, int dyConsumed, int dxUnconsumed, int dyUnconsumed, int[] offsetInWindow)"}, "startNestedScroll(int)": {"Returns": [["boolean", "true if a cooperative parent was found and nested scrolling has been enabled for the current gesture."]], "Parameters": [["int", "int: Flags consisting of a combination of @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_HORIZONTAL_E@ and/or @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_VERTICAL_E@."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#stopNestedScroll_E@", "@B_android#support#v4#view#NestedScrollingChild#dispatchNestedPreScroll_E@", "@B_android#support#v4#view#NestedScrollingChild#dispatchNestedScroll_E@"], "Permissions": [], "Description": "Begin a nestable scroll operation along the given axes. A view starting a nested scroll promises to abide by the following contract: The view will call startNestedScroll upon initiating a scroll operation. In the case of a touch scroll this corresponds to the initial @B_android#view#MotionEvent#ACTION_DOWN_E@. In the case of touch scrolling the nested scroll will be terminated automatically in the same manner as @B_android#view#ViewParent#requestDisallowInterceptTouchEvent_E@. In the event of programmatic scrolling the caller must explicitly call @B_android#support#v4#view#NestedScrollingChild#stopNestedScroll_E@ to indicate the end of the nested scroll. If startNestedScroll returns true, a cooperative parent was found. If it returns false the caller may ignore the rest of this contract until the next scroll. Calling startNestedScroll while a nested scroll is already in progress will return true. At each incremental step of the scroll the caller should invoke @B_android#support#v4#view#NestedScrollingChild#dispatchNestedPreScroll_E@ once it has calculated the requested scrolling delta. If it returns true the nested scrolling parent at least partially consumed the scroll and the caller should adjust the amount it scrolls by. After applying the remainder of the scroll delta the caller should invoke @B_android#support#v4#view#NestedScrollingChild#dispatchNestedScroll_E@, passing both the delta consumed and the delta unconsumed. A nested scrolling parent may treat these values differently. See @B_android#support#v4#view#NestedScrollingParent#onNestedScroll_E@.", "history": "added in version 22.1.0", "FullName": "boolean startNestedScroll (int axes)"}, "dispatchNestedFling(float, float, boolean)": {"Returns": [["boolean", "true if the nested scrolling parent consumed or otherwise reacted to the fling"]], "Parameters": [["float", "float: Horizontal fling velocity in pixels per second"], ["float", "float: Vertical fling velocity in pixels per second"], ["boolean", "boolean: true if the child consumed the fling, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatch a fling to a nested scrolling parent. This method should be used to indicate that a nested scrolling child has detected suitable conditions for a fling. Generally this means that a touch scroll has ended with a @B_android#view#VelocityTracker_E@ in the direction of scrolling that meets or exceeds the @B_android#view#ViewConfiguration#getScaledMinimumFlingVelocity_E@ along a scrollable axis. If a nested scrolling child view would normally fling but it is at the edge of its own content, it can use this method to delegate the fling to its nested scrolling parent instead. The parent may optionally consume the fling or observe a child fling.", "history": "added in version 22.1.0", "FullName": "boolean dispatchNestedFling (float velocityX, float velocityY, boolean consumed)"}, "setNestedScrollingEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable nested scrolling, false to disable"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#isNestedScrollingEnabled_E@"], "Permissions": [], "Description": "Enable or disable nested scrolling for this view. If this property is set to true the view will be permitted to initiate nested scrolling operations with a compatible parent view in the current hierarchy. If this view does not implement nested scrolling this will have no effect. Disabling nested scrolling while a nested scroll is in progress has the effect of @B_android#support#v4#view#NestedScrollingChild#stopNestedScroll_E@ the nested scroll.", "history": "added in version 22.1.0", "FullName": "void setNestedScrollingEnabled (boolean enabled)"}, "dispatchNestedPreScroll(int, int, int[], int[])": {"Returns": [["boolean", "true if the parent consumed some or all of the scroll delta"]], "Parameters": [["int", "int: Horizontal scroll distance in pixels"], ["int", "int: Vertical scroll distance in pixels"], ["int[]", "int: Output. If not null, consumed[0] will contain the consumed component of dx and consumed[1] the consumed dy."], ["int[]", "int: Optional. If not null, on return this will contain the offset in local view coordinates of this view from before this operation to after it completes. View implementations may use this to adjust expected input coordinate tracking."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#dispatchNestedScroll_E@"], "Permissions": [], "Description": "Dispatch one step of a nested scroll in progress before this view consumes any portion of it. Nested pre-scroll events are to nested scroll events what touch intercept is to touch. dispatchNestedPreScroll offers an opportunity for the parent view in a nested scrolling operation to consume some or all of the scroll operation before the child view consumes it.", "history": "added in version 22.1.0", "FullName": "boolean dispatchNestedPreScroll (int dx, int dy, int[] consumed, int[] offsetInWindow)"}, "stopNestedScroll()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#NestedScrollingChild#startNestedScroll_E@"], "Permissions": [], "Description": "Stop a nested scroll in progress. Calling this method when a nested scroll is not currently in progress is harmless.", "history": "added in version 22.1.0", "FullName": "void stopNestedScroll ()"}}, "Inheritance": [], "ClassName": "android.support.v4.view.NestedScrollingChild", "ClassDesc": "This interface should be implemented by https:##developer#android#com@B_android#view#View_E@ subclasses that wish to support dispatching nested scrolling operations to a cooperating parent https:##developer#android#com@B_android#view#ViewGroup_E@. Classes implementing this interface should create a final instance of a @B_android#support#v4#view#NestedScrollingChildHelper_E@ as a field and delegate any View methods to the NestedScrollingChildHelper methods of the same signature. Views invoking nested scrolling functionality should always do so from the relevant @B_android#support#v4#view#ViewCompat_E@, @B_android#support#v4#view#ViewGroupCompat_E@ or @B_android#support#v4#view#ViewParentCompat_E@ compatibility shim static methods. This ensures interoperability with nested scrolling views on Android 5.0 Lollipop and newer."}