{"Functions": {"getDecomposition()": {"Returns": [["int", "the decomposition mode"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#Collator#setDecomposition_E@", "@B_java#text#Collator_E@"], "Permissions": [], "Description": "Get the decomposition mode of this Collator. Decomposition mode determines how Unicode composed characters are handled. Adjusting decomposition mode allows the user to select between faster and more complete collation behavior. The three values for decomposition mode are: NO_DECOMPOSITION, CANONICAL_DECOMPOSITION FULL_DECOMPOSITION. See the documentation for these three constants for a description of their meaning.", "history": "Added in API level 1", "FullName": "public int getDecomposition ()"}, "equals(java.lang.String, java.lang.String)": {"Returns": [["boolean", "true if the strings are equal according to the collation rules. false, otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string to be compared with."], ["@B_java#lang#String_E@", "String: the target string to be compared with."]], "Throws": [], "SeeAlso": ["@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Convenience method for comparing the equality of two strings based on this Collator's collation rules.", "history": "added in API level 1", "FullName": "public boolean equals (String source, String target)"}, "Collator()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#Collator#getInstance_E@"], "Permissions": [], "Description": "Default constructor. This constructor is protected so subclasses can get access to it. Users typically create a Collator sub-class by calling the factory method getInstance.", "history": "Added in API level 1", "FullName": "protected Collator ()"}, "getInstance()": {"Returns": [["@B_java#text#Collator_E@", "the Collator for the default locale.(for example, en_US)"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Locale#getDefault_E@"], "Permissions": [], "Description": "Gets the Collator for the current default locale. The default locale is determined by java.util.Locale.getDefault.", "history": "Added in API level 1", "FullName": "public static Collator getInstance ()"}, "equals(java.lang.String,java.lang.String)": {"Returns": [["boolean", "true if the strings are equal according to the collation rules. false, otherwise."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string to be compared with."], ["@B_java#lang#String_E@", "String: the target string to be compared with."]], "Throws": [], "SeeAlso": ["@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Convenience method for comparing the equality of two strings based on this Collator's collation rules.", "history": "Added in API level 1", "FullName": "public boolean equals (String source, String target)"}, "compare(java.lang.String,java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string."], ["@B_java#lang#String_E@", "String: the target string."]], "Throws": [], "SeeAlso": ["@B_java#text#CollationKey_E@", "@B_java#text#Collator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source string to the target string according to the collation rules for this Collator. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target string. See the Collator class description for an example of use. For a one time comparison, this method has the best performance. If a given String will be involved in multiple comparisons, CollationKey.compareTo has the best performance. See the Collator class description for an example using CollationKeys.", "history": "Added in API level 1", "FullName": "public abstract int compare (String source, String target)"}, "compare(java.lang.Object,java.lang.Object)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_java#lang#ClassCastException_E@", "the arguments cannot be cast to Strings."]], "SeeAlso": ["@B_java#util#Comparator_E@"], "Permissions": [], "Description": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. This implementation merely returns compare((String)o1, (String)o2) .", "history": "Added in API level 1", "FullName": "public int compare (Object o1, Object o2)"}, "setDecomposition(int)": {"Returns": [], "Parameters": [["int", "int: the new decomposition mode."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the given value is not a valid decomposition mode."]], "SeeAlso": ["@B_java#text#Collator#getDecomposition_E@", "@B_java#text#Collator_E@"], "Permissions": [], "Description": "Set the decomposition mode of this Collator. See getDecomposition for a description of decomposition mode.", "history": "Added in API level 1", "FullName": "public void setDecomposition (int decompositionMode)"}, "setStrength(int)": {"Returns": [], "Parameters": [["int", "int: the new strength value."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the new strength value is not one of PRIMARY, SECONDARY, TERTIARY or IDENTICAL."]], "SeeAlso": ["@B_java#text#Collator#getStrength_E@", "@B_java#text#Collator_E@"], "Permissions": [], "Description": "Sets this Collator's strength property. The strength property determines the minimum level of difference considered significant during comparison. See the Collator class description for an example of use.", "history": "Added in API level 1", "FullName": "public void setStrength (int newStrength)"}, "compare(java.lang.Object, java.lang.Object)": {"Returns": [["int", "a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second."]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [["@B_java#lang#ClassCastException_E@", "the arguments cannot be cast to Strings."]], "SeeAlso": ["@B_java#util#Comparator_E@"], "Permissions": [], "Description": "Compares its two arguments for order. Returns a negative integer, zero, or a positive integer as the first argument is less than, equal to, or greater than the second. This implementation merely returns compare((String)o1, (String)o2) .", "history": "added in API level 1", "FullName": "public int compare (Object o1, Object o2)"}, "compare(java.lang.String, java.lang.String)": {"Returns": [["int", "Returns an integer value. Value is less than zero if source is less than target, value is zero if source and target are equal, value is greater than zero if source is greater than target."]], "Parameters": [["@B_java#lang#String_E@", "String: the source string."], ["@B_java#lang#String_E@", "String: the target string."]], "Throws": [], "SeeAlso": ["@B_java#text#CollationKey_E@", "@B_java#text#Collator#getCollationKey_E@"], "Permissions": [], "Description": "Compares the source string to the target string according to the collation rules for this Collator. Returns an integer less than, equal to or greater than zero depending on whether the source String is less than, equal to or greater than the target string. See the Collator class description for an example of use. For a one time comparison, this method has the best performance. If a given String will be involved in multiple comparisons, CollationKey.compareTo has the best performance. See the Collator class description for an example using CollationKeys.", "history": "added in API level 1", "FullName": "public abstract int compare (String source, String target)"}, "getCollationKey(java.lang.String)": {"Returns": [["@B_java#text#CollationKey_E@", "the CollationKey for the given String based on this Collator's collation rules. If the source String is null, a null CollationKey is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: the string to be transformed into a collation key."]], "Throws": [], "SeeAlso": ["@B_java#text#CollationKey_E@", "@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Transforms the String into a series of bits that can be compared bitwise to other CollationKeys. CollationKeys provide better performance than Collator.compare when Strings are involved in multiple comparisons. See the Collator class description for an example using CollationKeys.", "history": "Added in API level 1", "FullName": "public abstract CollationKey getCollationKey (String source)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this Collator is the same as that Collator; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the Collator to be compared with this."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the equality of two Collators.", "history": "Added in API level 1", "FullName": "public boolean equals (Object that)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "An array of locales for which localized Collator instances are available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all locales for which the getInstance methods of this class can return localized instances.", "history": "Added in API level 1", "FullName": "public static Locale[] getAvailableLocales ()"}, "getStrength()": {"Returns": [["int", "this Collator's current strength property."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#text#Collator#setStrength_E@", "@B_java#text#Collator_E@"], "Permissions": [], "Description": "Returns this Collator's strength property. The strength property determines the minimum level of difference considered significant during comparison. See the Collator class description for an example of use.", "history": "Added in API level 1", "FullName": "public int getStrength ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this collator."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Cloneable_E@"], "Permissions": [], "Description": "Returns a new collator with the same decomposition mode and strength value as this collator.", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "getInstance(java.util.Locale)": {"Returns": [["@B_java#text#Collator_E@", "the Collator for the desired locale."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the desired locale."]], "Throws": [], "SeeAlso": ["@B_java#util#Locale_E@", "@B_java#util#ResourceBundle_E@"], "Permissions": [], "Description": "Gets the Collator for the desired locale.", "history": "Added in API level 1", "FullName": "public static Collator getInstance (Locale desiredLocale)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Generates the hash code for this Collator.", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}}, "Inheritance": [], "ClassName": "java.text.Collator", "ClassDesc": "The Collator class performs locale-sensitive String comparison. You use this class to build searching and sorting routines for natural language text. Collator is an abstract base class. Subclasses implement specific collation strategies. One subclass, RuleBasedCollator, is currently provided with the Java Platform and is applicable to a wide set of languages. Other subclasses may be created to handle more specialized needs. Like other locale-sensitive classes, you can use the static factory method, getInstance, to obtain the appropriate Collator object for a given locale. You will only need to look at the subclasses of Collator if you need to understand the details of a particular collation strategy or if you need to modify that strategy. The following example shows how to compare two strings using the Collator for the default locale. You can set a Collator's strength property to determine the level of difference considered significant in comparisons. Four strengths are provided: PRIMARY, SECONDARY, TERTIARY, and IDENTICAL. The exact assignment of strengths to language features is locale dependant. For example, in Czech, \"e\" and \"f\" are considered primary differences, while \"e\" and \"\u011b\" are secondary differences, \"e\" and \"E\" are tertiary differences and \"e\" and \"e\" are identical. The following shows how both case and accents could be ignored for US English. For comparing Strings exactly once, the compare method provides the best performance. When sorting a list of Strings however, it is generally necessary to compare each String multiple times. In this case, CollationKeys provide better performance. The CollationKey class converts a String to a series of bits that can be compared bitwise against other CollationKeys. A CollationKey is created by a Collator object for a given String. CollationKeys from different Collators can not be compared. See the class description for @B_java#text#CollationKey_E@ for an example using CollationKeys."}