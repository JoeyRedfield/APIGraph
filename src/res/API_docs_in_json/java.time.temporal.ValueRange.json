{"Functions": {"checkValidValue(long,java.time.temporal.TemporalField)": {"Returns": [["long", "the value that was passed in"]], "Parameters": [["long", "long: the value to check"], ["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field being checked, may be null"]], "Throws": [], "SeeAlso": ["@B_java#time#temporal#ValueRange#isValidValue_E@"], "Permissions": [], "Description": "Checks that the specified value is valid. This validates that the value is within the valid range of values. The field is only used to improve the error message.", "history": "Added in API level 26", "FullName": "public long checkValidValue (long value, TemporalField field)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this range, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this range as a String. The format will be '{min}/{largestMin} - {smallestMax}/{max}', where the largestMin or smallestMax sections may be omitted, together with associated slash, if they are the same as the min or max.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "isValidIntValue(long)": {"Returns": [["boolean", "true if the value is valid and fits in an int"]], "Parameters": [["long", "long: the value to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the value is within the valid range and that all values in the range fit in an int. This method combines @B_java#time#temporal#ValueRange#isIntValue_E@ and @B_java#time#temporal#ValueRange#isValidValue_E@.", "history": "Added in API level 26", "FullName": "public boolean isValidIntValue (long value)"}, "isValidValue(long)": {"Returns": [["boolean", "true if the value is valid"]], "Parameters": [["long", "long: the value to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the value is within the valid range. This checks that the value is within the stored range of values.", "history": "Added in API level 26", "FullName": "public boolean isValidValue (long value)"}, "getMaximum()": {"Returns": [["long", "the maximum value for this field"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the maximum value that the field can take. For example, the ISO day-of-month runs to between 28 and 31 days. The maximum is therefore 31.", "history": "Added in API level 26", "FullName": "public long getMaximum ()"}, "of(long, long, long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for min, smallest max, largest max, not null"]], "Parameters": [["long", "long: the minimum value"], ["long", "long: the smallest maximum value"], ["long", "long: the largest maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimum is greater than the smallest maximum, or the smallest maximum is greater than the largest maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a variable value range. This factory obtains a range where the minimum value is fixed and the maximum value may vary. For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.", "history": "added in API level 26", "FullName": "public static ValueRange of (long min, long maxSmallest, long maxLargest)"}, "of(long, long, long, long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for smallest min, largest min, smallest max, largest max, not null"]], "Parameters": [["long", "long: the smallest minimum value"], ["long", "long: the largest minimum value"], ["long", "long: the smallest maximum value"], ["long", "long: the largest maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the smallest minimum is greater than the smallest maximum, or the smallest maximum is greater than the largest maximum or the largest minimum is greater than the largest maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a fully variable value range. This factory obtains a range where both the minimum and maximum value may vary.", "history": "added in API level 26", "FullName": "public static ValueRange of (long minSmallest, long minLargest, long maxSmallest, long maxLargest)"}, "getLargestMinimum()": {"Returns": [["long", "the largest possible minimum value for this field"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the largest possible minimum value that the field can take. For example, the ISO day-of-month always starts at 1. The largest minimum is therefore 1.", "history": "Added in API level 26", "FullName": "public long getLargestMinimum ()"}, "getSmallestMaximum()": {"Returns": [["long", "the smallest possible maximum value for this field"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the smallest possible maximum value that the field can take. For example, the ISO day-of-month runs to between 28 and 31 days. The smallest maximum is therefore 28.", "history": "Added in API level 26", "FullName": "public long getSmallestMaximum ()"}, "checkValidIntValue(long,java.time.temporal.TemporalField)": {"Returns": [["int", "the value that was passed in"]], "Parameters": [["long", "long: the value to check"], ["@B_java#time#temporal#TemporalField_E@", "TemporalField: the field being checked, may be null"]], "Throws": [], "SeeAlso": ["@B_java#time#temporal#ValueRange#isValidIntValue_E@"], "Permissions": [], "Description": "Checks that the specified value is valid and fits in an int. This validates that the value is within the valid range of values and that all valid values are within the bounds of an int. The field is only used to improve the error message.", "history": "Added in API level 26", "FullName": "public int checkValidIntValue (long value, TemporalField field)"}, "getMinimum()": {"Returns": [["long", "the minimum value for this field"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minimum value that the field can take. For example, the ISO day-of-month always starts at 1. The minimum is therefore 1.", "history": "Added in API level 26", "FullName": "public long getMinimum ()"}, "of(long,long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for min, max, not null"]], "Parameters": [["long", "long: the minimum value"], ["long", "long: the maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimum is greater than the maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a fixed value range. This factory obtains a range where the minimum and maximum values are fixed. For example, the ISO month-of-year always runs from 1 to 12.", "history": "Added in API level 26", "FullName": "public static ValueRange of (long min, long max)"}, "of(long,long,long,long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for smallest min, largest min, smallest max, largest max, not null"]], "Parameters": [["long", "long: the smallest minimum value"], ["long", "long: the largest minimum value"], ["long", "long: the smallest maximum value"], ["long", "long: the largest maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the smallest minimum is greater than the smallest maximum, or the smallest maximum is greater than the largest maximum or the largest minimum is greater than the largest maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a fully variable value range. This factory obtains a range where both the minimum and maximum value may vary.", "history": "Added in API level 26", "FullName": "public static ValueRange of (long minSmallest, long minLargest, long maxSmallest, long maxLargest)"}, "isFixed()": {"Returns": [["boolean", "true if the set of values is fixed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Is the value range fixed and fully known. For example, the ISO day-of-month runs from 1 to between 28 and 31. Since there is uncertainty about the maximum value, the range is not fixed. However, for the month of January, the range is always 1 to 31, thus it is fixed.", "history": "Added in API level 26", "FullName": "public boolean isFixed ()"}, "of(long, long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for min, max, not null"]], "Parameters": [["long", "long: the minimum value"], ["long", "long: the maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimum is greater than the maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a fixed value range. This factory obtains a range where the minimum and maximum values are fixed. For example, the ISO month-of-year always runs from 1 to 12.", "history": "added in API level 26", "FullName": "public static ValueRange of (long min, long max)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other range"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this range is equal to another range. The comparison is based on the four values, minimum, largest minimum, smallest maximum and maximum. Only objects of type ValueRange are compared, other types return false.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "of(long,long,long)": {"Returns": [["@B_java#time#temporal#ValueRange_E@", "the ValueRange for min, smallest max, largest max, not null"]], "Parameters": [["long", "long: the minimum value"], ["long", "long: the smallest maximum value"], ["long", "long: the largest maximum value"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimum is greater than the smallest maximum, or the smallest maximum is greater than the largest maximum"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a variable value range. This factory obtains a range where the minimum value is fixed and the maximum value may vary. For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.", "history": "Added in API level 26", "FullName": "public static ValueRange of (long min, long maxSmallest, long maxLargest)"}, "isIntValue()": {"Returns": [["boolean", "true if a valid value always fits in an int"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if all values in the range fit in an int. This checks that all valid values are within the bounds of an int. For example, the ISO month-of-year has values from 1 to 12, which fits in an int. By comparison, ISO nano-of-day runs from 1 to 86,400,000,000,000 which does not fit in an int. This implementation uses @B_java#time#temporal#ValueRange#getMinimum_E@ and @B_java#time#temporal#ValueRange#getMaximum_E@.", "history": "Added in API level 26", "FullName": "public boolean isIntValue ()"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this range.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.temporal.ValueRange", "ClassDesc": "The range of valid values for a date-time field. All @B_java#time#temporal#TemporalField_E@ instances have a valid range of values. For example, the ISO day-of-month runs from 1 to somewhere between 28 and 31. This class captures that valid range. It is important to be aware of the limitations of this class. Only the minimum and maximum values are provided. It is possible for there to be invalid values within the outer range. For example, a weird field may have valid values of 1, 2, 4, 6, 7, thus have a range of '1 - 7', despite that fact that values 3 and 5 are invalid. Instances of this class are not tied to a specific field."}