{"Functions": {"getSourceString()": {"Returns": [["@B_java#lang#String_E@", "the source string of this CollationKey"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String that this CollationKey represents.", "history": "Added in API level 1", "FullName": "public String getSourceString ()"}, "compareTo(java.text.CollationKey)": {"Returns": [["int", "Returns an integer value. Value is less than zero if this is less than target, value is zero if this and target are equal and value is greater than zero if this is greater than target."]], "Parameters": [["@B_java#text#CollationKey_E@", "CollationKey: target CollationKey"]], "Throws": [], "SeeAlso": ["@B_java#util#Comparator#compare_E@"], "Permissions": [], "Description": "Compare this CollationKey to the target CollationKey. The collation rules of the Collator object which created these keys are applied.", "history": "Added in API level 1", "FullName": "public abstract int compareTo (CollationKey target)"}, "CollationKey(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the source string"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if source is null"]], "SeeAlso": [], "Permissions": [], "Description": "CollationKey constructor.", "history": "Added in API level 9", "FullName": "protected CollationKey (String source)"}, "toByteArray()": {"Returns": [["byte[]", "a byte array representation of the CollationKey"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the CollationKey to a sequence of bits. If two CollationKeys could be legitimately compared, then one could compare the byte arrays for each of those keys to obtain the same result. Byte arrays are organized most significant byte first.", "history": "Added in API level 1", "FullName": "public abstract byte[] toByteArray ()"}}, "Inheritance": [], "ClassName": "java.text.CollationKey", "ClassDesc": "A CollationKey represents a String under the rules of a specific Collator object. Comparing two CollationKeys returns the relative order of the Strings they represent. Using CollationKeys to compare Strings is generally faster than using Collator.compare. Thus, when the Strings must be compared multiple times, for example when sorting a list of Strings. It's more efficient to use CollationKeys. You can not create CollationKeys directly. Rather, generate them by calling Collator.getCollationKey. You can only compare CollationKeys generated from the same Collator object. Generating a CollationKey for a String involves examining the entire String and converting it to series of bits that can be compared bitwise. This allows fast comparisons once the keys are generated. The cost of generating keys is recouped in faster comparisons when Strings need to be compared many times. On the other hand, the result of a comparison is often determined by the first couple of characters of each String. Collator.compare examines only as many characters as it needs which allows it to be faster when doing single comparisons. The following example shows how CollationKeys might be used to sort a list of Strings."}