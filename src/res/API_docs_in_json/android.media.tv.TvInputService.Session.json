{"Functions": {"onTimeShiftPlay(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI of a recorded TV program."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Called when the application requests to play a given recorded TV program.", "history": "Added in API level 24", "FullName": "public void onTimeShiftPlay (Uri recordedProgramUri)"}, "onTimeShiftGetCurrentPosition()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@"], "Permissions": [], "Description": "Returns the current position for time shifting, in milliseconds since the epoch. Returns @B_android#media#tv#TvInputManager#TIME_SHIFT_INVALID_TIME_E@ if the position is unknown at the moment. The current position for time shifting is the same as the current position of playback. It should be equal to or greater than the start position reported by @B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@. When playback is completed, the current position should stay where the playback ends, in other words, the returned value of this mehtod should be equal to the start position plus the duration of the program.", "history": "Added in API level 23", "FullName": "public long onTimeShiftGetCurrentPosition ()"}, "notifyTrackSelected(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The type of the selected track. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the selected track."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onSelectTrack_E@"], "Permissions": [], "Description": "Sends the type and ID of a selected track. This is used to inform the application that a specific track is selected. The TV input service must call this method as soon as a track is selected either by default or in response to a call to @B_android#media#tv#TvInputService#Session#onSelectTrack_E@. The selected track ID for a given type is maintained in the framework until the next call to this method even after the entire track list is updated (but is reset when the session is tuned to a new channel), so care must be taken not to result in an obsolete track ID.", "history": "added in API level 21", "FullName": "public void notifyTrackSelected (int type, String trackId)"}, "onTune(android.net.Uri)": {"Returns": [["boolean", "true if the tuning was successful, false otherwise."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI of the channel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel. No video will be displayed until @B_android#media#tv#TvInputService#Session#notifyVideoAvailable_E@ is called. Also, @B_android#media#tv#TvInputService#Session#notifyVideoUnavailable_E@ should be called when the TV input cannot continue playing the given channel.", "history": "Added in API level 21", "FullName": "public abstract boolean onTune (Uri channelUri)"}, "notifyVideoAvailable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyVideoUnavailable_E@"], "Permissions": [], "Description": "Informs the application that the video is now available for watching. Video is blocked until this method is called. The TV input service must call this method as soon as the content rendered onto its surface is ready for viewing. This method must be called each time @B_android#media#tv#TvInputService#Session#onTune_E@ is called.", "history": "Added in API level 21", "FullName": "public void notifyVideoAvailable ()"}, "onTimeShiftPause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Called when the application requests to pause playback.", "history": "Added in API level 23", "FullName": "public void onTimeShiftPause ()"}, "onTimeShiftGetStartPosition()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Returns the start position for time shifting, in milliseconds since the epoch. Returns @B_android#media#tv#TvInputManager#TIME_SHIFT_INVALID_TIME_E@ if the position is unknown at the moment. The start position for time shifting indicates the earliest possible time the user can seek to. Initially this is equivalent to the time when the implementation starts recording. Later it may be adjusted because there is insufficient space or the duration of recording is limited by the implementation. The application does not allow the user to seek to a position earlier than the start position. For playback of a recorded program initiated by @B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@, the start position should be 0 and does not change.", "history": "Added in API level 23", "FullName": "public long onTimeShiftGetStartPosition ()"}, "onSelectTrack(int,java.lang.String)": {"Returns": [["boolean", "true if the track selection was successful, false otherwise."]], "Parameters": [["int", "int: The type of the track to select. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the track to select. null means to unselect the current track for a given type. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyTrackSelected_E@"], "Permissions": [], "Description": "Selects a given track. If this is done successfully, the implementation should call @B_android#media#tv#TvInputService#Session#notifyTrackSelected_E@ to help applications maintain the up-to-date list of the selected tracks.", "history": "Added in API level 21", "FullName": "public boolean onSelectTrack (int type, String trackId)"}, "onAppPrivateCommand(java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Name of the command to be performed. This must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Any data to include with the command."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Processes a private command sent from the application to the TV input. This can be used to provide domain-specific features that are only known between certain TV inputs and their clients.", "history": "Added in API level 24", "FullName": "public void onAppPrivateCommand (String action, Bundle data)"}, "onTouchEvent(android.view.MotionEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onTouchEvent_E@"], "Permissions": [], "Description": "Implement this method to handle touch screen motion events on the current input session.", "history": "Added in API level 21", "FullName": "public boolean onTouchEvent (MotionEvent event)"}, "layoutSurface(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: Left position in pixels, relative to the overlay view."], ["int", "int: Top position in pixels, relative to the overlay view."], ["int", "int: Right position in pixels, relative to the overlay view."], ["int", "int: Bottom position in pixels, relative to the overlay view."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onOverlayViewSizeChanged_E@"], "Permissions": [], "Description": "Assigns a size and position to the surface passed in @B_android#media#tv#TvInputService#Session#onSetSurface_E@. The position is relative to the overlay view that sits on top of this surface.", "history": "Added in API level 23", "FullName": "public void layoutSurface (int left, int top, int right, int bottom)"}, "onKeyMultiple(int,int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "Added in API level 21", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "TvInputService.Session(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context of the application"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new Session.", "history": "Added in API level 21", "FullName": "public TvInputService.Session (Context context)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: always returns false (doesn't handle the event). Override this to intercept key down events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "Added in API level 21", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onSetSurface(android.view.Surface)": {"Returns": [["boolean", "true if the surface was set successfully, false otherwise."]], "Parameters": [["@B_android#view#Surface_E@", "Surface: The surface to be used for video rendering. Can be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application sets the surface. The TV input service should render video onto the given surface. When called with null, the input service should immediately free any references to the currently set surface and stop using it.", "history": "Added in API level 21", "FullName": "public abstract boolean onSetSurface (Surface surface)"}, "notifyTrackSelected(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: The type of the selected track. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the selected track."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onSelectTrack_E@"], "Permissions": [], "Description": "Sends the type and ID of a selected track. This is used to inform the application that a specific track is selected. The TV input service must call this method as soon as a track is selected either by default or in response to a call to @B_android#media#tv#TvInputService#Session#onSelectTrack_E@. The selected track ID for a given type is maintained in the framework until the next call to this method even after the entire track list is updated (but is reset when the session is tuned to a new channel), so care must be taken not to result in an obsolete track ID.", "history": "Added in API level 21", "FullName": "public void notifyTrackSelected (int type, String trackId)"}, "onKeyMultiple(int, int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["int", "int: The number of times the action was made."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyMultiple_E@: always returns false (doesn't handle the event). Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "added in API level 21", "FullName": "public boolean onKeyMultiple (int keyCode, int count, KeyEvent event)"}, "notifyTracksChanged(java.util.List<android.media.tv.TvTrackInfo>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: A list which includes track information."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sends the list of all audio/video/subtitle tracks. The is used by the framework to maintain the track information for a given session, which in turn is used by @B_android#media#tv#TvView#getTracks_E@ for the application to retrieve metadata for a given track type. The TV input service must call this method as soon as the track information becomes available or is updated. Note that in a case where a part of the information for a certain track is updated, it is not necessary to create a new @B_android#media#tv#TvTrackInfo_E@ object with a different track ID.", "history": "Added in API level 21", "FullName": "public void notifyTracksChanged (List<TvTrackInfo> tracks)"}, "onGenericMotionEvent(android.view.MotionEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onGenericMotionEvent_E@"], "Permissions": [], "Description": "Implement this method to handle generic motion events on the current input session.", "history": "Added in API level 21", "FullName": "public boolean onGenericMotionEvent (MotionEvent event)"}, "onCreateOverlayView()": {"Returns": [["@B_android#view#View_E@", "a view attached to the overlay window"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the application requests to create an overlay view. Each session implementation can override this method and return its own view.", "history": "Added in API level 21", "FullName": "public View onCreateOverlayView ()"}, "onKeyLongPress(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event). Override this to intercept key long press events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "added in API level 21", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "onTimeShiftSeekTo(long)": {"Returns": [], "Parameters": [["long", "long: The time position to seek to, in milliseconds since the epoch."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Called when the application requests to seek to a specified time position. Normally, the position is given within range between the start and the current time, inclusively. The implementation is expected to seek to the nearest time position if the given position is not in the range.", "history": "Added in API level 23", "FullName": "public void onTimeShiftSeekTo (long timeMs)"}, "onOverlayViewSizeChanged(int,int)": {"Returns": [], "Parameters": [["int", "int: The width of the overlay view."], ["int", "int: The height of the overlay view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the size of the overlay view is changed by the application. This is always called at least once when the session is created regardless of whether the overlay view is enabled or not. The overlay view size is the same as the containing @B_android#media#tv#TvView_E@. Note that the size of the underlying surface can be different if the surface was changed by calling @B_android#media#tv#TvInputService#Session#layoutSurface_E@.", "history": "Added in API level 23", "FullName": "public void onOverlayViewSizeChanged (int width, int height)"}, "onSurfaceChanged(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The new PixelFormat of the surface."], ["int", "int: The new width of the surface."], ["int", "int: The new height of the surface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after any structural changes (format or size) have been made to the surface passed in @B_android#media#tv#TvInputService#Session#onSetSurface_E@. This method is always called at least once, after @B_android#media#tv#TvInputService#Session#onSetSurface_E@ is called with non-null surface.", "history": "Added in API level 21", "FullName": "public void onSurfaceChanged (int format, int width, int height)"}, "notifyTimeShiftStatusChanged(int)": {"Returns": [], "Parameters": [["int", "int: The current time shift status. Should be one of the followings. TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE TvInputManager#TIME_SHIFT_STATUS_AVAILABLE Value is @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_UNKNOWN_E@, @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED_E@, @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE_E@, or @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_AVAILABLE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs the application that the time shift status is changed. Prior to calling this method, the application assumes the status @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_UNKNOWN_E@. Right after the session is created, it is important to invoke the method with the status @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_AVAILABLE_E@ if the implementation does support time shifting, or @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED_E@ otherwise. Failure to notifying the current status change immediately might result in an undesirable behavior in the application such as hiding the play controls. If the status @B_android#media#tv#TvInputManager#TIME_SHIFT_STATUS_AVAILABLE_E@ is reported, the application assumes it can pause/resume playback, seek to a specified time position and set playback rate and audio mode. The implementation should override @B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@, @B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@, @B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@, @B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@, @B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@ and @B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@.", "history": "Added in API level 23", "FullName": "public void notifyTimeShiftStatusChanged (int status)"}, "notifyVideoUnavailable(int)": {"Returns": [], "Parameters": [["int", "int: The reason why the video became unavailable: TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY Value is @B_android#media#tv#TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN_E@, @B_android#media#tv#TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING_E@, @B_android#media#tv#TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL_E@, @B_android#media#tv#TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING_E@, or @B_android#media#tv#TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY_E@"]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyVideoAvailable_E@"], "Permissions": [], "Description": "Informs the application that the video became unavailable for some reason. This is primarily used to signal the application to block the screen not to show any intermittent video artifacts.", "history": "Added in API level 21", "FullName": "public void notifyVideoUnavailable (int reason)"}, "onTune(android.net.Uri,android.os.Bundle)": {"Returns": [["boolean", "true if the tuning was successful, false otherwise."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI of the channel."], ["@B_android#os#Bundle_E@", "Bundle: Domain-specific data for this tune request. Keys must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients. The default implementation calls @B_android#media#tv#TvInputService#Session#onTune_E@.", "history": "Added in API level 24", "FullName": "public boolean onTune (Uri channelUri, Bundle params)"}, "onTrackballEvent(android.view.MotionEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["@B_android#view#MotionEvent_E@", "MotionEvent: The motion event being received."]], "Throws": [], "SeeAlso": ["@B_android#view#View#onTrackballEvent_E@"], "Permissions": [], "Description": "Implement this method to handle trackball events on the current input session.", "history": "Added in API level 21", "FullName": "public boolean onTrackballEvent (MotionEvent event)"}, "onTimeShiftResume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSetPlaybackParams_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Called when the application requests to resume playback.", "history": "Added in API level 23", "FullName": "public void onTimeShiftResume ()"}, "onTimeShiftSetPlaybackParams(android.media.PlaybackParams)": {"Returns": [], "Parameters": [["@B_android#media#PlaybackParams_E@", "PlaybackParams: The playback params."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onTimeShiftPlay_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftResume_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftPause_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftSeekTo_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetStartPosition_E@", "@B_android#media#tv#TvInputService#Session#onTimeShiftGetCurrentPosition_E@"], "Permissions": [], "Description": "Called when the application sets playback parameters containing the speed and audio mode. Once the playback parameters are set, the implementation should honor the current settings until the next tune request. Pause/resume/seek request does not reset the parameters previously set.", "history": "Added in API level 23", "FullName": "public void onTimeShiftSetPlaybackParams (PlaybackParams params)"}, "onRelease()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the session is released.", "history": "Added in API level 21", "FullName": "public abstract void onRelease ()"}, "setOverlayViewEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if you want to enable the overlay view. false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables or disables the overlay view. By default, the overlay view is disabled. Must be called explicitly after the session is created to enable the overlay view. The TV input service can disable its overlay view when the size of the overlay view is insufficient to display the whole information, such as when used in Picture-in-picture. Override @B_android#media#tv#TvInputService#Session#onOverlayViewSizeChanged_E@ to get the size of the overlay view, which then can be used to determine whether to enable/disable the overlay view.", "history": "Added in API level 21", "FullName": "public void setOverlayViewEnabled (boolean enable)"}, "notifyChannelRetuned(android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI of the new channel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Informs the application that the current channel is re-tuned for some reason and the session now displays the content from a new channel. This is used to handle special cases such as when the current channel becomes unavailable, it is necessary to send the user to a certain channel or the user changes channel in some other way (e.g. by using a dedicated remote).", "history": "Added in API level 21", "FullName": "public void notifyChannelRetuned (Uri channelUri)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: always returns false (doesn't handle the event). Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "added in API level 21", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onSurfaceChanged(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The new PixelFormat of the surface."], ["int", "int: The new width of the surface."], ["int", "int: The new height of the surface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after any structural changes (format or size) have been made to the surface passed in @B_android#media#tv#TvInputService#Session#onSetSurface_E@. This method is always called at least once, after @B_android#media#tv#TvInputService#Session#onSetSurface_E@ is called with non-null surface.", "history": "added in API level 21", "FullName": "public void onSurfaceChanged (int format, int width, int height)"}, "onKeyLongPress(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyLongPress_E@: always returns false (doesn't handle the event). Override this to intercept key long press events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "Added in API level 21", "FullName": "public boolean onKeyLongPress (int keyCode, KeyEvent event)"}, "layoutSurface(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: Left position in pixels, relative to the overlay view."], ["int", "int: Top position in pixels, relative to the overlay view."], ["int", "int: Right position in pixels, relative to the overlay view."], ["int", "int: Bottom position in pixels, relative to the overlay view."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#onOverlayViewSizeChanged_E@"], "Permissions": [], "Description": "Assigns a size and position to the surface passed in @B_android#media#tv#TvInputService#Session#onSetSurface_E@. The position is relative to the overlay view that sits on top of this surface.", "history": "added in API level 23", "FullName": "public void layoutSurface (int left, int top, int right, int bottom)"}, "onSetCaptionEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable, false to disable."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#CaptioningManager_E@"], "Permissions": [], "Description": "Enables or disables the caption. The locale for the user's preferred captioning language can be obtained by calling @B_android#view#accessibility#CaptioningManager#getLocale_E@.", "history": "Added in API level 21", "FullName": "public abstract void onSetCaptionEnabled (boolean enabled)"}, "notifyContentBlocked(android.media.tv.TvContentRating)": {"Returns": [], "Parameters": [["@B_android#media#tv#TvContentRating_E@", "TvContentRating: The content rating for the current TV program. Can be @B_android#media#tv#TvContentRating#UNRATED_E@. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyContentAllowed_E@", "@B_android#media#tv#TvInputManager_E@"], "Permissions": [], "Description": "Informs the application that the current program content is blocked by parent controls. Each TV input service is required to query the system whether the user is allowed to watch the current program before showing it to the user if the parental controls is enabled (i.e. @B_android#media#tv#TvInputManager#isParentalControlsEnabled_E@ returns true). Whether the TV input service should block the content or not is determined by invoking @B_android#media#tv#TvInputManager#isRatingBlocked_E@ with the content rating for the current program or @B_android#media#tv#TvContentRating#UNRATED_E@ in case the rating information is missing. Then the @B_android#media#tv#TvInputManager_E@ makes a judgment based on the user blocked ratings stored in the secure settings and returns the result. If the rating in question turns out to be blocked, the TV input service must immediately block the content and call this method with the content rating of the current program to prompt the PIN verification screen. Each TV input service also needs to continuously listen to any changes made to the parental controls settings by registering a broadcast receiver to receive @B_android#media#tv#TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED_E@ and @B_android#media#tv#TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED_E@ and immediately reevaluate the current program with the new parental controls settings.", "history": "Added in API level 21", "FullName": "public void notifyContentBlocked (TvContentRating rating)"}, "onTune(android.net.Uri, android.os.Bundle)": {"Returns": [["boolean", "true if the tuning was successful, false otherwise."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI of the channel."], ["@B_android#os#Bundle_E@", "Bundle: Domain-specific data for this tune request. Keys must be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tunes to a given channel. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients. The default implementation calls @B_android#media#tv#TvInputService#Session#onTune_E@.", "history": "added in API level 24", "FullName": "public boolean onTune (Uri channelUri, Bundle params)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyDown_E@: always returns false (doesn't handle the event). Override this to intercept key down events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "added in API level 21", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onSelectTrack(int, java.lang.String)": {"Returns": [["boolean", "true if the track selection was successful, false otherwise."]], "Parameters": [["int", "int: The type of the track to select. The type can be @B_android#media#tv#TvTrackInfo#TYPE_AUDIO_E@, @B_android#media#tv#TvTrackInfo#TYPE_VIDEO_E@ or @B_android#media#tv#TvTrackInfo#TYPE_SUBTITLE_E@."], ["@B_java#lang#String_E@", "String: The ID of the track to select. null means to unselect the current track for a given type."]], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyTrackSelected_E@"], "Permissions": [], "Description": "Selects a given track. If this is done successfully, the implementation should call @B_android#media#tv#TvInputService#Session#notifyTrackSelected_E@ to help applications maintain the up-to-date list of the selected tracks.", "history": "added in API level 21", "FullName": "public boolean onSelectTrack (int type, String trackId)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default implementation of @B_android#view#KeyEvent#Callback#onKeyUp_E@: always returns false (doesn't handle the event). Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.", "history": "Added in API level 21", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onOverlayViewSizeChanged(int, int)": {"Returns": [], "Parameters": [["int", "int: The width of the overlay view."], ["int", "int: The height of the overlay view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the size of the overlay view is changed by the application. This is always called at least once when the session is created regardless of whether the overlay view is enabled or not. The overlay view size is the same as the containing @B_android#media#tv#TvView_E@. Note that the size of the underlying surface can be different if the surface was changed by calling @B_android#media#tv#TvInputService#Session#layoutSurface_E@.", "history": "added in API level 23", "FullName": "public void onOverlayViewSizeChanged (int width, int height)"}, "onUnblockContent(android.media.tv.TvContentRating)": {"Returns": [], "Parameters": [["@B_android#media#tv#TvContentRating_E@", "TvContentRating: An unblocked content rating"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Requests to unblock the content according to the given rating. The implementation should unblock the content. TV input service has responsibility to decide when/how the unblock expires while it can keep previously unblocked ratings in order not to ask a user to unblock whenever a content rating is changed. Therefore an unblocked rating can be valid for a channel, a program, or certain amount of time depending on the implementation.", "history": "Added in API level 21", "FullName": "public void onUnblockContent (TvContentRating unblockedRating)"}, "notifyContentAllowed()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#tv#TvInputService#Session#notifyContentBlocked_E@", "@B_android#media#tv#TvInputManager_E@"], "Permissions": [], "Description": "Informs the application that the user is allowed to watch the current program content. Each TV input service is required to query the system whether the user is allowed to watch the current program before showing it to the user if the parental controls is enabled (i.e. @B_android#media#tv#TvInputManager#isParentalControlsEnabled_E@ returns true). Whether the TV input service should block the content or not is determined by invoking @B_android#media#tv#TvInputManager#isRatingBlocked_E@ with the content rating for the current program. Then the @B_android#media#tv#TvInputManager_E@ makes a judgment based on the user blocked ratings stored in the secure settings and returns the result. If the rating in question turns out to be allowed by the user, the TV input service must call this method to notify the application that is permitted to show the content. Each TV input service also needs to continuously listen to any changes made to the parental controls settings by registering a broadcast receiver to receive @B_android#media#tv#TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED_E@ and @B_android#media#tv#TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED_E@ and immediately reevaluate the current program with the new parental controls settings.", "history": "Added in API level 21", "FullName": "public void notifyContentAllowed ()"}, "onSetStreamVolume(float)": {"Returns": [], "Parameters": [["float", "float: A volume value between 0.0f to 1.0f. Value is between 0.0 and 1.0 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the relative stream volume of the current TV input session. The implementation should honor this request in order to handle audio focus changes or mute the current session when multiple sessions, possibly from different inputs are active. If the method has not yet been called, the implementation should assume the default value of 1.0f.", "history": "Added in API level 21", "FullName": "public abstract void onSetStreamVolume (float volume)"}}, "Inheritance": [], "ClassName": "android.media.tv.TvInputService.Session", "ClassDesc": "Base class for derived classes to implement to provide a TV input session."}