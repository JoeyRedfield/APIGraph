{"Functions": {"getGainFactor(int, int, int)": {"Returns": [["float", "a gain factor >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@"]], "Parameters": [["int", "int: color channel from [R, Geven, Godd, B]"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@)"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters was out of range"]], "SeeAlso": ["_E@", "@B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@", "@B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@"], "Permissions": [], "Description": "Get a single color channel gain factor from this lens shading map by its row and column. The rows must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@), the column must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@), and the color channel must be within the range [0, @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@). The channel order is [R, Geven, Godd, B], where Geven is the green channel for the even rows of a Bayer pattern, and Godd is the odd rows.", "history": "added in API level 21", "FullName": "public float getGainFactor (int colorChannel, int column, int row)"}, "getRowCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of rows in this map.", "history": "Added in API level 21", "FullName": "public int getRowCount ()"}, "getColumnCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the number of columns in this map.", "history": "Added in API level 21", "FullName": "public int getColumnCount ()"}, "getGainFactorCount()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the total number of gain factors in this map. A single gain factor contains exactly one color channel. Use with @B_android#hardware#camera2#params#LensShadingMap#copyGainFactors_E@ to allocate a large-enough array.", "history": "Added in API level 21", "FullName": "public int getGainFactorCount ()"}, "copyGainFactors(float[], int)": {"Returns": [], "Parameters": [["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#IllegalArgumentException_E@", "If offset was negative"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["_E@"], "Permissions": [], "Description": "Copy all gain factors in row-major order from this lens shading map into the destination. Each gain factor will be >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@.", "history": "added in API level 21", "FullName": "public void copyGainFactors (float[] destination, int offset)"}, "getGainFactorVector(int,int)": {"Returns": [["@B_android#hardware#camera2#params#RggbChannelVector_E@", "an @B_android#hardware#camera2#params#RggbChannelVector_E@ where each gain factor >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@"]], "Parameters": [["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@)"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters was out of range"]], "SeeAlso": ["@B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@", "@B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@"], "Permissions": [], "Description": "Get a gain factor vector from this lens shading map by its row and column. The rows must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@), the column must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@).", "history": "Added in API level 21", "FullName": "public RggbChannelVector getGainFactorVector (int column, int row)"}, "getGainFactor(int,int,int)": {"Returns": [["float", "a gain factor >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@"]], "Parameters": [["int", "int: color channel from [R, Geven, Godd, B]"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@)"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters was out of range"]], "SeeAlso": ["@B_android#hardware#camera2#params#RggbChannelVector_E@", "@B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@", "@B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@"], "Permissions": [], "Description": "Get a single color channel gain factor from this lens shading map by its row and column. The rows must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@), the column must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@), and the color channel must be within the range [0, @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@). The channel order is [R, Geven, Godd, B], where Geven is the green channel for the even rows of a Bayer pattern, and Godd is the odd rows.", "history": "Added in API level 21", "FullName": "public float getGainFactor (int colorChannel, int column, int row)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "string representation of @B_android#hardware#camera2#params#LensShadingMap_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the LensShadingMap as a string representation. \"LensShadingMap{R:([%f, %f, ... %f], ... [%f, %f, ... %f]), G_even:([%f, %f, ... %f], ... [%f, %f, ... %f]), G_odd:([%f, %f, ... %f], ... [%f, %f, ... %f]), B:([%f, %f, ... %f], ... [%f, %f, ... %f])}\", where each %f represents one gain factor and each [%f, %f, ... %f] represents a row of the lens shading map", "history": "Added in API level 21", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects were equal, false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if this LensShadingMap is equal to another LensShadingMap. Two lens shading maps are equal if and only if they have the same rows/columns, and all of their elements are @B_java#lang#Object#equals_E@.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "copyGainFactors(float[],int)": {"Returns": [], "Parameters": [["float[]", "float: an array big enough to hold at least @B_android#hardware#camera2#params#RggbChannelVector#COUNT_E@ elements after the offset"], ["int", "int: a non-negative offset into the array"]], "Throws": [["@B_java#lang#NullPointerException_E@", "If destination was null"], ["@B_java#lang#IllegalArgumentException_E@", "If offset was negative"], ["@B_java#lang#ArrayIndexOutOfBoundsException_E@", "If there's not enough room to write the elements at the specified destination and offset."]], "SeeAlso": ["@B_android#hardware#camera2#CaptureResult_E@"], "Permissions": [], "Description": "Copy all gain factors in row-major order from this lens shading map into the destination. Each gain factor will be >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@.", "history": "Added in API level 21", "FullName": "public void copyGainFactors (float[] destination, int offset)"}, "getGainFactorVector(int, int)": {"Returns": [["@B_android#hardware#camera2#params#RggbChannelVector_E@", "an @B_android#hardware#camera2#params#RggbChannelVector_E@ where each gain factor >= @B_android#hardware#camera2#params#LensShadingMap#MINIMUM_GAIN_FACTOR_E@"]], "Parameters": [["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@)"], ["int", "int: within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@)"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any of the parameters was out of range"]], "SeeAlso": ["@B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@", "@B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@"], "Permissions": [], "Description": "Get a gain factor vector from this lens shading map by its row and column. The rows must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getRowCount_E@), the column must be within the range [0, @B_android#hardware#camera2#params#LensShadingMap#getColumnCount_E@).", "history": "added in API level 21", "FullName": "public RggbChannelVector getGainFactorVector (int column, int row)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.hardware.camera2.params.LensShadingMap", "ClassDesc": "Immutable class for describing a 4 x N x M lens shading map of floats."}