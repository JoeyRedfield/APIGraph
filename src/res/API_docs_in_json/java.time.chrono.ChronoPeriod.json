{"Functions": {"normalized()": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "a ChronoPeriod based on this period with the amounts of each unit normalized, not null"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the amounts of each unit normalized. The process of normalization is specific to each calendar system. For example, in the ISO calendar system, the years and months are normalized but the days are not, such that \"15 months\" would be normalized to \"1 year and 3 months\". This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoPeriod normalized ()"}, "plus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "a ChronoPeriod based on this period with the requested period added, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the period to add, not null"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified period added. If the specified amount is a ChronoPeriod then it must have the same chronology as this period. Implementations may choose to accept or reject other TemporalAmount implementations. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoPeriod plus (TemporalAmount amountToAdd)"}, "addTo(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same type with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to adjust, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to add"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Adds this period to the specified temporal object. This returns a temporal object of the same observable type as the input with this period added. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#plus_E@. The specified temporal must have the same chronology as this period. This returns a temporal with the non-zero supported units added. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract Temporal addTo (Temporal temporal)"}, "minus(java.time.temporal.TemporalAmount)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "a ChronoPeriod based on this period with the requested period subtracted, not null"]], "Parameters": [["@B_java#time#temporal#TemporalAmount_E@", "TemporalAmount: the period to subtract, not null"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this period with the specified period subtracted. If the specified amount is a ChronoPeriod then it must have the same chronology as this period. Implementations may choose to accept or reject other TemporalAmount implementations. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract ChronoPeriod minus (TemporalAmount amountToSubtract)"}, "between(java.time.chrono.ChronoLocalDate,java.time.chrono.ChronoLocalDate)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "the period between this date and the end date, not null"]], "Parameters": [["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the start date, inclusive, specifying the chronology of the calculation, not null"], ["@B_java#time#chrono#ChronoLocalDate_E@", "ChronoLocalDate: the end date, exclusive, in any chronology, not null"]], "Throws": [], "SeeAlso": ["@B_java#time#chrono#ChronoLocalDate#until_E@"], "Permissions": [], "Description": "Obtains a ChronoPeriod consisting of amount of time between two dates. The start date is included, but the end date is not. The period is calculated using @B_java#time#chrono#ChronoLocalDate#until_E@. As such, the calculation is chronology specific. The chronology of the first date is used. The chronology of the second date is ignored, with the date being converted to the target chronology system before the calculation starts. The result of this method can be a negative period if the end is before the start. In most cases, the positive/negative sign will be the same in each of the supported fields.", "history": "Added in API level 26", "FullName": "public static ChronoPeriod between (ChronoLocalDate startDateInclusive, ChronoLocalDate endDateExclusive)"}, "getChronology()": {"Returns": [["@B_java#time#chrono#Chronology_E@", "the chronology defining the period, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the chronology that defines the meaning of the supported units. The period is defined by the chronology. It controls the supported units and restricts addition/subtraction to ChronoLocalDate instances of the same chronology.", "history": "Added in API level 26", "FullName": "public abstract Chronology getChronology ()"}, "isNegative()": {"Returns": [["boolean", "true if any unit of this period is negative"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if any of the supported units of this period are negative.", "history": "Added in API level 26", "FullName": "public boolean isNegative ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of this period, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Outputs this period as a String. The output will include the period amounts and chronology.", "history": "Added in API level 26", "FullName": "public abstract String toString ()"}, "negated()": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "a ChronoPeriod based on this period with the amounts negated, not null"]], "Parameters": [], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs, which only happens if one of the units has the value Long.MIN_VALUE"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance with each amount in this period negated. This returns a period with each supported unit individually negated. For example, a period of \"2 years, -3 months and 4 days\" will be negated to \"-2 years, 3 months and -4 days\". No normalization is performed.", "history": "Added in API level 26", "FullName": "public ChronoPeriod negated ()"}, "isZero()": {"Returns": [["boolean", "true if this period is zero-length"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if all the supported units of this period are zero.", "history": "Added in API level 26", "FullName": "public boolean isZero ()"}, "get(java.time.temporal.TemporalUnit)": {"Returns": [["long", "the long value of the unit"]], "Parameters": [["@B_java#time#temporal#TemporalUnit_E@", "TemporalUnit: the TemporalUnit for which to return the value"]], "Throws": [["@B_java#time#DateTimeException_E@", "if the unit is not supported"], ["@B_java#time#temporal#UnsupportedTemporalTypeException_E@", "if the unit is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the value of the requested unit. The supported units are chronology specific. They will typically be @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. Requesting an unsupported unit will throw an exception.", "history": "Added in API level 26", "FullName": "public abstract long get (TemporalUnit unit)"}, "multipliedBy(int)": {"Returns": [["@B_java#time#chrono#ChronoPeriod_E@", "a ChronoPeriod based on this period with the amounts multiplied by the scalar, not null"]], "Parameters": [["int", "int: the scalar to multiply by, not null"]], "Throws": [["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a new instance with each amount in this period in this period multiplied by the specified scalar. This returns a period with each supported unit individually multiplied. For example, a period of \"2 years, -3 months and 4 days\" multiplied by 3 will return \"6 years, -9 months and 12 days\". No normalization is performed.", "history": "Added in API level 26", "FullName": "public abstract ChronoPeriod multipliedBy (int scalar)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other period"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this period is equal to another period, including the chronology. Compares this period with another ensuring that the type, each amount and the chronology are the same. Note that this means that a period of \"15 Months\" is not equal to a period of \"1 Year and 3 Months\".", "history": "Added in API level 26", "FullName": "public abstract boolean equals (Object obj)"}, "getUnits()": {"Returns": [["@B_java#util#List_E@", "a list containing the supported units, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the set of units supported by this period. The supported units are chronology specific. They will typically be @B_java#time#temporal#ChronoUnit#YEARS_E@, @B_java#time#temporal#ChronoUnit#MONTHS_E@ and @B_java#time#temporal#ChronoUnit#DAYS_E@. They are returned in order from largest to smallest. This set can be used in conjunction with @B_java#time#chrono#ChronoPeriod#get_E@ to access the entire state of the period.", "history": "Added in API level 26", "FullName": "public abstract List<TemporalUnit> getUnits ()"}, "subtractFrom(java.time.temporal.Temporal)": {"Returns": [["@B_java#time#temporal#Temporal_E@", "an object of the same type with the adjustment made, not null"]], "Parameters": [["@B_java#time#temporal#Temporal_E@", "Temporal: the temporal object to adjust, not null"]], "Throws": [["@B_java#time#DateTimeException_E@", "if unable to subtract"], ["@B_java#lang#ArithmeticException_E@", "if numeric overflow occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Subtracts this period from the specified temporal object. This returns a temporal object of the same observable type as the input with this period subtracted. In most cases, it is clearer to reverse the calling pattern by using @B_java#time#temporal#Temporal#minus_E@. The specified temporal must have the same chronology as this period. This returns a temporal with the non-zero supported units subtracted. This instance is immutable and unaffected by this method call.", "history": "Added in API level 26", "FullName": "public abstract Temporal subtractFrom (Temporal temporal)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this period.", "history": "Added in API level 26", "FullName": "public abstract int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.chrono.ChronoPeriod", "ClassDesc": "A date-based amount of time, such as '3 years, 4 months and 5 days' in an arbitrary chronology, intended for advanced globalization use cases. This interface models a date-based amount of time in a calendar system. While most calendar systems use years, months and days, some do not. Therefore, this interface operates solely in terms of a set of supported units that are defined by the Chronology. The set of supported units is fixed for a given chronology. The amount of a supported unit may be set to zero. The period is modeled as a directed amount of time, meaning that individual parts of the period may be negative."}