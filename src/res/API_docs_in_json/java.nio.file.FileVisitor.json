{"Functions": {"postVisitDirectory(T, java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#io#IOException_E@", "IOException: null if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited. This method is also invoked when iteration of the directory completes prematurely (by a @B_java#nio#file#FileVisitor#visitFile_E@ method returning @B_java#nio#file#FileVisitResult#SKIP_SIBLINGS_E@, or an I/O error when iterating over the directory).", "history": "added in API level 26", "FullName": "public abstract FileVisitResult postVisitDirectory (T dir, IOException exc)"}, "postVisitDirectory(T,java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#io#IOException_E@", "IOException: null if the iteration of the directory completes without an error; otherwise the I/O exception that caused the iteration of the directory to complete prematurely"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory after entries in the directory, and all of their descendants, have been visited. This method is also invoked when iteration of the directory completes prematurely (by a @B_java#nio#file#FileVisitor#visitFile_E@ method returning @B_java#nio#file#FileVisitResult#SKIP_SIBLINGS_E@, or an I/O error when iterating over the directory).", "history": "Added in API level 26", "FullName": "public abstract FileVisitResult postVisitDirectory (T dir, IOException exc)"}, "visitFile(T,java.nio.file.attribute.BasicFileAttributes)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#nio#file#attribute#BasicFileAttributes_E@", "BasicFileAttributes: the file's basic attributes"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file in a directory.", "history": "Added in API level 26", "FullName": "public abstract FileVisitResult visitFile (T file, BasicFileAttributes attrs)"}, "visitFileFailed(T,java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#io#IOException_E@", "IOException: the I/O exception that prevented the file from being visited"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file that could not be visited. This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.", "history": "Added in API level 26", "FullName": "public abstract FileVisitResult visitFileFailed (T file, IOException exc)"}, "preVisitDirectory(T,java.nio.file.attribute.BasicFileAttributes)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the directory"], ["@B_java#nio#file#attribute#BasicFileAttributes_E@", "BasicFileAttributes: the directory's basic attributes"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a directory before entries in the directory are visited. If this method returns @B_java#nio#file#FileVisitResult#CONTINUE_E@, then entries in the directory are visited. If this method returns @B_java#nio#file#FileVisitResult#SKIP_SUBTREE_E@ or @B_java#nio#file#FileVisitResult#SKIP_SIBLINGS_E@ then entries in the directory (and any descendants) will not be visited.", "history": "Added in API level 26", "FullName": "public abstract FileVisitResult preVisitDirectory (T dir, BasicFileAttributes attrs)"}, "visitFileFailed(T, java.io.IOException)": {"Returns": [["@B_java#nio#file#FileVisitResult_E@", "the visit result"]], "Parameters": [["T", "T: a reference to the file"], ["@B_java#io#IOException_E@", "IOException: the I/O exception that prevented the file from being visited"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Invoked for a file that could not be visited. This method is invoked if the file's attributes could not be read, the file is a directory that could not be opened, and other reasons.", "history": "added in API level 26", "FullName": "public abstract FileVisitResult visitFileFailed (T file, IOException exc)"}}, "Inheritance": [], "ClassName": "java.nio.file.FileVisitor<T>", "ClassDesc": "A visitor of files. An implementation of this interface is provided to the @B_java#nio#file#Files#walkFileTree_E@ methods to visit each file in a file tree. Furthermore, suppose we want to copy a file tree to a target location. In that case, symbolic links should be followed and the target directory should be created before the entries in the directory are copied."}