{"Functions": {"setSigned(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is a signed number; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is a signed number. The default is false.", "history": "added in API level 1", "FullName": "public abstract void setSigned (int columnIndex, boolean property)"}, "setCatalogName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column's catalog name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's table's catalog name, if any, to the given String.", "history": "added in API level 1", "FullName": "public abstract void setCatalogName (int columnIndex, String catalogName)"}, "setColumnTypeName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: data source specific type name."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's type name that is specific to the data source, if any, to the given String.", "history": "added in API level 1", "FullName": "public abstract void setColumnTypeName (int columnIndex, String typeName)"}, "setColumnLabel(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column title"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the suggested column title for use in printouts and displays, if any, to the given String.", "history": "added in API level 1", "FullName": "public abstract void setColumnLabel (int columnIndex, String label)"}, "setSigned(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is a signed number; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is a signed number. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setSigned (int columnIndex, boolean property)"}, "setPrecision(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the total number of decimal digits"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's number of decimal digits to the given int.", "history": "added in API level 1", "FullName": "public abstract void setPrecision (int columnIndex, int precision)"}, "setColumnDisplaySize(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the normal maximum number of characters for the designated column"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's normal maximum width in chars to the given int.", "history": "added in API level 1", "FullName": "public abstract void setColumnDisplaySize (int columnIndex, int size)"}, "setColumnName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the designated column's name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the designated column to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setColumnName (int columnIndex, String columnName)"}, "setSearchable(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column can be used in a WHERE clause; false if it cannot"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column can be used in a where clause. The default is false.", "history": "added in API level 1", "FullName": "public abstract void setSearchable (int columnIndex, boolean property)"}, "setSchemaName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the schema name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the designated column's table's schema, if any, to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setSchemaName (int columnIndex, String schemaName)"}, "setColumnType(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the column's SQL type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the designated column's SQL type to the one given.", "history": "Added in API level 1", "FullName": "public abstract void setColumnType (int columnIndex, int SQLType)"}, "setColumnType(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the column's SQL type"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": ["@B_java#sql#Types_E@"], "Permissions": [], "Description": "Sets the designated column's SQL type to the one given.", "history": "added in API level 1", "FullName": "public abstract void setColumnType (int columnIndex, int SQLType)"}, "setTableName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column's table name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's table name, if any, to the given String.", "history": "added in API level 1", "FullName": "public abstract void setTableName (int columnIndex, String tableName)"}, "setAutoIncrement(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is automatically numbered; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is automatically numbered, The default is for a RowSet object's columns not to be automatically numbered.", "history": "added in API level 1", "FullName": "public abstract void setAutoIncrement (int columnIndex, boolean property)"}, "setTableName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column's table name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's table name, if any, to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setTableName (int columnIndex, String tableName)"}, "setScale(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the number of digits to right of decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's number of digits to the right of the decimal point to the given int.", "history": "added in API level 1", "FullName": "public abstract void setScale (int columnIndex, int scale)"}, "setPrecision(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the total number of decimal digits"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's number of decimal digits to the given int.", "history": "Added in API level 1", "FullName": "public abstract void setPrecision (int columnIndex, int precision)"}, "setScale(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the number of digits to right of decimal point"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's number of digits to the right of the decimal point to the given int.", "history": "Added in API level 1", "FullName": "public abstract void setScale (int columnIndex, int scale)"}, "setCaseSensitive(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is case sensitive; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is case sensitive. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setCaseSensitive (int columnIndex, boolean property)"}, "setCurrency(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is a cash value; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is a cash value. The default is false.", "history": "added in API level 1", "FullName": "public abstract void setCurrency (int columnIndex, boolean property)"}, "setAutoIncrement(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is automatically numbered; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is automatically numbered, The default is for a RowSet object's columns not to be automatically numbered.", "history": "Added in API level 1", "FullName": "public abstract void setAutoIncrement (int columnIndex, boolean property)"}, "setSearchable(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column can be used in a WHERE clause; false if it cannot"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column can be used in a where clause. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setSearchable (int columnIndex, boolean property)"}, "setNullable(int, int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: one of the following constants: ResultSetMetaData.columnNoNulls, ResultSetMetaData.columnNullable, or ResultSetMetaData.columnNullableUnknown"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column's value can be set to NULL. The default is ResultSetMetaData.columnNullableUnknown", "history": "added in API level 1", "FullName": "public abstract void setNullable (int columnIndex, int property)"}, "setSchemaName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the schema name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the designated column's table's schema, if any, to the given String.", "history": "added in API level 1", "FullName": "public abstract void setSchemaName (int columnIndex, String schemaName)"}, "setColumnTypeName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: data source specific type name."]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's type name that is specific to the data source, if any, to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setColumnTypeName (int columnIndex, String typeName)"}, "setColumnName(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the designated column's name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the name of the designated column to the given String.", "history": "added in API level 1", "FullName": "public abstract void setColumnName (int columnIndex, String columnName)"}, "setCurrency(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is a cash value; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is a cash value. The default is false.", "history": "Added in API level 1", "FullName": "public abstract void setCurrency (int columnIndex, boolean property)"}, "setColumnDisplaySize(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: the normal maximum number of characters for the designated column"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's normal maximum width in chars to the given int.", "history": "Added in API level 1", "FullName": "public abstract void setColumnDisplaySize (int columnIndex, int size)"}, "setNullable(int,int)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["int", "int: one of the following constants: ResultSetMetaData.columnNoNulls, ResultSetMetaData.columnNullable, or ResultSetMetaData.columnNullableUnknown"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column's value can be set to NULL. The default is ResultSetMetaData.columnNullableUnknown", "history": "Added in API level 1", "FullName": "public abstract void setNullable (int columnIndex, int property)"}, "setColumnLabel(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column title"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the suggested column title for use in printouts and displays, if any, to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setColumnLabel (int columnIndex, String label)"}, "setColumnCount(int)": {"Returns": [], "Parameters": [["int", "int: the number of columns in the RowSet object"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the number of columns in the RowSet object to the given number.", "history": "Added in API level 1", "FullName": "public abstract void setColumnCount (int columnCount)"}, "setCatalogName(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["@B_java#lang#String_E@", "String: the column's catalog name"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the designated column's table's catalog name, if any, to the given String.", "history": "Added in API level 1", "FullName": "public abstract void setCatalogName (int columnIndex, String catalogName)"}, "setCaseSensitive(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the first column is 1, the second is 2, ..."], ["boolean", "boolean: true if the column is case sensitive; false if it is not"]], "Throws": [["@B_java#sql#SQLException_E@", "if a database access error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the designated column is case sensitive. The default is false.", "history": "added in API level 1", "FullName": "public abstract void setCaseSensitive (int columnIndex, boolean property)"}}, "Inheritance": [], "ClassName": "javax.sql.RowSetMetaData", "ClassDesc": "An object that contains information about the columns in a RowSet object. This interface is an extension of the ResultSetMetaData interface with methods for setting the values in a RowSetMetaData object. When a RowSetReader object reads data into a RowSet object, it creates a RowSetMetaData object and initializes it using the methods in the RowSetMetaData interface. Then the reader passes the RowSetMetaData object to the rowset. The methods in this interface are invoked internally when an application calls the method RowSet.execute; an application programmer would not use them directly."}