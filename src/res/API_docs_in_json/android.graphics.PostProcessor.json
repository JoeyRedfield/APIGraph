{"Functions": {"onPostProcess(android.graphics.Canvas)": {"Returns": [["int", "Opacity of the result after drawing. @B_android#graphics#PixelFormat#UNKNOWN_E@ means that the implementation did not change whether the image has alpha. Return this unless you added transparency (e.g. with the code above, in which case you should return @B_android#graphics#PixelFormat#TRANSLUCENT_E@) or you forced the image to be opaque (e.g. by drawing everywhere with an opaque color and @B_android#graphics#PorterDuff#Mode#DST_OVER_E@, in which case you should return @B_android#graphics#PixelFormat#OPAQUE_E@). @B_android#graphics#PixelFormat#TRANSLUCENT_E@ means that the implementation added transparency. This is safe to return even if the image already had transparency. This is also safe to return if the result is opaque, though it may draw more slowly. @B_android#graphics#PixelFormat#OPAQUE_E@ means that the implementation forced the image to be opaque. This is safe to return even if the image was already opaque. @B_android#graphics#PixelFormat#TRANSPARENT_E@ (or any other integer) is not allowed, and will result in throwing an @B_java#lang#IllegalArgumentException_E@. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The @B_android#graphics#Canvas_E@ to draw to. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Do any processing after (for example) decoding. Drawing to the @B_android#graphics#Canvas_E@ will behave as if the initial processing (e.g. decoding) already exists in the Canvas. An implementation can draw effects on top of this, or it can even draw behind it using @B_android#graphics#PorterDuff#Mode#DST_OVER_E@. A common effect is to add transparency to the corners to achieve rounded corners. That can be done with the following code:", "history": "Added in API level 28", "FullName": "public abstract int onPostProcess (Canvas canvas)"}}, "Inheritance": [], "ClassName": "android.graphics.PostProcessor", "ClassDesc": "Helper interface for adding custom processing to an image. The image being processed may be a @B_android#graphics#drawable#Drawable_E@, a @B_android#graphics#Bitmap_E@, or a frame of an @B_android#graphics#drawable#AnimatedImageDrawable_E@ produced by @B_android#graphics#ImageDecoder_E@. This is called before the requested object is returned. This custom processing can even be applied to images that will be returned as immutable objects, such as a @B_android#graphics#Bitmap_E@ with Config @B_android#graphics#Bitmap#Config#HARDWARE_E@ returned by @B_android#graphics#ImageDecoder_E@. On an @B_android#graphics#drawable#AnimatedImageDrawable_E@, the callback will only be called once, but the drawing commands will be applied to each frame, as if the @B_android#graphics#Canvas_E@ had been returned by @B_android#graphics#Picture#beginRecording_E@. Supplied to ImageDecoder via @B_android#graphics#ImageDecoder#setPostProcessor_E@."}