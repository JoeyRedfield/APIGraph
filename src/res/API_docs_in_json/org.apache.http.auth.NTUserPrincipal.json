{"Functions": {"toString()": {"Returns": [["", "a printable representation of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string containing a concise, human-readable description of this object. Subclasses are encouraged to override this method and provide an implementation that takes into account the object's type and data. The default implementation is equivalent to the following expression: See toString method.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getUsername()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String getUsername ()"}, "equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this Object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare this instance with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See equals method. The general contract for the equals and @B_java#lang#Object#hashCode_E@ methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "NTUserPrincipal(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public NTUserPrincipal (String domain, String username)"}, "getDomain()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String getDomain ()"}, "getName()": {"Returns": [["", "the name of this Principal."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this Principal.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["", "this object's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an integer hash code for this object. By contract, any two objects for which @B_java#lang#Object#equals_E@ returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See hashCode method.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "org.apache.http.auth.NTUserPrincipal", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit NT (MS Windows specific) user principal used for HTTP authentication"}