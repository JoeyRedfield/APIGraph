{"Functions": {"next(java.util.regex.Pattern)": {"Returns": [["@B_java#lang#String_E@", "the next token"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: the pattern to scan for"]], "Throws": [["@B_java#util#NoSuchElementException_E@", "if no more tokens are available"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token if it matches the specified pattern. This method may block while waiting for input to scan, even if a previous invocation of @B_java#util#Scanner#hasNext_E@ returned true. If the match is successful, the scanner advances past the input that matched the pattern.", "history": "Added in API level 1", "FullName": "public String next (Pattern pattern)"}, "delimiter()": {"Returns": [["@B_java#util#regex#Pattern_E@", "this scanner's delimiting pattern."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Pattern this Scanner is currently using to match delimiters.", "history": "Added in API level 1", "FullName": "public Pattern delimiter ()"}, "Scanner(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: An input stream to be scanned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the underlying platform's", "history": "Added in API level 1", "FullName": "public Scanner (InputStream source)"}, "nextLine()": {"Returns": [["@B_java#lang#String_E@", "the line that was skipped"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if no line was found"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Advances this scanner past the current line and returns the input that was skipped. This method returns the rest of the current line, excluding any line separator at the end. The position is set to the beginning of the next line. Since this method continues to search through the input looking for a line separator, it may buffer all of the input searching for the line to skip if no line separators are present.", "history": "Added in API level 1", "FullName": "public String nextLine ()"}, "ioException()": {"Returns": [["@B_java#io#IOException_E@", "the last exception thrown by this scanner's readable"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the IOException last thrown by this Scanner's underlying Readable. This method returns null if no such exception exists.", "history": "Added in API level 1", "FullName": "public IOException ioException ()"}, "next()": {"Returns": [["@B_java#lang#String_E@", "the next token"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", "if no more tokens are available"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": ["@B_java#util#Iterator_E@"], "Permissions": [], "Description": "Finds and returns the next complete token from this scanner. A complete token is preceded and followed by input that matches the delimiter pattern. This method may block while waiting for input to scan, even if a previous invocation of @B_java#util#Scanner#hasNext_E@ returned true.", "history": "Added in API level 1", "FullName": "public String next ()"}, "nextByte()": {"Returns": [["byte", "the byte scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a An invocation of this method of the form radix is the default radix of this scanner.", "history": "Added in API level 1", "FullName": "public byte nextByte ()"}, "locale()": {"Returns": [["@B_java#util#Locale_E@", "this scanner's locale"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this scanner's locale. A scanner's locale affects many elements of its default primitive matching regular expressions; see", "history": "Added in API level 1", "FullName": "public Locale locale ()"}, "findWithinHorizon(java.util.regex.Pattern, int)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: the pattern to scan for"], ["int", "int: the search horizon"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"], ["@B_java#lang#IllegalArgumentException_E@", "if horizon is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of the specified pattern. This method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner's position remains unchanged. This method may block waiting for input that matches the pattern. A scanner will never search more than horizon code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see @B_java#util#regex#Matcher#useTransparentBounds_E@ and @B_java#util#regex#Matcher#useAnchoringBounds_E@). If horizon is 0, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern. If horizon is negative, then an IllegalArgumentException is thrown.", "history": "added in API level 1", "FullName": "public String findWithinHorizon (Pattern pattern, int horizon)"}, "Scanner(java.io.InputStream,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: An input stream to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the stream into characters to be scanned"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified character set does not exist"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the specified charset.", "history": "Added in API level 1", "FullName": "public Scanner (InputStream source, String charsetName)"}, "next(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the next token"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to scan"]], "Throws": [["@B_java#util#NoSuchElementException_E@", "if no such tokens are available"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the next token if it matches the pattern constructed from the specified string. If the match is successful, the scanner advances past the input that matched the pattern. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public String next (String pattern)"}, "hasNext(java.util.regex.Pattern)": {"Returns": [["boolean", "true if and only if this scanner has another token matching the specified pattern"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: the pattern to scan for"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next complete token matches the specified pattern. A complete token is prefixed and postfixed by input that matches the delimiter pattern. This method may block while waiting for input. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNext (Pattern pattern)"}, "useRadix(int)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["int", "int: The radix to use when scanning numbers"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if radix is out of range"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this scanner's default radix to the specified radix. A scanner's radix affects elements of its default number matching regular expressions; see If the radix is less than Character.MIN_RADIX or greater than Character.MAX_RADIX, then an IllegalArgumentException is thrown. Invoking the @B_java#util#Scanner#reset_E@ method will set the scanner's radix to 10.", "history": "Added in API level 1", "FullName": "public Scanner useRadix (int radix)"}, "Scanner(java.io.InputStream, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: An input stream to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the stream into characters to be scanned"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified character set does not exist"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified input stream. Bytes from the stream are converted into characters using the specified charset.", "history": "added in API level 1", "FullName": "public Scanner (InputStream source, String charsetName)"}, "useLocale(java.util.Locale)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: A string specifying the locale to use"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this scanner's locale to the specified locale. A scanner's locale affects many elements of its default primitive matching regular expressions; see Invoking the @B_java#util#Scanner#reset_E@ method will set the scanner's locale to the", "history": "Added in API level 1", "FullName": "public Scanner useLocale (Locale locale)"}, "Scanner(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: A file to be scanned"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if source is not found"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's", "history": "Added in API level 1", "FullName": "public Scanner (File source)"}, "hasNext(java.lang.String)": {"Returns": [["boolean", "true if and only if this scanner has another token matching the specified pattern"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to scan"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token matches the pattern constructed from the specified string. The scanner does not advance past any input. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public boolean hasNext (String pattern)"}, "Scanner(java.nio.file.Path,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the file into characters to be scanned"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening source"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified encoding is not found"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.", "history": "Added in API level 26", "FullName": "public Scanner (Path source, String charsetName)"}, "findWithinHorizon(java.lang.String,int)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to search for"], ["int", "int: the search horizon"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"], ["@B_java#lang#IllegalArgumentException_E@", "if horizon is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public String findWithinHorizon (String pattern, int horizon)"}, "radix()": {"Returns": [["int", "the default radix of this scanner"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this scanner's default radix. A scanner's radix affects elements of its default number matching regular expressions; see", "history": "Added in API level 1", "FullName": "public int radix ()"}, "hasNextInt()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid int value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as an int value in the default radix using the @B_java#util#Scanner#nextInt_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextInt ()"}, "nextShort(int)": {"Returns": [["short", "the short scanned from the input"]], "Parameters": [["int", "int: the radix used to interpret the token as a short value"]], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a InputMismatchException if the next token cannot be translated into a valid short value as described below. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Short#parseShort_E@ with the specified radix.", "history": "Added in API level 1", "FullName": "public short nextShort (int radix)"}, "skip(java.util.regex.Pattern)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: a string specifying the pattern to skip over"]], "Throws": [["@B_java#util#NoSuchElementException_E@", "if the specified pattern is not found"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Skips input that matches the specified pattern, ignoring delimiters. This method will skip input if an anchored match of the specified pattern succeeds. If a match to the specified pattern is not found at the current position, then no input is skipped and a Since this method seeks to match the specified pattern starting at the scanner's current position, patterns that can match a lot of input (\".*\", for example) may cause the scanner to buffer a large amount of input. Note that it is possible to skip something without risking a NoSuchElementException by using a pattern that can match nothing, e.g., sc.skip(\"[ \\t]*\").", "history": "Added in API level 1", "FullName": "public Scanner skip (Pattern pattern)"}, "hasNextByte()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid byte value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the default radix using the @B_java#util#Scanner#nextByte_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextByte ()"}, "skip(java.lang.String)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to skip over"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Skips input that matches a pattern constructed from the specified string. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public Scanner skip (String pattern)"}, "hasNext()": {"Returns": [["boolean", "true if and only if this scanner has another token"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": ["@B_java#util#Iterator_E@"], "Permissions": [], "Description": "Returns true if this scanner has another token in its input. This method may block while waiting for input to scan. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNext ()"}, "findInLine(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to search for"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public String findInLine (String pattern)"}, "hasNextBigDecimal()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid BigDecimal"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a BigDecimal using the @B_java#util#Scanner#nextBigDecimal_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextBigDecimal ()"}, "nextBigInteger(int)": {"Returns": [["@B_java#math#BigInteger_E@", "the BigInteger scanned from the input"]], "Parameters": [["int", "int: the radix used to interpret the token"]], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if the input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a @B_java#math#BigInteger_E@. If the next token matches the @B_java#lang#Character#digit_E@, and passing the resulting string to the @B_java#math#BigInteger#BigInteger_E@ constructor with the specified radix.", "history": "Added in API level 1", "FullName": "public BigInteger nextBigInteger (int radix)"}, "Scanner(java.nio.file.Path, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the file into characters to be scanned"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening source"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified encoding is not found"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.", "history": "added in API level 26", "FullName": "public Scanner (Path source, String charsetName)"}, "nextInt(int)": {"Returns": [["int", "the int scanned from the input"]], "Parameters": [["int", "int: the radix used to interpret the token as an int value"]], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as an InputMismatchException if the next token cannot be translated into a valid int value as described below. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Integer#parseInt_E@ with the specified radix.", "history": "Added in API level 1", "FullName": "public int nextInt (int radix)"}, "Scanner(java.nio.channels.ReadableByteChannel)": {"Returns": [], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: A channel to scan"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified channel. Bytes from the source are converted into characters using the underlying platform's", "history": "Added in API level 1", "FullName": "public Scanner (ReadableByteChannel source)"}, "Scanner(java.nio.file.Path)": {"Returns": [], "Parameters": [["@B_java#nio#file#Path_E@", "Path: the path to the file to be scanned"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs opening source"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the underlying platform's", "history": "Added in API level 26", "FullName": "public Scanner (Path source)"}, "nextLong(int)": {"Returns": [["long", "the long scanned from the input"]], "Parameters": [["int", "int: the radix used to interpret the token as an int value"]], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a InputMismatchException if the next token cannot be translated into a valid long value as described below. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Long#parseLong_E@ with the specified radix.", "history": "Added in API level 1", "FullName": "public long nextLong (int radix)"}, "nextBigInteger()": {"Returns": [["@B_java#math#BigInteger_E@", "the BigInteger scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if the input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a @B_java#math#BigInteger_E@. An invocation of this method of the form radix is the default radix of this scanner.", "history": "Added in API level 1", "FullName": "public BigInteger nextBigInteger ()"}, "Scanner(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: A string to scan"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified string.", "history": "Added in API level 1", "FullName": "public Scanner (String source)"}, "hasNextLong(int)": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid long value"]], "Parameters": [["int", "int: the radix used to interpret the token as a long value"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a long value in the specified radix using the @B_java#util#Scanner#nextLong_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextLong (int radix)"}, "hasNextLong()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid long value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a long value in the default radix using the @B_java#util#Scanner#nextLong_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextLong ()"}, "hasNextDouble()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid double value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a double value using the @B_java#util#Scanner#nextDouble_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextDouble ()"}, "hasNextInt(int)": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid int value"]], "Parameters": [["int", "int: the radix used to interpret the token as an int value"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as an int value in the specified radix using the @B_java#util#Scanner#nextInt_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextInt (int radix)"}, "hasNextLine()": {"Returns": [["boolean", "true if and only if this scanner has another line of input"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if there is another line in the input of this scanner. This method may block while waiting for input. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextLine ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "The string representation of this scanner"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the string representation of this Scanner. The string representation of a Scanner contains information that may be useful for debugging. The exact format is unspecified.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Scanner(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: A file to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the file into characters to be scanned"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if source is not found"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified encoding is not found"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.", "history": "Added in API level 1", "FullName": "public Scanner (File source, String charsetName)"}, "findWithinHorizon(java.lang.String, int)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#lang#String_E@", "String: a string specifying the pattern to search for"], ["int", "int: the search horizon"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"], ["@B_java#lang#IllegalArgumentException_E@", "if horizon is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of a pattern constructed from the specified string, ignoring delimiters. An invocation of this method of the form", "history": "added in API level 1", "FullName": "public String findWithinHorizon (String pattern, int horizon)"}, "Scanner(java.nio.channels.ReadableByteChannel,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#nio#channels#ReadableByteChannel_E@", "ReadableByteChannel: A channel to scan"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the channel into characters to be scanned"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified character set does not exist"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified channel. Bytes from the source are converted into characters using the specified charset.", "history": "Added in API level 1", "FullName": "public Scanner (ReadableByteChannel source, String charsetName)"}, "nextFloat()": {"Returns": [["float", "the float scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Float regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a InputMismatchException if the next token cannot be translated into a valid float value as described below. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Float#parseFloat_E@. If the token matches the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\" is passed to @B_java#lang#Float#parseFloat_E@ as appropriate.", "history": "Added in API level 1", "FullName": "public float nextFloat ()"}, "useDelimiter(java.util.regex.Pattern)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: A delimiting pattern"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this scanner's delimiting pattern to the specified pattern.", "history": "Added in API level 1", "FullName": "public Scanner useDelimiter (Pattern pattern)"}, "hasNextBoolean()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid boolean value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a boolean value using a case insensitive pattern created from the string \"true|false\". The scanner does not advance past the input that matched.", "history": "Added in API level 1", "FullName": "public boolean hasNextBoolean ()"}, "hasNextBigInteger()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid BigInteger"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the default radix using the @B_java#util#Scanner#nextBigInteger_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextBigInteger ()"}, "nextLong()": {"Returns": [["long", "the long scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a An invocation of this method of the form radix is the default radix of this scanner.", "history": "Added in API level 1", "FullName": "public long nextLong ()"}, "reset()": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this scanner. Resetting a scanner discards all of its explicit state information which may have been changed by invocations of @B_java#util#Scanner#useDelimiter_E@, @B_java#util#Scanner#useLocale_E@, or @B_java#util#Scanner#useRadix_E@. An invocation of this method of the form", "history": "Added in API level 9", "FullName": "public Scanner reset ()"}, "hasNextShort(int)": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid short value in the specified radix"]], "Parameters": [["int", "int: the radix used to interpret the token as a short value"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a short value in the specified radix using the @B_java#util#Scanner#nextShort_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextShort (int radix)"}, "nextBigDecimal()": {"Returns": [["@B_java#math#BigDecimal_E@", "the BigDecimal scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Decimal regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if the input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a @B_java#math#BigDecimal_E@. If the next token matches the @B_java#lang#Character#digit_E@, and passing the resulting string to the @B_java#math#BigDecimal#BigDecimal_E@ constructor.", "history": "Added in API level 1", "FullName": "public BigDecimal nextBigDecimal ()"}, "hasNextShort()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid short value in the default radix"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a short value in the default radix using the @B_java#util#Scanner#nextShort_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextShort ()"}, "Scanner(java.lang.Readable)": {"Returns": [], "Parameters": [["@B_java#lang#Readable_E@", "Readable: A character source implementing the @B_java#lang#Readable_E@ interface"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified source.", "history": "Added in API level 1", "FullName": "public Scanner (Readable source)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this scanner. If this scanner has not yet been closed then if its underlying @B_java#io#Closeable_E@ interface then the readable's Attempting to perform search operations after a scanner has been closed will result in an @B_java#lang#IllegalStateException_E@.", "history": "Added in API level 1", "FullName": "public void close ()"}, "nextInt()": {"Returns": [["int", "the int scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as an An invocation of this method of the form radix is the default radix of this scanner.", "history": "Added in API level 1", "FullName": "public int nextInt ()"}, "nextShort()": {"Returns": [["short", "the short scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a An invocation of this method of the form radix is the default radix of this scanner.", "history": "Added in API level 1", "FullName": "public short nextShort ()"}, "hasNextBigInteger(int)": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid BigInteger"]], "Parameters": [["int", "int: the radix used to interpret the token as an integer"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a BigInteger in the specified radix using the @B_java#util#Scanner#nextBigInteger_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextBigInteger (int radix)"}, "hasNextFloat()": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid float value"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a float value using the @B_java#util#Scanner#nextFloat_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextFloat ()"}, "remove()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if this method is invoked."]], "SeeAlso": ["@B_java#util#Iterator_E@"], "Permissions": [], "Description": "The remove operation is not supported by this implementation of Iterator.", "history": "Added in API level 1", "FullName": "public void remove ()"}, "match()": {"Returns": [["@B_java#util#regex#MatchResult_E@", "a match result for the last match operation"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If no match result is available"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the match result of the last scanning operation performed by this scanner. This method throws IllegalStateException if no match has been performed, or if the last match was not successful. The various nextmethods of Scanner make a match result available if they complete without throwing an exception. For instance, after an invocation of the @B_java#util#Scanner#nextInt_E@ method that returned an int, this method returns a MatchResult for the search of the @B_java#util#Scanner#findInLine_E@, @B_java#util#Scanner#findWithinHorizon_E@, and @B_java#util#Scanner#skip_E@ methods will make a match available if they succeed.", "history": "Added in API level 1", "FullName": "public MatchResult match ()"}, "nextByte(int)": {"Returns": [["byte", "the byte scanned from the input"]], "Parameters": [["int", "int: the radix used to interpret the token as a byte value"]], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Integer regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a InputMismatchException if the next token cannot be translated into a valid byte value as described below. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Byte#parseByte_E@ with the specified radix.", "history": "Added in API level 1", "FullName": "public byte nextByte (int radix)"}, "nextDouble()": {"Returns": [["double", "the double scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token does not match the Float regular expression, or is out of range"], ["@B_java#util#NoSuchElementException_E@", "if the input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input as a InputMismatchException if the next token cannot be translated into a valid double value. If the translation is successful, the scanner advances past the input that matched. If the next token matches the @B_java#lang#Character#digit_E@, prepending a negative sign (-) if the locale specific negative prefixes and suffixes were present, and passing the resulting string to @B_java#lang#Double#parseDouble_E@. If the token matches the localized NaN or infinity strings, then either \"Nan\" or \"Infinity\" is passed to @B_java#lang#Double#parseDouble_E@ as appropriate.", "history": "Added in API level 1", "FullName": "public double nextDouble ()"}, "nextBoolean()": {"Returns": [["boolean", "the boolean scanned from the input"]], "Parameters": [], "Throws": [["@B_java#util#InputMismatchException_E@", "if the next token is not a valid boolean"], ["@B_java#util#NoSuchElementException_E@", "if input is exhausted"], ["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Scans the next token of the input into a boolean value and returns that value. This method will throw InputMismatchException if the next token cannot be translated into a valid boolean value. If the match is successful, the scanner advances past the input that matched.", "history": "Added in API level 1", "FullName": "public boolean nextBoolean ()"}, "findWithinHorizon(java.util.regex.Pattern,int)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: the pattern to scan for"], ["int", "int: the search horizon"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"], ["@B_java#lang#IllegalArgumentException_E@", "if horizon is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of the specified pattern. This method searches through the input up to the specified search horizon, ignoring delimiters. If the pattern is found the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected then the null is returned and the scanner's position remains unchanged. This method may block waiting for input that matches the pattern. A scanner will never search more than horizon code points beyond its current position. Note that a match may be clipped by the horizon; that is, an arbitrary match result may have been different if the horizon had been larger. The scanner treats the horizon as a transparent, non-anchoring bound (see @B_java#util#regex#Matcher#useTransparentBounds_E@ and @B_java#util#regex#Matcher#useAnchoringBounds_E@). If horizon is 0, then the horizon is ignored and this method continues to search through the input looking for the specified pattern without bound. In this case it may buffer all of the input searching for the pattern. If horizon is negative, then an IllegalArgumentException is thrown.", "history": "Added in API level 1", "FullName": "public String findWithinHorizon (Pattern pattern, int horizon)"}, "findInLine(java.util.regex.Pattern)": {"Returns": [["@B_java#lang#String_E@", "the text that matched the specified pattern"]], "Parameters": [["@B_java#util#regex#Pattern_E@", "Pattern: the pattern to scan for"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to find the next occurrence of the specified pattern ignoring delimiters. If the pattern is found before the next line separator, the scanner advances past the input that matched and returns the string that matched the pattern. If no such pattern is detected in the input up to the next line separator, then null is returned and the scanner's position is unchanged. This method may block waiting for input that matches the pattern. Since this method continues to search through the input looking for the specified pattern, it may buffer all of the input searching for the desired token if no line separators are present.", "history": "Added in API level 1", "FullName": "public String findInLine (Pattern pattern)"}, "hasNextByte(int)": {"Returns": [["boolean", "true if and only if this scanner's next token is a valid byte value"]], "Parameters": [["int", "int: the radix used to interpret the token as a byte value"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if this scanner is closed"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the next token in this scanner's input can be interpreted as a byte value in the specified radix using the @B_java#util#Scanner#nextByte_E@ method. The scanner does not advance past any input.", "history": "Added in API level 1", "FullName": "public boolean hasNextByte (int radix)"}, "Scanner(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: A file to be scanned"], ["@B_java#lang#String_E@", "String: The encoding type used to convert bytes from the file into characters to be scanned"]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if source is not found"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified encoding is not found"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new Scanner that produces values scanned from the specified file. Bytes from the file are converted into characters using the specified charset.", "history": "added in API level 1", "FullName": "public Scanner (File source, String charsetName)"}, "useDelimiter(java.lang.String)": {"Returns": [["@B_java#util#Scanner_E@", "this scanner"]], "Parameters": [["@B_java#lang#String_E@", "String: A string specifying a delimiting pattern"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this scanner's delimiting pattern to a pattern constructed from the specified String. An invocation of this method of the form Invoking the @B_java#util#Scanner#reset_E@ method will set the scanner's delimiter to the", "history": "Added in API level 1", "FullName": "public Scanner useDelimiter (String pattern)"}}, "Inheritance": [], "ClassName": "java.util.Scanner", "ClassDesc": "A simple text scanner which can parse primitive types and strings using regular expressions. A Scanner breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various For example, this code allows a user to read a number from As another example, this code allows long types to be assigned from entries in a file myNumbers: The scanner can also use delimiters other than whitespace. This example reads several items in from a string: prints the following output: The same output can be generated with this code, which uses a regular expression to parse all four tokens at once: The @B_java#lang#Character_E@.@B_java#lang#Character#isWhitespace_E@. The @B_java#util#Scanner#reset_E@ method will reset the value of the scanner's delimiter to the default whitespace delimiter regardless of whether it was previously changed. A scanning operation may block waiting for input. The @B_java#util#Scanner#next_E@ and @B_java#util#Scanner#hasNext_E@ methods and their primitive-type companion methods (such as @B_java#util#Scanner#nextInt_E@ and @B_java#util#Scanner#hasNextInt_E@) first skip any input that matches the delimiter pattern, and then attempt to return the next token. Both The @B_java#util#Scanner#findInLine_E@, @B_java#util#Scanner#findWithinHorizon_E@, and @B_java#util#Scanner#skip_E@ methods operate independently of the delimiter pattern. These methods will attempt to match the specified pattern with no regard to delimiters in the input and thus can be used in special circumstances where delimiters are not relevant. These methods may block waiting for more input. When a scanner throws an @B_java#util#InputMismatchException_E@, the scanner will not pass the token that caused the exception, so that it may be retrieved or skipped via some other method. Depending upon the type of delimiting pattern, empty tokens may be returned. For example, the pattern A scanner can read text from any object which implements the @B_java#lang#Readable_E@ interface. If an invocation of the underlying readable's @B_java#lang#Readable#read_E@ method throws an @B_java#io#IOException_E@ then the scanner assumes that the end of the input has been reached. The most recent @B_java#util#Scanner#ioException_E@ method. When a Scanner is closed, it will close its input source if the source implements the @B_java#io#Closeable_E@ interface. A Scanner is not safe for multithreaded use without external synchronization. Unless otherwise mentioned, passing a null parameter into any method of a Scanner will cause a NullPointerException to be thrown. A scanner will default to interpreting numbers as decimal unless a different radix has been set by using the @B_java#util#Scanner#useRadix_E@ method. The @B_java#util#Scanner#reset_E@ method will reset the value of the scanner's radix to 10 regardless of whether it was previously changed. An instance of this class is capable of scanning numbers in the standard formats as well as in the formats of the scanner's locale. A scanner's @B_java#util#Locale#getDefault_E@ method; it may be changed via the @B_java#util#Scanner#useLocale_E@ method. The @B_java#util#Scanner#reset_E@ method will reset the value of the scanner's locale to the initial locale regardless of whether it was previously changed. The localized formats are defined in terms of the following parameters, which for a particular locale are taken from that locale's @B_java#text#DecimalFormat_E@ object, @B_java#text#DecimalFormatSymbols_E@ object, The strings that can be parsed as numbers by an instance of this class are specified in terms of the following regular-expression grammar, where Rmax is the highest digit in the radix being used (for example, Rmax is 9 in base 10). Whitespace is not significant in the above regular expressions."}