{"Functions": {"setActivated(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean: true if the view must be activated, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setActivated_E@ directly. Changes the activated state of this view. A view can be activated or not. Note that activation is not the same as selection. Selection is a transient property, representing the view (hierarchy) the user is currently interacting with. Activation is a longer-term state that the user can move views in and out of.", "history": "added in version 22.0.0", "FullName": "void setActivated (View view, boolean activated)"}, "setTranslationX(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The horizontal position of this view relative to its left position, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setTranslationX_E@ directly. Sets the horizontal location of this view relative to its left position. This effectively positions the object post-layout, in addition to wherever the object's layout placed it.", "history": "added in version 22.0.0", "FullName": "void setTranslationX (View view, float value)"}, "getMeasuredHeightAndState(android.view.View)": {"Returns": [["int", "The measured width of this view as a bit mask."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getMeasuredHeightAndState_E@ directly. Return the full height measurement information for this view as computed by the most recent call to @B_android#view#View#measure_E@. This result is a bit mask as defined by @B_android#support#v4#view#ViewCompat#MEASURED_SIZE_MASK_E@ and @B_android#support#v4#view#ViewCompat#MEASURED_STATE_TOO_SMALL_E@. This should be used during measurement and layout calculations only. Use @B_android#view#View#getHeight_E@ to see how wide a view is after layout.", "history": "added in version 22.0.0", "FullName": "int getMeasuredHeightAndState (View view)"}, "offsetTopAndBottom(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: the number of pixels to offset the view by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset this view's vertical location by the specified number of pixels.", "history": "added in version 22.2.0", "FullName": "void offsetTopAndBottom (View view, int offset)"}, "setScaleX(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The scaling factor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setScaleX_E@ directly. Sets the amount that the view is scaled in x around the pivot point, as a proportion of the view's unscaled width. A value of 1 means that no scaling is applied.", "history": "added in version 22.0.0", "FullName": "void setScaleX (View view, float value)"}, "getMatrix(android.view.View)": {"Returns": [["@B_android#graphics#Matrix_E@", "The current transform matrix for the view"]], "Parameters": [["@B_android#view#View_E@", "View: The view whose Matrix will be returned"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#getRotation_E@", "@B_android#support#v4#view#ViewCompat#getScaleX_E@", "@B_android#support#v4#view#ViewCompat#getScaleY_E@", "@B_android#support#v4#view#ViewCompat#getPivotX_E@", "@B_android#support#v4#view#ViewCompat#getPivotY_E@"], "Permissions": [], "Description": "Use @B_android#view#View#getMatrix_E@ directly. The transform matrix of this view, which is calculated based on the current rotation, scale, and pivot properties.", "history": "added in version 24.0.0", "FullName": "Matrix getMatrix (View view)"}, "setLayoutDirection(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to set layout direction for"], ["int", "int: the layout direction to set. Should be one of: @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LTR_E@, @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_RTL_E@, @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_INHERIT_E@, @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LOCALE_E@. Resolution will be done if the value is set to LAYOUT_DIRECTION_INHERIT. The resolution proceeds up the parent chain of the view to get the value. If there is no parent, then it will return the default @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LTR_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the layout direction for this view. This will propagate a reset of layout direction resolution to the view's children and resolve layout direction for this view.", "history": "added in version 22.0.0", "FullName": "void setLayoutDirection (View view, int layoutDirection)"}, "offsetLeftAndRight(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: the number of pixels to offset the view by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset this view's horizontal location by the specified amount of pixels.", "history": "added in version 22.2.0", "FullName": "void offsetLeftAndRight (View view, int offset)"}, "setAccessibilityLiveRegion(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view on which to set the live region mode"], ["int", "int: The live region mode for this view, one of: ACCESSIBILITY_LIVE_REGION_NONE ACCESSIBILITY_LIVE_REGION_POLITE ACCESSIBILITY_LIVE_REGION_ASSERTIVE"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the live region mode for the specified view. This indicates to accessibility services whether they should automatically notify the user about changes to the view's content description or text, or to the content descriptions or text of the view's children (where applicable). For example, in a login screen with a TextView that displays an \"incorrect password\" notification, that view should be marked as a live region with mode @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_POLITE_E@. To disable change notifications for this view, use @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_NONE_E@. This is the default live region mode for most views. To indicate that the user should be notified of changes, use @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_POLITE_E@. If the view's changes should interrupt ongoing speech and notify the user immediately, use @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_ASSERTIVE_E@.", "history": "added in version 22.0.0", "FullName": "void setAccessibilityLiveRegion (View view, int mode)"}, "stopNestedScroll(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#startNestedScroll_E@"], "Permissions": [], "Description": "Stop a nested scroll in progress. This version of the method just calls @B_android#support#v4#view#ViewCompat#stopNestedScroll_E@ using the touch input type.", "history": "added in version 22.1.0", "FullName": "void stopNestedScroll (View view)"}, "setRotationX(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The degrees of X rotation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setRotationX_E@ directly. Sets the degrees that the view is rotated around the horizontal axis through the pivot point. Increasing values result in clockwise rotation from the viewpoint of looking down the x axis.", "history": "added in version 22.0.0", "FullName": "void setRotationX (View view, float value)"}, "getZ(android.view.View)": {"Returns": [["float", "The visual z position of this view, in pixels."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The visual z position of this view, in pixels. This is equivalent to the @B_android#support#v4#view#ViewCompat#setTranslationZ_E@ property plus the current @B_android#support#v4#view#ViewCompat#getElevation_E@ property.", "history": "added in version 22.1.0", "FullName": "float getZ (View view)"}, "hasNestedScrollingParent(android.view.View, int)": {"Returns": [["boolean", "whether this view has a nested scrolling parent"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: the type of input which cause this scroll event"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this view has a nested scrolling parent. The presence of a nested scrolling parent indicates that this view has initiated a nested scroll and it was accepted by an ancestor view further up the view hierarchy.", "history": "added in version 26.0.0-beta2", "FullName": "boolean hasNestedScrollingParent (View view, int type)"}, "canScrollHorizontally(android.view.View, int)": {"Returns": [["boolean", "true if this view can be scrolled in the specified direction, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View: The View against which to invoke the method."], ["int", "int: Negative to check scrolling left, positive to check scrolling right."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#canScrollHorizontally_E@ directly. Check if this view can be scrolled horizontally in a certain direction.", "history": "added in version 22.0.0", "FullName": "boolean canScrollHorizontally (View view, int direction)"}, "getClipBounds(android.view.View)": {"Returns": [["@B_android#graphics#Rect_E@", "A copy of the current clip bounds if clip bounds are set, otherwise null."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of the current @B_android#support#v4#view#ViewCompat#setClipBounds_E@. Prior to API 18 this will return null.", "history": "added in version 23.0.0", "FullName": "Rect getClipBounds (View view)"}, "stopNestedScroll(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: the type of input which cause this scroll event"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#startNestedScroll_E@"], "Permissions": [], "Description": "Stop a nested scroll in progress. Calling this method when a nested scroll is not currently in progress is harmless.", "history": "added in version 26.0.0-beta2", "FullName": "void stopNestedScroll (View view, int type)"}, "requestApplyInsets(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask that a new dispatch of View.onApplyWindowInsets(WindowInsets) be performed. This falls back to View.requestFitSystemWindows() where available.", "history": "added in version 22.0.0", "FullName": "void requestApplyInsets (View view)"}, "setFocusedByDefault(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean: true to set view as the default-focus view, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether view should receive focus when the focus is restored for the view hierarchy containing it. Focus gets restored for a view hierarchy when the root of the hierarchy gets added to a window or serves as a target of cluster navigation. Does nothing on API < 26.", "history": "added in version 26.0.0-beta1", "FullName": "void setFocusedByDefault (View view, boolean isFocusedByDefault)"}, "getLabelFor(android.view.View)": {"Returns": [["int", "The labeled view id."]], "Parameters": [["@B_android#view#View_E@", "View: The view on which to invoke the corresponding method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id of a view for which a given view serves as a label for accessibility purposes.", "history": "added in version 22.0.0", "FullName": "int getLabelFor (View view)"}, "getBackgroundTintList(android.view.View)": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the tint applied to the background drawable, if specified. Only returns meaningful info when running on API v21 or newer, or if view implements the TintableBackgroundView interface.", "history": "added in version 22.1.0", "FullName": "ColorStateList getBackgroundTintList (View view)"}, "getImportantForAccessibility(android.view.View)": {"Returns": [["int", "The mode for determining whether a View is important for accessibility."]], "Parameters": [["@B_android#view#View_E@", "View: The view whose property to get."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat_E@"], "Permissions": [], "Description": "Gets the mode for determining whether this View is important for accessibility which is if it fires accessibility events and if it is reported to accessibility services that query the screen.", "history": "added in version 22.0.0", "FullName": "int getImportantForAccessibility (View view)"}, "getScaleY(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getScaleY_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getScaleY (View view)"}, "getPivotX(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getPivotX_E@ directly. The x location of the point around which the view is @B_android#support#v4#view#ViewCompat#setRotation_E@ and @B_android#support#v4#view#ViewCompat#setScaleX_E@.", "history": "added in version 22.0.0", "FullName": "float getPivotX (View view)"}, "getRotation(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getRotation_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getRotation (View view)"}, "getMeasuredWidthAndState(android.view.View)": {"Returns": [["int", "The measured width of this view as a bit mask."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getMeasuredWidth_E@ directly. Return the full width measurement information for this view as computed by the most recent call to @B_android#view#View#measure_E@. This result is a bit mask as defined by @B_android#support#v4#view#ViewCompat#MEASURED_SIZE_MASK_E@ and @B_android#support#v4#view#ViewCompat#MEASURED_STATE_TOO_SMALL_E@. This should be used during measurement and layout calculations only. Use @B_android#view#View#getWidth_E@ to see how wide a view is after layout.", "history": "added in version 22.0.0", "FullName": "int getMeasuredWidthAndState (View view)"}, "hasNestedScrollingParent(android.view.View)": {"Returns": [["boolean", "whether this view has a nested scrolling parent"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this view has a nested scrolling parent. This version of the method just calls @B_android#support#v4#view#ViewCompat#hasNestedScrollingParent_E@ using the touch input type.", "history": "added in version 22.1.0", "FullName": "boolean hasNestedScrollingParent (View view)"}, "setTranslationY(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The vertical position of this view relative to its top position, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setTranslationY_E@ directly. Sets the vertical location of this view relative to its top position. This effectively positions the object post-layout, in addition to wherever the object's layout placed it.", "history": "added in version 22.0.0", "FullName": "void setTranslationY (View view, float value)"}, "setOverScrollMode(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View against which to invoke the method."], ["int", "int: The new over-scroll mode for this view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#view#View#setOverScrollMode_E@ directly. This method will be removed in a future release. Set the over-scroll mode for this view. Valid over-scroll modes are @B_android#support#v4#view#ViewCompat#OVER_SCROLL_ALWAYS_E@ (default), @B_android#support#v4#view#ViewCompat#OVER_SCROLL_IF_CONTENT_SCROLLS_E@ (allow over-scrolling only if the view content is larger than the container), or @B_android#support#v4#view#ViewCompat#OVER_SCROLL_NEVER_E@. Setting the over-scroll mode of a view will have an effect only if the view is capable of scrolling.", "history": "added in version 22.0.0", "FullName": "void setOverScrollMode (View v, int overScrollMode)"}, "hasOnClickListeners(android.view.View)": {"Returns": [["boolean", "true if there is a listener, false if there is none."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the provided view has an attached @B_android#view#View#OnClickListener_E@.", "history": "added in version 23.1.0", "FullName": "boolean hasOnClickListeners (View view)"}, "animate(android.view.View)": {"Returns": [["@B_android#support#v4#view#ViewPropertyAnimatorCompat_E@", "ViewPropertyAnimator The ViewPropertyAnimator associated with this View."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method returns a ViewPropertyAnimator object, which can be used to animate specific properties on this View.", "history": "added in version 22.0.0", "FullName": "ViewPropertyAnimatorCompat animate (View view)"}, "getScrollIndicators(android.view.View)": {"Returns": [["int", "a bitmask representing the enabled scroll indicators"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a bitmask representing the enabled scroll indicators. For example, if the top and left scroll indicators are enabled and all other indicators are disabled, the return value will be ViewCompat.SCROLL_INDICATOR_TOP | ViewCompat.SCROLL_INDICATOR_LEFT. To check whether the bottom scroll indicator is enabled, use the value of (ViewCompat.getScrollIndicators(view) & ViewCompat.SCROLL_INDICATOR_BOTTOM) != 0.", "history": "added in version 23.1.0", "FullName": "int getScrollIndicators (View view)"}, "setPivotX(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The x location of the pivot point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setPivotX_E@ directly. Sets the x location of the point around which the view is @B_android#support#v4#view#ViewCompat#setRotation_E@ and @B_android#support#v4#view#ViewCompat#setScaleX_E@. By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.", "history": "added in version 22.0.0", "FullName": "void setPivotX (View view, float value)"}, "isPaddingRelative(android.view.View)": {"Returns": [["boolean", "true if the padding is relative or false if it is not."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return if the padding as been set through relative values View.setPaddingRelative(int, int, int, int) or thru", "history": "added in version 22.1.0", "FullName": "boolean isPaddingRelative (View view)"}, "getPaddingStart(android.view.View)": {"Returns": [["int", "the start padding in pixels"]], "Parameters": [["@B_android#view#View_E@", "View: The view to get padding for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the start padding of the specified view depending on its resolved layout direction. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.", "history": "added in version 22.0.0", "FullName": "int getPaddingStart (View view)"}, "setRotationY(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The degrees of Y rotation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setRotationY_E@ directly. Sets the degrees that the view is rotated around the vertical axis through the pivot point. Increasing values result in counter-clockwise rotation from the viewpoint of looking down the y axis.", "history": "added in version 22.0.0", "FullName": "void setRotationY (View view, float value)"}, "isFocusedByDefault(android.view.View)": {"Returns": [["boolean", "true if view is the default-focus view, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether view should receive focus when the focus is restored for the view hierarchy containing it. Returns false on API < 26. Focus gets restored for a view hierarchy when the root of the hierarchy gets added to a window or serves as a target of cluster navigation.", "history": "added in version 26.0.0-beta1", "FullName": "boolean isFocusedByDefault (View view)"}, "setZ(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The visual z position of this view, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the visual z position of this view, in pixels. This is equivalent to setting the @B_android#support#v4#view#ViewCompat#setTranslationZ_E@ property to be the difference between the x value passed in and the current @B_android#support#v4#view#ViewCompat#getElevation_E@ property. Compatibility: API < 21: No-op", "history": "added in version 24.0.0", "FullName": "void setZ (View view, float z)"}, "getTranslationY(android.view.View)": {"Returns": [["float", "The vertical position of this view relative to its top position, in pixels."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getTranslationY_E@ directly. The vertical location of this view relative to its @B_android#view#View#getTop_E@ position. This position is post-layout, in addition to wherever the object's layout placed it.", "history": "added in version 22.0.0", "FullName": "float getTranslationY (View view)"}, "isNestedScrollingEnabled(android.view.View)": {"Returns": [["boolean", "true if nested scrolling is enabled"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setNestedScrollingEnabled_E@"], "Permissions": [], "Description": "Returns true if nested scrolling is enabled for this view. If nested scrolling is enabled and this View class implementation supports it, this view will act as a nested scrolling child view when applicable, forwarding data about the scroll operation in progress to a compatible and cooperating nested scrolling parent.", "history": "added in version 22.1.0", "FullName": "boolean isNestedScrollingEnabled (View view)"}, "getAlpha(android.view.View)": {"Returns": [["float", "The opacity of the view."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getAlpha_E@ directly. The opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. By default this is 1.0f.", "history": "added in version 22.0.0", "FullName": "float getAlpha (View view)"}, "canScrollVertically(android.view.View, int)": {"Returns": [["boolean", "true if this view can be scrolled in the specified direction, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View: The View against which to invoke the method."], ["int", "int: Negative to check scrolling up, positive to check scrolling down."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#canScrollVertically_E@ directly. Check if this view can be scrolled vertically in a certain direction.", "history": "added in version 22.0.0", "FullName": "boolean canScrollVertically (View view, int direction)"}, "isInLayout(android.view.View)": {"Returns": [["boolean", "whether the view hierarchy is currently undergoing a layout pass"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the view hierarchy is currently undergoing a layout pass. This information is useful to avoid situations such as calling @B_android#view#View#requestLayout_E@ during a layout pass. Compatibility: API < 18: Always returns false", "history": "added in version 24.0.0", "FullName": "boolean isInLayout (View view)"}, "getTransitionName(android.view.View)": {"Returns": [["@B_java#lang#String_E@", "The name used of the View to be used to identify Views in Transitions or null if no name has been given."]], "Parameters": [["@B_android#view#View_E@", "View: The View against which to invoke the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the View to be used to identify Views in Transitions. Names should be unique in the View hierarchy. This returns null if the View has not been given a name.", "history": "added in version 22.0.0", "FullName": "String getTransitionName (View view)"}, "restoreDefaultFocus(android.view.View)": {"Returns": [["boolean", "true if view or one of its descendants took focus, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gives focus to the default-focus view in the view hierarchy rooted at view. If the default-focus view cannot be found or if API < 26, this falls back to calling @B_android#view#View#requestFocus_E@.", "history": "added in version 26.0.0-beta1", "FullName": "boolean restoreDefaultFocus (View view)"}, "dispatchFinishTemporaryDetach(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify a view that its temporary detach has ended; the view is now reattached.", "history": "added in version 22.0.0", "FullName": "void dispatchFinishTemporaryDetach (View view)"}, "setElevation(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the base elevation of this view, in pixels.", "history": "added in version 22.0.0", "FullName": "void setElevation (View view, float elevation)"}, "getMinimumHeight(android.view.View)": {"Returns": [["int", "the minimum height the view will try to be."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum height of the view. Prior to API 16, this method may return 0 on some platforms.", "history": "added in version 22.0.0", "FullName": "int getMinimumHeight (View view)"}, "getX(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getX_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getX (View view)"}, "isAttachedToWindow(android.view.View)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the provided view is currently attached to a window.", "history": "added in version 22.2.0", "FullName": "boolean isAttachedToWindow (View view)"}, "setFitsSystemWindows(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setFitsSystemWindows_E@ directly. Sets whether or not this view should account for system screen decorations such as the status bar and inset its content; that is, controlling whether the default implementation of @B_android#view#View#fitSystemWindows_E@ will be executed. See that method for more details.", "history": "added in version 22.0.0", "FullName": "void setFitsSystemWindows (View view, boolean fitSystemWindows)"}, "getTranslationZ(android.view.View)": {"Returns": [["float", "The depth of this view relative to its elevation."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The depth location of this view relative to its @B_android#support#v4#view#ViewCompat#getElevation_E@.", "history": "added in version 22.0.0", "FullName": "float getTranslationZ (View view)"}, "getRotationY(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getRotationY_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getRotationY (View view)"}, "setScrollIndicators(android.view.View, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: the indicator direction, or the logical OR of multiple indicator directions. One or more of: SCROLL_INDICATOR_TOP SCROLL_INDICATOR_BOTTOM SCROLL_INDICATOR_LEFT SCROLL_INDICATOR_RIGHT SCROLL_INDICATOR_START SCROLL_INDICATOR_END"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setScrollIndicators_E@", "@B_android#support#v4#view#ViewCompat#getScrollIndicators_E@"], "Permissions": [], "Description": "Sets the state of the scroll indicators specified by the mask. To change all scroll indicators at once, see @B_android#support#v4#view#ViewCompat#setScrollIndicators_E@. When a scroll indicator is enabled, it will be displayed if the view can scroll in the direction of the indicator. Multiple indicator types may be enabled or disabled by passing the logical OR of the desired types. If multiple types are specified, they will all be set to the same enabled state. For example, to enable the top scroll indicatorExample: setScrollIndicators", "history": "added in version 23.1.0", "FullName": "void setScrollIndicators (View view, int indicators, int mask)"}, "setAlpha(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The opacity of the view.Value is between 0.0 and 1.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setAlpha_E@ directly. Sets the opacity of the view. This is a value from 0 to 1, where 0 means the view is completely transparent and 1 means the view is completely opaque. Note that setting alpha to a translucent value (0 < alpha < 1) can have significant performance implications, especially for large views. It is best to use the alpha property sparingly and transiently, as in the case of fading animations.", "history": "added in version 22.0.0", "FullName": "void setAlpha (View view, float value)"}, "getMeasuredState(android.view.View)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getMeasuredState_E@ directly. Return only the state bits of @B_android#support#v4#view#ViewCompat#getMeasuredWidthAndState_E@ and @B_android#support#v4#view#ViewCompat#getMeasuredHeightAndState_E@, combined into one integer. The width component is in the regular bits @B_android#support#v4#view#ViewCompat#MEASURED_STATE_MASK_E@ and the height component is at the shifted bits @B_android#support#v4#view#ViewCompat#MEASURED_HEIGHT_STATE_SHIFT_E@>>@B_android#support#v4#view#ViewCompat#MEASURED_STATE_MASK_E@.", "history": "added in version 22.0.0", "FullName": "int getMeasuredState (View view)"}, "getOverScrollMode(android.view.View)": {"Returns": [["int", "This view's over-scroll mode."]], "Parameters": [["@B_android#view#View_E@", "View: The View against which to invoke the method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call @B_android#view#View#getOverScrollMode_E@ directly. This method will be removed in a future release. Returns the over-scroll mode for this view. The result will be one of @B_android#support#v4#view#ViewCompat#OVER_SCROLL_ALWAYS_E@ (default), @B_android#support#v4#view#ViewCompat#OVER_SCROLL_IF_CONTENT_SCROLLS_E@ (allow over-scrolling only if the view content is larger than the container), or @B_android#support#v4#view#ViewCompat#OVER_SCROLL_NEVER_E@.", "history": "added in version 22.0.0", "FullName": "int getOverScrollMode (View v)"}, "cancelDragAndDrop(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancel the drag and drop operation.", "history": "added in version 24.0.0", "FullName": "void cancelDragAndDrop (View v)"}, "getAccessibilityLiveRegion(android.view.View)": {"Returns": [["int", "The live region mode for the view."]], "Parameters": [["@B_android#view#View_E@", "View: The view from which to obtain the live region mode"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setAccessibilityLiveRegion_E@"], "Permissions": [], "Description": "Gets the live region mode for the specified View.", "history": "added in version 22.0.0", "FullName": "int getAccessibilityLiveRegion (View view)"}, "getAccessibilityNodeProvider(android.view.View)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeProviderCompat_E@", "The provider."]], "Parameters": [["@B_android#view#View_E@", "View: The view whose property to get."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeProviderCompat_E@"], "Permissions": [], "Description": "Gets the provider for managing a virtual view hierarchy rooted at this View and reported to @B_android#accessibilityservice#AccessibilityService_E@s that explore the window content. If this method returns an instance, this instance is responsible for managing @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@s describing the virtual sub-tree rooted at this View including the one representing the View itself. Similarly the returned instance is responsible for performing accessibility actions on any virtual view or the root view itself. If an @B_android#support#v4#view#AccessibilityDelegateCompat_E@ has been specified via calling @B_android#support#v4#view#ViewCompat#setAccessibilityDelegate_E@ its @B_android#support#v4#view#AccessibilityDelegateCompat#getAccessibilityNodeProvider_E@ is responsible for handling this call.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeProviderCompat getAccessibilityNodeProvider (View view)"}, "getTranslationX(android.view.View)": {"Returns": [["float", "The horizontal position of this view relative to its left position, in pixels."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getTranslationX_E@ directly. The horizontal location of this view relative to its @B_android#view#View#getLeft_E@ position. This position is post-layout, in addition to wherever the object's layout placed it.", "history": "added in version 22.0.0", "FullName": "float getTranslationX (View view)"}, "getPivotY(android.view.View)": {"Returns": [["float", "The y location of the pivot point."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getPivotY_E@ directly. The y location of the point around which the view is @B_android#support#v4#view#ViewCompat#setRotation_E@ and @B_android#support#v4#view#ViewCompat#setScaleY_E@.", "history": "added in version 22.0.0", "FullName": "float getPivotY (View view)"}, "setHasTransientState(android.view.View, boolean)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View tracking transient state"], ["boolean", "boolean: true if this view has transient state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this view is currently tracking transient state that the framework should attempt to preserve when possible.", "history": "added in version 22.0.0", "FullName": "void setHasTransientState (View view, boolean hasTransientState)"}, "isImportantForAccessibility(android.view.View)": {"Returns": [["boolean", "Whether the view is exposed for accessibility."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setImportantForAccessibility_E@", "@B_android#support#v4#view#ViewCompat#getImportantForAccessibility_E@"], "Permissions": [], "Description": "Computes whether this view should be exposed for accessibility. In general, views that are interactive or provide information are exposed while views that serve only as containers are hidden. If an ancestor of this view has importance @B_android#support#v4#view#ViewCompat#IMPORTANT_FOR_ACCESSIBILITY_NO_HIDE_DESCENDANTS_E@, this method returns false. Otherwise, the value is computed according to the view's @B_android#support#v4#view#ViewCompat#getImportantForAccessibility_E@ value: Note: Prior to API 21, this method will always return true.", "history": "added in version 24.2.0", "FullName": "boolean isImportantForAccessibility (View view)"}, "getPaddingEnd(android.view.View)": {"Returns": [["int", "the end padding in pixels"]], "Parameters": [["@B_android#view#View_E@", "View: The view to get padding for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the end padding of the specified view depending on its resolved layout direction. If there are inset and enabled scrollbars, this value may include the space required to display the scrollbars as well.", "history": "added in version 22.0.0", "FullName": "int getPaddingEnd (View view)"}, "getParentForAccessibility(android.view.View)": {"Returns": [["@B_android#view#ViewParent_E@", "The parent for use in accessibility inspection"]], "Parameters": [["@B_android#view#View_E@", "View: View to retrieve parent for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the parent for accessibility purposes. Note that the parent for accessibility is not necessary the immediate parent. It is the first predecessor that is important for accessibility.", "history": "added in version 22.0.0", "FullName": "ViewParent getParentForAccessibility (View view)"}, "isOpaque(android.view.View)": {"Returns": [["boolean", "True if this View is guaranteed to be fully opaque, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#isOpaque_E@ directly. This method will be removed in a future release. Indicates whether this View is opaque. An opaque View guarantees that it will draw all the pixels overlapping its bounds using a fully opaque color.", "history": "added in version 22.0.0", "FullName": "boolean isOpaque (View view)"}, "hasOverlappingRendering(android.view.View)": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized.", "history": "added in version 23.0.0", "FullName": "boolean hasOverlappingRendering (View view)"}, "getRotationX(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getRotationX_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getRotationX (View view)"}, "getScaleX(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getScaleX_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getScaleX (View view)"}, "getBackgroundTintMode(android.view.View)": {"Returns": [["@B_android#graphics#PorterDuff#Mode_E@", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the blending mode used to apply the tint to the background drawable, if specified. Only returns meaningful info when running on API v21 or newer, or if view implements the TintableBackgroundView interface.", "history": "added in version 22.1.0", "FullName": "PorterDuff.Mode getBackgroundTintMode (View view)"}, "setNextClusterForwardId(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: next cluster ID, or @B_android#view#View#NO_ID_E@ if the framework should decide automatically."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the ID of the next keyboard navigation cluster root view. Does nothing if view is not a keyboard navigation cluster or if API < 26.", "history": "added in version 26.0.0-beta1", "FullName": "void setNextClusterForwardId (View view, int nextClusterForwardId)"}, "getWindowSystemUiVisibility(android.view.View)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current system UI visibility that is currently set for the entire window.", "history": "added in version 22.0.0", "FullName": "int getWindowSystemUiVisibility (View view)"}, "setY(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The visual y position of this view, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setY_E@ directly. Sets the visual y position of this view, in pixels. This is equivalent to setting the @B_android#support#v4#view#ViewCompat#setTranslationY_E@ property to be the difference between the y value passed in and the current top property of the view as determined by the layout bounds.", "history": "added in version 22.0.0", "FullName": "void setY (View view, float value)"}, "getLayerType(android.view.View)": {"Returns": [["int", "@B_android#view#View#LAYER_TYPE_NONE_E@, @B_android#view#View#LAYER_TYPE_SOFTWARE_E@ or @B_android#view#View#LAYER_TYPE_HARDWARE_E@"]], "Parameters": [["@B_android#view#View_E@", "View: The view to fetch the layer type from"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setLayerType_E@", "@B_android#view#View_E@"], "Permissions": [], "Description": "Use @B_android#view#View#getLayerType_E@ directly. Indicates what type of layer is currently associated with this view. By default a view does not have a layer, and the layer type is @B_android#view#View#LAYER_TYPE_NONE_E@. Refer to the documentation of @B_android#support#v4#view#ViewCompat#setLayerType_E@ for more information on the different types of layers.", "history": "added in version 22.0.0", "FullName": "int getLayerType (View view)"}, "getLayoutDirection(android.view.View)": {"Returns": [["int", "@B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_RTL_E@ if the layout direction is RTL or returns @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LTR_E@ if the layout direction is not RTL. For compatibility, this will return @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LTR_E@ if API version is lower than Jellybean MR1 (API 17)"]], "Parameters": [["@B_android#view#View_E@", "View: View to get layout direction for"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the resolved layout direction for this view.", "history": "added in version 22.0.0", "FullName": "int getLayoutDirection (View view)"}, "startNestedScroll(android.view.View, int, int)": {"Returns": [["boolean", "true if a cooperative parent was found and nested scrolling has been enabled for the current gesture."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: Flags consisting of a combination of @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_HORIZONTAL_E@ and/or @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_VERTICAL_E@."], ["int", "int: the type of input which cause this scroll event"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#stopNestedScroll_E@", "@B_android#support#v4#view#ViewCompat#dispatchNestedPreScroll_E@", "@B_android#support#v4#view#ViewCompat#dispatchNestedScroll_E@"], "Permissions": [], "Description": "Begin a nestable scroll operation along the given axes. A view starting a nested scroll promises to abide by the following contract: The view will call startNestedScroll upon initiating a scroll operation. In the case of a touch scroll this corresponds to the initial @B_android#view#MotionEvent#ACTION_DOWN_E@. In the case of touch scrolling the nested scroll will be terminated automatically in the same manner as @B_android#view#ViewParent#requestDisallowInterceptTouchEvent_E@. In the event of programmatic scrolling the caller must explicitly call @B_android#support#v4#view#ViewCompat#stopNestedScroll_E@ to indicate the end of the nested scroll. If startNestedScroll returns true, a cooperative parent was found. If it returns false the caller may ignore the rest of this contract until the next scroll. Calling startNestedScroll while a nested scroll is already in progress will return true. At each incremental step of the scroll the caller should invoke @B_android#support#v4#view#ViewCompat#dispatchNestedPreScroll_E@ once it has calculated the requested scrolling delta. If it returns true the nested scrolling parent at least partially consumed the scroll and the caller should adjust the amount it scrolls by. After applying the remainder of the scroll delta the caller should invoke @B_android#support#v4#view#ViewCompat#dispatchNestedScroll_E@, passing both the delta consumed and the delta unconsumed. A nested scrolling parent may treat these values differently. See @B_android#support#v4#view#NestedScrollingParent#onNestedScroll_E@.", "history": "added in version 26.0.0-beta2", "FullName": "boolean startNestedScroll (View view, int axes, int type)"}, "hasTransientState(android.view.View)": {"Returns": [["boolean", "true if the view has transient state"]], "Parameters": [["@B_android#view#View_E@", "View: View to check for transient state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the view is currently tracking transient state that the app should not need to concern itself with saving and restoring, but that the framework should take special note to preserve when possible.", "history": "added in version 22.0.0", "FullName": "boolean hasTransientState (View view)"}, "setScaleY(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The scaling factor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setScaleY_E@ directly. Sets the amount that the view is scaled in Y around the pivot point, as a proportion of the view's unscaled width. A value of 1 means that no scaling is applied.", "history": "added in version 22.0.0", "FullName": "void setScaleY (View view, float value)"}, "getFitsSystemWindows(android.view.View)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this view should adapt to fit system window insets. This method will always return false before API 16 (Jellybean).", "history": "added in version 22.0.0", "FullName": "boolean getFitsSystemWindows (View v)"}, "postInvalidateOnAnimation(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to invalidate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cause an invalidate to happen on the next animation time step, typically the next display frame. This method can be invoked from outside of the UI thread only when this View is attached to a window.", "history": "added in version 22.0.0", "FullName": "void postInvalidateOnAnimation (View view)"}, "isLayoutDirectionResolved(android.view.View)": {"Returns": [["boolean", "true if layout direction has been resolved."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether layout direction has been resolved. Compatibility: API < 19: Always returns false", "history": "added in version 24.0.0", "FullName": "boolean isLayoutDirectionResolved (View view)"}, "isLaidOut(android.view.View)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if view has been through at least one layout since it was last attached to or detached from a window.", "history": "added in version 22.1.0", "FullName": "boolean isLaidOut (View view)"}, "getMinimumWidth(android.view.View)": {"Returns": [["int", "the minimum width the view will try to be."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum width of the view. Prior to API 16, this method may return 0 on some platforms.", "history": "added in version 22.0.0", "FullName": "int getMinimumWidth (View view)"}, "setRotation(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The degrees of rotation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setRotation_E@ directly. Sets the degrees that the view is rotated around the pivot point. Increasing values result in clockwise rotation.", "history": "added in version 22.0.0", "FullName": "void setRotation (View view, float value)"}, "getElevation(android.view.View)": {"Returns": [["float", "The base depth position of the view, in pixels."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The base elevation of this view relative to its parent, in pixels.", "history": "added in version 22.0.0", "FullName": "float getElevation (View view)"}, "setPivotY(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The y location of the pivot point."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setPivotX_E@ directly. Sets the y location of the point around which the view is @B_android#support#v4#view#ViewCompat#setRotation_E@ and @B_android#support#v4#view#ViewCompat#setScaleY_E@. By default, the pivot point is centered on the object. Setting this property disables this behavior and causes the view to use only the explicitly set pivotX and pivotY values.", "history": "added in version 22.0.0", "FullName": "void setPivotY (View view, float value)"}, "combineMeasuredStates(int, int)": {"Returns": [["int", "Returns a new integer reflecting the combination of the two states."]], "Parameters": [["int", "int: The current state as returned from a view or the result of combining multiple views."], ["int", "int: The new view state to combine."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#combineMeasuredStates_E@ directly. Merge two states as returned by @B_android#support#v4#view#ViewCompat#getMeasuredState_E@.", "history": "added in version 22.1.0", "FullName": "int combineMeasuredStates (int curState, int newState)"}, "startNestedScroll(android.view.View, int)": {"Returns": [["boolean", "true if a cooperative parent was found and nested scrolling has been enabled for the current gesture."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: Flags consisting of a combination of @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_HORIZONTAL_E@ and/or @B_android#support#v4#view#ViewCompat#SCROLL_AXIS_VERTICAL_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Begin a nestable scroll operation along the given axes. This version of the method just calls @B_android#support#v4#view#ViewCompat#startNestedScroll_E@ using the touch input type.", "history": "added in version 22.1.0", "FullName": "boolean startNestedScroll (View view, int axes)"}, "ViewCompat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "ViewCompat ()"}, "setScrollIndicators(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["int", "int: a bitmask of indicators that should be enabled, or 0 to disable all indicators"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setScrollIndicators_E@", "@B_android#support#v4#view#ViewCompat#getScrollIndicators_E@"], "Permissions": [], "Description": "Sets the state of all scroll indicators. See @B_android#support#v4#view#ViewCompat#setScrollIndicators_E@ for usage information.", "history": "added in version 23.1.0", "FullName": "void setScrollIndicators (View view, int indicators)"}, "setX(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float: The visual x position of this view, in pixels."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#setX_E@ directly. Sets the visual x position of this view, in pixels. This is equivalent to setting the @B_android#support#v4#view#ViewCompat#setTranslationX_E@ property to be the difference between the x value passed in and the current left property of the view as determined by the layout bounds.", "history": "added in version 22.0.0", "FullName": "void setX (View view, float value)"}, "setLabelFor(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view on which to invoke the corresponding method."], ["int", "int: The labeled view id."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the id of a view for which a given view serves as a label for accessibility purposes.", "history": "added in version 22.0.0", "FullName": "void setLabelFor (View view, int labeledId)"}, "jumpDrawablesToCurrentState(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#jumpDrawablesToCurrentState_E@ directly. On API 11 devices and above, call Drawable.jumpToCurrentState() on all Drawable objects associated with this view. On API 21 and above, also calls StateListAnimator#jumpToCurrentState() if there is a StateListAnimator attached to this view.", "history": "added in version 22.0.0", "FullName": "void jumpDrawablesToCurrentState (View v)"}, "getNextClusterForwardId(android.view.View)": {"Returns": [["int", "the next keyboard navigation cluster ID, or @B_android#view#View#NO_ID_E@ if the framework should decide automatically or API < 26."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ID of the next keyboard navigation cluster root.", "history": "added in version 26.0.0-beta1", "FullName": "int getNextClusterForwardId (View view)"}, "dispatchStartTemporaryDetach(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Notify a view that it is being temporarily detached.", "history": "added in version 22.0.0", "FullName": "void dispatchStartTemporaryDetach (View view)"}, "setTranslationZ(android.view.View, float)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the depth location of this view relative to its @B_android#support#v4#view#ViewCompat#getElevation_E@.", "history": "added in version 22.0.0", "FullName": "void setTranslationZ (View view, float translationZ)"}, "resolveSizeAndState(int, int, int)": {"Returns": [["int", "Size information bit mask as defined by @B_android#support#v4#view#ViewCompat#MEASURED_SIZE_MASK_E@ and @B_android#support#v4#view#ViewCompat#MEASURED_STATE_TOO_SMALL_E@."]], "Parameters": [["int", "int: How big the view wants to be"], ["int", "int: Constraints imposed by the parent"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#resolveSizeAndState_E@ directly. Utility to reconcile a desired size and state, with constraints imposed by a MeasureSpec. Will take the desired size, unless a different size is imposed by the constraints. The returned value is a compound integer, with the resolved size in the @B_android#support#v4#view#ViewCompat#MEASURED_SIZE_MASK_E@ bits and optionally the bit @B_android#support#v4#view#ViewCompat#MEASURED_STATE_TOO_SMALL_E@ set if the resulting size is smaller than the size the view wants to be.", "history": "added in version 22.0.0", "FullName": "int resolveSizeAndState (int size, int measureSpec, int childMeasuredState)"}, "getY(android.view.View)": {"Returns": [["float", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#View#getY_E@ directly.", "history": "added in version 22.0.0", "FullName": "float getY (View view)"}, "isKeyboardNavigationCluster(android.view.View)": {"Returns": [["boolean", "true if this view is a root of a cluster, or false otherwise."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether view is a root of a keyboard navigation cluster. Always returns false on API < 26.", "history": "added in version 26.0.0-beta1", "FullName": "boolean isKeyboardNavigationCluster (View view)"}, "hasAccessibilityDelegate(android.view.View)": {"Returns": [["boolean", "True if the View has an accessibility delegate"]], "Parameters": [["@B_android#view#View_E@", "View: The View instance to check"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether provided View has an accessibility delegate attached to it.", "history": "added in version 22.0.0", "FullName": "boolean hasAccessibilityDelegate (View v)"}, "getDisplay(android.view.View)": {"Returns": [["@B_android#view#Display_E@", "The logical display, or null if the view is not currently attached to a window."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the logical display to which the view's window has been attached. Compatibility: API < 17: Returns the default display when the view is attached. Otherwise, null.", "history": "added in version 25.0.0", "FullName": "Display getDisplay (View view)"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.view.ViewCompat", "ClassDesc": "Helper for accessing features in https:##developer#android#com@B_android#view#View_E@."}