{"Functions": {"seek(long)": {"Returns": [], "Parameters": [["long", "long: the offset position, measured in bytes from the beginning of the file, at which to set the file pointer."]], "Throws": [["@B_java#io#IOException_E@", "if pos is less than 0 or if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs. The offset may be set beyond the end of the file. Setting the offset beyond the end of the file does not change the file length. The file length will change only by writing after the offset has been set beyond the end of the file.", "history": "Added in API level 1", "FullName": "public void seek (long pos)"}, "readFully(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads b.length bytes from this file into the byte array, starting at the current file pointer. This method reads repeatedly from the file until the requested number of bytes are read. This method blocks until the requested number of bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final void readFully (byte[] b)"}, "writeChars(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a String value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#RandomAccessFile#writeChar_E@"], "Permissions": [], "Description": "Writes a string to the file as a sequence of characters. Each character is written to the data output stream as if by the writeChar method. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeChars (String s)"}, "readLine()": {"Returns": [["@B_java#lang#String_E@", "the next line of text from this file, or null if end of file is encountered before even one byte is read."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads the next line of text from this file. This method successively reads bytes from the file, starting at the current file pointer, until it reaches a line terminator or the end of the file. Each byte is converted into a character by taking the byte's value for the lower eight bits of the character and setting the high eight bits of the character to zero. This method does not, therefore, support the full Unicode character set. A line of text is terminated by a carriage-return character ('\\r'), a newline character ('\\n'), a carriage-return character immediately followed by a newline character, or the end of the file. Line-terminating characters are discarded and are not included as part of the string returned. This method blocks until a newline character is read, a carriage return and the byte following it are read (to see if it is a newline), the end of the file is reached, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final String readLine ()"}, "writeInt(int)": {"Returns": [], "Parameters": [["int", "int: an int to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes an int to the file as four bytes, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeInt (int v)"}, "readFloat()": {"Returns": [["float", "the next four bytes of this file, interpreted as a float."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading four bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#RandomAccessFile#readInt_E@", "@B_java#lang#Float#intBitsToFloat_E@"], "Permissions": [], "Description": "Reads a float from this file. This method reads an int value, starting at the current file pointer, as if by the readInt method and then converts that int to a float using the intBitsToFloat method in class Float. This method blocks until the four bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final float readFloat ()"}, "writeBoolean(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: a boolean value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a boolean to the file as a one-byte value. The value true is written out as the value (byte)1; the value false is written out as the value (byte)0. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeBoolean (boolean v)"}, "readBoolean()": {"Returns": [["boolean", "the boolean value read."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file has reached the end."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a boolean from this file. This method reads a single byte from the file, starting at the current file pointer. A value of 0 represents false. Any other value represents true. This method blocks until the byte is read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final boolean readBoolean ()"}, "readUTF()": {"Returns": [["@B_java#lang#String_E@", "a Unicode string."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."], ["@B_java#io#UTFDataFormatException_E@", "if the bytes do not represent valid modified UTF-8 encoding of a Unicode string."]], "SeeAlso": ["@B_java#io#RandomAccessFile#readUnsignedShort_E@"], "Permissions": [], "Description": "Reads in a string from this file. The string has been encoded using a The first two bytes are read, starting from the current file pointer, as if by readUnsignedShort. This value gives the number of following bytes that are in the encoded string, not the length of the resulting string. The following bytes are then interpreted as bytes encoding characters in the modified UTF-8 format and are converted into characters. This method blocks until all the bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final String readUTF ()"}, "readFully(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to read."]], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads exactly len bytes from this file into the byte array, starting at the current file pointer. This method reads repeatedly from the file until the requested number of bytes are read. This method blocks until the requested number of bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final void readFully (byte[] b, int off, int len)"}, "getFilePointer()": {"Returns": [["long", "the offset from the beginning of the file, in bytes, at which the next read or write occurs."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current offset in this file.", "history": "Added in API level 1", "FullName": "public long getFilePointer ()"}, "writeBytes(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string of bytes to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the string to the file as a sequence of bytes. Each character in the string is written out, in sequence, by discarding its high eight bits. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeBytes (String s)"}, "writeShort(int)": {"Returns": [], "Parameters": [["int", "int: a short to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a short to the file as two bytes, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeShort (int v)"}, "writeDouble(double)": {"Returns": [], "Parameters": [["double", "double: a double value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#lang#Double#doubleToLongBits_E@"], "Permissions": [], "Description": "Converts the double argument to a long using the doubleToLongBits method in class Double, and then writes that long value to the file as an eight-byte quantity, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeDouble (double v)"}, "writeLong(long)": {"Returns": [], "Parameters": [["long", "long: a long to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a long to the file as eight bytes, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeLong (long v)"}, "readUnsignedShort()": {"Returns": [["int", "the next two bytes of this file, interpreted as an unsigned 16-bit integer."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads an unsigned 16-bit number from this file. This method reads two bytes from the file, starting at the current file pointer. If the bytes read, in order, are b1 and b2, where 0 <= b1, b2 <= 255, then the result is equal to: This method blocks until the two bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final int readUnsignedShort ()"}, "readByte()": {"Returns": [["byte", "the next byte of this file as a signed eight-bit byte."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file has reached the end."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a signed eight-bit value from this file. This method reads a byte from the file, starting from the current file pointer. If the byte read is b, where 0 <= b <= 255, then the result is: This method blocks until the byte is read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final byte readByte ()"}, "read(byte[])": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of this file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."]], "Throws": [["@B_java#io#IOException_E@", "If the first byte cannot be read for any reason other than end of file, or if the random access file has been closed, or if some other I/O error occurs."], ["@B_java#lang#NullPointerException_E@", "If b is null."]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to b.length bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. Although RandomAccessFile is not a subclass of InputStream, this method behaves in exactly the same way as the @B_java#io#InputStream#read_E@ method of InputStream.", "history": "Added in API level 1", "FullName": "public int read (byte[] b)"}, "write(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the data."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes b.length bytes from the specified byte array to this file, starting at the current file pointer.", "history": "Added in API level 1", "FullName": "public void write (byte[] b)"}, "readLong()": {"Returns": [["long", "the next eight bytes of this file, interpreted as a long."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading eight bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a signed 64-bit integer from this file. This method reads eight bytes from the file, starting at the current file pointer. If the bytes read, in order, are b1, b2, b3, b4, b5, b6, b7, and b8, where: then the result is equal to: This method blocks until the eight bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final long readLong ()"}, "length()": {"Returns": [["long", "the length of this file, measured in bytes."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the length of this file.", "history": "Added in API level 1", "FullName": "public long length ()"}, "write(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this file.", "history": "Added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "readShort()": {"Returns": [["short", "the next two bytes of this file, interpreted as a signed 16-bit number."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a signed 16-bit number from this file. The method reads two bytes from this file, starting at the current file pointer. If the two bytes read, in order, are b1 and b2, where each of the two values is between 0 and 255, inclusive, then the result is equal to: This method blocks until the two bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final short readShort ()"}, "getChannel()": {"Returns": [["@B_java#nio#channels#FileChannel_E@", "the file channel associated with this file"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique @B_java#nio#channels#FileChannel_E@ object associated with this file. The @B_java#nio#channels#FileChannel#position_E@ of the returned channel will always be equal to this object's file-pointer offset as returned by the @B_java#io#RandomAccessFile#getFilePointer_E@ method. Changing this object's file-pointer offset, whether explicitly or by reading or writing bytes, will change the position of the channel, and vice versa. Changing the file's length via this object will change the length seen via the file channel, and vice versa.", "history": "Added in API level 1", "FullName": "public final FileChannel getChannel ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "writeChar(int)": {"Returns": [], "Parameters": [["int", "int: a char value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a char to the file as a two-byte value, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeChar (int v)"}, "write(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this file.", "history": "added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "readChar()": {"Returns": [["char", "the next two bytes of this file, interpreted as a char."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading two bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a character from this file. This method reads two bytes from the file, starting at the current file pointer. If the bytes read, in order, are b1 and b2, where 0 <= b1, b2 <= 255, then the result is equal to: This method blocks until the two bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final char readChar ()"}, "writeByte(int)": {"Returns": [], "Parameters": [["int", "int: a byte value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a byte to the file as a one-byte value. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeByte (int v)"}, "skipBytes(int)": {"Returns": [["int", "the actual number of bytes skipped."]], "Parameters": [["int", "int: the number of bytes to be skipped."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to skip over n bytes of input discarding the skipped bytes. This method may skip over some smaller number of bytes, possibly zero. This may result from any of a number of conditions; reaching end of file before n bytes have been skipped is only one possibility. This method never throws an EOFException. The actual number of bytes skipped is returned. If n is negative, no bytes are skipped.", "history": "Added in API level 1", "FullName": "public int skipBytes (int n)"}, "RandomAccessFile(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the system-dependent filename"], ["@B_java#lang#String_E@", "String: the access mode"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is not equal to one of \"r\", \"rw\", \"rws\", or \"rwd\""], ["@B_java#io#FileNotFoundException_E@", "if the mode is \"r\" but the given string does not denote an existing regular file, or if the mode begins with \"rw\" but the given string does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method denies read access to the file or the mode is \"rw\" and the security manager's checkWrite method denies write access to the file"]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkRead_E@", "@B_java#lang#SecurityManager#checkWrite_E@"], "Permissions": [], "Description": "Creates a random access file stream to read from, and optionally to write to, a file with the specified name. A new @B_java#io#FileDescriptor_E@ object is created to represent the connection to the file. The If there is a security manager, its checkRead method is called with the name argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's checkWrite method is also called with the name argument as its argument to see if write access to the file is allowed.", "history": "Added in API level 1", "FullName": "public RandomAccessFile (String name, String mode)"}, "RandomAccessFile(java.io.File,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the file object"], ["@B_java#lang#String_E@", "String: the access mode, as described above"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is not equal to one of \"r\", \"rw\", \"rws\", or \"rwd\""], ["@B_java#io#FileNotFoundException_E@", "if the mode is \"r\" but the given file object does not denote an existing regular file, or if the mode begins with \"rw\" but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method denies read access to the file or the mode is \"rw\" and the security manager's checkWrite method denies write access to the file"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@", "@B_java#lang#SecurityManager#checkWrite_E@", "@B_java#nio#channels#FileChannel#force_E@"], "Permissions": [], "Description": "Creates a random access file stream to read from, and optionally to write to, the file specified by the @B_java#io#File_E@ argument. A new @B_java#io#FileDescriptor_E@ object is created to represent this file connection. The @B_java#nio#channels#FileChannel#force_E@ method of the @B_java#nio#channels#FileChannel_E@ class, passing arguments of The If there is a security manager, its checkRead method is called with the pathname of the file argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's checkWrite method is also called with the path argument to see if write access to the file is allowed.", "history": "Added in API level 1", "FullName": "public RandomAccessFile (File file, String mode)"}, "read(byte[],int,int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in array b at which the data is written."], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", "If the first byte cannot be read for any reason other than end of file, or if the random access file has been closed, or if some other I/O error occurs."], ["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. Although RandomAccessFile is not a subclass of InputStream, this method behaves in exactly the same way as the @B_java#io#InputStream#read_E@ method of InputStream.", "history": "Added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "getFD()": {"Returns": [["@B_java#io#FileDescriptor_E@", "the file descriptor object associated with this stream."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#FileDescriptor_E@"], "Permissions": [], "Description": "Returns the opaque file descriptor object associated with this stream.", "history": "Added in API level 1", "FullName": "public final FileDescriptor getFD ()"}, "read()": {"Returns": [["int", "the next byte of data, or -1 if the end of the file has been reached."]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs. Not thrown if end-of-file has been reached."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a byte of data from this file. The byte is returned as an integer in the range 0 to 255 (0x00-0x0ff). This method blocks if no input is yet available. Although RandomAccessFile is not a subclass of InputStream, this method behaves in exactly the same way as the @B_java#io#InputStream#read_E@ method of InputStream.", "history": "Added in API level 1", "FullName": "public int read ()"}, "setLength(long)": {"Returns": [], "Parameters": [["long", "long: The desired length of the file"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of this file. If the present length of the file as returned by the length method is greater than the newLength argument then the file will be truncated. In this case, if the file offset as returned by the getFilePointer method is greater than newLength then after this method returns the offset will be equal to newLength. If the present length of the file as returned by the length method is smaller than the newLength argument then the file will be extended. In this case, the contents of the extended portion of the file are not defined.", "history": "Added in API level 1", "FullName": "public void setLength (long newLength)"}, "readFully(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset of the data."], ["int", "int: the number of bytes to read."]], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading all the bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads exactly len bytes from this file into the byte array, starting at the current file pointer. This method reads repeatedly from the file until the requested number of bytes are read. This method blocks until the requested number of bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "added in API level 1", "FullName": "public final void readFully (byte[] b, int off, int len)"}, "RandomAccessFile(java.io.File, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: the file object"], ["@B_java#lang#String_E@", "String: the access mode, as described above"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the mode argument is not equal to one of \"r\", \"rw\", \"rws\", or \"rwd\""], ["@B_java#io#FileNotFoundException_E@", "if the mode is \"r\" but the given file object does not denote an existing regular file, or if the mode begins with \"rw\" but the given file object does not denote an existing, writable regular file and a new regular file of that name cannot be created, or if some other error occurs while opening or creating the file"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkRead method denies read access to the file or the mode is \"rw\" and the security manager's checkWrite method denies write access to the file"]], "SeeAlso": ["@B_java#lang#SecurityManager#checkRead_E@", "@B_java#lang#SecurityManager#checkWrite_E@", "@B_java#nio#channels#FileChannel#force_E@"], "Permissions": [], "Description": "Creates a random access file stream to read from, and optionally to write to, the file specified by the @B_java#io#File_E@ argument. A new @B_java#io#FileDescriptor_E@ object is created to represent this file connection. The @B_java#nio#channels#FileChannel#force_E@ method of the @B_java#nio#channels#FileChannel_E@ class, passing arguments of The If there is a security manager, its checkRead method is called with the pathname of the file argument as its argument to see if read access to the file is allowed. If the mode allows writing, the security manager's checkWrite method is also called with the path argument to see if write access to the file is allowed.", "history": "added in API level 1", "FullName": "public RandomAccessFile (File file, String mode)"}, "read(byte[], int, int)": {"Returns": [["int", "the total number of bytes read into the buffer, or -1 if there is no more data because the end of the file has been reached."]], "Parameters": [["byte[]", "byte: the buffer into which the data is read."], ["int", "int: the start offset in array b at which the data is written."], ["int", "int: the maximum number of bytes read."]], "Throws": [["@B_java#io#IOException_E@", "If the first byte cannot be read for any reason other than end of file, or if the random access file has been closed, or if some other I/O error occurs."], ["@B_java#lang#NullPointerException_E@", "If b is null."], ["@B_java#lang#IndexOutOfBoundsException_E@", "If off is negative, len is negative, or len is greater than b.length - off"]], "SeeAlso": [], "Permissions": [], "Description": "Reads up to len bytes of data from this file into an array of bytes. This method blocks until at least one byte of input is available. Although RandomAccessFile is not a subclass of InputStream, this method behaves in exactly the same way as the @B_java#io#InputStream#read_E@ method of InputStream.", "history": "added in API level 1", "FullName": "public int read (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Closes this random access file stream and releases any system resources associated with the stream. A closed random access file cannot perform input or output operations and cannot be reopened. If this file has an associated channel then the channel is closed as well.", "history": "Added in API level 1", "FullName": "public void close ()"}, "readUnsignedByte()": {"Returns": [["int", "the next byte of this file, interpreted as an unsigned eight-bit number."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file has reached the end."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads an unsigned eight-bit number from this file. This method reads a byte from this file, starting at the current file pointer, and returns that byte. This method blocks until the byte is read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final int readUnsignedByte ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: the byte to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the specified byte to this file. The write starts at the current file pointer.", "history": "Added in API level 1", "FullName": "public void write (int b)"}, "writeUTF(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes a string to the file using First, two bytes are written to the file, starting at the current file pointer, as if by the writeShort method giving the number of bytes to follow. This value is the number of bytes actually written out, not the length of the string. Following the length, each character of the string is output, in sequence, using the modified UTF-8 encoding for each character.", "history": "Added in API level 1", "FullName": "public final void writeUTF (String str)"}, "readDouble()": {"Returns": [["double", "the next eight bytes of this file, interpreted as a double."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading eight bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#io#RandomAccessFile#readLong_E@", "@B_java#lang#Double#longBitsToDouble_E@"], "Permissions": [], "Description": "Reads a double from this file. This method reads a long value, starting at the current file pointer, as if by the readLong method and then converts that long to a double using the longBitsToDouble method in class Double. This method blocks until the eight bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final double readDouble ()"}, "readInt()": {"Returns": [["int", "the next four bytes of this file, interpreted as an int."]], "Parameters": [], "Throws": [["@B_java#io#EOFException_E@", "if this file reaches the end before reading four bytes."], ["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Reads a signed 32-bit integer from this file. This method reads 4 bytes from the file, starting at the current file pointer. If the bytes read, in order, are b1, b2, b3, and b4, where 0 <= b1, b2, b3, b4 <= 255, then the result is equal to: This method blocks until the four bytes are read, the end of the stream is detected, or an exception is thrown.", "history": "Added in API level 1", "FullName": "public final int readInt ()"}, "writeFloat(float)": {"Returns": [], "Parameters": [["float", "float: a float value to be written."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": ["@B_java#lang#Float#floatToIntBits_E@"], "Permissions": [], "Description": "Converts the float argument to an int using the floatToIntBits method in class Float, and then writes that int value to the file as a four-byte quantity, high byte first. The write starts at the current position of the file pointer.", "history": "Added in API level 1", "FullName": "public final void writeFloat (float v)"}}, "Inheritance": [], "ClassName": "java.io.RandomAccessFile", "ClassDesc": "Instances of this class support both reading and writing to a random access file. A random access file behaves like a large array of bytes stored in the file system. There is a kind of cursor, or index into the implied array, called the file pointer; input operations read bytes starting at the file pointer and advance the file pointer past the bytes read. If the random access file is created in read/write mode, then output operations are also available; output operations write bytes starting at the file pointer and advance the file pointer past the bytes written. Output operations that write past the current end of the implied array cause the array to be extended. The file pointer can be read by the getFilePointer method and set by the seek method. It is generally true of all the reading routines in this class that if end-of-file is reached before the desired number of bytes has been read, an EOFException (which is a kind of IOException) is thrown. If any byte cannot be read for any reason other than end-of-file, an IOException other than EOFException is thrown. In particular, an IOException may be thrown if the stream has been closed."}