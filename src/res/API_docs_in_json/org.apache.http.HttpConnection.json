{"Functions": {"shutdown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Force-closes this connection. This is the only method of a connection which may be called from a different thread to terminate the connection. This method will not attempt to flush the transmitter's internal buffer prior to closing the underlying socket.", "history": "Added in API level 1", "FullName": "public abstract void shutdown ()"}, "isOpen()": {"Returns": [["", "true if it is open, false if it is closed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this connection is open.", "history": "Added in API level 1", "FullName": "public abstract boolean isOpen ()"}, "getMetrics()": {"Returns": [["", "HttpConnectionMetrics"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a collection of connection metrcis", "history": "Added in API level 1", "FullName": "public abstract HttpConnectionMetrics getMetrics ()"}, "isStale()": {"Returns": [["", "true if attempts to use this connection are likely to succeed, or false if they are likely to fail and this connection should be closed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this connection has gone down. Network connections may get closed during some time of inactivity for several reasons. The next time a read is attempted on such a connection it will throw an IOException. This method tries to alleviate this inconvenience by trying to find out if a connection is still usable. Implementations may do that by attempting a read with a very small timeout. Thus this method may block for a small amount of time before returning a result. It is therefore an", "history": "Added in API level 1", "FullName": "public abstract boolean isStale ()"}, "setSocketTimeout(int)": {"Returns": [], "Parameters": [["int", "timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the socket timeout value.", "history": "Added in API level 1", "FullName": "public abstract void setSocketTimeout (int timeout)"}, "getSocketTimeout()": {"Returns": [["", "positive value in milliseconds if a timeout is set, 0 if timeout is disabled or -1 if timeout is undefined."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the socket timeout value.", "history": "Added in API level 1", "FullName": "public abstract int getSocketTimeout ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this connection gracefully. This method will attempt to flush the transmitter's internal buffer prior to closing the underlying socket. This method MUST NOT be called from a different thread to force shutdown of the connection. Use @B_org#apache#http#HttpConnection#shutdown_E@ instead.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}}, "Inheritance": [], "ClassName": "org.apache.http.HttpConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit A generic HTTP connection, useful on client and server side."}