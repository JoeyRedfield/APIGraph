{"Functions": {"register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>...)": {"Returns": [["@B_java#nio#file#WatchKey_E@", "a key representing the registration of this object with the given watch service"]], "Parameters": [["@B_java#nio#file#WatchService_E@", "WatchService: the watch service to which this object is to be registered"], ["@B_java#nio#file#WatchEvent#Kind_E@", "Kind: the events for which this object should be registered"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if unsupported events are specified"], ["@B_java#lang#IllegalArgumentException_E@", "if an invalid of combination of events are specified"], ["@B_java#nio#file#ClosedWatchServiceException_E@", "if the watch service is closed"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission required to monitor this object. Implementations of this interface should specify the permission checks."]], "SeeAlso": [], "Permissions": [], "Description": "Registers an object with a watch service. An invocation of this method behaves in exactly the same way as the invocation", "history": "Added in API level 26", "FullName": "public abstract WatchKey register (WatchService watcher, Kind...<?> events)"}, "register(java.nio.file.WatchService,java.nio.file.WatchEvent.Kind<?>[],java.nio.file.WatchEvent.Modifier...)": {"Returns": [["@B_java#nio#file#WatchKey_E@", "a key representing the registration of this object with the given watch service"]], "Parameters": [["@B_java#nio#file#WatchService_E@", "WatchService: the watch service to which this object is to be registered"], ["@B_java#nio#file#WatchEvent#Kind_E@", "Kind: the events for which this object should be registered"], ["@B_java#nio#file#WatchEvent#Modifier_E@", "Modifier: the modifiers, if any, that modify how the object is registered"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if unsupported events or modifiers are specified"], ["@B_java#lang#IllegalArgumentException_E@", "if an invalid of combination of events are modifiers are specified"], ["@B_java#nio#file#ClosedWatchServiceException_E@", "if the watch service is closed"], ["@B_java#io#IOException_E@", "if an I/O error occurs"], ["@B_java#lang#SecurityException_E@", "if a security manager is installed and it denies an unspecified permission required to monitor this object. Implementations of this interface should specify the permission checks."]], "SeeAlso": [], "Permissions": [], "Description": "Registers an object with a watch service. If the file system object identified by this object is currently registered with the watch service then the watch key, representing that registration, is returned after changing the event set or modifiers to those specified by the events and modifiers parameters. Changing the event set does not cause pending events for the object to be discarded. Objects are automatically registered for the @B_java#nio#file#StandardWatchEventKinds#OVERFLOW_E@ event. This event is not required to be present in the array of events. Otherwise the file system object has not yet been registered with the given watch service, so it is registered and the resulting new key is returned. Implementations of this interface should specify the events they support.", "history": "Added in API level 26", "FullName": "public abstract WatchKey register (WatchService watcher, Kind[]<?> events, Modifier... modifiers)"}}, "Inheritance": [], "ClassName": "java.nio.file.Watchable", "ClassDesc": "An object that may be registered with a watch service so that it can be watched for changes and events. This interface defines the @B_java#nio#file#Watchable#register_E@ method to register the object with a @B_java#nio#file#WatchService_E@ returning a @B_java#nio#file#WatchKey_E@ to represent the registration. An object may be registered with more than one watch service. Registration with a watch service is cancelled by invoking the key's @B_java#nio#file#WatchKey#cancel_E@ method."}