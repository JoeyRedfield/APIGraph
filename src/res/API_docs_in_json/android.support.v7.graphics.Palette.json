{"Functions": {"getLightMutedColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getLightMutedSwatch_E@"], "Permissions": [], "Description": "Returns a muted and light color from the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getLightMutedColor (int defaultColor)"}, "getLightVibrantSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns a light and vibrant swatch from the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getLightVibrantSwatch ()"}, "getVibrantColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getVibrantSwatch_E@"], "Permissions": [], "Description": "Returns the most vibrant color in the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getVibrantColor (int defaultColor)"}, "getDominantColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getDominantSwatch_E@"], "Permissions": [], "Description": "Returns the color of the dominant swatch from the palette, as an RGB packed int.", "history": "added in version 24.2.0", "FullName": "int getDominantColor (int defaultColor)"}, "getLightMutedSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns a muted and light swatch from the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getLightMutedSwatch ()"}, "generate(android.graphics.Bitmap, int)": {"Returns": [["@B_android#support#v7#graphics#Palette_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v7#graphics#Palette#Builder_E@ to generate the Palette.", "history": "added in version 22.0.0", "FullName": "Palette generate (Bitmap bitmap, int numColors)"}, "getVibrantSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns the most vibrant swatch in the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getVibrantSwatch ()"}, "getSwatches()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns all of the swatches which make up the palette.", "history": "added in version 22.0.0", "FullName": "List<Palette.Swatch> getSwatches ()"}, "getDarkVibrantSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns a dark and vibrant swatch from the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getDarkVibrantSwatch ()"}, "getTargets()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the targets used to generate this palette.", "history": "added in version 23.2.0", "FullName": "List<Target> getTargets ()"}, "getDominantSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the dominant swatch from the palette. The dominant swatch is defined as the swatch with the greatest population (frequency) within the palette.", "history": "added in version 24.2.0", "FullName": "Palette.Swatch getDominantSwatch ()"}, "generate(android.graphics.Bitmap)": {"Returns": [["@B_android#support#v7#graphics#Palette_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v7#graphics#Palette#Builder_E@ to generate the Palette.", "history": "added in version 22.0.0", "FullName": "Palette generate (Bitmap bitmap)"}, "getLightVibrantColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getLightVibrantSwatch_E@"], "Permissions": [], "Description": "Returns a light and vibrant color from the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getLightVibrantColor (int defaultColor)"}, "getDarkVibrantColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getDarkVibrantSwatch_E@"], "Permissions": [], "Description": "Returns a dark and vibrant color from the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getDarkVibrantColor (int defaultColor)"}, "getDarkMutedColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getDarkMutedSwatch_E@"], "Permissions": [], "Description": "Returns a muted and dark color from the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getDarkMutedColor (int defaultColor)"}, "from(android.graphics.Bitmap)": {"Returns": [["@B_android#support#v7#graphics#Palette#Builder_E@", "no returns description in source"]], "Parameters": [["@B_android#graphics#Bitmap_E@", "Bitmap no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Start generating a @B_android#support#v7#graphics#Palette_E@ with the returned @B_android#support#v7#graphics#Palette#Builder_E@ instance.", "history": "added in version 22.1.0", "FullName": "Palette.Builder from (Bitmap bitmap)"}, "getMutedSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns a muted swatch from the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getMutedSwatch ()"}, "getDarkMutedSwatch()": {"Returns": [["@B_android#support#v7#graphics#Palette#Swatch_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Target_E@"], "Permissions": [], "Description": "Returns a muted and dark swatch from the palette. Might be null.", "history": "added in version 22.0.0", "FullName": "Palette.Swatch getDarkMutedSwatch ()"}, "getMutedColor(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: value to return if the swatch isn't available"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#graphics#Palette#getMutedSwatch_E@"], "Permissions": [], "Description": "Returns a muted color from the palette as an RGB packed int.", "history": "added in version 22.0.0", "FullName": "int getMutedColor (int defaultColor)"}, "equals(java.lang.Object)": {"Returns": [["", "true if the specified object is equal to this Object; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "the object to compare this instance with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this instance with the specified object and indicates if they are equal. In order to be equal, o must represent the same object as this instance using a class-specific comparison. The general contract is that this comparison should be reflexive, symmetric, and transitive. Also, no object reference other than null is equal to null. The default implementation returns true only if this == o. See equals method. The general contract for the equals and @B_java#lang#Object#hashCode_E@ methods is that if equals returns true for any two objects, then hashCode() must return the same value for these objects. This means that subclasses of Object usually override either both methods or neither of them.", "history": "", "FullName": "public boolean equals (Object o)"}, "hashCode()": {"Returns": [["", "this object's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an integer hash code for this object. By contract, any two objects for which @B_java#lang#Object#equals_E@ returns true must return the same hash code value. This means that subclasses of Object usually override both methods or neither method. Note that hash values must not change over time unless information used in equals comparisons also changes. See hashCode method.", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.graphics.Palette", "ClassDesc": "A helper class to extract prominent colors from an image. A number of colors with different profiles are extracted from the image: Vibrant Vibrant Dark Vibrant Light Muted Muted Dark Muted Light These can be retrieved from the appropriate getter method. Instances are created with a @B_android#support#v7#graphics#Palette#Builder_E@ which supports several options to tweak the generated Palette. See that class' documentation for more information. Generation should always be completed on a background thread, ideally the one in which you load your image on. @B_android#support#v7#graphics#Palette#Builder_E@ supports both synchronous and asynchronous generation:"}