{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a String describing the contents of this PolicyQualifierInfo"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a printable representation of this PolicyQualifierInfo.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getPolicyQualifierId()": {"Returns": [["@B_java#lang#String_E@", "the OID (never null)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the policyQualifierId field of this PolicyQualifierInfo. The policyQualifierId is an Object Identifier (OID) represented by a set of nonnegative integers separated by periods.", "history": "Added in API level 1", "FullName": "public final String getPolicyQualifierId ()"}, "getEncoded()": {"Returns": [["byte[]", "the ASN.1 DER encoded bytes (never null). Note that a copy is returned, so the data is cloned each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ASN.1 DER encoded form of this PolicyQualifierInfo.", "history": "Added in API level 1", "FullName": "public final byte[] getEncoded ()"}, "PolicyQualifierInfo(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: a byte array containing the qualifier in DER encoding"]], "Throws": [["@B_java#io#IOException_E@", "thrown if the byte array does not represent a valid and parsable policy qualifier"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of PolicyQualifierInfo from the encoded bytes. The encoded byte array is copied on construction.", "history": "Added in API level 1", "FullName": "public PolicyQualifierInfo (byte[] encoded)"}, "getPolicyQualifier()": {"Returns": [["byte[]", "the ASN.1 DER encoded bytes of the qualifier field. Note that a copy is returned, so the data is cloned each time this method is called."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the ASN.1 DER encoded form of the qualifier field of this PolicyQualifierInfo.", "history": "Added in API level 1", "FullName": "public final byte[] getPolicyQualifier ()"}}, "Inheritance": [], "ClassName": "java.security.cert.PolicyQualifierInfo", "ClassDesc": "An immutable policy qualifier represented by the ASN.1 PolicyQualifierInfo structure. The ASN.1 definition is as follows: A certificate policies extension, if present in an X.509 version 3 certificate, contains a sequence of one or more policy information terms, each of which consists of an object identifier (OID) and optional qualifiers. In an end-entity certificate, these policy information terms indicate the policy under which the certificate has been issued and the purposes for which the certificate may be used. In a CA certificate, these policy information terms limit the set of policies for certification paths which include this certificate. A Set of PolicyQualifierInfo objects are returned by the @B_java#security#cert#PolicyNode#getPolicyQualifiers_E@ method. This allows applications with specific policy requirements to process and validate each policy qualifier. Applications that need to process policy qualifiers should explicitly set the policyQualifiersRejected flag to false (by calling the @B_java#security#cert#PKIXParameters#setPolicyQualifiersRejected_E@ method) before validating a certification path. Note that the PKIX certification path validation algorithm specifies that any policy qualifier in a certificate policies extension that is marked critical must be processed and validated. Otherwise the certification path must be rejected. If the policyQualifiersRejected flag is set to false, it is up to the application to validate all policy qualifiers in this manner in order to be PKIX compliant. All PolicyQualifierInfo objects must be immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single PolicyQualifierInfo object (or more than one) with no ill effects. Requiring PolicyQualifierInfo objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access."}