{"Functions": {"getTypeNamespace()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The namespace of the type declared for the associated element or attribute or null if the element does not have declaration or if no namespace information is available.", "history": "Added in API level 8", "FullName": "public abstract String getTypeNamespace ()"}, "getTypeName()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The name of a type declared for the associated element or attribute, or null if unknown.", "history": "Added in API level 8", "FullName": "public abstract String getTypeName ()"}, "isDerivedFrom(java.lang.String,java.lang.String,int)": {"Returns": [["boolean", "If the document's schema is a DTD or no schema is associated with the document, this method will always return false . If the document's schema is an XML Schema, the method will true if the reference type definition is derived from the other type definition according to the derivation parameter. If the value of the parameter is 0 (no bit is set to 1 for the derivationMethod parameter), the method will return true if the other type definition can be reached by recursing any combination of {base type definition}, {item type definition}, or {member type definitions} from the reference type definition."]], "Parameters": [["@B_java#lang#String_E@", "String: the namespace of the other type definition."], ["@B_java#lang#String_E@", "String: the name of the other type definition."], ["int", "int: the type of derivation and conditions applied between two types, as described in the list of constants provided in this interface."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method returns if there is a derivation between the reference type definition, i.e. the TypeInfo on which the method is being called, and the other type definition, i.e. the one passed as parameters.", "history": "Added in API level 8", "FullName": "public abstract boolean isDerivedFrom (String typeNamespaceArg, String typeNameArg, int derivationMethod)"}}, "Inheritance": [], "ClassName": "org.w3c.dom.TypeInfo", "ClassDesc": "The TypeInfo interface represents a type referenced from Element or Attr nodes, specified in the schemas associated with the document. The type is a pair of a namespace URI and name properties, and depends on the document's schema. If the document's schema is an XML DTD [ If this type is referenced from an Attr node, typeNamespace is \"http://www.w3.org/TR/REC-xml\" and typeName represents the typeNamespace and typeName are null. If this type is referenced from an Element node, typeNamespace and typeName are null. If the document's schema is an XML Schema [ If the \"invalid\" or \"notKnown\": the {target namespace} and {name} properties of the declared type if available, otherwise null. If the \"valid\": TypeInfo. See also the"}