{"Functions": {"getItemCount()": {"Returns": [["int", "The number of items in the bound adapter"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#State#getItemCount_E@"], "Permissions": [], "Description": "Returns the number of items in the adapter bound to the parent RecyclerView. Note that this number is not necessarily equal to @B_android#support#v7#widget#RecyclerView#State#getItemCount_E@. In methods where @B_android#support#v7#widget#RecyclerView#State_E@ is available, you should use @B_android#support#v7#widget#RecyclerView#State#getItemCount_E@ instead. For more details, check the documentation for @B_android#support#v7#widget#RecyclerView#State#getItemCount_E@.", "history": "added in version 22.0.0", "FullName": "int getItemCount ()"}, "getMinimumWidth()": {"Returns": [["int", "The host RecyclerView's @B_android#view#View#getMinimumWidth_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getMinimumWidth ()"}, "assertInLayoutOrScroll(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The message for the exception. Can be null."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#assertNotInLayoutOrScroll_E@"], "Permissions": [], "Description": "Checks if RecyclerView is in the middle of a layout or scroll and throws an @B_java#lang#IllegalStateException_E@ if it", "history": "added in version 22.0.0", "FullName": "void assertInLayoutOrScroll (String message)"}, "getHeight()": {"Returns": [["int", "Height in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the height of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getHeight ()"}, "supportsPredictiveItemAnimations()": {"Returns": [["boolean", "true if predictive item animations should be enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this LayoutManager supports automatic item animations. A LayoutManager wishing to support item animations should obey certain rules as outlined in @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@. The default return value is false, so subclasses of LayoutManager will not get predictive item animations by default. Whether item animations are enabled in a RecyclerView is determined both by the return value from this method and the @B_android#support#v7#widget#RecyclerView#setItemAnimator_E@ set on the RecyclerView itself. If the RecyclerView has a non-null ItemAnimator but this method returns false, then simple item animations will be enabled, in which views that are moving onto or off of the screen are simply faded in/out. If the RecyclerView has a non-null ItemAnimator and this method returns true, then there will be two calls to @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ to setup up the information needed to more intelligently predict where appearing and disappearing views should be animated from/to.", "history": "added in version 22.0.0", "FullName": "boolean supportsPredictiveItemAnimations ()"}, "removeCallbacks(java.lang.Runnable)": {"Returns": [["boolean", "true if RecyclerView could ask the Handler to remove the Runnable, false otherwise. When the returned value is true, the Runnable may or may not have been actually removed from the message queue (for instance, if the Runnable was not in the queue already.)"]], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The Runnable to remove from the message handling queue"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#postOnAnimation_E@"], "Permissions": [], "Description": "Removes the specified Runnable from the message queue. Calling this method when LayoutManager is not attached to a RecyclerView has no effect.", "history": "added in version 22.1.0", "FullName": "boolean removeCallbacks (Runnable action)"}, "setItemPrefetchEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if items should be prefetched in between traversals."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#isItemPrefetchEnabled_E@"], "Permissions": [], "Description": "Sets whether the LayoutManager should be queried for views outside of its viewport while the UI thread is idle between frames. If enabled, the LayoutManager will be queried for items to inflate/bind in between view system traversals on devices running API 21 or greater. Default value is true. On platforms API level 21 and higher, the UI thread is idle between passing a frame to RenderThread and the starting up its next frame at the next VSync pulse. By prefetching out of window views in this time period, delays from inflation and view binding are much less likely to cause jank and stuttering during scrolls and flings. While prefetch is enabled, it will have the side effect of expanding the effective size of the View cache to hold prefetched views.", "history": "added in version 25.0.0", "FullName": "void setItemPrefetchEnabled (boolean enabled)"}, "getHeightMode()": {"Returns": [["int", "Height measure spec mode."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#MeasureSpec#getMode_E@", "@B_android#view#View#onMeasure_E@"], "Permissions": [], "Description": "Return the height measurement spec mode of the RecyclerView. This value is set only if the LayoutManager opts into the auto measure api via @B_android#support#v7#widget#RecyclerView#LayoutManager#setAutoMeasureEnabled_E@. When RecyclerView is running a layout, this value is always set to @B_android#view#View#MeasureSpec#EXACTLY_E@ even if it was measured with a different spec mode.", "history": "added in version 23.2.0", "FullName": "int getHeightMode ()"}, "getBottomDecorationHeight(android.view.View)": {"Returns": [["int", "The total height of item decorations applied to the child's bottom."]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getDecoratedBottom_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@"], "Permissions": [], "Description": "Returns the total height of item decorations applied to child's bottom. Note that this value is not updated until the View is measured or @B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@ is called.", "history": "added in version 22.0.0", "FullName": "int getBottomDecorationHeight (View child)"}, "endAnimation(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The View for which the animations should be ended."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#ItemAnimator#endAnimations_E@"], "Permissions": [], "Description": "Ends all animations on the view created by the @B_android#support#v7#widget#RecyclerView#ItemAnimator_E@.", "history": "added in version 22.0.0", "FullName": "void endAnimation (View view)"}, "scrollToPosition(int)": {"Returns": [], "Parameters": [["int", "int: Scroll to this adapter position."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Scroll to the specified adapter position. Actual position of the item on the screen depends on the LayoutManager implementation.", "history": "added in version 22.0.0", "FullName": "void scrollToPosition (int position)"}, "isItemPrefetchEnabled()": {"Returns": [["boolean", "true if item prefetch is enabled, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#setItemPrefetchEnabled_E@"], "Permissions": [], "Description": "Sets whether the LayoutManager should be queried for views outside of its viewport while the UI thread is idle between frames.", "history": "added in version 25.0.0", "FullName": "boolean isItemPrefetchEnabled ()"}, "canScrollHorizontally()": {"Returns": [["boolean", "True if this LayoutManager can scroll the current contents horizontally"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if horizontal scrolling is currently supported. The default implementation returns false.", "history": "added in version 22.0.0", "FullName": "boolean canScrollHorizontally ()"}, "setMeasuredDimension(int, int)": {"Returns": [], "Parameters": [["int", "int: Measured width"], ["int", "int: Measured height"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#view#View#setMeasuredDimension_E@ of the host RecyclerView.", "history": "added in version 22.0.0", "FullName": "void setMeasuredDimension (int widthSize, int heightSize)"}, "setAutoMeasureEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the Layout should be measured by the RecyclerView, false if the LayoutManager wants to measure itself."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#setMeasuredDimension_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#isAutoMeasureEnabled_E@"], "Permissions": [], "Description": "Defines whether the layout should be measured by the RecyclerView or the LayoutManager wants to handle the layout measurements itself. This method is usually called by the LayoutManager with value true if it wants to support WRAP_CONTENT. If you are using a public LayoutManager but want to customize the measurement logic, you can call this method with false and override @B_android#support#v7#widget#RecyclerView#onMeasure_E@ to implement your custom measurement logic. AutoMeasure is a convenience mechanism for LayoutManagers to easily wrap their content or handle various specs provided by the RecyclerView's parent. It works by calling @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ during an @B_android#support#v7#widget#RecyclerView#onMeasure_E@ call, then calculating desired dimensions based on children's positions. It does this while supporting all existing animation capabilities of the RecyclerView. AutoMeasure works as follows:", "history": "added in version 23.2.0", "FullName": "void setAutoMeasureEnabled (boolean enabled)"}, "requestSimpleAnimationsInNextLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A LayoutManager can call this method to force RecyclerView to run simple animations in the next layout pass, even if there is not any trigger to do so. (e.g. adapter data change). Note that, calling this method will not guarantee that RecyclerView will run animations at all. For example, if there is not any @B_android#support#v7#widget#RecyclerView#ItemAnimator_E@ set, RecyclerView will not run any animations but will still clear this flag after the layout is complete.", "history": "added in version 22.0.0", "FullName": "void requestSimpleAnimationsInNextLayout ()"}, "getDecoratedMeasuredWidth(android.view.View)": {"Returns": [["int", "child's measured width plus ItemDecoration insets"]], "Parameters": [["@B_android#view#View_E@", "View: Child view to query"]], "Throws": [], "SeeAlso": ["@B_android#view#View#getMeasuredWidth_E@"], "Permissions": [], "Description": "Returns the measured width of the given child, plus the additional size of any insets applied by @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedMeasuredWidth (View child)"}, "getDecoratedLeft(android.view.View)": {"Returns": [["int", "Child left edge with offsets applied"]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getLeftDecorationWidth_E@"], "Permissions": [], "Description": "Returns the left edge of the given child view within its parent, offset by any applied @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedLeft (View child)"}, "stopIgnoringView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to ignore."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "View can be scrapped and recycled again. Note that calling this method removes all information in the view holder. You can call this method only if your LayoutManger is in onLayout or onScroll callback.", "history": "added in version 22.0.0", "FullName": "void stopIgnoringView (View view)"}, "getTopDecorationHeight(android.view.View)": {"Returns": [["int", "The total height of item decorations applied to the child's top."]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getDecoratedTop_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@"], "Permissions": [], "Description": "Returns the total height of item decorations applied to child's top. Note that this value is not updated until the View is measured or @B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@ is called.", "history": "added in version 22.0.0", "FullName": "int getTopDecorationHeight (View child)"}, "getMinimumHeight()": {"Returns": [["int", "The host RecyclerView's @B_android#view#View#getMinimumHeight_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getMinimumHeight ()"}, "getRightDecorationWidth(android.view.View)": {"Returns": [["int", "The total width of item decorations applied to the child's right."]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getDecoratedRight_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@"], "Permissions": [], "Description": "Returns the total width of item decorations applied to child's right. Note that this value is not updated until the View is measured or @B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@ is called.", "history": "added in version 22.0.0", "FullName": "int getRightDecorationWidth (View child)"}, "getChildCount()": {"Returns": [["int", "Number of attached children"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current number of child views attached to the parent RecyclerView. This does not include child views that were temporarily detached and/or scrapped.", "history": "added in version 22.0.0", "FullName": "int getChildCount ()"}, "findViewByPosition(int)": {"Returns": [["@B_android#view#View_E@", "The child view that represents the given position or null if the position is not laid out"]], "Parameters": [["int", "int: Position of the item in adapter"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds the view which represents the given adapter position. This method traverses each child since it has no information about child order. Override this method to improve performance if your LayoutManager keeps data about child views. If a view is ignored via @B_android#support#v7#widget#RecyclerView#LayoutManager#ignoreView_E@, it is also ignored by this method.", "history": "added in version 22.0.0", "FullName": "View findViewByPosition (int position)"}, "addView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to add"], ["int", "int: Index to add child at"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a view to the currently attached RecyclerView if needed. LayoutManagers should use this method to add views obtained from a @B_android#support#v7#widget#RecyclerView#Recycler_E@ using @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@.", "history": "added in version 22.0.0", "FullName": "void addView (View child, int index)"}, "getPaddingRight()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the right padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingRight ()"}, "getChildMeasureSpec(int, int, int, int, boolean)": {"Returns": [["int", "a MeasureSpec value for the child view"]], "Parameters": [["int", "int: Size of the parent view where the child will be placed"], ["int", "int: The measurement spec mode of the parent"], ["int", "int: Total space currently consumed by other elements of parent"], ["int", "int: Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT. Generally obtained from the child view's LayoutParams"], ["boolean", "boolean: true if the parent RecyclerView can scroll in this dimension"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calculate a MeasureSpec value for measuring a child view in one dimension.", "history": "added in version 23.2.0", "FullName": "int getChildMeasureSpec (int parentSize, int parentMode, int padding, int childDimension, boolean canScroll)"}, "getDecoratedRight(android.view.View)": {"Returns": [["int", "Child right edge with offsets applied"]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getRightDecorationWidth_E@"], "Permissions": [], "Description": "Returns the right edge of the given child view within its parent, offset by any applied @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedRight (View child)"}, "offsetChildrenHorizontal(int)": {"Returns": [], "Parameters": [["int", "int: Pixels to offset by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset all child views attached to the parent RecyclerView by dx pixels along the horizontal axis.", "history": "added in version 22.0.0", "FullName": "void offsetChildrenHorizontal (int dx)"}, "getPaddingBottom()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the bottom padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingBottom ()"}, "getLeftDecorationWidth(android.view.View)": {"Returns": [["int", "The total width of item decorations applied to the child's left."]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getDecoratedLeft_E@", "@B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@"], "Permissions": [], "Description": "Returns the total width of item decorations applied to child's left. Note that this value is not updated until the View is measured or @B_android#support#v7#widget#RecyclerView#LayoutManager#calculateItemDecorationsForChild_E@ is called.", "history": "added in version 22.0.0", "FullName": "int getLeftDecorationWidth (View child)"}, "removeAllViews()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove all views from the currently attached RecyclerView. This will not recycle any of the affected views; the LayoutManager is responsible for doing so if desired.", "history": "added in version 22.0.0", "FullName": "void removeAllViews ()"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#support#v7#widget#RecyclerView#LayoutParams_E@", "A new LayoutParams for a child view"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a default LayoutParams object for a child of the RecyclerView. LayoutManagers will often want to use a custom LayoutParams type to store extra information specific to the layout. Client code should subclass @B_android#support#v7#widget#RecyclerView#LayoutParams_E@ for this purpose. Important: if you use your own custom LayoutParams type you must also override @B_android#support#v7#widget#RecyclerView#LayoutManager#checkLayoutParams_E@, @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@ and @B_android#support#v7#widget#RecyclerView#LayoutManager#generateLayoutParams_E@.", "history": "added in version 22.0.0", "FullName": "RecyclerView.LayoutParams generateDefaultLayoutParams ()"}, "findContainingItemView(android.view.View)": {"Returns": [["@B_android#view#View_E@", "The direct child of the LayoutManager which contains the given view or null if the provided view is not a descendant of this LayoutManager."]], "Parameters": [["@B_android#view#View_E@", "View: The view that is a descendant of the LayoutManager."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#getChildViewHolder_E@", "@B_android#support#v7#widget#RecyclerView#findContainingViewHolder_E@"], "Permissions": [], "Description": "Traverses the ancestors of the given view and returns the item view that contains it and also a direct child of the LayoutManager. Note that this method may return null if the view is a child of the RecyclerView but not a child of the LayoutManager (e.g. running a disappear animation).", "history": "added in version 23.2.0", "FullName": "View findContainingItemView (View view)"}, "getWidthMode()": {"Returns": [["int", "Width measure spec mode."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#MeasureSpec#getMode_E@", "@B_android#view#View#onMeasure_E@"], "Permissions": [], "Description": "Return the width measurement spec mode of the RecyclerView. This value is set only if the LayoutManager opts into the auto measure api via @B_android#support#v7#widget#RecyclerView#LayoutManager#setAutoMeasureEnabled_E@. When RecyclerView is running a layout, this value is always set to @B_android#view#View#MeasureSpec#EXACTLY_E@ even if it was measured with a different spec mode.", "history": "added in version 23.2.0", "FullName": "int getWidthMode ()"}, "assertNotInLayoutOrScroll(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The message for the exception. Can be null."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#assertInLayoutOrScroll_E@"], "Permissions": [], "Description": "Checks if RecyclerView is in the middle of a layout or scroll and throws an @B_java#lang#IllegalStateException_E@ if it", "history": "added in version 22.0.0", "FullName": "void assertNotInLayoutOrScroll (String message)"}, "getWidth()": {"Returns": [["int", "Width in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the width of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getWidth ()"}, "getPaddingTop()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the top padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingTop ()"}, "getPaddingEnd()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the end padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingEnd ()"}, "getPosition(android.view.View)": {"Returns": [["int", "The adapter position of the item which is rendered by this View."]], "Parameters": [["@B_android#view#View_E@", "View: The view to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the adapter position of the item represented by the given View. This does not contain any adapter changes that might have happened after the last layout.", "history": "added in version 22.0.0", "FullName": "int getPosition (View view)"}, "detachViewAt(int)": {"Returns": [], "Parameters": [["int", "int: Index of the child to detach"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Temporarily detach a child view. LayoutManagers may want to perform a lightweight detach operation to rearrange views currently attached to the RecyclerView. Generally LayoutManager implementations will want to use @B_android#support#v7#widget#RecyclerView#LayoutManager#detachAndScrapView_E@ so that the detached view may be rebound and reused. If a LayoutManager uses this method to detach a view, it must @B_android#support#v7#widget#RecyclerView#LayoutManager#attachView_E@ or @B_android#support#v7#widget#RecyclerView#LayoutManager#removeDetachedView_E@ the detached view before the LayoutManager entry point method called by RecyclerView returns.", "history": "added in version 22.0.0", "FullName": "void detachViewAt (int index)"}, "getPaddingLeft()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the left padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingLeft ()"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Calls RecyclerView#requestLayout on the underlying RecyclerView", "history": "added in version 22.0.0", "FullName": "void requestLayout ()"}, "offsetChildrenVertical(int)": {"Returns": [], "Parameters": [["int", "int: Pixels to offset by"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Offset all child views attached to the parent RecyclerView by dy pixels along the vertical axis.", "history": "added in version 22.0.0", "FullName": "void offsetChildrenVertical (int dy)"}, "getDecoratedTop(android.view.View)": {"Returns": [["int", "Child top edge with offsets applied"]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getTopDecorationHeight_E@"], "Permissions": [], "Description": "Returns the top edge of the given child view within its parent, offset by any applied @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedTop (View child)"}, "getFocusedChild()": {"Returns": [["@B_android#view#View_E@", "A direct child of RecyclerView which has focus or contains the focused child."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the item View which has or contains focus.", "history": "added in version 22.0.0", "FullName": "View getFocusedChild ()"}, "getChildAt(int)": {"Returns": [["@B_android#view#View_E@", "Child view at index"]], "Parameters": [["int", "int: Index of child to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the child view at the given index", "history": "added in version 22.0.0", "FullName": "View getChildAt (int index)"}, "removeDetachedView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Detached child to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finish removing a view that was previously temporarily @B_android#support#v7#widget#RecyclerView#LayoutManager#detachView_E@.", "history": "added in version 22.0.0", "FullName": "void removeDetachedView (View child)"}, "isSmoothScrolling()": {"Returns": [["boolean", "true if RecycylerView is currently in the state of smooth scrolling."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "boolean isSmoothScrolling ()"}, "isFocused()": {"Returns": [["boolean", "True if the RecyclerView has focus, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#isFocused_E@"], "Permissions": [], "Description": "Returns true if the RecyclerView this LayoutManager is bound to has focus.", "history": "added in version 22.0.0", "FullName": "boolean isFocused ()"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "postOnAnimation(java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: The Runnable that will be executed."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#removeCallbacks_E@"], "Permissions": [], "Description": "Causes the Runnable to execute on the next animation time step. The runnable will be run on the user interface thread. Calling this method when LayoutManager is not attached to a RecyclerView has no effect.", "history": "added in version 22.1.0", "FullName": "void postOnAnimation (Runnable action)"}, "getBaseline()": {"Returns": [["int", "The offset of the RecyclerView's text baseline from the its top boundary; -1 if there is no baseline."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns offset of the RecyclerView's text baseline from the its top boundary.", "history": "added in version 22.1.0", "FullName": "int getBaseline ()"}, "getChildMeasureSpec(int, int, int, boolean)": {"Returns": [["int", "a MeasureSpec value for the child view"]], "Parameters": [["int", "int: Size of the parent view where the child will be placed"], ["int", "int: Total space currently consumed by other elements of the parent"], ["int", "int: Desired size of the child view, or MATCH_PARENT/WRAP_CONTENT. Generally obtained from the child view's LayoutParams"], ["boolean", "boolean: true if the parent RecyclerView can scroll in this dimension"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#support#v7#widget#RecyclerView#LayoutManager#getChildMeasureSpec_E@ Calculate a MeasureSpec value for measuring a child view in one dimension.", "history": "added in version 22.0.0", "FullName": "int getChildMeasureSpec (int parentSize, int padding, int childDimension, boolean canScroll)"}, "addView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a view to the currently attached RecyclerView if needed. LayoutManagers should use this method to add views obtained from a @B_android#support#v7#widget#RecyclerView#Recycler_E@ using @B_android#support#v7#widget#RecyclerView#Recycler#getViewForPosition_E@.", "history": "added in version 22.0.0", "FullName": "void addView (View child)"}, "getItemViewType(android.view.View)": {"Returns": [["int", "The type of the view assigned by the adapter."]], "Parameters": [["@B_android#view#View_E@", "View: The view to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the View type defined by the adapter.", "history": "added in version 22.0.0", "FullName": "int getItemViewType (View view)"}, "onInterceptFocusSearch(android.view.View, int)": {"Returns": [["@B_android#view#View_E@", "A descendant view to focus or null to fall back to default behavior. The default implementation returns null."]], "Parameters": [["@B_android#view#View_E@", "View: The currently focused view"], ["int", "int: One of @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_BACKWARD_E@, @B_android#view#View#FOCUS_FORWARD_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method gives a LayoutManager an opportunity to intercept the initial focus search before the default behavior of @B_android#view#FocusFinder_E@ is used. If this method returns null FocusFinder will attempt to find a focusable child view. If it fails then @B_android#support#v7#widget#RecyclerView#LayoutManager#onFocusSearchFailed_E@ will be called to give the LayoutManager an opportunity to add new views for items that did not have attached views representing them. The LayoutManager should not add or remove views from this method.", "history": "added in version 22.0.0", "FullName": "View onInterceptFocusSearch (View focused, int direction)"}, "addDisappearingView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to add and then remove with animation."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To be called only during @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ to add a view to the layout that is known to be going away, either because it has been @B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRemoved_E@ or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view. Views added via this method are going to be invisible to LayoutManager after the dispatchLayout pass is complete. They cannot be retrieved via @B_android#support#v7#widget#RecyclerView#LayoutManager#getChildAt_E@ or won't be included in @B_android#support#v7#widget#RecyclerView#LayoutManager#getChildCount_E@ method.", "history": "added in version 22.0.0", "FullName": "void addDisappearingView (View child)"}, "addDisappearingView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to add and then remove with animation."], ["int", "int: Index of the view."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "To be called only during @B_android#support#v7#widget#RecyclerView#LayoutManager#onLayoutChildren_E@ to add a view to the layout that is known to be going away, either because it has been @B_android#support#v7#widget#RecyclerView#Adapter#notifyItemRemoved_E@ or because it is actually not in the visible portion of the container but is being laid out in order to inform RecyclerView in how to animate the item out of view. Views added via this method are going to be invisible to LayoutManager after the dispatchLayout pass is complete. They cannot be retrieved via @B_android#support#v7#widget#RecyclerView#LayoutManager#getChildAt_E@ or won't be included in @B_android#support#v7#widget#RecyclerView#LayoutManager#getChildCount_E@ method.", "history": "added in version 22.0.0", "FullName": "void addDisappearingView (View child, int index)"}, "attachView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child to reattach"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reattach a previously @B_android#support#v7#widget#RecyclerView#LayoutManager#detachView_E@ view. This method should not be used to reattach views that were previously @B_android#support#v7#widget#RecyclerView#LayoutManager#detachAndScrapView_E@ scrapped}.", "history": "added in version 22.0.0", "FullName": "void attachView (View child)"}, "getLayoutDirection()": {"Returns": [["int", "@B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_RTL_E@ if the layout direction is RTL or returns @B_android#support#v4#view#ViewCompat#LAYOUT_DIRECTION_LTR_E@ if the layout direction is not RTL."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the resolved layout direction for this RecyclerView.", "history": "added in version 22.0.0", "FullName": "int getLayoutDirection ()"}, "getDecoratedMeasuredHeight(android.view.View)": {"Returns": [["int", "child's measured height plus ItemDecoration insets"]], "Parameters": [["@B_android#view#View_E@", "View: Child view to query"]], "Throws": [], "SeeAlso": ["@B_android#view#View#getMeasuredHeight_E@"], "Permissions": [], "Description": "Returns the measured height of the given child, plus the additional size of any insets applied by @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedMeasuredHeight (View child)"}, "isAttachedToWindow()": {"Returns": [["boolean", "True if this LayoutManager is controlling a RecyclerView and the RecyclerView is attached to window."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether LayoutManager is currently attached to a RecyclerView which is attached to a window.", "history": "added in version 22.1.0", "FullName": "boolean isAttachedToWindow ()"}, "canScrollVertically()": {"Returns": [["boolean", "True if this LayoutManager can scroll the current contents vertically"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query if vertical scrolling is currently supported. The default implementation returns false.", "history": "added in version 22.0.0", "FullName": "boolean canScrollVertically ()"}, "setMeasurementCacheEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable the measurement cache, false otherwise."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#isMeasurementCacheEnabled_E@"], "Permissions": [], "Description": "Sets whether RecyclerView should use its own measurement cache for the children. This is a more aggressive cache than the framework uses.", "history": "added in version 23.2.0", "FullName": "void setMeasurementCacheEnabled (boolean measurementCacheEnabled)"}, "moveView(int, int)": {"Returns": [], "Parameters": [["int", "int: The View's initial index"], ["int", "int: The View's target index"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Moves a View from one position to another.", "history": "added in version 22.0.0", "FullName": "void moveView (int fromIndex, int toIndex)"}, "chooseSize(int, int, int)": {"Returns": [["int", "A size that fits to the given specs"]], "Parameters": [["int", "int: The measureSpec"], ["int", "int: The preferred measurement"], ["int", "int: The minimum value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Chooses a size from the given specs and parameters that is closest to the desired size and also complies with the spec.", "history": "added in version 23.2.0", "FullName": "int chooseSize (int spec, int desired, int min)"}, "getPaddingStart()": {"Returns": [["int", "Padding in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the start padding of the parent RecyclerView", "history": "added in version 22.0.0", "FullName": "int getPaddingStart ()"}, "RecyclerView.LayoutManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "RecyclerView.LayoutManager ()"}, "onScrollStateChanged(int)": {"Returns": [], "Parameters": [["int", "int: The new scroll state for RecyclerView"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "RecyclerView calls this method to notify LayoutManager that scroll state has changed.", "history": "added in version 22.0.0", "FullName": "void onScrollStateChanged (int state)"}, "measureChild(android.view.View, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child view to measure"], ["int", "int: Width in pixels currently consumed by other views, if relevant"], ["int", "int: Height in pixels currently consumed by other views, if relevant"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure a child view using standard measurement policy, taking the padding of the parent RecyclerView and any added item decorations into account. If the RecyclerView can be scrolled in either dimension the caller may pass 0 as the widthUsed or heightUsed parameters as they will be irrelevant.", "history": "added in version 22.0.0", "FullName": "void measureChild (View child, int widthUsed, int heightUsed)"}, "getDecoratedBottom(android.view.View)": {"Returns": [["int", "Child bottom edge with offsets applied"]], "Parameters": [["@B_android#view#View_E@", "View: Child to query"]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#getBottomDecorationHeight_E@"], "Permissions": [], "Description": "Returns the bottom edge of the given child view within its parent, offset by any applied @B_android#support#v7#widget#RecyclerView#ItemDecoration_E@.", "history": "added in version 22.0.0", "FullName": "int getDecoratedBottom (View child)"}, "getClipToPadding()": {"Returns": [["boolean", "true if this RecyclerView clips children to its padding, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if the RecyclerView is configured to clip child views to its padding.", "history": "added in version 22.0.0", "FullName": "boolean getClipToPadding ()"}, "isAutoMeasureEnabled()": {"Returns": [["boolean", "True if the LayoutManager is measured by the RecyclerView or false if it measures itself."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#setAutoMeasureEnabled_E@"], "Permissions": [], "Description": "Returns whether the LayoutManager uses the automatic measurement API or not.", "history": "added in version 23.2.0", "FullName": "boolean isAutoMeasureEnabled ()"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Necessary information for LayoutManager to be able to restore its state"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the LayoutManager should save its state. This is a good time to save your scroll position, configuration and anything else that may be required to restore the same layout state if the LayoutManager is recreated. RecyclerView does NOT verify if the LayoutManager has changed between state save and restore. This will let you share information between your LayoutManagers but it is also your responsibility to make sure they use the same parcelable class.", "history": "added in version 22.0.0", "FullName": "Parcelable onSaveInstanceState ()"}, "removeViewAt(int)": {"Returns": [], "Parameters": [["int", "int: Index of the child view to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a view from the currently attached RecyclerView if needed. LayoutManagers should use this method to completely remove a child view that is no longer needed. LayoutManagers should strongly consider recycling removed views using @B_android#support#v7#widget#RecyclerView#Recycler#recycleView_E@.", "history": "added in version 22.0.0", "FullName": "void removeViewAt (int index)"}, "removeView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to remove"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a view from the currently attached RecyclerView if needed. LayoutManagers should use this method to completely remove a child view that is no longer needed. LayoutManagers should strongly consider recycling removed views using @B_android#support#v7#widget#RecyclerView#Recycler#recycleView_E@.", "history": "added in version 22.0.0", "FullName": "void removeView (View child)"}, "detachView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child to detach"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Temporarily detach a child view. LayoutManagers may want to perform a lightweight detach operation to rearrange views currently attached to the RecyclerView. Generally LayoutManager implementations will want to use @B_android#support#v7#widget#RecyclerView#LayoutManager#detachAndScrapView_E@ so that the detached view may be rebound and reused. If a LayoutManager uses this method to detach a view, it must @B_android#support#v7#widget#RecyclerView#LayoutManager#attachView_E@ or @B_android#support#v7#widget#RecyclerView#LayoutManager#removeDetachedView_E@ the detached view before the LayoutManager entry point method called by RecyclerView returns.", "history": "added in version 22.0.0", "FullName": "void detachView (View child)"}, "ignoreView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: View to ignore."]], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#stopIgnoringView_E@"], "Permissions": [], "Description": "Flags a view so that it will not be scrapped or recycled. Scope of ignoring a child is strictly restricted to position tracking, scrapping and recyling. Methods like @B_android#support#v7#widget#RecyclerView#LayoutManager#removeAndRecycleAllViews_E@ will ignore the child whereas @B_android#support#v7#widget#RecyclerView#LayoutManager#removeAllViews_E@ or @B_android#support#v7#widget#RecyclerView#LayoutManager#offsetChildrenHorizontal_E@ will not ignore the child. Before this child can be recycled again, you have to call @B_android#support#v7#widget#RecyclerView#LayoutManager#stopIgnoringView_E@. You can call this method only if your LayoutManger is in onLayout or onScroll callback.", "history": "added in version 22.0.0", "FullName": "void ignoreView (View view)"}, "isMeasurementCacheEnabled()": {"Returns": [["boolean", "True if measurement cache is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v7#widget#RecyclerView#LayoutManager#setMeasurementCacheEnabled_E@"], "Permissions": [], "Description": "In addition to the View Framework's measurement cache, RecyclerView uses its own additional measurement cache for its children to avoid re-measuring them when not necessary. It is on by default but it can be turned off via @B_android#support#v7#widget#RecyclerView#LayoutManager#setMeasurementCacheEnabled_E@.", "history": "added in version 23.2.0", "FullName": "boolean isMeasurementCacheEnabled ()"}, "attachView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: Child to reattach"], ["int", "int: Intended child index for child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reattach a previously @B_android#support#v7#widget#RecyclerView#LayoutManager#detachView_E@ view. This method should not be used to reattach views that were previously @B_android#support#v7#widget#RecyclerView#LayoutManager#detachAndScrapView_E@ scrapped}.", "history": "added in version 22.0.0", "FullName": "void attachView (View child, int index)"}, "hasFocus()": {"Returns": [["boolean", "true if the RecyclerView has or contains focus"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#hasFocus_E@"], "Permissions": [], "Description": "Returns true if the RecyclerView this LayoutManager is bound to has or contains focus.", "history": "added in version 22.0.0", "FullName": "boolean hasFocus ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v7.widget.RecyclerView.LayoutManager", "ClassDesc": "A LayoutManager is responsible for measuring and positioning item views within a RecyclerView as well as determining the policy for when to recycle item views that are no longer visible to the user. By changing the LayoutManager a RecyclerView can be used to implement a standard vertically scrolling list, a uniform grid, staggered grids, horizontally scrolling collections and more. Several stock layout managers are provided for general use. If the LayoutManager specifies a default constructor or one with the signature (https:##developer#android#com@B_android#content#Context_E@, https:##developer#android#com@B_android#util#AttributeSet_E@, int, int), RecyclerView will instantiate and set the LayoutManager when being inflated. Most used properties can be then obtained from @B_android#support#v7#widget#RecyclerView#LayoutManager#getProperties_E@. In case a LayoutManager specifies both constructors, the non-default constructor will take precedence."}