{"Functions": {"scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."], ["@B_java#lang#Runnable_E@", "Runnable: This value must never be null."], ["long", "long: The time (in milliseconds) to run. The timebase is @B_android#os#SystemClock#uptimeMillis_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A Drawable can call this to schedule the next frame of its animation. An implementation can generally simply call @B_android#os#Handler#postAtTime_E@ with the parameters", "history": "Added in API level 1", "FullName": "public void scheduleDrawable (Drawable who, Runnable what, long when)"}, "setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "getMinimumWidth()": {"Returns": [["int", "The minimum width suggested by this Drawable. If this Drawable doesn't have a suggested minimum width, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum width suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its width. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumWidth ()"}, "onLayoutDirectionChanged(int)": {"Returns": [["boolean", "true if the layout direction change has caused the appearance of the drawable to change such that it needs to be re-drawn, false otherwise"]], "Parameters": [["int", "int: Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawable's resolved layout direction changes.", "history": "Added in API level 23", "FullName": "public boolean onLayoutDirectionChanged (int layoutDirection)"}, "DrawableContainer()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public DrawableContainer ()"}, "setHotspotBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "Added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#DrawableContainer#DrawableContainerState_E@", "DrawableContainer.DrawableContainerState no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void setConstantState (DrawableContainer.DrawableContainerState state)"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "setDither(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This property is ignored. Set to true to have the drawable dither its colors when drawn to a device with fewer than 8-bits per color component.", "history": "Added in API level 1", "FullName": "public void setDither (boolean dither)"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 1", "FullName": "public int getOpacity ()"}, "getMinimumHeight()": {"Returns": [["int", "The minimum height suggested by this Drawable. If this Drawable doesn't have a suggested minimum height, 0 is returned."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the minimum height suggested by this Drawable. If a View uses this Drawable as a background, it is suggested that the View use at least this value for its height. (There will be some scenarios where this will not be possible.) This value should INCLUDE any padding.", "history": "Added in API level 1", "FullName": "public int getMinimumHeight ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 1", "FullName": "public void setAlpha (int alpha)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 1", "FullName": "protected boolean onStateChange (int[] state)"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setHotspot(float,float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "Added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 1", "FullName": "protected boolean onLevelChange (int level)"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 3", "FullName": "public Drawable mutate ()"}, "setEnterFadeDuration(int)": {"Returns": [], "Parameters": [["int", "int: The amount of time to fade in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the global fade duration when a new drawable is entering the scene.", "history": "Added in API level 11", "FullName": "public void setEnterFadeDuration (int ms)"}, "getHotspotBounds(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: the rect to populate with the hotspot bounds This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Populates outRect with the hotspot bounds.", "history": "Added in API level 23", "FullName": "public void getHotspotBounds (Rect outRect)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 1", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draw in its bounds (set via setBounds) respecting optional effects such as alpha (set via setAlpha) and color filter (set via setColorFilter).", "history": "Added in API level 1", "FullName": "public void draw (Canvas canvas)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicWidth ()"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "Added in API level 11", "FullName": "public void jumpToCurrentState ()"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "setAutoMirrored(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Set to true if the Drawable should be mirrored, false if not."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is automatically mirrored when its layout direction is RTL (right-to left). See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public void setAutoMirrored (boolean mirrored)"}, "unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."], ["@B_java#lang#Runnable_E@", "Runnable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A Drawable can call this to unschedule an action previously scheduled with @B_android#graphics#drawable#Drawable#Callback#scheduleDrawable_E@. An implementation can generally simply call @B_android#os#Handler#removeCallbacks_E@ with the parameters", "history": "Added in API level 1", "FullName": "public void unscheduleDrawable (Drawable who, Runnable what)"}, "setExitFadeDuration(int)": {"Returns": [], "Parameters": [["int", "int: The amount of time to fade in milliseconds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the global fade duration when a new drawable is leaving the scene.", "history": "Added in API level 11", "FullName": "public void setExitFadeDuration (int ms)"}, "getAlpha()": {"Returns": [["int", "Value is between 0 and 255 inclusive"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current alpha value for the drawable. 0 means fully transparent, 255 means fully opaque. This method is implemented by Drawable subclasses and the value returned is specific to how that class treats alpha. The default return value is 255 if the class does not override this method to return a value specific to its use of alpha.", "history": "Added in API level 19", "FullName": "public int getAlpha ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 1", "FullName": "public int getIntrinsicHeight ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 1", "FullName": "public Drawable.ConstantState getConstantState ()"}, "isAutoMirrored()": {"Returns": [["boolean", "boolean Returns true if this Drawable will be automatically mirrored."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells if this Drawable will be automatically mirrored when its layout direction is RTL right-to-left. See @B_android#util#LayoutDirection_E@.", "history": "Added in API level 19", "FullName": "public boolean isAutoMirrored ()"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 1", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 1", "FullName": "protected void onBoundsChange (Rect bounds)"}, "invalidateDrawable(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawable needs to be redrawn. A view at this point should invalidate itself (or at least the part of itself where the drawable appears).", "history": "Added in API level 1", "FullName": "public void invalidateDrawable (Drawable who)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme theme)"}, "getPadding(android.graphics.Rect)": {"Returns": [["boolean", "true if this drawable actually has a padding, else false. When false is returned, the padding is always set to 0."]], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in padding the insets suggested by this Drawable for placing content inside the drawable's bounds. Positive values move toward the center of the Drawable (set Rect.inset).", "history": "Added in API level 1", "FullName": "public boolean getPadding (Rect padding)"}, "getCurrent()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "The current drawable that will be used by this drawable. For simple drawables, this is just the drawable itself. For drawables that change state like @B_android#graphics#drawable#StateListDrawable_E@ and @B_android#graphics#drawable#LevelListDrawable_E@ this will be the child drawable currently in use. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public Drawable getCurrent ()"}, "selectDrawable(int)": {"Returns": [["boolean", "true if the drawable changed, false otherwise"]], "Parameters": [["int", "int: the index of the drawable to display"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the currently displayed drawable by index. If an invalid index is specified, the current drawable will be set to null and the index will be set to -1.", "history": "Added in API level 1", "FullName": "public boolean selectDrawable (int index)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 1", "FullName": "public int getChangingConfigurations ()"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 1", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.DrawableContainer", "ClassDesc": "A helper class that contains several @B_android#graphics#drawable#Drawable_E@s and selects which one to use. You can subclass it to create your own DrawableContainers or directly use one its child classes."}