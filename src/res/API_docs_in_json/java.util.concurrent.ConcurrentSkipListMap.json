{"Functions": {"descendingKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are", "history": "Added in API level 9", "FullName": "public NavigableSet<K> descendingKeySet ()"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if this map contains a mapping for the specified key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains a mapping for the specified key.", "history": "Added in API level 9", "FullName": "public boolean containsKey (Object key)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which a value may be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null or the remappingFunction is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present, attempts to compute a new mapping given the key and its current mapped value. The function is NOT guaranteed to be applied once atomically.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "Added in API level 9", "FullName": "public V putIfAbsent (K key, V value)"}, "firstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> firstEntry ()"}, "descendingMap()": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a reverse order view of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. The returned map has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> descendingMap ()"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the mapping for the key, if present; else the defaultValue"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key"], ["V", "V: the value to return if this map contains no mapping for the given key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "higherKey(K)": {"Returns": [["K", "the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key strictly greater than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K higherKey (K key)"}, "subMap(K,K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> subMap (K fromKey, K toKey)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent the same mappings. More formally, two maps m1 and m2 represent the same mappings if m1.entrySet().equals(m2.entrySet()). This operation may return misleading results if either map is concurrently modified during execution of this method.", "history": "Added in API level 9", "FullName": "public boolean equals (Object o)"}, "ceilingKey(K)": {"Returns": [["K", "the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key greater than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K ceilingKey (K key)"}, "keySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set's spliterator additionally reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#NONNULL_E@, @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@, with an encounter order that is ascending key order. The spliterator's comparator (see @B_java#util#Spliterator#getComparator_E@) is null if the map's comparator (see @B_java#util#concurrent#ConcurrentSkipListMap#comparator_E@) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the map's comparator. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are This method is equivalent to method navigableKeySet.", "history": "Added in API level 9", "FullName": "public NavigableSet<K> keySet ()"}, "tailMap(K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "pollLastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed last entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> pollLastEntry ()"}, "lastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> lastEntry ()"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that key compares equal to k according to the map's ordering, then this method returns v; otherwise it returns null. (There can be at most one such mapping.)", "history": "Added in API level 9", "FullName": "public V get (Object key)"}, "headMap(K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "size()": {"Returns": [["int", "the number of elements in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map. If this map contains more than Integer.MAX_VALUE elements, it returns Integer.MAX_VALUE. Beware that, unlike in most collections, this method is NOT a constant-time operation. Because of the asynchronous nature of these maps, determining the current number of elements requires traversing them all to count them. Additionally, it is possible for the size to change during execution of this method, in which case the returned result will be inaccurate. Thus, this method is typically not very useful in concurrent applications.", "history": "Added in API level 9", "FullName": "public int size ()"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: the value to use if absent"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to recompute a value if present"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key or value is null or the remappingFunction is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. Otherwise, replaces the value with the results of the given remapping function, or removes if null. The function is NOT guaranteed to be applied once atomically.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the keys in this map, or null if this map uses the", "history": "Added in API level 9", "FullName": "public Comparator<? super K> comparator ()"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 9", "FullName": "public boolean remove (Object key, Object value)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection's iterator returns the values in ascending order of the corresponding keys. The collections's spliterator additionally reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#NONNULL_E@ and @B_java#util#Spliterator#ORDERED_E@, with an encounter order that is ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are", "history": "Added in API level 9", "FullName": "public Collection<V> values ()"}, "subMap(K,boolean,K,boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "subMap(K, K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> subMap (K fromKey, K toKey)"}, "floorEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> floorEntry (K key)"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key for which mapping should be removed"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for the specified key from this map if present.", "history": "Added in API level 9", "FullName": "public V remove (Object key)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map, sorted in ascending key order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set's iterator returns the entries in ascending key order. The set's spliterator additionally reports @B_java#util#Spliterator#CONCURRENT_E@, @B_java#util#Spliterator#NONNULL_E@, @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@, with an encounter order that is ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are The Map.Entry elements traversed by the iterator or spliterator do not support the setValue operation.", "history": "Added in API level 9", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 9", "FullName": "public boolean remove (Object key, Object value)"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "Added in API level 9", "FullName": "public V replace (K key, V value)"}, "lowerEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> lowerEntry (K key)"}, "put(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "Added in API level 9", "FullName": "public V put (K key, V value)"}, "lowerKey(K)": {"Returns": [["K", "the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key strictly less than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K lowerKey (K key)"}, "ceilingEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such entry. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> ceilingEntry (K key)"}, "subMap(K, boolean, K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "navigableKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations. The view's iterators and spliterators are", "history": "Added in API level 9", "FullName": "public NavigableSet<K> navigableKeySet ()"}, "ConcurrentSkipListMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the keys in m are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified map or any of its keys or values are null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new map containing the same mappings as the given map, sorted according to the", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListMap (Map<? extends K, ? extends V> m)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "added in API level 9", "FullName": "public V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if any of the arguments are null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "added in API level 9", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map.", "history": "Added in API level 9", "FullName": "public void clear ()"}, "pollFirstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed first entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> pollFirstEntry ()"}, "higherEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key. The returned entry does not support the Entry.setValue method.", "history": "Added in API level 9", "FullName": "public Entry<K, V> higherEntry (K key)"}, "lastKey()": {"Returns": [["K", "the last (highest) key currently in this map"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last (highest) key currently in this map.", "history": "Added in API level 9", "FullName": "public K lastKey ()"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if any of the arguments are null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to a given value. This is equivalent to, for this map:", "history": "Added in API level 9", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "floorKey(K)": {"Returns": [["K", "the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key less than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K floorKey (K key)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for a key only if currently mapped to some value. This is equivalent to, for this map:", "history": "added in API level 9", "FullName": "public V replace (K key, V value)"}, "clone()": {"Returns": [["@B_java#util#concurrent#ConcurrentSkipListMap_E@", "a shallow copy of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this ConcurrentSkipListMap instance. (The keys and values themselves are not cloned.)", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListMap<K, V> clone ()"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null or the remappingFunction is null"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). The function is NOT guaranteed to be applied once atomically.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "ConcurrentSkipListMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty map, sorted according to the", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListMap ()"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "ConcurrentSkipListMap(java.util.Comparator<?superK>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this map. If null, the Comparable of the keys will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty map, sorted according to the specified comparator.", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListMap (Comparator<? super K> comparator)"}, "headMap(K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are strictly less than toKey"]], "Parameters": [["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to headMap(toKey, false).", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> headMap (K toKey)"}, "ConcurrentSkipListMap(java.util.SortedMap<K,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map whose mappings are to be placed in this map, and whose comparator is to be used to sort this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified sorted map or any of its keys or values are null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new map containing the same mappings and using the same ordering as the specified sorted map.", "history": "Added in API level 9", "FullName": "public ConcurrentSkipListMap (SortedMap<K, ? extends V> m)"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains no key-value mappings.", "history": "Added in API level 9", "FullName": "public boolean isEmpty ()"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if a mapping to value exists; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified value is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map maps one or more keys to the specified value. This operation requires time linear in the map size. Additionally, it is possible for the map to change during execution of this method, in which case the returned result may be inaccurate.", "history": "Added in API level 9", "FullName": "public boolean containsValue (Object value)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, associates it with the given value. This is equivalent to, for this map:", "history": "added in API level 9", "FullName": "public V putIfAbsent (K key, V value)"}, "tailMap(K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null or the mappingFunction is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value, attempts to compute its value using the given mapping function and enters it into this map unless null. The function is NOT guaranteed to be applied once atomically only if the value is not present.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "headMap(K, boolean)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the mapping for the key, if present; else the defaultValue"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key"], ["V", "V: the value to return if this map contains no mapping for the given key"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or the given defaultValue if this map contains no mapping for the key.", "history": "added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "firstKey()": {"Returns": [["K", "the first (lowest) key currently in this map"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (lowest) key currently in this map.", "history": "Added in API level 9", "FullName": "public K firstKey ()"}, "tailMap(K)": {"Returns": [["@B_java#util#concurrent#ConcurrentNavigableMap_E@", "a view of the portion of this map whose keys are greater than or equal to fromKey"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to tailMap(fromKey, true).", "history": "Added in API level 9", "FullName": "public ConcurrentNavigableMap<K, V> tailMap (K fromKey)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.concurrent.ConcurrentSkipListMap<K, V>", "ClassDesc": "A scalable concurrent @B_java#util#concurrent#ConcurrentNavigableMap_E@ implementation. The map is sorted according to the @B_java#util#Comparator_E@ provided at map creation time, depending on which constructor is used. This class implements a concurrent variant of containsKey, get, put and remove operations and their variants. Insertion, removal, update, and access operations safely execute concurrently by multiple threads. Iterators and spliterators are Ascending key ordered views and their iterators are faster than descending ones. All Map.Entry pairs returned by methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method. (Note however that it is possible to change mappings in the associated map using put, putIfAbsent, or replace, depending on exactly which effect you need.) Beware that, unlike in most collections, the size method is not a constant-time operation. Because of the asynchronous nature of these maps, determining the current number of elements requires a traversal of the elements, and so may report inaccurate results if this collection is modified during traversal. Additionally, the bulk operations putAll, equals, toArray, containsValue, and clear are not guaranteed to be performed atomically. For example, an iterator operating concurrently with a putAll operation might view only some of the added elements. This class and its views and iterators implement all of the optional methods of the @B_java#util#Map_E@ and @B_java#util#Iterator_E@ interfaces. Like most other concurrent collections, this class does not permit the use of null keys or values because some null return values cannot be reliably distinguished from the absence of elements."}