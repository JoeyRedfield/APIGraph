{"Functions": {"handleKeyDown(long, int, android.view.KeyEvent)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "added in API level 3", "FullName": "public static long handleKeyDown (long state, int keyCode, KeyEvent event)"}, "isMetaTracker(java.lang.CharSequence,java.lang.Object)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this object is one that this class would use to keep track of any meta state in the specified text.", "history": "Added in API level 1", "FullName": "public static boolean isMetaTracker (CharSequence text, Object what)"}, "adjustMetaAfterKeypress(long)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released). Takes the current state, returns the new state.", "history": "Added in API level 3", "FullName": "public static long adjustMetaAfterKeypress (long state)"}, "handleKeyUp(long,int,android.view.KeyEvent)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles release of the meta keys.", "history": "Added in API level 3", "FullName": "public static long handleKeyUp (long state, int keyCode, KeyEvent event)"}, "clearMetaKeyState(long, int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long: the meta key state"], ["int", "int: meta keys to clear, may be a combination of @B_android#text#method#MetaKeyKeyListener#META_SHIFT_ON_E@, @B_android#text#method#MetaKeyKeyListener#META_ALT_ON_E@ or @B_android#text#method#MetaKeyKeyListener#META_SYM_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the state of the specified meta key if it is locked.", "history": "added in API level 3", "FullName": "public long clearMetaKeyState (long state, int which)"}, "clearMetaKeyState(android.text.Editable, int)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 3", "FullName": "public static void clearMetaKeyState (Editable content, int states)"}, "MetaKeyKeyListener()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public MetaKeyKeyListener ()"}, "handleKeyDown(long,int,android.view.KeyEvent)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "Added in API level 3", "FullName": "public static long handleKeyDown (long state, int keyCode, KeyEvent event)"}, "onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles release of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (View view, Editable content, int keyCode, KeyEvent event)"}, "getMetaState(long)": {"Returns": [["int", "an integer in which each bit set to one represents a pressed or locked meta key."]], "Parameters": [["long", "long: the current meta state bits."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of the meta keys.", "history": "Added in API level 3", "FullName": "public static final int getMetaState (long state)"}, "resetLockedMeta(android.text.Spannable)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key.", "history": "Added in API level 1", "FullName": "protected static void resetLockedMeta (Spannable content)"}, "onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles presses of the meta keys.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (View view, Editable content, int keyCode, KeyEvent event)"}, "adjustMetaAfterKeypress(android.text.Spannable)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this method after you handle a keypress so that the meta state will be reset to unshifted (if it is not still down) or primed to be reset to unshifted (once it is released).", "history": "Added in API level 1", "FullName": "public static void adjustMetaAfterKeypress (Spannable content)"}, "getMetaState(java.lang.CharSequence)": {"Returns": [["int", "an integer in which each bit set to one represents a pressed or locked meta key."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the buffer in which the meta key would have been pressed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of the meta keys.", "history": "Added in API level 1", "FullName": "public static final int getMetaState (CharSequence text)"}, "getMetaState(java.lang.CharSequence, int)": {"Returns": [["int", "0 if inactive, 1 if active, 2 if locked."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the buffer in which the meta key would have been pressed."], ["int", "int: META_SHIFT_ON, META_ALT_ON, META_SYM_ON"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of a particular meta key.", "history": "added in API level 1", "FullName": "public static final int getMetaState (CharSequence text, int meta)"}, "getMetaState(long,int)": {"Returns": [["int", "0 if inactive, 1 if active, 2 if locked."]], "Parameters": [["long", "long: the current state bits."], ["int", "int: META_SHIFT_ON, META_ALT_ON, or META_SYM_ON"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of a particular meta key.", "history": "Added in API level 3", "FullName": "public static final int getMetaState (long state, int meta)"}, "handleKeyUp(long, int, android.view.KeyEvent)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["int", "int no parameter comment"], ["@B_android#view#KeyEvent_E@", "KeyEvent no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Handles release of the meta keys.", "history": "added in API level 3", "FullName": "public static long handleKeyUp (long state, int keyCode, KeyEvent event)"}, "clearMetaKeyState(long,int)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long: the meta key state"], ["int", "int: meta keys to clear, may be a combination of @B_android#text#method#MetaKeyKeyListener#META_SHIFT_ON_E@, @B_android#text#method#MetaKeyKeyListener#META_ALT_ON_E@ or @B_android#text#method#MetaKeyKeyListener#META_SYM_ON_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears the state of the specified meta key if it is locked.", "history": "Added in API level 3", "FullName": "public long clearMetaKeyState (long state, int which)"}, "getMetaState(java.lang.CharSequence,int)": {"Returns": [["int", "0 if inactive, 1 if active, 2 if locked."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the buffer in which the meta key would have been pressed."], ["int", "int: META_SHIFT_ON, META_ALT_ON, META_SYM_ON"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of a particular meta key.", "history": "Added in API level 1", "FullName": "public static final int getMetaState (CharSequence text, int meta)"}, "getMetaState(java.lang.CharSequence,int,android.view.KeyEvent)": {"Returns": [["int", "0 if inactive, 1 if active, 2 if locked."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the buffer in which the meta key would have been pressed."], ["int", "int: META_SHIFT_ON, META_ALT_ON, META_SYM_ON"], ["@B_android#view#KeyEvent_E@", "KeyEvent: the event for which to evaluate the meta state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of a particular meta key to use with a particular key event. If the key event has been created by a device that does not support toggled key modifiers, like a virtual keyboard for example, only the meta state in the key event is considered.", "history": "Added in API level 19", "FullName": "public static final int getMetaState (CharSequence text, int meta, KeyEvent event)"}, "clearMetaKeyState(android.view.View,android.text.Editable,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public void clearMetaKeyState (View view, Editable content, int states)"}, "resetLockedMeta(long)": {"Returns": [["long", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this if you are a method that ignores the locked meta state (arrow keys, for example) and you handle a key.", "history": "Added in API level 3", "FullName": "public static long resetLockedMeta (long state)"}, "isSelectingMetaTracker(java.lang.CharSequence,java.lang.Object)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this object is one that this class would use to keep track of the selecting meta state in the specified text.", "history": "Added in API level 3", "FullName": "public static boolean isSelectingMetaTracker (CharSequence text, Object what)"}, "resetMetaState(android.text.Spannable)": {"Returns": [], "Parameters": [["@B_android#text#Spannable_E@", "Spannable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets all meta state to inactive.", "history": "Added in API level 1", "FullName": "public static void resetMetaState (Spannable text)"}, "clearMetaKeyState(android.text.Editable,int)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3", "FullName": "public static void clearMetaKeyState (Editable content, int states)"}, "getMetaState(long, int)": {"Returns": [["int", "0 if inactive, 1 if active, 2 if locked."]], "Parameters": [["long", "long: the current state bits."], ["int", "int: META_SHIFT_ON, META_ALT_ON, or META_SYM_ON"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of a particular meta key.", "history": "added in API level 3", "FullName": "public static final int getMetaState (long state, int meta)"}, "getMetaState(java.lang.CharSequence,android.view.KeyEvent)": {"Returns": [["int", "an integer in which each bit set to one represents a pressed or locked meta key."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the buffer in which the meta key would have been pressed."], ["@B_android#view#KeyEvent_E@", "KeyEvent: the event for which to evaluate the meta state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the state of the meta keys for a specific key event. For input devices that use toggled key modifiers, the `toggled' state is stored into the text buffer. This method retrieves the meta state for this event, accounting for the stored state. If the event has been created by a device that does not support toggled key modifiers, like a virtual device for example, the stored state is ignored.", "history": "Added in API level 19", "FullName": "public static final int getMetaState (CharSequence text, KeyEvent event)"}}, "Inheritance": [], "ClassName": "android.text.method.MetaKeyKeyListener", "ClassDesc": "This base class encapsulates the behavior for tracking the state of meta keys such as SHIFT, ALT and SYM as well as the pseudo-meta state of selecting text. Key listeners that care about meta state should inherit from this class; you should not instantiate this class directly in a client. This class provides two mechanisms for tracking meta state that can be used together or independently. Methods such as @B_android#text#method#MetaKeyKeyListener#handleKeyDown_E@ and @B_android#text#method#MetaKeyKeyListener#getMetaState_E@ operate on a meta key state bit mask. Methods such as @B_android#text#method#MetaKeyKeyListener#onKeyDown_E@ and @B_android#text#method#MetaKeyKeyListener#getMetaState_E@ operate on meta key state flags stored as spans in an @B_android#text#Editable_E@ text buffer. The spans only describe the current meta key state of the text editor; they do not carry any positional information. The behavior of this class varies according to the keyboard capabilities described by the @B_android#view#KeyCharacterMap_E@ of the keyboard device such as the @B_android#view#KeyCharacterMap#getModifierBehavior_E@. @B_android#text#method#MetaKeyKeyListener_E@ implements chorded and toggled key modifiers. When key modifiers are toggled into a latched or locked state, the state of the modifier is stored in the @B_android#text#Editable_E@ text buffer or in a meta state integer managed by the client. These latched or locked modifiers should be considered to be held @B_android#view#KeyEvent#getMetaState_E@. In other words, the @B_android#text#method#MetaKeyKeyListener_E@ augments the meta state provided by the keyboard; it does not replace it. This distinction is important to ensure that meta keys not handled by @B_android#text#method#MetaKeyKeyListener_E@ such as @B_android#view#KeyEvent#KEYCODE_CAPS_LOCK_E@ or @B_android#view#KeyEvent#KEYCODE_NUM_LOCK_E@ are taken into consideration. To ensure correct meta key behavior, the following pattern should be used when mapping key codes to characters: private char getUnicodeChar(TextKeyListener listener, KeyEvent event, Editable textBuffer) { // Use the combined meta states from the event and the key listener. int metaState = event.getMetaState() | listener.getMetaState(textBuffer); return event.getUnicodeChar(metaState); }"}