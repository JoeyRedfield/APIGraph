{"Functions": {"get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#NdefFormatable_E@", "NDEF formatable object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an NDEF formatable tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#NdefFormatable_E@ for the given tag. Does not cause any RF activity and does not block. Returns null if @B_android#nfc#tech#NdefFormatable_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@. This indicates the tag is not NDEF formatable by this Android device.", "history": "Added in API level 10", "FullName": "public static NdefFormatable get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 10", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void connect ()"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 10", "FullName": "public Tag getTag ()"}, "format(android.nfc.NdefMessage)": {"Returns": [], "Parameters": [["@B_android#nfc#NdefMessage_E@", "NdefMessage: the NDEF message to write after formatting, can be null"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"], ["@B_android#nfc#FormatException_E@", "if the NDEF Message to write is malformed"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Format a tag as NDEF, and write a @B_android#nfc#NdefMessage_E@. This is a multi-step process, an IOException is thrown if any one step fails. The card is left in a read-write state after this operation. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#NdefFormatable#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void format (NdefMessage firstMessage)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void close ()"}, "formatReadOnly(android.nfc.NdefMessage)": {"Returns": [], "Parameters": [["@B_android#nfc#NdefMessage_E@", "NdefMessage: the NDEF message to write after formatting"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"], ["@B_android#nfc#FormatException_E@", "if the NDEF Message to write is malformed"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Formats a tag as NDEF, write a @B_android#nfc#NdefMessage_E@, and make read-only. This is a multi-step process, an IOException is thrown if any one step fails. The card is left in a read-only state if this method returns successfully. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#NdefFormatable#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void formatReadOnly (NdefMessage firstMessage)"}}, "Inheritance": [], "ClassName": "android.nfc.tech.NdefFormatable", "ClassDesc": "Provide access to NDEF format operations on a @B_android#nfc#Tag_E@. Acquire a @B_android#nfc#tech#NdefFormatable_E@ object using @B_android#nfc#tech#NdefFormatable#get_E@. Android devices with NFC must only enumerate and implement this class for tags for which it can format to NDEF. Unfortunately the procedures to convert unformated tags to NDEF formatted tags are not specified by NFC Forum, and are not generally well-known. So there is no mandatory set of tags for which all Android devices with NFC must support @B_android#nfc#tech#NdefFormatable_E@. @B_android#Manifest#permission#NFC_E@ permission."}