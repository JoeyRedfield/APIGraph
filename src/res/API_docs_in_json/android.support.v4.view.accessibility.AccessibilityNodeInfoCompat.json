{"Functions": {"setMultiLine(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is multi line."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node is a multi line editable text. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setMultiLine (boolean multiLine)"}, "setTextSelection(int, int)": {"Returns": [], "Parameters": [["int", "int: The text selection start."], ["int", "int: The text selection end."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text selection start and end. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setTextSelection (int start, int end)"}, "isContextClickable()": {"Returns": [["boolean", "True if the node is context clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is context clickable.", "history": "added in version 24.2.0", "FullName": "boolean isContextClickable ()"}, "performAction(int, android.os.Bundle)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle: A bundle with additional arguments."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Performs an action on the node. @B_android#accessibilityservice#AccessibilityService_E@.", "history": "added in version 22.0.0", "FullName": "boolean performAction (int action, Bundle arguments)"}, "setDrawingOrder(int)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Set the drawing order of the view corresponding it this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 24.0.0", "FullName": "void setDrawingOrder (int drawingOrderInParent)"}, "removeChild(android.view.View)": {"Returns": [["boolean", "true if the child was present"]], "Parameters": [["@B_android#view#View_E@", "View: The child."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Removes a child. If the child was not previously added to the node, calling this method has no effect. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "boolean removeChild (View child)"}, "setScrollable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is scrollable, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node is scrollable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setScrollable (boolean scrollable)"}, "getTraversalBefore()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The succeeding node if such or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#setTraversalBefore_E@"], "Permissions": [], "Description": "Gets the node before which this one is visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes.", "history": "added in version 23.0.0", "FullName": "AccessibilityNodeInfoCompat getTraversalBefore ()"}, "getTraversalAfter()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The succeeding node if such or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#setTraversalAfter_E@"], "Permissions": [], "Description": "Gets the node after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one.", "history": "added in version 23.0.0", "FullName": "AccessibilityNodeInfoCompat getTraversalAfter ()"}, "setContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The content description."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the content description of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setContentDescription (CharSequence contentDescription)"}, "setTraversalBefore(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view providing the preceding node."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#getTraversalBefore_E@"], "Permissions": [], "Description": "Sets the view before whose node this one should be visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setTraversalBefore (View view)"}, "AccessibilityNodeInfoCompat(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#wrap_E@ instead. Creates a new instance wrapping an @B_android#view#accessibility#AccessibilityNodeInfo_E@.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat (Object info)"}, "setText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setText (CharSequence text)"}, "findAccessibilityNodeInfosByText(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "A list of node info."]], "Parameters": [["@B_java#lang#String_E@", "String: The searched text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds @B_android#view#accessibility#AccessibilityNodeInfo_E@s by text. The match is case insensitive containment. The search is relative to this info i.e. this info is the root of the traversed tree. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 22.0.0", "FullName": "List<AccessibilityNodeInfoCompat> findAccessibilityNodeInfosByText (String text)"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is checked."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is checked. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setChecked (boolean checked)"}, "setSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is selected."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is selected. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setSelected (boolean selected)"}, "isSelected()": {"Returns": [["boolean", "True if the node is selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is selected.", "history": "added in version 22.0.0", "FullName": "boolean isSelected ()"}, "setContentInvalid(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the node content is invalid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the content of this node is invalid. For example, a date is not well-formed. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.1.0", "FullName": "void setContentInvalid (boolean contentInvalid)"}, "getBoundsInParent(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The output node bounds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node bounds in parent coordinates.", "history": "added in version 22.0.0", "FullName": "void getBoundsInParent (Rect outBounds)"}, "setEditable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is editable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is editable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setEditable (boolean editable)"}, "performAction(int)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: The action to perform."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Performs an action on the node. @B_android#accessibilityservice#AccessibilityService_E@.", "history": "added in version 22.0.0", "FullName": "boolean performAction (int action)"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text of this node.", "history": "added in version 22.0.0", "FullName": "CharSequence getText ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "", "FullName": "String toString ()"}, "getChild(int)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The child node."]], "Parameters": [["int", "int: The child index."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Get the child at given index. @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat getChild (int index)"}, "setCheckable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is checkable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is checkable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setCheckable (boolean checkable)"}, "addChild(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The child."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a child. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void addChild (View child)"}, "refresh()": {"Returns": [["boolean", "Whether the refresh succeeded."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Refreshes this info with the latest state of the view it represents.", "history": "added in version 23.0.0", "FullName": "boolean refresh ()"}, "setTraversalBefore(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node before which this one is visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes. The successor is a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the successor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setTraversalBefore (View root, int virtualDescendantId)"}, "setCollectionItemInfo(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "void setCollectionItemInfo (Object collectionItemInfo)"}, "obtain(android.view.View)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "An instance."]], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#setSource_E@"], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one and sets the source.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat obtain (View source)"}, "obtain(android.view.View, int)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "An instance."]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#setSource_E@"], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one and sets the source.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat obtain (View root, int virtualDescendantId)"}, "isContentInvalid()": {"Returns": [["boolean", "If the node content is invalid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the content of this node is invalid. For example, a date is not well-formed.", "history": "added in version 22.1.0", "FullName": "boolean isContentInvalid ()"}, "setContextClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is context clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is context clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 24.2.0", "FullName": "void setContextClickable (boolean contextClickable)"}, "unwrap()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The unwrapped @B_android#view#accessibility#AccessibilityNodeInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 26.0.0-beta1", "FullName": "AccessibilityNodeInfo unwrap ()"}, "getCollectionInfo()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#CollectionInfoCompat_E@", "The collection info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the collection info if the node is a collection. A collection child is always a collection item.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat.CollectionInfoCompat getCollectionInfo ()"}, "isFocused()": {"Returns": [["boolean", "True if the node is focused."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is focused.", "history": "added in version 22.0.0", "FullName": "boolean isFocused ()"}, "isChecked()": {"Returns": [["boolean", "True if the node is checked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is checked.", "history": "added in version 22.0.0", "FullName": "boolean isChecked ()"}, "isMultiLine()": {"Returns": [["boolean", "True if the node is multi line."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is a multi line editable text.", "history": "added in version 23.0.0", "FullName": "boolean isMultiLine ()"}, "setDismissable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the node can be dismissed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node can be dismissed. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setDismissable (boolean dismissable)"}, "addChild(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a virtual child which is a descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is added as a child. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure.", "history": "added in version 22.0.0", "FullName": "void addChild (View root, int virtualDescendantId)"}, "getRangeInfo()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#RangeInfoCompat_E@", "The range."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range info if this node is a range.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat.RangeInfoCompat getRangeInfo ()"}, "setTraversalAfter(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the predecessor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setTraversalAfter (View root, int virtualDescendantId)"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The content description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the content description of this node.", "history": "added in version 22.0.0", "FullName": "CharSequence getContentDescription ()"}, "getChildCount()": {"Returns": [["int", "The child count."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of children.", "history": "added in version 22.0.0", "FullName": "int getChildCount ()"}, "getLabeledBy()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The label."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node info which serves as the label of the view represented by this info for accessibility purposes. @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 23.0.0", "FullName": "AccessibilityNodeInfoCompat getLabeledBy ()"}, "setSource(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The info source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source.", "history": "added in version 22.0.0", "FullName": "void setSource (View source)"}, "setClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setClickable (boolean clickable)"}, "isEnabled()": {"Returns": [["boolean", "True if the node is enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is enabled.", "history": "added in version 22.0.0", "FullName": "boolean isEnabled ()"}, "setMaxTextLength(int)": {"Returns": [], "Parameters": [["int", "int: The maximum text length."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#getMaxTextLength_E@"], "Permissions": [], "Description": "Sets the maximum text length, or -1 for no limit. Typically used to indicate that an editable text field has a limit on the number of characters entered. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setMaxTextLength (int max)"}, "setPackageName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The package name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the package this node comes from. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setPackageName (CharSequence packageName)"}, "setImportantForAccessibility(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the node is considered important for accessibility, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node is considered important for accessibility. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 24.0.0", "FullName": "void setImportantForAccessibility (boolean important)"}, "getActionList()": {"Returns": [["@B_java#util#List_E@", "A list of AccessibilityActions."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the actions that can be performed on the node.", "history": "added in version 22.0.0", "FullName": "List<AccessibilityNodeInfoCompat.AccessibilityActionCompat> getActionList ()"}, "setFocusable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is focusable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is focusable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setFocusable (boolean focusable)"}, "findFocus(int)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The node info of the focused view or null."]], "Parameters": [["int", "int: The focus to find. One of @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#FOCUS_INPUT_E@ or @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#FOCUS_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@"], "Permissions": [], "Description": "Find the view that has the specified focus type. The search starts from the view represented by this node info.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat findFocus (int focus)"}, "getError()": {"Returns": [["@B_java#lang#CharSequence_E@", "The error text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the error text of this node.", "history": "added in version 22.1.0", "FullName": "CharSequence getError ()"}, "getInputType()": {"Returns": [["int", "The input type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the input type of the source as defined by @B_android#text#InputType_E@.", "history": "added in version 23.0.0", "FullName": "int getInputType ()"}, "obtain()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "An instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat obtain ()"}, "setLabeledBy(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that labels this node's source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view which serves as the label of the view represented by this info for accessibility purposes.", "history": "added in version 23.0.0", "FullName": "void setLabeledBy (View label)"}, "setRoleDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The role description."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the custom role description. The role description allows you to customize the name for the view's semantic role. For example, if you create a custom subclass of @B_android#view#View_E@ to display a menu bar, you could assign it the role description of \"menu bar\". @B_android#widget#CheckBox_E@. Instead let accessibility services decide what feedback to provide. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 24.0.0", "FullName": "void setRoleDescription (CharSequence roleDescription)"}, "getInfo()": {"Returns": [["@B_java#lang#Object_E@", "The wrapped @B_android#view#accessibility#AccessibilityNodeInfo_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#unwrap_E@ instead.", "history": "added in version 22.0.0", "FullName": "Object getInfo ()"}, "setError(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The error text."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the error text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.1.0", "FullName": "void setError (CharSequence error)"}, "setAccessibilityFocused(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is accessibility focused."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is accessibility focused. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setAccessibilityFocused (boolean focused)"}, "getClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The class name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the class this node comes from.", "history": "added in version 22.0.0", "FullName": "CharSequence getClassName ()"}, "setMovementGranularities(int)": {"Returns": [], "Parameters": [["int", "int: The bit mask with granularities."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the movement granularities for traversing the text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setMovementGranularities (int granularities)"}, "setParent(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The parent."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setParent (View parent)"}, "getMaxTextLength()": {"Returns": [["int", "The maximum text length, or -1 for no limit."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#setMaxTextLength_E@"], "Permissions": [], "Description": "Returns the maximum text length for this node.", "history": "added in version 23.0.0", "FullName": "int getMaxTextLength ()"}, "isLongClickable()": {"Returns": [["boolean", "True if the node is long clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is long clickable.", "history": "added in version 22.0.0", "FullName": "boolean isLongClickable ()"}, "setViewIdResourceName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id resource name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fully qualified resource name of the source view's id. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setViewIdResourceName (String viewId)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "The bundle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an optional bundle with extra data. The bundle is lazily created and never null.", "history": "added in version 23.0.0", "FullName": "Bundle getExtras ()"}, "isVisibleToUser()": {"Returns": [["boolean", "Whether the node is visible to the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is visible to the user.", "history": "added in version 22.0.0", "FullName": "boolean isVisibleToUser ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "", "FullName": "boolean equals (Object obj)"}, "focusSearch(int)": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The node info for the view that can take accessibility focus."]], "Parameters": [["int", "int: The direction. Can be one of: @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_BACKWARD_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches for the nearest view in the specified direction that can take input focus.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat focusSearch (int direction)"}, "setBoundsInScreen(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The node bounds."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the node bounds in screen coordinates. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setBoundsInScreen (Rect bounds)"}, "getWindow()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityWindowInfoCompat_E@", "The window."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityService#getWindows_E@"], "Permissions": [], "Description": "Gets the window to which this node belongs.", "history": "added in version 23.0.0", "FullName": "AccessibilityWindowInfoCompat getWindow ()"}, "isFocusable()": {"Returns": [["boolean", "True if the node is focusable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is focusable.", "history": "added in version 22.0.0", "FullName": "boolean isFocusable ()"}, "setLiveRegion(int)": {"Returns": [], "Parameters": [["int", "int: The live region mode, or @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_NONE_E@ if the view is not a live region."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#setAccessibilityLiveRegion_E@"], "Permissions": [], "Description": "Sets the node's live region mode. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setLiveRegion (int mode)"}, "getBoundsInScreen(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The output node bounds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node bounds in screen coordinates.", "history": "added in version 22.0.0", "FullName": "void getBoundsInScreen (Rect outBounds)"}, "getActions()": {"Returns": [["int", "The bit mask of with actions."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Gets the actions that can be performed on the node.", "history": "added in version 22.0.0", "FullName": "int getActions ()"}, "canOpenPopup()": {"Returns": [["boolean", "If the the node opens a popup."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if this node opens a popup or a dialog.", "history": "added in version 23.0.0", "FullName": "boolean canOpenPopup ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "", "FullName": "int hashCode ()"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is enabled."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is enabled. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setEnabled (boolean enabled)"}, "setCanOpenPopup(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the the node opens a popup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if this node opens a popup or a dialog. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setCanOpenPopup (boolean opensPopup)"}, "getLabelFor()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The labeled info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node info for which the view represented by this info serves as a label for accessibility purposes. @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 23.0.0", "FullName": "AccessibilityNodeInfoCompat getLabelFor ()"}, "getMovementGranularities()": {"Returns": [["int", "The bit mask with granularities."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the movement granularities for traversing the text of this node.", "history": "added in version 22.0.0", "FullName": "int getMovementGranularities ()"}, "isClickable()": {"Returns": [["boolean", "True if the node is clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is clickable.", "history": "added in version 22.0.0", "FullName": "boolean isClickable ()"}, "getTextSelectionEnd()": {"Returns": [["int", "The text selection end if there is selection or -1."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text selection end.", "history": "added in version 23.0.0", "FullName": "int getTextSelectionEnd ()"}, "isScrollable()": {"Returns": [["boolean", "True if the node is scrollable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is scrollable.", "history": "added in version 22.0.0", "FullName": "boolean isScrollable ()"}, "getLiveRegion()": {"Returns": [["int", "The live region mode, or @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_NONE_E@ if the view is not a live region."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#ViewCompat#getAccessibilityLiveRegion_E@"], "Permissions": [], "Description": "Gets the node's live region mode. A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example, in a login screen with a TextView that displays an \"incorrect password\" notification, that view should be marked as a live region with mode @B_android#support#v4#view#ViewCompat#ACCESSIBILITY_LIVE_REGION_POLITE_E@. It is the responsibility of the accessibility service to monitor @B_android#support#v4#view#accessibility#AccessibilityEventCompat#TYPE_WINDOW_CONTENT_CHANGED_E@ events indicating changes to live region nodes and their children.", "history": "added in version 22.0.0", "FullName": "int getLiveRegion ()"}, "setPassword(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is a password."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is a password. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setPassword (boolean password)"}, "getWindowId()": {"Returns": [["int", "The window id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id of the window from which the info comes from.", "history": "added in version 22.0.0", "FullName": "int getWindowId ()"}, "setLabeledBy(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant labels this node's source."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view which serves as the label of the view represented by this info for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the label. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setLabeledBy (View root, int virtualDescendantId)"}, "setBoundsInParent(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The node bounds."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the node bounds in parent coordinates. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setBoundsInParent (Rect bounds)"}, "setSource(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source to be a virtual descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setSource (View root, int virtualDescendantId)"}, "isAccessibilityFocused()": {"Returns": [["boolean", "True if the node is accessibility focused."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is accessibility focused.", "history": "added in version 22.0.0", "FullName": "boolean isAccessibilityFocused ()"}, "isImportantForAccessibility()": {"Returns": [["boolean", "true if the node originates from a view considered important for accessibility, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#isImportantForAccessibility_E@"], "Permissions": [], "Description": "Returns whether the node originates from a view considered important for accessibility.", "history": "added in version 24.0.0", "FullName": "boolean isImportantForAccessibility ()"}, "isPassword()": {"Returns": [["boolean", "True if the node is a password."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is a password.", "history": "added in version 22.0.0", "FullName": "boolean isPassword ()"}, "getParent()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@", "The parent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the parent. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat getParent ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the info is already recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Return an instance back to be reused.", "history": "added in version 22.0.0", "FullName": "void recycle ()"}, "setClassName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The class name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the class this node comes from. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setClassName (CharSequence className)"}, "getRoleDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The role description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the custom role description.", "history": "added in version 24.0.0", "FullName": "CharSequence getRoleDescription ()"}, "getViewIdResourceName()": {"Returns": [["@B_java#lang#String_E@", "The id resource name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the fully qualified resource name of the source view's id. @B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat_E@ the client has to set the @B_android#support#v4#accessibilityservice#AccessibilityServiceInfoCompat#FLAG_REPORT_VIEW_IDS_E@ flag when configuring his @B_android#accessibilityservice#AccessibilityService_E@.", "history": "added in version 22.0.0", "FullName": "String getViewIdResourceName ()"}, "setLongClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is long clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is long clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setLongClickable (boolean longClickable)"}, "isCheckable()": {"Returns": [["boolean", "True if the node is checkable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is checkable.", "history": "added in version 22.0.0", "FullName": "boolean isCheckable ()"}, "isEditable()": {"Returns": [["boolean", "True if the node is editable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is editable.", "history": "added in version 23.0.0", "FullName": "boolean isEditable ()"}, "getCollectionItemInfo()": {"Returns": [["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#CollectionItemInfoCompat_E@", "The collection item info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the collection item info if the node is a collection item. A collection item is always a child of a collection.", "history": "added in version 22.0.0", "FullName": "AccessibilityNodeInfoCompat.CollectionItemInfoCompat getCollectionItemInfo ()"}, "setVisibleToUser(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the node is visible to the user."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is visible to the user. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setVisibleToUser (boolean visibleToUser)"}, "setLabelFor(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant serves as a label."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view for which the view represented by this info serves as a label for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the labeled. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure.", "history": "added in version 22.1.0", "FullName": "void setLabelFor (View root, int virtualDescendantId)"}, "setCollectionInfo(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "void setCollectionInfo (Object collectionInfo)"}, "setFocused(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is focused."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is focused. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setFocused (boolean focused)"}, "addAction(int)": {"Returns": [], "Parameters": [["int", "int: The action."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an action that can be performed on the node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void addAction (int action)"}, "setTraversalAfter(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The previous view."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#getTraversalAfter_E@"], "Permissions": [], "Description": "Sets the view whose node is visited after this one in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setTraversalAfter (View view)"}, "setParent(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the parent. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 22.0.0", "FullName": "void setParent (View root, int virtualDescendantId)"}, "getPackageName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The package name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the package this node comes from.", "history": "added in version 22.0.0", "FullName": "CharSequence getPackageName ()"}, "setInputType(int)": {"Returns": [], "Parameters": [["int", "int: The input type."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the input type of the source as defined by @B_android#text#InputType_E@. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in version 23.0.0", "FullName": "void setInputType (int inputType)"}, "isDismissable()": {"Returns": [["boolean", "If the node can be dismissed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node can be dismissed.", "history": "added in version 23.0.0", "FullName": "boolean isDismissable ()"}, "removeChild(android.view.View, int)": {"Returns": [["boolean", "true if the child was present"]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": ["@B_android#support#v4#view#accessibility#AccessibilityNodeInfoCompat#addChild_E@"], "Permissions": [], "Description": "Removes a virtual child which is a descendant of the given root. If the child was not previously added to the node, calling this method has no effect.", "history": "added in version 23.0.0", "FullName": "boolean removeChild (View root, int virtualDescendantId)"}, "setLabelFor(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view for which this info serves as a label."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view for which the view represented by this info serves as a label for accessibility purposes.", "history": "added in version 22.1.0", "FullName": "void setLabelFor (View labeled)"}, "getDrawingOrder()": {"Returns": [["int", "The drawing position of the view corresponding to this node relative to its siblings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawing order of the view corresponding it this node. Drawing order is determined only within the node's parent, so this index is only relative to its siblings. In some cases, the drawing order is essentially simultaneous, so it is possible for two siblings to return the same value. It is also possible that values will be skipped.", "history": "added in version 24.0.0", "FullName": "int getDrawingOrder ()"}, "getTextSelectionStart()": {"Returns": [["int", "The text selection start if there is selection or -1."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text selection start.", "history": "added in version 23.0.0", "FullName": "int getTextSelectionStart ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "android.support.v4.view.accessibility.AccessibilityNodeInfoCompat", "ClassDesc": "Helper for accessing https:##developer#android#com@B_android#view#accessibility#AccessibilityNodeInfo_E@ in a backwards compatible fashion."}