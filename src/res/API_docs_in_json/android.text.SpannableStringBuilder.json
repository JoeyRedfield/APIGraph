{"Functions": {"getSpanEnd(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the buffer offset of the end of the specified markup object, or -1 if it is not attached to this buffer.", "history": "Added in API level 1", "FullName": "public int getSpanEnd (Object what)"}, "subSequence(int, int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a new CharSequence containing a copy of the specified range of this buffer, including the overlapping spans.", "history": "added in API level 1", "FullName": "public CharSequence subSequence (int start, int end)"}, "SpannableStringBuilder(java.lang.CharSequence,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new SpannableStringBuilder containing a copy of the specified slice of the specified text, including its spans if any.", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder (CharSequence text, int start, int end)"}, "SpannableStringBuilder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new SpannableStringBuilder with empty contents", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder ()"}, "nextSpanTransition(int, int, java.lang.Class)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the next offset after start but less than or equal to limit where a span of the specified type begins or ends.", "history": "added in API level 1", "FullName": "public int nextSpanTransition (int start, int limit, Class kind)"}, "append(java.lang.CharSequence, int, int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, start, end)", "history": "added in API level 1", "FullName": "public SpannableStringBuilder append (CharSequence text, int start, int end)"}, "append(java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence to append. If csq is null, then the four characters \"null\" are appended to this Appendable."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, 0, text.length())", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder append (CharSequence text)"}, "getTextRunCursor(int,int,int,int,int,android.graphics.Paint)": {"Returns": [["int", "the offset of the next position, or -1"]], "Parameters": [["int", "int: the start index of the context"], ["int", "int: the (non-inclusive) end index of the context"], ["int", "int: 1 if the run is RTL, otherwise 0"], ["int", "int: the cursor position to move from"], ["int", "int: how to move the cursor, one of CURSOR_AFTER, CURSOR_AT_OR_AFTER, CURSOR_BEFORE, CURSOR_AT_OR_BEFORE, or CURSOR_AT"], ["@B_android#graphics#Paint_E@", "Paint: the Paint object that is requesting this information"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is an internal method, refrain from using it in your code Returns the next cursor position in the run. This avoids placing the cursor between surrogates, between characters that form conjuncts, between base characters and combining marks, or within a reordering cluster. The context is the shaping context for cursor movement, generally the bounds of the metric span enclosing the cursor in the direction of movement. contextStart, contextEnd and offset are relative to the start of the string. If cursorOpt is CURSOR_AT and the offset is not a valid cursor position, this returns -1. Otherwise this will never return a value before contextStart or after contextEnd.", "history": "Added in API level 11 Deprecated in API level 15", "FullName": "public int getTextRunCursor (int contextStart, int contextEnd, int dir, int offset, int cursorOpt, Paint p)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "append(char)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "A reference to this Appendable"]], "Parameters": [["char", "char: The character to append"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for append(String.valueOf(text)).", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder append (char text)"}, "replace(int,int,java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "a reference to this object."]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the specified range (st\u2026en) of text in this Editable with a copy of the slice start\u2026end from source. The destination slice may be empty, in which case the operation is an insertion, or the source slice may be empty, in which case the operation is a deletion. Before the change is committed, each filter that was set with @B_android#text#Editable#setFilters_E@ is given the opportunity to modify the source text. If source is Spanned, the spans from it are preserved into the Editable. Existing spans within the Editable that entirely cover the replaced range are retained, but any that were strictly within the range that was replaced are removed. If the source contains a span with @B_android#text#Spanned#SPAN_PARAGRAPH_E@ flag, and it does not satisfy the paragraph boundary constraint, it is not retained. As a special case, the cursor position is preserved even when the entire range where it is located is replaced.", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder replace (int start, int end, CharSequence tb, int tbstart, int tbend)"}, "insert(int,java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(where, where, text, start, end)", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder insert (int where, CharSequence tb, int start, int end)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "append(java.lang.CharSequence,int,int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "A reference to this Appendable"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The character sequence from which a subsequence will be appended. If csq is null, then characters will be appended as if csq contained the four characters \"null\"."], ["int", "int: The index of the first character in the subsequence"], ["int", "int: The index of the character following the last character in the subsequence"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(length(), length(), text, start, end)", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder append (CharSequence text, int start, int end)"}, "insert(int, java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(where, where, text, 0, text.length());", "history": "added in API level 1", "FullName": "public SpannableStringBuilder insert (int where, CharSequence tb)"}, "removeSpan(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove the specified markup object from the buffer.", "history": "Added in API level 1", "FullName": "public void removeSpan (Object what)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a String containing a copy of the chars in this buffer.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getFilters()": {"Returns": [["@B_android#text#InputFilter_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the array of input filters that are currently applied to changes to this Editable.", "history": "Added in API level 1", "FullName": "public InputFilter[] getFilters ()"}, "append(java.lang.CharSequence,java.lang.Object,int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "this SpannableStringBuilder."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the character sequence to append."], ["@B_java#lang#Object_E@", "Object: the object to be spanned over the appended text."], ["int", "int: see @B_android#text#Spanned_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Appends the character sequence text and spans what over the appended part. See @B_android#text#Spanned_E@ for an explanation of what the flags mean.", "history": "Added in API level 21", "FullName": "public SpannableStringBuilder append (CharSequence text, Object what, int flags)"}, "valueOf(java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static SpannableStringBuilder valueOf (CharSequence source)"}, "getSpanStart(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the buffer offset of the beginning of the specified markup object, or -1 if it is not attached to this buffer.", "history": "Added in API level 1", "FullName": "public int getSpanStart (Object what)"}, "length()": {"Returns": [["int", "the number of chars in this sequence"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of chars in the buffer.", "history": "Added in API level 1", "FullName": "public int length ()"}, "insert(int, java.lang.CharSequence, int, int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(where, where, text, start, end)", "history": "added in API level 1", "FullName": "public SpannableStringBuilder insert (int where, CharSequence tb, int start, int end)"}, "clearSpans()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all spans from the Editable, as if by calling @B_android#text#Spannable#removeSpan_E@ on each of them.", "history": "Added in API level 1", "FullName": "public void clearSpans ()"}, "getTextWatcherDepth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the depth of TextWatcher callbacks. Returns 0 when the object is not handling TextWatchers. A return value greater than 1 implies that a TextWatcher caused a change that recursively triggered a TextWatcher.", "history": "Added in API level 23", "FullName": "public int getTextWatcherDepth ()"}, "delete(int,int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(st, en, \"\", 0, 0)", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder delete (int start, int end)"}, "SpannableStringBuilder(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new SpannableStringBuilder containing a copy of the specified text, including its spans if any.", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder (CharSequence text)"}, "insert(int,java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(where, where, text, 0, text.length());", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder insert (int where, CharSequence tb)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(0, length(), \"\", 0, 0). Note that this clears the text, not the spans; use @B_android#text#Editable#clearSpans_E@ if you need that.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "setSpan(java.lang.Object, int, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Mark the specified range of text with the specified object. The flags determine how the span will behave when text is inserted at the start or end of the span's range.", "history": "added in API level 1", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "nextSpanTransition(int,int,java.lang.Class)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the next offset after start but less than or equal to limit where a span of the specified type begins or ends.", "history": "Added in API level 1", "FullName": "public int nextSpanTransition (int start, int limit, Class kind)"}, "measureText(int, int, android.graphics.Paint)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Just like @B_android#graphics#Paint#measureText_E@.", "history": "", "FullName": "public abstract float measureText (int start, int end, Paint p)"}, "getChars(int, int, char[], int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["char[]", "char no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the specified range of chars from this buffer into the specified array, beginning at the specified offset.", "history": "added in API level 1", "FullName": "public void getChars (int start, int end, char[] dest, int destoff)"}, "subSequence(int,int)": {"Returns": [["@B_java#lang#CharSequence_E@", "the specified subsequence"]], "Parameters": [["int", "int: the start index, inclusive"], ["int", "int: the end index, exclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a new CharSequence containing a copy of the specified range of this buffer, including the overlapping spans.", "history": "Added in API level 1", "FullName": "public CharSequence subSequence (int start, int end)"}, "setSpan(java.lang.Object,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Mark the specified range of text with the specified object. The flags determine how the span will behave when text is inserted at the start or end of the span's range.", "history": "Added in API level 1", "FullName": "public void setSpan (Object what, int start, int end, int flags)"}, "getSpans(int,int,java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the spans of the specified type that overlap the specified range of the buffer. The kind may be Object.class to get a list of all the spans regardless of type.", "history": "Added in API level 1", "FullName": "public T[] getSpans (int queryStart, int queryEnd, Class<T> kind)"}, "getChars(int,int,char[],int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["char[]", "char no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy the specified range of chars from this buffer into the specified array, beginning at the specified offset.", "history": "Added in API level 1", "FullName": "public void getChars (int start, int end, char[] dest, int destoff)"}, "setFilters(android.text.InputFilter[])": {"Returns": [], "Parameters": [["@B_android#text#InputFilter_E@", "InputFilter no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the series of filters that will be called in succession whenever the text of this Editable is changed, each of which has the opportunity to limit or transform the text that is being inserted.", "history": "Added in API level 1", "FullName": "public void setFilters (InputFilter[] filters)"}, "charAt(int)": {"Returns": [["char", "the specified char value"]], "Parameters": [["int", "int: the index of the char value to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the char at the specified offset within the buffer.", "history": "Added in API level 1", "FullName": "public char charAt (int where)"}, "replace(int,int,java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(st, en, text, 0, text.length())", "history": "Added in API level 1", "FullName": "public SpannableStringBuilder replace (int start, int end, CharSequence tb)"}, "delete(int, int)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(st, en, \"\", 0, 0)", "history": "added in API level 1", "FullName": "public SpannableStringBuilder delete (int start, int end)"}, "getSpans(int, int, java.lang.Class<T>)": {"Returns": [["T[]", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#Class_E@", "Class no parameter comment This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return an array of the spans of the specified type that overlap the specified range of the buffer. The kind may be Object.class to get a list of all the spans regardless of type.", "history": "added in API level 1", "FullName": "public T[] getSpans (int queryStart, int queryEnd, Class<T> kind)"}, "getSpanFlags(java.lang.Object)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#Object_E@", "Object no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the flags of the end of the specified markup object, or 0 if it is not attached to this buffer.", "history": "Added in API level 1", "FullName": "public int getSpanFlags (Object what)"}, "replace(int, int, java.lang.CharSequence)": {"Returns": [["@B_android#text#SpannableStringBuilder_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience for replace(st, en, text, 0, text.length())", "history": "added in API level 1", "FullName": "public SpannableStringBuilder replace (int start, int end, CharSequence tb)"}}, "Inheritance": [], "ClassName": "android.text.SpannableStringBuilder", "ClassDesc": "This is the class for text whose content and markup can both be changed."}