{"Functions": {"getObject(int,int)": {"Returns": [["byte[]", "the object's data, or null if reading fails"]], "Parameters": [["int", "int: handle of the object to read"], ["int", "int: the size of the object (this should match @B_android#mtp#MtpObjectInfo#getCompressedSize_E@)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data for an object as a byte array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "Added in API level 12", "FullName": "public byte[] getObject (int objectHandle, int objectSize)"}, "sendObjectInfo(android.mtp.MtpObjectInfo)": {"Returns": [["@B_android#mtp#MtpObjectInfo_E@", "object info of the created entry, or null if sending object info fails"]], "Parameters": [["@B_android#mtp#MtpObjectInfo_E@", "MtpObjectInfo: metadata of the entry This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Uploads an object metadata for a new entry. The @B_android#mtp#MtpObjectInfo_E@ can be created with the @B_android#mtp#MtpObjectInfo#Builder_E@ class. The returned @B_android#mtp#MtpObjectInfo_E@ has the new object handle field filled in.", "history": "Added in API level 24", "FullName": "public MtpObjectInfo sendObjectInfo (MtpObjectInfo info)"}, "importFile(int,java.lang.String)": {"Returns": [["boolean", "true if the file transfer succeeds"]], "Parameters": [["int", "int: handle of the object to read"], ["@B_java#lang#String_E@", "String: path to destination for the file transfer. This path should be in the external storage as defined by @B_android#os#Environment#getExternalStorageDirectory_E@ This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the data for an object to a file in external storage. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "Added in API level 12", "FullName": "public boolean importFile (int objectHandle, String destPath)"}, "importFile(int, android.os.ParcelFileDescriptor)": {"Returns": [["boolean", "true if the file transfer succeeds"]], "Parameters": [["int", "int: handle of the object to read"], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: file descriptor to write the data to for the file transfer.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the data for an object to a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.", "history": "added in API level 24", "FullName": "public boolean importFile (int objectHandle, ParcelFileDescriptor descriptor)"}, "getDeviceInfo()": {"Returns": [["@B_android#mtp#MtpDeviceInfo_E@", "the device info, or null if fetching device info fails"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#mtp#MtpDeviceInfo_E@ for this device", "history": "Added in API level 12", "FullName": "public MtpDeviceInfo getDeviceInfo ()"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 12", "FullName": "protected void finalize ()"}, "getStorageIds()": {"Returns": [["int[]", "the list of storage IDs, or null if fetching storage IDs fails"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of IDs for all storage units on this device Information about each storage unit can be accessed via @B_android#mtp#MtpDevice#getStorageInfo_E@.", "history": "Added in API level 12", "FullName": "public int[] getStorageIds ()"}, "importFile(int,android.os.ParcelFileDescriptor)": {"Returns": [["boolean", "true if the file transfer succeeds"]], "Parameters": [["int", "int: handle of the object to read"], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: file descriptor to write the data to for the file transfer. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the data for an object to a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.", "history": "Added in API level 24", "FullName": "public boolean importFile (int objectHandle, ParcelFileDescriptor descriptor)"}, "getObjectHandles(int,int,int)": {"Returns": [["int[]", "the object handles, or null if fetching object handles fails"]], "Parameters": [["int", "int: the storage unit to query"], ["int", "int: the format of the object to return, or zero for all formats"], ["int", "int: the parent object to query, -1 for the storage root, or zero for all objects"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via @B_android#mtp#MtpDevice#getObjectInfo_E@.", "history": "Added in API level 12", "FullName": "public int[] getObjectHandles (int storageId, int format, int objectHandle)"}, "getObjectInfo(int)": {"Returns": [["@B_android#mtp#MtpObjectInfo_E@", "the MtpObjectInfo, or null if fetching object info fails"]], "Parameters": [["int", "int: the handle of the object"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the @B_android#mtp#MtpObjectInfo_E@ for an object.", "history": "Added in API level 12", "FullName": "public MtpObjectInfo getObjectInfo (int objectHandle)"}, "getParent(int)": {"Returns": [["long", "the parent's handle, or zero if it is in the root of the storage"]], "Parameters": [["int", "int: handle of the object to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the object handle for the parent of an object on the device.", "history": "Added in API level 12", "FullName": "public long getParent (int objectHandle)"}, "getThumbnail(int)": {"Returns": [["byte[]", "the object's thumbnail, or null if reading fails"]], "Parameters": [["int", "int: handle of the object to read"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thumbnail data for an object as a byte array. The size and format of the thumbnail data can be determined via @B_android#mtp#MtpObjectInfo#getThumbCompressedSize_E@ and @B_android#mtp#MtpObjectInfo#getThumbFormat_E@. For typical devices the format is JPEG.", "history": "Added in API level 12", "FullName": "public byte[] getThumbnail (int objectHandle)"}, "deleteObject(int)": {"Returns": [["boolean", "true if the deletion succeeds"]], "Parameters": [["int", "int: handle of the object to delete"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Deletes an object on the device. This call may block, since deleting a directory containing many files may take a long time on some devices.", "history": "Added in API level 12", "FullName": "public boolean deleteObject (int objectHandle)"}, "getStorageInfo(int)": {"Returns": [["@B_android#mtp#MtpStorageInfo_E@", "the MtpStorageInfo, or null if fetching storage info fails"]], "Parameters": [["int", "int: the ID of the storage unit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the @B_android#mtp#MtpStorageInfo_E@ for a storage unit.", "history": "Added in API level 12", "FullName": "public MtpStorageInfo getStorageInfo (int storageId)"}, "open(android.hardware.usb.UsbDeviceConnection)": {"Returns": [["boolean", "true if the device was successfully opened."]], "Parameters": [["@B_android#hardware#usb#UsbDeviceConnection_E@", "UsbDeviceConnection: an open @B_android#hardware#usb#UsbDeviceConnection_E@ for the device This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Opens the MTP device. Once the device is open it takes ownership of the @B_android#hardware#usb#UsbDeviceConnection_E@. The connection will be closed when you call @B_android#mtp#MtpDevice#close_E@ The connection will also be closed if this method fails.", "history": "Added in API level 12", "FullName": "public boolean open (UsbDeviceConnection connection)"}, "getStorageId(int)": {"Returns": [["long", "the object's storage unit ID"]], "Parameters": [["int", "int: handle of the object to query"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the ID of the storage unit containing the given object on the device.", "history": "Added in API level 12", "FullName": "public long getStorageId (int objectHandle)"}, "getPartialObject64(int,long,long,byte[])": {"Returns": [["long", "Size of bytes that are actually read."]], "Parameters": [["int", "int: handle of the object to read"], ["long", "long: Start index of reading range. It must be a non-negative value."], ["long", "long: Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE."], ["byte[]", "byte: Array to write data. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#mtp#MtpConstants_E@"], "Permissions": [], "Description": "Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. This is a vender-extended operation supported by Android that enables us to pass unsigned 64-bit offset. Check if the MTP device supports the operation by using @B_android#mtp#MtpDeviceInfo#getOperationsSupported_E@.", "history": "Added in API level 24", "FullName": "public long getPartialObject64 (int objectHandle, long offset, long size, byte[] buffer)"}, "getDeviceName()": {"Returns": [["@B_java#lang#String_E@", "the device name This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the USB device This returns the same value as @B_android#hardware#usb#UsbDevice#getDeviceName_E@ for the device's @B_android#hardware#usb#UsbDevice_E@", "history": "Added in API level 12", "FullName": "public String getDeviceName ()"}, "getObjectHandles(int, int, int)": {"Returns": [["int[]", "the object handles, or null if fetching object handles fails"]], "Parameters": [["int", "int: the storage unit to query"], ["int", "int: the format of the object to return, or zero for all formats"], ["int", "int: the parent object to query, -1 for the storage root, or zero for all objects"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via @B_android#mtp#MtpDevice#getObjectInfo_E@.", "history": "added in API level 12", "FullName": "public int[] getObjectHandles (int storageId, int format, int objectHandle)"}, "importFile(int, java.lang.String)": {"Returns": [["boolean", "true if the file transfer succeeds"]], "Parameters": [["int", "int: handle of the object to read"], ["@B_java#lang#String_E@", "String: path to destination for the file transfer. This path should be in the external storage as defined by @B_android#os#Environment#getExternalStorageDirectory_E@This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the data for an object to a file in external storage. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "added in API level 12", "FullName": "public boolean importFile (int objectHandle, String destPath)"}, "MtpDevice(android.hardware.usb.UsbDevice)": {"Returns": [], "Parameters": [["@B_android#hardware#usb#UsbDevice_E@", "UsbDevice: the @B_android#hardware#usb#UsbDevice_E@ for the MTP or PTP device This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "MtpClient constructor", "history": "Added in API level 12", "FullName": "public MtpDevice (UsbDevice device)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes all resources related to the MtpDevice object. After this is called, the object can not be used until @B_android#mtp#MtpDevice#open_E@ is called again with a new @B_android#hardware#usb#UsbDeviceConnection_E@.", "history": "Added in API level 12", "FullName": "public void close ()"}, "getPartialObject(int,long,long,byte[])": {"Returns": [["long", "Size of bytes that are actually read."]], "Parameters": [["int", "int: handle of the object to read"], ["long", "long: Start index of reading range. It must be a non-negative value at most 0xffffffff."], ["long", "long: Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE or 0xffffffff. If 0xffffffff is specified, the method obtains the full bytes of object."], ["byte[]", "byte: Array to write data. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "Added in API level 24", "FullName": "public long getPartialObject (int objectHandle, long offset, long size, byte[] buffer)"}, "getPartialObject64(int, long, long, byte[])": {"Returns": [["long", "Size of bytes that are actually read."]], "Parameters": [["int", "int: handle of the object to read"], ["long", "long: Start index of reading range. It must be a non-negative value."], ["long", "long: Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE."], ["byte[]", "byte: Array to write data.This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#mtp#MtpConstants_E@"], "Permissions": [], "Description": "Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. This is a vender-extended operation supported by Android that enables us to pass unsigned 64-bit offset. Check if the MTP device supports the operation by using @B_android#mtp#MtpDeviceInfo#getOperationsSupported_E@.", "history": "added in API level 24", "FullName": "public long getPartialObject64 (int objectHandle, long offset, long size, byte[] buffer)"}, "sendObject(int,long,android.os.ParcelFileDescriptor)": {"Returns": [["boolean", "true if the file transfer succeeds"]], "Parameters": [["int", "int: handle of the target file"], ["long", "long: size of the file in bytes"], ["@B_android#os#ParcelFileDescriptor_E@", "ParcelFileDescriptor: file descriptor to read the data from. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copies the data for an object from a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.", "history": "Added in API level 24", "FullName": "public boolean sendObject (int objectHandle, long size, ParcelFileDescriptor descriptor)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 12", "FullName": "public String toString ()"}, "readEvent(android.os.CancellationSignal)": {"Returns": [["@B_android#mtp#MtpEvent_E@", "obtained event This value will never be null."]], "Parameters": [["@B_android#os#CancellationSignal_E@", "CancellationSignal: signal for cancellation This value may be null."]], "Throws": [["", "java.io.IOException"], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads an event from the device. It blocks the current thread until it gets an event. It throws OperationCanceledException if it is cancelled by signal.", "history": "Added in API level 24", "FullName": "public MtpEvent readEvent (CancellationSignal signal)"}, "getObject(int, int)": {"Returns": [["byte[]", "the object's data, or null if reading fails"]], "Parameters": [["int", "int: handle of the object to read"], ["int", "int: the size of the object (this should match @B_android#mtp#MtpObjectInfo#getCompressedSize_E@)"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the data for an object as a byte array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "added in API level 12", "FullName": "public byte[] getObject (int objectHandle, int objectSize)"}, "getDeviceId()": {"Returns": [["int", "the device ID"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the USB ID of the USB device. This returns the same value as @B_android#hardware#usb#UsbDevice#getDeviceId_E@ for the device's @B_android#hardware#usb#UsbDevice_E@", "history": "Added in API level 12", "FullName": "public int getDeviceId ()"}, "getPartialObject(int, long, long, byte[])": {"Returns": [["long", "Size of bytes that are actually read."]], "Parameters": [["int", "int: handle of the object to read"], ["long", "long: Start index of reading range. It must be a non-negative value at most 0xffffffff."], ["long", "long: Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE or 0xffffffff. If 0xffffffff is specified, the method obtains the full bytes of object."], ["byte[]", "byte: Array to write data.This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.", "history": "added in API level 24", "FullName": "public long getPartialObject (int objectHandle, long offset, long size, byte[] buffer)"}}, "Inheritance": [], "ClassName": "android.mtp.MtpDevice", "ClassDesc": "This class represents an MTP or PTP device connected on the USB host bus. An application can instantiate an object of this type, by referencing an attached @B_android#hardware#usb#UsbDevice_E@ and then use methods in this class to get information about the device and objects stored on it, as well as open the connection and transfer data."}