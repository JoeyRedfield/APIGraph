{"Functions": {"SpellCheckerService.Session()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 14", "FullName": "public SpellCheckerService.Session ()"}, "onClose()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to close this session. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.", "history": "Added in API level 15", "FullName": "public void onClose ()"}, "onCreate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called after the class is initialized, at which point it knows it can call getLocale() etc...", "history": "Added in API level 14", "FullName": "public abstract void onCreate ()"}, "onGetSuggestionsMultiple(android.view.textservice.TextInfo[],int,boolean)": {"Returns": [["@B_android#view#textservice#SuggestionsInfo_E@", "an array of @B_android#view#textservice#SentenceSuggestionsInfo_E@ returned by @B_android#service#textservice#SpellCheckerService#Session#onGetSuggestions_E@"]], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: an array of the text metadata"], ["int", "int: the maximum number of suggestions to be returned"], ["boolean", "boolean: true if textInfos can be treated as sequential words."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A batch process of onGetSuggestions. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.", "history": "Added in API level 14", "FullName": "public SuggestionsInfo[] onGetSuggestionsMultiple (TextInfo[] textInfos, int suggestionsLimit, boolean sequentialWords)"}, "onGetSentenceSuggestionsMultiple(android.view.textservice.TextInfo[],int)": {"Returns": [["@B_android#view#textservice#SentenceSuggestionsInfo_E@", "an array of @B_android#view#textservice#SentenceSuggestionsInfo_E@ returned by @B_android#service#textservice#SpellCheckerService#Session#onGetSuggestions_E@"]], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: an array of the text metadata"], ["int", "int: the maximum number of suggestions to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get sentence suggestions for specified texts in an array of TextInfo. The default implementation splits the input text to words and returns @B_android#view#textservice#SentenceSuggestionsInfo_E@ which contains suggestions for each word. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread. When you override this method, make sure that suggestionsLimit is applied to suggestions that share the same start position and length.", "history": "Added in API level 16", "FullName": "public SentenceSuggestionsInfo[] onGetSentenceSuggestionsMultiple (TextInfo[] textInfos, int suggestionsLimit)"}, "onGetSuggestions(android.view.textservice.TextInfo,int)": {"Returns": [["@B_android#view#textservice#SuggestionsInfo_E@", "SuggestionsInfo which contains suggestions for textInfo"]], "Parameters": [["@B_android#view#textservice#TextInfo_E@", "TextInfo: the text metadata"], ["int", "int: the maximum number of suggestions to be returned"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get suggestions for specified text in TextInfo. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.", "history": "Added in API level 14", "FullName": "public abstract SuggestionsInfo onGetSuggestions (TextInfo textInfo, int suggestionsLimit)"}, "getLocale()": {"Returns": [["@B_java#lang#String_E@", "Locale for this session"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public String getLocale ()"}, "getBundle()": {"Returns": [["@B_android#os#Bundle_E@", "Bundle for this session"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 14", "FullName": "public Bundle getBundle ()"}, "onCancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Request to abort all tasks executed in SpellChecker. This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.", "history": "Added in API level 14", "FullName": "public void onCancel ()"}}, "Inheritance": [], "ClassName": "android.service.textservice.SpellCheckerService.Session", "ClassDesc": "This abstract class should be overridden by a concrete implementation of a spell checker."}