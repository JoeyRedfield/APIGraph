{"Functions": {"getDefaultEngine()": {"Returns": [["@B_java#lang#String_E@", "Package name of the TTS engine that the user has chosen as their default."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the package name of the default speech synthesis engine.", "history": "Added in API level 8", "FullName": "public String getDefaultEngine ()"}, "getDefaultLanguage()": {"Returns": [["@B_java#util#Locale_E@", "language, country (if any) and variant (if any) used by the client stored in a Locale instance, or null on error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, use getDefaultVoice().getLocale() (@B_android#speech#tts#TextToSpeech#getDefaultVoice_E@) Returns a Locale instance describing the language currently being used as the default Text-to-speech language. The locale object returned by this method is NOT a valid one. It has identical form to the one in @B_android#speech#tts#TextToSpeech#getLanguage_E@. Please refer to @B_android#speech#tts#TextToSpeech#getLanguage_E@ for more information.", "history": "Added in API level 18 Deprecated in API level 21", "FullName": "public Locale getDefaultLanguage ()"}, "setSpeechRate(float)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["float", "float: Speech rate. 1.0 is the normal speech rate, lower values slow down the speech (0.5 is half the normal speech rate), greater values accelerate it (2.0 is twice the normal speech rate)."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the speech rate. This has no effect on any pre-recorded speech.", "history": "Added in API level 4", "FullName": "public int setSpeechRate (float speechRate)"}, "getLanguage()": {"Returns": [["@B_java#util#Locale_E@", "language, country (if any) and variant (if any) used by the client stored in a Locale instance, or null on error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, please use getVoice().getLocale() (@B_android#speech#tts#TextToSpeech#getVoice_E@). Returns a Locale instance describing the language currently being used for synthesis requests sent to the TextToSpeech engine. In Android 4.2 and before (API <= 17) this function returns the language that is currently being used by the TTS engine. That is the last language set by this or any other client by a @B_android#speech#tts#TextToSpeech#setLanguage_E@ call to the same engine. In Android versions after 4.2 this function returns the language that is currently being used for the synthesis requests sent from this client. That is the last language set by a @B_android#speech#tts#TextToSpeech#setLanguage_E@ call on this instance. If a voice is set (by @B_android#speech#tts#TextToSpeech#setVoice_E@), getLanguage will return the language of the currently set voice. Please note that the Locale object returned by this method is NOT a valid Locale object. Its language field contains a three-letter ISO 639-2/T code (where a proper Locale would use a two-letter ISO 639-1 code), and the country field contains a three-letter ISO 3166 country code (where a proper Locale would use a two-letter ISO 3166-1 code).", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public Locale getLanguage ()"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Releases the resources used by the TextToSpeech engine. It is good practice for instance to call this method in the onDestroy() method of an Activity so the TextToSpeech engine can be cleanly stopped.", "history": "Added in API level 4", "FullName": "public void shutdown ()"}, "addSpeech(java.lang.CharSequence,java.io.File)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The string of text. Example: \"south_south_east\""], ["@B_java#io#File_E@", "File: File object pointing to the sound file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a CharSequence (may be spanned with TtsSpans and a sound file. Using this, it is possible to add custom pronounciations for a string of text. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "Added in API level 21", "FullName": "public int addSpeech (CharSequence text, File file)"}, "playSilentUtterance(long,int,java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the playSilentUtterance operation."]], "Parameters": [["long", "long: The duration of the silence."], ["int", "int: @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_java#lang#String_E@", "String: An unique identifier for this request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays silence for the specified amount of time using the specified queue mode. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 21", "FullName": "public int playSilentUtterance (long durationInMs, int queueMode, String utteranceId)"}, "addEarcon(java.lang.String,java.lang.String)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#lang#String_E@", "String: The full path to the sound file (for example: \"/sdcard/mysounds/tick.wav\")"]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#addEarcon_E@. Adds a mapping between a string of text and a sound file. Use this to add custom earcons.", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public int addEarcon (String earcon, String filename)"}, "getAvailableLanguages()": {"Returns": [["@B_java#util#Set_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Query the engine about the set of available languages.", "history": "Added in API level 21", "FullName": "public Set<Locale> getAvailableLanguages ()"}, "addSpeech(java.lang.String, java.lang.String, int)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The string of text. Example: \"south_south_east\""], ["@B_java#lang#String_E@", "String: Pass the packagename of the application that contains the resource. If the resource is in your own application (this is the most common case), then put the packagename of your application here. Example: \"com.google.marvin.compass\" The packagename can be found in the AndroidManifest.xml of your application. <manifest xmlns:android=\"...\" package=\"com.google.marvin.compass\">"], ["int", "int: Example: R.raw.south_south_east"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound resource in a package. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "added in API level 4", "FullName": "public int addSpeech (String text, String packagename, int resourceId)"}, "stop()": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Interrupts the current utterance (whether played or rendered to file) and discards other utterances in the queue.", "history": "Added in API level 4", "FullName": "public int stop ()"}, "addEarcon(java.lang.String, java.io.File)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#io#File_E@", "File: File object pointing to the sound file."]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound file. Use this to add custom earcons.", "history": "added in API level 21", "FullName": "public int addEarcon (String earcon, File file)"}, "addSpeech(java.lang.CharSequence, java.io.File)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The string of text. Example: \"south_south_east\""], ["@B_java#io#File_E@", "File: File object pointing to the sound file."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a CharSequence (may be spanned with TtsSpans and a sound file. Using this, it is possible to add custom pronounciations for a string of text. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "added in API level 21", "FullName": "public int addSpeech (CharSequence text, File file)"}, "getFeatures(java.util.Locale)": {"Returns": [["@B_java#util#Set_E@", "Set instance. May return null on error."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale to query features for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, please use voices. In order to query features of the voice, call @B_android#speech#tts#TextToSpeech#getVoices_E@ to retrieve the list of available voices and @B_android#speech#tts#Voice#getFeatures_E@ to retrieve the set of features. Queries the engine for the set of features it supports for a given locale. Features can either be framework defined, e.g. @B_android#speech#tts#TextToSpeech#Engine#KEY_FEATURE_NETWORK_SYNTHESIS_E@ or engine specific. Engine specific keys must be prefixed by the name of the engine they are intended for. These keys can be used as parameters to @B_android#speech#tts#TextToSpeech#speak_E@ and @B_android#speech#tts#TextToSpeech#synthesizeToFile_E@. Features values are strings and their values must meet restrictions described in their documentation.", "history": "Added in API level 15 Deprecated in API level 21", "FullName": "public Set<String> getFeatures (Locale locale)"}, "addEarcon(java.lang.String,java.io.File)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#io#File_E@", "File: File object pointing to the sound file."]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound file. Use this to add custom earcons.", "history": "Added in API level 21", "FullName": "public int addEarcon (String earcon, File file)"}, "speak(java.lang.String,int,java.util.HashMap<java.lang.String,java.lang.String>)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the speak operation."]], "Parameters": [["@B_java#lang#String_E@", "String: The string of text to be spoken. No longer than @B_android#speech#tts#TextToSpeech#getMaxSpeechInputLength_E@ characters."], ["int", "int: The queuing strategy to use, @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_java#util#HashMap_E@", "HashMap: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_STREAM_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_VOLUME_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_PAN_E@. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#speak_E@. Speaks the string using the specified queuing strategy and speech parameters. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public int speak (String text, int queueMode, HashMap<String, String> params)"}, "areDefaultsEnforced()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the user's settings should override settings requested by the calling application. As of the Ice cream sandwich release, user settings never forcibly override the app's settings.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public boolean areDefaultsEnforced ()"}, "addSpeech(java.lang.String,java.lang.String,int)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The string of text. Example: \"south_south_east\""], ["@B_java#lang#String_E@", "String: Pass the packagename of the application that contains the resource. If the resource is in your own application (this is the most common case), then put the packagename of your application here. Example: \"com.google.marvin.compass\" The packagename can be found in the AndroidManifest.xml of your application. <manifest xmlns:android=\"...\" package=\"com.google.marvin.compass\">"], ["int", "int: Example: R.raw.south_south_east"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound resource in a package. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "Added in API level 4", "FullName": "public int addSpeech (String text, String packagename, int resourceId)"}, "addSpeech(java.lang.CharSequence,java.lang.String,int)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The string of text. Example: \"south_south_east\""], ["@B_java#lang#String_E@", "String: Pass the packagename of the application that contains the resource. If the resource is in your own application (this is the most common case), then put the packagename of your application here. Example: \"com.google.marvin.compass\" The packagename can be found in the AndroidManifest.xml of your application. <manifest xmlns:android=\"...\" package=\"com.google.marvin.compass\">"], ["int", "int: Example: R.raw.south_south_east"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a CharSequence (may be spanned with TtsSpans) of text and a sound resource in a package. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "Added in API level 21", "FullName": "public int addSpeech (CharSequence text, String packagename, int resourceId)"}, "synthesizeToFile(java.lang.CharSequence,android.os.Bundle,java.io.File,java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the synthesizeToFile operation."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text that should be synthesized. No longer than @B_android#speech#tts#TextToSpeech#getMaxSpeechInputLength_E@ characters."], ["@B_android#os#Bundle_E@", "Bundle: Parameters for the request. Can be null. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."], ["@B_java#io#File_E@", "File: File to write the generated audio data to."], ["@B_java#lang#String_E@", "String: An unique identifier for this request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Synthesizes the given text to a file using the specified parameters. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@).", "history": "Added in API level 21", "FullName": "public int synthesizeToFile (CharSequence text, Bundle params, File file, String utteranceId)"}, "synthesizeToFile(java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>,java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the synthesizeToFile operation."]], "Parameters": [["@B_java#lang#String_E@", "String: The text that should be synthesized. No longer than @B_android#speech#tts#TextToSpeech#getMaxSpeechInputLength_E@ characters."], ["@B_java#util#HashMap_E@", "HashMap: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."], ["@B_java#lang#String_E@", "String: Absolute file filename to write the generated audio data to.It should be something like \"/sdcard/myappsounds/mysound.wav\"."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#synthesizeToFile_E@. Synthesizes the given text to a file using the specified parameters. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public int synthesizeToFile (String text, HashMap<String, String> params, String filename)"}, "addSpeech(java.lang.String,java.lang.String)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The string of text. Example: \"south_south_east\""], ["@B_java#lang#String_E@", "String: The full path to the sound file (for example: \"/sdcard/mysounds/hello.wav\")"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound file. Using this, it is possible to add custom pronounciations for a string of text. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "Added in API level 4", "FullName": "public int addSpeech (String text, String filename)"}, "setOnUtteranceProgressListener(android.speech.tts.UtteranceProgressListener)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@"]], "Parameters": [["@B_android#speech#tts#UtteranceProgressListener_E@", "UtteranceProgressListener: the listener to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the listener that will be notified of various events related to the synthesis of a given utterance. See @B_android#speech#tts#UtteranceProgressListener_E@ and @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@.", "history": "Added in API level 15", "FullName": "public int setOnUtteranceProgressListener (UtteranceProgressListener listener)"}, "setEngineByPackageName(java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The package name for the synthesis engine (e.g. \"com.svox.pico\")"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This doesn't inform callers when the TTS engine has been initialized. @B_android#speech#tts#TextToSpeech#TextToSpeech_E@ can be used with the appropriate engine name. Also, there is no guarantee that the engine specified will be loaded. If it isn't installed or disabled, the user / system wide defaults will apply. Sets the TTS engine to use.", "history": "Added in API level 8 Deprecated in API level 15", "FullName": "public int setEngineByPackageName (String enginePackageName)"}, "setAudioAttributes(android.media.AudioAttributes)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_android#media#AudioAttributes_E@", "AudioAttributes: Valid AudioAttributes instance."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the audio attributes to be used when speaking text or playing back a file.", "history": "Added in API level 21", "FullName": "public int setAudioAttributes (AudioAttributes audioAttributes)"}, "isSpeaking()": {"Returns": [["boolean", "true if the TTS engine is speaking."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether the TTS engine is busy speaking. Note that a speech item is considered complete once it's audio data has been sent to the audio mixer, or written to a file. There might be a finite lag between this point, and when the audio hardware completes playback.", "history": "Added in API level 4", "FullName": "public boolean isSpeaking ()"}, "getVoice()": {"Returns": [["@B_android#speech#tts#Voice_E@", "Voice instance used by the client, or null if not set or on error."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#getVoices_E@", "@B_android#speech#tts#TextToSpeech#setVoice_E@", "@B_android#speech#tts#Voice_E@"], "Permissions": [], "Description": "Returns a Voice instance describing the voice currently being used for synthesis requests sent to the TextToSpeech engine.", "history": "Added in API level 21", "FullName": "public Voice getVoice ()"}, "speak(java.lang.CharSequence,int,android.os.Bundle,java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the speak operation."]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The string of text to be spoken. No longer than @B_android#speech#tts#TextToSpeech#getMaxSpeechInputLength_E@ characters."], ["int", "int: The queuing strategy to use, @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_android#os#Bundle_E@", "Bundle: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_STREAM_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_VOLUME_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_PAN_E@. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."], ["@B_java#lang#String_E@", "String: An unique identifier for this request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Speaks the text using the specified queuing strategy and speech parameters, the text may be spanned with TtsSpans. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 21", "FullName": "public int speak (CharSequence text, int queueMode, Bundle params, String utteranceId)"}, "getMaxSpeechInputLength()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#speak_E@", "@B_android#speech#tts#TextToSpeech#synthesizeToFile_E@"], "Permissions": [], "Description": "Limit of length of input string passed to speak and synthesizeToFile.", "history": "Added in API level 18", "FullName": "public static int getMaxSpeechInputLength ()"}, "setVoice(android.speech.tts.Voice)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_android#speech#tts#Voice_E@", "Voice: One of objects returned by @B_android#speech#tts#TextToSpeech#getVoices_E@."]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#getVoices_E@", "@B_android#speech#tts#Voice_E@"], "Permissions": [], "Description": "Sets the text-to-speech voice.", "history": "Added in API level 21", "FullName": "public int setVoice (Voice voice)"}, "addEarcon(java.lang.String,java.lang.String,int)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#lang#String_E@", "String: the package name of the application that contains the resource. This can for instance be the package name of your own application. Example: \"com.google.marvin.compass\" The package name can be found in the AndroidManifest.xml of the application containing the resource. <manifest xmlns:android=\"...\" package=\"com.google.marvin.compass\">"], ["int", "int: Example: R.raw.tick_snd"]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound resource in a package. Use this to add custom earcons.", "history": "Added in API level 4", "FullName": "public int addEarcon (String earcon, String packagename, int resourceId)"}, "getVoices()": {"Returns": [["@B_java#util#Set_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#setVoice_E@", "@B_android#speech#tts#Voice_E@"], "Permissions": [], "Description": "Query the engine about the set of available voices. Each TTS Engine can expose multiple voices for each locale, each with a different set of features.", "history": "Added in API level 21", "FullName": "public Set<Voice> getVoices ()"}, "TextToSpeech(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context this instance is running in."], ["@B_android#speech#tts#TextToSpeech#OnInitListener_E@", "TextToSpeech.OnInitListener: The @B_android#speech#tts#TextToSpeech#OnInitListener_E@ that will be called when the TextToSpeech engine has initialized. In a case of a failure the listener may be called immediately, before TextToSpeech instance is fully constructed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The constructor for the TextToSpeech class, using the default TTS engine. This will also initialize the associated TextToSpeech engine if it isn't already running.", "history": "Added in API level 4", "FullName": "public TextToSpeech (Context context, TextToSpeech.OnInitListener listener)"}, "getDefaultVoice()": {"Returns": [["@B_android#speech#tts#Voice_E@", "The default voice instance for the default language, or null if not set or on error."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Voice instance that's the default voice for the default Text-to-speech language.", "history": "Added in API level 21", "FullName": "public Voice getDefaultVoice ()"}, "playEarcon(java.lang.String,int,android.os.Bundle,java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the playEarcon operation."]], "Parameters": [["@B_java#lang#String_E@", "String: The earcon that should be played"], ["int", "int: @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_android#os#Bundle_E@", "Bundle: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_STREAM_E@, Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays the earcon using the specified queueing mode and parameters. The earcon must already have been added with @B_android#speech#tts#TextToSpeech#addEarcon_E@ or @B_android#speech#tts#TextToSpeech#addEarcon_E@. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 21", "FullName": "public int playEarcon (String earcon, int queueMode, Bundle params, String utteranceId)"}, "setPitch(float)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["float", "float: Speech pitch. 1.0 is the normal pitch, lower values lower the tone of the synthesized voice, greater values increase it."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the speech pitch for the TextToSpeech engine. This has no effect on any pre-recorded speech.", "history": "Added in API level 4", "FullName": "public int setPitch (float pitch)"}, "addEarcon(java.lang.String, java.lang.String)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#lang#String_E@", "String: The full path to the sound file (for example: \"/sdcard/mysounds/tick.wav\")"]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#addEarcon_E@. Adds a mapping between a string of text and a sound file. Use this to add custom earcons.", "history": "added in API level 4", "FullName": "public int addEarcon (String earcon, String filename)"}, "playSilentUtterance(long, int, java.lang.String)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the playSilentUtterance operation."]], "Parameters": [["long", "long: The duration of the silence."], ["int", "int: @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_java#lang#String_E@", "String: An unique identifier for this request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays silence for the specified amount of time using the specified queue mode. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "added in API level 21", "FullName": "public int playSilentUtterance (long durationInMs, int queueMode, String utteranceId)"}, "playEarcon(java.lang.String,int,java.util.HashMap<java.lang.String,java.lang.String>)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the playEarcon operation."]], "Parameters": [["@B_java#lang#String_E@", "String: The earcon that should be played"], ["int", "int: @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_java#util#HashMap_E@", "HashMap: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_STREAM_E@, @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#playEarcon_E@. Plays the earcon using the specified queueing mode and parameters. The earcon must already have been added with @B_android#speech#tts#TextToSpeech#addEarcon_E@ or @B_android#speech#tts#TextToSpeech#addEarcon_E@. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public int playEarcon (String earcon, int queueMode, HashMap<String, String> params)"}, "getEngines()": {"Returns": [["@B_java#util#List_E@", "A list of engine info objects. The list can be empty, but never null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a list of all installed TTS engines.", "history": "Added in API level 14", "FullName": "public List<TextToSpeech.EngineInfo> getEngines ()"}, "addEarcon(java.lang.String, java.lang.String, int)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the earcon. Example: \"[tick]\""], ["@B_java#lang#String_E@", "String: the package name of the application that contains the resource. This can for instance be the package name of your own application. Example: \"com.google.marvin.compass\" The package name can be found in the AndroidManifest.xml of the application containing the resource. <manifest xmlns:android=\"...\" package=\"com.google.marvin.compass\">"], ["int", "int: Example: R.raw.tick_snd"]], "Throws": [], "SeeAlso": ["@B_android#speech#tts#TextToSpeech#playEarcon_E@"], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound resource in a package. Use this to add custom earcons.", "history": "added in API level 4", "FullName": "public int addEarcon (String earcon, String packagename, int resourceId)"}, "playSilence(long,int,java.util.HashMap<java.lang.String,java.lang.String>)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@ of queuing the playSilence operation."]], "Parameters": [["long", "long: The duration of the silence."], ["int", "int: @B_android#speech#tts#TextToSpeech#QUEUE_ADD_E@ or @B_android#speech#tts#TextToSpeech#QUEUE_FLUSH_E@."], ["@B_java#util#HashMap_E@", "HashMap: Parameters for the request. Can be null. Supported parameter names: @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@. Engine specific parameters may be passed in but the parameter keys must be prefixed by the name of the engine they are intended for. For example the keys \"com.svox.pico_foo\" and \"com.svox.pico:bar\" will be passed to the engine named \"com.svox.pico\" if it is being used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "As of API level 21, replaced by @B_android#speech#tts#TextToSpeech#playSilentUtterance_E@. Plays silence for the specified amount of time using the specified queue mode. This method is asynchronous, i.e. the method just adds the request to the queue of TTS requests and then returns. The synthesis might not have finished (or even started!) at the time when this method returns. In order to reliably detect errors during synthesis, we recommend setting an utterance progress listener (see @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@) and using the @B_android#speech#tts#TextToSpeech#Engine#KEY_PARAM_UTTERANCE_ID_E@ parameter.", "history": "Added in API level 4 Deprecated in API level 21", "FullName": "public int playSilence (long durationInMs, int queueMode, HashMap<String, String> params)"}, "setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech.OnUtteranceCompletedListener)": {"Returns": [["int", "@B_android#speech#tts#TextToSpeech#ERROR_E@ or @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_android#speech#tts#TextToSpeech#OnUtteranceCompletedListener_E@", "TextToSpeech.OnUtteranceCompletedListener: The listener to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#speech#tts#TextToSpeech#setOnUtteranceProgressListener_E@ instead. Sets the listener that will be notified when synthesis of an utterance completes.", "history": "Added in API level 4 Deprecated in API level 15", "FullName": "public int setOnUtteranceCompletedListener (TextToSpeech.OnUtteranceCompletedListener listener)"}, "addSpeech(java.lang.String, java.lang.String)": {"Returns": [["int", "Code indicating success or failure. See @B_android#speech#tts#TextToSpeech#ERROR_E@ and @B_android#speech#tts#TextToSpeech#SUCCESS_E@."]], "Parameters": [["@B_java#lang#String_E@", "String: The string of text. Example: \"south_south_east\""], ["@B_java#lang#String_E@", "String: The full path to the sound file (for example: \"/sdcard/mysounds/hello.wav\")"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a mapping between a string of text and a sound file. Using this, it is possible to add custom pronounciations for a string of text. After a call to this method, subsequent calls to @B_android#speech#tts#TextToSpeech#speak_E@ will play the specified sound resource if it is available, or synthesize the text it is missing.", "history": "added in API level 4", "FullName": "public int addSpeech (String text, String filename)"}, "setLanguage(java.util.Locale)": {"Returns": [["int", "Code indicating the support status for the locale. See @B_android#speech#tts#TextToSpeech#LANG_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_COUNTRY_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_COUNTRY_VAR_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_MISSING_DATA_E@ and @B_android#speech#tts#TextToSpeech#LANG_NOT_SUPPORTED_E@."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The locale describing the language to be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the text-to-speech language. The TTS engine will try to use the closest match to the specified language as represented by the Locale, but there is no guarantee that the exact same Locale will be used. Use @B_android#speech#tts#TextToSpeech#isLanguageAvailable_E@ to check the level of support before choosing the language to use for the next utterances. This method sets the current voice to the default one for the given Locale; @B_android#speech#tts#TextToSpeech#getVoice_E@ can be used to retrieve it.", "history": "Added in API level 4", "FullName": "public int setLanguage (Locale loc)"}, "isLanguageAvailable(java.util.Locale)": {"Returns": [["int", "Code indicating the support status for the locale. See @B_android#speech#tts#TextToSpeech#LANG_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_COUNTRY_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_COUNTRY_VAR_AVAILABLE_E@, @B_android#speech#tts#TextToSpeech#LANG_MISSING_DATA_E@ and @B_android#speech#tts#TextToSpeech#LANG_NOT_SUPPORTED_E@."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: The Locale describing the language to be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if the specified language as represented by the Locale is available and supported.", "history": "Added in API level 4", "FullName": "public int isLanguageAvailable (Locale loc)"}, "TextToSpeech(android.content.Context,android.speech.tts.TextToSpeech.OnInitListener,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context this instance is running in."], ["@B_android#speech#tts#TextToSpeech#OnInitListener_E@", "TextToSpeech.OnInitListener: The @B_android#speech#tts#TextToSpeech#OnInitListener_E@ that will be called when the TextToSpeech engine has initialized. In a case of a failure the listener may be called immediately, before TextToSpeech instance is fully constructed."], ["@B_java#lang#String_E@", "String: Package name of the TTS engine to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The constructor for the TextToSpeech class, using the given TTS engine. This will also initialize the associated TextToSpeech engine if it isn't already running.", "history": "Added in API level 14", "FullName": "public TextToSpeech (Context context, TextToSpeech.OnInitListener listener, String engine)"}}, "Inheritance": [], "ClassName": "android.speech.tts.TextToSpeech", "ClassDesc": "Synthesizes speech from text for immediate playback or to create a sound file. A TextToSpeech instance can only be used to synthesize text once it has completed its initialization. Implement the @B_android#speech#tts#TextToSpeech#OnInitListener_E@ to be notified of the completion of the initialization. When you are done using the TextToSpeech instance, call the @B_android#speech#tts#TextToSpeech#shutdown_E@ method to release the native resources used by the TextToSpeech engine."}