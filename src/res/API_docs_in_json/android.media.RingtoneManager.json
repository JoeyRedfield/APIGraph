{"Functions": {"setType(int)": {"Returns": [], "Parameters": [["int", "int: The type(s), one or more of @B_android#media#RingtoneManager#TYPE_RINGTONE_E@, @B_android#media#RingtoneManager#TYPE_NOTIFICATION_E@, @B_android#media#RingtoneManager#TYPE_ALARM_E@, @B_android#media#RingtoneManager#TYPE_ALL_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager_E@"], "Permissions": [], "Description": "Sets which type(s) of ringtones will be listed by this.", "history": "Added in API level 1", "FullName": "public void setType (int type)"}, "inferStreamType()": {"Returns": [["int", "The stream type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Infers the volume stream type based on what type of ringtones this manager is returning.", "history": "Added in API level 3", "FullName": "public int inferStreamType ()"}, "setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: A context used for querying."], ["int", "int: The type whose default sound should be set. One of @B_android#media#RingtoneManager#TYPE_RINGTONE_E@, @B_android#media#RingtoneManager#TYPE_NOTIFICATION_E@, or @B_android#media#RingtoneManager#TYPE_ALARM_E@."], ["@B_android#net#Uri_E@", "Uri: A @B_android#net#Uri_E@ pointing to the default sound to set."]], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager#getActualDefaultRingtoneUri_E@"], "Permissions": [], "Description": "Sets the @B_android#net#Uri_E@ of the default sound for a given sound type.", "history": "Added in API level 1", "FullName": "public static void setActualDefaultRingtoneUri (Context context, int type, Uri ringtoneUri)"}, "getDefaultUri(int)": {"Returns": [["@B_android#net#Uri_E@", "The @B_android#net#Uri_E@ of the default ringtone for the given type."]], "Parameters": [["int", "int: The ringtone type whose default should be returned."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#net#Uri_E@ for the default ringtone of a particular type. Rather than returning the actual ringtone's sound @B_android#net#Uri_E@, this will return the symbolic @B_android#net#Uri_E@ which will resolved to the actual sound when played.", "history": "Added in API level 1", "FullName": "public static Uri getDefaultUri (int type)"}, "getRingtonePosition(android.net.Uri)": {"Returns": [["int", "The position of the @B_android#net#Uri_E@, or -1 if it cannot be found."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The @B_android#net#Uri_E@ to retreive the position of."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the position of a @B_android#net#Uri_E@ within this @B_android#media#RingtoneManager_E@.", "history": "Added in API level 1", "FullName": "public int getRingtonePosition (Uri ringtoneUri)"}, "getCursor()": {"Returns": [["@B_android#database#Cursor_E@", "A @B_android#database#Cursor_E@ of all the ringtones available."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager_E@"], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "Returns a @B_android#database#Cursor_E@ of all the ringtones available. The returned cursor will be the same cursor returned each time this method is called, so do not @B_android#database#Cursor#close_E@ the cursor. The cursor can be @B_android#database#Cursor#deactivate_E@ safely. If @B_android#media#RingtoneManager#RingtoneManager_E@ was not used, the caller should manage the returned cursor through its activity's life cycle to prevent leaking the cursor. Note that the list of ringtones available will differ depending on whether the caller has the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ permission.", "history": "Added in API level 1", "FullName": "public Cursor getCursor ()"}, "getActualDefaultRingtoneUri(android.content.Context,int)": {"Returns": [["@B_android#net#Uri_E@", "A @B_android#net#Uri_E@ pointing to the default sound for the sound type."]], "Parameters": [["@B_android#content#Context_E@", "Context: A context used for querying."], ["int", "int: The type whose default sound should be returned. One of @B_android#media#RingtoneManager#TYPE_RINGTONE_E@, @B_android#media#RingtoneManager#TYPE_NOTIFICATION_E@, or @B_android#media#RingtoneManager#TYPE_ALARM_E@."]], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager#setActualDefaultRingtoneUri_E@"], "Permissions": [], "Description": "Gets the current default sound's @B_android#net#Uri_E@. This will give the actual sound @B_android#net#Uri_E@, instead of using this, most clients can use @B_android#provider#Settings#System#DEFAULT_RINGTONE_URI_E@.", "history": "Added in API level 1", "FullName": "public static Uri getActualDefaultRingtoneUri (Context context, int type)"}, "getValidRingtoneUri(android.content.Context)": {"Returns": [["@B_android#net#Uri_E@", "A ringtone URI, or null if one cannot be found."]], "Parameters": [["@B_android#content#Context_E@", "Context: The context to use for querying."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@"], "Description": "Returns a valid ringtone URI. No guarantees on which it returns. If it cannot find one, returns null. If it can only find one on external storage and the caller doesn't have the @B_android#Manifest#permission#READ_EXTERNAL_STORAGE_E@ permission, returns null.", "history": "Added in API level 1", "FullName": "public static Uri getValidRingtoneUri (Context context)"}, "setIncludeDrm(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether to include DRM ringtones. Obsolete - no longer has any effect"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "DRM ringtones are no longer supported Sets whether to include DRM ringtones.", "history": "Added in API level 1 Deprecated in API level 19", "FullName": "public void setIncludeDrm (boolean includeDrm)"}, "stopPreviousRingtone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops playing the last @B_android#media#Ringtone_E@ retrieved from this.", "history": "Added in API level 1", "FullName": "public void stopPreviousRingtone ()"}, "isDefault(android.net.Uri)": {"Returns": [["boolean", "Whether the @B_android#net#Uri_E@ is a default."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The ringtone @B_android#net#Uri_E@ to be checked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the given @B_android#net#Uri_E@ is one of the default ringtones.", "history": "Added in API level 1", "FullName": "public static boolean isDefault (Uri ringtoneUri)"}, "getStopPreviousRingtone()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager#setStopPreviousRingtone_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean getStopPreviousRingtone ()"}, "getRingtoneUri(int)": {"Returns": [["@B_android#net#Uri_E@", "A @B_android#net#Uri_E@ pointing to the ringtone."]], "Parameters": [["int", "int: The position (in the @B_android#database#Cursor_E@) of the ringtone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a @B_android#net#Uri_E@ for the ringtone at the given position in the @B_android#database#Cursor_E@.", "history": "Added in API level 1", "FullName": "public Uri getRingtoneUri (int position)"}, "hasHapticChannels(int)": {"Returns": [["boolean", "true if the ringtone contains haptic channels."]], "Parameters": [["int", "int: The position (in the @B_android#database#Cursor_E@) of the ringtone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the @B_android#media#Ringtone_E@ at the given position in the @B_android#database#Cursor_E@ contains haptic channels.", "history": "Added in API level 29", "FullName": "public boolean hasHapticChannels (int position)"}, "openDefaultRingtoneUri(android.content.Context,android.net.Uri)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "a new AssetFileDescriptor pointing to the file. You own this descriptor and are responsible for closing it when done. This value may be null."]], "Parameters": [["@B_android#content#Context_E@", "Context: the Context to use when resolving the Uri. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: The desired default URI to open. This value must never be null."]], "Throws": [["@B_java#io#FileNotFoundException_E@", "if the provided URI could not be opened."]], "SeeAlso": ["@B_android#media#RingtoneManager#getDefaultUri_E@"], "Permissions": [], "Description": "Opens a raw file descriptor to read the data under the given default URI.", "history": "Added in API level 29", "FullName": "public static AssetFileDescriptor openDefaultRingtoneUri (Context context, Uri uri)"}, "RingtoneManager(android.app.Activity)": {"Returns": [], "Parameters": [["@B_android#app#Activity_E@", "Activity: The activity used to get a managed cursor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a RingtoneManager. This constructor is recommended as its constructed instance manages cursor(s).", "history": "Added in API level 1", "FullName": "public RingtoneManager (Activity activity)"}, "RingtoneManager(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context to used to get a cursor."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a RingtoneManager. The instance constructed by this constructor will not manage the cursor(s), so the client should handle this itself.", "history": "Added in API level 1", "FullName": "public RingtoneManager (Context context)"}, "setStopPreviousRingtone(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If true, the previously retrieved @B_android#media#Ringtone_E@ will be stopped."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Whether retrieving another @B_android#media#Ringtone_E@ will stop playing the previously retrieved @B_android#media#Ringtone_E@. If this is false, make sure to @B_android#media#Ringtone#stop_E@ any previous ringtones to free resources.", "history": "Added in API level 1", "FullName": "public void setStopPreviousRingtone (boolean stopPreviousRingtone)"}, "getDefaultType(android.net.Uri)": {"Returns": [["int", "The type of the defaultRingtoneUri, or -1."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The default @B_android#net#Uri_E@. For example, @B_android#provider#Settings#System#DEFAULT_RINGTONE_URI_E@, @B_android#provider#Settings#System#DEFAULT_NOTIFICATION_URI_E@, or @B_android#provider#Settings#System#DEFAULT_ALARM_ALERT_URI_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of a default @B_android#net#Uri_E@.", "history": "Added in API level 1", "FullName": "public static int getDefaultType (Uri defaultRingtoneUri)"}, "getRingtone(int)": {"Returns": [["@B_android#media#Ringtone_E@", "A @B_android#media#Ringtone_E@ pointing to the ringtone."]], "Parameters": [["int", "int: The position (in the @B_android#database#Cursor_E@) of the ringtone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a @B_android#media#Ringtone_E@ for the ringtone at the given position in the @B_android#database#Cursor_E@.", "history": "Added in API level 1", "FullName": "public Ringtone getRingtone (int position)"}, "getRingtone(android.content.Context,android.net.Uri)": {"Returns": [["@B_android#media#Ringtone_E@", "A @B_android#media#Ringtone_E@ for the given URI, or null."]], "Parameters": [["@B_android#content#Context_E@", "Context: A context used to query."], ["@B_android#net#Uri_E@", "Uri: The @B_android#net#Uri_E@ of a sound or ringtone."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#media#Ringtone_E@ for a given sound URI. If the given URI cannot be opened for any reason, this method will attempt to fallback on another sound. If it cannot find any, it will return null.", "history": "Added in API level 1", "FullName": "public static Ringtone getRingtone (Context context, Uri ringtoneUri)"}, "getIncludeDrm()": {"Returns": [["boolean", "Whether DRM ringtones will be included."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#media#RingtoneManager#setIncludeDrm_E@"], "Permissions": [], "Description": "DRM ringtones are no longer supported Returns whether DRM ringtones will be included.", "history": "Added in API level 1 Deprecated in API level 19", "FullName": "public boolean getIncludeDrm ()"}, "hasHapticChannels(android.net.Uri)": {"Returns": [["boolean", "true if the ringtone contains haptic channels."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The @B_android#net#Uri_E@ of a sound or ringtone. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns if the @B_android#media#Ringtone_E@ from a given sound URI contains haptic channels or not.", "history": "Added in API level 29", "FullName": "public static boolean hasHapticChannels (Uri ringtoneUri)"}}, "Inheritance": [], "ClassName": "android.media.RingtoneManager", "ClassDesc": "RingtoneManager provides access to ringtones, notification, and other types of sounds. It manages querying the different media providers and combines the results into a single cursor. It also provides a @B_android#media#Ringtone_E@ for each ringtone. We generically call these sounds ringtones, however the @B_android#media#RingtoneManager#TYPE_RINGTONE_E@ refers to the type of sounds that are suitable for the phone ringer. To show a ringtone picker to the user, use the @B_android#media#RingtoneManager#ACTION_RINGTONE_PICKER_E@ intent to launch the picker as a subactivity."}