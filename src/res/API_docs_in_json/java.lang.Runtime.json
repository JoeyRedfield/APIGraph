{"Functions": {"freeMemory()": {"Returns": [["long", "an approximation to the total amount of memory currently available for future allocated objects, measured in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of free memory in the Java Virtual Machine. Calling the gc method may result in increasing the value returned by freeMemory.", "history": "Added in API level 1", "FullName": "public long freeMemory ()"}, "getLocalizedOutputStream(java.io.OutputStream)": {"Returns": [["@B_java#io#OutputStream_E@", "a localized output stream"]], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: OutputStream to localize"]], "Throws": [], "SeeAlso": ["@B_java#io#OutputStream_E@", "@B_java#io#BufferedWriter#BufferedWriter_E@", "@B_java#io#OutputStreamWriter#OutputStreamWriter_E@", "@B_java#io#PrintWriter#PrintWriter_E@"], "Permissions": [], "Description": "As of JDK 1.1, the preferred way to translate a Unicode character stream into a byte stream in the local encoding is via the OutputStreamWriter, BufferedWriter, and PrintWriter classes. Creates a localized version of an output stream. This method takes an OutputStream and returns an OutputStream equivalent to the argument in all respects except that it is localized: as Unicode characters are written to the stream, they are automatically converted to the local character set. If the argument is already a localized stream, it may be returned as the result.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public OutputStream getLocalizedOutputStream (OutputStream out)"}, "addShutdownHook(java.lang.Thread)": {"Returns": [], "Parameters": [["@B_java#lang#Thread_E@", "Thread: An initialized but unstarted Thread object"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the specified hook has already been registered, or if it can be determined that the hook is already running or has already been run"], ["@B_java#lang#IllegalStateException_E@", "If the virtual machine is already in the process of shutting down"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and it denies RuntimePermission(\"shutdownHooks\")"]], "SeeAlso": ["@B_java#lang#Runtime#removeShutdownHook_E@", "@B_java#lang#Runtime#halt_E@", "@B_java#lang#Runtime#exit_E@"], "Permissions": [], "Description": "Registers a new virtual-machine shutdown hook. The Java virtual machine The program @B_java#lang#System#exit_E@) method is invoked, or The virtual machine is A Once the shutdown sequence has begun it can be stopped only by invoking the Once the shutdown sequence has begun it is impossible to register a new shutdown hook or de-register a previously-registered hook. Attempting either of these operations will cause an Shutdown hooks run at a delicate time in the life cycle of a virtual machine and should therefore be coded defensively. They should, in particular, be written to be thread-safe and to avoid deadlocks insofar as possible. They should also not rely blindly upon services that may have registered their own shutdown hooks and therefore may themselves in the process of shutting down. Attempts to use other thread-based services such as the AWT event-dispatch thread, for example, may lead to deadlocks. Shutdown hooks should also finish their work quickly. When a program invokes Uncaught exceptions are handled in shutdown hooks just as in any other thread, by invoking the In rare circumstances the virtual machine may", "history": "Added in API level 1", "FullName": "public void addShutdownHook (Thread hook)"}, "getLocalizedInputStream(java.io.InputStream)": {"Returns": [["@B_java#io#InputStream_E@", "a localized input stream"]], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: InputStream to localize"]], "Throws": [], "SeeAlso": ["@B_java#io#InputStream_E@", "@B_java#io#BufferedReader#BufferedReader_E@", "@B_java#io#InputStreamReader#InputStreamReader_E@"], "Permissions": [], "Description": "As of JDK 1.1, the preferred way to translate a byte stream in the local encoding into a character stream in Unicode is via the InputStreamReader and BufferedReader classes. Creates a localized version of an input stream. This method takes an InputStream and returns an InputStream equivalent to the argument in all respects except that it is localized: as characters in the local character set are read from the stream, they are automatically converted from the local character set to Unicode. If the argument is already a localized stream, it may be returned as the result.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public InputStream getLocalizedInputStream (InputStream in)"}, "exec(java.lang.String)": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: a specified system command."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If command is null"], ["@B_java#lang#IllegalArgumentException_E@", "If command is empty"]], "SeeAlso": ["@B_java#lang#Runtime#exec_E@", "@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified string command in a separate process. This is a convenience method. An invocation of the form", "history": "Added in API level 1", "FullName": "public Process exec (String command)"}, "exec(java.lang.String[],java.lang.String[],java.io.File)": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: array containing the command to call and its arguments."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."], ["@B_java#io#File_E@", "File: the working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If cmdarray is null, or one of the elements of cmdarray is null, or one of the elements of envp is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If cmdarray is an empty array (has length 0)"]], "SeeAlso": ["@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified command and arguments in a separate process with the specified environment and working directory. Given an array of strings cmdarray, representing the tokens of a command line, and an array of strings envp, representing \"environment\" variable settings, this method creates a new process in which to execute the specified command. This method checks that cmdarray is a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. If A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the specified environment. @B_java#lang#ProcessBuilder#start_E@ is now the preferred way to start a process with a modified environment. The working directory of the new subprocess is specified by If a security manager exists, its @B_java#lang#SecurityManager#checkExec_E@ method is invoked with the first component of the array cmdarray as its argument. This may result in a @B_java#lang#SecurityException_E@ being thrown. Starting an operating system process is highly system-dependent. Among the many things that can go wrong are: The operating system program file was not found. Access to the program file was denied. The working directory does not exist. In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of @B_java#io#IOException_E@.", "history": "Added in API level 1", "FullName": "public Process exec (String[] cmdarray, String[] envp, File dir)"}, "removeShutdownHook(java.lang.Thread)": {"Returns": [["boolean", "true if the specified hook had previously been registered and was successfully de-registered, false otherwise."]], "Parameters": [["@B_java#lang#Thread_E@", "Thread: the hook to remove"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the virtual machine is already in the process of shutting down"], ["@B_java#lang#SecurityException_E@", "If a security manager is present and it denies RuntimePermission(\"shutdownHooks\")"]], "SeeAlso": ["@B_java#lang#Runtime#addShutdownHook_E@", "@B_java#lang#Runtime#exit_E@"], "Permissions": [], "Description": "De-registers a previously-registered virtual-machine shutdown hook.", "history": "Added in API level 1", "FullName": "public boolean removeShutdownHook (Thread hook)"}, "load(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the file to load."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library"], ["@B_java#lang#UnsatisfiedLinkError_E@", "if either the filename is not an absolute path name, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system."], ["@B_java#lang#NullPointerException_E@", "if filename is null"]], "SeeAlso": ["@B_java#lang#Runtime#getRuntime_E@", "@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkLink_E@"], "Permissions": [], "Description": "Loads the native library specified by the filename argument. The filename argument must be an absolute path name. (for example Runtime.getRuntime().load(\"/home/avh/lib/libX11.so\");). If the filename argument, when stripped of any platform-specific library prefix, path, and file extension, indicates a library whose name is, for example, L, and a native library called L is statically linked with the VM, then the JNI_OnLoad_L function exported by the library is invoked rather than attempting to load a dynamic library. A filename matching the argument does not have to exist in the file system. See the JNI Specification for more details. Otherwise, the filename argument is mapped to a native library image in an implementation-dependent manner. First, if there is a security manager, its checkLink method is called with the filename as its argument. This may result in a security exception. This is similar to the method @B_java#lang#Runtime#loadLibrary_E@, but it accepts a general file name as an argument rather than just a library name, allowing any file of native code to be loaded. The method @B_java#lang#System#load_E@ is the conventional and convenient means of invoking this method.", "history": "Added in API level 1", "FullName": "public void load (String filename)"}, "exit(int)": {"Returns": [], "Parameters": [["int", "int: Termination status. By convention, a nonzero status code indicates abnormal termination."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and its SecurityManager#checkExit method does not permit exiting with the specified status"]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkExit_E@", "@B_java#lang#Runtime#addShutdownHook_E@", "@B_java#lang#Runtime#removeShutdownHook_E@", "@B_java#lang#Runtime#runFinalizersOnExit_E@", "@B_java#lang#Runtime#halt_E@"], "Permissions": [], "Description": "Terminates the currently running Java virtual machine by initiating its shutdown sequence. This method never returns normally. The argument serves as a status code; by convention, a nonzero status code indicates abnormal termination. The virtual machine's shutdown sequence consists of two phases. In the first phase all registered @B_java#lang#Runtime#addShutdownHook_E@, if any, are started in some unspecified order and allowed to run concurrently until they finish. In the second phase all uninvoked finalizers are run if @B_java#lang#Runtime#runFinalizersOnExit_E@ has been enabled. Once this is done the virtual machine @B_java#lang#Runtime#halt_E@. If this method is invoked after the virtual machine has begun its shutdown sequence then if shutdown hooks are being run this method will block indefinitely. If shutdown hooks have already been run and on-exit finalization has been enabled then this method halts the virtual machine with the given status code if the status is nonzero; otherwise, it blocks indefinitely. The", "history": "Added in API level 1", "FullName": "public void exit (int status)"}, "runFinalizersOnExit(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable finalization on exit, false to disable"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkExit method doesn't allow the exit."]], "SeeAlso": ["@B_java#lang#Runtime#exit_E@", "@B_java#lang#Runtime#gc_E@", "@B_java#lang#SecurityManager#checkExit_E@"], "Permissions": [], "Description": "This method is inherently unsafe. It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock. Enable or disable finalization on exit; doing so specifies that the finalizers of all objects that have finalizers that have not yet been automatically invoked are to be run before the Java runtime exits. By default, finalization on exit is disabled. If there is a security manager, its checkExit method is first called with 0 as its argument to ensure the exit is allowed. This could result in a SecurityException.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public static void runFinalizersOnExit (boolean value)"}, "traceMethodCalls(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable instruction tracing; false to disable this feature."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables/Disables tracing of method calls. If the boolean argument is true, this method suggests that the Java virtual machine emit debugging information for each method in the virtual machine as it is called. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. Calling this method with argument false suggests that the virtual machine cease emitting per-call debugging information. Calling this method on Android Lollipop or later (API level >= 21) with true argument will cause it to throw an UnsupportedOperationException.", "history": "Added in API level 1", "FullName": "public void traceMethodCalls (boolean on)"}, "exec(java.lang.String[],java.lang.String[])": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: array containing the command to call and its arguments."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If cmdarray is null, or one of the elements of cmdarray is null, or one of the elements of envp is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If cmdarray is an empty array (has length 0)"]], "SeeAlso": ["@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified command and arguments in a separate process with the specified environment. This is a convenience method. An invocation of the form", "history": "Added in API level 1", "FullName": "public Process exec (String[] cmdarray, String[] envp)"}, "traceInstructions(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to enable instruction tracing; false to disable this feature."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables/Disables tracing of instructions. If the boolean argument is true, this method suggests that the Java virtual machine emit debugging information for each instruction in the virtual machine as it is executed. The format of this information, and the file or other output stream to which it is emitted, depends on the host environment. The virtual machine may ignore this request if it does not support this feature. The destination of the trace output is system dependent. If the boolean argument is false, this method causes the virtual machine to stop performing the detailed instruction trace it is performing.", "history": "Added in API level 1", "FullName": "public void traceInstructions (boolean on)"}, "loadLibrary(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the library."]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its checkLink method doesn't allow loading of the specified dynamic library"], ["@B_java#lang#UnsatisfiedLinkError_E@", "if either the libname argument contains a file path, the native library is not statically linked with the VM, or the library cannot be mapped to a native library image by the host system."], ["@B_java#lang#NullPointerException_E@", "if libname is null"]], "SeeAlso": ["@B_java#lang#SecurityException_E@", "@B_java#lang#SecurityManager#checkLink_E@"], "Permissions": [], "Description": "Loads the native library specified by the libname argument. The libname argument must not contain any platform specific prefix, file extension or path. If a native library called libname is statically linked with the VM, then the JNI_OnLoad_libname function exported by the library is invoked. See the JNI Specification for more details. Otherwise, the libname argument is loaded from a system library location and mapped to a native library image in an implementation- dependent manner. First, if there is a security manager, its checkLink method is called with the libname as its argument. This may result in a security exception. The method @B_java#lang#System#loadLibrary_E@ is the conventional and convenient means of invoking this method. If native methods are to be used in the implementation of a class, a standard strategy is to put the native code in a library file (call it LibFile) and then to put a static initializer: If this method is called more than once with the same library name, the second and subsequent calls are ignored.", "history": "Added in API level 1", "FullName": "public void loadLibrary (String libname)"}, "exec(java.lang.String[], java.lang.String[])": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: array containing the command to call and its arguments."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If cmdarray is null, or one of the elements of cmdarray is null, or one of the elements of envp is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If cmdarray is an empty array (has length 0)"]], "SeeAlso": ["@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified command and arguments in a separate process with the specified environment. This is a convenience method. An invocation of the form", "history": "added in API level 1", "FullName": "public Process exec (String[] cmdarray, String[] envp)"}, "exec(java.lang.String,java.lang.String[])": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: a specified system command."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If command is null, or one of the elements of envp is null"], ["@B_java#lang#IllegalArgumentException_E@", "If command is empty"]], "SeeAlso": ["@B_java#lang#Runtime#exec_E@", "@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified string command in a separate process with the specified environment. This is a convenience method. An invocation of the form", "history": "Added in API level 1", "FullName": "public Process exec (String command, String[] envp)"}, "gc()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Runs the garbage collector. Calling this method suggests that the Java virtual machine expend effort toward recycling unused objects in order to make the memory they currently occupy available for quick reuse. When control returns from the method call, the virtual machine has made its best effort to recycle all discarded objects. The name gc stands for \"garbage collector\". The virtual machine performs this recycling process automatically as needed, in a separate thread, even if the gc method is not invoked explicitly. The method @B_java#lang#System#gc_E@ is the conventional and convenient means of invoking this method.", "history": "Added in API level 1", "FullName": "public void gc ()"}, "runFinalization()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#finalize_E@"], "Permissions": [], "Description": "Runs the finalization methods of any objects pending finalization. Calling this method suggests that the Java virtual machine expend effort toward running the finalize methods of objects that have been found to be discarded but whose finalize methods have not yet been run. When control returns from the method call, the virtual machine has made a best effort to complete all outstanding finalizations. The virtual machine performs the finalization process automatically as needed, in a separate thread, if the runFinalization method is not invoked explicitly. The method @B_java#lang#System#runFinalization_E@ is the conventional and convenient means of invoking this method.", "history": "Added in API level 1", "FullName": "public void runFinalization ()"}, "exec(java.lang.String, java.lang.String[])": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: a specified system command."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If command is null, or one of the elements of envp is null"], ["@B_java#lang#IllegalArgumentException_E@", "If command is empty"]], "SeeAlso": ["@B_java#lang#Runtime#exec_E@", "@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified string command in a separate process with the specified environment. This is a convenience method. An invocation of the form", "history": "added in API level 1", "FullName": "public Process exec (String command, String[] envp)"}, "maxMemory()": {"Returns": [["long", "the maximum amount of memory that the virtual machine will attempt to use, measured in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the maximum amount of memory that the Java virtual machine will attempt to use. If there is no inherent limit then the value @B_java#lang#Long#MAX_VALUE_E@ will be returned.", "history": "Added in API level 1", "FullName": "public long maxMemory ()"}, "availableProcessors()": {"Returns": [["int", "the maximum number of processors available to the virtual machine; never smaller than one"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of processors available to the Java virtual machine. This value may change during a particular invocation of the virtual machine. Applications that are sensitive to the number of available processors should therefore occasionally poll this property and adjust their resource usage appropriately.", "history": "Added in API level 1", "FullName": "public int availableProcessors ()"}, "exec(java.lang.String[])": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: array containing the command to call and its arguments."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If cmdarray is null, or one of the elements of cmdarray is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If cmdarray is an empty array (has length 0)"]], "SeeAlso": ["@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified command and arguments in a separate process. This is a convenience method. An invocation of the form", "history": "Added in API level 1", "FullName": "public Process exec (String[] cmdarray)"}, "exec(java.lang.String,java.lang.String[],java.io.File)": {"Returns": [["@B_java#lang#Process_E@", "A new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [["@B_java#lang#String_E@", "String: a specified system command."], ["@B_java#lang#String_E@", "String: array of strings, each element of which has environment variable settings in the format name=value, or null if the subprocess should inherit the environment of the current process."], ["@B_java#io#File_E@", "File: the working directory of the subprocess, or null if the subprocess should inherit the working directory of the current process."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager exists and its @B_java#lang#SecurityManager#checkExec_E@ method doesn't allow creation of the subprocess"], ["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#NullPointerException_E@", "If command is null, or one of the elements of envp is null"], ["@B_java#lang#IllegalArgumentException_E@", "If command is empty"]], "SeeAlso": ["@B_java#lang#ProcessBuilder_E@"], "Permissions": [], "Description": "Executes the specified string command in a separate process with the specified environment and working directory. This is a convenience method. An invocation of the form cmdarray is an array of all the tokens in command. More precisely, the command string is broken into tokens using a @B_java#util#StringTokenizer_E@ created by the call new StringTokenizer(command) with no further modification of the character categories. The tokens produced by the tokenizer are then placed in the new string array cmdarray, in the same order.", "history": "Added in API level 1", "FullName": "public Process exec (String command, String[] envp, File dir)"}, "halt(int)": {"Returns": [], "Parameters": [["int", "int: Termination status. By convention, a nonzero status code indicates abnormal termination. If the Runtime#exit (equivalently, System#exit(int)) method has already been invoked then this status code will override the status code passed to that method."]], "Throws": [["@B_java#lang#SecurityException_E@", "If a security manager is present and its SecurityManager#checkExit method does not permit an exit with the specified status"]], "SeeAlso": ["@B_java#lang#Runtime#exit_E@", "@B_java#lang#Runtime#addShutdownHook_E@", "@B_java#lang#Runtime#removeShutdownHook_E@"], "Permissions": [], "Description": "Forcibly terminates the currently running Java virtual machine. This method never returns normally. This method should be used with extreme caution. Unlike the", "history": "Added in API level 1", "FullName": "public void halt (int status)"}, "totalMemory()": {"Returns": [["long", "the total amount of memory currently available for current and future objects, measured in bytes."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total amount of memory in the Java virtual machine. The value returned by this method may vary over time, depending on the host environment. Note that the amount of memory required to hold an object of any given type may be implementation-dependent.", "history": "Added in API level 1", "FullName": "public long totalMemory ()"}, "getRuntime()": {"Returns": [["@B_java#lang#Runtime_E@", "the Runtime object associated with the current Java application."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the runtime object associated with the current Java application. Most of the methods of class Runtime are instance methods and must be invoked with respect to the current runtime object.", "history": "Added in API level 1", "FullName": "public static Runtime getRuntime ()"}}, "Inheritance": [], "ClassName": "java.lang.Runtime", "ClassDesc": "Every Java application has a single instance of class Runtime that allows the application to interface with the environment in which the application is running. The current runtime can be obtained from the getRuntime method. An application cannot create its own instance of this class."}