{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "loadIcon(android.content.pm.PackageManager)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Returns a Drawable containing the resolution's icon. If the item does not have an icon, the default activity icon is returned."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the icon can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current graphical icon associated with this resolution. This will call back on the given PackageManager to load the icon from the application.", "history": "Added in API level 1", "FullName": "public Drawable loadIcon (PackageManager pm)"}, "ResolveInfo(android.content.pm.ResolveInfo)": {"Returns": [], "Parameters": [["@B_android#content#pm#ResolveInfo_E@", "ResolveInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 17", "FullName": "public ResolveInfo (ResolveInfo orig)"}, "dump(android.util.Printer,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void dump (Printer pw, String prefix)"}, "dump(android.util.Printer, java.lang.String)": {"Returns": [], "Parameters": [["@B_android#util#Printer_E@", "Printer no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void dump (Printer pw, String prefix)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel dest, int parcelableFlags)"}, "loadLabel(android.content.pm.PackageManager)": {"Returns": [["@B_java#lang#CharSequence_E@", "Returns a CharSequence containing the resolutions's label. If the item does not have a label, its name is returned."]], "Parameters": [["@B_android#content#pm#PackageManager_E@", "PackageManager: A PackageManager from which the label can be loaded; usually the PackageManager from which you originally retrieved this item."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the current textual label associated with this resolution. This will call back on the given PackageManager to load the label from the application.", "history": "Added in API level 1", "FullName": "public CharSequence loadLabel (PackageManager pm)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "getIconResource()": {"Returns": [["int", "The icon associated with this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the icon resource identifier to use for this match. If the match defines an icon, that is used; else if the activity defines an icon, that is used; else, the application icon is used.", "history": "Added in API level 1", "FullName": "public final int getIconResource ()"}, "ResolveInfo()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public ResolveInfo ()"}}, "Inheritance": [], "ClassName": "android.content.pm.ResolveInfo", "ClassDesc": "Information that is returned from resolving an intent against an IntentFilter. This partially corresponds to information collected from the AndroidManifest.xml's <intent> tags."}