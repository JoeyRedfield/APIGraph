{"Functions": {"getHopTarget(int)": {"Returns": [["", "the target of the given hop"]], "Parameters": [["int", "index of the hop for which to get the target, 0 for first"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the argument is negative or not less than @B_org#apache#http#conn#routing#RouteInfo#getHopCount_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains the target of a hop in this route. The target of the last hop is the @B_org#apache#http#conn#routing#RouteInfo#getTargetHost_E@, the target of previous hops is the respective proxy in the chain. For a route through exactly one proxy, target of hop 0 is the proxy and target of hop 1 is the target host.", "history": "Added in API level 1", "FullName": "public abstract HttpHost getHopTarget (int hop)"}, "isSecure()": {"Returns": [["", "true if secure, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route is secure.", "history": "Added in API level 1", "FullName": "public abstract boolean isSecure ()"}, "getTargetHost()": {"Returns": [["", "the target host"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the target host.", "history": "Added in API level 1", "FullName": "public abstract HttpHost getTargetHost ()"}, "getHopCount()": {"Returns": [["", "the number of hops in this route"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the number of hops in this route. A direct route has one hop. A route through a proxy has two hops. A route through a chain of", "history": "Added in API level 1", "FullName": "public abstract int getHopCount ()"}, "isTunnelled()": {"Returns": [["", "true if tunnelled end-to-end through at least one proxy, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route is tunnelled through a proxy. If there is a proxy chain, only end-to-end tunnels are considered.", "history": "Added in API level 1", "FullName": "public abstract boolean isTunnelled ()"}, "getLocalAddress()": {"Returns": [["", "the local address, or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the local address to connect from.", "history": "Added in API level 1", "FullName": "public abstract InetAddress getLocalAddress ()"}, "getTunnelType()": {"Returns": [["", "the tunnelling type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the tunnel type of this route. If there is a proxy chain, only end-to-end tunnels are considered.", "history": "Added in API level 1", "FullName": "public abstract RouteInfo.TunnelType getTunnelType ()"}, "getLayerType()": {"Returns": [["", "the layering type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the layering type of this route. In the presence of proxies, only layering over an end-to-end tunnel is considered.", "history": "Added in API level 1", "FullName": "public abstract RouteInfo.LayerType getLayerType ()"}, "isLayered()": {"Returns": [["", "true if layered, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks whether this route includes a layered protocol. In the presence of proxies, only layering over an end-to-end tunnel is considered.", "history": "Added in API level 1", "FullName": "public abstract boolean isLayered ()"}, "getProxyHost()": {"Returns": [["", "the first proxy in the proxy chain, or null if this route is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the first proxy host.", "history": "Added in API level 1", "FullName": "public abstract HttpHost getProxyHost ()"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.routing.RouteInfo", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Read-only interface for route information."}