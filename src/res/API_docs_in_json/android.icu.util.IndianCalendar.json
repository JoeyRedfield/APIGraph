{"Functions": {"handleComputeMonthStart(int, int, boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Julian day number of day before the first day of the given month in the given extended year. Subclasses should override this method to implement their calendar system.", "history": "added in API level 24", "FullName": "protected int handleComputeMonthStart (int year, int month, boolean useMonth)"}, "IndianCalendar(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: The date to which the new calendar is set."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar with the given date set in the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (Date date)"}, "handleGetLimit(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "added in API level 24", "FullName": "protected int handleGetLimit (int field, int limitType)"}, "IndianCalendar(int,int,int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#YEAR_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MONTH_E@ time field. The value is 0-based. e.g., 0 for January."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#DATE_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#HOUR_OF_DAY_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MINUTE_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#SECOND_E@ time field."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (int year, int month, int date, int hour, int minute, int second)"}, "handleGetLimit(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int: one of the above field numbers"], ["int", "int: one of MINIMUM, GREATEST_MINIMUM, LEAST_MAXIMUM, or MAXIMUM"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclass API for defining limits of different types. Subclasses must implement this method to return limits for the following fields:", "history": "Added in API level 24", "FullName": "protected int handleGetLimit (int field, int limitType)"}, "handleComputeMonthStart(int,int,boolean)": {"Returns": [["int", "the Julian day number of the day before the first day of the given month and year"]], "Parameters": [["int", "int: the extended year"], ["int", "int: the zero-based month, or 0 if useMonth is false"], ["boolean", "boolean: if false, compute the day before the first day of the given year, otherwise, compute the day before the first day of the given month"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the Julian day number of day before the first day of the given month in the given extended year. Subclasses should override this method to implement their calendar system.", "history": "Added in API level 24", "FullName": "protected int handleComputeMonthStart (int year, int month, boolean useMonth)"}, "IndianCalendar(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#YEAR_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MONTH_E@ time field. The value is 0-based. e.g., 0 for January."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#DATE_E@ time field."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar with the given date set in the default time zone with the default FORMAT locale.", "history": "added in API level 24", "FullName": "public IndianCalendar (int year, int month, int date)"}, "IndianCalendar(android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a IndianCalendar based on the current time in the default time zone with the given locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (ULocale locale)"}, "IndianCalendar(java.util.Locale)": {"Returns": [], "Parameters": [["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a IndianCalendar based on the current time in the default time zone with the given locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (Locale aLocale)"}, "handleGetMonthLength(int, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "legacy calendar type name string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "See type=\"old type name\" for the calendar attribute of locale IDs at http://www.unicode.org/reports/tr35/#Key_Type_Definitions", "history": "Added in API level 24", "FullName": "public String getType ()"}, "handleGetMonthLength(int,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given month of the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetMonthLength (int extendedYear, int month)"}, "IndianCalendar()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar using the current time in the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar ()"}, "IndianCalendar(android.icu.util.TimeZone)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar based on the current time in the given time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (TimeZone zone)"}, "IndianCalendar(android.icu.util.TimeZone,android.icu.util.ULocale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."], ["@B_android#icu#util#ULocale_E@", "ULocale: the given ulocale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a IndianCalendar based on the current time in the given time zone with the given locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (TimeZone zone, ULocale locale)"}, "IndianCalendar(android.icu.util.TimeZone,java.util.Locale)": {"Returns": [], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the given time zone."], ["@B_java#util#Locale_E@", "Locale: the given locale."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a IndianCalendar based on the current time in the given time zone with the given locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (TimeZone zone, Locale aLocale)"}, "handleComputeFields(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Subclasses may override this method to compute several fields specific to each calendar system. These are: ERA YEAR MONTH DAY_OF_MONTH DAY_OF_YEAR EXTENDED_YEAR Subclasses can refer to the DAY_OF_WEEK and DOW_LOCAL fields, which will be set when this method is called. Subclasses can also call the getGregorianXxx() methods to obtain Gregorian calendar equivalents for the given Julian day. In addition, subclasses should compute any subclass-specific fields, that is, fields from BASE_FIELD_COUNT to getFieldCount() - 1. The default implementation in Calendar implements a pure proleptic Gregorian calendar.", "history": "Added in API level 24", "FullName": "protected void handleComputeFields (int julianDay)"}, "IndianCalendar(int, int, int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#YEAR_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MONTH_E@ time field. The value is 0-based. e.g., 0 for January."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#DATE_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#HOUR_OF_DAY_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MINUTE_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#SECOND_E@ time field."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar with the given date and time set for the default time zone with the default FORMAT locale.", "history": "added in API level 24", "FullName": "public IndianCalendar (int year, int month, int date, int hour, int minute, int second)"}, "IndianCalendar(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#YEAR_E@ time field."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#MONTH_E@ time field. The value is 0-based. e.g., 0 for January."], ["int", "int: The value used to set the calendar's @B_android#icu#util#Calendar#DATE_E@ time field."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Constructs a IndianCalendar with the given date set in the default time zone with the default FORMAT locale.", "history": "Added in API level 24", "FullName": "public IndianCalendar (int year, int month, int date)"}, "handleGetYearLength(int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of days in the given extended year of this calendar system. Subclasses should override this method if they can provide a more correct or more efficient implementation than the default implementation in Calendar.", "history": "Added in API level 24", "FullName": "protected int handleGetYearLength (int extendedYear)"}, "handleGetExtendedYear()": {"Returns": [["int", "the extended year"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the extended year defined by the current fields. This will use the EXTENDED_YEAR field or the YEAR and supra-year fields (such as ERA) specific to the calendar system, depending on which set of fields is newer.", "history": "Added in API level 24", "FullName": "protected int handleGetExtendedYear ()"}}, "Inheritance": ["@B_android#icu#util#Calendar_E@"], "ClassName": "android.icu.util.IndianCalendar", "ClassDesc": "IndianCalendar is a subclass of GregorianCalendar that numbers years since the birth of the Buddha. This is the civil calendar which is accepted by government of India as Indian National Calendar. The two calendars most widely used in India today are the Vikrama calendar followed in North India and the Shalivahana or Saka calendar which is followed in South India and Maharashtra. A variant of the Shalivahana Calendar was reformed and standardized as the Indian National calendar in 1957. Some details of Indian National Calendar (to be implemented) : The Months Month Length Start date (Gregorian) ================================================= 1 Chaitra 30/31 March 22* 2 Vaisakha 31 April 21 3 Jyaistha 31 May 22 4 Asadha 31 June 22 5 Sravana 31 July 23 6 Bhadra 31 August 23 7 Asvina 30 September 23 8 Kartika 30 October 23 9 Agrahayana 30 November 22 10 Pausa 30 December 22 11 Magha 30 January 21 12 Phalguna 30 February 20 In leap years, Chaitra has 31 days and starts on March 21 instead. The leap years of Gregorian calendar and Indian National Calendar are in synchornization. So When its a leap year in Gregorian calendar then Chaitra has 31 days. The Years Years are counted in the Saka Era, which starts its year 0 in 78AD (by gregorian calendar). So for eg. 9th June 2006 by Gregorian Calendar, is same as 19th of Jyaistha in 1928 of Saka era by Indian National Calendar. The Indian Calendar has only one allowable era: Saka Era. If the calendar is not in lenient mode (see setLenient), dates before 1/1/1 Saka Era are rejected with an IllegalArgumentException. This class should not be subclassed. IndianCalendar usually should be instantiated using @B_android#icu#util#Calendar#getInstance_E@ passing in a ULocale with the tag \"@calendar=Indian\"."}