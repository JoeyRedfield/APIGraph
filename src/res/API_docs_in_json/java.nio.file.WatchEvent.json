{"Functions": {"context()": {"Returns": [["T", "the event context; may be null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the context for the event. In the case of @B_java#nio#file#StandardWatchEventKinds#ENTRY_CREATE_E@, @B_java#nio#file#StandardWatchEventKinds#ENTRY_DELETE_E@, and @B_java#nio#file#StandardWatchEventKinds#ENTRY_MODIFY_E@ events the context is a Path that is the @B_java#nio#file#Path#relativize_E@ path between the directory registered with the watch service, and the entry that is created, deleted, or modified.", "history": "Added in API level 26", "FullName": "public abstract T context ()"}, "count()": {"Returns": [["int", "the event count"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the event count. If the event count is greater than 1 then this is a repeated event.", "history": "Added in API level 26", "FullName": "public abstract int count ()"}, "kind()": {"Returns": [["@B_java#nio#file#WatchEvent#Kind_E@", "the event kind"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the event kind.", "history": "Added in API level 26", "FullName": "public abstract Kind<T> kind ()"}}, "Inheritance": [], "ClassName": "java.nio.file.WatchEvent<T>", "ClassDesc": "An event or a repeated event for an object that is registered with a @B_java#nio#file#WatchService_E@. An event is classified by its @B_java#nio#file#WatchEvent#kind_E@ and has a @B_java#nio#file#WatchEvent#count_E@ to indicate the number of times that the event has been observed. This allows for efficient representation of repeated events. The @B_java#nio#file#WatchEvent#context_E@ method returns any context associated with the event. In the case of a repeated event then the context is the same for all events. Watch events are immutable and safe for use by multiple concurrent threads."}