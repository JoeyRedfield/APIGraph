{"Functions": {"formatStatusLine(org.apache.http.util.CharArrayBuffer, org.apache.http.StatusLine)": {"Returns": [["", "the formatted status line"]], "Parameters": [["@B_org#apache#http#util#CharArrayBuffer_E@", "a buffer available for formatting, or null. The buffer will be cleared before use."], ["@B_org#apache#http#StatusLine_E@", "the status line to format"]], "Throws": [["", "in case of a parse error"]], "SeeAlso": [], "Permissions": [], "Description": "Formats a status line.", "history": "Added in API level 1", "FullName": "public abstract CharArrayBuffer formatStatusLine (CharArrayBuffer buffer, StatusLine statline)"}, "formatRequestLine(org.apache.http.util.CharArrayBuffer, org.apache.http.RequestLine)": {"Returns": [["", "the formatted request line"]], "Parameters": [["@B_org#apache#http#util#CharArrayBuffer_E@", "a buffer available for formatting, or null. The buffer will be cleared before use."], ["@B_org#apache#http#RequestLine_E@", "the request line to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a request line.", "history": "Added in API level 1", "FullName": "public abstract CharArrayBuffer formatRequestLine (CharArrayBuffer buffer, RequestLine reqline)"}, "appendProtocolVersion(org.apache.http.util.CharArrayBuffer, org.apache.http.ProtocolVersion)": {"Returns": [["", "a buffer with the formatted protocol version appended. The caller is allowed to modify the result buffer. If the buffer argument is not null, the returned buffer is the argument buffer."]], "Parameters": [["@B_org#apache#http#util#CharArrayBuffer_E@", "a buffer to which to append, or null"], ["@B_org#apache#http#ProtocolVersion_E@", "the protocol version to format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Formats a protocol version. This method does buffer arguments. It does formatProtocolVersion.", "history": "Added in API level 1", "FullName": "public abstract CharArrayBuffer appendProtocolVersion (CharArrayBuffer buffer, ProtocolVersion version)"}, "formatHeader(org.apache.http.util.CharArrayBuffer, org.apache.http.Header)": {"Returns": [["", "a buffer holding the formatted header, never null. The returned buffer may be different from the argument buffer."]], "Parameters": [["@B_org#apache#http#util#CharArrayBuffer_E@", "a buffer available for formatting, or null. The buffer will be cleared before use."], ["@B_org#apache#http#Header_E@", "the header to format"]], "Throws": [["", "in case of a parse error"]], "SeeAlso": [], "Permissions": [], "Description": "Formats a header. Due to header continuation, the result may be multiple lines. In order to generate well-formed HTTP, the lines in the result must be separated by the HTTP line break sequence CR-LF. There is See the class comment for details about the buffer argument.", "history": "Added in API level 1", "FullName": "public abstract CharArrayBuffer formatHeader (CharArrayBuffer buffer, Header header)"}}, "Inheritance": [], "ClassName": "org.apache.http.message.LineFormatter", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Interface for formatting elements of the HEAD section of an HTTP message. This is the complement to @B_org#apache#http#message#LineParser_E@. There are individual methods for formatting a request line, a status line, or a header line. The formatting does The formatted lines are returned in memory, the formatter does not depend on any specific IO mechanism. In order to avoid unnecessary creation of temporary objects, a buffer can be passed as argument to all formatting methods. The implementation may or may not actually use that buffer for formatting. If it is used, the buffer will first be cleared by the formatXXX methods. The argument buffer can always be re-used after the call. The buffer returned as the result, if it is different from the argument buffer, MUST NOT be modified."}