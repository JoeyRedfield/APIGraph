{"Functions": {"ServiceState(android.telephony.ServiceState)": {"Returns": [], "Parameters": [["@B_android#telephony#ServiceState_E@", "ServiceState: Source service state"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Copy constructors", "history": "Added in API level 1", "FullName": "public ServiceState (ServiceState s)"}, "setRoaming(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setRoaming (boolean roaming)"}, "getState()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current voice service state", "history": "Added in API level 1", "FullName": "public int getState ()"}, "getOperatorAlphaShort()": {"Returns": [["@B_java#lang#String_E@", "short name of operator, null if unregistered or unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current registered operator name in short alphanumeric format. In GSM/UMTS, short format can be up to 8 characters long.", "history": "Added in API level 1", "FullName": "public String getOperatorAlphaShort ()"}, "getDuplexMode()": {"Returns": [["int", "Current DuplexMode for the phone Value is @B_android#telephony#ServiceState#DUPLEX_MODE_UNKNOWN_E@, @B_android#telephony#ServiceState#DUPLEX_MODE_FDD_E@, or @B_android#telephony#ServiceState#DUPLEX_MODE_TDD_E@"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#telephony#ServiceState_E@"], "Permissions": [], "Description": "Get the current duplex mode", "history": "Added in API level 28", "FullName": "public int getDuplexMode ()"}, "setOperatorName(java.lang.String,java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setOperatorName (String longName, String shortName, String numeric)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 1", "FullName": "public int describeContents ()"}, "getChannelNumber()": {"Returns": [["int", "Channel number of primary serving cell"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the channel number of the current primary serving cell, or -1 if unknown This is EARFCN for LTE, UARFCN for UMTS, and ARFCN for GSM.", "history": "Added in API level 28", "FullName": "public int getChannelNumber ()"}, "ServiceState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Empty constructor", "history": "Added in API level 1", "FullName": "public ServiceState ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "setStateOff()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setStateOff ()"}, "getCdmaNetworkId()": {"Returns": [["int", "The CDMA NID or @B_android#telephony#ServiceState#UNKNOWN_ID_E@ if not available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the CDMA NID (Network Identification Number), a number uniquely identifying a network within a wireless system. (Defined in 3GPP2 C.S0023 3.4.8)", "history": "Added in API level 28", "FullName": "public int getCdmaNetworkId ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 1", "FullName": "public boolean equals (Object o)"}, "getOperatorNumeric()": {"Returns": [["@B_java#lang#String_E@", "numeric format of operator, null if unregistered or unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current registered operator numeric id. In GSM/UMTS, numeric format is 3 digit country code plus 2 or 3 digit network code.", "history": "Added in API level 1", "FullName": "public String getOperatorNumeric ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "ServiceState(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The constructor takes parcel should not be public at the beginning. Use @B_android#telephony#ServiceState#ServiceState_E@ instead. Construct a ServiceState object from the given parcel.", "history": "Added in API level 1", "FullName": "public ServiceState (Parcel in)"}, "setStateOutOfService()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setStateOutOfService ()"}, "getCdmaSystemId()": {"Returns": [["int", "The CDMA SID or @B_android#telephony#ServiceState#UNKNOWN_ID_E@ if not available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the CDMA SID (System Identification Number), a number uniquely identifying a wireless system. (Defined in 3GPP2 C.S0023 3.4.8)", "history": "Added in API level 28", "FullName": "public int getCdmaSystemId ()"}, "copyFrom(android.telephony.ServiceState)": {"Returns": [], "Parameters": [["@B_android#telephony#ServiceState_E@", "ServiceState no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected void copyFrom (ServiceState s)"}, "setState(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setState (int state)"}, "getCellBandwidths()": {"Returns": [["int[]", "Current serving cell bandwidths"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an array of cell bandwidths (kHz) for the current serving cells", "history": "Added in API level 28", "FullName": "public int[] getCellBandwidths ()"}, "getIsManualSelection()": {"Returns": [["boolean", "true if manual mode, false if automatic mode"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current network selection mode.", "history": "Added in API level 1", "FullName": "public boolean getIsManualSelection ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getOperatorAlphaLong()": {"Returns": [["@B_java#lang#String_E@", "long name of operator, null if unregistered or unknown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current registered operator name in long alphanumeric format. In GSM/UMTS, long format can be up to 16 characters long. In CDMA, returns the ERI text, if set. Otherwise, returns the ONS.", "history": "Added in API level 1", "FullName": "public String getOperatorAlphaLong ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "getRoaming()": {"Returns": [["boolean", "true if TS 27.007 7.2 roaming is true and ONS is different from SPN"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get current roaming indicator of phone (note: not just decoding from TS 27.007 7.2)", "history": "Added in API level 1", "FullName": "public boolean getRoaming ()"}, "setIsManualSelection(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setIsManualSelection (boolean isManual)"}}, "Inheritance": [], "ClassName": "android.telephony.ServiceState", "ClassDesc": "Contains phone state and service related information. The following phone information is included in returned ServiceState: Service state: IN_SERVICE, OUT_OF_SERVICE, EMERGENCY_ONLY, POWER_OFF Duplex mode: UNKNOWN, FDD, TDD Roaming indicator Operator name, short name and numeric id Network selection mode For historical reasons this class is not declared as final; however, it should be treated as though it were final."}