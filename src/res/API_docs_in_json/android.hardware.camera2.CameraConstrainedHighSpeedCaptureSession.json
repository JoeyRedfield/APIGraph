{"Functions": {"createHighSpeedRequestList(android.hardware.camera2.CaptureRequest)": {"Returns": [["@B_java#util#List_E@", "A unmodifiable CaptureRequest list that is suitable for constrained high speed capture. This value will never be null."]], "Parameters": [["@B_android#hardware#camera2#CaptureRequest_E@", "CaptureRequest: The high speed capture request that will be used to generate the high speed request list. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the set of output Surfaces in the request do not meet the high speed video capability requirements, or the camera device doesn't support high speed video capability, or the request doesn't meet the high speed video capability requirements, or the request doesn't contain the required controls for high speed capture."], ["@B_android#hardware#camera2#CameraAccessException_E@", "if the camera device is no longer connected or has encountered a fatal error"], ["@B_java#lang#IllegalStateException_E@", "if the camera device has been closed"]], "SeeAlso": ["@B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@", "@B_android#hardware#camera2#CaptureRequest_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoSizes_E@", "@B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@", "@B_android#hardware#camera2#CameraCharacteristics_E@", "@B_android#hardware#camera2#CameraMetadata_E@"], "Permissions": [], "Description": "Create a unmodifiable list of requests that is suitable for constrained high speed capture session streaming. High speed video streaming creates significant performance pressure on the camera device, so to achieve efficient high speed streaming, the camera device may have to aggregate multiple frames together. This means requests must be sent in batched groups, with all requests sharing the same settings. This method takes the list of output target Surfaces (subject to the output Surface requirements specified by the constrained high speed session) and a @B_android#hardware#camera2#CaptureRequest_E@, and generates a request list that has the same controls for each request. The input @B_android#hardware#camera2#CaptureRequest_E@ must contain the target output Surfaces and target high speed FPS range that is one of the @B_android#hardware#camera2#params#StreamConfigurationMap#getHighSpeedVideoFpsRangesFor_E@ for the Surface size. If both preview and recording Surfaces are specified in the request, the @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ in the input @B_android#hardware#camera2#CaptureRequest_E@ must be a fixed frame rate FPS range, where the @B_android#util#Range#getLower_E@ == @B_android#util#Range#getUpper_E@. The created request list will contain a interleaved request pattern such that the preview output FPS is at least 30fps, the recording output FPS is @B_android#util#Range#getUpper_E@ of the requested FPS range. The application can submit this request list directly to an active high speed capture session to achieve high speed video recording. When only preview or recording Surface is specified, this method will return a list of request that have the same controls and output targets for all requests. Submitting a request list created by this method to a normal capture session will result in an @B_java#lang#IllegalArgumentException_E@ if the high speed @B_android#hardware#camera2#CaptureRequest#CONTROL_AE_TARGET_FPS_RANGE_E@ is not supported by @B_android#hardware#camera2#CameraCharacteristics#CONTROL_AE_AVAILABLE_TARGET_FPS_RANGES_E@.", "history": "Added in API level 23", "FullName": "public abstract List<CaptureRequest> createHighSpeedRequestList (CaptureRequest request)"}, "CameraConstrainedHighSpeedCaptureSession()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 23", "FullName": "public CameraConstrainedHighSpeedCaptureSession ()"}}, "Inheritance": ["@B_android#hardware#camera2#CameraCaptureSession_E@"], "ClassName": "android.hardware.camera2.CameraConstrainedHighSpeedCaptureSession", "ClassDesc": "A constrained high speed capture session for a @B_android#hardware#camera2#CameraDevice_E@, used for capturing high speed images from the @B_android#hardware#camera2#CameraDevice_E@ for high speed video recording use case. A CameraHighSpeedCaptureSession is created by providing a set of target output surfaces to @B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@, Once created, the session is active until a new session is created by the camera device, or the camera device is closed. An active high speed capture session is a specialized capture session that is only targeted at high speed video recording (>=120fps) use case if the camera device supports high speed video capability (i.e., @B_android#hardware#camera2#CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES_E@ contains @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_CONSTRAINED_HIGH_SPEED_VIDEO_E@). It only accepts request lists created via @B_android#hardware#camera2#CameraConstrainedHighSpeedCaptureSession#createHighSpeedRequestList_E@, and the request list can only be submitted to this session via @B_android#hardware#camera2#CameraCaptureSession#captureBurst_E@, or @B_android#hardware#camera2#CameraCaptureSession#setRepeatingBurst_E@. See @B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@ for more details of the limitations. Creating a session is an expensive operation and can take several hundred milliseconds, since it requires configuring the camera device's internal pipelines and allocating memory buffers for sending images to the desired targets. Therefore the setup is done asynchronously, and @B_android#hardware#camera2#CameraDevice#createConstrainedHighSpeedCaptureSession_E@ will send the ready-to-use CameraCaptureSession to the provided listener's @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigured_E@ callback. If configuration cannot be completed, then the @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onConfigureFailed_E@ is called, and the session will not become active. If a new session is created by the camera device, then the previous session is closed, and its associated @B_android#hardware#camera2#CameraCaptureSession#StateCallback#onClosed_E@ callback will be invoked. All of the session methods will throw an IllegalStateException if called once the session is closed. A closed session clears any repeating requests (as if @B_android#hardware#camera2#CameraCaptureSession#stopRepeating_E@ had been called), but will still complete all of its in-progress capture requests as normal, before a newly created session takes over and reconfigures the camera device."}