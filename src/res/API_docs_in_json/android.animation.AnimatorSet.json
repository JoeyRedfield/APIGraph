{"Functions": {"playTogether(android.animation.Animator...)": {"Returns": [], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animations that will be started simultaneously."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AnimatorSet to play all of the supplied animations at the same time. This is equivalent to calling @B_android#animation#AnimatorSet#play_E@ with the first animator in the set and then @B_android#animation#AnimatorSet#Builder#with_E@ with each of the other animators. Note that an Animator with a @B_android#animation#Animator#setStartDelay_E@ will not actually start until that delay elapses, which means that if the first animator in the list supplied to this constructor has a startDelay, none of the other animators will start until that first animator's startDelay has elapsed.", "history": "Added in API level 11", "FullName": "public void playTogether (Animator... items)"}, "getCurrentPlayTime()": {"Returns": [["long", "the current position in time of the animation in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the milliseconds elapsed since the start of the animation. For ongoing animations, this method returns the current progress of the animation in terms of play time. For an animation that has not yet been started: if the animation has been seeked to a certain time via @B_android#animation#AnimatorSet#setCurrentPlayTime_E@, the seeked play time will be returned; otherwise, this method will return 0.", "history": "Added in API level 26", "FullName": "public long getCurrentPlayTime ()"}, "getChildAnimations()": {"Returns": [["@B_java#util#ArrayList_E@", "ArrayList The list of child animations of this AnimatorSet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current list of child Animator objects controlled by this AnimatorSet. This is a copy of the internal list; modifications to the returned list will not affect the AnimatorSet, although changes to the underlying Animator objects will affect those objects being managed by the AnimatorSet.", "history": "Added in API level 11", "FullName": "public ArrayList<Animator> getChildAnimations ()"}, "reverse()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Plays the AnimatorSet in reverse. If the animation has been seeked to a specific play time using @B_android#animation#AnimatorSet#setCurrentPlayTime_E@, it will play backwards from the point seeked when reverse was called. Otherwise, then it will start from the end and play backwards. This behavior is only set for the current animation; future playing of the animation will use the default behavior of playing forward. Note: reverse is not supported for infinite AnimatorSet.", "history": "Added in API level 26", "FullName": "public void reverse ()"}, "setupStartValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract starting values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupStartValues ()"}, "setDuration(long)": {"Returns": [["@B_android#animation#AnimatorSet_E@", "no returns description in source"]], "Parameters": [["long", "long: The length of the animation, in milliseconds, of each of the child animations of this AnimatorSet."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of each of the current child animations of this AnimatorSet. By default, each child animation will use its own duration. If the duration is set on the AnimatorSet, then each child animation inherits this duration.", "history": "Added in API level 11", "FullName": "public AnimatorSet setDuration (long duration)"}, "getDuration()": {"Returns": [["long", "The length of the animation, in milliseconds, of each of the child animations of this AnimatorSet."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the length of each of the child animations of this AnimatorSet. This value may be less than 0, which indicates that no duration has been set on this AnimatorSet and each of the child animations will use their own duration.", "history": "Added in API level 11", "FullName": "public long getDuration ()"}, "playSequentially(java.util.List<android.animation.Animator>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The animations that will be started one after another."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.", "history": "Added in API level 11", "FullName": "public void playSequentially (List<Animator> items)"}, "isStarted()": {"Returns": [["boolean", "Whether the Animator has been started and not yet ended."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this Animator has been started and not yet ended. For reusable Animators (which most Animators are, apart from the one-shot animator produced by @B_android#view#ViewAnimationUtils#createCircularReveal_E@), this state is a superset of @B_android#animation#Animator#isRunning_E@, because an Animator with a nonzero @B_android#animation#Animator#getStartDelay_E@ will return true for @B_android#animation#Animator#isStarted_E@ during the delay phase, whereas @B_android#animation#Animator#isRunning_E@ will return true only after the delay phase is complete. Non-reusable animators will always return true after they have been started, because they cannot return to a non-started state.", "history": "Added in API level 14", "FullName": "public boolean isStarted ()"}, "isRunning()": {"Returns": [["boolean", "Whether this AnimatorSet has gone past the initial delay, and at least one child animation has been started and not yet ended."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if any of the child animations of this AnimatorSet have been started and have not yet ended. Child animations will not be started until the AnimatorSet has gone past its initial delay set through @B_android#animation#AnimatorSet#setStartDelay_E@.", "history": "Added in API level 11", "FullName": "public boolean isRunning ()"}, "cancel()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Cancels the animation. Unlike @B_android#animation#Animator#end_E@, cancel() causes the animation to stop in its tracks, sending an @B_android#animation#Animator#AnimatorListener#onAnimationCancel_E@ to its listeners, followed by an @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ message. This method must be called on the thread that is running the animation. Note that canceling a AnimatorSet also cancels all of the animations that it is responsible for.", "history": "Added in API level 11", "FullName": "public void cancel ()"}, "playSequentially(android.animation.Animator...)": {"Returns": [], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animations that will be started one after another."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AnimatorSet to play each of the supplied animations when the previous animation ends.", "history": "Added in API level 11", "FullName": "public void playSequentially (Animator... items)"}, "setTarget(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The object being animated"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the target object for all current @B_android#animation#AnimatorSet#getChildAnimations_E@ of this AnimatorSet that take targets (@B_android#animation#ObjectAnimator_E@ and AnimatorSet).", "history": "Added in API level 11", "FullName": "public void setTarget (Object target)"}, "getStartDelay()": {"Returns": [["long", "the number of milliseconds to delay running the animation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay starting the animation after @B_android#animation#AnimatorSet#start_E@ is called.", "history": "Added in API level 11", "FullName": "public long getStartDelay ()"}, "setStartDelay(long)": {"Returns": [], "Parameters": [["long", "long: The amount of the delay, in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "The amount of time, in milliseconds, to delay starting the animation after @B_android#animation#AnimatorSet#start_E@ is called. Note that the start delay should always be non-negative. Any negative start delay will be clamped to 0 on N and above.", "history": "Added in API level 11", "FullName": "public void setStartDelay (long startDelay)"}, "clone()": {"Returns": [["@B_android#animation#AnimatorSet_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object. The precise meaning of \"copy\" may depend on the class of the object. The general intent is that, for any object x, the expression: true, but these are not absolute requirements. While it is typically the case that: true, this is not an absolute requirement. By convention, the returned object should be obtained by calling super.clone. If a class and all of its superclasses (except Object) obey this convention, it will be the case that x.clone().getClass() == x.getClass(). By convention, the object returned by this method should be independent of this object (which is being cloned). To achieve this independence, it may be necessary to modify one or more fields of the object returned by super.clone before returning it. Typically, this means copying any mutable objects that comprise the internal \"deep structure\" of the object being cloned and replacing the references to these objects with references to the copies. If a class contains only primitive fields or references to immutable objects, then it is usually the case that no fields in the object returned by super.clone need to be modified. The method clone for class Object performs a specific cloning operation. First, if the class of this object does not implement the interface Cloneable, then a CloneNotSupportedException is thrown. Note that all arrays are considered to implement the interface Cloneable and that the return type of the clone method of an array type T[] is T[] where T is any reference or primitive type. Otherwise, this method creates a new instance of the class of this object and initializes all its fields with exactly the contents of the corresponding fields of this object, as if by assignment; the contents of the fields are not themselves cloned. Thus, this method performs a \"shallow copy\" of this object, not a \"deep copy\" operation. The class Object does not itself implement the interface Cloneable, so calling the clone method on an object whose class is Object will result in throwing an exception at run time.", "history": "Added in API level 11", "FullName": "public AnimatorSet clone ()"}, "pause()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Pauses a running animation. This method should only be called on the same thread on which the animation was started. If the animation has not yet been @B_android#animation#Animator#isStarted_E@ or has since ended, then the call is ignored. Paused animations can be resumed by calling @B_android#animation#Animator#resume_E@.", "history": "Added in API level 19", "FullName": "public void pause ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts this animation. If the animation has a nonzero startDelay, the animation will start running after that delay elapses. A non-delayed animation will have its initial value(s) set immediately, followed by calls to @B_android#animation#Animator#AnimatorListener#onAnimationStart_E@ for any listeners of this animator. The animation started by calling this method will be run on the thread that called this method. This thread should have a Looper on it (a runtime exception will be thrown if this is not the case). Also, if the animation will animate properties of objects in the view hierarchy, then the calling thread should be the UI thread for that view hierarchy. Starting this AnimatorSet will, in turn, start the animations for which it is responsible. The details of when exactly those animations are started depends on the dependency relationships that have been set up between the animations. @B_android#animation#AnimatorSet#start_E@ is called.", "history": "Added in API level 11", "FullName": "public void start ()"}, "playTogether(java.util.Collection<android.animation.Animator>)": {"Returns": [], "Parameters": [["@B_java#util#Collection_E@", "Collection: The animations that will be started simultaneously."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets up this AnimatorSet to play all of the supplied animations at the same time.", "history": "Added in API level 11", "FullName": "public void playTogether (Collection<Animator> items)"}, "getTotalDuration()": {"Returns": [["long", "Total time an animation takes to finish, starting from the time @B_android#animation#Animator#start_E@ is called. @B_android#animation#Animator#DURATION_INFINITE_E@ will be returned if the animation or any child animation repeats infinite times."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the total duration of the animation, accounting for animation sequences, start delay, and repeating. Return @B_android#animation#Animator#DURATION_INFINITE_E@ if the duration is infinite.", "history": "Added in API level 24", "FullName": "public long getTotalDuration ()"}, "setCurrentPlayTime(long)": {"Returns": [], "Parameters": [["long", "long: The time, in milliseconds, to which the animation is advanced or rewound. Unless the animation is reversing, the playtime is considered the time since the end of the start delay of the AnimatorSet in a forward playing direction."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the position of the animation to the specified point in time. This time should be between 0 and the total duration of the animation, including any repetition. If the animation has not yet been started, then it will not advance forward after it is set to this time; it will simply set the time to this value and perform any appropriate actions based on that time. If the animation is already running, then setCurrentPlayTime() will set the current playing time to this value and continue playing from that point.", "history": "Added in API level 26", "FullName": "public void setCurrentPlayTime (long playTime)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 11", "FullName": "public String toString ()"}, "getInterpolator()": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "The timing interpolator for this animation."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the timing interpolator that this animation uses.", "history": "Added in API level 18", "FullName": "public TimeInterpolator getInterpolator ()"}, "play(android.animation.Animator)": {"Returns": [["@B_android#animation#AnimatorSet#Builder_E@", "Builder The object that constructs the AnimatorSet based on the dependencies outlined in the calls to play and the other methods in the Builder"]], "Parameters": [["@B_android#animation#Animator_E@", "Animator: The animation that is the dependency used in later calls to the methods in the returned Builder object. A null parameter will result in a null Builder return value."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method creates a Builder object, which is used to set up playing constraints. This initial play() method tells the Builder the animation that is the dependency for the succeeding commands to the Builder. For example, calling play(a1).with(a2) sets up the AnimatorSet to play a1 and a2 at the same time, play(a1).before(a2) sets up the AnimatorSet to play a1 first, followed by a2, and play(a1).after(a2) sets up the AnimatorSet to play a2 first, followed by a1. Note that play() is the only way to tell the Builder the animation upon which the dependency is created, so successive calls to the various functions in Builder will all refer to the initial parameter supplied in play() as the dependency of the other animations. For example, calling play(a1).before(a2).before(a3) will play both a2 and a3 when a1 ends; it does not set up a dependency between a2 and a3.", "history": "Added in API level 11", "FullName": "public AnimatorSet.Builder play (Animator anim)"}, "setInterpolator(android.animation.TimeInterpolator)": {"Returns": [], "Parameters": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: the interpolator to be used by each child animation of this AnimatorSet"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the TimeInterpolator for all current @B_android#animation#AnimatorSet#getChildAnimations_E@ of this AnimatorSet. The default value is null, which means that no interpolator is set on this AnimatorSet. Setting the interpolator to any non-null value will cause that interpolator to be set on the child animations when the set is started.", "history": "Added in API level 11", "FullName": "public void setInterpolator (TimeInterpolator interpolator)"}, "AnimatorSet()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 11", "FullName": "public AnimatorSet ()"}, "resume()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resumes a paused animation, causing the animator to pick up where it left off when it was paused. This method should only be called on the same thread on which the animation was started. Calls to resume() on an animator that is not currently paused will be ignored.", "history": "Added in API level 19", "FullName": "public void resume ()"}, "setupEndValues()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method tells the object to use appropriate information to extract ending values for the animation. For example, a AnimatorSet object will pass this call to its child objects to tell them to set up the values. A ObjectAnimator object will use the information it has about its target object and PropertyValuesHolder objects to get the start values for its properties. A ValueAnimator object will ignore the request since it does not have enough information (such as a target object) to gather these values.", "history": "Added in API level 11", "FullName": "public void setupEndValues ()"}, "end()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ends the animation. This causes the animation to assign the end value of the property being animated, then calling the @B_android#animation#Animator#AnimatorListener#onAnimationEnd_E@ method on its listeners. This method must be called on the thread that is running the animation. Note that ending a AnimatorSet also ends all of the animations that it is responsible for.", "history": "Added in API level 11", "FullName": "public void end ()"}}, "Inheritance": ["@B_android#animation#Animator_E@"], "ClassName": "android.animation.AnimatorSet", "ClassDesc": "This class plays a set of @B_android#animation#Animator_E@ objects in the specified order. Animations can be set up to play together, in sequence, or after a specified delay. There are two different approaches to adding animations to a AnimatorSet: either the @B_android#animation#AnimatorSet#playTogether_E@ or @B_android#animation#AnimatorSet#playSequentially_E@ methods can be called to add a set of animations all at once, or the @B_android#animation#AnimatorSet#play_E@ can be used in conjunction with methods in the @B_android#animation#AnimatorSet#Builder_E@ class to add animations one by one. It is possible to set up a AnimatorSet with circular dependencies between its animations. For example, an animation a1 could be set up to start before animation a2, a2 before a3, and a3 before a1. The results of this configuration are undefined, but will typically result in none of the affected animations being played. Because of this (and because circular dependencies do not make logical sense anyway), circular dependencies should be avoided, and the dependency flow of animations should only be in one direction."}