{"Functions": {"setStagger(int, long)": {"Returns": [], "Parameters": [["int", "int: A value of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, or @B_android#animation#LayoutTransition#CHANGING_E@."], ["long", "long: The length of time, in milliseconds, to delay before launching the next animation in the sequence."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of time to delay between starting each animation during one of the change animations.", "history": "added in API level 11", "FullName": "public void setStagger (int transitionType, long duration)"}, "isTransitionTypeEnabled(int)": {"Returns": [["boolean", "true if the specified transitionType is currently enabled, false otherwise."]], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified transitionType is enabled for this LayoutTransition object. By default, all transition types except @B_android#animation#LayoutTransition#CHANGING_E@ are enabled.", "history": "Added in API level 16", "FullName": "public boolean isTransitionTypeEnabled (int transitionType)"}, "setAnimator(int, android.animation.Animator)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose animator is being set."], ["@B_android#animation#Animator_E@", "Animator: The animation being assigned. A value of null means that no animation will be run for the specified transitionType."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the animation used during one of the transition types that may run. Any Animator object can be used, but to be most useful in the context of layout transitions, the animation should either be a ObjectAnimator or a AnimatorSet of animations including PropertyAnimators. Also, these ObjectAnimator objects should be able to get and set values on their target objects automatically. For example, a ObjectAnimator that animates the property \"left\" is able to set and get the left property from the View objects being animated by the layout transition. The transition works by setting target objects and properties dynamically, according to the pre- and post-layoout values of those objects, so having animations that can handle those properties appropriately will work best for custom animation. The dynamic setting of values is only the case for the CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with the values they have. It is also worth noting that any and all animations (and their underlying PropertyValuesHolder objects) will have their start and end values set according to the pre- and post-layout values. So, for example, a custom animation on \"alpha\" as the CHANGE_APPEARING animation will inherit the real value of alpha on the target object (presumably 1) as its starting and ending value when the animation begins. Animations which need to use values at the beginning and end that may not match the values queried when the transition begins may need to use a different mechanism than a standard ObjectAnimator object.", "history": "added in API level 11", "FullName": "public void setAnimator (int transitionType, Animator animator)"}, "setStartDelay(int,long)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose start delay is being set."], ["long", "long: The length of time, in milliseconds, to delay before starting the animation."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setStartDelay_E@"], "Permissions": [], "Description": "Sets the start delay on one of the animation objects used by this transition. The transitionType parameter determines the animation whose start delay is being set.", "history": "Added in API level 11", "FullName": "public void setStartDelay (int transitionType, long delay)"}, "setInterpolator(int,android.animation.TimeInterpolator)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose interpolator is being set."], ["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator: The interpolator that the specified animation should use."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setInterpolator_E@"], "Permissions": [], "Description": "Sets the interpolator on one of the animation objects used by this transition. The transitionType parameter determines the animation whose interpolator is being set.", "history": "Added in API level 11", "FullName": "public void setInterpolator (int transitionType, TimeInterpolator interpolator)"}, "getAnimator(int)": {"Returns": [["@B_android#animation#Animator_E@", "Animator The animation being used for the given transition type."]], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose animator is being returned."]], "Throws": [], "SeeAlso": ["@B_android#animation#LayoutTransition#setAnimator_E@"], "Permissions": [], "Description": "Gets the animation used during one of the transition types that may run.", "history": "Added in API level 11", "FullName": "public Animator getAnimator (int transitionType)"}, "getStartDelay(int)": {"Returns": [["long", "long The start delay of the specified animation."]], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose start delay is returned."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#getStartDelay_E@"], "Permissions": [], "Description": "Gets the start delay on one of the animation objects used by this transition. The transitionType parameter determines the animation whose start delay is returned.", "history": "Added in API level 11", "FullName": "public long getStartDelay (int transitionType)"}, "getTransitionListeners()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current list of listeners for layout changes.", "history": "Added in API level 11", "FullName": "public List<LayoutTransition.TransitionListener> getTransitionListeners ()"}, "isChangingLayout()": {"Returns": [["boolean", "true if CHANGE_APPEARING or CHANGE_DISAPPEARING animations are currently running."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if animations are running which animate layout-related properties. This essentially means that either CHANGE_APPEARING or CHANGE_DISAPPEARING animations are running, since these animations operate on layout-related properties.", "history": "Added in API level 11", "FullName": "public boolean isChangingLayout ()"}, "setDuration(int, long)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose duration is being set."], ["long", "long: The length of time, in milliseconds, that the specified animation should run."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setDuration_E@"], "Permissions": [], "Description": "Sets the duration on one of the animation objects used by this transition. The transitionType parameter determines the animation whose duration is being set.", "history": "added in API level 11", "FullName": "public void setDuration (int transitionType, long duration)"}, "isRunning()": {"Returns": [["boolean", "true if any animations in the transition are running."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if any of the animations in this transition are currently running.", "history": "Added in API level 11", "FullName": "public boolean isRunning ()"}, "enableTransitionType(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Enables the specified transitionType for this LayoutTransition object. By default, a LayoutTransition listens for changes in children being added/remove/hidden/shown in the container, and runs the animations associated with those events. That is, all transition types besides @B_android#animation#LayoutTransition#CHANGING_E@ are enabled by default. You can also enable @B_android#animation#LayoutTransition#CHANGING_E@ animations by calling this method with the @B_android#animation#LayoutTransition#CHANGING_E@ transitionType.", "history": "Added in API level 16", "FullName": "public void enableTransitionType (int transitionType)"}, "hideChild(android.view.ViewGroup,android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The parent ViewGroup of the View being hidden."], ["@B_android#view#View_E@", "View: The View being hidden."], ["int", "int: The new visibility value of the child View, either @B_android#view#View#GONE_E@ or @B_android#view#View#INVISIBLE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called by ViewGroup when a child view is about to be hidden in container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.", "history": "Added in API level 16", "FullName": "public void hideChild (ViewGroup parent, View child, int newVisibility)"}, "getDuration(int)": {"Returns": [["long", "long The duration of the specified animation."]], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose duration is returned."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#getDuration_E@"], "Permissions": [], "Description": "Gets the duration on one of the animation objects used by this transition. The transitionType parameter determines the animation whose duration is returned.", "history": "Added in API level 11", "FullName": "public long getDuration (int transitionType)"}, "LayoutTransition()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a LayoutTransition object. By default, the object will listen to layout events on any ViewGroup that it is set on and will run default animations for each type of layout event.", "history": "Added in API level 11", "FullName": "public LayoutTransition ()"}, "removeTransitionListener(android.animation.LayoutTransition.TransitionListener)": {"Returns": [], "Parameters": [["@B_android#animation#LayoutTransition#TransitionListener_E@", "LayoutTransition.TransitionListener: The listener for layout bounds change."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a listener for layout changes.", "history": "Added in API level 11", "FullName": "public void removeTransitionListener (LayoutTransition.TransitionListener listener)"}, "showChild(android.view.ViewGroup,android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The ViewGroup in which the View is being made visible."], ["@B_android#view#View_E@", "View: The View being made visible."], ["int", "int: The previous visibility value of the child View, either @B_android#view#View#GONE_E@ or @B_android#view#View#INVISIBLE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called by ViewGroup when a child view is about to be made visible in the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.", "history": "Added in API level 16", "FullName": "public void showChild (ViewGroup parent, View child, int oldVisibility)"}, "getInterpolator(int)": {"Returns": [["@B_android#animation#TimeInterpolator_E@", "TimeInterpolator The interpolator that the specified animation uses."]], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose interpolator is being returned."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setInterpolator_E@"], "Permissions": [], "Description": "Gets the interpolator on one of the animation objects used by this transition. The transitionType parameter determines the animation whose interpolator is returned.", "history": "Added in API level 11", "FullName": "public TimeInterpolator getInterpolator (int transitionType)"}, "setStartDelay(int, long)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose start delay is being set."], ["long", "long: The length of time, in milliseconds, to delay before starting the animation."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setStartDelay_E@"], "Permissions": [], "Description": "Sets the start delay on one of the animation objects used by this transition. The transitionType parameter determines the animation whose start delay is being set.", "history": "added in API level 11", "FullName": "public void setStartDelay (int transitionType, long delay)"}, "setDuration(int,long)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose duration is being set."], ["long", "long: The length of time, in milliseconds, that the specified animation should run."]], "Throws": [], "SeeAlso": ["@B_android#animation#Animator#setDuration_E@"], "Permissions": [], "Description": "Sets the duration on one of the animation objects used by this transition. The transitionType parameter determines the animation whose duration is being set.", "history": "Added in API level 11", "FullName": "public void setDuration (int transitionType, long duration)"}, "removeChild(android.view.ViewGroup,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The ViewGroup from which the View is being removed."], ["@B_android#view#View_E@", "View: The View being removed from the ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called by ViewGroup when a child view is about to be removed from the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.", "history": "Added in API level 11", "FullName": "public void removeChild (ViewGroup parent, View child)"}, "setDuration(long)": {"Returns": [], "Parameters": [["long", "long: The length of time, in milliseconds, that the transition animations should last."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the duration to be used by all animations of this transition object. If you want to set the duration of just one of the animations in particular, use the @B_android#animation#LayoutTransition#setDuration_E@ method.", "history": "Added in API level 11", "FullName": "public void setDuration (long duration)"}, "showChild(android.view.ViewGroup,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"], ["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#animation#LayoutTransition#showChild_E@.", "history": "Added in API level 11 Deprecated in API level 16", "FullName": "public void showChild (ViewGroup parent, View child)"}, "addChild(android.view.ViewGroup,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup: The ViewGroup to which the View is being added."], ["@B_android#view#View_E@", "View: The View being added to the ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called by ViewGroup when a child view is about to be added to the container. This callback starts the process of a transition; we grab the starting values, listen for changes to all of the children of the container, and start appropriate animations.", "history": "Added in API level 11", "FullName": "public void addChild (ViewGroup parent, View child)"}, "disableTransitionType(int)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disables the specified transitionType for this LayoutTransition object. By default, all transition types except @B_android#animation#LayoutTransition#CHANGING_E@ are enabled.", "history": "Added in API level 16", "FullName": "public void disableTransitionType (int transitionType)"}, "setStagger(int,long)": {"Returns": [], "Parameters": [["int", "int: A value of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, or @B_android#animation#LayoutTransition#CHANGING_E@."], ["long", "long: The length of time, in milliseconds, to delay before launching the next animation in the sequence."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the length of time to delay between starting each animation during one of the change animations.", "history": "Added in API level 11", "FullName": "public void setStagger (int transitionType, long duration)"}, "addTransitionListener(android.animation.LayoutTransition.TransitionListener)": {"Returns": [], "Parameters": [["@B_android#animation#LayoutTransition#TransitionListener_E@", "LayoutTransition.TransitionListener: The listener that will be called when layout bounds change."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a listener that will be called when the bounds of the view change due to layout processing.", "history": "Added in API level 11", "FullName": "public void addTransitionListener (LayoutTransition.TransitionListener listener)"}, "hideChild(android.view.ViewGroup,android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"], ["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#animation#LayoutTransition#hideChild_E@.", "history": "Added in API level 11 Deprecated in API level 16", "FullName": "public void hideChild (ViewGroup parent, View child)"}, "setAnimateParentHierarchy(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: A boolean value indicating whether the parents of transitioning views should also be animated during the transition. Default value is true."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This flag controls whether CHANGE_APPEARING or CHANGE_DISAPPEARING animations will cause the default changing animation to be run on the parent hierarchy as well. This allows containers of transitioning views to also transition, which may be necessary in situations where the containers bounds change between the before/after states and may clip their children during the transition animations. For example, layouts with wrap_content will adjust their bounds according to the dimensions of their children. The default changing transitions animate the bounds and scroll positions of the target views. These are the animations that will run on the parent hierarchy, not the custom animations that happen to be set on the transition. This allows custom behavior for the children of the transitioning container, but uses standard behavior of resizing/rescrolling on any changing parents.", "history": "Added in API level 14", "FullName": "public void setAnimateParentHierarchy (boolean animateParentHierarchy)"}, "getStagger(int)": {"Returns": [["long", "long The length of time, in milliseconds, to delay before launching the next animation in the sequence."]], "Parameters": [["int", "int: A value of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, or @B_android#animation#LayoutTransition#CHANGING_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the length of time to delay between starting each animation during one of the change animations.", "history": "Added in API level 11", "FullName": "public long getStagger (int transitionType)"}, "setAnimator(int,android.animation.Animator)": {"Returns": [], "Parameters": [["int", "int: One of @B_android#animation#LayoutTransition#CHANGE_APPEARING_E@, @B_android#animation#LayoutTransition#CHANGE_DISAPPEARING_E@, @B_android#animation#LayoutTransition#CHANGING_E@, @B_android#animation#LayoutTransition#APPEARING_E@, or @B_android#animation#LayoutTransition#DISAPPEARING_E@, which determines the animation whose animator is being set."], ["@B_android#animation#Animator_E@", "Animator: The animation being assigned. A value of null means that no animation will be run for the specified transitionType."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the animation used during one of the transition types that may run. Any Animator object can be used, but to be most useful in the context of layout transitions, the animation should either be a ObjectAnimator or a AnimatorSet of animations including PropertyAnimators. Also, these ObjectAnimator objects should be able to get and set values on their target objects automatically. For example, a ObjectAnimator that animates the property \"left\" is able to set and get the left property from the View objects being animated by the layout transition. The transition works by setting target objects and properties dynamically, according to the pre- and post-layoout values of those objects, so having animations that can handle those properties appropriately will work best for custom animation. The dynamic setting of values is only the case for the CHANGE animations; the APPEARING and DISAPPEARING animations are simply run with the values they have. It is also worth noting that any and all animations (and their underlying PropertyValuesHolder objects) will have their start and end values set according to the pre- and post-layout values. So, for example, a custom animation on \"alpha\" as the CHANGE_APPEARING animation will inherit the real value of alpha on the target object (presumably 1) as its starting and ending value when the animation begins. Animations which need to use values at the beginning and end that may not match the values queried when the transition begins may need to use a different mechanism than a standard ObjectAnimator object.", "history": "Added in API level 11", "FullName": "public void setAnimator (int transitionType, Animator animator)"}}, "Inheritance": [], "ClassName": "android.animation.LayoutTransition", "ClassDesc": "This class enables automatic animations on layout changes in ViewGroup objects. To enable transitions for a layout container, create a LayoutTransition object and set it on any ViewGroup by calling @B_android#view#ViewGroup#setLayoutTransition_E@. This will cause default animations to run whenever items are added to or removed from that container. To specify custom animations, use the @B_android#animation#LayoutTransition#setAnimator_E@ method. One of the core concepts of these transition animations is that there are two types of changes that cause the transition and four different animations that run because of those changes. The changes that trigger the transition are items being added to a container (referred to as an \"appearing\" transition) or removed from a container (also known as \"disappearing\"). Setting the visibility of views (between GONE and VISIBLE) will trigger the same add/remove logic. The animations that run due to those events are one that animates items being added, one that animates items being removed, and two that animate the other items in the container that change due to the add/remove occurrence. Users of the transition may want different animations for the changing items depending on whether they are changing due to an appearing or disappearing event, so there is one animation for each of these variations of the changing event. Most of the API of this class is concerned with setting up the basic properties of the animations used in these four situations, or with setting up custom animations for any or all of the four. By default, the DISAPPEARING animation begins immediately, as does the CHANGE_APPEARING animation. The other animations begin after a delay that is set to the default duration of the animations. This behavior facilitates a sequence of animations in transitions as follows: when an item is being added to a layout, the other children of that container will move first (thus creating space for the new item), then the appearing animation will run to animate the item being added. Conversely, when an item is removed from a container, the animation to remove it will run first, then the animations of the other children in the layout will run (closing the gap created in the layout when the item was removed). If this default choreography behavior is not desired, the @B_android#animation#LayoutTransition#setDuration_E@ and @B_android#animation#LayoutTransition#setStartDelay_E@ of any or all of the animations can be changed as appropriate. Keep in mind, however, that if you start an APPEARING animation before a DISAPPEARING animation is completed, the DISAPPEARING animation stops, and any effects from the DISAPPEARING animation are reverted. If you instead start a DISAPPEARING animation before an APPEARING animation is completed, a similar set of effects occurs for the APPEARING animation. The animations specified for the transition, both the defaults and any custom animations set on the transition object, are templates only. That is, these animations exist to hold the basic animation properties, such as the duration, start delay, and properties being animated. But the actual target object, as well as the start and end values for those properties, are set automatically in the process of setting up the transition each time it runs. Each of the animations is cloned from the original copy and the clone is then populated with the dynamic values of the target being animated (such as one of the items in a layout container that is moving as a result of the layout event) as well as the values that are changing (such as the position and size of that object). The actual values that are pushed to each animation depends on what properties are specified for the animation. For example, the default CHANGE_APPEARING animation animates the left, top, right, bottom, scrollX, and scrollY properties. Values for these properties are updated with the pre- and post-layout values when the transition begins. Custom animations will be similarly populated with the target and values being animated, assuming they use ObjectAnimator objects with property names that are known on the target object. This class, and the associated XML flag for containers, animateLayoutChanges=\"true\", provides a simple utility meant for automating changes in straightforward situations. Using LayoutTransition at multiple levels of a nested view hierarchy may not work due to the interrelationship of the various levels of layout. Also, a container that is being scrolled at the same time as items are being added or removed is probably not a good candidate for this utility, because the before/after locations calculated by LayoutTransition may not match the actual locations when the animations finish due to the container being scrolled as the animations are running. You can work around that particular issue by disabling the 'changing' animations by setting the CHANGE_APPEARING and CHANGE_DISAPPEARING animations to null, and setting the startDelay of the other animations appropriately."}