{"Functions": {"get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#IsoDep_E@", "ISO-DEP object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an ISO-DEP compatible tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#IsoDep_E@ for the given tag. Does not cause any RF activity and does not block. Returns null if @B_android#nfc#tech#IsoDep_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@. This indicates the tag does not support ISO-DEP.", "history": "Added in API level 10", "FullName": "public static IsoDep get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 10", "FullName": "public boolean isConnected ()"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void connect ()"}, "getHistoricalBytes()": {"Returns": [["byte[]", "ISO-DEP historical bytes, or null if this is not a @B_android#nfc#tech#NfcA_E@ tag"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ISO-DEP historical bytes for @B_android#nfc#tech#NfcA_E@ tags. Does not cause any RF activity and does not block. The historical bytes can be used to help identify a tag. They are present only on @B_android#nfc#tech#IsoDep_E@ tags that are based on @B_android#nfc#tech#NfcA_E@ RF technology. If this tag is not @B_android#nfc#tech#NfcA_E@ then null is returned. In ISO 14443-4 terminology, the historical bytes are a subset of the RATS response.", "history": "Added in API level 10", "FullName": "public byte[] getHistoricalBytes ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void close ()"}, "setTimeout(int)": {"Returns": [], "Parameters": [["int", "int: timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Set the timeout of @B_android#nfc#tech#IsoDep#transceive_E@ in milliseconds. The timeout only applies to ISO-DEP @B_android#nfc#tech#IsoDep#transceive_E@, and is reset to a default value when @B_android#nfc#tech#IsoDep#close_E@ is called. Setting a longer timeout may be useful when performing transactions that require a long processing time on the tag such as key generation. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void setTimeout (int timeout)"}, "getMaxTransceiveLength()": {"Returns": [["int", "the maximum number of bytes that can be sent with @B_android#nfc#tech#IsoDep#transceive_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of bytes that can be sent with @B_android#nfc#tech#IsoDep#transceive_E@.", "history": "Added in API level 14", "FullName": "public int getMaxTransceiveLength ()"}, "getTimeout()": {"Returns": [["int", "timeout value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Get the current timeout for @B_android#nfc#tech#IsoDep#transceive_E@ in milliseconds. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14", "FullName": "public int getTimeout ()"}, "isExtendedLengthApduSupported()": {"Returns": [["boolean", "whether the NFC adapter on this device supports extended length APDUs."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Standard APDUs have a 1-byte length field, allowing a maximum of 255 payload bytes, which results in a maximum APDU length of 261 bytes. Extended length APDUs have a 3-byte length field, allowing 65535 payload bytes. Some NFC adapters, like the one used in the Nexus S and the Galaxy Nexus do not support extended length APDUs. They are expected to be well-supported in the future though. Use this method to check for extended length APDU support.", "history": "Added in API level 16", "FullName": "public boolean isExtendedLengthApduSupported ()"}, "transceive(byte[])": {"Returns": [["byte[]", "response bytes received, will not be null"]], "Parameters": [["byte[]", "byte: command bytes to send, must not be null"]], "Throws": [["", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or this operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Send raw ISO-DEP data to the tag and receive the response. Applications must only send the INF payload, and not the start of frame and end of frame indicators. Applications do not need to fragment the payload, it will be automatically fragmented and defragmented by @B_android#nfc#tech#IsoDep#transceive_E@ if it exceeds FSD/FSC limits. Use @B_android#nfc#tech#IsoDep#getMaxTransceiveLength_E@ to retrieve the maximum number of bytes that can be sent with @B_android#nfc#tech#IsoDep#transceive_E@. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#IsoDep#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public byte[] transceive (byte[] data)"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 10", "FullName": "public Tag getTag ()"}, "getHiLayerResponse()": {"Returns": [["byte[]", "ISO-DEP historical bytes, or null if this is not a @B_android#nfc#tech#NfcB_E@ tag"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the higher layer response bytes for @B_android#nfc#tech#NfcB_E@ tags. Does not cause any RF activity and does not block. The higher layer response bytes can be used to help identify a tag. They are present only on @B_android#nfc#tech#IsoDep_E@ tags that are based on @B_android#nfc#tech#NfcB_E@ RF technology. If this tag is not @B_android#nfc#tech#NfcB_E@ then null is returned. In ISO 14443-4 terminology, the higher layer bytes are a subset of the ATTRIB response.", "history": "Added in API level 10", "FullName": "public byte[] getHiLayerResponse ()"}}, "Inheritance": [], "ClassName": "android.nfc.tech.IsoDep", "ClassDesc": "Provides access to ISO-DEP (ISO 14443-4) properties and I/O operations on a @B_android#nfc#Tag_E@. Acquire an @B_android#nfc#tech#IsoDep_E@ object using @B_android#nfc#tech#IsoDep#get_E@. The primary ISO-DEP I/O operation is @B_android#nfc#tech#IsoDep#transceive_E@. Applications must implement their own protocol stack on top of @B_android#nfc#tech#IsoDep#transceive_E@. Tags that enumerate the @B_android#nfc#tech#IsoDep_E@ technology in @B_android#nfc#Tag#getTechList_E@ will also enumerate @B_android#nfc#tech#NfcA_E@ or @B_android#nfc#tech#NfcB_E@ (since IsoDep builds on top of either of these). @B_android#Manifest#permission#NFC_E@ permission."}