{"Functions": {"AlertDialog(android.content.Context,boolean,android.content.DialogInterface.OnCancelListener)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the parent context"], ["boolean", "boolean no parameter comment"], ["@B_android#content#DialogInterface#OnCancelListener_E@", "DialogInterface.OnCancelListener no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#Theme_alertDialogTheme_E@"], "Permissions": [], "Description": "Creates an alert dialog that uses the default alert dialog theme and a custom cancel listener. This is functionally identical to: The default alert dialog theme is defined by @B_android#R#attr#alertDialogTheme_E@ within the parent context's theme.", "history": "Added in API level 1", "FullName": "protected AlertDialog (Context context, boolean cancelable, DialogInterface.OnCancelListener cancelListener)"}, "setIconAttribute(int)": {"Returns": [], "Parameters": [["int", "int: ID of a theme attribute that points to a drawable resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set an icon as supplied by a theme attribute. e.g. android.R.attr.alertDialogIcon", "history": "Added in API level 11", "FullName": "public void setIconAttribute (int attrId)"}, "AlertDialog(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the parent context"], ["int", "int: the resource ID of the theme against which to inflate this dialog, or 0 to use the parent context's default alert dialog theme"]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#Theme_alertDialogTheme_E@"], "Permissions": [], "Description": "Creates an alert dialog that uses an explicit theme resource. The specified theme resource (themeResId) is applied on top of the parent context's theme. It may be specified as a style resource containing a fully-populated theme, such as @B_android#R#style#Theme_Material_Dialog_E@, to replace all attributes in the parent context's theme including primary and accent colors. To preserve attributes such as primary and accent colors, the themeResId may instead be specified as an overlay theme such as @B_android#R#style#ThemeOverlay_Material_Dialog_E@. This will override only the window attributes necessary to style the alert window as a dialog. Alternatively, the themeResId may be specified as 0 to use the parent context's resolved value for @B_android#R#attr#alertDialogTheme_E@.", "history": "added in API level 1", "FullName": "protected AlertDialog (Context context, int themeResId)"}, "setButton2(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to display in button 2."], ["@B_android#content#DialogInterface#OnClickListener_E@", "DialogInterface.OnClickListener: The @B_android#content#DialogInterface#OnClickListener_E@ to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_NEGATIVE_E@ Set a listener to be invoked when button 2 of the dialog is pressed.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton2 (CharSequence text, DialogInterface.OnClickListener listener)"}, "setIcon(android.graphics.drawable.Drawable)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Drawable_E@", "Drawable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setIcon (Drawable icon)"}, "getButton(int)": {"Returns": [["@B_android#widget#Button_E@", "The button from the dialog, or null if a button does not exist."]], "Parameters": [["int", "int: The identifier of the button that should be returned. For example, this can be @B_android#content#DialogInterface#BUTTON_POSITIVE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets one of the buttons used in the dialog. Returns null if the specified button does not exist or the dialog has not yet been fully created (for example, via @B_android#app#Dialog#show_E@ or @B_android#app#Dialog#create_E@).", "history": "Added in API level 3", "FullName": "public Button getButton (int whichButton)"}, "setInverseBackgroundForced(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setInverseBackgroundForced (boolean forceInverseBackground)"}, "onCreate(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: If this dialog is being reinitialized after a the hosting activity was previously shut down, holds the result from the most recent call to @B_android#app#Dialog#onSaveInstanceState_E@, or null if this is the first time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Similar to @B_android#app#Activity#onCreate_E@, you should initialize your dialog in this method, including calling @B_android#app#Dialog#setContentView_E@.", "history": "Added in API level 1", "FullName": "protected void onCreate (Bundle savedInstanceState)"}, "setButton(java.lang.CharSequence,android.os.Message)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#os#Message_E@", "Message no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_POSITIVE_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton (CharSequence text, Message msg)"}, "setView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the view to display in that dialog.", "history": "Added in API level 1", "FullName": "public void setView (View view)"}, "AlertDialog(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the parent context"], ["int", "int: the resource ID of the theme against which to inflate this dialog, or 0 to use the parent context's default alert dialog theme"]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#Theme_alertDialogTheme_E@"], "Permissions": [], "Description": "Creates an alert dialog that uses an explicit theme resource. The specified theme resource (themeResId) is applied on top of the parent context's theme. It may be specified as a style resource containing a fully-populated theme, such as @B_android#R#style#Theme_Material_Dialog_E@, to replace all attributes in the parent context's theme including primary and accent colors. To preserve attributes such as primary and accent colors, the themeResId may instead be specified as an overlay theme such as @B_android#R#style#ThemeOverlay_Material_Dialog_E@. This will override only the window attributes necessary to style the alert window as a dialog. Alternatively, the themeResId may be specified as 0 to use the parent context's resolved value for @B_android#R#attr#alertDialogTheme_E@.", "history": "Added in API level 1", "FullName": "protected AlertDialog (Context context, int themeResId)"}, "setButton(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to display in button 1."], ["@B_android#content#DialogInterface#OnClickListener_E@", "DialogInterface.OnClickListener: The @B_android#content#DialogInterface#OnClickListener_E@ to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_POSITIVE_E@ Set a listener to be invoked when button 1 of the dialog is pressed.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton (CharSequence text, DialogInterface.OnClickListener listener)"}, "setButton3(java.lang.CharSequence,android.content.DialogInterface.OnClickListener)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text to display in button 3."], ["@B_android#content#DialogInterface#OnClickListener_E@", "DialogInterface.OnClickListener: The @B_android#content#DialogInterface#OnClickListener_E@ to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_NEUTRAL_E@ Set a listener to be invoked when button 3 of the dialog is pressed.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton3 (CharSequence text, DialogInterface.OnClickListener listener)"}, "getListView()": {"Returns": [["@B_android#widget#ListView_E@", "The @B_android#widget#ListView_E@ from the dialog."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the list view used in the dialog.", "history": "Added in API level 3", "FullName": "public ListView getListView ()"}, "setIcon(int)": {"Returns": [], "Parameters": [["int", "int: the resourceId of the drawable to use as the icon or 0 if you don't want an icon."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set resId to 0 if you don't want an icon.", "history": "Added in API level 1", "FullName": "public void setIcon (int resId)"}, "onKeyUp(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A key was released. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to close the dialog.", "history": "added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "onKeyDown(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A key was pressed down. If the focused view didn't want this event, this method is called. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to later handle them in @B_android#app#Dialog#onKeyUp_E@.", "history": "Added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "onKeyDown(int, android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: Description of the key event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A key was pressed down. If the focused view didn't want this event, this method is called. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to later handle them in @B_android#app#Dialog#onKeyUp_E@.", "history": "added in API level 1", "FullName": "public boolean onKeyDown (int keyCode, KeyEvent event)"}, "setButton2(java.lang.CharSequence,android.os.Message)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#os#Message_E@", "Message no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_NEGATIVE_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton2 (CharSequence text, Message msg)"}, "setButton(int,java.lang.CharSequence,android.content.DialogInterface.OnClickListener)": {"Returns": [], "Parameters": [["int", "int: Which button to set the listener on, can be one of @B_android#content#DialogInterface#BUTTON_POSITIVE_E@, @B_android#content#DialogInterface#BUTTON_NEGATIVE_E@, or @B_android#content#DialogInterface#BUTTON_NEUTRAL_E@"], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display in positive button."], ["@B_android#content#DialogInterface#OnClickListener_E@", "DialogInterface.OnClickListener: The @B_android#content#DialogInterface#OnClickListener_E@ to use."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a listener to be invoked when the positive button of the dialog is pressed.", "history": "Added in API level 3", "FullName": "public void setButton (int whichButton, CharSequence text, DialogInterface.OnClickListener listener)"}, "setView(android.view.View, int, int, int, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to show in the content area of the dialog"], ["int", "int: Extra space to appear to the left of view"], ["int", "int: Extra space to appear above view"], ["int", "int: Extra space to appear to the right of view"], ["int", "int: Extra space to appear below view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the view to display in that dialog, specifying the spacing to appear around that view.", "history": "added in API level 3", "FullName": "public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)"}, "setView(android.view.View,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view to show in the content area of the dialog"], ["int", "int: Extra space to appear to the left of view"], ["int", "int: Extra space to appear above view"], ["int", "int: Extra space to appear to the right of view"], ["int", "int: Extra space to appear below view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the view to display in that dialog, specifying the spacing to appear around that view.", "history": "Added in API level 3", "FullName": "public void setView (View view, int viewSpacingLeft, int viewSpacingTop, int viewSpacingRight, int viewSpacingBottom)"}, "setMessage(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setMessage (CharSequence message)"}, "setCustomTitle(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#app#AlertDialog#Builder#setCustomTitle_E@"], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void setCustomTitle (View customTitleView)"}, "setButton3(java.lang.CharSequence,android.os.Message)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#os#Message_E@", "Message no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#app#AlertDialog#setButton_E@ with @B_android#content#DialogInterface#BUTTON_NEUTRAL_E@.", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public void setButton3 (CharSequence text, Message msg)"}, "onKeyUp(int,android.view.KeyEvent)": {"Returns": [["boolean", "If you handled the event, return true. If you want to allow the event to be handled by the next receiver, return false."]], "Parameters": [["int", "int: The value in event.getKeyCode()."], ["@B_android#view#KeyEvent_E@", "KeyEvent: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A key was released. Default implementation consumes @B_android#view#KeyEvent#KEYCODE_BACK_E@ and, as of @B_android#os#Build#VERSION_CODES#P_E@, @B_android#view#KeyEvent#KEYCODE_ESCAPE_E@ to close the dialog.", "history": "Added in API level 1", "FullName": "public boolean onKeyUp (int keyCode, KeyEvent event)"}, "setTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The new text to display in the title. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the title text for this dialog's window.", "history": "Added in API level 1", "FullName": "public void setTitle (CharSequence title)"}, "AlertDialog(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the parent context"]], "Throws": [], "SeeAlso": ["@B_android#R#styleable#Theme_alertDialogTheme_E@"], "Permissions": [], "Description": "Creates an alert dialog that uses the default alert dialog theme. The default alert dialog theme is defined by @B_android#R#attr#alertDialogTheme_E@ within the parent context's theme.", "history": "Added in API level 1", "FullName": "protected AlertDialog (Context context)"}, "setButton(int,java.lang.CharSequence,android.os.Message)": {"Returns": [], "Parameters": [["int", "int: Which button to set the message for, can be one of @B_android#content#DialogInterface#BUTTON_POSITIVE_E@, @B_android#content#DialogInterface#BUTTON_NEGATIVE_E@, or @B_android#content#DialogInterface#BUTTON_NEUTRAL_E@"], ["@B_java#lang#CharSequence_E@", "CharSequence: The text to display in positive button."], ["@B_android#os#Message_E@", "Message: The @B_android#os#Message_E@ to be sent when clicked."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set a message to be sent when a button is pressed.", "history": "Added in API level 3", "FullName": "public void setButton (int whichButton, CharSequence text, Message msg)"}}, "Inheritance": ["@B_android#app#Dialog_E@"], "ClassName": "android.app.AlertDialog", "ClassDesc": "A subclass of Dialog that can display one, two or three buttons. If you only want to display a String in this dialog box, use the setMessage() method. If you want to display a more complex view, look up the FrameLayout called \"custom\" and add your view to it: The AlertDialog class takes care of automatically setting @B_android#view#WindowManager#LayoutParams#FLAG_ALT_FOCUSABLE_IM_E@ for you based on whether any views in the dialog return true from @B_android#view#View#onCheckIsTextEditor_E@. Generally you want this set for a Dialog without text editors, so that it will be placed on top of the current input method UI. You can modify this behavior by forcing the flag to your desired mode after calling @B_android#app#AlertDialog#onCreate_E@."}