{"Functions": {"isRequestPinShortcutSupported()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#content#pm#ShortcutManager#requestPinShortcut_E@"], "Permissions": [], "Description": "Return TRUE if the app is running on a device whose default launcher supports @B_android#content#pm#ShortcutManager#requestPinShortcut_E@. The return value may change in subsequent calls if the user changes the default launcher app. https:##developer#android#com@B_android#support#v4#content#pm#ShortcutManagerCompat#isRequestPinShortcutSupported_E@, which supports Android versions lower than @B_android#os#Build#VERSION_CODES#O_E@ using the legacy private intent com.android.launcher.action.INSTALL_SHORTCUT.", "history": "Added in API level 26", "FullName": "public boolean isRequestPinShortcutSupported ()"}, "getManifestShortcuts()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Return all static (manifest) shortcuts from the caller app. This API is intended to be used for examining what shortcuts are currently published. Re-publishing returned @B_android#content#pm#ShortcutInfo_E@s via APIs such as @B_android#content#pm#ShortcutManager#setDynamicShortcuts_E@ may cause loss of information such as icons.", "history": "Added in API level 25", "FullName": "public List<ShortcutInfo> getManifestShortcuts ()"}, "getPinnedShortcuts()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Return all pinned shortcuts from the caller app. This API is intended to be used for examining what shortcuts are currently published. Re-publishing returned @B_android#content#pm#ShortcutInfo_E@s via APIs such as @B_android#content#pm#ShortcutManager#setDynamicShortcuts_E@ may cause loss of information such as icons.", "history": "Added in API level 25", "FullName": "public List<ShortcutInfo> getPinnedShortcuts ()"}, "enableShortcuts(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If trying to enable immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Re-enable pinned shortcuts that were previously disabled. If the target shortcuts are already enabled, this method does nothing.", "history": "Added in API level 25", "FullName": "public void enableShortcuts (List<String> shortcutIds)"}, "isRateLimitingActive()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Return true when rate-limiting is active for the caller app. For details, see", "history": "Added in API level 25", "FullName": "public boolean isRateLimitingActive ()"}, "getIconMaxHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the max height for icons, in pixels.", "history": "Added in API level 25", "FullName": "public int getIconMaxHeight ()"}, "removeDynamicShortcuts(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Delete dynamic shortcuts by ID.", "history": "Added in API level 25", "FullName": "public void removeDynamicShortcuts (List<String> shortcutIds)"}, "requestPinShortcut(android.content.pm.ShortcutInfo,android.content.IntentSender)": {"Returns": [["boolean", "TRUE if the launcher supports this feature. Note the API will return without waiting for the user to respond, so getting TRUE from this API does *not* mean the shortcut was pinned successfully. FALSE if the launcher doesn't support this feature."]], "Parameters": [["@B_android#content#pm#ShortcutInfo_E@", "ShortcutInfo: Shortcut to pin. If an app wants to pin an existing (either static or dynamic) shortcut, then it only needs to have an ID. Although other fields don't have to be set, the target shortcut must be enabled. If it's a new shortcut, all the mandatory fields, such as a short label, must be set. This value must never be null."], ["@B_android#content#IntentSender_E@", "IntentSender: If not null, this intent will be sent when the shortcut is pinned. Use @B_android#app#PendingIntent#getIntentSender_E@ to create an @B_android#content#IntentSender_E@. To avoid background execution limits, use an unexported, manifest-declared receiver. For more details, see Creating pinned shortcuts. This value may be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if a shortcut with the same ID exists and is disabled."], ["@B_java#lang#IllegalStateException_E@", "The caller doesn't have a foreground activity or a foreground service, or the device is locked."]], "SeeAlso": ["@B_android#content#pm#ShortcutManager#isRequestPinShortcutSupported_E@", "@B_android#content#IntentSender_E@", "@B_android#app#PendingIntent#getIntentSender_E@"], "Permissions": [], "Description": "Request to create a pinned shortcut. The default launcher will receive this request and ask the user for approval. If the user approves it, the shortcut will be created, and resultIntent will be sent. If a request is denied by the user, however, no response will be sent to the caller. Only apps with a foreground activity or a foreground service can call this method. Otherwise, it'll throw @B_java#lang#IllegalStateException_E@. It's up to the launcher to decide how to handle previous pending requests when the same package calls this API multiple times in a row. One possible strategy is to ignore any previous requests. https:##developer#android#com@B_android#support#v4#content#pm#ShortcutManagerCompat#requestPinShortcut_E@, which supports Android versions lower than @B_android#os#Build#VERSION_CODES#O_E@ using the legacy private intent com.android.launcher.action.INSTALL_SHORTCUT.", "history": "Added in API level 26", "FullName": "public boolean requestPinShortcut (ShortcutInfo shortcut, IntentSender resultIntent)"}, "getDynamicShortcuts()": {"Returns": [["@B_java#util#List_E@", "This value will never be null."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Return all dynamic shortcuts from the caller app. This API is intended to be used for examining what shortcuts are currently published. Re-publishing returned @B_android#content#pm#ShortcutInfo_E@s via APIs such as @B_android#content#pm#ShortcutManager#setDynamicShortcuts_E@ may cause loss of information such as icons.", "history": "Added in API level 25", "FullName": "public List<ShortcutInfo> getDynamicShortcuts ()"}, "getIconMaxWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the max width for icons, in pixels. Note that this method returns max width of icon's visible part. Hence, it does not take into account the inset introduced by @B_android#graphics#drawable#AdaptiveIconDrawable_E@. To calculate bitmap image to function as @B_android#graphics#drawable#AdaptiveIconDrawable_E@, multiply 1 + 2 * @B_android#graphics#drawable#AdaptiveIconDrawable#getExtraInsetFraction_E@ to the returned size.", "history": "Added in API level 25", "FullName": "public int getIconMaxWidth ()"}, "disableShortcuts(java.util.List<java.lang.String>,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If trying to disable immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Disable pinned shortcuts, showing the user a custom error message when they try to select the disabled shortcuts. For more details, read", "history": "Added in API level 25", "FullName": "public void disableShortcuts (List<String> shortcutIds, CharSequence disabledMessage)"}, "reportShortcutUsed(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Apps that publish shortcuts should call this method whenever the user selects the shortcut containing the given ID or when the user completes an action in the app that is equivalent to selecting the shortcut. For more details, read about The information is accessible via @B_android#app#usage#UsageStatsManager#queryEvents_E@ Typically, launcher apps use this information to build a prediction model so that they can promote the shortcuts that are likely to be used at the moment.", "history": "Added in API level 25", "FullName": "public void reportShortcutUsed (String shortcutId)"}, "addDynamicShortcuts(java.util.List<android.content.pm.ShortcutInfo>)": {"Returns": [["boolean", "true if the call has succeeded. false if the call is rate-limited."]], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#content#pm#ShortcutManager#getMaxShortcutCountPerActivity_E@ is exceeded, or when trying to update immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Publish the list of dynamic shortcuts. If there are already dynamic or pinned shortcuts with the same IDs, each mutable shortcut is updated. This API will be rate-limited.", "history": "Added in API level 25", "FullName": "public boolean addDynamicShortcuts (List<ShortcutInfo> shortcutInfoList)"}, "updateShortcuts(java.util.List<android.content.pm.ShortcutInfo>)": {"Returns": [["boolean", "true if the call has succeeded. false if the call is rate-limited."]], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If trying to update immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Update all existing shortcuts with the same IDs. Target shortcuts may be pinned and/or dynamic, but they must not be immutable. This API will be rate-limited.", "history": "Added in API level 25", "FullName": "public boolean updateShortcuts (List<ShortcutInfo> shortcutInfoList)"}, "setDynamicShortcuts(java.util.List<android.content.pm.ShortcutInfo>)": {"Returns": [["boolean", "true if the call has succeeded. false if the call is rate-limited."]], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if @B_android#content#pm#ShortcutManager#getMaxShortcutCountPerActivity_E@ is exceeded, or when trying to update immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Publish the list of shortcuts. All existing dynamic shortcuts from the caller app will be replaced. If there are already pinned shortcuts with the same IDs, the mutable pinned shortcuts are updated. This API will be rate-limited.", "history": "Added in API level 25", "FullName": "public boolean setDynamicShortcuts (List<ShortcutInfo> shortcutInfoList)"}, "removeAllDynamicShortcuts()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Delete all dynamic shortcuts from the caller app.", "history": "Added in API level 25", "FullName": "public void removeAllDynamicShortcuts ()"}, "disableShortcuts(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If trying to disable immutable shortcuts."], ["@B_java#lang#IllegalStateException_E@", "when the user is locked."]], "SeeAlso": [], "Permissions": [], "Description": "Disable pinned shortcuts. For more details, read", "history": "Added in API level 25", "FullName": "public void disableShortcuts (List<String> shortcutIds)"}, "getMaxShortcutCountPerActivity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of static and dynamic shortcuts that each launcher icon can have at a time.", "history": "Added in API level 25", "FullName": "public int getMaxShortcutCountPerActivity ()"}, "createShortcutResultIntent(android.content.pm.ShortcutInfo)": {"Returns": [["@B_android#content#Intent_E@", "The intent that should be set as the result for the calling activity, or null if the current launcher doesn't support shortcuts."]], "Parameters": [["@B_android#content#pm#ShortcutInfo_E@", "ShortcutInfo: New shortcut to pin. If an app wants to pin an existing (either dynamic or manifest) shortcut, then it only needs to have an ID, and other fields don't have to be set, in which case, the target shortcut must be enabled. If it's a new shortcut, all the mandatory fields, such as a short label, must be set. This value must never be null."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if a shortcut with the same ID exists and is disabled."]], "SeeAlso": ["@B_android#content#Intent_E@"], "Permissions": [], "Description": "Returns an Intent which can be used by the default launcher to pin a shortcut containing the given @B_android#content#pm#ShortcutInfo_E@. This method should be used by an Activity to set a result in response to @B_android#content#Intent#ACTION_CREATE_SHORTCUT_E@.", "history": "Added in API level 26", "FullName": "public Intent createShortcutResultIntent (ShortcutInfo shortcut)"}}, "Inheritance": [], "ClassName": "android.content.pm.ShortcutManager", "ClassDesc": "ShortcutManager executes operations on an app's set of ShortcutManager class that you can use to create and manage sets of shortcuts. To learn about methods that retrieve information about a single shortcut\u2014including identifiers, type, and status\u2014read the @B_android#content#pm#ShortcutInfo_E@ reference. For guidance about using shortcuts, see"}