{"Functions": {"getModifiers()": {"Returns": [["int", "The modifier flags for this parameter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the modifier flags for this the parameter represented by this Parameter object.", "history": "Added in API level 26", "FullName": "public int getModifiers ()"}, "getDeclaredAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if directly or indirectly present on this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation(s) for the specified type if such annotations are either directly present or indirectly present. This method ignores inherited annotations. If there are no specified annotations directly or indirectly present on this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getDeclaredAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation if one is present. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public T[] getDeclaredAnnotationsByType (Class<T> annotationClass)"}, "getDeclaringExecutable()": {"Returns": [["@B_java#lang#reflect#Executable_E@", "The Executable declaring this parameter."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Executable which declares this parameter.", "history": "Added in API level 26", "FullName": "public Executable getDeclaringExecutable ()"}, "isImplicit()": {"Returns": [["boolean", "true if and only if this parameter is implicitly declared as defined by The Java\u2122 Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this parameter is implicitly declared in source code; returns false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isImplicit ()"}, "isNamePresent()": {"Returns": [["boolean", "true if and only if the parameter has a name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the parameter has a name; returns false otherwise. Whether a parameter has a name is determined by compiler options and whether the parameter is synthesized.", "history": "Added in API level 26", "FullName": "public boolean isNamePresent ()"}, "getDeclaredAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if directly present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is directly present, else null. This method ignores inherited annotations. (Returns null if no annotations are directly present on this element.)", "history": "Added in API level 26", "FullName": "public T getDeclaredAnnotation (Class<T> annotationClass)"}, "getAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are present on this element. If there are no annotations present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public Annotation[] getAnnotations ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A string representation of the parameter and associated information."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string describing this parameter. The format is the modifiers for the parameter, if any, in canonical order as recommended by", "history": "Added in API level 26", "FullName": "public String toString ()"}, "isVarArgs()": {"Returns": [["boolean", "true if an only if this parameter represents a variable argument list."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this parameter represents a variable argument list; returns false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isVarArgs ()"}, "isSynthetic()": {"Returns": [["boolean", "true if and only if this parameter is a synthetic construct as defined by The Java\u2122 Language Specification."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this parameter is neither implicitly nor explicitly declared in source code; returns false otherwise.", "history": "Added in API level 26", "FullName": "public boolean isSynthetic ()"}, "getType()": {"Returns": [["@B_java#lang#Class_E@", "a Class object identifying the declared type of the parameter represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Class object that identifies the declared type for the parameter represented by this Parameter object.", "history": "Added in API level 26", "FullName": "public Class<?> getType ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "Whether or not this is equal to the argument."]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares based on the executable and the index.", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "getAnnotationsByType(java.lang.Class<T>)": {"Returns": [["T[]", "all this element's annotations for the specified annotation type if associated with this element, else an array of length zero"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are associated with this element. If there are no annotations associated with this element, the return value is an array of length 0. The difference between this method and @B_java#lang#reflect#AnnotatedElement#getAnnotation_E@ is that this method detects if its argument is a repeatable annotation type (JLS 9.6), and if so, attempts to find one or more annotations of that type by \"looking through\" a container annotation. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public T[] getAnnotationsByType (Class<T> annotationClass)"}, "getDeclaredAnnotations()": {"Returns": [["@B_java#lang#annotation#Annotation_E@", "annotations directly present on this element"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns annotations that are directly present on this element. This method ignores inherited annotations. If there are no annotations directly present on this element, the return value is an array of length 0. The caller of this method is free to modify the returned array; it will have no effect on the arrays returned to other callers.", "history": "Added in API level 26", "FullName": "public Annotation[] getDeclaredAnnotations ()"}, "getParameterizedType()": {"Returns": [["@B_java#lang#reflect#Type_E@", "a Type object identifying the parameterized type of the parameter represented by this object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Type object that identifies the parameterized type for the parameter represented by this Parameter object.", "history": "Added in API level 26", "FullName": "public Type getParameterizedType ()"}, "getAnnotation(java.lang.Class<T>)": {"Returns": [["T", "this element's annotation for the specified annotation type if present on this element, else null"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the annotation type"]], "Throws": [["@B_java#lang#NullPointerException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns this element's annotation for the specified type if such an annotation is present, else null.", "history": "Added in API level 26", "FullName": "public T getAnnotation (Class<T> annotationClass)"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "The name of the parameter, either provided by the class file or synthesized if the class file does not provide a name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the parameter. If the parameter's name is", "history": "Added in API level 26", "FullName": "public String getName ()"}, "hashCode()": {"Returns": [["int", "A hash code based on the executable's hash code."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code based on the executable's hash code and the index.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.lang.reflect.Parameter", "ClassDesc": "Information about method parameters. A Parameter provides information about method parameters, including its name and modifiers. It also provides an alternate means of obtaining attributes for the parameter."}