{"Functions": {"skip(long)": {"Returns": [["long", "The number of characters actually skipped"]], "Parameters": [["long", "long: The number of characters to skip"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"], ["@B_java#lang#IllegalArgumentException_E@", "If n is negative"]], "SeeAlso": [], "Permissions": [], "Description": "Skip characters.", "history": "Added in API level 1", "FullName": "public long skip (long n)"}, "getLineNumber()": {"Returns": [["int", "The current line number"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#LineNumberReader#setLineNumber_E@"], "Permissions": [], "Description": "Get the current line number.", "history": "Added in API level 1", "FullName": "public int getLineNumber ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If the stream has not been marked, or if the mark has been invalidated"]], "SeeAlso": [], "Permissions": [], "Description": "Reset the stream to the most recent mark.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "read(char[], int, int)": {"Returns": [["int", "The number of bytes read, or -1 if the end of the stream has already been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Read characters into a portion of an array. Whenever a", "history": "added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "LineNumberReader(java.io.Reader, int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader object to provide the underlying stream"], ["int", "int: An int specifying the size of the buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new line-numbering reader, reading characters into a buffer of the given size.", "history": "added in API level 1", "FullName": "public LineNumberReader (Reader in, int sz)"}, "read()": {"Returns": [["int", "The character read, or -1 if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Read a single character.", "history": "Added in API level 1", "FullName": "public int read ()"}, "LineNumberReader(java.io.Reader,int)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader object to provide the underlying stream"], ["int", "int: An int specifying the size of the buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new line-numbering reader, reading characters into a buffer of the given size.", "history": "Added in API level 1", "FullName": "public LineNumberReader (Reader in, int sz)"}, "mark(int)": {"Returns": [], "Parameters": [["int", "int: Limit on the number of characters that may be read while still preserving the mark. After reading this many characters, attempting to reset the stream may fail."]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Mark the present position in the stream. Subsequent calls to reset() will attempt to reposition the stream to this point, and will also reset the line number appropriately.", "history": "Added in API level 1", "FullName": "public void mark (int readAheadLimit)"}, "read(char[],int,int)": {"Returns": [["int", "The number of bytes read, or -1 if the end of the stream has already been reached"]], "Parameters": [["char[]", "char: Destination buffer"], ["int", "int: Offset at which to start storing characters"], ["int", "int: Maximum number of characters to read"]], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Read characters into a portion of an array. Whenever a", "history": "Added in API level 1", "FullName": "public int read (char[] cbuf, int off, int len)"}, "setLineNumber(int)": {"Returns": [], "Parameters": [["int", "int: An int specifying the line number"]], "Throws": [], "SeeAlso": ["@B_java#io#LineNumberReader#getLineNumber_E@"], "Permissions": [], "Description": "Set the current line number.", "history": "Added in API level 1", "FullName": "public void setLineNumber (int lineNumber)"}, "readLine()": {"Returns": [["@B_java#lang#String_E@", "A String containing the contents of the line, not including any line termination characters, or null if the end of the stream has been reached"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Read a line of text. Whenever a", "history": "Added in API level 1", "FullName": "public String readLine ()"}, "LineNumberReader(java.io.Reader)": {"Returns": [], "Parameters": [["@B_java#io#Reader_E@", "Reader: A Reader object to provide the underlying stream"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new line-numbering reader, using the default input-buffer size.", "history": "Added in API level 1", "FullName": "public LineNumberReader (Reader in)"}}, "Inheritance": ["@B_java#io#Reader_E@", "@B_java#io#BufferedReader_E@"], "ClassName": "java.io.LineNumberReader", "ClassDesc": "A buffered character-input stream that keeps track of line numbers. This class defines methods @B_java#io#LineNumberReader#setLineNumber_E@ and @B_java#io#LineNumberReader#getLineNumber_E@ for setting and getting the current line number respectively. By default, line numbering begins at 0. This number increments at every A line is considered to be"}