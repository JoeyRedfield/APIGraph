{"Functions": {"parameterArray()": {"Returns": [["@B_java#lang#Class_E@", "the parameter types (as a fresh copy if necessary)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Presents the parameter types as an array (a convenience method). Changes to the array will not result in changes to the type.", "history": "Added in API level 26", "FullName": "public Class[]<?> parameterArray ()"}, "dropParameterTypes(int, int)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) removed"]], "Parameters": [["int", "int: the index (zero-based) of the first parameter type to remove"], ["int", "int: the index (greater than start) of the first parameter type after not to remove"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start is negative or greater than parameterCount() or if end is negative or greater than parameterCount() or if start is greater than end"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with some parameter types omitted. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "added in API level 26", "FullName": "public MethodType dropParameterTypes (int start, int end)"}, "parameterCount()": {"Returns": [["int", "the number of parameter types"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of parameter types in this method type.", "history": "Added in API level 26", "FullName": "public int parameterCount ()"}, "insertParameterTypes(int,java.lang.Class<?>...)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) inserted"]], "Parameters": [["int", "int: the position (zero-based) of the inserted parameter type(s)"], ["@B_java#lang#Class_E@", "Class: zero or more new parameter types to insert into the parameter list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is negative or greater than parameterCount()"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypesToInsert is void.class or if the resulting method type would have more than 255 parameter slots"], ["@B_java#lang#NullPointerException_E@", "if ptypesToInsert or any of its elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with additional parameter types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType insertParameterTypes (int num, Class...<?> ptypesToInsert)"}, "insertParameterTypes(int,java.util.List<java.lang.Class<?>>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) inserted"]], "Parameters": [["int", "int: the position (zero-based) of the inserted parameter type(s)"], ["@B_java#util#List_E@", "List: zero or more new parameter types to insert into the parameter list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is negative or greater than parameterCount()"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypesToInsert is void.class or if the resulting method type would have more than 255 parameter slots"], ["@B_java#lang#NullPointerException_E@", "if ptypesToInsert or any of its elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with additional parameter types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType insertParameterTypes (int num, List<Class<?>> ptypesToInsert)"}, "unwrap()": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a version of the original type with all wrapper types replaced"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts all wrapper types to their corresponding primitive types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All primitive types (including void) will remain unchanged. A return type of java.lang.Void is changed to void.", "history": "Added in API level 26", "FullName": "public MethodType unwrap ()"}, "erase()": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a version of the original type with all reference types replaced"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Erases all reference types to Object. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All primitive types (including void) will remain unchanged.", "history": "Added in API level 26", "FullName": "public MethodType erase ()"}, "genericMethodType(int,boolean)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments"]], "Parameters": [["int", "int: number of parameters (excluding the final array parameter if any)"], ["boolean", "boolean: whether there will be a trailing array parameter, of type Object[]"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if objectArgCount is negative or greater than 255 (or 254, if finalArray is true)"]], "SeeAlso": ["@B_java#lang#invoke#MethodType#genericMethodType_E@"], "Permissions": [], "Description": "Finds or creates a method type whose components are Object with an optional trailing Object[] array. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All parameters and the return type will be Object, except the final array parameter if any, which will be Object[].", "history": "Added in API level 26", "FullName": "public static MethodType genericMethodType (int objectArgCount, boolean finalArray)"}, "appendParameterTypes(java.lang.Class<?>...)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) appended"]], "Parameters": [["@B_java#lang#Class_E@", "Class: zero or more new parameter types to insert after the end of the parameter list"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypesToInsert is void.class or if the resulting method type would have more than 255 parameter slots"], ["@B_java#lang#NullPointerException_E@", "if ptypesToInsert or any of its elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with additional parameter types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType appendParameterTypes (Class...<?> ptypesToInsert)"}, "changeParameterType(int,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter changed"]], "Parameters": [["int", "int: the index (zero-based) of the parameter type to change"], ["@B_java#lang#Class_E@", "Class: a new parameter type to replace the old one with"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is not a valid index into parameterArray()"], ["@B_java#lang#IllegalArgumentException_E@", "if nptype is void.class"], ["@B_java#lang#NullPointerException_E@", "if nptype is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with a single different parameter type. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType changeParameterType (int num, Class<?> nptype)"}, "hasPrimitives()": {"Returns": [["boolean", "true if any of the types are primitives"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports if this type contains a primitive argument or return value. The return type void counts as a primitive.", "history": "Added in API level 26", "FullName": "public boolean hasPrimitives ()"}, "appendParameterTypes(java.util.List<java.lang.Class<?>>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) appended"]], "Parameters": [["@B_java#util#List_E@", "List: zero or more new parameter types to insert after the end of the parameter list"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypesToInsert is void.class or if the resulting method type would have more than 255 parameter slots"], ["@B_java#lang#NullPointerException_E@", "if ptypesToInsert or any of its elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with additional parameter types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType appendParameterTypes (List<Class<?>> ptypesToInsert)"}, "generic()": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a version of the original type with all types replaced"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts all types, both reference and primitive, to Object. Convenience method for @B_java#lang#invoke#MethodType#genericMethodType_E@. The expression type.wrap().erase() produces the same value as type.generic().", "history": "Added in API level 26", "FullName": "public MethodType generic ()"}, "dropParameterTypes(int,int)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) removed"]], "Parameters": [["int", "int: the index (zero-based) of the first parameter type to remove"], ["int", "int: the index (greater than start) of the first parameter type after not to remove"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start is negative or greater than parameterCount() or if end is negative or greater than parameterCount() or if start is greater than end"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with some parameter types omitted. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType dropParameterTypes (int start, int end)"}, "methodType(java.lang.Class<?>,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given return value and parameter type"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#lang#Class_E@", "Class: the parameter type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptype0 is null"], ["@B_java#lang#IllegalArgumentException_E@", "if ptype0 is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. The resulting method has the single given parameter type.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, Class<?> ptype0)"}, "methodType(java.lang.Class<?>,java.lang.Class<?>,java.lang.Class<?>...)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given components"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#lang#Class_E@", "Class: the first parameter type"], ["@B_java#lang#Class_E@", "Class: the remaining parameter types"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptype0 or ptypes or any element of ptypes is null"], ["@B_java#lang#IllegalArgumentException_E@", "if ptype0 or ptypes or any element of ptypes is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. The leading parameter type is prepended to the remaining array.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, Class<?> ptype0, Class...<?> ptypes)"}, "changeReturnType(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the return type change"]], "Parameters": [["@B_java#lang#Class_E@", "Class: a return parameter type to replace the old one with"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if nrtype is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with a different return type. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public MethodType changeReturnType (Class<?> nrtype)"}, "hashCode()": {"Returns": [["int", "the hash code value for this method type"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#Object#hashCode_E@", "@B_java#lang#invoke#MethodType#equals_E@", "@B_java#util#List#hashCode_E@"], "Permissions": [], "Description": "Returns the hash code value for this method type. It is defined to be the same as the hashcode of a List whose elements are the return type followed by the parameter types.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}, "methodType(java.lang.Class<?>, java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given return value and parameter type"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#lang#Class_E@", "Class: the parameter type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptype0 is null"], ["@B_java#lang#IllegalArgumentException_E@", "if ptype0 is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. The resulting method has the single given parameter type.", "history": "added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, Class<?> ptype0)"}, "methodType(java.lang.Class<?>,java.util.List<java.lang.Class<?>>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given components"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#util#List_E@", "List: the parameter types"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptypes or any element of ptypes is null"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypes is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, List<Class<?>> ptypes)"}, "parameterList()": {"Returns": [["@B_java#util#List_E@", "the parameter types (as an immutable list)"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Presents the parameter types as a list (a convenience method). The list will be immutable.", "history": "Added in API level 26", "FullName": "public List<Class<?>> parameterList ()"}, "wrap()": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a version of the original type with all primitive types replaced"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts all primitive types to their corresponding wrapper types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All reference types (including wrapper types) will remain unchanged. A void return type is changed to the type java.lang.Void. The expression type.wrap().erase() produces the same value as type.generic().", "history": "Added in API level 26", "FullName": "public MethodType wrap ()"}, "genericMethodType(int)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a generally applicable method type, for all calls of the given argument count"]], "Parameters": [["int", "int: number of parameters"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if objectArgCount is negative or greater than 255"]], "SeeAlso": ["@B_java#lang#invoke#MethodType#genericMethodType_E@"], "Permissions": [], "Description": "Finds or creates a method type whose components are all Object. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All parameters and the return type will be Object.", "history": "Added in API level 26", "FullName": "public static MethodType genericMethodType (int objectArgCount)"}, "fromMethodDescriptorString(java.lang.String,java.lang.ClassLoader)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type matching the bytecode-level type descriptor"]], "Parameters": [["@B_java#lang#String_E@", "String: a bytecode-level type descriptor string \"(T...)T\""], ["@B_java#lang#ClassLoader_E@", "ClassLoader: the class loader in which to look up the types"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the string is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the string is not well-formed"], ["@B_java#lang#TypeNotPresentException_E@", "if a named type cannot be found"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates an instance of a method type, given the spelling of its bytecode descriptor. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. Any class or interface name embedded in the descriptor string will be resolved by calling @B_java#lang#ClassLoader#loadClass_E@ on the given loader (or if it is null, on the system class loader). Note that it is possible to encounter method types which cannot be constructed by this method, because their component types are not all reachable from a common class loader. This method is included for the benefit of applications that must generate bytecodes that process method handles and invokedynamic.", "history": "Added in API level 26", "FullName": "public static MethodType fromMethodDescriptorString (String descriptor, ClassLoader loader)"}, "methodType(java.lang.Class<?>,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given components"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the method type which supplies the parameter types"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptypes is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. The resulting method has the same parameter types as ptypes, and the specified return type.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, MethodType ptypes)"}, "changeParameterType(int, java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter changed"]], "Parameters": [["int", "int: the index (zero-based) of the parameter type to change"], ["@B_java#lang#Class_E@", "Class: a new parameter type to replace the old one with"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is not a valid index into parameterArray()"], ["@B_java#lang#IllegalArgumentException_E@", "if nptype is void.class"], ["@B_java#lang#NullPointerException_E@", "if nptype is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with a single different parameter type. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "added in API level 26", "FullName": "public MethodType changeParameterType (int num, Class<?> nptype)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the method type, of the form \"(PT0,PT1...)RT\". The string representation of a method type is a parenthesis enclosed, comma separated list of type names, followed immediately by the return type. Each type is represented by its @B_java#lang#Class#getSimpleName_E@.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to compare"]], "Throws": [], "SeeAlso": ["@B_java#lang#Object#equals_E@"], "Permissions": [], "Description": "Compares the specified object with this type for equality. That is, it returns", "history": "Added in API level 26", "FullName": "public boolean equals (Object x)"}, "methodType(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given return value"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with the given components. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. The resulting method has no parameter types.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype)"}, "genericMethodType(int, boolean)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a generally applicable method type, for all calls of the given fixed argument count and a collected array of further arguments"]], "Parameters": [["int", "int: number of parameters (excluding the final array parameter if any)"], ["boolean", "boolean: whether there will be a trailing array parameter, of type Object[]"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if objectArgCount is negative or greater than 255 (or 254, if finalArray is true)"]], "SeeAlso": ["@B_java#lang#invoke#MethodType#genericMethodType_E@"], "Permissions": [], "Description": "Finds or creates a method type whose components are Object with an optional trailing Object[] array. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@. All parameters and the return type will be Object, except the final array parameter if any, which will be Object[].", "history": "added in API level 26", "FullName": "public static MethodType genericMethodType (int objectArgCount, boolean finalArray)"}, "insertParameterTypes(int, java.lang.Class<?>...)": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "the same type, except with the selected parameter(s) inserted"]], "Parameters": [["int", "int: the position (zero-based) of the inserted parameter type(s)"], ["@B_java#lang#Class_E@", "Class: zero or more new parameter types to insert into the parameter list"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is negative or greater than parameterCount()"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypesToInsert is void.class or if the resulting method type would have more than 255 parameter slots"], ["@B_java#lang#NullPointerException_E@", "if ptypesToInsert or any of its elements is null"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates a method type with additional parameter types. Convenience method for @B_java#lang#invoke#MethodType#methodType_E@.", "history": "added in API level 26", "FullName": "public MethodType insertParameterTypes (int num, Class...<?> ptypesToInsert)"}, "returnType()": {"Returns": [["@B_java#lang#Class_E@", "the return type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the return type of this method type.", "history": "Added in API level 26", "FullName": "public Class<?> returnType ()"}, "toMethodDescriptorString()": {"Returns": [["@B_java#lang#String_E@", "the bytecode type descriptor representation"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Produces a bytecode descriptor representation of the method type. Note that this is not a strict inverse of @B_java#lang#invoke#MethodType#fromMethodDescriptorString_E@. Two distinct classes which share a common name but have different class loaders will appear identical when viewed within descriptor strings. This method is included for the benefit of applications that must generate bytecodes that process method handles and invokedynamic. @B_java#lang#invoke#MethodType#fromMethodDescriptorString_E@, because the latter requires a suitable class loader argument.", "history": "Added in API level 26", "FullName": "public String toMethodDescriptorString ()"}, "hasWrappers()": {"Returns": [["boolean", "true if any of the types are wrappers"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports if this type contains a wrapper argument or return value. Wrappers are types which box primitive values, such as @B_java#lang#Integer_E@. The reference type java.lang.Void counts as a wrapper, if it occurs as a return type.", "history": "Added in API level 26", "FullName": "public boolean hasWrappers ()"}, "parameterType(int)": {"Returns": [["@B_java#lang#Class_E@", "the selected parameter type"]], "Parameters": [["int", "int: the index (zero-based) of the desired parameter type"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if num is not a valid index into parameterArray()"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the parameter type at the specified index, within this method type.", "history": "Added in API level 26", "FullName": "public Class<?> parameterType (int num)"}, "methodType(java.lang.Class<?>,java.lang.Class<?>[])": {"Returns": [["@B_java#lang#invoke#MethodType_E@", "a method type with the given components"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the return type"], ["@B_java#lang#Class_E@", "Class: the parameter types"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if rtype or ptypes or any element of ptypes is null"], ["@B_java#lang#IllegalArgumentException_E@", "if any element of ptypes is void.class"]], "SeeAlso": [], "Permissions": [], "Description": "Finds or creates an instance of the given method type.", "history": "Added in API level 26", "FullName": "public static MethodType methodType (Class<?> rtype, Class[]<?> ptypes)"}}, "Inheritance": [], "ClassName": "java.lang.invoke.MethodType", "ClassDesc": "A method type represents the arguments and return type accepted and returned by a method handle, or the arguments and return type passed and expected by a method handle caller. Method types must be properly matched between a method handle and all its callers, and the JVM's operations enforce this matching at, specifically during calls to @B_java#lang#invoke#MethodHandle#invokeExact_E@ and @B_java#lang#invoke#MethodHandle#invoke_E@, and during execution of invokedynamic instructions. The structure is a return type accompanied by any number of parameter types. The types (primitive, void, and reference) are represented by @B_java#lang#Class_E@ objects. (For ease of exposition, we treat void as if it were a type. In fact, it denotes the absence of a return type.) All instances of MethodType are immutable. Two instances are completely interchangeable if they compare equal. Equality depends on pairwise correspondence of the return and parameter types and on nothing else. This type can be created only by factory methods. All factory methods may cache values, though caching is not guaranteed. Some factory methods are static, while others are virtual methods which modify precursor method types, e.g., by changing a selected parameter. Factory methods which operate on groups of parameter types are systematically presented in two versions, so that both Java arrays and Java lists can be used to work with groups of parameter types. The query methods parameterArray and parameterList also provide a choice between arrays and lists. MethodType objects are sometimes derived from bytecode instructions such as invokedynamic, specifically from the type descriptor strings associated with the instructions in a class file's constant pool. Like classes and strings, method types can also be represented directly in a class file's constant pool as constants. A method type may be loaded by an ldc instruction which refers to a suitable CONSTANT_MethodType constant pool entry. The entry refers to a CONSTANT_Utf8 spelling for the descriptor string. (For full details on method type constants, see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.) When the JVM materializes a MethodType from a descriptor string, all classes named in the descriptor must be accessible, and will be loaded. (But the classes need not be initialized, as is the case with a CONSTANT_Class.) This loading may occur at any time before the MethodType object is first derived."}