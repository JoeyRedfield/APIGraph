{"Functions": {"isMCOrgLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of organization-local scope, false if it is not of organization-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has organization scope.", "history": "Added in API level 1", "FullName": "public boolean isMCOrgLocal ()"}, "isMulticastAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is an IP multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is an IP multicast address. IP multicast address is a Class D address i.e first four bits of the address are 1110.", "history": "Added in API level 1", "FullName": "public boolean isMulticastAddress ()"}, "isMCLinkLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of link-local scope, false if it is not of link-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has link scope.", "history": "Added in API level 1", "FullName": "public boolean isMCLinkLocal ()"}, "getAddress()": {"Returns": [["byte[]", "the raw IP address of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw IP address of this InetAddress object. The result is in network byte order: the highest order byte of the address is in getAddress()[0].", "history": "Added in API level 1", "FullName": "public byte[] getAddress ()"}, "isSiteLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a site local address; or false if address is not a site local unicast address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is a site local address.", "history": "Added in API level 1", "FullName": "public boolean isSiteLocalAddress ()"}, "isMCGlobal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of global scope, false if it is not of global scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has global scope.", "history": "Added in API level 1", "FullName": "public boolean isMCGlobal ()"}, "getHostAddress()": {"Returns": [["@B_java#lang#String_E@", "the raw IP address in a string format."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the IP address string in textual presentation form.", "history": "Added in API level 1", "FullName": "public String getHostAddress ()"}, "isAnyLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the Inetaddress is a wildcard address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress in a wildcard address.", "history": "Added in API level 1", "FullName": "public boolean isAnyLocalAddress ()"}, "isLoopbackAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a loopback address; or false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is a loopback address.", "history": "Added in API level 1", "FullName": "public boolean isLoopbackAddress ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against."]], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress#getAddress_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same IP address as this object. Two instances of InetAddress represent the same IP address if the length of the byte arrays returned by getAddress is the same for both, and each of the array components is the same for the byte arrays.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "isMCSiteLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of site-local scope, false if it is not of site-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has site scope.", "history": "Added in API level 1", "FullName": "public boolean isMCSiteLocal ()"}, "isLinkLocalAddress()": {"Returns": [["boolean", "a boolean indicating if the InetAddress is a link local address; or false if address is not a link local unicast address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the InetAddress is an link local address.", "history": "Added in API level 1", "FullName": "public boolean isLinkLocalAddress ()"}, "isMCNodeLocal()": {"Returns": [["boolean", "a boolean indicating if the address has is a multicast address of node-local scope, false if it is not of node-local scope or it is not a multicast address"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Utility routine to check if the multicast address has node scope.", "history": "Added in API level 1", "FullName": "public boolean isMCNodeLocal ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this IP address."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hashcode for this IP address.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}}, "Inheritance": ["@B_java#net#InetAddress_E@"], "ClassName": "java.net.Inet4Address", "ClassDesc": "This class represents an Internet Protocol version 4 (IPv4) address. Defined by When four parts are specified, each is interpreted as a byte of data and assigned, from left to right, to the four bytes of an IPv4 address. When a three part address is specified, the last part is interpreted as a 16-bit quantity and placed in the right most two bytes of the network address. This makes the three part address format convenient for specifying Class B net- work addresses as 128.net.host. When a two part address is supplied, the last part is interpreted as a 24-bit quantity and placed in the right most three bytes of the network address. This makes the two part address format convenient for specifying Class A network addresses as net.host. When only one part is given, the value is stored directly in the network address without any byte rearrangement. For methods that return a textual representation as output value, the first form, i.e. a dotted-quad string, is used."}