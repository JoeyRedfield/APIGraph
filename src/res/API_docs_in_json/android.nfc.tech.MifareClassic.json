{"Functions": {"readBlock(int)": {"Returns": [["byte[]", "16 byte block"]], "Parameters": [["int", "int: index of block to read, starting from 0"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Read 16-byte block. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public byte[] readBlock (int blockIndex)"}, "blockToSector(int)": {"Returns": [["int", "sector index that contains the block"]], "Parameters": [["int", "int: index of block to lookup, starting from 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the sector that contains a given block. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int blockToSector (int blockIndex)"}, "getSectorCount()": {"Returns": [["int", "number of sectors"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of MIFARE Classic sectors. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getSectorCount ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Disable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object, and release resources. Also causes all blocked I/O operations on other thread to be canceled and return with @B_java#io#IOException_E@. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void close ()"}, "authenticateSectorWithKeyB(int, byte[])": {"Returns": [["boolean", "true on success, false on authentication failure"]], "Parameters": [["int", "int: index of sector to authenticate, starting from 0"], ["byte[]", "byte: 6-byte authentication key"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": ["_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Authenticate a sector with key B. Successful authentication of a sector with key B enables other I/O operations on that sector. The set of operations granted by key B depends on the ACL bits set in that sector. For more information see the MIFARE Classic specification on . A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public boolean authenticateSectorWithKeyB (int sectorIndex, byte[] key)"}, "authenticateSectorWithKeyB(int,byte[])": {"Returns": [["boolean", "true on success, false on authentication failure"]], "Parameters": [["int", "int: index of sector to authenticate, starting from 0"], ["byte[]", "byte: 6-byte authentication key"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Authenticate a sector with key B. Successful authentication of a sector with key B enables other I/O operations on that sector. The set of operations granted by key B depends on the ACL bits set in that sector. For more information see the MIFARE Classic specification on A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public boolean authenticateSectorWithKeyB (int sectorIndex, byte[] key)"}, "increment(int,int)": {"Returns": [], "Parameters": [["int", "int: index of block to increment, starting from 0"], ["int", "int: non-negative to increment by"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Increment a value block, storing the result in the temporary block on the tag. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void increment (int blockIndex, int value)"}, "transfer(int)": {"Returns": [], "Parameters": [["int", "int: index of block to copy to"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Copy from the temporary block to a value block. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void transfer (int blockIndex)"}, "getBlockCountInSector(int)": {"Returns": [["int", "number of blocks in the sector"]], "Parameters": [["int", "int: index of sector, starting from 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the number of blocks in the given sector. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getBlockCountInSector (int sectorIndex)"}, "transceive(byte[])": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [["byte[]", "byte no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": ["@B_android#nfc#tech#NfcA#transceive_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Send raw NfcA data to a tag and receive the response. This is equivalent to connecting to this tag via @B_android#nfc#tech#NfcA_E@ and calling @B_android#nfc#tech#NfcA#transceive_E@. Note that all MIFARE Classic tags are based on @B_android#nfc#tech#NfcA_E@ technology. Use @B_android#nfc#tech#MifareClassic#getMaxTransceiveLength_E@ to retrieve the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareClassic#transceive_E@. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public byte[] transceive (byte[] data)"}, "getMaxTransceiveLength()": {"Returns": [["int", "the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareClassic#transceive_E@."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of bytes that can be sent with @B_android#nfc#tech#MifareClassic#transceive_E@.", "history": "Added in API level 14", "FullName": "public int getMaxTransceiveLength ()"}, "restore(int)": {"Returns": [], "Parameters": [["int", "int: index of block to copy from"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Copy from a value block to the temporary block. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void restore (int blockIndex)"}, "getBlockCount()": {"Returns": [["int", "total number of blocks"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the total number of MIFARE Classic blocks. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getBlockCount ()"}, "authenticateSectorWithKeyA(int,byte[])": {"Returns": [["boolean", "true on success, false on authentication failure"]], "Parameters": [["int", "int: index of sector to authenticate, starting from 0"], ["byte[]", "byte: 6-byte authentication key"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Authenticate a sector with key A. Successful authentication of a sector with key A enables other I/O operations on that sector. The set of operations granted by key A key depends on the ACL bits set in that sector. For more information see the MIFARE Classic specification on A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public boolean authenticateSectorWithKeyA (int sectorIndex, byte[] key)"}, "getTimeout()": {"Returns": [["int", "timeout value in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Get the current @B_android#nfc#tech#MifareClassic#transceive_E@ timeout in milliseconds. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14", "FullName": "public int getTimeout ()"}, "authenticateSectorWithKeyA(int, byte[])": {"Returns": [["boolean", "true on success, false on authentication failure"]], "Parameters": [["int", "int: index of sector to authenticate, starting from 0"], ["byte[]", "byte: 6-byte authentication key"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": ["_E@"], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Authenticate a sector with key A. Successful authentication of a sector with key A enables other I/O operations on that sector. The set of operations granted by key A key depends on the ACL bits set in that sector. For more information see the MIFARE Classic specification on . A failed authentication attempt causes an implicit reconnection to the tag, so authentication to other sectors will be lost. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public boolean authenticateSectorWithKeyA (int sectorIndex, byte[] key)"}, "decrement(int,int)": {"Returns": [], "Parameters": [["int", "int: index of block to decrement, starting from 0"], ["int", "int: non-negative to decrement by"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Decrement a value block, storing the result in the temporary block on the tag. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void decrement (int blockIndex, int value)"}, "connect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Enable I/O operations to the tag from this @B_android#nfc#tech#TagTechnology_E@ object. May cause RF activity and may block. Must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ by calling @B_android#nfc#tech#TagTechnology#close_E@ from another thread. Only one @B_android#nfc#tech#TagTechnology_E@ object can be connected to a @B_android#nfc#Tag_E@ at a time. Applications must call @B_android#nfc#tech#TagTechnology#close_E@ when I/O operations are complete. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void connect ()"}, "get(android.nfc.Tag)": {"Returns": [["@B_android#nfc#tech#MifareClassic_E@", "MIFARE Classic object"]], "Parameters": [["@B_android#nfc#Tag_E@", "Tag: an MIFARE Classic compatible tag"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an instance of @B_android#nfc#tech#MifareClassic_E@ for the given tag. Does not cause any RF activity and does not block. Returns null if @B_android#nfc#tech#MifareClassic_E@ was not enumerated in @B_android#nfc#Tag#getTechList_E@. This indicates the tag is not MIFARE Classic compatible, or this Android device does not support MIFARE Classic.", "history": "Added in API level 10", "FullName": "public static MifareClassic get (Tag tag)"}, "isConnected()": {"Returns": [["boolean", "true if I/O operations should be possible"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Helper to indicate if I/O operations should be possible. Returns true if @B_android#nfc#tech#TagTechnology#connect_E@ has completed, and @B_android#nfc#tech#TagTechnology#close_E@ has not been called, and the @B_android#nfc#Tag_E@ is not known to be out of range. Does not cause RF activity, and does not block.", "history": "added in API level 10", "FullName": "public boolean isConnected ()"}, "writeBlock(int,byte[])": {"Returns": [], "Parameters": [["int", "int: index of block to write, starting from 0"], ["byte[]", "byte: 16 bytes of data to write"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Write 16-byte block. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 10", "FullName": "public void writeBlock (int blockIndex, byte[] data)"}, "writeBlock(int, byte[])": {"Returns": [], "Parameters": [["int", "int: index of block to write, starting from 0"], ["byte[]", "byte: 16 bytes of data to write"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Write 16-byte block. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void writeBlock (int blockIndex, byte[] data)"}, "sectorToBlock(int)": {"Returns": [["int", "block index of first block in sector"]], "Parameters": [["int", "int: index of sector to lookup, starting from 0"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the first block of a given sector. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int sectorToBlock (int sectorIndex)"}, "increment(int, int)": {"Returns": [], "Parameters": [["int", "int: index of block to increment, starting from 0"], ["int", "int: non-negative to increment by"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Increment a value block, storing the result in the temporary block on the tag. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void increment (int blockIndex, int value)"}, "setTimeout(int)": {"Returns": [], "Parameters": [["int", "int: timeout value in milliseconds"]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Set the @B_android#nfc#tech#MifareClassic#transceive_E@ timeout in milliseconds. The timeout only applies to @B_android#nfc#tech#MifareClassic#transceive_E@ on this object, and is reset to a default value when @B_android#nfc#tech#MifareClassic#close_E@ is called. Setting a longer timeout may be useful when performing transactions that require a long processing time on the tag such as key generation. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "Added in API level 14", "FullName": "public void setTimeout (int timeout)"}, "getSize()": {"Returns": [["int", "size in bytes"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the size of the tag in bytes One of @B_android#nfc#tech#MifareClassic#SIZE_MINI_E@, @B_android#nfc#tech#MifareClassic#SIZE_1K_E@, @B_android#nfc#tech#MifareClassic#SIZE_2K_E@, @B_android#nfc#tech#MifareClassic#SIZE_4K_E@. These constants are equal to their respective size in bytes. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getSize ()"}, "getType()": {"Returns": [["int", "type"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the type of this MIFARE Classic compatible tag. One of @B_android#nfc#tech#MifareClassic#TYPE_UNKNOWN_E@, @B_android#nfc#tech#MifareClassic#TYPE_CLASSIC_E@, @B_android#nfc#tech#MifareClassic#TYPE_PLUS_E@ or @B_android#nfc#tech#MifareClassic#TYPE_PRO_E@. Does not cause any RF activity and does not block.", "history": "Added in API level 10", "FullName": "public int getType ()"}, "decrement(int, int)": {"Returns": [], "Parameters": [["int", "int: index of block to decrement, starting from 0"], ["int", "int: non-negative to decrement by"]], "Throws": [["@B_android#nfc#TagLostException_E@", "if the tag leaves the field"], ["@B_java#io#IOException_E@", "if there is an I/O failure, or the operation is canceled"]], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#NFC_E@"], "Description": "Decrement a value block, storing the result in the temporary block on the tag. This is an I/O operation and will block until complete. It must not be called from the main application thread. A blocked call will be canceled with @B_java#io#IOException_E@ if @B_android#nfc#tech#MifareClassic#close_E@ is called from another thread. Requires the @B_android#Manifest#permission#NFC_E@ permission.", "history": "added in API level 10", "FullName": "public void decrement (int blockIndex, int value)"}, "getTag()": {"Returns": [["@B_android#nfc#Tag_E@", "the @B_android#nfc#Tag_E@ backing this @B_android#nfc#tech#TagTechnology_E@ object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#nfc#Tag_E@ object backing this @B_android#nfc#tech#TagTechnology_E@ object.", "history": "added in API level 10", "FullName": "public Tag getTag ()"}}, "Inheritance": [], "ClassName": "android.nfc.tech.MifareClassic", "ClassDesc": "Provides access to MIFARE Classic properties and I/O operations on a @B_android#nfc#Tag_E@. Acquire a @B_android#nfc#tech#MifareClassic_E@ object using @B_android#nfc#tech#MifareClassic#get_E@. MIFARE Classic is also known as MIFARE Standard. MIFARE Classic tags are divided into sectors, and each sector is sub-divided into blocks. Block size is always 16 bytes (@B_android#nfc#tech#MifareClassic#BLOCK_SIZE_E@. Sector size varies. MIFARE Classic Mini are 320 bytes (@B_android#nfc#tech#MifareClassic#SIZE_MINI_E@), with 5 sectors each of 4 blocks. MIFARE Classic 1k are 1024 bytes (@B_android#nfc#tech#MifareClassic#SIZE_1K_E@), with 16 sectors each of 4 blocks. MIFARE Classic 2k are 2048 bytes (@B_android#nfc#tech#MifareClassic#SIZE_2K_E@), with 32 sectors each of 4 blocks. MIFARE Classic 4k are 4096 bytes (@B_android#nfc#tech#MifareClassic#SIZE_4K_E@). The first 32 sectors contain 4 blocks and the last 8 sectors contain 16 blocks. MIFARE Classic tags require authentication on a per-sector basis before any other I/O operations on that sector can be performed. There are two keys per sector, and ACL bits determine what I/O operations are allowed on that sector after authenticating with a key. and . Three well-known authentication keys are defined in this class: @B_android#nfc#tech#MifareClassic#KEY_DEFAULT_E@, @B_android#nfc#tech#MifareClassic#KEY_MIFARE_APPLICATION_DIRECTORY_E@, @B_android#nfc#tech#MifareClassic#KEY_NFC_FORUM_E@. @B_android#nfc#tech#MifareClassic#KEY_DEFAULT_E@ is the default factory key for MIFARE Classic. @B_android#nfc#tech#MifareClassic#KEY_MIFARE_APPLICATION_DIRECTORY_E@ is the well-known key for MIFARE Classic cards that have been formatted according to the MIFARE Application Directory (MAD) specification. @B_android#nfc#tech#MifareClassic#KEY_NFC_FORUM_E@ is the well-known key for MIFARE Classic cards that have been formatted according to the NXP specification for NDEF on MIFARE Classic. Implementation of this class on a Android NFC device is optional. If it is not implemented, then @B_android#nfc#tech#MifareClassic_E@ will never be enumerated in @B_android#nfc#Tag#getTechList_E@. If it is enumerated, then all @B_android#nfc#tech#MifareClassic_E@ I/O operations will be supported, and @B_android#nfc#tech#Ndef#MIFARE_CLASSIC_E@ NDEF tags will also be supported. In either case, @B_android#nfc#tech#NfcA_E@ will also be enumerated on the tag, because all MIFARE Classic tags are also @B_android#nfc#tech#NfcA_E@. @B_android#Manifest#permission#NFC_E@ permission."}