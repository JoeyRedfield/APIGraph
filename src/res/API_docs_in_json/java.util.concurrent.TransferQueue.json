{"Functions": {"hasWaitingConsumer()": {"Returns": [["boolean", "true if there is at least one waiting consumer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if there is at least one consumer waiting to receive an element via @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@. The return value represents a momentary state of affairs.", "history": "Added in API level 21", "FullName": "public abstract boolean hasWaitingConsumer ()"}, "transfer(E)": {"Returns": [], "Parameters": [["E", "E: the element to transfer"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting, in which case the element is not left enqueued"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a consumer, waiting if necessary to do so. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@), else waits until the element is received by a consumer.", "history": "Added in API level 21", "FullName": "public abstract void transfer (E e)"}, "getWaitingConsumerCount()": {"Returns": [["int", "the number of consumers waiting to receive elements"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an estimate of the number of consumers waiting to receive elements via @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@. The return value is an approximation of a momentary state of affairs, that may be inaccurate if consumers have completed or given up waiting. The value may be useful for monitoring and heuristics, but not for synchronization control. Implementations of this method are likely to be noticeably slower than those for @B_java#util#concurrent#TransferQueue#hasWaitingConsumer_E@.", "history": "Added in API level 21", "FullName": "public abstract int getWaitingConsumerCount ()"}, "tryTransfer(E)": {"Returns": [["boolean", "true if the element was transferred, else false"]], "Parameters": [["E", "E: the element to transfer"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a waiting consumer immediately, if possible. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@), otherwise returning false without enqueuing the element.", "history": "Added in API level 21", "FullName": "public abstract boolean tryTransfer (E e)"}, "tryTransfer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before completion, in which case the element is not left enqueued"]], "Parameters": [["E", "E: the element to transfer"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting, in which case the element is not left enqueued"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Transfers the element to a consumer if it is possible to do so before the timeout elapses. More precisely, transfers the specified element immediately if there exists a consumer already waiting to receive it (in @B_java#util#concurrent#BlockingQueue#take_E@ or timed @B_java#util#concurrent#BlockingQueue#poll_E@), else waits until the element is received by a consumer, returning false if the specified wait time elapses before the element can be transferred.", "history": "Added in API level 21", "FullName": "public abstract boolean tryTransfer (E e, long timeout, TimeUnit unit)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.TransferQueue<E>", "ClassDesc": "A @B_java#util#concurrent#BlockingQueue_E@ in which producers may wait for consumers to receive elements. A TransferQueue may be useful for example in message passing applications in which producers sometimes (using method @B_java#util#concurrent#TransferQueue#transfer_E@) await receipt of elements by consumers invoking take or poll, while at other times enqueue elements (via method put) without waiting for receipt. tryTransfer are also available. A TransferQueue may also be queried, via @B_java#util#concurrent#TransferQueue#hasWaitingConsumer_E@, whether there are any threads waiting for items, which is a converse analogy to a peek operation. Like other blocking queues, a TransferQueue may be capacity bounded. If so, an attempted transfer operation may initially block waiting for available space, and/or subsequently block waiting for reception by a consumer. Note that in a queue with zero capacity, such as @B_java#util#concurrent#SynchronousQueue_E@, put and transfer are effectively synonymous."}