{"Functions": {"isOpen()": {"Returns": [["boolean", "true if, and only if, this channel is open"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this channel is open.", "history": "Added in API level 1", "FullName": "public abstract boolean isOpen ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "If an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Closes this channel. After a channel is closed, any further attempt to invoke I/O operations upon it will cause a @B_java#nio#channels#ClosedChannelException_E@ to be thrown. If this channel is already closed then invoking this method has no effect. This method may be invoked at any time. If some other thread has already invoked it, however, then another invocation will block until the first invocation is complete, after which it will return without effect.", "history": "Added in API level 1", "FullName": "public abstract void close ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.Channel", "ClassDesc": "A nexus for I/O operations. A channel represents an open connection to an entity such as a hardware device, a file, a network socket, or a program component that is capable of performing one or more distinct I/O operations, for example reading or writing. A channel is either open or closed. A channel is open upon creation, and once closed it remains closed. Once a channel is closed, any attempt to invoke an I/O operation upon it will cause a @B_java#nio#channels#ClosedChannelException_E@ to be thrown. Whether or not a channel is open may be tested by invoking its @B_java#nio#channels#Channel#isOpen_E@ method. Channels are, in general, intended to be safe for multithreaded access as described in the specifications of the interfaces and classes that extend and implement this interface."}