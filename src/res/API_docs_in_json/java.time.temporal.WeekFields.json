{"Functions": {"getMinimalDaysInFirstWeek()": {"Returns": [["int", "the minimal number of days in the first week of a month or year, from 1 to 7"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minimal number of days in the first week. The number of days considered to define the first week of a month or year varies by culture. For example, the ISO-8601 requires 4 days (more than half a week) to be present before counting the first week.", "history": "Added in API level 26", "FullName": "public int getMinimalDaysInFirstWeek ()"}, "dayOfWeek()": {"Returns": [["@B_java#time#temporal#TemporalField_E@", "a field providing access to the day-of-week with localized numbering, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a field to access the day of week based on this WeekFields. This is similar to @B_java#time#temporal#ChronoField#DAY_OF_WEEK_E@ but uses values for the day-of-week based on this WeekFields. The days are numbered from 1 to 7 where the @B_java#time#temporal#WeekFields#getFirstDayOfWeek_E@ is assigned the value 1. For example, if the first day-of-week is Sunday, then that will have the value 1, with other days ranging from Monday as 2 to Saturday as 7. In the resolving phase of parsing, a localized day-of-week will be converted to a standardized ChronoField day-of-week. The day-of-week must be in the valid range 1 to 7. Other fields in this class build dates using the standardized day-of-week.", "history": "Added in API level 26", "FullName": "public TemporalField dayOfWeek ()"}, "of(java.util.Locale)": {"Returns": [["@B_java#time#temporal#WeekFields_E@", "the week-definition, not null"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale to use, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of WeekFields appropriate for a locale. This will look up appropriate values from the provider of localization data.", "history": "Added in API level 26", "FullName": "public static WeekFields of (Locale locale)"}, "weekOfYear()": {"Returns": [["@B_java#time#temporal#TemporalField_E@", "a field providing access to the week-of-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a field to access the week of year based on this WeekFields. This represents the concept of the count of weeks within the year where weeks start on a fixed day-of-week, such as Monday. This field is typically used with @B_java#time#temporal#WeekFields#dayOfWeek_E@. Week one(1) is the week starting on the @B_java#time#temporal#WeekFields#getFirstDayOfWeek_E@ where there are at least @B_java#time#temporal#WeekFields#getMinimalDaysInFirstWeek_E@ days in the year. Thus, week one may start up to minDays days before the start of the year. If the first week starts after the start of the year then the period before is week zero (0). For example: - if the 1st day of the year is a Monday, week one starts on the 1st and there is no week zero - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in week zero - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one This field can be used with any calendar system. In the resolving phase of parsing, a date can be created from a year, week-of-year and day-of-week. In In In", "history": "Added in API level 26", "FullName": "public TemporalField weekOfYear ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the string representation, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A string representation of this WeekFields instance.", "history": "Added in API level 26", "FullName": "public String toString ()"}, "weekBasedYear()": {"Returns": [["@B_java#time#temporal#TemporalField_E@", "a field providing access to the week-based-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a field to access the year of a week-based-year based on this WeekFields. This represents the concept of the year where weeks start on a fixed day-of-week, such as Monday and each week belongs to exactly one year. This field is typically used with @B_java#time#temporal#WeekFields#dayOfWeek_E@ and @B_java#time#temporal#WeekFields#weekOfWeekBasedYear_E@. Week one(1) is the week starting on the @B_java#time#temporal#WeekFields#getFirstDayOfWeek_E@ where there are at least @B_java#time#temporal#WeekFields#getMinimalDaysInFirstWeek_E@ days in the year. Thus, week one may start before the start of the year. If the first week starts after the start of the year then the period before is in the last week of the previous year. This field can be used with any calendar system. In the resolving phase of parsing, a date can be created from a week-based-year, week-of-year and day-of-week. In In In", "history": "Added in API level 26", "FullName": "public TemporalField weekBasedYear ()"}, "getFirstDayOfWeek()": {"Returns": [["@B_java#time#DayOfWeek_E@", "the first day-of-week, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the first day-of-week. The first day-of-week varies by culture. For example, the US uses Sunday, while France and the ISO-8601 standard use Monday. This method returns the first day using the standard DayOfWeek enum.", "history": "Added in API level 26", "FullName": "public DayOfWeek getFirstDayOfWeek ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the specified rules"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the other rules to compare to, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this WeekFields is equal to the specified object. The comparison is based on the entire state of the rules, which is the first day-of-week and minimal days.", "history": "Added in API level 26", "FullName": "public boolean equals (Object object)"}, "of(java.time.DayOfWeek, int)": {"Returns": [["@B_java#time#temporal#WeekFields_E@", "the week-definition, not null"]], "Parameters": [["@B_java#time#DayOfWeek_E@", "DayOfWeek: the first day of the week, not null"], ["int", "int: the minimal number of days in the first week, from 1 to 7"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimal days value is less than one or greater than 7"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of WeekFields from the first day-of-week and minimal days. The first day-of-week defines the ISO DayOfWeek that is day 1 of the week. The minimal number of days in the first week defines how many days must be present in a month or year, starting from the first day-of-week, before the week is counted as the first week. A value of 1 will count the first day of the month or year as part of the first week, whereas a value of 7 will require the whole seven days to be in the new month or year. WeekFields instances are singletons; for each unique combination of firstDayOfWeek and minimalDaysInFirstWeek the the same instance will be returned.", "history": "added in API level 26", "FullName": "public static WeekFields of (DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek)"}, "weekOfMonth()": {"Returns": [["@B_java#time#temporal#TemporalField_E@", "a field providing access to the week-of-month, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a field to access the week of month based on this WeekFields. This represents the concept of the count of weeks within the month where weeks start on a fixed day-of-week, such as Monday. This field is typically used with @B_java#time#temporal#WeekFields#dayOfWeek_E@. Week one (1) is the week starting on the @B_java#time#temporal#WeekFields#getFirstDayOfWeek_E@ where there are at least @B_java#time#temporal#WeekFields#getMinimalDaysInFirstWeek_E@ days in the month. Thus, week one may start up to minDays days before the start of the month. If the first week starts after the start of the month then the period before is week zero (0). For example: - if the 1st day of the month is a Monday, week one starts on the 1st and there is no week zero - if the 2nd day of the month is a Monday, week one starts on the 2nd and the 1st is in week zero - if the 4th day of the month is a Monday, week one starts on the 4th and the 1st to 3rd is in week zero - if the 5th day of the month is a Monday, week two starts on the 5th and the 1st to 4th is in week one This field can be used with any calendar system. In the resolving phase of parsing, a date can be created from a year, week-of-month, month-of-year and day-of-week. In In In", "history": "Added in API level 26", "FullName": "public TemporalField weekOfMonth ()"}, "weekOfWeekBasedYear()": {"Returns": [["@B_java#time#temporal#TemporalField_E@", "a field providing access to the week-of-week-based-year, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a field to access the week of a week-based-year based on this WeekFields. This represents the concept of the count of weeks within the year where weeks start on a fixed day-of-week, such as Monday and each week belongs to exactly one year. This field is typically used with @B_java#time#temporal#WeekFields#dayOfWeek_E@ and @B_java#time#temporal#WeekFields#weekBasedYear_E@. Week one(1) is the week starting on the @B_java#time#temporal#WeekFields#getFirstDayOfWeek_E@ where there are at least @B_java#time#temporal#WeekFields#getMinimalDaysInFirstWeek_E@ days in the year. If the first week starts after the start of the year then the period before is in the last week of the previous year. For example: - if the 1st day of the year is a Monday, week one starts on the 1st - if the 2nd day of the year is a Monday, week one starts on the 2nd and the 1st is in the last week of the previous year - if the 4th day of the year is a Monday, week one starts on the 4th and the 1st to 3rd is in the last week of the previous year - if the 5th day of the year is a Monday, week two starts on the 5th and the 1st to 4th is in week one This field can be used with any calendar system. In the resolving phase of parsing, a date can be created from a week-based-year, week-of-year and day-of-week. In In In", "history": "Added in API level 26", "FullName": "public TemporalField weekOfWeekBasedYear ()"}, "of(java.time.DayOfWeek,int)": {"Returns": [["@B_java#time#temporal#WeekFields_E@", "the week-definition, not null"]], "Parameters": [["@B_java#time#DayOfWeek_E@", "DayOfWeek: the first day of the week, not null"], ["int", "int: the minimal number of days in the first week, from 1 to 7"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the minimal days value is less than one or greater than 7"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains an instance of WeekFields from the first day-of-week and minimal days. The first day-of-week defines the ISO DayOfWeek that is day 1 of the week. The minimal number of days in the first week defines how many days must be present in a month or year, starting from the first day-of-week, before the week is counted as the first week. A value of 1 will count the first day of the month or year as part of the first week, whereas a value of 7 will require the whole seven days to be in the new month or year. WeekFields instances are singletons; for each unique combination of firstDayOfWeek and minimalDaysInFirstWeek the the same instance will be returned.", "history": "Added in API level 26", "FullName": "public static WeekFields of (DayOfWeek firstDayOfWeek, int minimalDaysInFirstWeek)"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this WeekFields.", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.temporal.WeekFields", "ClassDesc": "Localized definitions of the day-of-week, week-of-month and week-of-year fields. A standard week is seven days long, but cultures have different definitions for some other aspects of a week. This class represents the definition of the week, for the purpose of providing @B_java#time#temporal#TemporalField_E@ instances. WeekFields provides five fields, @B_java#time#temporal#WeekFields#dayOfWeek_E@, @B_java#time#temporal#WeekFields#weekOfMonth_E@, @B_java#time#temporal#WeekFields#weekOfYear_E@, @B_java#time#temporal#WeekFields#weekOfWeekBasedYear_E@, and @B_java#time#temporal#WeekFields#weekBasedYear_E@ that provide access to the values from any The computations for day-of-week, week-of-month, and week-of-year are based on the A week is defined by: The first day-of-week. For example, the ISO-8601 standard considers Monday to be the first day-of-week. The minimal number of days in the first week. For example, the ISO-8601 standard counts the first week as needing at least 4 days. Together these two values allow a year or month to be divided into weeks. @B_java#time#temporal#WeekFields#weekOfWeekBasedYear_E@ and one for @B_java#time#temporal#WeekFields#weekBasedYear_E@. In a week-based-year, each week belongs to only a single year. Week 1 of a year is the first week that starts on the first day-of-week and has at least the minimum number of days. The first and last weeks of a year may contain days from the previous calendar year or next calendar year respectively."}