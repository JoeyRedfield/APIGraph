{"Functions": {"getSupportedCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "an array of cipher suite names"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSocketFactory#getDefaultCipherSuites_E@"], "Permissions": [], "Description": "Returns the names of the cipher suites which could be enabled for use on an SSL connection. Normally, only a subset of these will actually be enabled by default, since this list may include cipher suites which do not meet quality of service requirements for those defaults. Such cipher suites are useful in specialized applications. Applications should not blindly enable all supported cipher suites. The supported cipher suites can include signaling cipher suite values that can cause connection problems if enabled inappropriately. The proper way to use this method is to either check if a specific cipher suite is supported via Arrays.asList(getSupportedCipherSuites()).contains(...) or to filter a desired list of cipher suites to only the supported ones via desiredSuiteSet.retainAll(Arrays.asList(getSupportedCipherSuites())).", "history": "Added in API level 1", "FullName": "public abstract String[] getSupportedCipherSuites ()"}, "getDefault()": {"Returns": [["@B_javax#net#SocketFactory_E@", "the default SocketFactory"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLContext#getDefault_E@"], "Permissions": [], "Description": "Returns the default SSL socket factory. The first time this method is called, the security property \"ssl.SocketFactory.provider\" is examined. If it is non-null, a class by that name is loaded and instantiated. If that is successful and the object is an instance of SSLSocketFactory, it is made the default SSL socket factory. Otherwise, this method returns SSLContext.getDefault().getSocketFactory(). If that call fails, an inoperative factory is returned.", "history": "Added in API level 1", "FullName": "public static SocketFactory getDefault ()"}, "createSocket(java.net.Socket,java.lang.String,int,boolean)": {"Returns": [["@B_java#net#Socket_E@", "a socket connected to the specified host and port"]], "Parameters": [["@B_java#net#Socket_E@", "Socket: the existing socket"], ["@B_java#lang#String_E@", "String: the server host"], ["int", "int: the server port"], ["boolean", "boolean: close the underlying socket when this socket is closed"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs when creating the socket"], ["@B_java#lang#NullPointerException_E@", "if the parameter s is null"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a socket layered over an existing socket connected to the named host, at the given port. This constructor can be used when tunneling SSL through a proxy or when negotiating the use of SSL over an existing socket. The host and port refer to the logical peer destination. This socket is configured using the socket options established for this factory.", "history": "Added in API level 1", "FullName": "public abstract Socket createSocket (Socket s, String host, int port, boolean autoClose)"}, "SSLSocketFactory()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor is used only by subclasses.", "history": "Added in API level 1", "FullName": "public SSLSocketFactory ()"}, "getDefaultCipherSuites()": {"Returns": [["@B_java#lang#String_E@", "array of the cipher suites enabled by default"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_javax#net#ssl#SSLSocketFactory#getSupportedCipherSuites_E@"], "Permissions": [], "Description": "Returns the list of cipher suites which are enabled by default. Unless a different list is enabled, handshaking on an SSL connection will use one of these cipher suites. The minimum quality of service for these defaults requires confidentiality protection and server authentication (that is, no anonymous cipher suites).", "history": "Added in API level 1", "FullName": "public abstract String[] getDefaultCipherSuites ()"}}, "Inheritance": ["@B_javax#net#SocketFactory_E@"], "ClassName": "javax.net.ssl.SSLSocketFactory", "ClassDesc": "SSLSocketFactorys create SSLSockets."}