{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getLinkDownstreamBandwidthKbps()": {"Returns": [["int", "The estimated first hop downstream (network to device) bandwidth."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the downstream bandwidth for this network in Kbps. This always only refers to the estimated first hop transport bandwidth.", "history": "Added in API level 21", "FullName": "public int getLinkDownstreamBandwidthKbps ()"}, "NetworkCapabilities(android.net.NetworkCapabilities)": {"Returns": [], "Parameters": [["@B_android#net#NetworkCapabilities_E@", "NetworkCapabilities no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public NetworkCapabilities (NetworkCapabilities nc)"}, "hasTransport(int)": {"Returns": [["boolean", "true if set on this instance."]], "Parameters": [["int", "int: the transport type to be tested for. Value is @B_android#net#NetworkCapabilities#TRANSPORT_CELLULAR_E@, @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_E@, @B_android#net#NetworkCapabilities#TRANSPORT_BLUETOOTH_E@, @B_android#net#NetworkCapabilities#TRANSPORT_ETHERNET_E@, @B_android#net#NetworkCapabilities#TRANSPORT_VPN_E@, @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@, @B_android#net#NetworkCapabilities#TRANSPORT_LOWPAN_E@, or android.net.NetworkCapabilities.TRANSPORT_TEST"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests for the presence of a transport on this instance.", "history": "Added in API level 21", "FullName": "public boolean hasTransport (int transportType)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 21", "FullName": "public int describeContents ()"}, "hasCapability(int)": {"Returns": [["boolean", "true if set on this instance."]], "Parameters": [["int", "int: the capabilities to be tested for. Value is @B_android#net#NetworkCapabilities#NET_CAPABILITY_MMS_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_SUPL_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_DUN_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_FOTA_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_IMS_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_CBS_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_WIFI_P2P_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_IA_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_RCS_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_XCAP_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_EIMS_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_METERED_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_INTERNET_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_RESTRICTED_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_TRUSTED_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_VPN_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_VALIDATED_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_CAPTIVE_PORTAL_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_ROAMING_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_FOREGROUND_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_CONGESTED_E@, @B_android#net#NetworkCapabilities#NET_CAPABILITY_NOT_SUSPENDED_E@, android.net.NetworkCapabilities.NET_CAPABILITY_OEM_PAID, @B_android#net#NetworkCapabilities#NET_CAPABILITY_MCX_E@, or android.net.NetworkCapabilities.NET_CAPABILITY_PARTIAL_CONNECTIVITY"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests for the presence of a capability on this instance.", "history": "Added in API level 21", "FullName": "public boolean hasCapability (int capability)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 21", "FullName": "public String toString ()"}, "getLinkUpstreamBandwidthKbps()": {"Returns": [["int", "The estimated first hop upstream (device to network) bandwidth."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the upstream bandwidth for this network in Kbps. This always only refers to the estimated first hop transport bandwidth.", "history": "Added in API level 21", "FullName": "public int getLinkUpstreamBandwidthKbps ()"}, "getTransportInfo()": {"Returns": [["@B_android#net#TransportInfo_E@", "A concrete implementation of the @B_android#net#TransportInfo_E@ class or null if not available for the network."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a transport-specific information container. The application may cast this container to a concrete sub-class based on its knowledge of the network request. The application should be able to deal with a null return value or an invalid case, e.g. use instanceof operator to verify expected type.", "history": "Added in API level 29", "FullName": "public TransportInfo getTransportInfo ()"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 21", "FullName": "public boolean equals (Object obj)"}, "getSignalStrength()": {"Returns": [["int", "The bearer-specific signal strength."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the signal strength.", "history": "Added in API level 29", "FullName": "public int getSignalStrength ()"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 21", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 21", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "android.net.NetworkCapabilities", "ClassDesc": "Representation of the capabilities of an active network. Instances are typically obtained through @B_android#net#ConnectivityManager#NetworkCallback#onCapabilitiesChanged_E@ or @B_android#net#ConnectivityManager#getNetworkCapabilities_E@. This replaces the old @B_android#net#ConnectivityManager#TYPE_MOBILE_E@ method of network selection. Rather than indicate a need for Wi-Fi because an application needs high bandwidth and risk obsolescence when a new, fast network appears (like LTE), the application should specify it needs high bandwidth. Similarly if an application needs an unmetered network for a bulk transfer it can specify that rather than assuming all cellular based connections are metered and all Wi-Fi based connections are not."}