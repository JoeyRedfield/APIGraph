{"Functions": {"poll(long,java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "Added in API level 1", "FullName": "public abstract E poll (long timeout, TimeUnit unit)"}, "put(E)": {"Returns": [], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, waiting if necessary for space to become available.", "history": "Added in API level 1", "FullName": "public abstract void put (E e)"}, "drainTo(java.util.Collection<?superE>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if addition of elements is not supported by the specified collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this queue prevents it from being added to the specified collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract int drainTo (Collection<? super E> c)"}, "poll(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "the head of this queue, or null if the specified waiting time elapses before an element is available"]], "Parameters": [["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting up to the specified wait time if necessary for an element to become available.", "history": "added in API level 1", "FullName": "public abstract E poll (long timeout, TimeUnit unit)"}, "drainTo(java.util.Collection<? super E>, int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if addition of elements is not supported by the specified collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this queue prevents it from being added to the specified collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public abstract int drainTo (Collection<? super E> c, int maxElements)"}, "offer(E)": {"Returns": [["boolean", "true if the element was added to this queue, else false"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and false if no space is currently available. When using a capacity-restricted queue, this method is generally preferable to @B_java#util#concurrent#BlockingQueue#add_E@, which can fail to insert an element only by throwing an exception.", "history": "Added in API level 1", "FullName": "public abstract boolean offer (E e)"}, "remainingCapacity()": {"Returns": [["int", "the remaining capacity"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of additional elements that this queue can ideally (in the absence of memory or resource constraints) accept without blocking, or Integer.MAX_VALUE if there is no intrinsic limit. Note that you cannot always tell if an attempt to insert an element will succeed by inspecting remainingCapacity because it may be the case that another thread is about to insert or remove an element.", "history": "Added in API level 1", "FullName": "public abstract int remainingCapacity ()"}, "take()": {"Returns": [["E", "the head of this queue"]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"]], "SeeAlso": [], "Permissions": [], "Description": "Retrieves and removes the head of this queue, waiting if necessary until an element becomes available.", "history": "Added in API level 1", "FullName": "public abstract E take ()"}, "offer(E,long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.", "history": "Added in API level 1", "FullName": "public abstract boolean offer (E e, long timeout, TimeUnit unit)"}, "add(E)": {"Returns": [["boolean", "true (as specified by @B_java#util#Collection#add_E@)"]], "Parameters": [["E", "E: the element to add"]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the element cannot be added at this time due to capacity restrictions"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success and throwing an IllegalStateException if no space is currently available. When using a capacity-restricted queue, it is generally preferable to use @B_java#util#concurrent#BlockingQueue#offer_E@.", "history": "Added in API level 1", "FullName": "public abstract boolean add (E e)"}, "drainTo(java.util.Collection<? super E>)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if addition of elements is not supported by the specified collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this queue prevents it from being added to the specified collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all available elements from this queue and adds them to the given collection. This operation may be more efficient than repeatedly polling this queue. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public abstract int drainTo (Collection<? super E> c)"}, "drainTo(java.util.Collection<?superE>,int)": {"Returns": [["int", "the number of elements transferred"]], "Parameters": [["@B_java#util#Collection_E@", "Collection: the collection to transfer elements into"], ["int", "int: the maximum number of elements to transfer"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if addition of elements is not supported by the specified collection"], ["@B_java#lang#ClassCastException_E@", "if the class of an element of this queue prevents it from being added to the specified collection"], ["@B_java#lang#NullPointerException_E@", "if the specified collection is null"], ["@B_java#lang#IllegalArgumentException_E@", "if the specified collection is this queue, or some property of an element of this queue prevents it from being added to the specified collection"]], "SeeAlso": [], "Permissions": [], "Description": "Removes at most the given number of available elements from this queue and adds them to the given collection. A failure encountered while attempting to add elements to collection c may result in elements being in neither, either or both collections when the associated exception is thrown. Attempts to drain a queue to itself result in IllegalArgumentException. Further, the behavior of this operation is undefined if the specified collection is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract int drainTo (Collection<? super E> c, int maxElements)"}, "offer(E, long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if successful, or false if the specified waiting time elapses before space is available"]], "Parameters": [["E", "E: the element to add"], ["long", "long: how long to wait before giving up, in units of unit"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: a TimeUnit determining how to interpret the timeout parameter"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if interrupted while waiting"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified element prevents it from being added to this queue"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified element prevents it from being added to this queue"]], "SeeAlso": [], "Permissions": [], "Description": "Inserts the specified element into this queue, waiting up to the specified wait time if necessary for space to become available.", "history": "added in API level 1", "FullName": "public abstract boolean offer (E e, long timeout, TimeUnit unit)"}, "contains(java.lang.Object)": {"Returns": [["boolean", "true if this queue contains the specified element"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be checked for containment in this queue"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this queue (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this queue contains the specified element. More formally, returns true if and only if this queue contains at least one element e such that o.equals(e).", "history": "Added in API level 1", "FullName": "public abstract boolean contains (Object o)"}, "remove(java.lang.Object)": {"Returns": [["boolean", "true if this queue changed as a result of the call"]], "Parameters": [["@B_java#lang#Object_E@", "Object: element to be removed from this queue, if present"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of the specified element is incompatible with this queue (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified element is null (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes a single instance of the specified element from this queue, if it is present. More formally, removes an element e such that o.equals(e), if this queue contains one or more such elements. Returns true if this queue contained the specified element (or equivalently, if this queue changed as a result of the call).", "history": "Added in API level 1", "FullName": "public abstract boolean remove (Object o)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.BlockingQueue<E>", "ClassDesc": "A @B_java#util#Queue_E@ that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element. BlockingQueue methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either null or false, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up. These methods are summarized in the following table: A BlockingQueue does not accept null elements. Implementations throw NullPointerException on attempts to add, put or offer a null. A null is used as a sentinel value to indicate failure of poll operations. A BlockingQueue may be capacity bounded. At any given time it may have a remainingCapacity beyond which no additional elements can be put without blocking. A BlockingQueue without any intrinsic capacity constraints always reports a remaining capacity of Integer.MAX_VALUE. BlockingQueue implementations are designed to be used primarily for producer-consumer queues, but additionally support the @B_java#util#Collection_E@ interface. So, for example, it is possible to remove an arbitrary element from a queue using remove(x). However, such operations are in general not performed very efficiently, and are intended for only occasional use, such as when a queued message is cancelled. BlockingQueue implementations are thread-safe. All queuing methods achieve their effects atomically using internal locks or other forms of concurrency control. However, the bulk Collection operations addAll, containsAll, retainAll and removeAll are not necessarily performed atomically unless specified otherwise in an implementation. So it is possible, for example, for addAll(c) to fail (throwing an exception) after adding only some of the elements in c. A BlockingQueue does not intrinsically support any kind of \"close\" or \"shutdown\" operation to indicate that no more items will be added. The needs and usage of such features tend to be implementation-dependent. For example, a common tactic is for producers to insert special end-of-stream or poison objects, that are interpreted accordingly when taken by consumers. Usage example, based on a typical producer-consumer scenario. Note that a BlockingQueue can safely be used with multiple producers and multiple consumers. Memory consistency effects: As with other concurrent collections, actions in a thread prior to placing an object into a BlockingQueue BlockingQueue in another thread."}