{"Functions": {"Call.Callback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 23", "FullName": "public Call.Callback ()"}, "onConnectionEvent(android.telecom.Call,java.lang.String,android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call receiving the event."], ["@B_java#lang#String_E@", "String: The event."], ["@B_android#os#Bundle_E@", "Bundle: Extras associated with the connection event."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when a @B_android#telecom#Call_E@ receives an event from its associated @B_android#telecom#Connection_E@. Where possible, the Call should make an attempt to handle @B_android#telecom#Connection_E@ events which are part of the android.telecom.* namespace. The Call should ignore any events it does not wish to handle. Unexpected events should be handled gracefully, as it is possible that a @B_android#telecom#ConnectionService_E@ has defined its own Connection events which a Call is not aware of. See @B_android#telecom#Connection#sendConnectionEvent_E@.", "history": "Added in API level 25", "FullName": "public void onConnectionEvent (Call call, String event, Bundle extras)"}, "onVideoCallChanged(android.telecom.Call,android.telecom.InCallService.VideoCall)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_android#telecom#InCallService#VideoCall_E@", "InCallService.VideoCall: The Call.VideoCall associated with the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the Call.VideoCall of the Call has changed.", "history": "Added in API level 23", "FullName": "public void onVideoCallChanged (Call call, InCallService.VideoCall videoCall)"}, "onConferenceableCallsChanged(android.telecom.Call,java.util.List<android.telecom.Call>)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call being updated."], ["@B_java#util#List_E@", "List: The Calls with which this Call can be conferenced."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked upon changes to the set of Calls with which this Call can be conferenced.", "history": "Added in API level 23", "FullName": "public void onConferenceableCallsChanged (Call call, List<Call> conferenceableCalls)"}, "onCannedTextResponsesLoaded(android.telecom.Call,java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_java#util#List_E@", "List: The text messages useable as responses."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the text messages that can be used as responses to the incoming Call are loaded from the relevant database. See @B_android#telecom#Call#getCannedTextResponses_E@.", "history": "Added in API level 23", "FullName": "public void onCannedTextResponsesLoaded (Call call, List<String> cannedTextResponses)"}, "onHandoverFailed(android.telecom.Call, int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which had initiated handover."], ["int", "int: Error reason for failure. Value is HANDOVER_FAILURE_DEST_APP_REJECTED, HANDOVER_FAILURE_NOT_SUPPORTED, HANDOVER_FAILURE_USER_REJECTED, HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL or HANDOVER_FAILURE_UNKNOWN."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when Call handover from one @B_android#telecom#PhoneAccount_E@ to other @B_android#telecom#PhoneAccount_E@ has failed. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@.", "history": "added in API level 28", "FullName": "public void onHandoverFailed (Call call, int failureReason)"}, "onStateChanged(android.telecom.Call, int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["int", "int: The new state of the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the state of this Call has changed. See @B_android#telecom#Call#getState_E@.", "history": "added in API level 23", "FullName": "public void onStateChanged (Call call, int state)"}, "onRttInitiationFailure(android.telecom.Call, int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which the RTT initiation failure occurred on."], ["int", "int: One of the status codes defined in @B_android#telecom#Connection#RttModifyStatus_E@, with the exception of @B_android#telecom#Connection#RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the RTT session failed to initiate for some reason, including rejection by the remote party.", "history": "added in API level 26", "FullName": "public void onRttInitiationFailure (Call call, int reason)"}, "onChildrenChanged(android.telecom.Call,java.util.List<android.telecom.Call>)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_java#util#List_E@", "List: The new children of the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the children of this Call have changed. See @B_android#telecom#Call#getChildren_E@.", "history": "Added in API level 23", "FullName": "public void onChildrenChanged (Call call, List<Call> children)"}, "onRttStatusChanged(android.telecom.Call,boolean,android.telecom.Call.RttCall)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call whose RTT status has changed."], ["boolean", "boolean: whether RTT is now enabled or disabled"], ["@B_android#telecom#Call#RttCall_E@", "Call.RttCall: the @B_android#telecom#Call#RttCall_E@ object to use for reading and writing if RTT is now on, null otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the call's RTT status changes, either from off to on or from on to off.", "history": "Added in API level 26", "FullName": "public void onRttStatusChanged (Call call, boolean enabled, Call.RttCall rttCall)"}, "onHandoverComplete(android.telecom.Call)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which had initiated handover."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when Call handover from one @B_android#telecom#PhoneAccount_E@ to other @B_android#telecom#PhoneAccount_E@ has completed successfully. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@.", "history": "Added in API level 28", "FullName": "public void onHandoverComplete (Call call)"}, "onRttModeChanged(android.telecom.Call, int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call whose RTT mode has changed."], ["int", "int: the new RTT mode, one of @B_android#telecom#Call#RttCall#RTT_MODE_FULL_E@, @B_android#telecom#Call#RttCall#RTT_MODE_HCO_E@, or @B_android#telecom#Call#RttCall#RTT_MODE_VCO_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the RTT mode changes for this call.", "history": "added in API level 26", "FullName": "public void onRttModeChanged (Call call, int mode)"}, "onRttModeChanged(android.telecom.Call,int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call whose RTT mode has changed."], ["int", "int: the new RTT mode, one of @B_android#telecom#Call#RttCall#RTT_MODE_FULL_E@, @B_android#telecom#Call#RttCall#RTT_MODE_HCO_E@, or @B_android#telecom#Call#RttCall#RTT_MODE_VCO_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the RTT mode changes for this call.", "history": "Added in API level 26", "FullName": "public void onRttModeChanged (Call call, int mode)"}, "onDetailsChanged(android.telecom.Call,android.telecom.Call.Details)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_android#telecom#Call#Details_E@", "Call.Details: A Details object describing the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the details of this Call have changed. See @B_android#telecom#Call#getDetails_E@.", "history": "Added in API level 23", "FullName": "public void onDetailsChanged (Call call, Call.Details details)"}, "onRttRequest(android.telecom.Call, int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which the RTT request was placed on"], ["int", "int: The ID of the request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the remote end of the connection has requested that an RTT communication channel be opened. A response to this should be sent via @B_android#telecom#Call#respondToRttRequest_E@ with the same ID that this method is invoked with.", "history": "added in API level 26", "FullName": "public void onRttRequest (Call call, int id)"}, "onCallDestroyed(android.telecom.Call)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call being destroyed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the Call is destroyed. Clients should refrain from cleaning up their UI for the Call in response to state transitions. Specifically, clients should not assume that a @B_android#telecom#Call#Callback#onStateChanged_E@ with a state of @B_android#telecom#Call#STATE_DISCONNECTED_E@ is the final notification the Call will send. Rather, clients should wait for this method to be invoked.", "history": "Added in API level 23", "FullName": "public void onCallDestroyed (Call call)"}, "onHandoverFailed(android.telecom.Call,int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which had initiated handover."], ["int", "int: Error reason for failure. Value is @B_android#telecom#Call#Callback#HANDOVER_FAILURE_DEST_APP_REJECTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_NOT_SUPPORTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_USER_REJECTED_E@, @B_android#telecom#Call#Callback#HANDOVER_FAILURE_ONGOING_EMERGENCY_CALL_E@, or @B_android#telecom#Call#Callback#HANDOVER_FAILURE_UNKNOWN_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when Call handover from one @B_android#telecom#PhoneAccount_E@ to other @B_android#telecom#PhoneAccount_E@ has failed. For a full discussion of the handover process and the APIs involved, see @B_android#telecom#Call#handoverTo_E@.", "history": "Added in API level 28", "FullName": "public void onHandoverFailed (Call call, int failureReason)"}, "onPostDialWait(android.telecom.Call,java.lang.String)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_java#lang#String_E@", "String: The post-dial characters that remain to be sent."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the post-dial sequence in the outgoing Call has reached a pause character. This causes the post-dial signals to stop pending user confirmation. An implementation should present this choice to the user and invoke @B_android#telecom#Call#postDialContinue_E@ when the user makes the choice.", "history": "Added in API level 23", "FullName": "public void onPostDialWait (Call call, String remainingPostDialSequence)"}, "onParentChanged(android.telecom.Call,android.telecom.Call)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["@B_android#telecom#Call_E@", "Call: The new parent of the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the parent of this Call has changed. See @B_android#telecom#Call#getParent_E@.", "history": "Added in API level 23", "FullName": "public void onParentChanged (Call call, Call parent)"}, "onStateChanged(android.telecom.Call,int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The Call invoking this method."], ["int", "int: The new state of the Call."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the state of this Call has changed. See @B_android#telecom#Call#getState_E@.", "history": "Added in API level 23", "FullName": "public void onStateChanged (Call call, int state)"}, "onRttRequest(android.telecom.Call,int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which the RTT request was placed on"], ["int", "int: The ID of the request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the remote end of the connection has requested that an RTT communication channel be opened. A response to this should be sent via @B_android#telecom#Call#respondToRttRequest_E@ with the same ID that this method is invoked with.", "history": "Added in API level 26", "FullName": "public void onRttRequest (Call call, int id)"}, "onRttInitiationFailure(android.telecom.Call,int)": {"Returns": [], "Parameters": [["@B_android#telecom#Call_E@", "Call: The call which the RTT initiation failure occurred on."], ["int", "int: One of the status codes defined in @B_android#telecom#Connection#RttModifyStatus_E@, with the exception of @B_android#telecom#Connection#RttModifyStatus#SESSION_MODIFY_REQUEST_SUCCESS_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Invoked when the RTT session failed to initiate for some reason, including rejection by the remote party.", "history": "Added in API level 26", "FullName": "public void onRttInitiationFailure (Call call, int reason)"}}, "Inheritance": [], "ClassName": "android.telecom.Call.Callback", "ClassDesc": "Defines callbacks which inform the @B_android#telecom#InCallService_E@ of changes to a @B_android#telecom#Call_E@. These callbacks can originate from the Telecom framework, or a @B_android#telecom#ConnectionService_E@ implementation. You can handle these callbacks by extending the @B_android#telecom#Call#Callback_E@ class and overriding the callbacks that your @B_android#telecom#InCallService_E@ is interested in. The callback methods include the @B_android#telecom#Call_E@ for which the callback applies, allowing reuse of a single instance of your @B_android#telecom#Call#Callback_E@ implementation, if desired. Use @B_android#telecom#Call#registerCallback_E@ to register your callback(s). Ensure @B_android#telecom#Call#unregisterCallback_E@ is called when you no longer require callbacks (typically in @B_android#telecom#InCallService#onCallRemoved_E@). Note: Callbacks which occur before you call @B_android#telecom#Call#registerCallback_E@ will not reach your implementation of @B_android#telecom#Call#Callback_E@, so it is important to register your callback as soon as your @B_android#telecom#InCallService_E@ is notified of a new call via @B_android#telecom#InCallService#onCallAdded_E@."}