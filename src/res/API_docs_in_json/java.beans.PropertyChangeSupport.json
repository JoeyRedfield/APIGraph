{"Functions": {"addPropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property to listen on."], ["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChangeListener to be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a PropertyChangeListener for a specific property. The listener will be invoked only when a call on firePropertyChange names that specific property. The same listener object may be added more than once. For each property, the listener will be invoked the number of times it was added for that property. If propertyName or listener is null, no exception is thrown and no action is taken.", "history": "Added in API level 3", "FullName": "public void addPropertyChangeListener (String propertyName, PropertyChangeListener listener)"}, "fireIndexedPropertyChange(java.lang.String,int,java.lang.Object,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["int", "int: the index of the property element that was changed"], ["@B_java#lang#Object_E@", "Object: the old value of the property"], ["@B_java#lang#Object_E@", "Object: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal and non-null. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#firePropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void fireIndexedPropertyChange (String propertyName, int index, Object oldValue, Object newValue)"}, "firePropertyChange(java.beans.PropertyChangeEvent)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeEvent_E@", "PropertyChangeEvent: the PropertyChangeEvent to be fired"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Fires a property change event to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if the given event's old and new values are equal and non-null.", "history": "Added in API level 3", "FullName": "public void firePropertyChange (PropertyChangeEvent event)"}, "firePropertyChange(java.lang.String, int, int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["int", "int: the old value of the property"], ["int", "int: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#firePropertyChange_E@ method.", "history": "added in API level 3", "FullName": "public void firePropertyChange (String propertyName, int oldValue, int newValue)"}, "hasListeners(java.lang.String)": {"Returns": [["boolean", "true if there are one or more listeners for the given property"]], "Parameters": [["@B_java#lang#String_E@", "String: the property name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check if there are any listeners for a specific property, including those registered on all properties. If propertyName is null, only check for listeners registered on all properties.", "history": "Added in API level 3", "FullName": "public boolean hasListeners (String propertyName)"}, "firePropertyChange(java.lang.String,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["int", "int: the old value of the property"], ["int", "int: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports an integer bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#firePropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void firePropertyChange (String propertyName, int oldValue, int newValue)"}, "addPropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChangeListener to be added"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a PropertyChangeListener to the listener list. The listener is registered for all properties. The same listener object may be added more than once, and will be called as many times as it is added. If listener is null, no exception is thrown and no action is taken.", "history": "Added in API level 3", "FullName": "public void addPropertyChangeListener (PropertyChangeListener listener)"}, "getPropertyChangeListeners()": {"Returns": [["@B_java#beans#PropertyChangeListener_E@", "all of the PropertyChangeListeners added or an empty array if no listeners have been added"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#beans#PropertyChangeListenerProxy_E@"], "Permissions": [], "Description": "Returns an array of all the listeners that were added to the PropertyChangeSupport object with addPropertyChangeListener(). If some listeners have been added with a named property, then the returned array will be a mixture of PropertyChangeListeners and PropertyChangeListenerProxys. If the calling method is interested in distinguishing the listeners then it must test each element to see if it's a PropertyChangeListenerProxy, perform the cast, and examine the parameter.", "history": "Added in API level 3", "FullName": "public PropertyChangeListener[] getPropertyChangeListeners ()"}, "fireIndexedPropertyChange(java.lang.String,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["int", "int: the index of the property element that was changed"], ["int", "int: the old value of the property"], ["int", "int: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports an integer bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#fireIndexedPropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void fireIndexedPropertyChange (String propertyName, int index, int oldValue, int newValue)"}, "firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["@B_java#lang#Object_E@", "Object: the old value of the property"], ["@B_java#lang#Object_E@", "Object: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal and non-null. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#firePropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void firePropertyChange (String propertyName, Object oldValue, Object newValue)"}, "getPropertyChangeListeners(java.lang.String)": {"Returns": [["@B_java#beans#PropertyChangeListener_E@", "all of the PropertyChangeListeners associated with the named property. If no such listeners have been added, or if propertyName is null, an empty array is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property being listened to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an array of all the listeners which have been associated with the named property.", "history": "Added in API level 3", "FullName": "public PropertyChangeListener[] getPropertyChangeListeners (String propertyName)"}, "removePropertyChangeListener(java.lang.String,java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The name of the property that was listened on."], ["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChangeListener to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a PropertyChangeListener for a specific property. If listener was added more than once to the same event source for the specified property, it will be notified one less time after being removed. If propertyName is null, no exception is thrown and no action is taken. If listener is null, or was never added for the specified property, no exception is thrown and no action is taken.", "history": "Added in API level 3", "FullName": "public void removePropertyChangeListener (String propertyName, PropertyChangeListener listener)"}, "PropertyChangeSupport(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: The bean to be given as the source for any events."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a PropertyChangeSupport object.", "history": "Added in API level 3", "FullName": "public PropertyChangeSupport (Object sourceBean)"}, "fireIndexedPropertyChange(java.lang.String,int,boolean,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["int", "int: the index of the property element that was changed"], ["boolean", "boolean: the old value of the property"], ["boolean", "boolean: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a boolean bound indexed property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#fireIndexedPropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void fireIndexedPropertyChange (String propertyName, int index, boolean oldValue, boolean newValue)"}, "firePropertyChange(java.lang.String,boolean,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the programmatic name of the property that was changed"], ["boolean", "boolean: the old value of the property"], ["boolean", "boolean: the new value of the property"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reports a boolean bound property update to listeners that have been registered to track updates of all properties or a property with the specified name. No event is fired if old and new values are equal. This is merely a convenience wrapper around the more general @B_java#beans#PropertyChangeSupport#firePropertyChange_E@ method.", "history": "Added in API level 3", "FullName": "public void firePropertyChange (String propertyName, boolean oldValue, boolean newValue)"}, "removePropertyChangeListener(java.beans.PropertyChangeListener)": {"Returns": [], "Parameters": [["@B_java#beans#PropertyChangeListener_E@", "PropertyChangeListener: The PropertyChangeListener to be removed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Remove a PropertyChangeListener from the listener list. This removes a PropertyChangeListener that was registered for all properties. If listener was added more than once to the same event source, it will be notified one less time after being removed. If listener is null, or was never added, no exception is thrown and no action is taken.", "history": "Added in API level 3", "FullName": "public void removePropertyChangeListener (PropertyChangeListener listener)"}}, "Inheritance": [], "ClassName": "java.beans.PropertyChangeSupport", "ClassDesc": "This is a utility class that can be used by beans that support bound properties. It manages a list of listeners and dispatches @B_java#beans#PropertyChangeEvent_E@s to them. You can use an instance of this class as a member field of your bean and delegate these types of work to it. The @B_java#beans#PropertyChangeListener_E@ can be registered for all properties or for a property specified by name. Here is an example of PropertyChangeSupport usage that follows the rules and recommendations laid out in the JavaBeans\u2122 specification: A PropertyChangeSupport instance is thread-safe. This class is serializable. When it is serialized it will save (and restore) any listeners that are themselves serializable. Any non-serializable listeners will be skipped during serialization."}