{"Functions": {"findVirtual(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the desired method handle"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the type of the method, with the receiver argument omitted"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if the method does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the method is static or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle for a virtual method. The type of the method handle will be that of the method, with the receiver type (usually refc) prepended. The method and all its argument types must be accessible to the lookup object. When called, the handle will treat the first argument as a receiver and dispatch on the receiver's type to determine which method implementation to enter. (The dispatching action is identical with that performed by an invokevirtual or invokeinterface instruction.) The first argument will be of type refc if the lookup class has full privileges to access the member. Otherwise the member must be protected and the first argument will be restricted in type to the lookup class. The returned method handle will have 0x0080) is set. Because of the general invokevirtual instructions and method handles produced by findVirtual, if the class is MethodHandle and the name string is invokeExact or invoke, the resulting method handle is equivalent to one produced by @B_java#lang#invoke#MethodHandles#exactInvoker_E@ or @B_java#lang#invoke#MethodHandles#invoker_E@ with the same type argument.", "history": "Added in API level 26", "FullName": "public MethodHandle findVirtual (Class<?> refc, String name, MethodType type)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#invoke#MethodHandles#Lookup#in_E@"], "Permissions": [], "Description": "Displays the name of the class from which lookups are to be made. (The name is the one reported by @B_java#lang#Class#getName_E@.) If there are restrictions on the access permitted to this lookup, this is indicated by adding a suffix to the class name, consisting of a slash and a keyword. The keyword represents the strongest allowed access, and is chosen as follows: If no access is allowed, the suffix is \"/noaccess\". If only public access is allowed, the suffix is \"/public\". If only public and package access are allowed, the suffix is \"/package\". If only public, package, and private access are allowed, the suffix is \"/private\". If none of the above cases apply, it is the case that full access (public, package, private, and protected) is allowed. In this case, no suffix is added. This is true only of an object obtained originally from @B_java#lang#invoke#MethodHandles#lookup_E@. Objects created by @B_java#lang#invoke#MethodHandles#Lookup#in_E@ always have restricted access, and will display a suffix. (It may seem strange that protected access should be stronger than private access. Viewed independently from package access, protected access is the first to be lost, because it requires a direct subclass relationship between caller and callee.)", "history": "Added in API level 26", "FullName": "public String toString ()"}, "findConstructor(java.lang.Class<?>,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the desired method handle"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the type of the method, with the receiver argument omitted, and a void return type"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if the constructor does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle which creates an object and initializes it, using the constructor of the specified type. The parameter types of the method handle will be those of the constructor, while the return type will be a reference to the constructor's class. The constructor and all its argument types must be accessible to the lookup object. The requested type must have a return type of void. (This is consistent with the JVM's treatment of constructor type descriptors.) The returned method handle will have 0x0080) is set. If the returned method handle is invoked, the constructor's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle findConstructor (Class<?> refc, MethodType type)"}, "bind(java.lang.Object,java.lang.String,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the desired method handle"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object from which the method is accessed"], ["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the type of the method, with the receiver argument omitted"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if the method does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": ["@B_java#lang#invoke#MethodHandle#bindTo_E@", "@B_java#lang#invoke#MethodHandles#Lookup#findVirtual_E@"], "Permissions": [], "Description": "Produces an early-bound method handle for a non-static method. The receiver must have a supertype defc in which a method of the given name and type is accessible to the lookup class. The method and all its argument types must be accessible to the lookup object. The type of the method handle will be that of the method, without any insertion of an additional receiver parameter. The given receiver will be bound into the method handle, so that every call to the method handle will invoke the requested method on the given receiver. The returned method handle will have 0x0080) is set and the trailing array argument is not the only argument. (If the trailing array argument is the only argument, the given receiver value will be bound to it.) This is equivalent to the following code: defc is either receiver.getClass() or a super type of that class, in which the requested method is accessible to the lookup class. (Note that bindTo does not preserve variable arity.)", "history": "Added in API level 26", "FullName": "public MethodHandle bind (Object receiver, String name, MethodType type)"}, "unreflectGetter(java.lang.reflect.Field)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can load values from the reflected field"]], "Parameters": [["@B_java#lang#reflect#Field_E@", "Field: the reflected field"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if access checking fails"], ["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving read access to a reflected field. The type of the method handle will have a return type of the field's value type. If the field is static, the method handle will take no arguments. Otherwise, its single argument will be the instance containing the field. If the field's accessible flag is not set, access checking is performed immediately on behalf of the lookup class. If the field is static, and if the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle unreflectGetter (Field f)"}, "findStaticGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can load values from the field"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the field's name"], ["@B_java#lang#Class_E@", "Class: the field's type"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if the field does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the field is not static"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving read access to a static field. The type of the method handle will have a return type of the field's value type. The method handle will take no arguments. Access checking is performed immediately on behalf of the lookup class. If the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle findStaticGetter (Class<?> refc, String name, Class<?> type)"}, "findSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can store values into the field"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the field's name"], ["@B_java#lang#Class_E@", "Class: the field's type"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if the field does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the field is static"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving write access to a non-static field. The type of the method handle will have a void return type. The method handle will take two arguments, the instance containing the field, and the value to be stored. The second argument will be of the field's value type. Access checking is performed immediately on behalf of the lookup class.", "history": "Added in API level 26", "FullName": "public MethodHandle findSetter (Class<?> refc, String name, Class<?> type)"}, "lookupClass()": {"Returns": [["@B_java#lang#Class_E@", "the lookup class, on behalf of which this lookup object finds members"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells which class is performing the lookup. It is this class against which checks are performed for visibility and access permissions. The class implies a maximum level of access permission, but the permissions may be additionally limited by the bitmask @B_java#lang#invoke#MethodHandles#Lookup#lookupModes_E@, which controls whether non-public members can be accessed.", "history": "Added in API level 26", "FullName": "public Class<?> lookupClass ()"}, "in(java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandles#Lookup_E@", "a lookup object which reports the desired lookup class"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the desired lookup class for the new lookup object"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a lookup on the specified new lookup class. The resulting object will report the specified class as its own @B_java#lang#invoke#MethodHandles#Lookup#lookupClass_E@. However, the resulting Lookup object is guaranteed to have no more access capabilities than the original. In particular, access capabilities can be lost as follows: If the new lookup class differs from the old one, protected members will not be accessible by virtue of inheritance. (Protected members may continue to be accessible because of package sharing.) If the new lookup class is in a different package than the old one, protected and default (package) members will not be accessible. If the new lookup class is not within the same package member as the old one, private members will not be accessible. If the new lookup class is not accessible to the old lookup class, then no members, not even public members, will be accessible. (In all other cases, public members will continue to be accessible.)", "history": "Added in API level 26", "FullName": "public MethodHandles.Lookup in (Class<?> requestedLookupClass)"}, "findSpecial(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the desired method handle"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the name of the method (which must not be \"<init>\")"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the type of the method, with the receiver argument omitted"], ["@B_java#lang#Class_E@", "Class: the proposed calling class to perform the invokespecial"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if the method does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces an early-bound method handle for a virtual method. It will bypass checks for overriding methods on the receiver, invokespecial instruction from within the explicitly specified specialCaller. The type of the method handle will be that of the method, with a suitably restricted receiver type prepended. (The receiver type will be specialCaller or a subtype.) The method and all its argument types must be accessible to the lookup object. Before method resolution, if the explicitly specified caller class is not identical with the lookup class, or if this lookup object does not have The returned method handle will have 0x0080) is set. (Note: JVM internal methods named \"<init>\" are not visible to this API, even though the invokespecial instruction can refer to them in special circumstances. Use @B_java#lang#invoke#MethodHandles#Lookup#findConstructor_E@ to access instance initialization methods in a safe manner.)", "history": "Added in API level 26", "FullName": "public MethodHandle findSpecial (Class<?> refc, String name, MethodType type, Class<?> specialCaller)"}, "findStaticSetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can store values into the field"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the field's name"], ["@B_java#lang#Class_E@", "Class: the field's type"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if the field does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the field is not static"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving write access to a static field. The type of the method handle will have a void return type. The method handle will take a single argument, of the field's value type, the value to be stored. Access checking is performed immediately on behalf of the lookup class. If the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle findStaticSetter (Class<?> refc, String name, Class<?> type)"}, "unreflectConstructor(java.lang.reflect.Constructor<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can invoke the reflected constructor"]], "Parameters": [["@B_java#lang#reflect#Constructor_E@", "Constructor: the reflected constructor"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle for a reflected constructor. The type of the method handle will be that of the constructor, with the return type changed to the declaring class. The method handle will perform a newInstance operation, creating a new instance of the constructor's class on the arguments passed to the method handle. If the constructor's accessible flag is not set, access checking is performed immediately on behalf of the lookup class. The returned method handle will have 0x0080) is set. If the returned method handle is invoked, the constructor's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle unreflectConstructor (Constructor<?> c)"}, "unreflectSpecial(java.lang.reflect.Method,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can invoke the reflected method"]], "Parameters": [["@B_java#lang#reflect#Method_E@", "Method: the reflected method"], ["@B_java#lang#Class_E@", "Class: the class nominally calling the method"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle for a reflected method. It will bypass checks for overriding methods on the receiver, invokespecial instruction from within the explicitly specified specialCaller. The type of the method handle will be that of the method, with a suitably restricted receiver type prepended. (The receiver type will be specialCaller or a subtype.) If the method's accessible flag is not set, access checking is performed immediately on behalf of the lookup class, as if invokespecial instruction were being linked. Before method resolution, if the explicitly specified caller class is not identical with the lookup class, or if this lookup object does not have The returned method handle will have 0x0080) is set.", "history": "Added in API level 26", "FullName": "public MethodHandle unreflectSpecial (Method m, Class<?> specialCaller)"}, "lookupModes()": {"Returns": [["int", "the lookup modes, which limit the kinds of access performed by this lookup object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells which access-protection classes of members this lookup object can produce. The result is a bit-mask of the bits A freshly-created lookup object on the", "history": "Added in API level 26", "FullName": "public int lookupModes ()"}, "findGetter(java.lang.Class<?>,java.lang.String,java.lang.Class<?>)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can load values from the field"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class or interface from which the method is accessed"], ["@B_java#lang#String_E@", "String: the field's name"], ["@B_java#lang#Class_E@", "Class: the field's type"]], "Throws": [["@B_java#lang#NoSuchFieldException_E@", "if the field does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the field is static"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving read access to a non-static field. The type of the method handle will have a return type of the field's value type. The method handle's single argument will be the instance containing the field. Access checking is performed immediately on behalf of the lookup class.", "history": "Added in API level 26", "FullName": "public MethodHandle findGetter (Class<?> refc, String name, Class<?> type)"}, "findStatic(java.lang.Class<?>,java.lang.String,java.lang.invoke.MethodType)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "the desired method handle"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the class from which the method is accessed"], ["@B_java#lang#String_E@", "String: the name of the method"], ["@B_java#lang#invoke#MethodType_E@", "MethodType: the type of the method"]], "Throws": [["@B_java#lang#NoSuchMethodException_E@", "if the method does not exist"], ["@B_java#lang#IllegalAccessException_E@", "if access checking fails, or if the method is not static, or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#NullPointerException_E@", "if any argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle for a static method. The type of the method handle will be that of the method. (Since static methods do not take receivers, there is no additional receiver argument inserted into the method handle type, as there would be with @B_java#lang#invoke#MethodHandles#Lookup#findVirtual_E@ or @B_java#lang#invoke#MethodHandles#Lookup#findSpecial_E@.) The method and all its argument types must be accessible to the lookup object. The returned method handle will have 0x0080) is set. If the returned method handle is invoked, the method's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle findStatic (Class<?> refc, String name, MethodType type)"}, "unreflectSetter(java.lang.reflect.Field)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can store values into the reflected field"]], "Parameters": [["@B_java#lang#reflect#Field_E@", "Field: the reflected field"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if access checking fails"], ["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Produces a method handle giving write access to a reflected field. The type of the method handle will have a void return type. If the field is static, the method handle will take a single argument, of the field's value type, the value to be stored. Otherwise, the two arguments will be the instance containing the field, and the value to be stored. If the field's accessible flag is not set, access checking is performed immediately on behalf of the lookup class. If the field is static, and if the returned method handle is invoked, the field's class will be initialized, if it has not already been initialized.", "history": "Added in API level 26", "FullName": "public MethodHandle unreflectSetter (Field f)"}, "revealDirect(java.lang.invoke.MethodHandle)": {"Returns": [["@B_java#lang#invoke#MethodHandleInfo_E@", "a symbolic reference which can be used to reconstruct this method handle from this lookup object"]], "Parameters": [["@B_java#lang#invoke#MethodHandle_E@", "MethodHandle: a direct method handle to crack into symbolic reference components"]], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager is present and it refuses access"], ["@B_java#lang#IllegalArgumentException_E@", "if the target is not a direct method handle or if access checking fails"], ["@B_java#lang#NullPointerException_E@", "if the target is null"]], "SeeAlso": ["@B_java#lang#invoke#MethodHandleInfo_E@"], "Permissions": [], "Description": "Cracks a", "history": "Added in API level 26", "FullName": "public MethodHandleInfo revealDirect (MethodHandle target)"}, "unreflect(java.lang.reflect.Method)": {"Returns": [["@B_java#lang#invoke#MethodHandle_E@", "a method handle which can invoke the reflected method"]], "Parameters": [["@B_java#lang#reflect#Method_E@", "Method: the reflected method"]], "Throws": [["@B_java#lang#IllegalAccessException_E@", "if access checking fails or if the method's variable arity modifier bit is set and asVarargsCollector fails"], ["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Makes a not wrapped. The type of the method handle will be that of the method, with the receiver type prepended (but only if it is non-static). If the method's accessible flag is not set, access checking is performed immediately on behalf of the lookup class. If The returned method handle will have 0x0080) is set. If", "history": "Added in API level 26", "FullName": "public MethodHandle unreflect (Method m)"}}, "Inheritance": [], "ClassName": "java.lang.invoke.MethodHandles.Lookup", "ClassDesc": "A lookup object is a factory for creating method handles, when the creation requires access checking. Method handles do not perform access checks when they are called, but rather when they are created. Therefore, method handle access restrictions must be enforced when a method handle is created. The caller class against which those restrictions are enforced is known as the A lookup class which needs to create method handles will call @B_java#lang#invoke#MethodHandles#lookup_E@ to create a factory for itself. When the Lookup factory object is created, the identity of the lookup class is determined, and securely stored in the Lookup object. The lookup class (or its delegates) may then use factory methods on the Lookup object to create method handles for access-checked members. This includes all methods, constructors, and fields which are allowed to the lookup class, even private ones. Lookup object correspond to all major use cases for methods, constructors, and fields. Each method handle created by a factory method is the functional equivalent of a particular bytecode behavior. (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.) Here is a summary of the correspondence between these factory methods and the behavior the resulting method handles: C is the class or interface being searched for a member, documented as a parameter named refc in the lookup methods. The method type MT is composed from the return type T and the sequence of argument types A*. The constructor also has a sequence of argument types A* and is deemed to return the newly-created object of type C. Both MT and the field type FT are documented as a parameter named type. The formal parameter this stands for the self-reference of type C; if it is present, it is always the leading argument to the method handle invocation. (In the case of some protected members, this may be restricted in type to the lookup class; see below.) The name arg stands for all the other method handle arguments. In the code examples for the Core Reflection API, the name thisOrNull stands for a null reference if the accessed method or field is static, and this otherwise. The names aMethod, aField, and aConstructor stand for reflective objects corresponding to the given members. In cases where the given member is of variable arity (i.e., a method or constructor) the returned method handle will also be of Discussion: The equivalence between looked-up method handles and underlying class members and bytecode behaviors can break down in a few ways: If C is not symbolically accessible from the lookup class's loader, the lookup can still succeed, even when there is no equivalent Java expression or bytecoded constant. Likewise, if T or MT is not symbolically accessible from the lookup class's loader, the lookup can still succeed. For example, lookups for MethodHandle.invokeExact and MethodHandle.invoke will always succeed, regardless of requested type. If there is a security manager installed, it can forbid the lookup on various grounds (ldc instruction on a CONSTANT_MethodHandle constant is not subject to security manager checks. If the looked-up method has a Lookup, when a method handle is created. This is a key difference from the Core Reflection API, since @B_java#lang#reflect#Method#invoke_E@ performs access checking against every caller, on every call. All access checks start from a Lookup object, which compares its recorded lookup class against all requests to create method handles. A single Lookup object can be used to create any number of access-checked method handles, all checked against a single lookup class. A Lookup object can be shared with other trusted code, such as a metaobject protocol. A shared Lookup object delegates the capability to create method handles on private members of the lookup class. Even if privileged code uses the Lookup object, the access checking is confined to the privileges of the original lookup class. A lookup can fail, because the containing class is not accessible to the lookup class, or because the desired class member is missing, or because the desired class member is not accessible to the lookup class, or because the lookup object is not trusted enough to access the member. In any of these cases, a ReflectiveOperationException will be thrown from the attempted lookup. The exact class will be one of the following: NoSuchMethodException \u2014 if a method is requested but does not exist NoSuchFieldException \u2014 if a field is requested but does not exist IllegalAccessException \u2014 if the member exists but an access check fails In general, the conditions under which a method handle may be looked up for a method M are no more restrictive than the conditions under which the lookup class could have compiled, verified, and resolved a call to M. Where the JVM would raise exceptions like NoSuchMethodError, a method handle lookup will generally raise a corresponding checked exception, such as NoSuchMethodException. And the effect of invoking the method handle resulting from the lookup is M. The same point is true of fields and constructors. Discussion: Access checks only apply to named and reflected methods, constructors, and fields. Other method handle creation methods, such as @B_java#lang#invoke#MethodHandle#asType_E@, do not require any access checks, and are used independently of any Lookup object. If the desired member is protected, the usual JVM rules apply, including the requirement that the lookup class must be either be in the same package as the desired member, or must inherit that member. (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.) In addition, if the desired member is a non-static field or method in a different package, the resulting method handle may only be applied to objects of the lookup class or one of its subclasses. This requirement is enforced by narrowing the type of the leading this parameter from C (which will necessarily be a superclass of the lookup class) to the lookup class itself. The JVM imposes a similar requirement on invokespecial instruction, that the receiver argument must match both the resolved method and the current class. Again, this requirement is enforced by narrowing the type of the leading parameter to the resulting method handle. (See the Java Virtual Machine Specification, section 4.10.1.9.) The JVM represents constructors and static initializer blocks as internal methods with special names (\"<init>\" and \"<clinit>\"). The internal syntax of invocation instructions allows them to refer to such internal methods as if they were normal methods, but the JVM bytecode verifier rejects them. A lookup of such an internal method will produce a NoSuchMethodException. In some cases, access between nested classes is obtained by the Java compiler by creating an wrapper method to access a private method of another class in the same top-level declaration. For example, a nested class C.D can access private members within other related classes such as C, C.D.E, or C.B, but the Java compiler may need to generate wrapper methods in those related classes. In such cases, a Lookup object on C.E would be unable to those private members. A workaround for this limitation is the @B_java#lang#invoke#MethodHandles#Lookup#in_E@ method, which can transform a lookup on C.E into one on any of those other classes, without special elevation of privilege. The accesses permitted to a given lookup object may be limited, according to its set of @B_java#lang#invoke#MethodHandles#Lookup#lookupModes_E@, to a subset of members normally accessible to the lookup class. For example, the @B_java#lang#invoke#MethodHandles#publicLookup_E@ method produces a lookup object which is only allowed to access public members in public classes. The caller sensitive method @B_java#lang#invoke#MethodHandles#lookup_E@ produces a lookup object with full capabilities relative to its caller class, to emulate all supported bytecode behaviors. Also, the @B_java#lang#invoke#MethodHandles#Lookup#in_E@ method may produce a lookup object with fewer access modes than the original lookup object. Discussion of private access: We say that a lookup has private access if its private members. As documented in the relevant methods elsewhere, only lookups with private access possess the following capabilities: access private fields, methods, and constructors of the lookup class create method handles which invoke Class.forName create method handles which @B_java#lang#invoke#MethodHandles#Lookup#findSpecial_E@ instructions avoid create @B_java#lang#invoke#MethodHandles#Lookup#in_E@ which have private access to other classes within the same package member Each of these permissions is a consequence of the fact that a lookup object with private access can be securely traced back to an originating class, whose Class object is available. Such cross-loader references are also possible with the Core Reflection API, and are impossible to bytecode instructions such as invokestatic or getfield. There is a MethodHandles.Lookup API and the Core Reflection API (as found on @B_java#lang#Class_E@). If a security manager is present, member lookups are subject to additional checks. From one to three calls are made to the security manager. Any of these calls can refuse access by throwing a @B_java#lang#SecurityException_E@. Define smgr as the security manager, lookc as the lookup class of the current lookup object, refc as the containing class in which the member is being sought, and defc as the class in which the member is actually defined. The value lookc is defined as not present if the current lookup object does not have lookc is not present, or if its class loader is not the same as or an ancestor of the class loader of refc, then @B_java#lang#SecurityManager#checkPackageAccess_E@ is called, where refcPkg is the package of refc. lookc is not present, then @B_java#lang#SecurityManager#checkPermission_E@ with RuntimePermission(\"accessDeclaredMembers\") is called. lookc is not present, and if defc and refc are different, then @B_java#lang#SecurityManager#checkPackageAccess_E@ is called, where defcPkg is the package of defc. Security checks are performed after other access checks have passed. Therefore, the above rules presuppose a member that is public, or else that is being accessed from a lookup class that has rights to access the member. caller-sensitive method can behave differently depending on the identity of its immediate caller. If a method handle for a caller-sensitive method is requested, the general rules for In cases where the lookup object is @B_java#lang#invoke#MethodHandles#publicLookup_E@, or some other lookup object without IllegalAccessException. Discussion: For example, the caller-sensitive method @B_java#lang#Class#forName_E@ can return varying classes or throw varying exceptions, depending on the class loader of the class that calls it. A public lookup of Class.forName will fail, because there is no reasonable way to determine its bytecode behavior. If an application caches method handles for broad sharing, it should use publicLookup() to create them. If there is a lookup of Class.forName, it will fail, and the application must take appropriate action in that case. It may be that a later lookup, perhaps during the invocation of a bootstrap method, can incorporate the specific identity of the caller, making the method accessible. The function MethodHandles.lookup is caller sensitive so that there can be a secure foundation for lookups. Nearly all other methods in the JSR 292 API rely on lookup objects to check access requests."}