{"Functions": {"setTintMode(android.graphics.PorterDuff.Mode)": {"Returns": [], "Parameters": [["@B_android#graphics#PorterDuff#Mode_E@", "PorterDuff.Mode: A Porter-Duff blending mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#PorterDuff#Mode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "added in API level 21", "FullName": "public void setTintMode (PorterDuff.Mode tintMode)"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 21", "FullName": "public boolean isStateful ()"}, "draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The canvas to draw into"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Draws the AnimatedVectorDrawable into the given canvas.", "history": "Added in API level 21", "FullName": "public void draw (Canvas canvas)"}, "setHotspotBounds(int, int, int, int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "getIntrinsicWidth()": {"Returns": [["int", "the intrinsic width, or -1 if no intrinsic width"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic width. Intrinsic width is the width at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic width, such as a solid color, this method returns -1.", "history": "Added in API level 21", "FullName": "public int getIntrinsicWidth ()"}, "registerAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#Animatable2#AnimationCallback_E@", "Animatable2.AnimationCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a callback to listen to the animation events.", "history": "Added in API level 23", "FullName": "public void registerAnimationCallback (Animatable2.AnimationCallback callback)"}, "onLayoutDirectionChanged(int)": {"Returns": [["boolean", "true if the layout direction change has caused the appearance of the drawable to change such that it needs to be re-drawn, false otherwise"]], "Parameters": [["int", "int: Value is @B_android#view#View#LAYOUT_DIRECTION_LTR_E@, or @B_android#view#View#LAYOUT_DIRECTION_RTL_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the drawable's resolved layout direction changes.", "history": "Added in API level 23", "FullName": "public boolean onLayoutDirectionChanged (int layoutDirection)"}, "setHotspotBounds(int,int,int,int)": {"Returns": [], "Parameters": [["int", "int: position in pixels of the left bound"], ["int", "int: position in pixels of the top bound"], ["int", "int: position in pixels of the right bound"], ["int", "int: position in pixels of the bottom bound"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the bounds to which the hotspot is constrained, if they should be different from the drawable bounds.", "history": "Added in API level 21", "FullName": "public void setHotspotBounds (int left, int top, int right, int bottom)"}, "isRunning()": {"Returns": [["boolean", "True if the animation is running, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the animation is running.", "history": "Added in API level 21", "FullName": "public boolean isRunning ()"}, "start()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts the drawable's animation.", "history": "Added in API level 21", "FullName": "public void start ()"}, "getChangingConfigurations()": {"Returns": [["int", "Value is either 0 or a combination of @B_android#content#pm#ActivityInfo#CONFIG_MCC_E@, @B_android#content#pm#ActivityInfo#CONFIG_MNC_E@, @B_android#content#pm#ActivityInfo#CONFIG_LOCALE_E@, @B_android#content#pm#ActivityInfo#CONFIG_TOUCHSCREEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_E@, @B_android#content#pm#ActivityInfo#CONFIG_KEYBOARD_HIDDEN_E@, @B_android#content#pm#ActivityInfo#CONFIG_NAVIGATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_ORIENTATION_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_LAYOUT_E@, @B_android#content#pm#ActivityInfo#CONFIG_UI_MODE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_SMALLEST_SCREEN_SIZE_E@, @B_android#content#pm#ActivityInfo#CONFIG_DENSITY_E@, @B_android#content#pm#ActivityInfo#CONFIG_LAYOUT_DIRECTION_E@, @B_android#content#pm#ActivityInfo#CONFIG_COLOR_MODE_E@, and @B_android#content#pm#ActivityInfo#CONFIG_FONT_SCALE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a mask of the configuration parameters for which this drawable may change, requiring that it be re-created. The default implementation returns whatever was provided through @B_android#graphics#drawable#Drawable#setChangingConfigurations_E@ or 0 by default. Subclasses may extend this to or in the changing configurations of any other drawables they hold.", "history": "Added in API level 21", "FullName": "public int getChangingConfigurations ()"}, "AnimatedVectorDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AnimatedVectorDrawable ()"}, "getOpticalInsets()": {"Returns": [["@B_android#graphics#Insets_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return in insets the layout insets suggested by this Drawable for use with alignment operations during layout.", "history": "Added in API level 29", "FullName": "public Insets getOpticalInsets ()"}, "getAlpha()": {"Returns": [["int", "the containing vector drawable's root alpha value."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "For API 25 and later, AnimatedVectorDrawable runs on RenderThread. Therefore, when the root alpha is being animated, this getter does not guarantee to return an up-to-date alpha value.", "history": "Added in API level 21", "FullName": "public int getAlpha ()"}, "getIntrinsicHeight()": {"Returns": [["int", "the intrinsic height, or -1 if no intrinsic height"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the drawable's intrinsic height. Intrinsic height is the height at which the drawable would like to be laid out, including any inherent padding. If the drawable has no intrinsic height, such as a solid color, this method returns -1.", "history": "Added in API level 21", "FullName": "public int getIntrinsicHeight ()"}, "getConstantState()": {"Returns": [["@B_android#graphics#drawable#Drawable#ConstantState_E@", "The ConstantState associated to that Drawable. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a @B_android#graphics#drawable#Drawable#ConstantState_E@ instance that holds the shared state of this Drawable.", "history": "Added in API level 21", "FullName": "public Drawable.ConstantState getConstantState ()"}, "getOpacity()": {"Returns": [["int", "int The opacity class of the Drawable. Value is @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is no longer used in graphics optimizations Return the opacity/transparency of this Drawable. The returned value is one of the abstract format constants in @B_android#graphics#PixelFormat_E@: @B_android#graphics#PixelFormat#UNKNOWN_E@, @B_android#graphics#PixelFormat#TRANSLUCENT_E@, @B_android#graphics#PixelFormat#TRANSPARENT_E@, or @B_android#graphics#PixelFormat#OPAQUE_E@. An OPAQUE drawable is one that draws all all content within its bounds, completely covering anything behind the drawable. A TRANSPARENT drawable is one that draws nothing within its bounds, allowing everything behind it to show through. A TRANSLUCENT drawable is a drawable in any other state, where the drawable will draw some, but not all, of the content within its bounds and at least some content behind the drawable will be visible. If the visibility of the drawable's contents cannot be determined, the safest/best return value is TRANSLUCENT. Generally a Drawable should be as conservative as possible with the value it returns. For example, if it contains multiple child drawables and only shows one of them at a time, if only one of the children is TRANSLUCENT and the others are OPAQUE then TRANSLUCENT should be returned. You can use the method @B_android#graphics#drawable#Drawable#resolveOpacity_E@ to perform a standard reduction of two opacities to the appropriate single output. Note that the returned value does not necessarily take into account a custom alpha or color filter that has been applied by the client through the @B_android#graphics#drawable#Drawable#setAlpha_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ methods. Some subclasses, such as @B_android#graphics#drawable#BitmapDrawable_E@, @B_android#graphics#drawable#ColorDrawable_E@, and @B_android#graphics#drawable#GradientDrawable_E@, do account for the value of @B_android#graphics#drawable#Drawable#setAlpha_E@, but the general behavior is dependent upon the implementation of the subclass.", "history": "Added in API level 21", "FullName": "public int getOpacity ()"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: Resources used to resolve attribute values This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: XML parser from which to inflate this Drawable This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: Base set of attribute values This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: Theme to apply, may be null This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources res, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}, "stop()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops the drawable's animation.", "history": "Added in API level 21", "FullName": "public void stop ()"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "getOutline(android.graphics.Outline)": {"Returns": [], "Parameters": [["@B_android#graphics#Outline_E@", "Outline: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to get the drawable to populate the Outline that defines its drawing area. This method is called by the default @B_android#view#ViewOutlineProvider_E@ to define the outline of the View. The default behavior defines the outline to be the bounding rectangle of 0 alpha. Subclasses that wish to convey a different shape or alpha value must override this method.", "history": "Added in API level 21", "FullName": "public void getOutline (Outline outline)"}, "unregisterAnimationCallback(android.graphics.drawable.Animatable2.AnimationCallback)": {"Returns": [["boolean", "false if callback didn't exist in the call back list, or true if callback has been removed successfully."]], "Parameters": [["@B_android#graphics#drawable#Animatable2#AnimationCallback_E@", "Animatable2.AnimationCallback: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the specified animation callback.", "history": "Added in API level 23", "FullName": "public boolean unregisterAnimationCallback (Animatable2.AnimationCallback callback)"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets the AnimatedVectorDrawable to the start state as specified in the animators.", "history": "Added in API level 23", "FullName": "public void reset ()"}, "setAlpha(int)": {"Returns": [], "Parameters": [["int", "int: Value is between 0 and 255 inclusive"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an alpha value for the drawable. 0 means fully transparent, and 255 means fully opaque.", "history": "Added in API level 21", "FullName": "public void setAlpha (int alpha)"}, "setColorFilter(android.graphics.ColorFilter)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorFilter_E@", "ColorFilter: The color filter to apply, or null to remove the existing color filter This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify an optional color filter for the drawable. If a Drawable has a ColorFilter, each output pixel of the Drawable's drawing contents will be modified by the color filter before it is blended onto the render target of a Canvas. Pass null to remove any existing color filter. null color filter disables @B_android#graphics#drawable#Drawable#setTintList_E@.", "history": "Added in API level 21", "FullName": "public void setColorFilter (ColorFilter colorFilter)"}, "onBoundsChange(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on the bounds.", "history": "Added in API level 21", "FullName": "protected void onBoundsChange (Rect bounds)"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 21", "FullName": "protected boolean onStateChange (int[] state)"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: the theme to apply This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme t)"}, "setHotspot(float, float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "setTintBlendMode(android.graphics.BlendMode)": {"Returns": [], "Parameters": [["@B_android#graphics#BlendMode_E@", "BlendMode: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies a tint blending mode for this drawable. Defines how this drawable's tint color should be blended into the drawable before it is drawn to screen. Default tint mode is @B_android#graphics#BlendMode#SRC_IN_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@", "history": "Added in API level 29", "FullName": "public void setTintBlendMode (BlendMode blendMode)"}, "setHotspot(float,float)": {"Returns": [], "Parameters": [["float", "float: The X coordinate of the center of the hotspot"], ["float", "float: The Y coordinate of the center of the hotspot"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies the hotspot's location within the drawable.", "history": "Added in API level 21", "FullName": "public void setHotspot (float x, float y)"}, "setTintList(android.content.res.ColorStateList)": {"Returns": [], "Parameters": [["@B_android#content#res#ColorStateList_E@", "ColorStateList: Color state list to use for tinting this drawable, or null to clear the tint This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specifies tint color for this drawable as a color state list. A Drawable's drawing content will be blended together with its tint before it is drawn to the screen. This functions similarly to @B_android#graphics#drawable#Drawable#setColorFilter_E@. @B_android#graphics#drawable#Drawable#setColorFilter_E@ or @B_android#graphics#drawable#Drawable#setColorFilter_E@ overrides tint.", "history": "Added in API level 21", "FullName": "public void setTintList (ColorStateList tint)"}, "canApplyTheme()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public boolean canApplyTheme ()"}, "clearAnimationCallbacks()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all existing animation callbacks.", "history": "Added in API level 23", "FullName": "public void clearAnimationCallbacks ()"}, "getColorFilter()": {"Returns": [["@B_android#graphics#ColorFilter_E@", "the current color filter, or null if none set"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current color filter, or null if none set.", "history": "Added in API level 21", "FullName": "public ColorFilter getColorFilter ()"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 21", "FullName": "public Drawable mutate ()"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "onLevelChange(int)": {"Returns": [["boolean", "Returns true if the level change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last level."]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you vary based on level.", "history": "Added in API level 21", "FullName": "protected boolean onLevelChange (int level)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@"], "ClassName": "android.graphics.drawable.AnimatedVectorDrawable", "ClassDesc": "This class animates properties of a @B_android#graphics#drawable#VectorDrawable_E@ with animations defined using @B_android#animation#ObjectAnimator_E@ or @B_android#animation#AnimatorSet_E@. Starting from API 25, AnimatedVectorDrawable runs on RenderThread (as opposed to on UI thread for earlier APIs). This means animations in AnimatedVectorDrawable can remain smooth even when there is heavy workload on the UI thread. Note: If the UI thread is unresponsive, RenderThread may continue animating until the UI thread is capable of pushing another frame. Therefore, it is not possible to precisely coordinate a RenderThread-enabled AnimatedVectorDrawable with UI thread animations. Additionally, @B_android#graphics#drawable#Animatable2#AnimationCallback#onAnimationEnd_E@ will be called the frame after the AnimatedVectorDrawable finishes on the RenderThread. AnimatedVectorDrawable can be defined in either Animations can be performed on the animatable attributes in @B_android#graphics#drawable#VectorDrawable_E@. These attributes will be animated by @B_android#animation#ObjectAnimator_E@. The ObjectAnimator's target can be the root element, a group element or a path element. The targeted elements need to be named uniquely within the same VectorDrawable. Elements without animation do not need to be named. Here are all the animatable attributes in @B_android#graphics#drawable#VectorDrawable_E@: An AnimatedVectorDrawable element has a VectorDrawable attribute, and one or more target element(s). The target element can specify its target by android:name attribute, and link the target with the proper ObjectAnimator or AnimatorSet by android:animation attribute. The following code sample defines an AnimatedVectorDrawable. Note that the names refer to the groups and paths in the From the previous rotation.xml rotates the target group from 0 degree to 360 degrees over 6000ms: Since the AAPT tool supports a new format that bundles several related XML files together, we can merge the XML files from the previous examples into one XML file:"}