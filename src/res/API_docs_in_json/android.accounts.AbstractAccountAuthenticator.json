{"Functions": {"addAccountFromCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response."]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account to clone, will never be null"], ["@B_android#os#Bundle_E@", "Bundle: the Bundle containing the required credentials to create the account. Contents of the Bundle are only meaningful to the authenticator. This Bundle is provided by @B_android#accounts#AbstractAccountAuthenticator#getAccountCredentialsForCloning_E@."]], "Throws": [["", "android.accounts.NetworkErrorException"], ["@B_android#accounts#NetworkErrorException_E@", ""]], "SeeAlso": ["@B_android#accounts#AbstractAccountAuthenticator#getAccountCredentialsForCloning_E@"], "Permissions": [], "Description": "Creates an account based on credentials provided by the authenticator instance of another user on the device, who has chosen to share the account with this user.", "history": "Added in API level 18", "FullName": "public Bundle addAccountFromCredentials (AccountAuthenticatorResponse response, Account account, Bundle accountCredentials)"}, "getAuthTokenLabel(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the localized label of the auth token type, may be null if the type isn't known"]], "Parameters": [["@B_java#lang#String_E@", "String: the authTokenType whose label is to be returned, will never be null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ask the authenticator for a localized label for the given authTokenType.", "history": "Added in API level 5", "FullName": "public abstract String getAuthTokenLabel (String authTokenType)"}, "AbstractAccountAuthenticator(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public AbstractAccountAuthenticator (Context context)"}, "startUpdateCredentialsSession(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_ACCOUNT_SESSION_BUNDLE for updating the locally stored credentials later, and if account is re-authenticated, optional AccountManager#KEY_PASSWORD and AccountManager#KEY_ACCOUNT_STATUS_TOKEN for checking the status of the account later, or AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account whose credentials are to be updated, will never be null"], ["@B_java#lang#String_E@", "String: the type of auth token to retrieve after updating the credentials, may be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options, may be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": ["@B_android#accounts#AbstractAccountAuthenticator#finishSession_E@"], "Permissions": [], "Description": "Asks user to re-authenticate for an account but defers updating the locally stored credentials. No file I/O should be performed in this call. Local credentials should be updated only when @B_android#accounts#AbstractAccountAuthenticator#finishSession_E@ is called after this. Note: when overriding this method, @B_android#accounts#AbstractAccountAuthenticator#finishSession_E@ should be overridden too.", "history": "Added in API level 26", "FullName": "public Bundle startUpdateCredentialsSession (AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options)"}, "updateCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_ACCOUNT_NAME and AccountManager#KEY_ACCOUNT_TYPE of the account whose credentials were updated, or AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account whose credentials are to be updated, will never be null"], ["@B_java#lang#String_E@", "String: the type of auth token to retrieve after updating the credentials, may be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options, may be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Update the locally stored credentials for an account.", "history": "Added in API level 5", "FullName": "public abstract Bundle updateCredentials (AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options)"}, "startAddAccountSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_ACCOUNT_SESSION_BUNDLE for adding the account to device later, and if account is authenticated, optional AccountManager#KEY_PASSWORD and AccountManager#KEY_ACCOUNT_STATUS_TOKEN for checking the status of the account, or AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_java#lang#String_E@", "String: the type of account to authenticate with, will never be null"], ["@B_java#lang#String_E@", "String: the type of auth token to retrieve after authenticating with the account, may be null"], ["@B_java#lang#String_E@", "String: a String array of authenticator-specific features that the account authenticated with must support, may be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options, may be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": ["@B_android#accounts#AbstractAccountAuthenticator#finishSession_E@"], "Permissions": [], "Description": "Starts the add account session to authenticate user to an account of the specified accountType. No file I/O should be performed in this call. Account should be added to device only when @B_android#accounts#AbstractAccountAuthenticator#finishSession_E@ is called after this. Note: when overriding this method, @B_android#accounts#AbstractAccountAuthenticator#finishSession_E@ should be overridden too.", "history": "Added in API level 26", "FullName": "public Bundle startAddAccountSession (AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options)"}, "editProperties(android.accounts.AccountAuthenticatorResponse,java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle containing the result or the Intent to start to continue the request. If this is null then the request is considered to still be active and the result should sent later using response."]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: used to set the result for the request. If the Constants.INTENT_KEY is set in the bundle then this response field is to be used for sending future results if and when the Intent is started."], ["@B_java#lang#String_E@", "String: the AccountType whose properties are to be edited."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a Bundle that contains the Intent of the activity that can be used to edit the properties. In order to indicate success the activity should call response.setResult() with a non-null Bundle.", "history": "Added in API level 5", "FullName": "public abstract Bundle editProperties (AccountAuthenticatorResponse response, String accountType)"}, "isCredentialsUpdateSuggested(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_BOOLEAN_RESULT, true if update of account's credentials is suggested, false otherwise AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null."], ["@B_android#accounts#Account_E@", "Account: the account to check, will never be null"], ["@B_java#lang#String_E@", "String: a String of token which can be used to check the status of locally stored credentials and if update of credentials is suggested"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if update of the account credentials is suggested.", "history": "Added in API level 26", "FullName": "public Bundle isCredentialsUpdateSuggested (AccountAuthenticatorResponse response, Account account, String statusToken)"}, "getIBinder()": {"Returns": [["@B_android#os#IBinder_E@", "the IBinder for the AccountAuthenticator"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 5", "FullName": "public final IBinder getIBinder ()"}, "getAccountRemovalAllowed(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_BOOLEAN_RESULT, true if the removal of the account is allowed, false otherwise AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account to check, will never be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the removal of this account is allowed.", "history": "Added in API level 5", "FullName": "public Bundle getAccountRemovalAllowed (AccountAuthenticatorResponse response, Account account)"}, "getAccountCredentialsForCloning(android.accounts.AccountAuthenticatorResponse,android.accounts.Account)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response."]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account to clone, will never be null"]], "Throws": [["", "android.accounts.NetworkErrorException"], ["@B_android#accounts#NetworkErrorException_E@", ""]], "SeeAlso": ["@B_android#accounts#AbstractAccountAuthenticator#addAccountFromCredentials_E@"], "Permissions": [], "Description": "Returns a Bundle that contains whatever is required to clone the account on a different user. The Bundle is passed to the authenticator instance in the target user via @B_android#accounts#AbstractAccountAuthenticator#addAccountFromCredentials_E@. The default implementation returns null, indicating that cloning is not supported.", "history": "Added in API level 18", "FullName": "public Bundle getAccountCredentialsForCloning (AccountAuthenticatorResponse response, Account account)"}, "finishSession(android.accounts.AccountAuthenticatorResponse,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_ACCOUNT_NAME and AccountManager#KEY_ACCOUNT_TYPE of the account that was added or local credentials were updated, and optional AccountManager#KEY_ACCOUNT_STATUS_TOKEN for checking the status of the account later, or AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_java#lang#String_E@", "String: the type of account to authenticate with, will never be null"], ["@B_android#os#Bundle_E@", "Bundle: a bundle of session data created by @B_android#accounts#AbstractAccountAuthenticator#startAddAccountSession_E@ used for adding account to device, or by @B_android#accounts#AbstractAccountAuthenticator#startUpdateCredentialsSession_E@ used for updating local credentials."]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": ["@B_android#accounts#AbstractAccountAuthenticator#startAddAccountSession_E@"], "Permissions": [], "Description": "Finishes the session started by #startAddAccountSession or #startUpdateCredentials by installing the account to device with AccountManager, or updating the local credentials. File I/O may be performed in this call. Note: when overriding this method, @B_android#accounts#AbstractAccountAuthenticator#startAddAccountSession_E@ and @B_android#accounts#AbstractAccountAuthenticator#startUpdateCredentialsSession_E@ should be overridden too.", "history": "Added in API level 26", "FullName": "public Bundle finishSession (AccountAuthenticatorResponse response, String accountType, Bundle sessionBundle)"}, "getAuthToken(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response."]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account whose credentials are to be retrieved, will never be null"], ["@B_java#lang#String_E@", "String: the type of auth token to retrieve, will never be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options. It always contains @B_android#accounts#AccountManager#KEY_CALLER_PID_E@ and @B_android#accounts#AccountManager#KEY_CALLER_UID_E@ fields which will let authenticator know the identity of the caller."]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an authtoken for an account. If not null, the resultant @B_android#os#Bundle_E@ will contain different sets of keys depending on whether a token was successfully issued and, if not, whether one could be issued via some @B_android#app#Activity_E@. If a token cannot be provided without some additional activity, the Bundle should contain @B_android#accounts#AccountManager#KEY_INTENT_E@ with an associated @B_android#content#Intent_E@. On the other hand, if there is no such activity, then a Bundle containing @B_android#accounts#AccountManager#KEY_ERROR_CODE_E@ and @B_android#accounts#AccountManager#KEY_ERROR_MESSAGE_E@ should be returned. If a token can be successfully issued, the implementation should return the @B_android#accounts#AccountManager#KEY_ACCOUNT_NAME_E@ and @B_android#accounts#AccountManager#KEY_ACCOUNT_TYPE_E@ of the account associated with the token as well as the @B_android#accounts#AccountManager#KEY_AUTHTOKEN_E@. In addition @B_android#accounts#AbstractAccountAuthenticator_E@ implementations that declare themselves android:customTokens=true may also provide a non-negative @B_android#accounts#AbstractAccountAuthenticator#KEY_CUSTOM_TOKEN_EXPIRY_E@ long value containing the expiration timestamp of the expiration time (in millis since the unix epoch), tokens will be cached in memory based on application's packageName/signature for however long that was specified. Implementers should assume that tokens will be cached on the basis of account and authTokenType. The system may ignore the contents of the supplied options Bundle when determining to re-use a cached token. Furthermore, implementers should assume a supplied expiration time will be treated as non-binding advice. Finally, note that for android:customTokens=false authenticators, tokens are cached indefinitely until some client calls @B_android#accounts#AccountManager#invalidateAuthToken_E@.", "history": "Added in API level 5", "FullName": "public abstract Bundle getAuthToken (AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options)"}, "confirmCredentials(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_BOOLEAN_RESULT, true if the check succeeded, false otherwise AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account whose credentials are to be checked, will never be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options, may be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the user knows the credentials of an account.", "history": "Added in API level 5", "FullName": "public abstract Bundle confirmCredentials (AccountAuthenticatorResponse response, Account account, Bundle options)"}, "addAccount(android.accounts.AccountAuthenticatorResponse,java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle)": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_ACCOUNT_NAME and AccountManager#KEY_ACCOUNT_TYPE of the account that was added, or AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_java#lang#String_E@", "String: the type of account to add, will never be null"], ["@B_java#lang#String_E@", "String: the type of auth token to retrieve after adding the account, may be null"], ["@B_java#lang#String_E@", "String: a String array of authenticator-specific features that the added account must support, may be null"], ["@B_android#os#Bundle_E@", "Bundle: a Bundle of authenticator-specific options. It always contains @B_android#accounts#AccountManager#KEY_CALLER_PID_E@ and @B_android#accounts#AccountManager#KEY_CALLER_UID_E@ fields which will let authenticator know the identity of the caller."]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Adds an account of the specified accountType.", "history": "Added in API level 5", "FullName": "public abstract Bundle addAccount (AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options)"}, "hasFeatures(android.accounts.AccountAuthenticatorResponse,android.accounts.Account,java.lang.String[])": {"Returns": [["@B_android#os#Bundle_E@", "a Bundle result or null if the result is to be returned via the response. The result will contain either: AccountManager#KEY_INTENT, or AccountManager#KEY_BOOLEAN_RESULT, true if the account has all the features, false otherwise AccountManager#KEY_ERROR_CODE and AccountManager#KEY_ERROR_MESSAGE to indicate an error"]], "Parameters": [["@B_android#accounts#AccountAuthenticatorResponse_E@", "AccountAuthenticatorResponse: to send the result back to the AccountManager, will never be null"], ["@B_android#accounts#Account_E@", "Account: the account to check, will never be null"], ["@B_java#lang#String_E@", "String: an array of features to check, will never be null"]], "Throws": [["@B_android#accounts#NetworkErrorException_E@", "if the authenticator could not honor the request due to a network error"]], "SeeAlso": [], "Permissions": [], "Description": "Checks if the account supports all the specified authenticator specific features.", "history": "Added in API level 5", "FullName": "public abstract Bundle hasFeatures (AccountAuthenticatorResponse response, Account account, String[] features)"}}, "Inheritance": [], "ClassName": "android.accounts.AbstractAccountAuthenticator", "ClassDesc": "Abstract base class for creating AccountAuthenticators. In order to be an authenticator one must extend this class, provide implementations for the abstract methods, and write a service that returns the result of @B_android#accounts#AbstractAccountAuthenticator#getIBinder_E@ in the service's @B_android#app#Service#onBind_E@ when invoked with an intent with action @B_android#accounts#AccountManager#ACTION_AUTHENTICATOR_INTENT_E@. This service must specify the following intent filter and metadata tags in its AndroidManifest.xml file android:resource attribute must point to a resource that looks like: android:accountType attribute must be a string that uniquely identifies your authenticator and will be the same string that user will use when making calls on the @B_android#accounts#AccountManager_E@ and it also corresponds to @B_android#accounts#Account#type_E@ for your accounts. One user of the android:icon is the \"Account & Sync\" settings page and one user of the android:smallIcon is the Contact Application's tab panels. The preferences attribute points to a PreferenceScreen xml hierarchy that contains a list of PreferenceScreens that can be invoked to manage the authenticator. An example is: The standard pattern for implementing any of the abstract methods is the following: If the supplied arguments are enough for the authenticator to fully satisfy the request then it will do so and return a @B_android#os#Bundle_E@ that contains the results. If the authenticator needs information from the user to satisfy the request then it will create an @B_android#content#Intent_E@ to an activity that will prompt the user for the information and then carry out the request. This intent must be returned in a Bundle as key @B_android#accounts#AccountManager#KEY_INTENT_E@. The activity needs to return the final result when it is complete so the Intent should contain the @B_android#accounts#AccountAuthenticatorResponse_E@ as @B_android#accounts#AccountManager#KEY_ACCOUNT_MANAGER_RESPONSE_E@. The activity must then call @B_android#accounts#AccountAuthenticatorResponse#onResult_E@ or @B_android#accounts#AccountAuthenticatorResponse#onError_E@ when it is complete. If the authenticator cannot synchronously process the request and return a result then it may choose to return null and then use the AccountManagerResponse to send the result when it has completed the request. The following descriptions of each of the abstract authenticator methods will not describe the possible asynchronous nature of the request handling and will instead just describe the input parameters and the expected result. When writing an activity to satisfy these requests one must pass in the AccountManagerResponse and return the result via that response when the activity finishes (or whenever else the activity author deems it is the correct time to respond). The @B_android#accounts#AccountAuthenticatorActivity_E@ handles this, so one may wish to extend that when writing activities to handle these requests."}