{"Functions": {"setShifted(boolean)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean setShifted (boolean shiftState)"}, "getKeys()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public List<Keyboard.Key> getKeys ()"}, "getShiftKeyIndex()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public int getShiftKeyIndex ()"}, "isShifted()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public boolean isShifted ()"}, "getNearestKeys(int,int)": {"Returns": [["int[]", "the array of integer indices for the nearest keys to the given point. If the given point is out of range, then an array of size zero is returned."]], "Parameters": [["int", "int: the x-coordinate of the point"], ["int", "int: the y-coordinate of the point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the indices of the keys that are closest to the given point.", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public int[] getNearestKeys (int x, int y)"}, "getHorizontalGap()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected int getHorizontalGap ()"}, "getMinWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public int getMinWidth ()"}, "Keyboard(android.content.Context, int, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the resource file that contains the keyboard layout and keys."], ["int", "int: keyboard mode identifier"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a keyboard from the given xml key layout file. Weeds out rows that have a keyboard mode defined but don't match the specified mode.", "history": "added in API level 3", "FullName": "public Keyboard (Context context, int xmlLayoutResId, int modeId)"}, "setHorizontalGap(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void setHorizontalGap (int gap)"}, "Keyboard(android.content.Context,int,java.lang.CharSequence,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the layout template file, containing no keys."], ["@B_java#lang#CharSequence_E@", "CharSequence: the list of characters to display on the keyboard. One key will be created for each character."], ["int", "int: the number of columns of keys to display. If this number is greater than the number of keys that can fit in a row, it will be ignored. If this number is -1, the keyboard will fit as many keys as possible in each row."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a blank keyboard from the given resource file and populates it with the specified characters in left-to-right, top-to-bottom fashion, using the specified number of columns. If the specified number of columns is -1, then the keyboard will fit as many keys as possible in each row.", "history": "Added in API level 3", "FullName": "public Keyboard (Context context, int layoutTemplateResId, CharSequence characters, int columns, int horizontalPadding)"}, "getModifierKeys()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public List<Keyboard.Key> getModifierKeys ()"}, "setKeyHeight(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void setKeyHeight (int height)"}, "createRowFromXml(android.content.res.Resources,android.content.res.XmlResourceParser)": {"Returns": [["@B_android#inputmethodservice#Keyboard#Row_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources no parameter comment"], ["@B_android#content#res#XmlResourceParser_E@", "XmlResourceParser no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected Keyboard.Row createRowFromXml (Resources res, XmlResourceParser parser)"}, "Keyboard(android.content.Context, int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the resource file that contains the keyboard layout and keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a keyboard from the given xml key layout file.", "history": "added in API level 3", "FullName": "public Keyboard (Context context, int xmlLayoutResId)"}, "Keyboard(android.content.Context,int,int,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the resource file that contains the keyboard layout and keys."], ["int", "int: keyboard mode identifier"], ["int", "int: sets width of keyboard"], ["int", "int: sets height of keyboard"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a keyboard from the given xml key layout file. Weeds out rows that have a keyboard mode defined but don't match the specified mode.", "history": "Added in API level 11", "FullName": "public Keyboard (Context context, int xmlLayoutResId, int modeId, int width, int height)"}, "Keyboard(android.content.Context,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the resource file that contains the keyboard layout and keys."], ["int", "int: keyboard mode identifier"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a keyboard from the given xml key layout file. Weeds out rows that have a keyboard mode defined but don't match the specified mode.", "history": "Added in API level 3", "FullName": "public Keyboard (Context context, int xmlLayoutResId, int modeId)"}, "getNearestKeys(int, int)": {"Returns": [["int[]", "the array of integer indices for the nearest keys to the given point. If the given point is out of range, then an array of size zero is returned."]], "Parameters": [["int", "int: the x-coordinate of the point"], ["int", "int: the y-coordinate of the point"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the indices of the keys that are closest to the given point.", "history": "added in API level 3", "FullName": "public int[] getNearestKeys (int x, int y)"}, "getKeyWidth()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected int getKeyWidth ()"}, "setKeyWidth(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void setKeyWidth (int width)"}, "getHeight()": {"Returns": [["int", "the total height of the keyboard"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total height of the keyboard", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "public int getHeight ()"}, "Keyboard(android.content.Context,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application or service context"], ["int", "int: the resource file that contains the keyboard layout and keys."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a keyboard from the given xml key layout file.", "history": "Added in API level 3", "FullName": "public Keyboard (Context context, int xmlLayoutResId)"}, "createKeyFromXml(android.content.res.Resources,android.inputmethodservice.Keyboard.Row,int,int,android.content.res.XmlResourceParser)": {"Returns": [["@B_android#inputmethodservice#Keyboard#Key_E@", "no returns description in source"]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources no parameter comment"], ["@B_android#inputmethodservice#Keyboard#Row_E@", "Keyboard.Row no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["@B_android#content#res#XmlResourceParser_E@", "XmlResourceParser no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected Keyboard.Key createKeyFromXml (Resources res, Keyboard.Row parent, int x, int y, XmlResourceParser parser)"}, "getVerticalGap()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected int getVerticalGap ()"}, "getKeyHeight()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected int getKeyHeight ()"}, "setVerticalGap(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 3 Deprecated in API level 29", "FullName": "protected void setVerticalGap (int gap)"}}, "Inheritance": [], "ClassName": "android.inputmethodservice.Keyboard", "ClassDesc": "This class is deprecated because this is just a convenient UI widget class that application developers can re-implement on top of existing public APIs. If you have already depended on this class, consider copying the implementation from AOSP into your project or re-implementing a similar widget by yourselves Loads an XML description of a keyboard and stores the attributes of the keys. A keyboard consists of rows of keys. The layout file for a keyboard contains XML that looks like the following snippet:"}