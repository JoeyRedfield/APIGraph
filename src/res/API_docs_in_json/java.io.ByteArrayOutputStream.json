{"Functions": {"size()": {"Returns": [["int", "the value of the count field, which is the number of valid bytes in this output stream."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#ByteArrayOutputStream#count_E@"], "Permissions": [], "Description": "Returns the current size of the buffer.", "history": "Added in API level 1", "FullName": "public int size ()"}, "reset()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#ByteArrayInputStream#count_E@"], "Permissions": [], "Description": "Resets the count field of this byte array output stream to zero, so that all currently accumulated output in the output stream is discarded. The output stream can be used again, reusing the already allocated buffer space.", "history": "Added in API level 1", "FullName": "public void reset ()"}, "write(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this byte array output stream.", "history": "added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closing a", "history": "Added in API level 1", "FullName": "public void close ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: the byte to be written."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes the specified byte to this byte array output stream.", "history": "Added in API level 1", "FullName": "public void write (int b)"}, "writeTo(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: the output stream to which to write the data."]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Writes the complete contents of this byte array output stream to the specified output stream argument, as if by calling the output stream's write method using out.write(buf, 0, count).", "history": "Added in API level 1", "FullName": "public void writeTo (OutputStream out)"}, "ByteArrayOutputStream()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new byte array output stream. The buffer capacity is initially 32 bytes, though its size increases if necessary.", "history": "Added in API level 1", "FullName": "public ByteArrayOutputStream ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "String decoded from the buffer's contents."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Converts the buffer's contents into a string decoding bytes using the platform's default character set. The length of the new This method always replaces malformed-input and unmappable-character sequences with the default replacement string for the platform's default character set. The", "history": "Added in API level 1", "FullName": "public String toString ()"}, "ByteArrayOutputStream(int)": {"Returns": [], "Parameters": [["int", "int: the initial size."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if size is negative."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new byte array output stream, with a buffer capacity of the specified size, in bytes.", "history": "Added in API level 1", "FullName": "public ByteArrayOutputStream (int size)"}, "toString(int)": {"Returns": [["@B_java#lang#String_E@", "the current contents of the output stream, as a string."]], "Parameters": [["int", "int: the high byte of each resulting Unicode character."]], "Throws": [], "SeeAlso": ["@B_java#io#ByteArrayOutputStream#size_E@", "@B_java#io#ByteArrayOutputStream#toString_E@"], "Permissions": [], "Description": "This method does not properly convert bytes into characters. As of JDK 1.1, the preferred way to do this is via the toString(String enc) method, which takes an encoding-name argument, or the toString() method, which uses the platform's default character encoding. Creates a newly allocated string. Its size is the current size of the output stream and the valid contents of the buffer have been copied into it. Each character", "history": "Added in API level 1 Deprecated in API level 15", "FullName": "public String toString (int hibyte)"}, "write(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: the data."], ["int", "int: the start offset in the data."], ["int", "int: the number of bytes to write."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Writes len bytes from the specified byte array starting at offset off to this byte array output stream.", "history": "Added in API level 1", "FullName": "public void write (byte[] b, int off, int len)"}, "toByteArray()": {"Returns": [["byte[]", "the current contents of this output stream, as a byte array."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#io#ByteArrayOutputStream#size_E@"], "Permissions": [], "Description": "Creates a newly allocated byte array. Its size is the current size of this output stream and the valid contents of the buffer have been copied into it.", "history": "Added in API level 1", "FullName": "public byte[] toByteArray ()"}, "toString(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "String decoded from the buffer's contents."]], "Parameters": [["@B_java#lang#String_E@", "String: the name of a supported @B_java#nio#charset#Charset_E@"]], "Throws": [["@B_java#io#UnsupportedEncodingException_E@", "If the named charset is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Converts the buffer's contents into a string by decoding the bytes using the named @B_java#nio#charset#Charset_E@. The length of the new This method always replaces malformed-input and unmappable-character sequences with this charset's default replacement string. The @B_java#nio#charset#CharsetDecoder_E@ class should be used when more control over the decoding process is required.", "history": "Added in API level 1", "FullName": "public String toString (String charsetName)"}}, "Inheritance": ["@B_java#io#OutputStream_E@"], "ClassName": "java.io.ByteArrayOutputStream", "ClassDesc": "This class implements an output stream in which the data is written into a byte array. The buffer automatically grows as data is written to it. The data can be retrieved using toByteArray() and toString(). Closing a"}