{"Functions": {"descendingKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a reverse order navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in descending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 9", "FullName": "public NavigableSet<K> descendingKeySet ()"}, "containsKey(java.lang.Object)": {"Returns": [["boolean", "true if this map contains a mapping for the specified key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains a mapping for the specified key.", "history": "Added in API level 1", "FullName": "public boolean containsKey (Object key)"}, "firstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public Entry<K, V> firstEntry ()"}, "subMap(K,boolean,K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "Added in API level 9", "FullName": "public NavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "TreeMap(java.util.Comparator<? super K>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this map. If null, the natural ordering of the keys will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree map, ordered according to the given comparator. All keys inserted into the map must be mutually comparable by the given comparator: comparator.compare(k1, k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint, the put(Object key, Object value) call will throw a ClassCastException.", "history": "added in API level 1", "FullName": "public TreeMap (Comparator<? super K> comparator)"}, "higherKey(K)": {"Returns": [["K", "the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key strictly greater than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K higherKey (K key)"}, "subMap(K,K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "Added in API level 1", "FullName": "public SortedMap<K, V> subMap (K fromKey, K toKey)"}, "ceilingKey(K)": {"Returns": [["K", "the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the least key greater than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K ceilingKey (K key)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set's spliterator is , fail-fast, and additionally reports @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@ with an encounter order that is ascending key order. The spliterator's comparator (see @B_java#util#Spliterator#getComparator_E@) is null if the tree map's comparator (see @B_java#util#TreeMap#comparator_E@) is null. Otherwise, the spliterator's comparator is the same as or imposes the same total ordering as the tree map's comparator. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public Set<K> keySet ()"}, "tailMap(K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public NavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "pollLastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed last entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public Entry<K, V> pollLastEntry ()"}, "lastEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public Entry<K, V> lastEntry ()"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that key compares equal to k according to the map's ordering, then this method returns v; otherwise it returns null. (There can be at most one such mapping.) A return value of null does not necessarily indicate that the map contains no mapping for the key; it's also possible that the map explicitly maps the key to null. The @B_java#util#TreeMap#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public V get (Object key)"}, "headMap(K,boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "Added in API level 9", "FullName": "public NavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "floorKey(K)": {"Returns": [["K", "the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key less than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K floorKey (K key)"}, "comparator()": {"Returns": [["@B_java#util#Comparator_E@", "the comparator used to order the keys in this map, or null if this map uses the natural ordering of its keys"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the comparator used to order the keys in this map, or null if this map uses the", "history": "Added in API level 1", "FullName": "public Comparator<? super K> comparator ()"}, "TreeMap(java.util.SortedMap<K,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map whose mappings are to be placed in this map, and whose comparator is to be used to sort this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map. This method runs in linear time.", "history": "Added in API level 1", "FullName": "public TreeMap (SortedMap<K, ? extends V> m)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection's iterator returns the values in ascending order of the corresponding keys. The collection's spliterator is , fail-fast, and additionally reports @B_java#util#Spliterator#ORDERED_E@ with an encounter order that is ascending order of the corresponding keys. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public Collection<V> values ()"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of a key or value in the specified map prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null or the specified map contains a null key and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings replace any mappings that this map had for any of the keys currently in the specified map.", "history": "added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> map)"}, "floorEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key less than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public Entry<K, V> floorEntry (K key)"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key for which mapping should be removed"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for this key from this TreeMap if present.", "history": "Added in API level 1", "FullName": "public V remove (Object key)"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set's iterator returns the entries in ascending key order. The sets's spliterator is , fail-fast, and additionally reports @B_java#util#Spliterator#SORTED_E@ and @B_java#util#Spliterator#ORDERED_E@ with an encounter order that is ascending key order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public Set<Entry<K, V>> entrySet ()"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "Added in API level 24", "FullName": "public V replace (K key, V value)"}, "lowerEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the greatest key strictly less than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public Entry<K, V> lowerEntry (K key)"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "Added in API level 1", "FullName": "public V put (K key, V value)"}, "lowerKey(K)": {"Returns": [["K", "the greatest key less than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the greatest key strictly less than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public K lowerKey (K key)"}, "subMap(K, K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"], ["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey, inclusive, to toKey, exclusive. (If fromKey and toKey are equal, the returned map is empty.) The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to subMap(fromKey, true, toKey, false).", "history": "added in API level 1", "FullName": "public SortedMap<K, V> subMap (K fromKey, K toKey)"}, "ceilingEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than or equal to key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key greater than or equal to the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public Entry<K, V> ceilingEntry (K key)"}, "subMap(K, boolean, K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys range from fromKey to toKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"], ["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey or toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys range from fromKey to toKey. If fromKey and toKey are equal, the returned map is empty unless fromInclusive and toInclusive are both true. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside of its range, or to construct a submap either of whose endpoints lie outside its range.", "history": "added in API level 9", "FullName": "public NavigableMap<K, V> subMap (K fromKey, boolean fromInclusive, K toKey, boolean toInclusive)"}, "navigableKeySet()": {"Returns": [["@B_java#util#NavigableSet_E@", "a navigable set view of the keys in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#NavigableSet_E@ view of the keys contained in this map. The set's iterator returns the keys in ascending order. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 9", "FullName": "public NavigableSet<K> navigableKeySet ()"}, "TreeMap(java.util.Comparator<?superK>)": {"Returns": [], "Parameters": [["@B_java#util#Comparator_E@", "Comparator: the comparator that will be used to order this map. If null, the Comparable of the keys will be used."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree map, ordered according to the given comparator. All keys inserted into the map must be mutually comparable by the given comparator: comparator.compare(k1, k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint, the put(Object key, Object value) call will throw a ClassCastException.", "history": "Added in API level 1", "FullName": "public TreeMap (Comparator<? super K> comparator)"}, "TreeMap(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the keys in m are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree map containing the same mappings as the given map, ordered according to the natural ordering of its keys. All keys inserted into the new map must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. This method runs in n*log(n) time.", "history": "added in API level 1", "FullName": "public TreeMap (Map<? extends K, ? extends V> m)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the specified key cannot be compared with the keys currently in the map"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map. If the map previously contained a mapping for the key, the old value is replaced.", "history": "added in API level 1", "FullName": "public V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map. The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public void clear ()"}, "TreeMap()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new, empty tree map, using the natural ordering of its keys. All keys inserted into the map must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. If the user attempts to put a key into the map that violates this constraint (for example, the user attempts to put a string key into a map whose keys are integers), the put(Object key, Object value) call will throw a ClassCastException.", "history": "Added in API level 1", "FullName": "public TreeMap ()"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map.", "history": "Added in API level 1", "FullName": "public int size ()"}, "pollFirstEntry()": {"Returns": [["@B_java#util#Map#Entry_E@", "the removed first entry of this map, or null if this map is empty"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes and returns a key-value mapping associated with the least key in this map, or null if the map is empty.", "history": "Added in API level 9", "FullName": "public Entry<K, V> pollFirstEntry ()"}, "higherEntry(K)": {"Returns": [["@B_java#util#Map#Entry_E@", "an entry with the least key greater than key, or null if there is no such key"]], "Parameters": [["K", "K: the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map uses natural ordering, or its comparator does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Returns a key-value mapping associated with the least key strictly greater than the given key, or null if there is no such key.", "history": "Added in API level 9", "FullName": "public Entry<K, V> higherEntry (K key)"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "descendingMap()": {"Returns": [["@B_java#util#NavigableMap_E@", "a reverse order view of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a reverse order view of the mappings contained in this map. The descending map is backed by this map, so changes to the map are reflected in the descending map, and vice-versa. If either map is modified while an iteration over a collection view of either map is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The returned map has an ordering equivalent to @B_java#util#Collections#reverseOrder_E@(comparator()). The expression m.descendingMap().descendingMap() returns a view of m essentially equivalent to m.", "history": "Added in API level 9", "FullName": "public NavigableMap<K, V> descendingMap ()"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "added in API level 24", "FullName": "public V replace (K key, V value)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a shallow copy of this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a shallow copy of this TreeMap instance. (The keys and values themselves are not cloned.)", "history": "Added in API level 1", "FullName": "public Object clone ()"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "lastKey()": {"Returns": [["K", "the last (highest) key currently in this map"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the last (highest) key currently in this map.", "history": "Added in API level 1", "FullName": "public K lastKey ()"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the class of a key or value in the specified map prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null or the specified map contains a null key and this map does not permit null keys"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map. These mappings replace any mappings that this map had for any of the keys currently in the specified map.", "history": "Added in API level 1", "FullName": "public void putAll (Map<? extends K, ? extends V> map)"}, "headMap(K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys are strictly less than toKey"]], "Parameters": [["K", "K: high endpoint (exclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are strictly less than toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to headMap(toKey, false).", "history": "Added in API level 1", "FullName": "public SortedMap<K, V> headMap (K toKey)"}, "TreeMap(java.util.SortedMap<K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#SortedMap_E@", "SortedMap: the sorted map whose mappings are to be placed in this map, and whose comparator is to be used to sort this map"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree map containing the same mappings and using the same ordering as the specified sorted map. This method runs in linear time.", "history": "added in API level 1", "FullName": "public TreeMap (SortedMap<K, ? extends V> m)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if a mapping to value exists; false otherwise"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map maps one or more keys to the specified value. More formally, returns true if and only if this map contains at least one mapping to a value v such that (value==null ? v==null : value.equals(v)). This operation will probably require time linear in the map size for most implementations.", "history": "Added in API level 1", "FullName": "public boolean containsValue (Object value)"}, "TreeMap(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: the map whose mappings are to be placed in this map"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the keys in m are not @B_java#lang#Comparable_E@, or are not mutually comparable"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a new tree map containing the same mappings as the given map, ordered according to the natural ordering of its keys. All keys inserted into the new map must implement the @B_java#lang#Comparable_E@ interface. Furthermore, all such keys must be mutually comparable: k1.compareTo(k2) must not throw a ClassCastException for any keys k1 and k2 in the map. This method runs in n*log(n) time.", "history": "Added in API level 1", "FullName": "public TreeMap (Map<? extends K, ? extends V> m)"}, "tailMap(K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey"]], "Parameters": [["K", "K: low endpoint of the keys in the returned map"], ["boolean", "boolean: true if the low endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than (or equal to, if inclusive is true) fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public NavigableMap<K, V> tailMap (K fromKey, boolean inclusive)"}, "isEmpty()": {"Returns": [["", "true if this map has no elements, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this map is empty. This implementation compares size() to 0.", "history": "Added in API level 1", "FullName": "public boolean isEmpty ()"}, "headMap(K, boolean)": {"Returns": [["@B_java#util#NavigableMap_E@", "a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey"]], "Parameters": [["K", "K: high endpoint of the keys in the returned map"], ["boolean", "boolean: true if the high endpoint is to be included in the returned view"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if toKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are less than (or equal to, if inclusive is true) toKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range.", "history": "added in API level 9", "FullName": "public NavigableMap<K, V> headMap (K toKey, boolean inclusive)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "firstKey()": {"Returns": [["K", "the first (lowest) key currently in this map"]], "Parameters": [], "Throws": [["@B_java#util#NoSuchElementException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns the first (lowest) key currently in this map.", "history": "Added in API level 1", "FullName": "public K firstKey ()"}, "tailMap(K)": {"Returns": [["@B_java#util#SortedMap_E@", "a view of the portion of this map whose keys are greater than or equal to fromKey"]], "Parameters": [["K", "K: low endpoint (inclusive) of the keys in the returned map"]], "Throws": [["@B_java#lang#ClassCastException_E@", ""], ["@B_java#lang#NullPointerException_E@", "if fromKey is null and this map uses natural ordering, or its comparator does not permit null keys"], ["@B_java#lang#IllegalArgumentException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Returns a view of the portion of this map whose keys are greater than or equal to fromKey. The returned map is backed by this map, so changes in the returned map are reflected in this map, and vice-versa. The returned map supports all optional map operations that this map supports. The returned map will throw an IllegalArgumentException on an attempt to insert a key outside its range. Equivalent to tailMap(fromKey, true).", "history": "Added in API level 1", "FullName": "public SortedMap<K, V> tailMap (K fromKey)"}}, "Inheritance": ["@B_java#util#AbstractMap_E@"], "ClassName": "java.util.TreeMap<K, V>", "ClassDesc": "A Red-Black tree based @B_java#util#NavigableMap_E@ implementation. The map is sorted according to the @B_java#util#Comparator_E@ provided at map creation time, depending on which constructor is used. This implementation provides guaranteed log(n) time cost for the containsKey, get, put and remove operations. Algorithms are adaptations of those in Cormen, Leiserson, and Rivest's Introduction to Algorithms. Note that the ordering maintained by a tree map, like any sorted map, and whether or not an explicit comparator is provided, must be consistent with equals if this sorted map is to correctly implement the Map interface. (See Comparable or Comparator for a precise definition of consistent with equals.) This is so because the Map interface is defined in terms of the equals operation, but a sorted map performs all key comparisons using its compareTo (or compare) method, so two keys that are deemed equal by this method are, from the standpoint of the sorted map, equal. The behavior of a sorted map is well-defined even if its ordering is inconsistent with equals; it just fails to obey the general contract of the Map interface. must be synchronized externally. (A structural modification is any operation that adds or deletes one or more mappings; merely changing the value associated with an existing key is not a structural modification.) This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be \"wrapped\" using the @B_java#util#Collections#synchronizedSortedMap_E@ method. This is best done at creation time, to prevent accidental unsynchronized access to the map: The iterators returned by the iterator method of the collections returned by all of this class's \"collection view methods\" are fail-fast: if the map is structurally modified at any time after the iterator is created, in any way except through the iterator's own remove method, the iterator will throw a @B_java#util#ConcurrentModificationException_E@. Thus, in the face of concurrent modification, the iterator fails quickly and cleanly, rather than risking arbitrary, non-deterministic behavior at an undetermined time in the future. Note that the fail-fast behavior of an iterator cannot be guaranteed as it is, generally speaking, impossible to make any hard guarantees in the presence of unsynchronized concurrent modification. Fail-fast iterators throw ConcurrentModificationException on a best-effort basis. Therefore, it would be wrong to write a program that depended on this exception for its correctness: the fail-fast behavior of iterators should be used only to detect bugs. All Map.Entry pairs returned by methods in this class and its views represent snapshots of mappings at the time they were produced. They do Entry.setValue method. (Note however that it is possible to change mappings in the associated map using put.) This class is a member of the"}