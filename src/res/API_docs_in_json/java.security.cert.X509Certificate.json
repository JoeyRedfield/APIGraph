{"Functions": {"getSigAlgName()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm name for the certificate signature algorithm. An example is the string \"SHA256withRSA\". The ASN.1 definition for this is: The algorithm name is determined from the algorithm OID string.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgName ()"}, "getTBSCertificate()": {"Returns": [["byte[]", "the DER-encoded certificate information."]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateEncodingException_E@", "if an encoding error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded certificate information, the tbsCertificate from this certificate. This can be used to verify the signature independently.", "history": "Added in API level 1", "FullName": "public abstract byte[] getTBSCertificate ()"}, "getSignature()": {"Returns": [["byte[]", "the signature."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature value (the raw signature bits) from the certificate. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract byte[] getSignature ()"}, "verify(java.security.PublicKey,java.security.Provider)": {"Returns": [], "Parameters": [["@B_java#security#PublicKey_E@", "PublicKey: the PublicKey used to carry out the verification."], ["@B_java#security#Provider_E@", "Provider: the signature provider."]], "Throws": [["@B_java#security#NoSuchAlgorithmException_E@", "on unsupported signature algorithms."], ["@B_java#security#InvalidKeyException_E@", "on incorrect key."], ["@B_java#security#SignatureException_E@", "on signature errors."], ["@B_java#security#cert#CertificateException_E@", "on encoding errors."], ["@B_java#lang#UnsupportedOperationException_E@", "if the method is not supported"]], "SeeAlso": [], "Permissions": [], "Description": "Verifies that this certificate was signed using the private key that corresponds to the specified public key. This method uses the signature verification engine supplied by the specified provider. Note that the specified Provider object does not have to be registered in the provider list. This method was added to version 1.8 of the Java Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation.", "history": "Added in API level 24", "FullName": "public void verify (PublicKey key, Provider sigProvider)"}, "X509Certificate()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for X.509 certificates.", "history": "Added in API level 1", "FullName": "protected X509Certificate ()"}, "getIssuerUniqueID()": {"Returns": [["boolean[]", "the issuer unique identifier or null if it is not present in the certificate."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the issuerUniqueID value from the certificate. The issuer unique identifier is present in the certificate to handle the possibility of reuse of issuer names over time. RFC 3280 recommends that names not be reused and that conforming certificates not make use of unique identifiers. Applications conforming to that profile should be capable of parsing unique identifiers and making comparisons. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract boolean[] getIssuerUniqueID ()"}, "getIssuerAlternativeNames()": {"Returns": [["@B_java#util#Collection_E@", "an immutable Collection of issuer alternative names (or null)"]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateParsingException_E@", "if the extension cannot be decoded"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an immutable collection of issuer alternative names from the IssuerAltName extension, (OID = 2.5.29.18). The ASN.1 definition of the IssuerAltName extension is: GeneralNames is defined in @B_java#security#cert#X509Certificate#getSubjectAlternativeNames_E@. If this certificate does not contain an IssuerAltName extension, null is returned. Otherwise, a Collection is returned with an entry representing each GeneralName included in the extension. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). For more details about the formats used for each name type, see the getSubjectAlternativeNames method. Note that the Collection returned may contain more than one name of the same type. Also, note that the returned Collection is immutable and any entries containing byte arrays are cloned to protect against subsequent modifications. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.", "history": "Added in API level 1", "FullName": "public Collection<List<?>> getIssuerAlternativeNames ()"}, "getIssuerDN()": {"Returns": [["@B_java#security#Principal_E@", "a Principal whose name is the issuer distinguished name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "issuer as an implementation specific Principal object, which should not be relied upon by portable code. Gets the issuer (issuer distinguished name) value from the certificate. The issuer name identifies the entity that signed (and issued) the certificate. The issuer name field contains an X.500 distinguished name (DN). The ASN.1 definition for this is: Name describes a hierarchical name composed of attributes, such as country name, and corresponding values, such as US. The type of the AttributeValue component is determined by the AttributeType; in general it will be a directoryString. A directoryString is usually one of PrintableString, TeletexString or UniversalString.", "history": "Added in API level 1", "FullName": "public abstract Principal getIssuerDN ()"}, "checkValidity()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateExpiredException_E@", "if the certificate has expired."], ["@B_java#security#cert#CertificateNotYetValidException_E@", "if the certificate is not yet valid."]], "SeeAlso": [], "Permissions": [], "Description": "Checks that the certificate is currently valid. It is if the current date and time are within the validity period given in the certificate. The validity period consists of two date/time values: the first and last dates (and times) on which the certificate is valid. It is defined in ASN.1 as:", "history": "Added in API level 1", "FullName": "public abstract void checkValidity ()"}, "getExtendedKeyUsage()": {"Returns": [["@B_java#util#List_E@", "the ExtendedKeyUsage extension of this certificate, as an unmodifiable list of object identifiers represented as Strings. Returns null if this certificate does not contain an ExtendedKeyUsage extension."]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateParsingException_E@", "if the extension cannot be decoded"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an unmodifiable list of Strings representing the OBJECT IDENTIFIERs of the ExtKeyUsageSyntax field of the extended key usage extension, (OID = 2.5.29.37). It indicates one or more purposes for which the certified public key may be used, in addition to or in place of the basic purposes indicated in the key usage extension field. The ASN.1 definition for this is: This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.", "history": "Added in API level 1", "FullName": "public List<String> getExtendedKeyUsage ()"}, "getNotAfter()": {"Returns": [["@B_java#util#Date_E@", "the end date of the validity period."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Gets the notAfter date from the validity period of the certificate. See @B_java#security#cert#X509Certificate#getNotBefore_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract Date getNotAfter ()"}, "getSigAlgOID()": {"Returns": [["@B_java#lang#String_E@", "the signature algorithm OID string."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the signature algorithm OID string from the certificate. An OID is represented by a set of nonnegative whole numbers separated by periods. For example, the string \"1.2.840.10040.4.3\" identifies the SHA-1 with DSA signature algorithm defined in See @B_java#security#cert#X509Certificate#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract String getSigAlgOID ()"}, "getSubjectUniqueID()": {"Returns": [["boolean[]", "the subject unique identifier or null if it is not present in the certificate."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the subjectUniqueID value from the certificate. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract boolean[] getSubjectUniqueID ()"}, "getSerialNumber()": {"Returns": [["@B_java#math#BigInteger_E@", "the serial number."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the serialNumber value from the certificate. The serial number is an integer assigned by the certification authority to each certificate. It must be unique for each certificate issued by a given CA (i.e., the issuer name and serial number identify a unique certificate). The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract BigInteger getSerialNumber ()"}, "getSubjectAlternativeNames()": {"Returns": [["@B_java#util#Collection_E@", "an immutable Collection of subject alternative names (or null)"]], "Parameters": [], "Throws": [["@B_java#security#cert#CertificateParsingException_E@", "if the extension cannot be decoded"]], "SeeAlso": [], "Permissions": [], "Description": "Gets an immutable collection of subject alternative names from the SubjectAltName extension, (OID = 2.5.29.17). The ASN.1 definition of the SubjectAltName extension is: If this certificate does not contain a SubjectAltName extension, null is returned. Otherwise, a Collection is returned with an entry representing each GeneralName included in the extension. Each entry is a List whose first entry is an Integer (the name type, 0-8) and whose second entry is a String or a byte array (the name, in string or ASN.1 DER encoded form, respectively). Strings, using the well-established string formats for those types (subject to the restrictions included in RFC 3280). IPv4 address names are returned using dotted quad notation. IPv6 address names are returned in the form \"a1:a2:...:a8\", where a1-a8 are hexadecimal values representing the eight 16-bit pieces of the address. OID names are returned as Strings represented as a series of nonnegative integers separated by periods. And directory names (distinguished names) are returned in Note that the Collection returned may contain more than one name of the same type. Also, note that the returned Collection is immutable and any entries containing byte arrays are cloned to protect against subsequent modifications. This method was added to version 1.4 of the Java 2 Platform Standard Edition. In order to maintain backwards compatibility with existing service providers, this method is not abstract and it provides a default implementation. Subclasses should override this method with a correct implementation.", "history": "Added in API level 1", "FullName": "public Collection<List<?>> getSubjectAlternativeNames ()"}, "getVersion()": {"Returns": [["int", "the version number, i.e. 1, 2 or 3."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the version (version number) value from the certificate. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract int getVersion ()"}, "checkValidity(java.util.Date)": {"Returns": [], "Parameters": [["@B_java#util#Date_E@", "Date: the Date to check against to see if this certificate is valid at that date/time."]], "Throws": [["@B_java#security#cert#CertificateExpiredException_E@", "if the certificate has expired with respect to the date supplied."], ["@B_java#security#cert#CertificateNotYetValidException_E@", "if the certificate is not yet valid with respect to the date supplied."]], "SeeAlso": ["@B_java#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Checks that the given date is within the certificate's validity period. In other words, this determines whether the certificate would be valid at the given date/time.", "history": "Added in API level 1", "FullName": "public abstract void checkValidity (Date date)"}, "getBasicConstraints()": {"Returns": [["int", "the value of pathLenConstraint if the BasicConstraints extension is present in the certificate and the subject of the certificate is a CA, otherwise -1. If the subject of the certificate is a CA and pathLenConstraint does not appear, Integer.MAX_VALUE is returned to indicate that there is no limit to the allowed length of the certification path."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the certificate constraints path length from the critical BasicConstraints extension, (OID = 2.5.29.19). The basic constraints extension identifies whether the subject of the certificate is a Certificate Authority (CA) and how deep a certification path may exist through that CA. The pathLenConstraint field (see below) is meaningful only if cA is set to TRUE. In this case, it gives the maximum number of CA certificates that may follow this certificate in a certification path. A value of zero indicates that only an end-entity certificate may follow in the path. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract int getBasicConstraints ()"}, "getSubjectX500Principal()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "an X500Principal representing the subject distinguished name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the subject (subject distinguished name) value from the certificate as an X500Principal. If the subject value is empty, then the getName() method of the returned X500Principal object returns an empty string (\"\"). It is recommended that subclasses override this method.", "history": "Added in API level 1", "FullName": "public X500Principal getSubjectX500Principal ()"}, "getSubjectDN()": {"Returns": [["@B_java#security#Principal_E@", "a Principal whose name is the subject name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "subject as an implementation specific Principal object, which should not be relied upon by portable code. Gets the subject (subject distinguished name) value from the certificate. If the subject value is empty, then the getName() method of the returned Principal object returns an empty string (\"\"). The ASN.1 definition for this is: See @B_java#security#cert#X509Certificate#getIssuerDN_E@ for Name and other relevant definitions.", "history": "Added in API level 1", "FullName": "public abstract Principal getSubjectDN ()"}, "getSigAlgParams()": {"Returns": [["byte[]", "the DER-encoded signature algorithm parameters, or null if no parameters are present."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the DER-encoded signature algorithm parameters from this certificate's signature algorithm. In most cases, the signature algorithm parameters are null; the parameters are usually supplied with the certificate's public key. If access to individual parameter values is needed then use @B_java#security#AlgorithmParameters_E@ and instantiate with the name returned by @B_java#security#cert#X509Certificate#getSigAlgName_E@. See @B_java#security#cert#X509Certificate#getSigAlgName_E@ for relevant ASN.1 definitions.", "history": "Added in API level 1", "FullName": "public abstract byte[] getSigAlgParams ()"}, "getNotBefore()": {"Returns": [["@B_java#util#Date_E@", "the start date of the validity period."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#security#cert#X509Certificate#checkValidity_E@"], "Permissions": [], "Description": "Gets the notBefore date from the validity period of the certificate. The relevant ASN.1 definitions are:", "history": "Added in API level 1", "FullName": "public abstract Date getNotBefore ()"}, "getIssuerX500Principal()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "an X500Principal representing the issuer distinguished name"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the issuer (issuer distinguished name) value from the certificate as an X500Principal. It is recommended that subclasses override this method.", "history": "Added in API level 1", "FullName": "public X500Principal getIssuerX500Principal ()"}, "getKeyUsage()": {"Returns": [["boolean[]", "the KeyUsage extension of this certificate, represented as an array of booleans. The order of KeyUsage values in the array is the same as in the above ASN.1 definition. The array will contain a value for each KeyUsage defined above. If the KeyUsage list encoded in the certificate is longer than the above list, it will not be truncated. Returns null if this certificate does not contain a KeyUsage extension."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a boolean array representing bits of the KeyUsage extension, (OID = 2.5.29.15). The key usage extension defines the purpose (e.g., encipherment, signature, certificate signing) of the key contained in the certificate. The ASN.1 definition for this is:", "history": "Added in API level 1", "FullName": "public abstract boolean[] getKeyUsage ()"}}, "Inheritance": ["@B_java#security#cert#Certificate_E@"], "ClassName": "java.security.cert.X509Certificate", "ClassDesc": "Abstract class for X.509 certificates. This provides a standard way to access all the attributes of an X.509 certificate. In June of 1996, the basic X.509 v3 format was completed by ISO/IEC and ANSI X9, which is described below in ASN.1: These certificates are widely used to support authentication and other functionality in Internet security systems. Common applications include Privacy Enhanced Mail (PEM), Transport Layer Security (SSL), code signing for trusted software distribution, and Secure Electronic Transactions (SET). These certificates are managed and vouched for by Certificate Authorities (CAs). CAs are services which create certificates by placing data in the X.509 standard format and then digitally signing that data. CAs act as trusted third parties, making introductions between principals who have no direct knowledge of each other. CA certificates are either signed by themselves, or by some other CA such as a \"root\" CA. More information can be found in The ASN.1 definition of tbsCertificate is: Certificates are instantiated using a certificate factory. The following is an example of how to instantiate an X.509 certificate:"}