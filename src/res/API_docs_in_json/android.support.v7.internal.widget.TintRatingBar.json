{"Functions": {"TintRatingBar(android.content.Context, android.util.AttributeSet, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public TintRatingBar (Context context, AttributeSet attrs, int defStyleAttr)"}, "TintRatingBar(android.content.Context)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public TintRatingBar (Context context)"}, "TintRatingBar(android.content.Context, android.util.AttributeSet)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public TintRatingBar (Context context, AttributeSet attrs)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overriden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "protected synchronized void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#widget#ProgressBar_E@", "@B_android#widget#AbsSeekBar_E@", "@B_android#widget#RatingBar_E@"], "ClassName": "android.support.v7.internal.widget.TintRatingBar", "ClassDesc": "An tint aware @B_android#widget#RatingBar_E@. This will automatically be used when you use @B_android#widget#RatingBar_E@ in your layouts. You should only need to manually use this class when writing custom views."}