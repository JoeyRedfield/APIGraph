{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a String representation of this service."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a String representation of this service.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "Provider.Service(java.security.Provider,java.lang.String,java.lang.String,java.lang.String,java.util.List<java.lang.String>,java.util.Map<java.lang.String,java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#security#Provider_E@", "Provider: the provider that offers this service"], ["@B_java#lang#String_E@", "String: the type of this service"], ["@B_java#lang#String_E@", "String: the algorithm name"], ["@B_java#lang#String_E@", "String: the name of the class implementing this service"], ["@B_java#util#List_E@", "List: List of aliases or null if algorithm has no aliases"], ["@B_java#util#Map_E@", "Map: Map of attributes or null if this implementation has no attributes"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if provider, type, algorithm, or className is null"]], "SeeAlso": [], "Permissions": [], "Description": "Construct a new service.", "history": "Added in API level 1", "FullName": "public Provider.Service (Provider provider, String type, String algorithm, String className, List<String> aliases, Map<String, String> attributes)"}, "getAlgorithm()": {"Returns": [["@B_java#lang#String_E@", "the algorithm of this service"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the name of the algorithm of this service. For example, SHA-1.", "history": "Added in API level 1", "FullName": "public final String getAlgorithm ()"}, "getClassName()": {"Returns": [["@B_java#lang#String_E@", "the name of the class implementing this service"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the name of the class implementing this service.", "history": "Added in API level 1", "FullName": "public final String getClassName ()"}, "getType()": {"Returns": [["@B_java#lang#String_E@", "the type of this service"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the type of this service. For example, MessageDigest.", "history": "Added in API level 1", "FullName": "public final String getType ()"}, "getProvider()": {"Returns": [["@B_java#security#Provider_E@", "the Provider of this service"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Provider of this service.", "history": "Added in API level 1", "FullName": "public final Provider getProvider ()"}, "newInstance(java.lang.Object)": {"Returns": [["@B_java#lang#Object_E@", "a new implementation of this service"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the value to pass to the constructor, or null if this type of service does not use a constructorParameter."]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the value of constructorParameter is invalid for this type of service."], ["@B_java#security#NoSuchAlgorithmException_E@", "if instantiation failed for any other reason."]], "SeeAlso": [], "Permissions": [], "Description": "Return a new instance of the implementation described by this service. The security provider framework uses this method to construct implementations. Applications will typically not need to call it. The default implementation uses reflection to invoke the standard constructor for this type of service. Security providers can override this method to implement instantiation in a different way. For details and the values of constructorParameter that are valid for the various types of services see the", "history": "Added in API level 1", "FullName": "public Object newInstance (Object constructorParameter)"}, "supportsParameter(java.lang.Object)": {"Returns": [["boolean", "false if this this service cannot use the specified parameter; true if it can possibly use the parameter"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the parameter to test"]], "Throws": [["@B_java#security#InvalidParameterException_E@", "if the value of parameter is invalid for this type of service or if this method cannot be used with this type of service"]], "SeeAlso": [], "Permissions": [], "Description": "Test whether this Service can use the specified parameter. Returns false if this service cannot use the parameter. Returns true if this service can use the parameter, if a fast test is infeasible, or if the status is unknown. The security provider framework uses this method with some types of services to quickly exclude non-matching implementations for consideration. Applications will typically not need to call it. For details and the values of parameter that are valid for the various types of services see the top of this class and the", "history": "Added in API level 1", "FullName": "public boolean supportsParameter (Object parameter)"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the value of the specified attribute or null if the attribute is not present"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the requested attribute"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if name is null"]], "SeeAlso": [], "Permissions": [], "Description": "Return the value of the specified attribute or null if this attribute is not set for this Service.", "history": "Added in API level 1", "FullName": "public final String getAttribute (String name)"}}, "Inheritance": [], "ClassName": "java.security.Provider.Service", "ClassDesc": "The description of a security service. It encapsulates the properties of a service and contains a factory method to obtain new implementation instances of this service. Each service has a provider that offers the service, a type, an algorithm name, and the name of the class that implements the service. Optionally, it also includes a list of alternate algorithm names for this service (aliases) and attributes, which are a map of (name, value) String pairs. This class defines the methods @B_java#security#Provider#Service#supportsParameter_E@ and @B_java#security#Provider#Service#newInstance_E@ which are used by the Java security framework when it searches for suitable services and instantiates them. The valid arguments to those methods depend on the type of service. For the service types defined within Java SE, see the Instances of this class are immutable."}