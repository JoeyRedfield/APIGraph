{"Functions": {"size()": {"Returns": [["long", "The current size, measured in bytes"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the current size of entity to which this channel is connected.", "history": "Added in API level 24", "FullName": "public abstract long size ()"}, "position(long)": {"Returns": [["@B_java#nio#channels#SeekableByteChannel_E@", "This channel"]], "Parameters": [["long", "long: The new position, a non-negative integer counting the number of bytes from the beginning of the entity"]], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#lang#IllegalArgumentException_E@", "If the new position is negative"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this channel's position. Setting the position to a value that is greater than the current size is legal but does not change the size of the entity. A later attempt to read bytes at such a position will immediately return an end-of-file indication. A later attempt to write bytes at such a position will cause the entity to grow to accommodate the new bytes; the values of any bytes between the previous end-of-file and the newly-written bytes are unspecified. Setting the channel's position is not recommended when connected to an entity, typically a file, that is opened with the @B_java#nio#file#StandardOpenOption#APPEND_E@ option. When opened for append, the position is first advanced to the end before writing.", "history": "Added in API level 24", "FullName": "public abstract SeekableByteChannel position (long newPosition)"}, "read(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes read, possibly zero, or -1 if the channel has reached end-of-stream"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer into which bytes are to be transferred"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads a sequence of bytes from this channel into the given buffer. Bytes are read starting at this channel's current position, and then the position is updated with the number of bytes actually read. Otherwise this method behaves exactly as specified in the @B_java#nio#channels#ReadableByteChannel_E@ interface.", "history": "Added in API level 24", "FullName": "public abstract int read (ByteBuffer dst)"}, "write(java.nio.ByteBuffer)": {"Returns": [["int", "The number of bytes written, possibly zero"]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: The buffer from which bytes are to be retrieved"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Writes a sequence of bytes to this channel from the given buffer. Bytes are written starting at this channel's current position, unless the channel is connected to an entity such as a file that is opened with the @B_java#nio#file#StandardOpenOption#APPEND_E@ option, in which case the position is first advanced to the end. The entity to which the channel is connected is grown, if necessary, to accommodate the written bytes, and then the position is updated with the number of bytes actually written. Otherwise this method behaves exactly as specified by the @B_java#nio#channels#WritableByteChannel_E@ interface.", "history": "Added in API level 24", "FullName": "public abstract int write (ByteBuffer src)"}, "truncate(long)": {"Returns": [["@B_java#nio#channels#SeekableByteChannel_E@", "This channel"]], "Parameters": [["long", "long: The new size, a non-negative byte count"]], "Throws": [["@B_java#nio#channels#NonWritableChannelException_E@", "If this channel was not opened for writing"], ["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#lang#IllegalArgumentException_E@", "If the new size is negative"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Truncates the entity, to which this channel is connected, to the given size. If the given size is less than the current size then the entity is truncated, discarding any bytes beyond the new end. If the given size is greater than or equal to the current size then the entity is not modified. In either case, if the current position is greater than the given size then it is set to that size. An implementation of this interface may prohibit truncation when connected to an entity, typically a file, opened with the @B_java#nio#file#StandardOpenOption#APPEND_E@ option.", "history": "Added in API level 24", "FullName": "public abstract SeekableByteChannel truncate (long size)"}, "position()": {"Returns": [["long", "This channel's position, a non-negative integer counting the number of bytes from the beginning of the entity to the current position"]], "Parameters": [], "Throws": [["@B_java#nio#channels#ClosedChannelException_E@", "If this channel is closed"], ["@B_java#io#IOException_E@", "If some other I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns this channel's position.", "history": "Added in API level 24", "FullName": "public abstract long position ()"}}, "Inheritance": [], "ClassName": "java.nio.channels.SeekableByteChannel", "ClassDesc": "A byte channel that maintains a current A seekable byte channel is connected to an entity, typically a file, that contains a variable-length sequence of bytes that can be read and written. The current position can be @B_java#nio#channels#SeekableByteChannel#position_E@ and @B_java#nio#channels#SeekableByteChannel#position_E@. The channel also provides access to the current @B_java#nio#channels#SeekableByteChannel#truncate_E@. The @B_java#nio#channels#SeekableByteChannel#position_E@ and @B_java#nio#channels#SeekableByteChannel#truncate_E@ methods which do not otherwise have a value to return are specified to return the channel upon which they are invoked. This allows method invocations to be chained. Implementations of this interface should specialize the return type so that method invocations on the implementation class can be chained."}