{"Functions": {"getApostropheMode()": {"Returns": [["@B_android#icu#text#MessagePattern#ApostropheMode_E@", "this instance's ApostropheMode."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public MessagePattern.ApostropheMode getApostropheMode ()"}, "getPartType(int)": {"Returns": [["@B_android#icu#text#MessagePattern#Part#Type_E@", "The Part.Type of the i-th Part."]], "Parameters": [["int", "int: The index of the Part data. (0..countParts()-1)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if i is outside the (0..countParts()-1) range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Part.Type of the i-th pattern \"part\". Convenience method for getPart(i).getType().", "history": "Added in API level 24", "FullName": "public MessagePattern.Part.Type getPartType (int i)"}, "getLimitPartIndex(int)": {"Returns": [["int", "The first i>start where getPart(i).getType()==ARG|MSG_LIMIT at the same nesting level, or start itself if getPartType(msgStart)!=ARG|MSG_START."]], "Parameters": [["int", "int: The index of some Part data (0..countParts()-1); this Part should be of Type ARG_START or MSG_START."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if start is outside the (0..countParts()-1) range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the index of the ARG|MSG_LIMIT part corresponding to the ARG|MSG_START at start.", "history": "Added in API level 24", "FullName": "public int getLimitPartIndex (int start)"}, "clearPatternAndSetApostropheMode(android.icu.text.MessagePattern.ApostropheMode)": {"Returns": [], "Parameters": [["@B_android#icu#text#MessagePattern#ApostropheMode_E@", "MessagePattern.ApostropheMode: The new ApostropheMode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this MessagePattern and sets the ApostropheMode. countParts() will return 0.", "history": "Added in API level 24", "FullName": "public void clearPatternAndSetApostropheMode (MessagePattern.ApostropheMode mode)"}, "MessagePattern(android.icu.text.MessagePattern.ApostropheMode)": {"Returns": [], "Parameters": [["@B_android#icu#text#MessagePattern#ApostropheMode_E@", "MessagePattern.ApostropheMode: Explicit ApostropheMode."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty MessagePattern.", "history": "Added in API level 24", "FullName": "public MessagePattern (MessagePattern.ApostropheMode mode)"}, "parse(java.lang.String)": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "this"]], "Parameters": [["@B_java#lang#String_E@", "String: a MessageFormat pattern string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for syntax errors in the pattern string"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if certain limits are exceeded (e.g., argument number too high, argument name too long, etc.)"], ["@B_java#lang#NumberFormatException_E@", "if a number could not be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Parses a MessageFormat pattern string.", "history": "Added in API level 24", "FullName": "public MessagePattern parse (String pattern)"}, "parseSelectStyle(java.lang.String)": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "this"]], "Parameters": [["@B_java#lang#String_E@", "String: a SelectFormat pattern string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for syntax errors in the pattern string"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if certain limits are exceeded (e.g., argument number too high, argument name too long, etc.)"], ["@B_java#lang#NumberFormatException_E@", "if a number could not be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Parses a SelectFormat pattern string.", "history": "Added in API level 24", "FullName": "public MessagePattern parseSelectStyle (String pattern)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this MessagePattern. countParts() will return 0.", "history": "Added in API level 24", "FullName": "public void clear ()"}, "MessagePattern(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a MessageFormat pattern string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for syntax errors in the pattern string"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if certain limits are exceeded (e.g., argument number too high, argument name too long, etc.)"], ["@B_java#lang#NumberFormatException_E@", "if a number could not be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a MessagePattern with default ApostropheMode and parses the MessageFormat pattern string.", "history": "Added in API level 24", "FullName": "public MessagePattern (String pattern)"}, "cloneAsThawed()": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "a copy of this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns an unfrozen copy of this object.", "history": "Added in API level 24", "FullName": "public MessagePattern cloneAsThawed ()"}, "parsePluralStyle(java.lang.String)": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "this"]], "Parameters": [["@B_java#lang#String_E@", "String: a PluralFormat pattern string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for syntax errors in the pattern string"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if certain limits are exceeded (e.g., argument number too high, argument name too long, etc.)"], ["@B_java#lang#NumberFormatException_E@", "if a number could not be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Parses a PluralFormat pattern string.", "history": "Added in API level 24", "FullName": "public MessagePattern parsePluralStyle (String pattern)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is equivalent to the other one."]], "Parameters": [["@B_java#lang#Object_E@", "Object: another object to compare with."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 24", "FullName": "public boolean equals (Object other)"}, "isFrozen()": {"Returns": [["boolean", "true if this object is frozen."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether this object is frozen (immutable) or not.", "history": "Added in API level 24", "FullName": "public boolean isFrozen ()"}, "getNumericValue(android.icu.text.MessagePattern.Part)": {"Returns": [["double", "the part's numeric value, or NO_NUMERIC_VALUE if this is not a numeric part."]], "Parameters": [["@B_android#icu#text#MessagePattern#Part_E@", "MessagePattern.Part: a part of this MessagePattern."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the numeric value associated with an ARG_INT or ARG_DOUBLE.", "history": "Added in API level 24", "FullName": "public double getNumericValue (MessagePattern.Part part)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a copy of this object (or itself if frozen)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a copy of this object.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "partSubstringMatches(android.icu.text.MessagePattern.Part,java.lang.String)": {"Returns": [["boolean", "true if getSubstring(part).equals(s)."]], "Parameters": [["@B_android#icu#text#MessagePattern#Part_E@", "MessagePattern.Part: a part of this MessagePattern."], ["@B_java#lang#String_E@", "String: a string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the part's substring with the input string s.", "history": "Added in API level 24", "FullName": "public boolean partSubstringMatches (MessagePattern.Part part, String s)"}, "countParts()": {"Returns": [["int", "the number of pattern parts."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of \"parts\" created by parsing the pattern string. Returns 0 if no pattern has been parsed or clear() was called.", "history": "Added in API level 24", "FullName": "public int countParts ()"}, "hasNumberedArguments()": {"Returns": [["boolean", "true if the parsed pattern has at least one numbered argument."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does the parsed pattern have numbered arguments like {2}?", "history": "Added in API level 24", "FullName": "public boolean hasNumberedArguments ()"}, "getPluralOffset(int)": {"Returns": [["double", "the \"offset:\" value."]], "Parameters": [["int", "int: the index of the first PluralFormat argument style part. (0..countParts()-1)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if pluralStart is outside the (0..countParts()-1) range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the \"offset:\" value of a PluralFormat argument, or 0 if none is specified.", "history": "Added in API level 24", "FullName": "public double getPluralOffset (int pluralStart)"}, "validateArgumentName(java.lang.String)": {"Returns": [["int", ">=0 if the name is a valid number, ARG_NAME_NOT_NUMBER (-1) if it is a \"pattern identifier\" but not all ASCII digits, ARG_NAME_NOT_VALID (-2) if it is neither."]], "Parameters": [["@B_java#lang#String_E@", "String: Input string."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Validates and parses an argument name or argument number string. An argument name must be a \"pattern identifier\", that is, it must contain no Unicode Pattern_Syntax or Pattern_White_Space characters. If it only contains ASCII digits, then it must be a small integer with no leading zero.", "history": "Added in API level 24", "FullName": "public static int validateArgumentName (String name)"}, "freeze()": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "this"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freezes this object, making it immutable and thread-safe.", "history": "Added in API level 24", "FullName": "public MessagePattern freeze ()"}, "getPart(int)": {"Returns": [["@B_android#icu#text#MessagePattern#Part_E@", "the i-th pattern \"part\"."]], "Parameters": [["int", "int: The index of the Part data. (0..countParts()-1)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if i is outside the (0..countParts()-1) range"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the i-th pattern \"part\".", "history": "Added in API level 24", "FullName": "public MessagePattern.Part getPart (int i)"}, "getSubstring(android.icu.text.MessagePattern.Part)": {"Returns": [["@B_java#lang#String_E@", "the substring associated with part."]], "Parameters": [["@B_android#icu#text#MessagePattern#Part_E@", "MessagePattern.Part: a part of this MessagePattern."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the substring of the pattern string indicated by the Part. Convenience method for getPatternString().substring(part.getIndex(), part.getLimit()).", "history": "Added in API level 24", "FullName": "public String getSubstring (MessagePattern.Part part)"}, "MessagePattern()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs an empty MessagePattern with default ApostropheMode.", "history": "Added in API level 24", "FullName": "public MessagePattern ()"}, "hasNamedArguments()": {"Returns": [["boolean", "true if the parsed pattern has at least one named argument."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Does the parsed pattern have named arguments like {first_name}?", "history": "Added in API level 24", "FullName": "public boolean hasNamedArguments ()"}, "getPatternString()": {"Returns": [["@B_java#lang#String_E@", "the parsed pattern string (null if none was parsed)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public String getPatternString ()"}, "getPatternIndex(int)": {"Returns": [["int", "The pattern index of this Part."]], "Parameters": [["int", "int: The index of the Part data. (0..countParts()-1)"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if partIndex is outside the (0..countParts()-1) range"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern index of the specified pattern \"part\". Convenience method for getPart(partIndex).getIndex().", "history": "Added in API level 24", "FullName": "public int getPatternIndex (int partIndex)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 24", "FullName": "public String toString ()"}, "parseChoiceStyle(java.lang.String)": {"Returns": [["@B_android#icu#text#MessagePattern_E@", "this"]], "Parameters": [["@B_java#lang#String_E@", "String: a ChoiceFormat pattern string"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "for syntax errors in the pattern string"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if certain limits are exceeded (e.g., argument number too high, argument name too long, etc.)"], ["@B_java#lang#NumberFormatException_E@", "if a number could not be parsed"]], "SeeAlso": [], "Permissions": [], "Description": "Parses a ChoiceFormat pattern string.", "history": "Added in API level 24", "FullName": "public MessagePattern parseChoiceStyle (String pattern)"}, "autoQuoteApostropheDeep()": {"Returns": [["@B_java#lang#String_E@", "the deep-auto-quoted version of the parsed pattern string."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#MessageFormat#autoQuoteApostrophe_E@"], "Permissions": [], "Description": "Returns a version of the parsed pattern string where each ASCII apostrophe is doubled (escaped) if it is not already, and if it is not interpreted as quoting syntax. For example, this turns \"I don't '{know}' {gender,select,female{h''er}other{h'im}}.\" into \"I don''t '{know}' {gender,select,female{h''er}other{h''im}}.\"", "history": "Added in API level 24", "FullName": "public String autoQuoteApostropheDeep ()"}}, "Inheritance": [], "ClassName": "android.icu.text.MessagePattern", "ClassDesc": "Parses and represents ICU MessageFormat patterns. Also handles patterns for ChoiceFormat, PluralFormat and SelectFormat. Used in the implementations of those classes as well as in tools for message validation, translation and format conversion. The parser handles all syntax relevant for identifying message arguments. This includes \"complex\" arguments whose style strings contain nested MessageFormat pattern substrings. For \"simple\" arguments (with no nested MessageFormat pattern substrings), the argument style is not parsed any further. The parser handles named and numbered message arguments and allows both in one message. Once a pattern has been parsed successfully, iterate through the parsed data with countParts(), getPart() and related methods. The data logically represents a parse tree, but is stored and accessed as a list of \"parts\" for fast and simple parsing and to minimize object allocations. Arguments and nested messages are best handled via recursion. For every _START \"part\", @B_android#icu#text#MessagePattern#getLimitPartIndex_E@ efficiently returns the index of the corresponding _LIMIT \"part\". List of \"parts\": Literal output text is not represented directly by \"parts\" but accessed between parts of a message, from one part's getLimit() to the next part's getIndex(). ARG_START.CHOICE stands for an ARG_START Part with ArgType CHOICE. In the choiceStyle, the ARG_SELECTOR has the '<', the '#' or the less-than-or-equal-to sign (U+2264). In the pluralStyle, the first, optional numeric Part has the \"offset:\" value. The optional numeric Part between each (ARG_SELECTOR, message) pair is the value of an explicit-number selector like \"=2\", otherwise the selector is a non-numeric identifier. The REPLACE_NUMBER Part can occur only in an immediate sub-message of the pluralStyle. This class is not intended for public subclassing."}