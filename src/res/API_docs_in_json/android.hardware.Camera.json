{"Functions": {"setPreviewTexture(android.graphics.SurfaceTexture)": {"Returns": [], "Parameters": [["@B_android#graphics#SurfaceTexture_E@", "SurfaceTexture: the @B_android#graphics#SurfaceTexture_E@ to which the preview images are to be sent or null to remove the current preview surface texture"]], "Throws": [["@B_java#io#IOException_E@", "if the method fails (for example, if the surface texture is unavailable or unsuitable)."], ["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#media#MediaActionSound_E@", "@B_android#graphics#SurfaceTexture_E@", "@B_android#view#TextureView_E@"], "Permissions": [], "Description": "Sets the @B_android#graphics#SurfaceTexture_E@ to be used for live preview. Either a surface or surface texture is necessary for preview, and preview is necessary to take pictures. The same surface texture can be re-set without harm. Setting a preview surface texture will un-set any preview surface that was set via @B_android#hardware#Camera#setPreviewDisplay_E@. This method must be called before @B_android#hardware#Camera#startPreview_E@. The one exception is that if the preview surface texture is not set (or set to null) before startPreview() is called, then this method may be called once with a non-null parameter to set the preview surface. (This allows camera setup and surface creation to happen in parallel, saving time.) The preview surface texture may not otherwise change while preview is running. The timestamps provided by @B_android#graphics#SurfaceTexture#getTimestamp_E@ for a SurfaceTexture set as the preview texture have an unspecified zero point, and cannot be directly compared between different cameras or different instances of the same camera, or across multiple runs of the same program. If you are using the preview data to create video or still images, strongly consider using @B_android#media#MediaActionSound_E@ to properly indicate image capture or recording start/stop to the user.", "history": "Added in API level 11 Deprecated in API level 21", "FullName": "public final void setPreviewTexture (SurfaceTexture surfaceTexture)"}, "setPreviewCallback(android.hardware.Camera.PreviewCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#PreviewCallback_E@", "Camera.PreviewCallback: a callback object that receives a copy of each preview frame, or null to stop receiving callbacks."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#media#MediaActionSound_E@"], "Permissions": [], "Description": "Installs a callback to be invoked for every preview frame in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active. This method can be called at any time, even while preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using @B_android#media#MediaActionSound_E@ to properly indicate image capture or recording start/stop to the user.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void setPreviewCallback (Camera.PreviewCallback cb)"}, "setErrorCallback(android.hardware.Camera.ErrorCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#ErrorCallback_E@", "Camera.ErrorCallback: The callback to run"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Registers a callback to be invoked when an error occurs.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void setErrorCallback (Camera.ErrorCallback cb)"}, "addCallbackBuffer(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: the buffer to add to the queue. The size of the buffer must match the values described above."]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#setPreviewCallbackWithBuffer_E@"], "Permissions": [], "Description": "Adds a pre-allocated buffer to the preview callback buffer queue. Applications can add one or more buffers to the queue. When a preview frame arrives and there is still at least one available buffer, the buffer will be used and removed from the queue. Then preview callback is invoked with the buffer. If a frame arrives and there is no buffer left, the frame is discarded. Applications should add buffers back when they finish processing the data in them. For formats besides YV12, the size of the buffer is determined by multiplying the preview image width, height, and bytes per pixel. The width and height can be read from @B_android#hardware#Camera#Parameters#getPreviewSize_E@. Bytes per pixel can be computed from @B_android#graphics#ImageFormat#getBitsPerPixel_E@ / 8, using the image format from @B_android#hardware#Camera#Parameters#getPreviewFormat_E@. If using the @B_android#graphics#ImageFormat#YV12_E@ format, the size can be calculated using the equations listed in @B_android#hardware#Camera#Parameters#setPreviewFormat_E@. This method is only necessary when @B_android#hardware#Camera#setPreviewCallbackWithBuffer_E@ is used. When @B_android#hardware#Camera#setPreviewCallback_E@ or @B_android#hardware#Camera#setOneShotPreviewCallback_E@ are used, buffers are automatically allocated. When a supplied buffer is too small to hold the preview frame data, preview callback will return null and the buffer will be removed from the buffer queue.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void addCallbackBuffer (byte[] callbackBuffer)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "protected void finalize ()"}, "stopPreview()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if stopping preview fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": [], "Permissions": [], "Description": "Stops capturing and drawing preview frames to the surface, and resets the camera for a future call to @B_android#hardware#Camera#startPreview_E@.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void stopPreview ()"}, "cancelAutoFocus()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if canceling autofocus fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#autoFocus_E@"], "Permissions": [], "Description": "Cancels any auto-focus function in progress. Whether or not auto-focus is currently in progress, this function will return the focus position to the default. If the camera does not support auto-focus, this is a no-op.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public final void cancelAutoFocus ()"}, "setZoomChangeListener(android.hardware.Camera.OnZoomChangeListener)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#OnZoomChangeListener_E@", "Camera.OnZoomChangeListener: the listener to notify"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#startSmoothZoom_E@"], "Permissions": [], "Description": "Registers a listener to be notified when the zoom value is updated by the camera driver during smooth zoom.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void setZoomChangeListener (Camera.OnZoomChangeListener listener)"}, "stopSmoothZoom()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the method fails."]], "SeeAlso": [], "Permissions": [], "Description": "Stops the smooth zoom. Applications should wait for the @B_android#hardware#Camera#OnZoomChangeListener_E@ to know when the zoom is actually stopped. This method is supported if @B_android#hardware#Camera#Parameters#isSmoothZoomSupported_E@ is true.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void stopSmoothZoom ()"}, "startPreview()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if starting preview fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance. The QCIF (176x144) exception mentioned in @B_android#hardware#Camera#Parameters#setPreviewSize_E@ and @B_android#hardware#Camera#Parameters#setPictureSize_E@ can also cause this exception be thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Starts capturing and drawing preview frames to the screen. Preview will not actually start until a surface is supplied with @B_android#hardware#Camera#setPreviewDisplay_E@ or @B_android#hardware#Camera#setPreviewTexture_E@. If @B_android#hardware#Camera#setPreviewCallback_E@, @B_android#hardware#Camera#setOneShotPreviewCallback_E@, or @B_android#hardware#Camera#setPreviewCallbackWithBuffer_E@ were called, @B_android#hardware#Camera#PreviewCallback#onPreviewFrame_E@ will be called when preview data becomes available.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void startPreview ()"}, "enableShutterSound(boolean)": {"Returns": [["boolean", "true if the shutter sound state was successfully changed. false if the shutter sound state could not be changed. true is also returned if shutter sound playback is already set to the requested state."]], "Parameters": [["boolean", "boolean: whether the camera should play the system shutter sound when @B_android#hardware#Camera#takePicture_E@ is called."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if the call fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#takePicture_E@", "@B_android#hardware#Camera#CameraInfo#canDisableShutterSound_E@", "@B_android#hardware#Camera#ShutterCallback_E@"], "Permissions": [], "Description": "Enable or disable the default shutter sound when taking a picture. By default, the camera plays the system-defined camera shutter sound when @B_android#hardware#Camera#takePicture_E@ is called. Using this method, the shutter sound can be disabled. It is strongly recommended that an alternative shutter sound is played in the @B_android#hardware#Camera#ShutterCallback_E@ when the system shutter sound is disabled. Note that devices may not always allow disabling the camera shutter sound. If the shutter sound state cannot be set to the desired value, this method will return false. @B_android#hardware#Camera#CameraInfo#canDisableShutterSound_E@ can be used to determine whether the device will allow the shutter sound to be disabled.", "history": "Added in API level 17 Deprecated in API level 21", "FullName": "public final boolean enableShutterSound (boolean enabled)"}, "startSmoothZoom(int)": {"Returns": [], "Parameters": [["int", "int: zoom value. The valid range is 0 to @B_android#hardware#Camera#Parameters#getMaxZoom_E@."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the zoom value is invalid."], ["@B_java#lang#RuntimeException_E@", "if the method fails."]], "SeeAlso": ["@B_android#hardware#Camera#setZoomChangeListener_E@"], "Permissions": [], "Description": "Zooms to the requested value smoothly. The driver will notify @B_android#hardware#Camera#OnZoomChangeListener_E@ of the zoom value and whether zoom is stopped at the time. For example, suppose the current zoom is 0 and startSmoothZoom is called with value 3. The @B_android#hardware#Camera#OnZoomChangeListener#onZoomChange_E@ method will be called three times with zoom values 1, 2, and 3. Applications can call @B_android#hardware#Camera#stopSmoothZoom_E@ to stop the zoom earlier. Applications should not call startSmoothZoom again or change the zoom value before zoom stops. If the supplied zoom value equals to the current zoom value, no zoom callback will be generated. This method is supported if @B_android#hardware#Camera#Parameters#isSmoothZoomSupported_E@ returns true.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void startSmoothZoom (int value)"}, "reconnect()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if a connection cannot be re-established (for example, if the camera is still in use by another process)."], ["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": [], "Permissions": [], "Description": "Reconnects to the camera service after another process used it. After @B_android#hardware#Camera#unlock_E@ is called, another process may use the camera; when the process is done, you must reconnect to the camera, which will re-acquire the lock and allow you to continue using the camera. Since API level 14, camera is automatically locked for applications in @B_android#media#MediaRecorder#start_E@. Applications can use the camera (ex: zoom) after recording starts. There is no need to call this after recording starts or stops. If you are not recording video, you probably do not need this method.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void reconnect ()"}, "setAutoFocusMoveCallback(android.hardware.Camera.AutoFocusMoveCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#AutoFocusMoveCallback_E@", "Camera.AutoFocusMoveCallback: the callback to run"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if enabling the focus move callback fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": [], "Permissions": [], "Description": "Sets camera auto-focus move callback.", "history": "Added in API level 16 Deprecated in API level 21", "FullName": "public void setAutoFocusMoveCallback (Camera.AutoFocusMoveCallback cb)"}, "setPreviewCallbackWithBuffer(android.hardware.Camera.PreviewCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#PreviewCallback_E@", "Camera.PreviewCallback: a callback object that receives a copy of the preview frame, or null to stop receiving callbacks and clear the buffer queue."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#addCallbackBuffer_E@", "@B_android#media#MediaActionSound_E@"], "Permissions": [], "Description": "Installs a callback to be invoked for every preview frame, using buffers supplied with @B_android#hardware#Camera#addCallbackBuffer_E@, in addition to displaying them on the screen. The callback will be repeatedly called for as long as preview is active and buffers are available. Any other preview callbacks are overridden. The purpose of this method is to improve preview efficiency and frame rate by allowing preview frame memory reuse. You must call @B_android#hardware#Camera#addCallbackBuffer_E@ at some point -- before or after calling this method -- or no callbacks will received. The buffer queue will be cleared if this method is called with a null callback, @B_android#hardware#Camera#setPreviewCallback_E@ is called, or @B_android#hardware#Camera#setOneShotPreviewCallback_E@ is called. If you are using the preview data to create video or still images, strongly consider using @B_android#media#MediaActionSound_E@ to properly indicate image capture or recording start/stop to the user.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void setPreviewCallbackWithBuffer (Camera.PreviewCallback cb)"}, "setPreviewDisplay(android.view.SurfaceHolder)": {"Returns": [], "Parameters": [["@B_android#view#SurfaceHolder_E@", "SurfaceHolder: containing the Surface on which to place the preview, or null to remove the preview surface"]], "Throws": [["@B_java#io#IOException_E@", "if the method fails (for example, if the surface is unavailable or unsuitable)."], ["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#view#Surface_E@ to be used for live preview. Either a surface or surface texture is necessary for preview, and preview is necessary to take pictures. The same surface can be re-set without harm. Setting a preview surface will un-set any preview surface texture that was set via @B_android#hardware#Camera#setPreviewTexture_E@. The @B_android#view#SurfaceHolder_E@ must already contain a surface when this method is called. If you are using @B_android#view#SurfaceView_E@, you will need to register a @B_android#view#SurfaceHolder#Callback_E@ with @B_android#view#SurfaceHolder#addCallback_E@ and wait for @B_android#view#SurfaceHolder#Callback#surfaceCreated_E@ before calling setPreviewDisplay() or starting preview. This method must be called before @B_android#hardware#Camera#startPreview_E@. The one exception is that if the preview surface is not set (or set to null) before startPreview() is called, then this method may be called once with a non-null parameter to set the preview surface. (This allows camera setup and surface creation to happen in parallel, saving time.) The preview surface may not otherwise change while preview is running.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void setPreviewDisplay (SurfaceHolder holder)"}, "setOneShotPreviewCallback(android.hardware.Camera.PreviewCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#PreviewCallback_E@", "Camera.PreviewCallback: a callback object that receives a copy of the next preview frame, or null to stop receiving callbacks."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#media#MediaActionSound_E@"], "Permissions": [], "Description": "Installs a callback to be invoked for the next preview frame in addition to displaying it on the screen. After one invocation, the callback is cleared. This method can be called any time, even when preview is live. Any other preview callbacks are overridden. If you are using the preview data to create video or still images, strongly consider using @B_android#media#MediaActionSound_E@ to properly indicate image capture or recording start/stop to the user.", "history": "Added in API level 3 Deprecated in API level 21", "FullName": "public final void setOneShotPreviewCallback (Camera.PreviewCallback cb)"}, "takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#ShutterCallback_E@", "Camera.ShutterCallback: the callback for image capture moment, or null"], ["@B_android#hardware#Camera#PictureCallback_E@", "Camera.PictureCallback: the callback for raw (uncompressed) image data, or null"], ["@B_android#hardware#Camera#PictureCallback_E@", "Camera.PictureCallback: callback with postview image data, may be null"], ["@B_android#hardware#Camera#PictureCallback_E@", "Camera.PictureCallback: the callback for JPEG image data, or null"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if starting picture capture fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": [], "Permissions": [], "Description": "Triggers an asynchronous image capture. The camera service will initiate a series of callbacks to the application as the image capture progresses. The shutter callback occurs after the image is captured. This can be used to trigger a sound to let the user know that image has been captured. The raw callback occurs when the raw image data is available (NOTE: the data will be null if there is no raw image callback buffer available or the raw image callback buffer is not large enough to hold the raw image). The postview callback occurs when a scaled, fully processed postview image is available (NOTE: not all hardware supports this). The jpeg callback occurs when the compressed image is available. If the application does not need a particular callback, a null can be passed instead of a callback method. This method is only valid when preview is active (after @B_android#hardware#Camera#startPreview_E@). Preview will be stopped after the image is taken; callers must call @B_android#hardware#Camera#startPreview_E@ again if they want to re-start preview or take more pictures. This should not be called between @B_android#media#MediaRecorder#start_E@ and @B_android#media#MediaRecorder#stop_E@. After calling this method, you must not call @B_android#hardware#Camera#startPreview_E@ or take another picture until the JPEG callback has returned.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback postview, Camera.PictureCallback jpeg)"}, "open(int)": {"Returns": [["@B_android#hardware#Camera_E@", "a new Camera object, connected, locked and ready for use."]], "Parameters": [["int", "int: the hardware camera to access, between 0 and @B_android#hardware#Camera#getNumberOfCameras_E@-1."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if opening the camera fails (for example, if the camera is in use by another process or device policy manager has disabled the camera)."]], "SeeAlso": ["@B_android#app#admin#DevicePolicyManager#getCameraDisabled_E@"], "Permissions": [], "Description": "Creates a new Camera object to access a particular hardware camera. If the same camera is opened by other applications, this will throw a RuntimeException. You must call @B_android#hardware#Camera#release_E@ when you are done using the camera, otherwise it will remain locked and be unavailable to other applications. Your application should only have one Camera object active at a time for a particular hardware camera. Callbacks from other methods are delivered to the event loop of the thread which called open(). If this thread has no event loop, then callbacks are delivered to the main application event loop. If there is no main application event loop, callbacks are not delivered. @B_android#os#AsyncTask_E@) to avoid blocking the main application UI thread.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public static Camera open (int cameraId)"}, "setFaceDetectionListener(android.hardware.Camera.FaceDetectionListener)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#FaceDetectionListener_E@", "Camera.FaceDetectionListener: the listener to notify"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#startFaceDetection_E@"], "Permissions": [], "Description": "Registers a listener to be notified about the faces detected in the preview frame.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public final void setFaceDetectionListener (Camera.FaceDetectionListener listener)"}, "stopFaceDetection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#startFaceDetection_E@"], "Permissions": [], "Description": "Stops the face detection.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public final void stopFaceDetection ()"}, "lock()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the camera cannot be re-locked (for example, if the camera is still in use by another process)."]], "SeeAlso": [], "Permissions": [], "Description": "Re-locks the camera to prevent other processes from accessing it. Camera objects are locked by default unless @B_android#hardware#Camera#unlock_E@ is called. Normally @B_android#hardware#Camera#reconnect_E@ is used instead. Since API level 14, camera is automatically locked for applications in @B_android#media#MediaRecorder#start_E@. Applications can use the camera (ex: zoom) after recording starts. There is no need to call this after recording starts or stops. If you are not recording video, you probably do not need this method.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public final void lock ()"}, "setParameters(android.hardware.Camera.Parameters)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#Parameters_E@", "Camera.Parameters: the Parameters to use for this Camera service"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if any parameter is invalid or not supported."]], "SeeAlso": ["@B_android#hardware#Camera#getParameters_E@"], "Permissions": [], "Description": "Changes the settings for this Camera service.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public void setParameters (Camera.Parameters params)"}, "open()": {"Returns": [["@B_android#hardware#Camera_E@", "a new Camera object for the first back-facing camera, or null if there is no backfacing camera"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#open_E@"], "Permissions": [], "Description": "Creates a new Camera object to access the first back-facing camera on the device. If the device does not have a back-facing camera, this returns null. Otherwise acts like the @B_android#hardware#Camera#open_E@ call.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public static Camera open ()"}, "unlock()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if the camera cannot be unlocked."]], "SeeAlso": [], "Permissions": [], "Description": "Unlocks the camera to allow another process to access it. Normally, the camera is locked to the process with an active Camera object until @B_android#hardware#Camera#release_E@ is called. To allow rapid handoff between processes, you can call this method to release the camera temporarily for another process to use; once the other process is done you can call @B_android#hardware#Camera#reconnect_E@ to reclaim the camera. This must be done before calling @B_android#media#MediaRecorder#setCamera_E@. This cannot be called after recording starts. If you are not recording video, you probably do not need this method.", "history": "Added in API level 5 Deprecated in API level 21", "FullName": "public final void unlock ()"}, "autoFocus(android.hardware.Camera.AutoFocusCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#AutoFocusCallback_E@", "Camera.AutoFocusCallback: the callback to run"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if starting autofocus fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#cancelAutoFocus_E@", "@B_android#hardware#Camera#Parameters#setAutoExposureLock_E@", "@B_android#hardware#Camera#Parameters#setAutoWhiteBalanceLock_E@", "@B_android#media#MediaActionSound_E@"], "Permissions": [], "Description": "Starts camera auto-focus and registers a callback function to run when the camera is focused. This method is only valid when preview is active (between @B_android#hardware#Camera#startPreview_E@ and before @B_android#hardware#Camera#stopPreview_E@). Callers should check @B_android#hardware#Camera#Parameters#getFocusMode_E@ to determine if this method should be called. If the camera does not support auto-focus, it is a no-op and @B_android#hardware#Camera#AutoFocusCallback#onAutoFocus_E@ callback will be called immediately. If your application should not be installed on devices without auto-focus, you must declare that your application uses auto-focus with the If the current flash mode is not @B_android#hardware#Camera#Parameters#FLASH_MODE_OFF_E@, flash may be fired during auto-focus, depending on the driver and camera hardware. Auto-exposure lock @B_android#hardware#Camera#Parameters#getAutoExposureLock_E@ and auto-white balance locks @B_android#hardware#Camera#Parameters#getAutoWhiteBalanceLock_E@ do not change during and after autofocus. But auto-focus routine may stop auto-exposure and auto-white balance transiently during focusing. Stopping preview with @B_android#hardware#Camera#stopPreview_E@, or triggering still image capture with @B_android#hardware#Camera#takePicture_E@, will not change the the focus position. Applications must call cancelAutoFocus to reset the focus. If autofocus is successful, consider using @B_android#media#MediaActionSound_E@ to properly play back an autofocus success sound to the user.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void autoFocus (Camera.AutoFocusCallback cb)"}, "startFaceDetection()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the face detection is unsupported."], ["@B_java#lang#RuntimeException_E@", "if the method fails or the face detection is already running."]], "SeeAlso": ["@B_android#hardware#Camera#FaceDetectionListener_E@", "@B_android#hardware#Camera#stopFaceDetection_E@", "@B_android#hardware#Camera#Parameters#getMaxNumDetectedFaces_E@"], "Permissions": [], "Description": "Starts the face detection. This should be called after preview is started. The camera will notify @B_android#hardware#Camera#FaceDetectionListener_E@ of the detected faces in the preview frame. The detected faces may be the same as the previous ones. Applications should call @B_android#hardware#Camera#stopFaceDetection_E@ to stop the face detection. This method is supported if @B_android#hardware#Camera#Parameters#getMaxNumDetectedFaces_E@ returns a number larger than 0. If the face detection has started, apps should not call this again. When the face detection is running, @B_android#hardware#Camera#Parameters#setWhiteBalance_E@, @B_android#hardware#Camera#Parameters#setFocusAreas_E@, and @B_android#hardware#Camera#Parameters#setMeteringAreas_E@ have no effect. The camera uses the detected faces to do auto-white balance, auto exposure, and autofocus. If the apps call @B_android#hardware#Camera#autoFocus_E@, the camera will stop sending face callbacks. The last face callback indicates the areas used to do autofocus. After focus completes, face detection will resume sending face callbacks. If the apps call @B_android#hardware#Camera#cancelAutoFocus_E@, the face callbacks will also resume. After calling @B_android#hardware#Camera#takePicture_E@ or @B_android#hardware#Camera#stopPreview_E@, and then resuming preview with @B_android#hardware#Camera#startPreview_E@, the apps should call this method again to resume face detection.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public final void startFaceDetection ()"}, "getNumberOfCameras()": {"Returns": [["int", "total number of accessible camera devices, or 0 if there are no cameras or an error was encountered enumerating them."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of physical cameras available on this device. The return value of this method might change dynamically if the device supports external cameras and an external camera is connected or disconnected. If there is a @B_android#hardware#camera2#CameraMetadata#REQUEST_AVAILABLE_CAPABILITIES_LOGICAL_MULTI_CAMERA_E@ in the system, to maintain app backward compatibility, this method will only expose one camera per facing for all logical camera and physical camera groups. Use camera2 API to see all cameras.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public static int getNumberOfCameras ()"}, "release()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Disconnects and releases the Camera object resources. You must call this as soon as you're done with the Camera object.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void release ()"}, "setDisplayOrientation(int)": {"Returns": [], "Parameters": [["int", "int: the angle that the picture will be rotated clockwise. Valid values are 0, 90, 180, and 270."]], "Throws": [["@B_java#lang#RuntimeException_E@", "if setting orientation fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#setPreviewDisplay_E@"], "Permissions": [], "Description": "Set the clockwise rotation of preview display in degrees. This affects the preview frames and the picture displayed after snapshot. This method is useful for portrait mode applications. Note that preview display of front-facing cameras is flipped horizontally before the rotation, that is, the image is reflected along the central vertical axis of the camera sensor. So the users can see themselves as looking into a mirror. This does not affect the order of byte array passed in @B_android#hardware#Camera#PreviewCallback#onPreviewFrame_E@, JPEG pictures, or recorded videos. This method is not allowed to be called during preview. If you want to make the camera image show in the same orientation as the display, you can use the following code. Starting from API level 14, this method can be called when preview is active.", "history": "Added in API level 8 Deprecated in API level 21", "FullName": "public final void setDisplayOrientation (int degrees)"}, "getParameters()": {"Returns": [["@B_android#hardware#Camera#Parameters_E@", "no returns description in source"]], "Parameters": [], "Throws": [["@B_java#lang#RuntimeException_E@", "if reading parameters fails; usually this would be because of a hardware or other low-level error, or because release() has been called on this Camera instance."]], "SeeAlso": ["@B_android#hardware#Camera#setParameters_E@"], "Permissions": [], "Description": "Returns the current settings for this Camera service. If modifications are made to the returned Parameters, they must be passed to @B_android#hardware#Camera#setParameters_E@ to take effect.", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public Camera.Parameters getParameters ()"}, "getCameraInfo(int,android.hardware.Camera.CameraInfo)": {"Returns": [], "Parameters": [["int", "int no parameter comment"], ["@B_android#hardware#Camera#CameraInfo_E@", "Camera.CameraInfo no parameter comment"]], "Throws": [["@B_java#lang#RuntimeException_E@", "if an invalid ID is provided, or if there is an error retrieving the information (generally due to a hardware or other low-level failure)."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the information about a particular camera. If @B_android#hardware#Camera#getNumberOfCameras_E@ returns N, the valid id is 0 to N-1.", "history": "Added in API level 9 Deprecated in API level 21", "FullName": "public static void getCameraInfo (int cameraId, Camera.CameraInfo cameraInfo)"}, "takePicture(android.hardware.Camera.ShutterCallback,android.hardware.Camera.PictureCallback,android.hardware.Camera.PictureCallback)": {"Returns": [], "Parameters": [["@B_android#hardware#Camera#ShutterCallback_E@", "Camera.ShutterCallback no parameter comment"], ["@B_android#hardware#Camera#PictureCallback_E@", "Camera.PictureCallback no parameter comment"], ["@B_android#hardware#Camera#PictureCallback_E@", "Camera.PictureCallback no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#hardware#Camera#takePicture_E@"], "Permissions": [], "Description": "Equivalent to", "history": "Added in API level 1 Deprecated in API level 21", "FullName": "public final void takePicture (Camera.ShutterCallback shutter, Camera.PictureCallback raw, Camera.PictureCallback jpeg)"}}, "Inheritance": [], "ClassName": "android.hardware.Camera", "ClassDesc": "We recommend using the new @B_android#hardware#camera2#package-summary_E@ API for new applications. The Camera class is used to set image capture settings, start/stop preview, snap pictures, and retrieve frames for encoding for video. This class is a client for the Camera service, which manages the actual camera hardware. To access the device camera, you must declare the @B_android#Manifest#permission#CAMERA_E@ permission in your Android Manifest. Also be sure to include the To take pictures with this class, use the following steps: To quickly switch to video recording mode, use these steps: This class is not thread-safe, and is meant for use from one event thread. Most long-running operations (preview, focus, photo capture, etc) happen asynchronously and invoke callbacks as necessary. Callbacks will be invoked on the event thread @B_android#hardware#Camera#open_E@ was called from. This class's methods must never be called from multiple threads at once."}