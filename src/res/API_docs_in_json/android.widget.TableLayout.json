{"Functions": {"addView(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["int", "int: the position at which to add the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child, int index)"}, "setShrinkAllColumns(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to mark all columns shrinkable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to mark all columns as shrinkable.", "history": "Added in API level 1", "FullName": "public void setShrinkAllColumns (boolean shrinkAllColumns)"}, "onMeasure(int,int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "Added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "public void requestLayout ()"}, "onLayout(boolean,int,int,int,int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "Added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "generateLayoutParams(android.util.AttributeSet)": {"Returns": [["@B_android#widget#TableLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#util#AttributeSet_E@", "AttributeSet: the attributes to build the layout parameters from"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new set of layout parameters based on the supplied attributes set.", "history": "Added in API level 1", "FullName": "public TableLayout.LayoutParams generateLayoutParams (AttributeSet attrs)"}, "setStretchAllColumns(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to mark all columns stretchable"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to mark all columns as stretchable.", "history": "Added in API level 1", "FullName": "public void setStretchAllColumns (boolean stretchAllColumns)"}, "setColumnCollapsed(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be collapsed, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Collapses or restores a given column. When collapsed, a column does not appear on screen and the extra space is reclaimed by the other columns. A column is collapsed/restored only when it belongs to a @B_android#widget#TableRow_E@. Calling this method requests a layout operation.", "history": "added in API level 1", "FullName": "public void setColumnCollapsed (int columnIndex, boolean isCollapsed)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in API level 1", "FullName": "protected void onLayout (boolean changed, int l, int t, int r, int b)"}, "TableLayout(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TableLayout for the given context.", "history": "Added in API level 1", "FullName": "public TableLayout (Context context)"}, "setColumnCollapsed(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be collapsed, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Collapses or restores a given column. When collapsed, a column does not appear on screen and the extra space is reclaimed by the other columns. A column is collapsed/restored only when it belongs to a @B_android#widget#TableRow_E@. Calling this method requests a layout operation.", "history": "Added in API level 1", "FullName": "public void setColumnCollapsed (int columnIndex, boolean isCollapsed)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "added in API level 1", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "setColumnStretchable(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be stretchable, false otherwise. Default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the given column stretchable or not. When stretchable, a column takes up as much as available space as possible in its row. Calling this method requests a layout operation.", "history": "added in API level 1", "FullName": "public void setColumnStretchable (int columnIndex, boolean isStretchable)"}, "checkLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected boolean checkLayoutParams (ViewGroup.LayoutParams p)"}, "isColumnCollapsed(int)": {"Returns": [["boolean", "true if the column is collapsed, false otherwise"]], "Parameters": [["int", "int: the index of the column"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the collapsed state of the specified column.", "history": "Added in API level 1", "FullName": "public boolean isColumnCollapsed (int columnIndex)"}, "isStretchAllColumns()": {"Returns": [["boolean", "true if all columns are stretchable, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether all columns are stretchable or not.", "history": "Added in API level 1", "FullName": "public boolean isStretchAllColumns ()"}, "setColumnShrinkable(int, boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be shrinkable, false otherwise. Default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the given column shrinkable or not. When a row is too wide, the table can reclaim extra space from shrinkable columns. Calling this method requests a layout operation.", "history": "added in API level 1", "FullName": "public void setColumnShrinkable (int columnIndex, boolean isShrinkable)"}, "setColumnStretchable(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be stretchable, false otherwise. Default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the given column stretchable or not. When stretchable, a column takes up as much as available space as possible in its row. Calling this method requests a layout operation.", "history": "Added in API level 1", "FullName": "public void setColumnStretchable (int columnIndex, boolean isStretchable)"}, "addView(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["int", "int: the position at which to add the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "added in API level 1", "FullName": "public void addView (View child, int index)"}, "setColumnShrinkable(int,boolean)": {"Returns": [], "Parameters": [["int", "int: the index of the column"], ["boolean", "boolean: true if the column must be shrinkable, false otherwise. Default is false."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Makes the given column shrinkable or not. When a row is too wide, the table can reclaim extra space from shrinkable columns. Calling this method requests a layout operation.", "history": "Added in API level 1", "FullName": "public void setColumnShrinkable (int columnIndex, boolean isShrinkable)"}, "setOnHierarchyChangeListener(android.view.ViewGroup.OnHierarchyChangeListener)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup#OnHierarchyChangeListener_E@", "ViewGroup.OnHierarchyChangeListener: the callback to invoke on hierarchy change"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register a callback to be invoked when a child is added to or removed from this view.", "history": "Added in API level 1", "FullName": "public void setOnHierarchyChangeListener (ViewGroup.OnHierarchyChangeListener listener)"}, "addView(android.view.View,int,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["int", "int: the position at which to add the child or -1 to add last"], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: the layout parameters to set on the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view with the specified layout parameters. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child, int index, ViewGroup.LayoutParams params)"}, "TableLayout(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: the application environment"], ["@B_android#util#AttributeSet_E@", "AttributeSet: a collection of attributes"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new TableLayout for the given context and with the specified set attributes.", "history": "Added in API level 1", "FullName": "public TableLayout (Context context, AttributeSet attrs)"}, "addView(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view. If no layout parameters are already set on the child, the default parameters for this ViewGroup are set on the child. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child)"}, "isColumnStretchable(int)": {"Returns": [["boolean", "true if the column is stretchable, false otherwise"]], "Parameters": [["int", "int: the index of the column"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified column is stretchable or not.", "history": "Added in API level 1", "FullName": "public boolean isColumnStretchable (int columnIndex)"}, "generateLayoutParams(android.view.ViewGroup.LayoutParams)": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "an instance of @B_android#view#ViewGroup#LayoutParams_E@ or one of its descendants"]], "Parameters": [["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: The layout parameters to convert into a suitable set of layout parameters for this ViewGroup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a safe set of layout parameters based on the supplied layout params. When a ViewGroup is passed a View whose layout params do not pass the test of @B_android#view#ViewGroup#checkLayoutParams_E@, this method is invoked. This method should return a new set of layout params suitable for this ViewGroup, possibly by copying the appropriate attributes from the specified set of layout params.", "history": "Added in API level 1", "FullName": "protected LinearLayout.LayoutParams generateLayoutParams (ViewGroup.LayoutParams p)"}, "generateDefaultLayoutParams()": {"Returns": [["@B_android#widget#LinearLayout#LayoutParams_E@", "a set of default layout parameters or null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a set of layout parameters with a width of @B_android#view#ViewGroup#LayoutParams#MATCH_PARENT_E@, and a height of @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@.", "history": "Added in API level 1", "FullName": "protected LinearLayout.LayoutParams generateDefaultLayoutParams ()"}, "isShrinkAllColumns()": {"Returns": [["boolean", "true if all columns are shrinkable, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether all columns are shrinkable or not.", "history": "Added in API level 1", "FullName": "public boolean isShrinkAllColumns ()"}, "isColumnShrinkable(int)": {"Returns": [["boolean", "true if the column is shrinkable, false otherwise. Default is false."]], "Parameters": [["int", "int: the index of the column"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the specified column is shrinkable or not.", "history": "Added in API level 1", "FullName": "public boolean isColumnShrinkable (int columnIndex)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "addView(android.view.View,android.view.ViewGroup.LayoutParams)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: the child view to add"], ["@B_android#view#ViewGroup#LayoutParams_E@", "ViewGroup.LayoutParams: the layout parameters to set on the child"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a child view with the specified layout parameters. @B_android#view#View#draw_E@, @B_android#view#View#onDraw_E@, @B_android#view#ViewGroup#dispatchDraw_E@ or any related method.", "history": "Added in API level 1", "FullName": "public void addView (View child, ViewGroup.LayoutParams params)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#LinearLayout_E@"], "ClassName": "android.widget.TableLayout", "ClassDesc": "A layout that arranges its children into rows and columns. A TableLayout consists of a number of @B_android#widget#TableRow_E@ objects, each defining a row (actually, you can have other children, which will be explained below). TableLayout containers do not display border lines for their rows, columns, or cells. Each row has zero or more cells; each cell can hold one @B_android#view#View_E@ object. The table has as many columns as the row with the most cells. A table can leave cells empty. Cells can span columns, as they can in HTML. The width of a column is defined by the row with the widest cell in that column. However, a TableLayout can specify certain columns as shrinkable or stretchable by calling @B_android#widget#TableLayout#setColumnShrinkable_E@ or @B_android#widget#TableLayout#setColumnStretchable_E@. If marked as shrinkable, the column width can be shrunk to fit the table into its parent object. If marked as stretchable, it can expand in width to fit any extra space. The total width of the table is defined by its parent container. It is important to remember that a column can be both shrinkable and stretchable. In such a situation, the column will change its size to always use up the available space, but never more. Finally, you can hide a column by calling @B_android#widget#TableLayout#setColumnCollapsed_E@. The children of a TableLayout cannot specify the layout_width attribute. Width is always MATCH_PARENT. However, the layout_height attribute can be defined by a child; default value is @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@. If the child is a @B_android#widget#TableRow_E@, then the height is always @B_android#view#ViewGroup#LayoutParams#WRAP_CONTENT_E@. Cells must be added to a row in increasing column order, both in code and XML. Column numbers are zero-based. If you don't specify a column number for a child cell, it will autoincrement to the next available column. If you skip a column number, it will be considered an empty cell in that row. See the TableLayout examples in ApiDemos for examples of creating tables in XML. Although the typical child of a TableLayout is a TableRow, you can actually use any View subclass as a direct child of TableLayout. The View will be displayed as a single row that spans all the table columns."}