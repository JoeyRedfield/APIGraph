{"Functions": {"setMultiLine(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is multi line."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node is a multi line editable text. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setMultiLine (boolean multiLine)"}, "setTextSelection(int, int)": {"Returns": [], "Parameters": [["int", "int: The text selection start."], ["int", "int: The text selection end."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text selection start and end. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 18", "FullName": "public void setTextSelection (int start, int end)"}, "isContextClickable()": {"Returns": [["boolean", "True if the node is context clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is context clickable.", "history": "Added in API level 23", "FullName": "public boolean isContextClickable ()"}, "performAction(int, android.os.Bundle)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle: A bundle with additional arguments."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Performs an action on the node. @B_android#accessibilityservice#AccessibilityService_E@.", "history": "added in API level 16", "FullName": "public boolean performAction (int action, Bundle arguments)"}, "setSource(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source to be a virtual descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 16", "FullName": "public void setSource (View root, int virtualDescendantId)"}, "setScreenReaderFocusable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the node is a focusable unit for screen readers, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node should be considered a focusable unit by a screen reader. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 28", "FullName": "public void setScreenReaderFocusable (boolean screenReaderFocusable)"}, "removeAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)": {"Returns": [["boolean", "The action removed from the list of actions."]], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#AccessibilityAction_E@", "AccessibilityNodeInfo.AccessibilityAction: The action to be removed."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Removes an action that can be performed on the node. If the action was not already added to the node, calling this method has no effect. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21", "FullName": "public boolean removeAction (AccessibilityNodeInfo.AccessibilityAction action)"}, "removeChild(android.view.View)": {"Returns": [["boolean", "true if the child was present"]], "Parameters": [["@B_android#view#View_E@", "View: The child."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Removes a child. If the child was not previously added to the node, calling this method has no effect. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21", "FullName": "public boolean removeChild (View child)"}, "setDismissable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the node can be dismissed."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node can be dismissed. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setDismissable (boolean dismissable)"}, "setPaneTitle(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The title of the pane represented by this node. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this node represents a visually distinct region of the screen that may update separately from the rest of the window, it is considered a pane. Set the pane title to indicate that the node is a pane, and to provide a title for it. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 28", "FullName": "public void setPaneTitle (CharSequence paneTitle)"}, "getPaneTitle()": {"Returns": [["@B_java#lang#CharSequence_E@", "The title of the pane represented by this node, or null if this node does not represent a pane."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the title of the pane represented by this node.", "history": "Added in API level 28", "FullName": "public CharSequence getPaneTitle ()"}, "getTraversalBefore()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The succeeding node if such or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setTraversalBefore_E@"], "Permissions": [], "Description": "Gets the node before which this one is visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes.", "history": "Added in API level 22", "FullName": "public AccessibilityNodeInfo getTraversalBefore ()"}, "getTraversalAfter()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The succeeding node if such or null."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setTraversalAfter_E@"], "Permissions": [], "Description": "Gets the node after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one.", "history": "Added in API level 22", "FullName": "public AccessibilityNodeInfo getTraversalAfter ()"}, "isImportantForAccessibility()": {"Returns": [["boolean", "true if the node originates from a view considered important for accessibility, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#isImportantForAccessibility_E@"], "Permissions": [], "Description": "Returns whether the node originates from a view considered important for accessibility.", "history": "Added in API level 24", "FullName": "public boolean isImportantForAccessibility ()"}, "setContentDescription(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The content description."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the content description of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setContentDescription (CharSequence contentDescription)"}, "setHeading(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the node is a heading, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node represents a heading. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 28", "FullName": "public void setHeading (boolean isHeading)"}, "setText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The text."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setText (CharSequence text)"}, "findAccessibilityNodeInfosByText(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "A list of node info."]], "Parameters": [["@B_java#lang#String_E@", "String: The searched text."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds @B_android#view#accessibility#AccessibilityNodeInfo_E@s by text. The match is case insensitive containment. The search is relative to this info i.e. this info is the root of the traversed tree. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 14", "FullName": "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByText (String text)"}, "setChecked(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is checked."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is checked. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setChecked (boolean checked)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether some other object is \"equal to\" this one. The equals method implements an equivalence relation on non-null object references: It is x, x.equals(x) should return true. It is x and y, x.equals(y) should return true if and only if y.equals(x) returns true. It is x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. It is x and y, multiple invocations of x.equals(y) consistently return true or consistently return false, provided no information used in equals comparisons on the objects is modified. For any non-null reference value x, x.equals(null) should return false. The equals method for class Object implements the most discriminating possible equivalence relation on objects; that is, for any non-null reference values x and y, this method returns true if and only if x and y refer to the same object (x == y has the value true). Note that it is generally necessary to override the hashCode method whenever this method is overridden, so as to maintain the general contract for the hashCode method, which states that equal objects must have equal hash codes.", "history": "Added in API level 14", "FullName": "public boolean equals (Object object)"}, "setSelected(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is selected."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is selected. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setSelected (boolean selected)"}, "isSelected()": {"Returns": [["boolean", "True if the node is selected."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is selected.", "history": "Added in API level 14", "FullName": "public boolean isSelected ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 14", "FullName": "public String toString ()"}, "getBoundsInParent(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The output node bounds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityNodeInfo#getBoundsInScreen_E@ instead. Gets the node bounds in the viewParent's coordinates. @B_android#view#accessibility#AccessibilityNodeInfo#getParent_E@ does not represent the source's viewParent. Instead it represents the result of @B_android#view#View#getParentForAccessibility_E@, which returns the closest ancestor where @B_android#view#View#isImportantForAccessibility_E@ is true. So this method is not reliable.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void getBoundsInParent (Rect outBounds)"}, "setEditable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is editable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is editable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 18", "FullName": "public void setEditable (boolean editable)"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 14", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "setHintText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The hint text for this mode."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the hint text of this node. Only applies to nodes where text can be entered. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 26", "FullName": "public void setHintText (CharSequence hintText)"}, "obtain(android.view.View,int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "An instance."]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setSource_E@"], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one and sets the source.", "history": "Added in API level 16", "FullName": "public static AccessibilityNodeInfo obtain (View root, int virtualDescendantId)"}, "setParent(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the parent. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 16", "FullName": "public void setParent (View root, int virtualDescendantId)"}, "setDrawingOrder(int)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Set the drawing order of the view corresponding it this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 24", "FullName": "public void setDrawingOrder (int drawingOrderInParent)"}, "setTraversalAfter(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the predecessor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 22", "FullName": "public void setTraversalAfter (View root, int virtualDescendantId)"}, "getChild(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The child node."]], "Parameters": [["int", "int: The child index."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Get the child at given index. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 14", "FullName": "public AccessibilityNodeInfo getChild (int index)"}, "setParent(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The parent."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setParent (View parent)"}, "setShowingHintText(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the text in the node represents a hint to the user, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node's text represents a hint for the user to enter text. It should only be true if the node has editable text. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 26", "FullName": "public void setShowingHintText (boolean showingHintText)"}, "addChild(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The child."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Adds a child. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService. Note that a view cannot be made its own child.", "history": "Added in API level 14", "FullName": "public void addChild (View child)"}, "isHeading()": {"Returns": [["boolean", "true if the node is a heading, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether node represents a heading. true if either @B_android#view#accessibility#AccessibilityNodeInfo#setHeading_E@ marks this node as a heading or if the node has a @B_android#view#accessibility#AccessibilityNodeInfo#CollectionItemInfo_E@ that marks it as such, to accomodate apps that use the now-deprecated API.", "history": "Added in API level 28", "FullName": "public boolean isHeading ()"}, "obtain(android.view.accessibility.AccessibilityNodeInfo)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "An instance."]], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "AccessibilityNodeInfo: The other info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available or a new one is create. The returned instance is initialized from the given info.", "history": "Added in API level 14", "FullName": "public static AccessibilityNodeInfo obtain (AccessibilityNodeInfo info)"}, "refresh()": {"Returns": [["boolean", "true if the refresh succeeded. false if the @B_android#view#View_E@ represented by this node is no longer in the view tree (and thus this node is obsolete and should be recycled)."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Refreshes this info with the latest state of the view it represents.", "history": "Added in API level 18", "FullName": "public boolean refresh ()"}, "setTraversalBefore(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node before which this one is visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes. The successor is a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the successor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 22", "FullName": "public void setTraversalBefore (View root, int virtualDescendantId)"}, "performAction(int)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: The action to perform."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Performs an action on the node. @B_android#accessibilityservice#AccessibilityService_E@.", "history": "Added in API level 14", "FullName": "public boolean performAction (int action)"}, "obtain(android.view.View)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "An instance."]], "Parameters": [["@B_android#view#View_E@", "View: The source view."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setSource_E@"], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one and sets the source.", "history": "Added in API level 14", "FullName": "public static AccessibilityNodeInfo obtain (View source)"}, "obtain(android.view.View, int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "An instance."]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setSource_E@"], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one and sets the source.", "history": "added in API level 16", "FullName": "public static AccessibilityNodeInfo obtain (View root, int virtualDescendantId)"}, "isContentInvalid()": {"Returns": [["boolean", "If the node content is invalid."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the content of this node is invalid. For example, a date is not well-formed.", "history": "Added in API level 19", "FullName": "public boolean isContentInvalid ()"}, "setContextClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is context clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is context clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 23", "FullName": "public void setContextClickable (boolean contextClickable)"}, "getCollectionInfo()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo#CollectionInfo_E@", "The collection info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the collection info if the node is a collection. A collection child is always a collection item.", "history": "Added in API level 19", "FullName": "public AccessibilityNodeInfo.CollectionInfo getCollectionInfo ()"}, "setCheckable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is checkable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is checkable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setCheckable (boolean checkable)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 14", "FullName": "public int describeContents ()"}, "setTraversalAfter(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node after which this one is visited in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the predecessor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 22", "FullName": "public void setTraversalAfter (View root, int virtualDescendantId)"}, "isFocused()": {"Returns": [["boolean", "True if the node is focused."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is focused.", "history": "Added in API level 14", "FullName": "public boolean isFocused ()"}, "setLongClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is long clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is long clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setLongClickable (boolean longClickable)"}, "isMultiLine()": {"Returns": [["boolean", "True if the node is multi line."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is a multi line editable text.", "history": "Added in API level 19", "FullName": "public boolean isMultiLine ()"}, "setCollectionItemInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionItemInfo)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#CollectionItemInfo_E@", "AccessibilityNodeInfo.CollectionItemInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the collection item info if the node is a collection item. A collection item is always a child of a collection. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setCollectionItemInfo (AccessibilityNodeInfo.CollectionItemInfo collectionItemInfo)"}, "getTextSelectionStart()": {"Returns": [["int", "The text selection start, the cursor location if there is no selection, or -1 if there is no text selection and no cursor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text selection start or the cursor position. If no text is selected, both this method and @B_android#view#accessibility#AccessibilityNodeInfo#getTextSelectionEnd_E@ return the same value: the current location of the cursor.", "history": "Added in API level 18", "FullName": "public int getTextSelectionStart ()"}, "getCollectionItemInfo()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo#CollectionItemInfo_E@", "The collection item info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the collection item info if the node is a collection item. A collection item is always a child of a collection.", "history": "Added in API level 19", "FullName": "public AccessibilityNodeInfo.CollectionItemInfo getCollectionItemInfo ()"}, "getChildCount()": {"Returns": [["int", "The child count."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the number of children.", "history": "Added in API level 14", "FullName": "public int getChildCount ()"}, "setSource(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source to be a virtual descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the source. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 16", "FullName": "public void setSource (View root, int virtualDescendantId)"}, "setCollectionInfo(android.view.accessibility.AccessibilityNodeInfo.CollectionInfo)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#CollectionInfo_E@", "AccessibilityNodeInfo.CollectionInfo: The collection info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the collection info if the node is a collection. A collection child is always a collection item. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setCollectionInfo (AccessibilityNodeInfo.CollectionInfo collectionInfo)"}, "setVisibleToUser(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: Whether the node is visible to the user."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is visible to the user. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 16", "FullName": "public void setVisibleToUser (boolean visibleToUser)"}, "setRangeInfo(android.view.accessibility.AccessibilityNodeInfo.RangeInfo)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#RangeInfo_E@", "AccessibilityNodeInfo.RangeInfo: The range info."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the range info if this node is a range. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setRangeInfo (AccessibilityNodeInfo.RangeInfo rangeInfo)"}, "getContentDescription()": {"Returns": [["@B_java#lang#CharSequence_E@", "The content description."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the content description of this node.", "history": "Added in API level 14", "FullName": "public CharSequence getContentDescription ()"}, "getLabeledBy()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The label."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node info which serves as the label of the view represented by this info for accessibility purposes. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 17", "FullName": "public AccessibilityNodeInfo getLabeledBy ()"}, "findAccessibilityNodeInfosByViewId(java.lang.String)": {"Returns": [["@B_java#util#List_E@", "A list of node info."]], "Parameters": [["@B_java#lang#String_E@", "String: The fully qualified resource name of the view id to find."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Finds @B_android#view#accessibility#AccessibilityNodeInfo_E@s by the fully qualified view id's resource name where a fully qualified id is of the from \"package:id/id_resource_name\". For example, if the target application's package is \"foo.bar\" and the id resource name is \"baz\", the fully qualified resource id is \"foo.bar:id/baz\". @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances. @B_android#view#accessibility#AccessibilityNodeInfo_E@ the client has to set the @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS_E@ flag when configuring his @B_android#accessibilityservice#AccessibilityService_E@.", "history": "Added in API level 18", "FullName": "public List<AccessibilityNodeInfo> findAccessibilityNodeInfosByViewId (String viewId)"}, "setClickable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is clickable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is clickable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setClickable (boolean clickable)"}, "getHintText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The hint text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the hint text of this node. Only applies to nodes where text can be entered.", "history": "Added in API level 26", "FullName": "public CharSequence getHintText ()"}, "setAvailableExtraData(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: A list of types of extra data that are available."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#getAvailableExtraData_E@"], "Permissions": [], "Description": "Set the extra data available for this node. View passes in a non-empty list, it promises that it will populate the node's extras with corresponding pieces of information in @B_android#view#View#addExtraDataToAccessibilityNodeInfo_E@. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 26", "FullName": "public void setAvailableExtraData (List<String> extraDataKeys)"}, "isEnabled()": {"Returns": [["boolean", "True if the node is enabled."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is enabled.", "history": "Added in API level 14", "FullName": "public boolean isEnabled ()"}, "getError()": {"Returns": [["@B_java#lang#CharSequence_E@", "The error text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the error text of this node.", "history": "Added in API level 21", "FullName": "public CharSequence getError ()"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The text."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text of this node. @B_android#text#style#ClickableSpan_E@s or @B_android#text#style#URLSpan_E@s, these spans will have been replaced with ones whose @B_android#text#style#ClickableSpan#onClick_E@ can be called from an @B_android#accessibilityservice#AccessibilityService_E@. When called from a service, the @B_android#view#View_E@ argument is ignored and the corresponding span will be found on the view that this AccessibilityNodeInfo represents and called with that view as its argument. This treatment of @B_android#text#style#ClickableSpan_E@s means that the text returned from this method may different slightly one passed to @B_android#view#accessibility#AccessibilityNodeInfo#setText_E@, although they will be equivalent according to @B_android#text#TextUtils#equals_E@. The @B_android#text#style#ClickableSpan#onClick_E@ of any spans, however, will generally not work outside of an accessibility service.", "history": "Added in API level 14", "FullName": "public CharSequence getText ()"}, "setImportantForAccessibility(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the node is considered important for accessibility, false otherwise"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node is considered important for accessibility. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 24", "FullName": "public void setImportantForAccessibility (boolean important)"}, "setMaxTextLength(int)": {"Returns": [], "Parameters": [["int", "int: The maximum text length."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#getMaxTextLength_E@"], "Permissions": [], "Description": "Sets the maximum text length, or -1 for no limit. Typically used to indicate that an editable text field has a limit on the number of characters entered. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21", "FullName": "public void setMaxTextLength (int max)"}, "setFocusable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is focusable."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is focusable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setFocusable (boolean focusable)"}, "findFocus(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The node info of the focused view or null."]], "Parameters": [["int", "int: The focus to find. One of @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_INPUT_E@ or @B_android#view#accessibility#AccessibilityNodeInfo#FOCUS_ACCESSIBILITY_E@."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Find the view that has the specified focus type. The search starts from the view represented by this node info.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeInfo findFocus (int focus)"}, "setTextSelection(int,int)": {"Returns": [], "Parameters": [["int", "int: The text selection start."], ["int", "int: The text selection end."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the text selection start and end. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 18", "FullName": "public void setTextSelection (int start, int end)"}, "setPackageName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The package name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the package this node comes from. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setPackageName (CharSequence packageName)"}, "getClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The class name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the class this node comes from.", "history": "Added in API level 14", "FullName": "public CharSequence getClassName ()"}, "getInputType()": {"Returns": [["int", "The input type."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the input type of the source as defined by @B_android#text#InputType_E@.", "history": "Added in API level 19", "FullName": "public int getInputType ()"}, "obtain()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "An instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a cached instance if such is available otherwise a new one.", "history": "Added in API level 14", "FullName": "public static AccessibilityNodeInfo obtain ()"}, "setLabeledBy(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view that labels this node's source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view which serves as the label of the view represented by this info for accessibility purposes.", "history": "Added in API level 17", "FullName": "public void setLabeledBy (View label)"}, "setError(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The error text."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the error text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21", "FullName": "public void setError (CharSequence error)"}, "addAction(android.view.accessibility.AccessibilityNodeInfo.AccessibilityAction)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#AccessibilityAction_E@", "AccessibilityNodeInfo.AccessibilityAction: The action."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Adds an action that can be performed on the node. To add a standard action use the static constants on @B_android#view#accessibility#AccessibilityNodeInfo#AccessibilityAction_E@. To add a custom action create a new @B_android#view#accessibility#AccessibilityNodeInfo#AccessibilityAction_E@ by passing in a resource id from your application as the action id and an optional label that describes the action. To override one of the standard actions use as the action id of a standard action id such as @B_android#view#accessibility#AccessibilityNodeInfo#ACTION_CLICK_E@ and an optional label that describes the action. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21", "FullName": "public void addAction (AccessibilityNodeInfo.AccessibilityAction action)"}, "addChild(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a virtual child which is a descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is added as a child. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. Note that a view cannot be made its own child.", "history": "Added in API level 16", "FullName": "public void addChild (View root, int virtualDescendantId)"}, "setLabeledBy(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant labels this node's source."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view which serves as the label of the view represented by this info for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the label. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 17", "FullName": "public void setLabeledBy (View root, int virtualDescendantId)"}, "setTouchDelegateInfo(android.view.accessibility.AccessibilityNodeInfo.TouchDelegateInfo)": {"Returns": [], "Parameters": [["@B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@", "AccessibilityNodeInfo.TouchDelegateInfo: @B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@ returned from @B_android#view#TouchDelegate#getTouchDelegateInfo_E@. This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Set touch delegate info if the represented view has a @B_android#view#TouchDelegate_E@. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 29", "FullName": "public void setTouchDelegateInfo (AccessibilityNodeInfo.TouchDelegateInfo delegatedInfo)"}, "setMovementGranularities(int)": {"Returns": [], "Parameters": [["int", "int: The bit mask with granularities."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the movement granularities for traversing the text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 16", "FullName": "public void setMovementGranularities (int granularities)"}, "removeAction(int)": {"Returns": [], "Parameters": [["int", "int: The action to be removed."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityNodeInfo#removeAction_E@ Removes an action that can be performed on the node. If the action was not already added to the node, calling this method has no effect. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 21 Deprecated in API level 21", "FullName": "public void removeAction (int action)"}, "getMaxTextLength()": {"Returns": [["int", "The maximum text length, or -1 for no limit."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#setMaxTextLength_E@"], "Permissions": [], "Description": "Returns the maximum text length for this node.", "history": "Added in API level 21", "FullName": "public int getMaxTextLength ()"}, "isLongClickable()": {"Returns": [["boolean", "True if the node is long clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is long clickable.", "history": "Added in API level 14", "FullName": "public boolean isLongClickable ()"}, "setViewIdResourceName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The id resource name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the fully qualified resource name of the source view's id. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 18", "FullName": "public void setViewIdResourceName (String viewIdResName)"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "The bundle."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets an optional bundle with extra data. The bundle is lazily created and never null.", "history": "Added in API level 19", "FullName": "public Bundle getExtras ()"}, "isVisibleToUser()": {"Returns": [["boolean", "Whether the node is visible to the user."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is visible to the user.", "history": "Added in API level 16", "FullName": "public boolean isVisibleToUser ()"}, "setSource(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The info source."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setSource (View source)"}, "focusSearch(int)": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The node info for the view that can take accessibility focus."]], "Parameters": [["int", "int: The direction. Can be one of: @B_android#view#View#FOCUS_DOWN_E@, @B_android#view#View#FOCUS_UP_E@, @B_android#view#View#FOCUS_LEFT_E@, @B_android#view#View#FOCUS_RIGHT_E@, @B_android#view#View#FOCUS_FORWARD_E@, @B_android#view#View#FOCUS_BACKWARD_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Searches for the nearest view in the specified direction that can take the input focus.", "history": "Added in API level 16", "FullName": "public AccessibilityNodeInfo focusSearch (int direction)"}, "setBoundsInScreen(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The node bounds."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the node bounds in screen coordinates. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setBoundsInScreen (Rect bounds)"}, "setTooltipText(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The tooltip text. This value may be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the tooltip text of this node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 28", "FullName": "public void setTooltipText (CharSequence tooltipText)"}, "getWindow()": {"Returns": [["@B_android#view#accessibility#AccessibilityWindowInfo_E@", "The window."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#accessibilityservice#AccessibilityService#getWindows_E@"], "Permissions": [], "Description": "Gets the window to which this node belongs.", "history": "Added in API level 21", "FullName": "public AccessibilityWindowInfo getWindow ()"}, "getTooltipText()": {"Returns": [["@B_java#lang#CharSequence_E@", "The tooltip text. This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the tooltip text of this node.", "history": "Added in API level 28", "FullName": "public CharSequence getTooltipText ()"}, "isFocusable()": {"Returns": [["boolean", "True if the node is focusable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is focusable.", "history": "Added in API level 14", "FullName": "public boolean isFocusable ()"}, "setLiveRegion(int)": {"Returns": [], "Parameters": [["int", "int: The live region mode, or @B_android#view#View#ACCESSIBILITY_LIVE_REGION_NONE_E@ if the view is not a live region."]], "Throws": [], "SeeAlso": ["@B_android#view#View#setAccessibilityLiveRegion_E@"], "Permissions": [], "Description": "Sets the node's live region mode. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setLiveRegion (int mode)"}, "getBoundsInScreen(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The output node bounds."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node bounds in screen coordinates.", "history": "Added in API level 14", "FullName": "public void getBoundsInScreen (Rect outBounds)"}, "getActions()": {"Returns": [["int", "The bit mask of with actions."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Use @B_android#view#accessibility#AccessibilityNodeInfo#getActionList_E@. Gets the actions that can be performed on the node.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public int getActions ()"}, "isShowingHintText()": {"Returns": [["boolean", "true if the text in the node represents a hint to the user, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether the node's text represents a hint for the user to enter text. It should only be true if the node has editable text.", "history": "Added in API level 26", "FullName": "public boolean isShowingHintText ()"}, "canOpenPopup()": {"Returns": [["boolean", "If the the node opens a popup."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if this node opens a popup or a dialog.", "history": "Added in API level 19", "FullName": "public boolean canOpenPopup ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 14", "FullName": "public int hashCode ()"}, "setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is enabled."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is enabled. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setEnabled (boolean enabled)"}, "isScreenReaderFocusable()": {"Returns": [["boolean", "true if the node is specifically marked as a focusable unit for screen readers, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#isScreenReaderFocusable_E@"], "Permissions": [], "Description": "Returns whether the node is explicitly marked as a focusable unit by a screen reader. Note that false indicates that it is not explicitly marked, not that the node is not a focusable unit. Screen readers should generally use other signals, such as @B_android#view#accessibility#AccessibilityNodeInfo#isFocusable_E@, or the presence of text in a node, to determine what should receive focus.", "history": "Added in API level 28", "FullName": "public boolean isScreenReaderFocusable ()"}, "setCanOpenPopup(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the the node opens a popup."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if this node opens a popup or a dialog. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setCanOpenPopup (boolean opensPopup)"}, "setTraversalAfter(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The previous view."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#getTraversalAfter_E@"], "Permissions": [], "Description": "Sets the view whose node is visited after this one in accessibility traversal. A screen-reader must visit the content of the other node before the content of this one. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 22", "FullName": "public void setTraversalAfter (View view)"}, "getMovementGranularities()": {"Returns": [["int", "The bit mask with granularities."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the movement granularities for traversing the text of this node.", "history": "Added in API level 16", "FullName": "public int getMovementGranularities ()"}, "isClickable()": {"Returns": [["boolean", "True if the node is clickable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is clickable.", "history": "Added in API level 14", "FullName": "public boolean isClickable ()"}, "addChild(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a virtual child which is a descendant of the given root. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is added as a child. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure.", "history": "added in API level 16", "FullName": "public void addChild (View root, int virtualDescendantId)"}, "getTextSelectionEnd()": {"Returns": [["int", "The text selection end, the cursor location if there is no selection, or -1 if there is no text selection and no cursor."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the text selection end if text is selected. If no text is selected, both this method and @B_android#view#accessibility#AccessibilityNodeInfo#getTextSelectionStart_E@ return the same value: the current location of the cursor.", "history": "Added in API level 18", "FullName": "public int getTextSelectionEnd ()"}, "getActionList()": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the actions that can be performed on the node.", "history": "Added in API level 21", "FullName": "public List<AccessibilityNodeInfo.AccessibilityAction> getActionList ()"}, "isScrollable()": {"Returns": [["boolean", "True if the node is scrollable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is scrollable.", "history": "Added in API level 14", "FullName": "public boolean isScrollable ()"}, "getLiveRegion()": {"Returns": [["int", "The live region mode, or @B_android#view#View#ACCESSIBILITY_LIVE_REGION_NONE_E@ if the view is not a live region."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#View#getAccessibilityLiveRegion_E@"], "Permissions": [], "Description": "Gets the node's live region mode. A live region is a node that contains information that is important for the user and when it changes the user should be notified. For example, in a login screen with a TextView that displays an \"incorrect password\" notification, that view should be marked as a live region with mode @B_android#view#View#ACCESSIBILITY_LIVE_REGION_POLITE_E@. It is the responsibility of the accessibility service to monitor @B_android#view#accessibility#AccessibilityEvent#TYPE_WINDOW_CONTENT_CHANGED_E@ events indicating changes to live region nodes and their children.", "history": "Added in API level 19", "FullName": "public int getLiveRegion ()"}, "setPassword(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is a password."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is a password. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setPassword (boolean password)"}, "getWindowId()": {"Returns": [["int", "The window id."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the id of the window from which the info comes from.", "history": "Added in API level 14", "FullName": "public int getWindowId ()"}, "setAccessibilityFocused(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is accessibility focused."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is accessibility focused. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 16", "FullName": "public void setAccessibilityFocused (boolean focused)"}, "getAvailableExtraData()": {"Returns": [["@B_java#util#List_E@", "An unmodifiable list of keys corresponding to extra data that can be requested."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo_E@"], "Permissions": [], "Description": "Get the extra data available for this node. Some data that is useful for some accessibility services is expensive to compute, and would place undue overhead on apps to compute all the time. That data can be requested with @B_android#view#accessibility#AccessibilityNodeInfo#refreshWithExtraData_E@.", "history": "Added in API level 26", "FullName": "public List<String> getAvailableExtraData ()"}, "setBoundsInParent(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: The node bounds."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Accessibility services should not care about these bounds. Sets the node bounds in the viewParent's coordinates. @B_android#view#accessibility#AccessibilityNodeInfo#getParent_E@ does not represent the source's viewParent. Instead it represents the result of @B_android#view#View#getParentForAccessibility_E@, which returns the closest ancestor where @B_android#view#View#isImportantForAccessibility_E@ is true. So this method is not reliable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14 Deprecated in API level 29", "FullName": "public void setBoundsInParent (Rect bounds)"}, "getTouchDelegateInfo()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@", "@B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@ or null if there are no touch delegates."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the @B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo_E@ for touch delegate behavior with the represented view. It is possible for the same node to be pointed to by several regions. Use @B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo#getRegionAt_E@ to get touch delegate target @B_android#graphics#Region_E@, and @B_android#view#accessibility#AccessibilityNodeInfo#TouchDelegateInfo#getTargetForRegion_E@ for @B_android#view#accessibility#AccessibilityNodeInfo_E@ from the given region.", "history": "Added in API level 29", "FullName": "public AccessibilityNodeInfo.TouchDelegateInfo getTouchDelegateInfo ()"}, "setTraversalBefore(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view providing the preceding node."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#getTraversalBefore_E@"], "Permissions": [], "Description": "Sets the view before whose node this one should be visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 22", "FullName": "public void setTraversalBefore (View view)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 14", "FullName": "public void writeToParcel (Parcel parcel, int flags)"}, "setTextEntryKey(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if the node is a text entry key, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets whether the node represents a text entry key that is part of a keyboard or keypad. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 29", "FullName": "public void setTextEntryKey (boolean isTextEntryKey)"}, "removeChild(android.view.View,int)": {"Returns": [["boolean", "true if the child was present"]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#addChild_E@"], "Permissions": [], "Description": "Removes a virtual child which is a descendant of the given root. If the child was not previously added to the node, calling this method has no effect.", "history": "Added in API level 21", "FullName": "public boolean removeChild (View root, int virtualDescendantId)"}, "isAccessibilityFocused()": {"Returns": [["boolean", "True if the node is accessibility focused."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is accessibility focused.", "history": "Added in API level 16", "FullName": "public boolean isAccessibilityFocused ()"}, "setContentInvalid(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: If the node content is invalid."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets if the content of this node is invalid. For example, a date is not well-formed. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setContentInvalid (boolean contentInvalid)"}, "isPassword()": {"Returns": [["boolean", "True if the node is a password."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is a password.", "history": "Added in API level 14", "FullName": "public boolean isPassword ()"}, "getParent()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The parent."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the parent. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 14", "FullName": "public AccessibilityNodeInfo getParent ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "If the info is already recycled."]], "SeeAlso": [], "Permissions": [], "Description": "Return an instance back to be reused.", "history": "Added in API level 14", "FullName": "public void recycle ()"}, "setTraversalBefore(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the node before which this one is visited during traversal. A screen-reader must visit the content of this node before the content of the one it precedes. The successor is a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the successor. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 22", "FullName": "public void setTraversalBefore (View root, int virtualDescendantId)"}, "setClassName(java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: The class name."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the class this node comes from. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setClassName (CharSequence className)"}, "getViewIdResourceName()": {"Returns": [["@B_java#lang#String_E@", "The id resource name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the fully qualified resource name of the source view's id. @B_android#view#accessibility#AccessibilityNodeInfo_E@ the client has to set the @B_android#accessibilityservice#AccessibilityServiceInfo#FLAG_REPORT_VIEW_IDS_E@ flag when configuring his @B_android#accessibilityservice#AccessibilityService_E@.", "history": "Added in API level 18", "FullName": "public String getViewIdResourceName ()"}, "performAction(int,android.os.Bundle)": {"Returns": [["boolean", "True if the action was performed."]], "Parameters": [["int", "int: The action to perform."], ["@B_android#os#Bundle_E@", "Bundle: A bundle with additional arguments."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called outside of an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Performs an action on the node. @B_android#accessibilityservice#AccessibilityService_E@.", "history": "Added in API level 16", "FullName": "public boolean performAction (int action, Bundle arguments)"}, "setLabeledBy(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant labels this node's source."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view which serves as the label of the view represented by this info for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the label. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 17", "FullName": "public void setLabeledBy (View root, int virtualDescendantId)"}, "removeChild(android.view.View, int)": {"Returns": [["boolean", "true if the child was present"]], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual child."]], "Throws": [], "SeeAlso": ["@B_android#view#accessibility#AccessibilityNodeInfo#addChild_E@"], "Permissions": [], "Description": "Removes a virtual child which is a descendant of the given root. If the child was not previously added to the node, calling this method has no effect.", "history": "added in API level 21", "FullName": "public boolean removeChild (View root, int virtualDescendantId)"}, "isChecked()": {"Returns": [["boolean", "True if the node is checked."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is checked.", "history": "Added in API level 14", "FullName": "public boolean isChecked ()"}, "isCheckable()": {"Returns": [["boolean", "True if the node is checkable."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets whether this node is checkable.", "history": "Added in API level 14", "FullName": "public boolean isCheckable ()"}, "isEditable()": {"Returns": [["boolean", "True if the node is editable, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node is editable.", "history": "Added in API level 18", "FullName": "public boolean isEditable ()"}, "refreshWithExtraData(java.lang.String,android.os.Bundle)": {"Returns": [["boolean", "true if the refresh succeeded. false if the @B_android#view#View_E@ represented by this node is no longer in the view tree (and thus this node is obsolete and should be recycled)."]], "Parameters": [["@B_java#lang#String_E@", "String: The extra data requested. Data that must be requested with this mechanism is generally expensive to retrieve, so should only be requested when needed. See @B_android#view#accessibility#AccessibilityNodeInfo#EXTRA_DATA_TEXT_CHARACTER_LOCATION_KEY_E@ and @B_android#view#accessibility#AccessibilityNodeInfo#getAvailableExtraData_E@."], ["@B_android#os#Bundle_E@", "Bundle: A bundle of arguments for the request. These depend on the particular request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Refreshes this info with the latest state of the view it represents, and request new data be added by the View.", "history": "Added in API level 26", "FullName": "public boolean refreshWithExtraData (String extraDataKey, Bundle args)"}, "getRangeInfo()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo#RangeInfo_E@", "The range."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the range info if this node is a range.", "history": "Added in API level 19", "FullName": "public AccessibilityNodeInfo.RangeInfo getRangeInfo ()"}, "isTextEntryKey()": {"Returns": [["boolean", "true if the node is a text entry key., false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether node represents a text entry key that is part of a keyboard or keypad.", "history": "Added in API level 29", "FullName": "public boolean isTextEntryKey ()"}, "setLabelFor(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant serves as a label."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view for which the view represented by this info serves as a label for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the labeled. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 17", "FullName": "public void setLabelFor (View root, int virtualDescendantId)"}, "getDrawingOrder()": {"Returns": [["int", "The drawing position of the view corresponding to this node relative to its siblings."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the drawing order of the view corresponding it this node. Drawing order is determined only within the node's parent, so this index is only relative to its siblings. In some cases, the drawing order is essentially simultaneous, so it is possible for two siblings to return the same value. It is also possible that values will be skipped.", "history": "Added in API level 24", "FullName": "public int getDrawingOrder ()"}, "setFocused(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is focused."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets whether this node is focused. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setFocused (boolean focused)"}, "addAction(int)": {"Returns": [], "Parameters": [["int", "int: The action."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."], ["@B_java#lang#IllegalArgumentException_E@", "If the argument is not one of the standard actions."]], "SeeAlso": [], "Permissions": [], "Description": "This has been deprecated for @B_android#view#accessibility#AccessibilityNodeInfo#addAction_E@ Adds an action that can be performed on the node. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14 Deprecated in API level 21", "FullName": "public void addAction (int action)"}, "getLabelFor()": {"Returns": [["@B_android#view#accessibility#AccessibilityNodeInfo_E@", "The labeled info."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the node info for which the view represented by this info serves as a label for accessibility purposes. @B_android#view#accessibility#AccessibilityNodeInfo#recycle_E@ to avoid creating of multiple instances.", "history": "Added in API level 17", "FullName": "public AccessibilityNodeInfo getLabelFor ()"}, "setParent(android.view.View, int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root of the virtual subtree."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the parent to be a virtual descendant of the given root. If virtualDescendantId equals to @B_android#view#View#NO_ID_E@ the root is set as the parent. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report them selves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "added in API level 16", "FullName": "public void setParent (View root, int virtualDescendantId)"}, "getPackageName()": {"Returns": [["@B_java#lang#CharSequence_E@", "The package name."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the package this node comes from.", "history": "Added in API level 14", "FullName": "public CharSequence getPackageName ()"}, "setInputType(int)": {"Returns": [], "Parameters": [["int", "int: The input type."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the input type of the source as defined by @B_android#text#InputType_E@. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 19", "FullName": "public void setInputType (int inputType)"}, "isDismissable()": {"Returns": [["boolean", "If the node can be dismissed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets if the node can be dismissed.", "history": "Added in API level 19", "FullName": "public boolean isDismissable ()"}, "setScrollable(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if the node is scrollable, false otherwise."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "If called from an AccessibilityService."]], "SeeAlso": [], "Permissions": [], "Description": "Sets if the node is scrollable. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 14", "FullName": "public void setScrollable (boolean scrollable)"}, "setLabelFor(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The view for which this info serves as a label."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view for which the view represented by this info serves as a label for accessibility purposes.", "history": "Added in API level 17", "FullName": "public void setLabelFor (View labeled)"}, "setLabelFor(android.view.View,int)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View: The root whose virtual descendant serves as a label."], ["int", "int: The id of the virtual descendant."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the view for which the view represented by this info serves as a label for accessibility purposes. If virtualDescendantId is @B_android#view#View#NO_ID_E@ the root is set as the labeled. A virtual descendant is an imaginary View that is reported as a part of the view hierarchy for accessibility purposes. This enables custom views that draw complex content to report themselves as a tree of virtual views, thus conveying their logical structure. @B_android#accessibilityservice#AccessibilityService_E@. This class is made immutable before being delivered to an AccessibilityService.", "history": "Added in API level 17", "FullName": "public void setLabelFor (View root, int virtualDescendantId)"}}, "Inheritance": [], "ClassName": "android.view.accessibility.AccessibilityNodeInfo", "ClassDesc": "This class represents a node of the window content as well as actions that can be requested from its source. From the point of view of an @B_android#accessibilityservice#AccessibilityService_E@ a window's content is presented as a tree of accessibility node infos, which may or may not map one-to-one to the view hierarchy. In other words, a custom view is free to report itself as a tree of accessibility node info. Once an accessibility node info is delivered to an accessibility service it is made immutable and calling a state mutation method generates an error. Please refer to @B_android#accessibilityservice#AccessibilityService_E@ for details about how to obtain a handle to window content as a tree of accessibility node info as well as details about the security model."}