{"Functions": {"writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "getSpanTypeId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a special type identifier for this span class.", "history": "Added in API level 3", "FullName": "public int getSpanTypeId ()"}, "StyleSpan(android.os.Parcel)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: the parcel This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#StyleSpan_E@ from a parcel.", "history": "Added in API level 3", "FullName": "public StyleSpan (Parcel src)"}, "StyleSpan(int)": {"Returns": [], "Parameters": [["int", "int: An integer constant describing the style for this span. Examples include bold, italic, and normal. Values are constants defined in @B_android#graphics#Typeface_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a @B_android#text#style#StyleSpan_E@ from a style.", "history": "Added in API level 1", "FullName": "public StyleSpan (int style)"}, "updateDrawState(android.text.TextPaint)": {"Returns": [], "Parameters": [["@B_android#text#TextPaint_E@", "TextPaint no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void updateDrawState (TextPaint ds)"}, "writeToParcel(android.os.Parcel,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel: The Parcel in which the object should be written."], ["int", "int: Additional flags about how the object should be written. May be 0 or @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@. Value is either 0 or a combination of @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@, and android.os.Parcelable.PARCELABLE_ELIDE_DUPLICATES"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten this object in to a Parcel.", "history": "Added in API level 3", "FullName": "public void writeToParcel (Parcel dest, int flags)"}, "updateMeasureState(android.text.TextPaint)": {"Returns": [], "Parameters": [["@B_android#text#TextPaint_E@", "TextPaint: the paint used for drawing the text This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Classes that extend MetricAffectingSpan implement this method to update the text formatting in a way that can change the width or height of characters.", "history": "Added in API level 1", "FullName": "public void updateMeasureState (TextPaint paint)"}, "describeContents()": {"Returns": [["int", "a bitmask indicating the set of special object types marshaled by this Parcelable object instance. Value is either 0 or @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describe the kinds of special objects contained in this Parcelable instance's marshaled representation. For example, if the object will include a file descriptor in the output of @B_android#os#Parcelable#writeToParcel_E@, the return value of this method must include the @B_android#os#Parcelable#CONTENTS_FILE_DESCRIPTOR_E@ bit.", "history": "Added in API level 3", "FullName": "public int describeContents ()"}, "getStyle()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the style constant defined in @B_android#graphics#Typeface_E@.", "history": "Added in API level 1", "FullName": "public int getStyle ()"}}, "Inheritance": ["@B_android#text#style#CharacterStyle_E@", "@B_android#text#style#MetricAffectingSpan_E@"], "ClassName": "android.text.style.StyleSpan", "ClassDesc": "Span that allows setting the style of the text it's attached to. Possible styles are: @B_android#graphics#Typeface#NORMAL_E@, @B_android#graphics#Typeface#BOLD_E@, @B_android#graphics#Typeface#ITALIC_E@ and @B_android#graphics#Typeface#BOLD_ITALIC_E@. Note that styles are cumulative -- if both bold and italic are set in separate spans, or if the base style is bold and a span calls for italic, you get bold italic. You can't turn off a style from the base style. For example, the StyleSpan can be used like this:"}