{"Functions": {"setShareIntent(android.content.Intent)": {"Returns": [], "Parameters": [["@B_android#content#Intent_E@", "Intent: The share intent."]], "Throws": [], "SeeAlso": ["@B_android#content#Intent_E@"], "Permissions": [], "Description": "Sets an intent with information about the share action. Here is a sample for constructing a share intent:", "history": "added in version 24.2.0", "FullName": "void setShareIntent (Intent shareIntent)"}, "ShareActionProvider(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: Context for accessing resources."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new instance.", "history": "added in version 24.2.0", "FullName": "ShareActionProvider (Context context)"}, "onCreateActionView()": {"Returns": [["@B_android#view#View_E@", "A new action view."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Factory method for creating new action views.", "history": "added in version 24.2.0", "FullName": "View onCreateActionView ()"}, "hasSubMenu()": {"Returns": [["boolean", "true if the item backed by this provider should have an associated submenu"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines if this ActionProvider has a submenu associated with it. Associated submenus will be shown when an action view is not. This provider instance will receive a call to @B_android#support#v4#view#ActionProvider#onPrepareSubMenu_E@ after the call to @B_android#support#v4#view#ActionProvider#onPerformDefaultAction_E@ and before a submenu is displayed to the user.", "history": "added in version 24.2.0", "FullName": "boolean hasSubMenu ()"}, "setShareHistoryFileName(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The share history file name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the file name of a file for persisting the share history which history will be used for ordering share targets. This file will be used for all view created by @B_android#support#v7#widget#ShareActionProvider#onCreateActionView_E@. Defaults to @B_android#support#v7#widget#ShareActionProvider#DEFAULT_SHARE_HISTORY_FILE_NAME_E@. Set to null if share history should not be persisted between sessions. @B_android#support#v7#widget#ShareActionProvider#onCreateActionView_E@ after setting the file name will be backed by the provided file. Therefore, if you want to use different history files for sharing specific types of content, every time you change the history file with @B_android#support#v7#widget#ShareActionProvider#setShareHistoryFileName_E@ you must call @B_android#support#v7#app#AppCompatActivity#supportInvalidateOptionsMenu_E@ to recreate the action view. You should @B_android#support#v7#app#AppCompatActivity#supportInvalidateOptionsMenu_E@ from @B_android#app#Activity#onCreateOptionsMenu_E@.", "history": "added in version 24.2.0", "FullName": "void setShareHistoryFileName (String shareHistoryFile)"}, "onPrepareSubMenu(android.view.SubMenu)": {"Returns": [], "Parameters": [["@B_android#view#SubMenu_E@", "SubMenu: Submenu that will be displayed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to prepare an associated submenu for the menu item backed by this ActionProvider. if @B_android#support#v4#view#ActionProvider#hasSubMenu_E@ returns true, this method will be called when the menu item is selected to prepare the submenu for presentation to the user. Apps may use this to create or alter submenu content right before display.", "history": "added in version 24.2.0", "FullName": "void onPrepareSubMenu (SubMenu subMenu)"}}, "Inheritance": ["java.lang.Object", "@B_android#support#v4#view#ActionProvider_E@"], "ClassName": "android.support.v7.widget.ShareActionProvider", "ClassDesc": "Provides a share action, which is suitable for an activity's app bar. Creates views that enable data sharing. If the provider appears in the overflow menu, it creates a submenu with the appropriate sharing actions. To add a \"share\" action to your activity, put a ShareActionProvider in the app bar's menu resource. For example: You do not need to specify an icon, since the ShareActionProvider widget takes care of its own appearance and behavior. However, you do need to specify a title with android:title, in case the action ends up in the overflow menu. Next, set up the intent that contains the content your activity is able to share. You should create this intent in your handler for https:##developer#android#com@B_android#app#Activity#onCreateOptionsMenu_E@, and update it every time the shareable content changes. To set up the intent: The share action provider retains a ranking for each share target, based on how often the user chooses each one. The more often a user chooses a target, the higher its rank; the most-commonly used target appears in the app bar as the default target. By default, the target ranking information is stored in a private file with the name specified by @B_android#support#v7#widget#ShareActionProvider#DEFAULT_SHARE_HISTORY_FILE_NAME_E@. Ordinarily, the share action provider stores all the history in this single file. However, using a single set of rankings may not make sense if the share action provider is used for different kinds of content. For example, if the activity sometimes shares images and sometimes shares contacts, you would want to maintain two different sets of rankings. To set the history file, call @B_android#support#v7#widget#ShareActionProvider#setShareHistoryFileName_E@ and pass the name of an XML file. The file you specify is used until the next time you call @B_android#support#v7#widget#ShareActionProvider#setShareHistoryFileName_E@."}