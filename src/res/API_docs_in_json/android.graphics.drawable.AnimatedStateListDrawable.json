{"Functions": {"AnimatedStateListDrawable()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public AnimatedStateListDrawable ()"}, "isStateful()": {"Returns": [["boolean", "True if this drawable changes its appearance based on state, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this drawable will change its appearance based on state. Clients can use this to determine whether it is necessary to calculate their state and call setState.", "history": "Added in API level 21", "FullName": "public boolean isStateful ()"}, "onStateChange(int[])": {"Returns": [["boolean", "Returns true if the state change has caused the appearance of the Drawable to change (that is, it needs to be drawn), else false if it looks the same and there is no need to redraw it since its last state."]], "Parameters": [["int[]", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Override this in your subclass to change appearance if you recognize the specified state.", "history": "Added in API level 21", "FullName": "protected boolean onStateChange (int[] stateSet)"}, "addState(int[],android.graphics.drawable.Drawable,int)": {"Returns": [], "Parameters": [["int[]", "int: An array of resource IDs to associate with the keyframe This value must never be null."], ["@B_android#graphics#drawable#Drawable_E@", "Drawable: The drawable to show when in the specified state, may not be null This value must never be null."], ["int", "int: The unique identifier for the keyframe"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Add a new drawable to the set of keyframes.", "history": "Added in API level 21", "FullName": "public void addState (int[] stateSet, Drawable drawable, int id)"}, "setVisible(boolean,boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "Added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "jumpToCurrentState()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If this Drawable does transition animations between states, ask that it immediately jump to the current state and skip any active animations.", "history": "Added in API level 21", "FullName": "public void jumpToCurrentState ()"}, "applyTheme(android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Applies the specified theme to this Drawable and its children.", "history": "Added in API level 21", "FullName": "public void applyTheme (Resources.Theme theme)"}, "setConstantState(android.graphics.drawable.DrawableContainer.DrawableContainerState)": {"Returns": [], "Parameters": [["@B_android#graphics#drawable#DrawableContainer#DrawableContainerState_E@", "DrawableContainer.DrawableContainerState: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "protected void setConstantState (DrawableContainer.DrawableContainerState state)"}, "addTransition(int, int, T, boolean)": {"Returns": [], "Parameters": [["int", "int: Unique identifier of the starting keyframe"], ["int", "int: Unique identifier of the ending keyframe"], ["T", "T: An @B_android#graphics#drawable#Animatable_E@ drawable to use as a transition, may not be null"], ["boolean", "boolean: Whether the transition can be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a new transition between keyframes.", "history": "added in API level 21", "FullName": "public void addTransition (int fromId, int toId, T transition, boolean reversible)"}, "mutate()": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "This drawable. This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Make this drawable mutable. This operation cannot be reversed. A mutable drawable is guaranteed to not share its state with any other drawable. This is especially useful when you need to modify properties of drawables loaded from resources. By default, all drawables instances loaded from the same resource share a common state; if you modify the state of one instance, all the other instances will receive the same modification. Calling this method on a mutable Drawable will have no effect.", "history": "Added in API level 21", "FullName": "public Drawable mutate ()"}, "setVisible(boolean, boolean)": {"Returns": [["boolean", "boolean Returns true if the new visibility is different than its previous state."]], "Parameters": [["boolean", "boolean: Set to true if visible, false if not."], ["boolean", "boolean: You can supply true here to force the drawable to behave as if it has just become visible, even if it had last been set visible. Used for example to force animations to restart."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set whether this Drawable is visible. This generally does not impact the Drawable's behavior, but is a hint that can be used by some Drawables, for example, to decide whether run animations.", "history": "added in API level 21", "FullName": "public boolean setVisible (boolean visible, boolean restart)"}, "addTransition(int,int,T,boolean)": {"Returns": [], "Parameters": [["int", "int: Unique identifier of the starting keyframe"], ["int", "int: Unique identifier of the ending keyframe"], ["T", "T: An @B_android#graphics#drawable#Animatable_E@ drawable to use as a transition, may not be null This value must never be null."], ["boolean", "boolean: Whether the transition can be reversed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Adds a new transition between keyframes.", "history": "Added in API level 21", "FullName": "public void addTransition (int fromId, int toId, T transition, boolean reversible)"}, "inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources.Theme)": {"Returns": [], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: This value must never be null."], ["@B_org#xmlpull#v1#XmlPullParser_E@", "XmlPullParser: This value must never be null."], ["@B_android#util#AttributeSet_E@", "AttributeSet: This value must never be null."], ["@B_android#content#res#Resources#Theme_E@", "Resources.Theme: This value may be null."]], "Throws": [["@B_java#io#IOException_E@", ""], ["@B_org#xmlpull#v1#XmlPullParserException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Inflate this Drawable from an XML resource optionally styled by a theme. This can't be called more than once for each Drawable. Note that framework may have called this once to create the Drawable instance from XML resource.", "history": "Added in API level 21", "FullName": "public void inflate (Resources r, XmlPullParser parser, AttributeSet attrs, Resources.Theme theme)"}}, "Inheritance": ["@B_android#graphics#drawable#Drawable_E@", "@B_android#graphics#drawable#DrawableContainer_E@", "@B_android#graphics#drawable#StateListDrawable_E@"], "ClassName": "android.graphics.drawable.AnimatedStateListDrawable", "ClassDesc": "Drawable containing a set of Drawable keyframes where the currently displayed keyframe is chosen based on the current state set. Animations between keyframes may optionally be defined using transition elements. This drawable can be defined in an XML file with the <animated-selector> element. Each keyframe Drawable is defined in a nested <item> element. Transitions are defined in a nested <transition> element."}