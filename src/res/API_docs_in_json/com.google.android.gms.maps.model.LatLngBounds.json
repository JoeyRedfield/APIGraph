{"Functions": {"toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "LatLngBounds(com.google.android.gms.maps.model.LatLng, com.google.android.gms.maps.model.LatLng)": {"Returns": [], "Parameters": [["@B_com#google#android#gms#maps#model#LatLng_E@", "southwest corner"], ["@B_com#google#android#gms#maps#model#LatLng_E@", "northeast corner"]], "Throws": [["IllegalArgumentException", "if the latitude of the northeast corner is below the latitude of the southwest corner."]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new bounds based on a southwest and a northeast corner. The bounds conceptually includes all points where: the latitude is in the range [northeast.latitude, southwest.latitude]; the longitude is in the range [southwest.longtitude, northeast.longitude] if southwest.longtitude \u2264 northeast.longitude; and the longitude is in the range [southwest.longitude, 180) \u222a [-180, northeast.longitude] if southwest.longtitude > northeast.longitude.", "history": "", "FullName": "public LatLngBounds (LatLng southwest, LatLng northeast)"}, "including(com.google.android.gms.maps.model.LatLng)": {"Returns": [["", "A new @B_com#google#android#gms#maps#model#LatLngBounds_E@ that contains this and the extra point."]], "Parameters": [["@B_com#google#android#gms#maps#model#LatLng_E@", "a @B_com#google#android#gms#maps#model#LatLng_E@ to be included in the new bounds"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a new @B_com#google#android#gms#maps#model#LatLngBounds_E@ that extends this LatLngBounds to include the given @B_com#google#android#gms#maps#model#LatLng_E@. This will return the smallest LatLngBounds that contains both this and the extra point. In particular, it will consider extending the bounds both in the eastward and westward directions (one of which may cross the antimeridian) and choose the smaller of the two. In the case that both directions result in a LatLngBounds of the same size, this will extend it in the eastward direction.", "history": "", "FullName": "public LatLngBounds including (LatLng point)"}, "builder()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new builder.", "history": "", "FullName": "public static LatLngBounds.Builder builder ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object o)"}, "getCenter()": {"Returns": [["", "A @B_com#google#android#gms#maps#model#LatLng_E@ that is the center of the LatLngBounds."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the center of this LatLngBounds. The center is simply the average of the coordinates (taking into account if it crosses the antimeridian). This is approximately the geographical center (it would be exact if the Earth were a perfect sphere). It will not necessarily be the center of the rectangle as drawn on the map due to the Mercator projection.", "history": "", "FullName": "public LatLng getCenter ()"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "contains(com.google.android.gms.maps.model.LatLng)": {"Returns": [["", "true if this contains the given point; false if not."]], "Parameters": [["@B_com#google#android#gms#maps#model#LatLng_E@", "the @B_com#google#android#gms#maps#model#LatLng_E@ to test"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this contains the given @B_com#google#android#gms#maps#model#LatLng_E@.", "history": "", "FullName": "public boolean contains (LatLng point)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.maps.model.LatLngBounds", "ClassDesc": "An immutable class representing a latitude/longitude aligned rectangle."}