{"Functions": {"readList(java.util.List, java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables. If it is null, the default class loader is used.", "history": "added in API level 1", "FullName": "public void readList (List outVal, ClassLoader loader)"}, "writeParcelableArray(T[],int)": {"Returns": [], "Parameters": [["T[]", "T: The array of objects to be written. This value may be null."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedArray_E@"], "Permissions": [], "Description": "Write a heterogeneous array of Parcelable objects into the Parcel. Each object in the array is written along with its class name, so that the correct class can later be instantiated. As a result, this has significantly more overhead than @B_android#os#Parcel#writeTypedArray_E@, but will correctly handle an array containing more than one type of object.", "history": "Added in API level 1", "FullName": "public void writeParcelableArray (T[] value, int parcelableFlags)"}, "readArray(java.lang.ClassLoader)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Object array from the parcel at the current dataPosition(). Returns null if the previously written array was null. The given class loader will be used to load any enclosed Parcelables.", "history": "Added in API level 1", "FullName": "public Object[] readArray (ClassLoader loader)"}, "readException(int, java.lang.String)": {"Returns": [], "Parameters": [["int", "int: Used to determine which exception class to throw."], ["@B_java#lang#String_E@", "String: The exception message."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Throw an exception with the given message. Not intended for use outside the Parcel class.", "history": "added in API level 1", "FullName": "public void readException (int code, String msg)"}, "writeString(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a string value into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeString (String val)"}, "readMap(java.util.Map, java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map no parameter comment"], ["@B_java#lang#ClassLoader_E@", "ClassLoader no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#os#Parcel#readBundle_E@ instead (whose data must have been written with @B_android#os#Parcel#writeBundle_E@. Read into an existing Map object from the parcel at the current dataPosition().", "history": "added in API level 1", "FullName": "public void readMap (Map outVal, ClassLoader loader)"}, "writeSizeF(android.util.SizeF)": {"Returns": [], "Parameters": [["@B_android#util#SizeF_E@", "SizeF: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a SizeF into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 21", "FullName": "public void writeSizeF (SizeF val)"}, "readSize()": {"Returns": [["@B_android#util#Size_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a Size from the parcel at the current dataPosition().", "history": "Added in API level 21", "FullName": "public Size readSize ()"}, "readBinderList(java.util.List<android.os.IBinder>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeBinderList_E@"], "Permissions": [], "Description": "Read into the given List items IBinder objects that were written with @B_android#os#Parcel#writeBinderList_E@ at the current dataPosition().", "history": "Added in API level 1", "FullName": "public void readBinderList (List<IBinder> list)"}, "writeTypedObject(T,int)": {"Returns": [], "Parameters": [["T", "T: The Parcelable object to be written. This value may be null."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#readTypedObject_E@"], "Permissions": [], "Description": "Flatten the Parcelable object into the parcel.", "history": "Added in API level 23", "FullName": "public void writeTypedObject (T val, int parcelableFlags)"}, "readSerializable()": {"Returns": [["@B_java#io#Serializable_E@", "the Serializable object, or null if the Serializable name wasn't found in the parcel."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Serializable object from the parcel.", "history": "Added in API level 1", "FullName": "public Serializable readSerializable ()"}, "readBundle()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Bundle object from the parcel at the current dataPosition(). Returns null if the previously written Bundle object was null.", "history": "Added in API level 1", "FullName": "public Bundle readBundle ()"}, "writeParcelableList(java.util.List<T>,int)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value may be null."], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#readParcelableList_E@"], "Permissions": [], "Description": "Flatten a List containing arbitrary Parcelable objects into this parcel at the current position. They can later be retrieved using @B_android#os#Parcel#readParcelableList_E@ if required.", "history": "Added in API level 29", "FullName": "public void writeParcelableList (List<T> val, int flags)"}, "readBoolean()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a boolean value from the parcel at the current dataPosition().", "history": "Added in API level 29", "FullName": "public boolean readBoolean ()"}, "writeStrongInterface(android.os.IInterface)": {"Returns": [], "Parameters": [["@B_android#os#IInterface_E@", "IInterface no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeStrongInterface (IInterface val)"}, "writeInt(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write an integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeInt (int val)"}, "writeException(java.lang.Exception)": {"Returns": [], "Parameters": [["@B_java#lang#Exception_E@", "Exception: The Exception to be written. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeNoException_E@", "@B_android#os#Parcel#readException_E@"], "Permissions": [], "Description": "Special function for writing an exception result at the header of a parcel, to be used when returning an exception from a transaction. Note that this currently only supports a few exception types; any other exception will be re-thrown by this function as a RuntimeException (to be caught by the system's last-resort exception handling when dispatching a transaction). The supported exception types are: @B_android#os#BadParcelableException_E@ @B_java#lang#IllegalArgumentException_E@ @B_java#lang#IllegalStateException_E@ @B_java#lang#NullPointerException_E@ @B_java#lang#SecurityException_E@ @B_java#lang#UnsupportedOperationException_E@ @B_android#os#NetworkOnMainThreadException_E@", "history": "Added in API level 1", "FullName": "public void writeException (Exception e)"}, "readMap(java.util.Map,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: This value must never be null."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#os#Parcel#readBundle_E@ instead (whose data must have been written with @B_android#os#Parcel#writeBundle_E@. Read into an existing Map object from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public void readMap (Map outVal, ClassLoader loader)"}, "writeTypedArray(T[], int)": {"Returns": [], "Parameters": [["T[]", "T: The array of objects to be written."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#readTypedArray_E@", "@B_android#os#Parcel#writeParcelableArray_E@", "@B_android#os#Parcelable#Creator_E@"], "Permissions": [], "Description": "Flatten a homogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the array must be one that implements Parcelable. Unlike the @B_android#os#Parcel#writeParcelableArray_E@ method, however, only the raw data of the objects is written and not their type, so you must use @B_android#os#Parcel#readTypedArray_E@ with the correct corresponding @B_android#os#Parcelable#Creator_E@ implementation to unmarshall them.", "history": "added in API level 1", "FullName": "public void writeTypedArray (T[] val, int parcelableFlags)"}, "writeCharArray(char[])": {"Returns": [], "Parameters": [["char[]", "char: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeCharArray (char[] val)"}, "writeDouble(double)": {"Returns": [], "Parameters": [["double", "double no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a double precision floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeDouble (double val)"}, "writeList(java.util.List)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a List into the parcel at the current dataPosition(), growing dataCapacity() if needed. The List values are written using @B_android#os#Parcel#writeValue_E@ and must follow the specification there.", "history": "Added in API level 1", "FullName": "public void writeList (List val)"}, "writeParcelable(android.os.Parcelable, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable object to be written."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten the name of the class of the Parcelable and its contents into the parcel.", "history": "added in API level 1", "FullName": "public void writeParcelable (Parcelable p, int parcelableFlags)"}, "writeByteArray(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: Bytes to place into the parcel. This value may be null."], ["int", "int: Index of first byte to be written."], ["int", "int: Number of bytes to write."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a byte array into the parcel at the current @B_android#os#Parcel#dataPosition_E@, growing @B_android#os#Parcel#dataCapacity_E@ if needed.", "history": "Added in API level 1", "FullName": "public void writeByteArray (byte[] b, int offset, int len)"}, "createStringArrayList()": {"Returns": [["@B_java#util#ArrayList_E@", "A newly created ArrayList containing strings with the same data as those that were previously written."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeStringList_E@"], "Permissions": [], "Description": "Read and return a new ArrayList containing String objects from the parcel that was written with @B_android#os#Parcel#writeStringList_E@ at the current dataPosition(). Returns null if the previously written list object was null.", "history": "Added in API level 1", "FullName": "public ArrayList<String> createStringArrayList ()"}, "obtain(int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected static final Parcel obtain (int obj)"}, "createTypedArrayList(android.os.Parcelable.Creator<T>)": {"Returns": [["@B_java#util#ArrayList_E@", "A newly created ArrayList containing objects with the same data as those that were previously written."]], "Parameters": [["@B_android#os#Parcelable#Creator_E@", "Creator: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedList_E@"], "Permissions": [], "Description": "Read and return a new ArrayList containing a particular object type from the parcel that was written with @B_android#os#Parcel#writeTypedList_E@ at the current dataPosition(). Returns null if the previously written list object was null. The list must have previously been written via @B_android#os#Parcel#writeTypedList_E@ with the same object type.", "history": "Added in API level 1", "FullName": "public ArrayList<T> createTypedArrayList (Creator<T> c)"}, "hasFileDescriptors()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Report whether the parcel contains any marshalled file descriptors.", "history": "Added in API level 1", "FullName": "public boolean hasFileDescriptors ()"}, "readStringList(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeStringList_E@"], "Permissions": [], "Description": "Read into the given List items String objects that were written with @B_android#os#Parcel#writeStringList_E@ at the current dataPosition().", "history": "Added in API level 1", "FullName": "public void readStringList (List<String> list)"}, "readLong()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a long integer value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public long readLong ()"}, "setDataCapacity(int)": {"Returns": [], "Parameters": [["int", "int: The new capacity of the parcel, in bytes. Can not be less than @B_android#os#Parcel#dataSize_E@ -- that is, you can not drop existing data with this method."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the capacity (current available space) of the parcel.", "history": "Added in API level 1", "FullName": "public void setDataCapacity (int size)"}, "readParcelableList(java.util.List<T>,java.lang.ClassLoader)": {"Returns": [["@B_java#util#List_E@", "no returns description in source"]], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeParcelableList_E@"], "Permissions": [], "Description": "Read the list of Parcelable objects at the current data position into the given list. The contents of the list are replaced. If the serialized list was null, list is cleared.", "history": "Added in API level 29", "FullName": "public List<T> readParcelableList (List<T> list, ClassLoader cl)"}, "writeFloatArray(float[])": {"Returns": [], "Parameters": [["float[]", "float: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeFloatArray (float[] val)"}, "dataAvail()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of data remaining to be read from the parcel. That is, @B_android#os#Parcel#dataSize_E@-@B_android#os#Parcel#dataPosition_E@.", "history": "Added in API level 1", "FullName": "public int dataAvail ()"}, "readLongArray(long[])": {"Returns": [], "Parameters": [["long[]", "long: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readLongArray (long[] val)"}, "createStringArray()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public String[] createStringArray ()"}, "writeByteArray(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: Bytes to place into the parcel. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a byte array into the parcel at the current @B_android#os#Parcel#dataPosition_E@, growing @B_android#os#Parcel#dataCapacity_E@ if needed.", "history": "Added in API level 1", "FullName": "public void writeByteArray (byte[] b)"}, "readPersistableBundle()": {"Returns": [["@B_android#os#PersistableBundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Bundle object from the parcel at the current dataPosition(). Returns null if the previously written Bundle object was null.", "history": "Added in API level 21", "FullName": "public PersistableBundle readPersistableBundle ()"}, "unmarshall(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the bytes in data to be the raw bytes of this Parcel.", "history": "added in API level 1", "FullName": "public void unmarshall (byte[] data, int offset, int length)"}, "writeLong(long)": {"Returns": [], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a long integer value into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeLong (long val)"}, "createIntArray()": {"Returns": [["int[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int[] createIntArray ()"}, "readSparseArray(java.lang.ClassLoader)": {"Returns": [["@B_android#util#SparseArray_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new SparseArray object from the parcel at the current dataPosition(). Returns null if the previously written list object was null. The given class loader will be used to load any enclosed Parcelables.", "history": "Added in API level 1", "FullName": "public SparseArray<T> readSparseArray (ClassLoader loader)"}, "readFileDescriptor()": {"Returns": [["@B_android#os#ParcelFileDescriptor_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a FileDescriptor from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public ParcelFileDescriptor readFileDescriptor ()"}, "readString()": {"Returns": [["@B_java#lang#String_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a string value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public String readString ()"}, "createLongArray()": {"Returns": [["long[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public long[] createLongArray ()"}, "marshall()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw bytes of the parcel. The data you retrieve here", "history": "Added in API level 1", "FullName": "public byte[] marshall ()"}, "readIntArray(int[])": {"Returns": [], "Parameters": [["int[]", "int: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readIntArray (int[] val)"}, "writeTypedSparseArray(android.util.SparseArray<T>,int)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The list of objects to be written. This value may be null."], ["int", "int: The parcelable flags to use."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#createTypedSparseArray_E@", "@B_android#os#Parcelable_E@"], "Permissions": [], "Description": "Flatten a @B_android#util#SparseArray_E@ containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the array must be one that implements Parcelable. Unlike the generic @B_android#os#Parcel#writeSparseArray_E@ method, however, only the raw data of the objects is written and not their type, so you must use the corresponding @B_android#os#Parcel#createTypedSparseArray_E@.", "history": "Added in API level 29", "FullName": "public void writeTypedSparseArray (SparseArray<T> val, int parcelableFlags)"}, "createTypedArray(android.os.Parcelable.Creator<T>)": {"Returns": [["T[]", "A newly created array containing objects with the same data as those that were previously written."]], "Parameters": [["@B_android#os#Parcelable#Creator_E@", "Creator: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedArray_E@"], "Permissions": [], "Description": "Read and return a new array containing a particular object type from the parcel at the current dataPosition(). Returns null if the previously written array was null. The array must have previously been written via @B_android#os#Parcel#writeTypedArray_E@ with the same object type.", "history": "Added in API level 1", "FullName": "public T[] createTypedArray (Creator<T> c)"}, "readParcelable(java.lang.ClassLoader)": {"Returns": [["T", "Returns the newly created Parcelable, or null if a null object has been written."]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: A ClassLoader from which to instantiate the Parcelable object, or null for the default class loader. This value may be null."]], "Throws": [["@B_android#os#BadParcelableException_E@", "Throws BadParcelableException if there was an error trying to instantiate the Parcelable."]], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Parcelable from the parcel. The given class loader will be used to load any enclosed Parcelables. If it is null, the default class loader will be used.", "history": "Added in API level 1", "FullName": "public T readParcelable (ClassLoader loader)"}, "readTypedList(java.util.List<T>,android.os.Parcelable.Creator<T>)": {"Returns": [["void", "A newly created ArrayList containing objects with the same data as those that were previously written."]], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."], ["@B_android#os#Parcelable#Creator_E@", "Creator: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedList_E@"], "Permissions": [], "Description": "Read into the given List items containing a particular object type that were written with @B_android#os#Parcel#writeTypedList_E@ at the current dataPosition(). The list must have previously been written via @B_android#os#Parcel#writeTypedList_E@ with the same object type.", "history": "Added in API level 1", "FullName": "public void readTypedList (List<T> list, Creator<T> c)"}, "readSizeF()": {"Returns": [["@B_android#util#SizeF_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a SizeF from the parcel at the current dataPosition().", "history": "Added in API level 21", "FullName": "public SizeF readSizeF ()"}, "readBundle(java.lang.ClassLoader)": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.", "history": "Added in API level 1", "FullName": "public Bundle readBundle (ClassLoader loader)"}, "writeParcelableArray(T[], int)": {"Returns": [], "Parameters": [["T[]", "T: The array of objects to be written."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedArray_E@"], "Permissions": [], "Description": "Write a heterogeneous array of Parcelable objects into the Parcel. Each object in the array is written along with its class name, so that the correct class can later be instantiated. As a result, this has significantly more overhead than @B_android#os#Parcel#writeTypedArray_E@, but will correctly handle an array containing more than one type of object.", "history": "added in API level 1", "FullName": "public void writeParcelableArray (T[] value, int parcelableFlags)"}, "createBooleanArray()": {"Returns": [["boolean[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public boolean[] createBooleanArray ()"}, "writeStrongBinder(android.os.IBinder)": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write an object into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeStrongBinder (IBinder val)"}, "setDataPosition(int)": {"Returns": [], "Parameters": [["int", "int: New offset in the parcel; must be between 0 and @B_android#os#Parcel#dataSize_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Move the current read/write position in the parcel.", "history": "Added in API level 1", "FullName": "public void setDataPosition (int pos)"}, "readPersistableBundle(java.lang.ClassLoader)": {"Returns": [["@B_android#os#PersistableBundle_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.", "history": "Added in API level 21", "FullName": "public PersistableBundle readPersistableBundle (ClassLoader loader)"}, "writeStringArray(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeStringArray (String[] val)"}, "readStringArray(java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readStringArray (String[] val)"}, "createTypedArrayMap(android.os.Parcelable.Creator<T>)": {"Returns": [["@B_android#util#ArrayMap_E@", "A newly created @B_android#util#ArrayMap_E@ containing objects with the same data as those that were previously written. This value may be null."]], "Parameters": [["@B_android#os#Parcelable#Creator_E@", "Creator: The creator to use when for instantiation. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedArrayMap_E@"], "Permissions": [], "Description": "Read into a new @B_android#util#ArrayMap_E@ with string keys items containing a particular object type that were written with @B_android#os#Parcel#writeTypedArrayMap_E@ at the current dataPosition(). The list must have previously been written via @B_android#os#Parcel#writeTypedArrayMap_E@ with the same object type.", "history": "Added in API level 29", "FullName": "public ArrayMap<String, T> createTypedArrayMap (Creator<T> creator)"}, "writeSparseBooleanArray(android.util.SparseBooleanArray)": {"Returns": [], "Parameters": [["@B_android#util#SparseBooleanArray_E@", "SparseBooleanArray: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeSparseBooleanArray (SparseBooleanArray val)"}, "writeBinderArray(android.os.IBinder[])": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeBinderArray (IBinder[] val)"}, "writeByte(byte)": {"Returns": [], "Parameters": [["byte", "byte no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a byte value into the parcel at the current dataPosition(), growing dataCapacity() if needed. Note: This method currently delegates to writeInt but may change in the future.", "history": "Added in API level 1", "FullName": "public void writeByte (byte val)"}, "writeNoException()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeException_E@", "@B_android#os#Parcel#readException_E@"], "Permissions": [], "Description": "Special function for writing information at the front of the Parcel indicating that no exception occurred.", "history": "Added in API level 1", "FullName": "public void writeNoException ()"}, "obtain()": {"Returns": [["@B_android#os#Parcel_E@", "This value will never be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve a new Parcel object from the pool.", "history": "Added in API level 1", "FullName": "public static Parcel obtain ()"}, "writeFloat(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a floating point value into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeFloat (float val)"}, "readList(java.util.List,java.lang.ClassLoader)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: This value must never be null."], ["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read into an existing List object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables. If it is null, the default class loader is used.", "history": "Added in API level 1", "FullName": "public void readList (List outVal, ClassLoader loader)"}, "writeLongArray(long[])": {"Returns": [], "Parameters": [["long[]", "long: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeLongArray (long[] val)"}, "setDataSize(int)": {"Returns": [], "Parameters": [["int", "int: The new number of bytes in the Parcel."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Change the amount of data in the parcel. Can be either smaller or larger than the current size. If larger than the current capacity, more memory will be allocated.", "history": "Added in API level 1", "FullName": "public void setDataSize (int size)"}, "readException()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeException_E@", "@B_android#os#Parcel#writeNoException_E@"], "Permissions": [], "Description": "Special function for reading an exception result from the header of a parcel, to be used after receiving the result of a transaction. This will throw the exception for you if it had been written to the Parcel, otherwise return and let you read the normal result data from the Parcel.", "history": "Added in API level 1", "FullName": "public void readException ()"}, "writeInterfaceToken(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Store or read an IBinder interface token in the parcel at the current @B_android#os#Parcel#dataPosition_E@. This is used to validate that the marshalled transaction is intended for the target interface.", "history": "Added in API level 1", "FullName": "public void writeInterfaceToken (String interfaceName)"}, "writeDoubleArray(double[])": {"Returns": [], "Parameters": [["double[]", "double: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeDoubleArray (double[] val)"}, "writeByteArray(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: Bytes to place into the parcel."], ["int", "int: Index of first byte to be written."], ["int", "int: Number of bytes to write."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a byte array into the parcel at the current @B_android#os#Parcel#dataPosition_E@, growing @B_android#os#Parcel#dataCapacity_E@ if needed.", "history": "added in API level 1", "FullName": "public void writeByteArray (byte[] b, int offset, int len)"}, "readFloat()": {"Returns": [["float", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a floating point value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public float readFloat ()"}, "writeBundle(android.os.Bundle)": {"Returns": [], "Parameters": [["@B_android#os#Bundle_E@", "Bundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 1", "FullName": "public void writeBundle (Bundle val)"}, "writeParcelable(android.os.Parcelable,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable object to be written. This value may be null."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten the name of the class of the Parcelable and its contents into the parcel.", "history": "Added in API level 1", "FullName": "public void writeParcelable (Parcelable p, int parcelableFlags)"}, "writeBoolean(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a boolean value into the parcel at the current dataPosition(), growing dataCapacity() if needed. Note: This method currently delegates to writeInt with a value of 1 or 0 for true or false, respectively, but may change in the future.", "history": "Added in API level 29", "FullName": "public void writeBoolean (boolean val)"}, "createTypedSparseArray(android.os.Parcelable.Creator<T>)": {"Returns": [["@B_android#util#SparseArray_E@", "A newly created @B_android#util#SparseArray_E@ containing objects with the same data as those that were previously written. This value may be null."]], "Parameters": [["@B_android#os#Parcelable#Creator_E@", "Creator: The creator to use when for instantiation. This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedSparseArray_E@"], "Permissions": [], "Description": "Read into a new @B_android#util#SparseArray_E@ items containing a particular object type that were written with @B_android#os#Parcel#writeTypedSparseArray_E@ at the current dataPosition(). The list must have previously been written via @B_android#os#Parcel#writeTypedSparseArray_E@ with the same object type.", "history": "Added in API level 29", "FullName": "public SparseArray<T> createTypedSparseArray (Creator<T> creator)"}, "dataCapacity()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total amount of space in the parcel. This is always >= @B_android#os#Parcel#dataSize_E@. The difference between it and dataSize() is the amount of room left until the parcel needs to re-allocate its data buffer.", "history": "Added in API level 1", "FullName": "public int dataCapacity ()"}, "enforceInterface(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void enforceInterface (String interfaceName)"}, "writeIntArray(int[])": {"Returns": [], "Parameters": [["int[]", "int: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeIntArray (int[] val)"}, "writeArray(java.lang.Object[])": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten an Object array into the parcel at the current dataPosition(), growing dataCapacity() if needed. The array values are written using @B_android#os#Parcel#writeValue_E@ and must follow the specification there.", "history": "Added in API level 1", "FullName": "public void writeArray (Object[] val)"}, "readInt()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read an integer value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public int readInt ()"}, "createDoubleArray()": {"Returns": [["double[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public double[] createDoubleArray ()"}, "readByte()": {"Returns": [["byte", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a byte value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public byte readByte ()"}, "readBooleanArray(boolean[])": {"Returns": [], "Parameters": [["boolean[]", "boolean: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readBooleanArray (boolean[] val)"}, "appendFrom(android.os.Parcel,int,int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void appendFrom (Parcel parcel, int offset, int length)"}, "readException(int,java.lang.String)": {"Returns": [], "Parameters": [["int", "int: Used to determine which exception class to throw."], ["@B_java#lang#String_E@", "String: The exception message."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Throw an exception with the given message. Not intended for use outside the Parcel class.", "history": "Added in API level 1", "FullName": "public void readException (int code, String msg)"}, "writeTypedArrayMap(android.util.ArrayMap<java.lang.String,T>,int)": {"Returns": [], "Parameters": [["@B_android#util#ArrayMap_E@", "ArrayMap: The map of objects to be written. This value may be null."], ["int", "int: The parcelable flags to use."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#createTypedArrayMap_E@", "@B_android#os#Parcelable_E@"], "Permissions": [], "Description": "Flatten an @B_android#util#ArrayMap_E@ with string keys containing a particular object type into the parcel at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the array must be one that implements Parcelable. Only the raw data of the objects is written and not their type, so you must use the corresponding @B_android#os#Parcel#createTypedArrayMap_E@", "history": "Added in API level 29", "FullName": "public void writeTypedArrayMap (ArrayMap<String, T> val, int parcelableFlags)"}, "readDoubleArray(double[])": {"Returns": [], "Parameters": [["double[]", "double: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readDoubleArray (double[] val)"}, "readByteArray(byte[])": {"Returns": [], "Parameters": [["byte[]", "byte: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a byte[] object from the parcel and copy it into the given byte array.", "history": "Added in API level 1", "FullName": "public void readByteArray (byte[] val)"}, "writeValue(java.lang.Object)": {"Returns": [], "Parameters": [["@B_java#lang#Object_E@", "Object: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a generic object in to a parcel. The given Object value may currently be one of the following types: null String Byte Short Integer Long Float Double Boolean String[] boolean[] byte[] int[] long[] Object[] (supporting objects of the same type defined here). @B_android#os#Bundle_E@ Map (as supported by @B_android#os#Parcel#writeMap_E@). Any object that implements the @B_android#os#Parcelable_E@ protocol. Parcelable[] CharSequence (as supported by @B_android#text#TextUtils#writeToParcel_E@). List (as supported by @B_android#os#Parcel#writeList_E@). @B_android#util#SparseArray_E@ (as supported by @B_android#os#Parcel#writeSparseArray_E@). @B_android#os#IBinder_E@ Any object that implements Serializable (but see @B_android#os#Parcel#writeSerializable_E@ for caveats). Note that all of the previous types have relatively efficient implementations for writing to a Parcel; having to rely on the generic serialization approach is much less efficient and should be avoided whenever possible. @B_android#os#Parcelable_E@ objects are written with @B_android#os#Parcelable#writeToParcel_E@ using contextual flags of 0. When serializing objects containing @B_android#os#ParcelFileDescriptor_E@s, this may result in file descriptor leaks when they are returned from Binder calls (where @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@ should be used).", "history": "Added in API level 1", "FullName": "public void writeValue (Object v)"}, "writeBinderList(java.util.List<android.os.IBinder>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list of strings to be written. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#createBinderArrayList_E@", "@B_android#os#Parcel#readBinderList_E@"], "Permissions": [], "Description": "Flatten a List containing IBinder objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed. They can later be retrieved with @B_android#os#Parcel#createBinderArrayList_E@ or @B_android#os#Parcel#readBinderList_E@.", "history": "Added in API level 1", "FullName": "public void writeBinderList (List<IBinder> val)"}, "writeTypedArray(T[],int)": {"Returns": [], "Parameters": [["T[]", "T: The array of objects to be written. This value may be null."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#readTypedArray_E@", "@B_android#os#Parcel#writeParcelableArray_E@", "@B_android#os#Parcelable#Creator_E@"], "Permissions": [], "Description": "Flatten a homogeneous array containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the array must be one that implements Parcelable. Unlike the @B_android#os#Parcel#writeParcelableArray_E@ method, however, only the raw data of the objects is written and not their type, so you must use @B_android#os#Parcel#readTypedArray_E@ with the correct corresponding @B_android#os#Parcelable#Creator_E@ implementation to unmarshall them.", "history": "Added in API level 1", "FullName": "public void writeTypedArray (T[] val, int parcelableFlags)"}, "writeSparseArray(android.util.SparseArray<T>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a generic SparseArray into the parcel at the current dataPosition(), growing dataCapacity() if needed. The SparseArray values are written using @B_android#os#Parcel#writeValue_E@ and must follow the specification there.", "history": "Added in API level 1", "FullName": "public void writeSparseArray (SparseArray<T> val)"}, "writeBooleanArray(boolean[])": {"Returns": [], "Parameters": [["boolean[]", "boolean: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void writeBooleanArray (boolean[] val)"}, "createByteArray()": {"Returns": [["byte[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a byte[] object from the parcel.", "history": "Added in API level 1", "FullName": "public byte[] createByteArray ()"}, "readTypedObject(android.os.Parcelable.Creator<T>)": {"Returns": [["T", "A newly created object of the type that was previously written."]], "Parameters": [["@B_android#os#Parcelable#Creator_E@", "Creator: This value must never be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeTypedObject_E@"], "Permissions": [], "Description": "Read and return a typed Parcelable object from a parcel. Returns null if the previous written object was null. The object must have previous been written via @B_android#os#Parcel#writeTypedObject_E@ with the same object type.", "history": "Added in API level 23", "FullName": "public T readTypedObject (Creator<T> c)"}, "writeMap(java.util.Map)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#os#Parcel#writeBundle_E@ instead. Flattens a Map into the parcel at the current dataPosition(), growing dataCapacity() if needed. The Map keys must be String objects. The Map values are written using @B_android#os#Parcel#writeValue_E@ and must follow the specification there. It is strongly recommended to use @B_android#os#Parcel#writeBundle_E@ instead of this method, since the Bundle class provides a type-safe API that allows you to avoid mysterious type errors at the point of marshalling.", "history": "Added in API level 1", "FullName": "public void writeMap (Map val)"}, "readStrongBinder()": {"Returns": [["@B_android#os#IBinder_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read an object from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public IBinder readStrongBinder ()"}, "recycle()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Put a Parcel object back into the pool. You must not touch the object after this call.", "history": "Added in API level 1", "FullName": "public void recycle ()"}, "writeSize(android.util.Size)": {"Returns": [], "Parameters": [["@B_android#util#Size_E@", "Size: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a Size into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 21", "FullName": "public void writeSize (Size val)"}, "readParcelableArray(java.lang.ClassLoader)": {"Returns": [["@B_android#os#Parcelable_E@", "the Parcelable array, or null if the array is null"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new Parcelable array from the parcel. The given class loader will be used to load any enclosed Parcelables.", "history": "Added in API level 1", "FullName": "public Parcelable[] readParcelableArray (ClassLoader loader)"}, "dataSize()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the total amount of data contained in the parcel.", "history": "Added in API level 1", "FullName": "public int dataSize ()"}, "readArrayList(java.lang.ClassLoader)": {"Returns": [["@B_java#util#ArrayList_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new ArrayList object from the parcel at the current dataPosition(). Returns null if the previously written list object was null. The given class loader will be used to load any enclosed Parcelables.", "history": "Added in API level 1", "FullName": "public ArrayList readArrayList (ClassLoader loader)"}, "appendFrom(android.os.Parcel, int, int)": {"Returns": [], "Parameters": [["@B_android#os#Parcel_E@", "Parcel no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public void appendFrom (Parcel parcel, int offset, int length)"}, "readSparseBooleanArray()": {"Returns": [["@B_android#util#SparseBooleanArray_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read and return a new SparseBooleanArray object from the parcel at the current dataPosition(). Returns null if the previously written list object was null.", "history": "Added in API level 1", "FullName": "public SparseBooleanArray readSparseBooleanArray ()"}, "readTypedArray(T[],android.os.Parcelable.Creator<T>)": {"Returns": [], "Parameters": [["T[]", "T: This value must never be null."], ["@B_android#os#Parcelable#Creator_E@", "Creator: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readTypedArray (T[] val, Creator<T> c)"}, "readFloatArray(float[])": {"Returns": [], "Parameters": [["float[]", "float: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readFloatArray (float[] val)"}, "readHashMap(java.lang.ClassLoader)": {"Returns": [["@B_java#util#HashMap_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Please use @B_android#os#Parcel#readBundle_E@ instead (whose data must have been written with @B_android#os#Parcel#writeBundle_E@. Read and return a new HashMap object from the parcel at the current dataPosition(), using the given class loader to load any enclosed Parcelables. Returns null if the previously written map object was null.", "history": "Added in API level 1", "FullName": "public HashMap readHashMap (ClassLoader loader)"}, "createFloatArray()": {"Returns": [["float[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public float[] createFloatArray ()"}, "writeTypedList(java.util.List<T>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list of objects to be written. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#createTypedArrayList_E@", "@B_android#os#Parcel#readTypedList_E@", "@B_android#os#Parcelable_E@"], "Permissions": [], "Description": "Flatten a List containing a particular object type into the parcel, at the current dataPosition() and growing dataCapacity() if needed. The type of the objects in the list must be one that implements Parcelable. Unlike the generic writeList() method, however, only the raw data of the objects is written and not their type, so you must use the corresponding readTypedList() to unmarshall them.", "history": "Added in API level 1", "FullName": "public void writeTypedList (List<T> val)"}, "writeSerializable(java.io.Serializable)": {"Returns": [], "Parameters": [["@B_java#io#Serializable_E@", "Serializable: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a generic serializable object in to a Parcel. It is strongly recommended that this method be avoided, since the serialization overhead is extremely large, and this approach will be much slower than using the other approaches to writing data in to a Parcel.", "history": "Added in API level 1", "FullName": "public void writeSerializable (Serializable s)"}, "writeFileDescriptor(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Write a FileDescriptor into the parcel at the current dataPosition(), growing dataCapacity() if needed. The file descriptor will not be closed, which may result in file descriptor leaks when objects are returned from Binder calls. Use @B_android#os#ParcelFileDescriptor#writeToParcel_E@ instead, which accepts contextual flags and will close the original file descriptor if @B_android#os#Parcelable#PARCELABLE_WRITE_RETURN_VALUE_E@ is set.", "history": "Added in API level 1", "FullName": "public void writeFileDescriptor (FileDescriptor val)"}, "readCharArray(char[])": {"Returns": [], "Parameters": [["char[]", "char: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readCharArray (char[] val)"}, "readValue(java.lang.ClassLoader)": {"Returns": [["@B_java#lang#Object_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#ClassLoader_E@", "ClassLoader: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a typed object from a parcel. The given class loader will be used to load any enclosed Parcelables. If it is null, the default class loader will be used.", "history": "Added in API level 1", "FullName": "public Object readValue (ClassLoader loader)"}, "createCharArray()": {"Returns": [["char[]", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public char[] createCharArray ()"}, "dataPosition()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current position in the parcel data. Never more than @B_android#os#Parcel#dataSize_E@.", "history": "Added in API level 1", "FullName": "public int dataPosition ()"}, "writeTypedObject(T, int)": {"Returns": [], "Parameters": [["T", "T: The Parcelable object to be written."], ["int", "int: Contextual flags as per @B_android#os#Parcelable#writeToParcel_E@."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#readTypedObject_E@"], "Permissions": [], "Description": "Flatten the Parcelable object into the parcel.", "history": "added in API level 23", "FullName": "public void writeTypedObject (T val, int parcelableFlags)"}, "readBinderArray(android.os.IBinder[])": {"Returns": [], "Parameters": [["@B_android#os#IBinder_E@", "IBinder: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public void readBinderArray (IBinder[] val)"}, "createBinderArrayList()": {"Returns": [["@B_java#util#ArrayList_E@", "A newly created ArrayList containing strings with the same data as those that were previously written."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#writeBinderList_E@"], "Permissions": [], "Description": "Read and return a new ArrayList containing IBinder objects from the parcel that was written with @B_android#os#Parcel#writeBinderList_E@ at the current dataPosition(). Returns null if the previously written list object was null.", "history": "Added in API level 1", "FullName": "public ArrayList<IBinder> createBinderArrayList ()"}, "createBinderArray()": {"Returns": [["@B_android#os#IBinder_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public IBinder[] createBinderArray ()"}, "writeStringList(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The list of strings to be written. This value may be null."]], "Throws": [], "SeeAlso": ["@B_android#os#Parcel#createStringArrayList_E@", "@B_android#os#Parcel#readStringList_E@"], "Permissions": [], "Description": "Flatten a List containing String objects into the parcel, at the current dataPosition() and growing dataCapacity() if needed. They can later be retrieved with @B_android#os#Parcel#createStringArrayList_E@ or @B_android#os#Parcel#readStringList_E@.", "history": "Added in API level 1", "FullName": "public void writeStringList (List<String> val)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 1", "FullName": "protected void finalize ()"}, "readDouble()": {"Returns": [["double", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Read a double precision floating point value from the parcel at the current dataPosition().", "history": "Added in API level 1", "FullName": "public double readDouble ()"}, "unmarshall(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: This value must never be null."], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the bytes in data to be the raw bytes of this Parcel.", "history": "Added in API level 1", "FullName": "public void unmarshall (byte[] data, int offset, int length)"}, "writePersistableBundle(android.os.PersistableBundle)": {"Returns": [], "Parameters": [["@B_android#os#PersistableBundle_E@", "PersistableBundle: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flatten a PersistableBundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.", "history": "Added in API level 21", "FullName": "public void writePersistableBundle (PersistableBundle val)"}}, "Inheritance": [], "ClassName": "android.os.Parcel", "ClassDesc": "Container for a message (data and object references) that can be sent through an IBinder. A Parcel can contain both flattened data that will be unflattened on the other side of the IPC (using the various methods here for writing specific types, or the general @B_android#os#Parcelable_E@ interface), and references to live @B_android#os#IBinder_E@ objects that will result in the other side receiving a proxy IBinder connected with the original IBinder in the Parcel. Parcel is @B_android#os#Parcelable_E@ API for placing arbitrary objects into a Parcel) is designed as a high-performance IPC transport. As such, it is not appropriate to place any Parcel data in to persistent storage: changes in the underlying implementation of any of the data in the Parcel can render older data unreadable. The bulk of the Parcel API revolves around reading and writing data of various types. There are six major classes of such functions available. The most basic data functions are for writing and reading primitive data types: @B_android#os#Parcel#writeByte_E@, @B_android#os#Parcel#readByte_E@, @B_android#os#Parcel#writeDouble_E@, @B_android#os#Parcel#readDouble_E@, @B_android#os#Parcel#writeFloat_E@, @B_android#os#Parcel#readFloat_E@, @B_android#os#Parcel#writeInt_E@, @B_android#os#Parcel#readInt_E@, @B_android#os#Parcel#writeLong_E@, @B_android#os#Parcel#readLong_E@, @B_android#os#Parcel#writeString_E@, @B_android#os#Parcel#readString_E@. Most other data operations are built on top of these. The given data is written and read using the endianess of the host CPU. There are a variety of methods for reading and writing raw arrays of primitive objects, which generally result in writing a 4-byte length followed by the primitive data items. The methods for reading can either read the data into an existing array, or create and return a new array. These available types are: @B_android#os#Parcel#writeBooleanArray_E@, @B_android#os#Parcel#readBooleanArray_E@, @B_android#os#Parcel#createBooleanArray_E@ @B_android#os#Parcel#writeByteArray_E@, @B_android#os#Parcel#writeByteArray_E@, @B_android#os#Parcel#readByteArray_E@, @B_android#os#Parcel#createByteArray_E@ @B_android#os#Parcel#writeCharArray_E@, @B_android#os#Parcel#readCharArray_E@, @B_android#os#Parcel#createCharArray_E@ @B_android#os#Parcel#writeDoubleArray_E@, @B_android#os#Parcel#readDoubleArray_E@, @B_android#os#Parcel#createDoubleArray_E@ @B_android#os#Parcel#writeFloatArray_E@, @B_android#os#Parcel#readFloatArray_E@, @B_android#os#Parcel#createFloatArray_E@ @B_android#os#Parcel#writeIntArray_E@, @B_android#os#Parcel#readIntArray_E@, @B_android#os#Parcel#createIntArray_E@ @B_android#os#Parcel#writeLongArray_E@, @B_android#os#Parcel#readLongArray_E@, @B_android#os#Parcel#createLongArray_E@ @B_android#os#Parcel#writeStringArray_E@, @B_android#os#Parcel#readStringArray_E@, @B_android#os#Parcel#createStringArray_E@. @B_android#os#Parcel#writeSparseBooleanArray_E@, @B_android#os#Parcel#readSparseBooleanArray_E@. The @B_android#os#Parcelable_E@ protocol provides an extremely efficient (but low-level) protocol for objects to write and read themselves from Parcels. You can use the direct methods @B_android#os#Parcel#writeParcelable_E@ and @B_android#os#Parcel#readParcelable_E@ or @B_android#os#Parcel#writeParcelableArray_E@ and @B_android#os#Parcel#readParcelableArray_E@ to write or read. These methods write both the class type and its data to the Parcel, allowing that class to be reconstructed from the appropriate class loader when later reading. There are also some methods that provide a more efficient way to work with Parcelables: @B_android#os#Parcel#writeTypedObject_E@, @B_android#os#Parcel#writeTypedArray_E@, @B_android#os#Parcel#writeTypedList_E@, @B_android#os#Parcel#readTypedObject_E@, @B_android#os#Parcel#createTypedArray_E@ and @B_android#os#Parcel#createTypedArrayList_E@. These methods do not write the class information of the original object: instead, the caller of the read function must know what type to expect and pass in the appropriate @B_android#os#Parcelable#Creator_E@ instead to properly construct the new object and read its data. (To more efficient write and read a single Parcelable object that is not null, you can directly call @B_android#os#Parcelable#writeToParcel_E@ and @B_android#os#Parcelable#Creator#createFromParcel_E@ yourself.) A special type-safe container, called @B_android#os#Bundle_E@, is available for key/value maps of heterogeneous values. This has many optimizations for improved performance when reading and writing data, and its type-safe API avoids difficult to debug type errors when finally marshalling the data contents into a Parcel. The methods to use are @B_android#os#Parcel#writeBundle_E@, @B_android#os#Parcel#readBundle_E@, and @B_android#os#Parcel#readBundle_E@. An unusual feature of Parcel is the ability to read and write active objects. For these objects the actual contents of the object is not written, rather a special token referencing the object is written. When reading the object back from the Parcel, you do not get a new instance of the object, but rather a handle that operates on the exact same object that was originally written. There are two forms of active objects available. @B_android#os#Binder_E@ objects are a core facility of Android's general cross-process communication system. The @B_android#os#IBinder_E@ interface describes an abstract protocol with a Binder object. Any such interface can be written in to a Parcel, and upon reading you will receive either the original object implementing that interface or a special proxy implementation that communicates calls back to the original object. The methods to use are @B_android#os#Parcel#writeStrongBinder_E@, @B_android#os#Parcel#writeStrongInterface_E@, @B_android#os#Parcel#readStrongBinder_E@, @B_android#os#Parcel#writeBinderArray_E@, @B_android#os#Parcel#readBinderArray_E@, @B_android#os#Parcel#createBinderArray_E@, @B_android#os#Parcel#writeBinderList_E@, @B_android#os#Parcel#readBinderList_E@, @B_android#os#Parcel#createBinderArrayList_E@. FileDescriptor objects, representing raw Linux file descriptor identifiers, can be written and @B_android#os#ParcelFileDescriptor_E@ objects returned to operate on the original file descriptor. The returned file descriptor is a dup of the original file descriptor: the object and fd is different, but operating on the same underlying file stream, with the same position, etc. The methods to use are @B_android#os#Parcel#writeFileDescriptor_E@, @B_android#os#Parcel#readFileDescriptor_E@. A final class of methods are for writing and reading standard Java containers of arbitrary types. These all revolve around the @B_android#os#Parcel#writeValue_E@ and @B_android#os#Parcel#readValue_E@ methods which define the types of objects allowed. The container methods are @B_android#os#Parcel#writeArray_E@, @B_android#os#Parcel#readArray_E@, @B_android#os#Parcel#writeList_E@, @B_android#os#Parcel#readList_E@, @B_android#os#Parcel#readArrayList_E@, @B_android#os#Parcel#writeMap_E@, @B_android#os#Parcel#readMap_E@, @B_android#os#Parcel#writeSparseArray_E@, @B_android#os#Parcel#readSparseArray_E@."}