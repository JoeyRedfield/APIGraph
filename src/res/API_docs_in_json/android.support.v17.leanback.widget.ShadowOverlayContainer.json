{"Functions": {"draw(android.graphics.Canvas)": {"Returns": [], "Parameters": [["@B_android#graphics#Canvas_E@", "Canvas: The Canvas to which the View is rendered."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Manually render this view (and all of its children) to the given Canvas. The view must have already done a full layout before this function is called. When implementing a view, implement @B_android#view#View#onDraw_E@ instead of overriding this method. If you do need to override this method, call the superclass version.", "history": "", "FullName": "void draw (Canvas canvas)"}, "supportsShadow()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return true if the platform sdk supports shadow.", "history": "added in version 22.0.0", "FullName": "boolean supportsShadow ()"}, "useStaticShadow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the shadow type to @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_STATIC_E@ if supported.", "history": "added in version 22.2.1", "FullName": "void useStaticShadow ()"}, "getWrappedView()": {"Returns": [["@B_android#view#View_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the wrapper view.", "history": "added in version 22.2.1", "FullName": "View getWrappedView ()"}, "wrap(android.view.View)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inserts view into the wrapper.", "history": "added in version 22.0.0", "FullName": "void wrap (View view)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "protected void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "prepareParentForShadow(android.view.ViewGroup)": {"Returns": [], "Parameters": [["@B_android#view#ViewGroup_E@", "ViewGroup no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#support#v17#leanback#widget#ShadowOverlayContainer#prepareParentForShadow_E@ must be called on parent of container before using shadow. Depending on sdk version, optical bounds might be applied to parent.", "history": "added in version 22.0.0", "FullName": "void prepareParentForShadow (ViewGroup parent)"}, "getShadowType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the shadow type, one of @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_NONE_E@, @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_STATIC_E@, or @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_DYNAMIC_E@.", "history": "added in version 22.2.1", "FullName": "int getShadowType ()"}, "setOverlayColor(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set color (with alpha) of the overlay.", "history": "added in version 22.0.0", "FullName": "void setOverlayColor (int overlayColor)"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 22.0.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "supportsDynamicShadow()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the platform sdk supports dynamic shadows.", "history": "added in version 22.2.1", "FullName": "boolean supportsDynamicShadow ()"}, "initialize(boolean, boolean, boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#support#v17#leanback#widget#ShadowOverlayHelper#createShadowOverlayContainer_E@ instead. Initialize shadows, color overlay, and rounded corners. All are optional. Shadow type are auto-selected based on @B_android#support#v17#leanback#widget#ShadowOverlayContainer#useStaticShadow_E@ and @B_android#support#v17#leanback#widget#ShadowOverlayContainer#useDynamicShadow_E@ call.", "history": "added in version 22.0.0", "FullName": "void initialize (boolean hasShadow, boolean hasColorDimOverlay, boolean roundedCorners)"}, "useDynamicShadow(float, float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"], ["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the shadow type to @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_DYNAMIC_E@ if supported and sets the elevation/Z values to the given parameters.", "history": "added in version 22.2.1", "FullName": "void useDynamicShadow (float unfocusedZ, float focusedZ)"}, "setShadowFocusLevel(float)": {"Returns": [], "Parameters": [["float", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set shadow focus level (0 to 1). 0 for unfocused, 1f for fully focused.", "history": "added in version 22.0.0", "FullName": "void setShadowFocusLevel (float level)"}, "useDynamicShadow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the shadow type to @B_android#support#v17#leanback#widget#ShadowOverlayContainer#SHADOW_DYNAMIC_E@ if supported.", "history": "added in version 22.2.1", "FullName": "void useDynamicShadow ()"}, "initialize(boolean, boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"], ["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#support#v17#leanback#widget#ShadowOverlayHelper#createShadowOverlayContainer_E@ instead. Initialize shadows, color overlay.", "history": "added in version 22.0.0", "FullName": "void initialize (boolean hasShadow, boolean hasColorDimOverlay)"}, "hasOverlappingRendering()": {"Returns": [["boolean", "true if the content in this view might overlap, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this View has content which overlaps. This function, intended to be overridden by specific View types, is an optimization when alpha is set on a view. If rendering overlaps in a view with alpha < 1, that view is drawn to an offscreen buffer and then composited into place, which can be expensive. If the view has no overlapping rendering, the view can draw each primitive with the appropriate alpha value directly. An example of overlapping rendering is a TextView with a background image, such as a Button. An example of non-overlapping rendering is a TextView with no background, or an ImageView with only the foreground image. The default implementation returns true; subclasses should override if they have cases which can be optimized. The current implementation of the saveLayer and saveLayerAlpha methods in @B_android#graphics#Canvas_E@ necessitates that a View return true if it uses the methods internally without passing the @B_android#graphics#Canvas#CLIP_TO_LAYER_SAVE_FLAG_E@. @B_android#view#View#forceHasOverlappingRendering_E@ has been called on this view.", "history": "", "FullName": "boolean hasOverlappingRendering ()"}, "ShadowOverlayContainer(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create ShadowOverlayContainer and auto select shadow type.", "history": "added in version 22.0.0", "FullName": "ShadowOverlayContainer (Context context)"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.v17.leanback.widget.ShadowOverlayContainer", "ClassDesc": "Provides an SDK version-independent wrapper to support shadows, color overlays, and rounded corners. It's not always preferred to create a ShadowOverlayContainer, use @B_android#support#v17#leanback#widget#ShadowOverlayHelper_E@ instead. @B_android#support#v17#leanback#widget#ShadowOverlayContainer#prepareParentForShadow_E@ must be called on parent of container before using shadow. Depending on sdk version, optical bounds might be applied to parent. If shadows can appear outside the bounds of the parent view, setClipChildren(false) must be called on the grandparent view. @B_android#support#v17#leanback#widget#ShadowOverlayContainer#initialize_E@ must be first called on the container. Then call @B_android#support#v17#leanback#widget#ShadowOverlayContainer#wrap_E@ to insert the wrapped view into the container. Call @B_android#support#v17#leanback#widget#ShadowOverlayContainer#setShadowFocusLevel_E@ to control the strength of the shadow (focused shadows cast stronger shadows). Call @B_android#support#v17#leanback#widget#ShadowOverlayContainer#setOverlayColor_E@ to control overlay color."}