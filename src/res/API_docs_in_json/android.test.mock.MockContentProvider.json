{"Functions": {"insert(android.net.Uri,android.content.ContentValues)": {"Returns": [["@B_android#net#Uri_E@", "The URI for the newly inserted item."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The content:// URI of the insertion request. This must not be null. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to add to the database. This must not be null. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to insert a new row. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after inserting. This method can be called from multiple threads, as described in", "history": "Added in API level 8", "FullName": "public Uri insert (Uri uri, ContentValues values)"}, "bulkInsert(android.net.Uri,android.content.ContentValues[])": {"Returns": [["int", "The number of values that were inserted."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The content:// URI of the insertion request. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: An array of sets of column_name/value pairs to add to the database. This must not be null. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "If you're reluctant to implement this manually, please just call super.bulkInsert().", "history": "Added in API level 8", "FullName": "public int bulkInsert (Uri uri, ContentValues[] values)"}, "openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)": {"Returns": [["@B_android#content#res#AssetFileDescriptor_E@", "Returns a new AssetFileDescriptor from which the client can read data of the desired type. This value may be null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried. This value must never be null."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */*, if the caller does not have specific type requirements; in this case the content provider will pick its best type matching the pattern. This value must never be null."], ["@B_android#os#Bundle_E@", "Bundle: Additional options from the client. The definitions of these are specific to the content provider being called. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a client to open a read-only stream containing data of a particular MIME type. This is like @B_android#content#ContentProvider#openAssetFile_E@, except the file can only be read-only and the content provider may perform data conversions to generate data of the desired type. The default implementation compares the given mimeType against the result of @B_android#content#ContentProvider#getType_E@ and, if they match, simply calls @B_android#content#ContentProvider#openAssetFile_E@. See @B_android#content#ClipData_E@ for examples of the use and implementation of this method. The returned AssetFileDescriptor can be a pipe or socket pair to enable streaming of data. For better interoperability with other applications, it is recommended that for any URIs that can be opened, you also support queries on them containing at least the columns specified by @B_android#provider#OpenableColumns_E@. You may also want to support other common columns if you have additional meta-data to supply, such as @B_android#provider#MediaStore#MediaColumns#DATE_ADDED_E@ in @B_android#provider#MediaStore#MediaColumns_E@.", "history": "Added in API level 11", "FullName": "public AssetFileDescriptor openTypedAssetFile (Uri url, String mimeType, Bundle opts)"}, "getType(android.net.Uri)": {"Returns": [["@B_java#lang#String_E@", "a MIME type string, or null if there is no type."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: the URI to query. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests for the MIME type of the data at the given URI. The returned MIME type should start with vnd.android.cursor.item for a single record, or vnd.android.cursor.dir/ for multiple items. This method can be called from multiple threads, as described in Note that there are no permissions needed for an application to access this information; if your content provider requires read and/or write permissions, or is not exported, all applications can still call this method regardless of their access permissions. This allows them to retrieve the MIME type for a URI when dispatching intents.", "history": "Added in API level 8", "FullName": "public String getType (Uri uri)"}, "query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)": {"Returns": [["@B_android#database#Cursor_E@", "a Cursor or null."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This will be the full URI sent by the client; if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value. This value must never be null."], ["@B_java#lang#String_E@", "String: The list of columns to put into the cursor. If null all columns are included. This value may be null."], ["@B_java#lang#String_E@", "String: A selection criteria to apply when filtering rows. If null then all rows are included. This value may be null."], ["@B_java#lang#String_E@", "String: You may include ?s in selection, which will be replaced by the values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings. This value may be null."], ["@B_java#lang#String_E@", "String: How the rows in the cursor should be sorted. If null then the provider is free to define the sort order. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle query requests from clients. Apps targeting @B_android#os#Build#VERSION_CODES#O_E@ or higher should override @B_android#content#ContentProvider#query_E@ and provide a stub implementation of this method. This method can be called from multiple threads, as described in Example client call:", "history": "Added in API level 8", "FullName": "public Cursor query (Uri uri, String[] projection, String selection, String[] selectionArgs, String sortOrder)"}, "getStreamTypes(android.net.Uri, java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns null if there are no possible data streams for the given mimeTypeFilter. Otherwise returns an array of all available concrete MIME types."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */* to retrieve all possible data types."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a client to determine the types of data streams that this content provider supports for the given URI. The default implementation returns null, meaning no types. If your content provider stores data of a particular type, return that MIME type if it matches the given mimeTypeFilter. If it can perform type conversions, return an array of all supported MIME types that match mimeTypeFilter.", "history": "added in API level 11", "FullName": "public String[] getStreamTypes (Uri url, String mimeTypeFilter)"}, "MockContentProvider(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A constructor accepting a Context instance, which is supposed to be the subclasss of @B_android#test#mock#MockContext_E@.", "history": "Added in API level 8", "FullName": "public MockContentProvider (Context context)"}, "MockContentProvider()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A constructor using @B_android#test#mock#MockContext_E@ instance as a Context in it.", "history": "Added in API level 8", "FullName": "protected MockContentProvider ()"}, "MockContentProvider(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: A Context object which should be some mock instance (like the instance of @B_android#test#mock#MockContext_E@)."], ["@B_java#lang#String_E@", "String: The read permision you want this instance should have in the test, which is available via @B_android#content#ContentProvider#getReadPermission_E@."], ["@B_java#lang#String_E@", "String: The write permission you want this instance should have in the test, which is available via @B_android#content#ContentProvider#getWritePermission_E@."], ["@B_android#content#pm#PathPermission_E@", "PathPermission: The PathPermissions you want this instance should have in the test, which is available via @B_android#content#ContentProvider#getPathPermissions_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A constructor which initialize four member variables which @B_android#content#ContentProvider_E@ have internally.", "history": "Added in API level 8", "FullName": "public MockContentProvider (Context context, String readPermission, String writePermission, PathPermission[] pathPermissions)"}, "attachInfoForTesting(android.content.ContentProvider,android.content.Context,android.content.pm.ProviderInfo)": {"Returns": [], "Parameters": [["@B_android#content#ContentProvider_E@", "ContentProvider no parameter comment"], ["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#content#pm#ProviderInfo_E@", "ProviderInfo no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Use a mocking framework like Like @B_android#test#mock#MockContentProvider#attachInfo_E@, but for use when directly instantiating the provider for testing. Provided for use by android.test.ProviderTestCase2 and android.test.RenamingDelegatingContext.", "history": "Added in Android REL Deprecated in API level REL", "FullName": "public static void attachInfoForTesting (ContentProvider provider, Context context, ProviderInfo providerInfo)"}, "onCreate()": {"Returns": [["boolean", "true if the provider was successfully loaded, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to initialize your content provider on startup. This method is called for all registered content providers on the application main thread at application launch time. It must not perform lengthy operations, or application startup will be delayed. You should defer nontrivial initialization (such as opening, upgrading, and scanning databases) until the content provider is used (via @B_android#content#ContentProvider#query_E@, @B_android#content#ContentProvider#insert_E@, etc). Deferred initialization keeps application startup fast, avoids unnecessary work if the provider turns out not to be needed, and stops database errors (such as a full disk) from halting application launch. If you use SQLite, @B_android#database#sqlite#SQLiteOpenHelper_E@ is a helpful utility class that makes it easy to manage databases, and will automatically defer opening until first use. If you do use SQLiteOpenHelper, make sure to avoid calling @B_android#database#sqlite#SQLiteOpenHelper#getReadableDatabase_E@ or @B_android#database#sqlite#SQLiteOpenHelper#getWritableDatabase_E@ from this method. (Instead, override @B_android#database#sqlite#SQLiteOpenHelper#onOpen_E@ to initialize the database when it is first opened.)", "history": "Added in API level 8", "FullName": "public boolean onCreate ()"}, "update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])": {"Returns": [["int", "the number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The URI to query. This can potentially have a record ID if this is an update request for a specific record. This value must never be null."], ["@B_android#content#ContentValues_E@", "ContentValues: A set of column_name/value pairs to update in the database. This must not be null. This value may be null."], ["@B_java#lang#String_E@", "String: An optional filter to match rows to update. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to update one or more rows. The implementation should update all rows matching the selection to set the columns according to the provided values map. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after updating. This method can be called from multiple threads, as described in", "history": "Added in API level 8", "FullName": "public int update (Uri uri, ContentValues values, String selection, String[] selectionArgs)"}, "getStreamTypes(android.net.Uri,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "Returns null if there are no possible data streams for the given mimeTypeFilter. Otherwise returns an array of all available concrete MIME types."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The data in the content provider being queried. This value must never be null."], ["@B_java#lang#String_E@", "String: The type of data the client desires. May be a pattern, such as */* to retrieve all possible data types. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by a client to determine the types of data streams that this content provider supports for the given URI. The default implementation returns null, meaning no types. If your content provider stores data of a particular type, return that MIME type if it matches the given mimeTypeFilter. If it can perform type conversions, return an array of all supported MIME types that match mimeTypeFilter.", "history": "Added in API level 11", "FullName": "public String[] getStreamTypes (Uri url, String mimeTypeFilter)"}, "attachInfo(android.content.Context,android.content.pm.ProviderInfo)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context: The context this provider is running in"], ["@B_android#content#pm#ProviderInfo_E@", "ProviderInfo: Registered information about this content provider"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "After being instantiated, this is called to tell the content provider about itself.", "history": "Added in API level 8", "FullName": "public void attachInfo (Context context, ProviderInfo info)"}, "applyBatch(java.util.ArrayList<android.content.ContentProviderOperation>)": {"Returns": [["@B_android#content#ContentProviderResult_E@", "This value will never be null."]], "Parameters": [["@B_java#util#ArrayList_E@", "ArrayList: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 8", "FullName": "public ContentProviderResult[] applyBatch (ArrayList<ContentProviderOperation> operations)"}, "delete(android.net.Uri,java.lang.String,java.lang.String[])": {"Returns": [["int", "The number of rows affected."]], "Parameters": [["@B_android#net#Uri_E@", "Uri: The full URI to query, including a row ID (if a specific record is requested). This value must never be null."], ["@B_java#lang#String_E@", "String: An optional restriction to apply to rows when deleting. This value may be null."], ["@B_java#lang#String_E@", "String: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Implement this to handle requests to delete one or more rows. The implementation should apply the selection clause when performing deletion, allowing the operation to affect multiple rows in a directory. As a courtesy, call @B_android#content#ContentResolver#notifyChange_E@ after deleting. This method can be called from multiple threads, as described in The implementation is responsible for parsing out a row ID at the end of the URI, if a specific row is being deleted. That is, the client would pass in content://contacts/people/22 and the implementation is responsible for parsing the record number (22) when creating a SQL statement.", "history": "Added in API level 8", "FullName": "public int delete (Uri uri, String selection, String[] selectionArgs)"}}, "Inheritance": ["@B_android#content#ContentProvider_E@"], "ClassName": "android.test.mock.MockContentProvider", "ClassDesc": "Mock implementation of ContentProvider. All methods are non-functional and throw @B_java#lang#UnsupportedOperationException_E@. Tests can extend this class to implement behavior needed for tests."}