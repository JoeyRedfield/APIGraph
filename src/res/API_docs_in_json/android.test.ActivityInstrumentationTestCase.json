{"Functions": {"setUp()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sets up the fixture, for example, open a network connection. This method is called before a test is executed.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "protected void setUp ()"}, "ActivityInstrumentationTestCase(java.lang.String,java.lang.Class<T>,boolean)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: ignored - no longer in use."], ["@B_java#lang#Class_E@", "Class: The activity to test. This must be a class in the instrumentation targetPackage specified in the AndroidManifest.xml"], ["boolean", "boolean: true = in touch mode"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#test#ActivityInstrumentationTestCase_E@.", "history": "Added in API level 1", "FullName": "public ActivityInstrumentationTestCase (String pkg, Class<T> activityClass, boolean initialTouchMode)"}, "tearDown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Make sure all resources are cleaned up and garbage collected before moving on to the next test. Subclasses that override this method should make sure they call super.tearDown() at the end of the overriding method.", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "protected void tearDown ()"}, "testActivityTestCaseSetUpProperly()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Exception_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public void testActivityTestCaseSetUpProperly ()"}, "getActivity()": {"Returns": [["T", "Returns the activity under test."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 3", "FullName": "public T getActivity ()"}, "ActivityInstrumentationTestCase(java.lang.String,java.lang.Class<T>)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: ignored - no longer in use."], ["@B_java#lang#Class_E@", "Class: The activity to test. This must be a class in the instrumentation targetPackage specified in the AndroidManifest.xml"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates an @B_android#test#ActivityInstrumentationTestCase_E@ in non-touch mode.", "history": "Added in API level 1", "FullName": "public ActivityInstrumentationTestCase (String pkg, Class<T> activityClass)"}}, "Inheritance": ["@B_junit#framework#Assert_E@", "@B_junit#framework#TestCase_E@", "@B_android#test#InstrumentationTestCase_E@", "@B_android#test#ActivityTestCase_E@"], "ClassName": "@B_android#app#Activity_E@", "ClassDesc": "new tests should be written using @B_android#test#ActivityInstrumentationTestCase2_E@, which provides more options for configuring the Activity under test This class provides functional testing of a single activity. The activity under test will be created using the system infrastructure (by calling InstrumentationTestCase.launchActivity()) and you will then be able to manipulate your Activity directly. Most of the work is handled automatically here by @B_android#test#ActivityInstrumentationTestCase#setUp_E@ and @B_android#test#ActivityInstrumentationTestCase#tearDown_E@. If you prefer an isolated unit test, see @B_android#test#ActivityUnitTestCase_E@."}