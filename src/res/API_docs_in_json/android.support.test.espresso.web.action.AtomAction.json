{"Functions": {"getDescription()": {"Returns": [["String", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a description of the view action. The description should not be overly long and should fit nicely in a sentence like: \"performing %description% action on view with id ...\"", "history": "", "FullName": "String getDescription ()"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["E", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["TimeUnit", "TimeUnit no parameter comment"]], "Throws": [["ExecutionException", ""], ["InterruptedException", ""], ["TimeoutException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Blocks until the atom has completed execution with a configurable timeout.", "history": "", "FullName": "E get (long val, TimeUnit unit)"}, "getFuture()": {"Returns": [["Future<E>", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return a Future, which will be set and transformed from futureEval. Espresso's public API cannot have guava types in its method signatures, so return Future instead of ListenableFuture or SettableFuture.", "history": "", "FullName": "Future<E> getFuture ()"}, "getConstraints()": {"Returns": [["Matcher<View>", "a Matcher that will be tested prior to calling perform."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A mechanism for ViewActions to specify what type of views they can operate on. A ViewAction can demand that the view passed to perform meets certain constraints. For example it may want to ensure the view is already in the viewable physical screen of the device or is of a certain type.", "history": "", "FullName": "Matcher<View> getConstraints ()"}, "get()": {"Returns": [["E", "no returns description in source"]], "Parameters": [], "Throws": [["ExecutionException", ""], ["InterruptedException", ""]], "SeeAlso": [], "Permissions": [], "Description": "Blocks until the atom has completed execution.", "history": "", "FullName": "E get ()"}}, "Inheritance": ["https:##developer#android#com@B_java#lang#Object_E@"], "ClassName": "android.support.test.espresso.web.action.AtomAction<E>", "ClassDesc": "A ViewAction which causes the provided Atom to be evaluated within a webview. It is not recommended to use AtomAction directly. Instead for examples of how to interact with a WebView's content through Atoms. If you must use AtomAction directly, take care to remember that they are Stateful (unlike most ViewActions) and the caller must call @B_android#support#test#espresso#web#action#AtomAction#get_E@ to ensure that the action has completed."}