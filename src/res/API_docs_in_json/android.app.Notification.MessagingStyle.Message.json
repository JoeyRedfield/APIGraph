{"Functions": {"getTimestamp()": {"Returns": [["long", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the time at which this message arrived", "history": "Added in API level 24", "FullName": "public long getTimestamp ()"}, "getDataUri()": {"Returns": [["@B_android#net#Uri_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#app#Notification#MessagingStyle#Message#getText_E@"], "Permissions": [], "Description": "Get the Uri pointing to the content of the message. Can be null, in which case is used.", "history": "Added in API level 24", "FullName": "public Uri getDataUri ()"}, "setData(java.lang.String,android.net.Uri)": {"Returns": [["@B_android#app#Notification#MessagingStyle#Message_E@", "this object for method chaining"]], "Parameters": [["@B_java#lang#String_E@", "String: The MIME type of the content. See for the list of supported MIME types on Android and Android Wear."], ["@B_android#net#Uri_E@", "Uri: The uri containing the content whose type is given by the MIME type. Notification Listeners including the System UI need permission to access the data the Uri points to. The recommended ways to do this are: Store the data in your own ContentProvider, making sure that other apps have the correct permission to access your provider. The preferred mechanism for providing access is to use per-URI permissions which are temporary and only grant access to the receiving application. An easy way to create a ContentProvider like this is to use the FileProvider helper class. Use the system MediaStore. The MediaStore is primarily aimed at video, audio and image MIME types, however beginning with Android 3.0 (API level 11) it can also store non-media types (see MediaStore.Files for more info). Files can be inserted into the MediaStore using scanFile() after which a content:// style Uri suitable for sharing is passed to the provided onScanCompleted() callback. Note that once added to the system MediaStore the content is accessible to any app on the device."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a binary blob of data and an associated MIME type for a message. In the case where the platform doesn't support the MIME type, the original text provided in the constructor will be used.", "history": "Added in API level 24", "FullName": "public Notification.MessagingStyle.Message setData (String dataMimeType, Uri dataUri)"}, "getSenderPerson()": {"Returns": [["@B_android#app#Person_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the sender associated with this message.", "history": "Added in API level 28", "FullName": "public Person getSenderPerson ()"}, "getExtras()": {"Returns": [["@B_android#os#Bundle_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the extras Bundle for this message.", "history": "Added in API level 26", "FullName": "public Bundle getExtras ()"}, "Notification.MessagingStyle.Message(java.lang.CharSequence,long,android.app.Person)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: A @B_java#lang#CharSequence_E@ to be displayed as the message content This value must never be null."], ["long", "long: Time at which the message arrived"], ["@B_android#app#Person_E@", "Person: The @B_android#app#Person_E@ who sent the message. Should be null for messages by the current user, in which case the platform will insert the user set in MessagingStyle(Person). The person provided should contain an Icon, set with Person.Builder#setIcon(Icon) and also have a name provided with Person.Builder#setName(CharSequence). If multiple users have the same name, consider providing a key with Person.Builder#setKey(String) in order to differentiate between the different users. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor", "history": "Added in API level 28", "FullName": "public Notification.MessagingStyle.Message (CharSequence text, long timestamp, Person sender)"}, "getSender()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use @B_android#app#Notification#MessagingStyle#Message#getSenderPerson_E@ Get the text used to display the contact's name in the messaging experience", "history": "Added in API level 24 Deprecated in API level 28", "FullName": "public CharSequence getSender ()"}, "getDataMimeType()": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the MIME type of the data pointed to by the Uri", "history": "Added in API level 24", "FullName": "public String getDataMimeType ()"}, "Notification.MessagingStyle.Message(java.lang.CharSequence,long,java.lang.CharSequence)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: A @B_java#lang#CharSequence_E@ to be displayed as the message content"], ["long", "long: Time at which the message arrived"], ["@B_java#lang#CharSequence_E@", "CharSequence: A @B_java#lang#CharSequence_E@ to be used for displaying the name of the sender. Should be null for messages by the current user, in which case the platform will insert @B_android#app#Notification#MessagingStyle#getUserDisplayName_E@. Should be unique amongst all individuals in the conversation, and should be consistent during re-posts of the notification."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "use Message(CharSequence, long, Person) Constructor", "history": "Added in API level 24", "FullName": "public Notification.MessagingStyle.Message (CharSequence text, long timestamp, CharSequence sender)"}, "getText()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the text to be used for this message, or the fallback text if a type and content Uri have been set", "history": "Added in API level 24", "FullName": "public CharSequence getText ()"}, "setData(java.lang.String, android.net.Uri)": {"Returns": [["@B_android#app#Notification#MessagingStyle#Message_E@", "this object for method chaining"]], "Parameters": [["@B_java#lang#String_E@", "String: The MIME type of the content. See for the list of supported MIME types on Android and Android Wear."], ["@B_android#net#Uri_E@", "Uri: The uri containing the content whose type is given by the MIME type. Notification Listeners including the System UI need permission to access the data the Uri points to. The recommended ways to do this are: Store the data in your own ContentProvider, making sure that other apps have the correct permission to access your provider. The preferred mechanism for providing access is to use per-URI permissions which are temporary and only grant access to the receiving application. An easy way to create a ContentProvider like this is to use the FileProvider helper class. Use the system MediaStore. The MediaStore is primarily aimed at video, audio and image MIME types, however beginning with Android 3.0 (API level 11) it can also store non-media types (see MediaStore.Files for more info). Files can be inserted into the MediaStore using scanFile() after which a content:// style Uri suitable for sharing is passed to the provided onScanCompleted() callback. Note that once added to the system MediaStore the content is accessible to any app on the device."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets a binary blob of data and an associated MIME type for a message. In the case where the platform doesn't support the MIME type, the original text provided in the constructor will be used.", "history": "added in API level 24", "FullName": "public Notification.MessagingStyle.Message setData (String dataMimeType, Uri dataUri)"}}, "Inheritance": [], "ClassName": "android.app.Notification.MessagingStyle.Message", "ClassDesc": ""}