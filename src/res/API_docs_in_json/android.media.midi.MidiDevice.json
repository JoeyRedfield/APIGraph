{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 23", "FullName": "public String toString ()"}, "openInputPort(int)": {"Returns": [["@B_android#media#midi#MidiInputPort_E@", "the @B_android#media#midi#MidiInputPort_E@ if the open is successful, or null in case of failure."]], "Parameters": [["int", "int: the number of the input port to open"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to open a @B_android#media#midi#MidiInputPort_E@ for the specified port number. An input port can only be used by one sender at a time. Opening an input port will fail if another application has already opened it for use. A @B_android#media#midi#MidiDeviceStatus_E@ can be used to determine if an input port is already open.", "history": "Added in API level 23", "FullName": "public MidiInputPort openInputPort (int portNumber)"}, "connectPorts(android.media.midi.MidiInputPort,int)": {"Returns": [["@B_android#media#midi#MidiDevice#MidiConnection_E@", "@B_android#media#midi#MidiDevice#MidiConnection_E@ object if the connection is successful, or null in case of failure."]], "Parameters": [["@B_android#media#midi#MidiInputPort_E@", "MidiInputPort: the inputPort to connect"], ["int", "int: the port number of the output port to connect inputPort to."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Connects the supplied @B_android#media#midi#MidiInputPort_E@ to the output port of this device with the specified port number. Once the connection is made, the MidiInput port instance can no longer receive data via its @B_android#media#midi#MidiReceiver#onSend_E@ method. This method returns a @B_android#media#midi#MidiDevice#MidiConnection_E@ object, which can be used to close the connection.", "history": "Added in API level 23", "FullName": "public MidiDevice.MidiConnection connectPorts (MidiInputPort inputPort, int outputPortNumber)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 23", "FullName": "protected void finalize ()"}, "openOutputPort(int)": {"Returns": [["@B_android#media#midi#MidiOutputPort_E@", "the @B_android#media#midi#MidiOutputPort_E@ if the open is successful, or null in case of failure."]], "Parameters": [["int", "int: the number of the output port to open"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called to open a @B_android#media#midi#MidiOutputPort_E@ for the specified port number. An output port may be opened by multiple applications.", "history": "Added in API level 23", "FullName": "public MidiOutputPort openOutputPort (int portNumber)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this stream and releases any system resources associated with it. If the stream is already closed then invoking this method has no effect. As noted in @B_java#lang#AutoCloseable#close_E@, cases where the close may fail require careful attention. It is strongly advised to relinquish the underlying resources and to internally mark the Closeable as closed, prior to throwing the IOException.", "history": "Added in API level 23", "FullName": "public void close ()"}, "getInfo()": {"Returns": [["@B_android#media#midi#MidiDeviceInfo_E@", "the @B_android#media#midi#MidiDeviceInfo_E@ object"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_android#media#midi#MidiDeviceInfo_E@ object, which describes this device.", "history": "Added in API level 23", "FullName": "public MidiDeviceInfo getInfo ()"}}, "Inheritance": [], "ClassName": "android.media.midi.MidiDevice", "ClassDesc": "This class is used for sending and receiving data to and from a MIDI device Instances of this class are created by @B_android#media#midi#MidiManager#openDevice_E@."}