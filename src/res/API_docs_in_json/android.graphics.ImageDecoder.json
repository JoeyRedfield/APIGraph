{"Functions": {"isDecodeAsAlphaMaskEnabled()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether to treat single channel input as alpha. This returns whether @B_android#graphics#ImageDecoder#setDecodeAsAlphaMaskEnabled_E@ was set to true. It may still return true even if the image has more than one channel and therefore will not be treated as an alpha mask.", "history": "Added in API level 28", "FullName": "public boolean isDecodeAsAlphaMaskEnabled ()"}, "setDecodeAsAlphaMaskEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify whether to potentially treat the output as an alpha mask. If this is set to true and the image is encoded in a format with only one channel, treat that channel as alpha. Otherwise this call has no effect. This is incompatible with @B_android#graphics#ImageDecoder#ALLOCATOR_HARDWARE_E@. Trying to combine them will result in @B_android#graphics#ImageDecoder#decodeDrawable_E@/ @B_android#graphics#ImageDecoder#decodeBitmap_E@ throwing an @B_java#lang#IllegalStateException_E@. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setDecodeAsAlphaMaskEnabled (boolean enabled)"}, "decodeDrawable(android.graphics.ImageDecoder.Source)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable for displaying the image. This value will never be null."]], "Parameters": [["@B_android#graphics#ImageDecoder#Source_E@", "ImageDecoder.Source: representing the encoded image. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if src is not found, is an unsupported format, or cannot be decoded for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#graphics#drawable#Drawable_E@ from a Source. Since there is no @B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@, the default settings will be used. In order to change any settings, call @B_android#graphics#ImageDecoder#decodeDrawable_E@ instead. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 28", "FullName": "public static Drawable decodeDrawable (ImageDecoder.Source src)"}, "setTargetSize(int, int)": {"Returns": [], "Parameters": [["int", "int: width in pixels of the output, must be greater than 0Value is 1 or greater."], ["int", "int: height in pixels of the output, must be greater than 0 Value is 1 or greater."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the size of the output @B_android#graphics#drawable#Drawable_E@ or @B_android#graphics#Bitmap_E@. By default, the output size will match the size of the encoded image, which can be retrieved from the @B_android#graphics#ImageDecoder#ImageInfo_E@ in @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@. This will sample or scale the output to an arbitrary size that may be smaller or larger than the encoded size. Only the last call to this or @B_android#graphics#ImageDecoder#setTargetSampleSize_E@ is respected. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "added in API level 28", "FullName": "public void setTargetSize (int width, int height)"}, "getOnPartialImageListener()": {"Returns": [["@B_android#graphics#ImageDecoder#OnPartialImageListener_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#graphics#ImageDecoder#OnPartialImageListener_E@ currently set.", "history": "Added in API level 28", "FullName": "public ImageDecoder.OnPartialImageListener getOnPartialImageListener ()"}, "setTargetSize(int,int)": {"Returns": [], "Parameters": [["int", "int: width in pixels of the output, must be greater than 0 This units of this value are pixels. Value is 1 or greater"], ["int", "int: height in pixels of the output, must be greater than 0 This units of this value are pixels. Value is 1 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the size of the output @B_android#graphics#drawable#Drawable_E@ or @B_android#graphics#Bitmap_E@. By default, the output size will match the size of the encoded image, which can be retrieved from the @B_android#graphics#ImageDecoder#ImageInfo_E@ in @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@. This will sample or scale the output to an arbitrary size that may be smaller or larger than the encoded size. Only the last call to this or @B_android#graphics#ImageDecoder#setTargetSampleSize_E@ is respected. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setTargetSize (int width, int height)"}, "setCrop(android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#graphics#Rect_E@", "Rect: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Crop the output to subset of the (possibly) scaled image. subset must be contained within the size set by @B_android#graphics#ImageDecoder#setTargetSize_E@ or the bounds of the image if setTargetSize was not called. Otherwise an @B_java#lang#IllegalStateException_E@ will be thrown by @B_android#graphics#ImageDecoder#decodeDrawable_E@/@B_android#graphics#ImageDecoder#decodeBitmap_E@. NOT intended as a replacement for @B_android#graphics#BitmapRegionDecoder#decodeRegion_E@. This supports all formats, but merely crops the output. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setCrop (Rect subset)"}, "getMemorySizePolicy()": {"Returns": [["int", "Value is @B_android#graphics#ImageDecoder#MEMORY_POLICY_DEFAULT_E@, or @B_android#graphics#ImageDecoder#MEMORY_POLICY_LOW_RAM_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the memory policy for the decoded @B_android#graphics#Bitmap_E@.", "history": "Added in API level 28", "FullName": "public int getMemorySizePolicy ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Closes this resource, relinquishing any underlying resources. This method is invoked automatically on objects managed by the try-with-resources statement. This is an implementation detail of @B_android#graphics#ImageDecoder_E@, and should never be called manually.", "history": "Added in API level 28", "FullName": "public void close ()"}, "isUnpremultipliedRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the @B_android#graphics#Bitmap_E@ will have unpremultiplied pixels.", "history": "Added in API level 28", "FullName": "public boolean isUnpremultipliedRequired ()"}, "createSource(android.content.ContentResolver,android.net.Uri)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_android#content#ContentResolver_E@", "ContentResolver: to retrieve from. This value must never be null."], ["@B_android#net#Uri_E@", "Uri: of the image file. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a @B_android#net#Uri_E@. content (@B_android#content#ContentResolver#SCHEME_CONTENT_E@) android.resource (@B_android#content#ContentResolver#SCHEME_ANDROID_RESOURCE_E@) file (@B_android#content#ContentResolver#SCHEME_FILE_E@) This method is safe to call from any thread.", "history": "Added in API level 28", "FullName": "public static ImageDecoder.Source createSource (ContentResolver cr, Uri uri)"}, "createSource(android.content.res.Resources,int)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: the @B_android#content#res#Resources_E@ object containing the image data. This value must never be null."], ["int", "int: resource ID of the image data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a resource. This method is safe to call from any thread.", "history": "Added in API level 28", "FullName": "public static ImageDecoder.Source createSource (Resources res, int resId)"}, "decodeBitmap(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)": {"Returns": [["@B_android#graphics#Bitmap_E@", "Bitmap containing the image. This value will never be null."]], "Parameters": [["@B_android#graphics#ImageDecoder#Source_E@", "ImageDecoder.Source: representing the encoded image. This value must never be null."], ["@B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@", "ImageDecoder.OnHeaderDecodedListener: for learning the @B_android#graphics#ImageDecoder#ImageInfo_E@ and changing any default settings on the ImageDecoder. This will be called on the same thread as decodeBitmap before that method returns. This is required in order to change any of the default settings. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if src is not found, is an unsupported format, or cannot be decoded for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#graphics#Bitmap_E@ from a Source. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 28", "FullName": "public static Bitmap decodeBitmap (ImageDecoder.Source src, ImageDecoder.OnHeaderDecodedListener listener)"}, "setPostProcessor(android.graphics.PostProcessor)": {"Returns": [], "Parameters": [["@B_android#graphics#PostProcessor_E@", "PostProcessor: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Modify the image after decoding and scaling. This allows adding effects prior to returning a @B_android#graphics#drawable#Drawable_E@ or @B_android#graphics#Bitmap_E@. For a Drawable or an immutable Bitmap, this is the only way to process the image after decoding. If combined with @B_android#graphics#ImageDecoder#setTargetSize_E@ and/or @B_android#graphics#ImageDecoder#setCrop_E@, @B_android#graphics#PostProcessor#onPostProcess_E@ occurs last. If set on a nine-patch image, the nine-patch data is ignored. For an animated image, the drawing commands drawn on the @B_android#graphics#Canvas_E@ will be recorded immediately and then applied to each frame. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setPostProcessor (PostProcessor postProcessor)"}, "setTargetSampleSize(int)": {"Returns": [], "Parameters": [["int", "int: sampling rate of the encoded image. Value is 1 or greater"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the target size with a sampleSize. By default, the output size will match the size of the encoded image, which can be retrieved from the @B_android#graphics#ImageDecoder#ImageInfo_E@ in @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@. Requests the decoder to subsample the original image, returning a smaller image to save memory. The sampleSize is the number of pixels in either dimension that correspond to a single pixel in the output. For example, sampleSize == 4 returns an image that is 1/4 the width/height of the original, and 1/16 the number of pixels. Must be greater than or equal to 1. This has the same effect as calling @B_android#graphics#ImageDecoder#setTargetSize_E@ with dimensions based on the sampleSize. Unlike dividing the original width and height by the sampleSize manually, calling this method allows ImageDecoder to round in the direction that it can do most efficiently. Only the last call to this or @B_android#graphics#ImageDecoder#setTargetSize_E@ is respected. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setTargetSampleSize (int sampleSize)"}, "createSource(java.io.File)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_java#io#File_E@", "File: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a @B_java#io#File_E@. This method is safe to call from any thread.", "history": "Added in API level 28", "FullName": "public static ImageDecoder.Source createSource (File file)"}, "setTargetColorSpace(android.graphics.ColorSpace)": {"Returns": [], "Parameters": [["@B_android#graphics#ColorSpace_E@", "ColorSpace no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the desired @B_android#graphics#ColorSpace_E@ for the output. If non-null, the decoder will try to decode into colorSpace. If it is null, which is the default, or the request cannot be met, the decoder will pick either the color space embedded in the image or the @B_android#graphics#ColorSpace_E@ best suited for the requested image configuration (for instance @B_android#graphics#ColorSpace#Named#SRGB_E@ for the @B_android#graphics#Bitmap#Config#ARGB_8888_E@ configuration and @B_android#graphics#ColorSpace#Named#EXTENDED_SRGB_E@ for @B_android#graphics#Bitmap#Config#RGBA_F16_E@). Only @B_android#graphics#ColorSpace#Model#RGB_E@ color spaces are currently supported. An IllegalArgumentException will be thrown by @B_android#graphics#ImageDecoder#decodeDrawable_E@/ @B_android#graphics#ImageDecoder#decodeBitmap_E@ when setting a non-RGB color space such as @B_android#graphics#ColorSpace#Named#CIE_LAB_E@. The specified color space's transfer function must be an @B_android#graphics#ColorSpace#Rgb#TransferParameters_E@. An IllegalArgumentException will be thrown by the decode methods if calling @B_android#graphics#ColorSpace#Rgb#getTransferParameters_E@ on the specified color space returns null. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setTargetColorSpace (ColorSpace colorSpace)"}, "setAllocator(int)": {"Returns": [], "Parameters": [["int", "int: Type of allocator to use. Value is @B_android#graphics#ImageDecoder#ALLOCATOR_DEFAULT_E@, @B_android#graphics#ImageDecoder#ALLOCATOR_SOFTWARE_E@, @B_android#graphics#ImageDecoder#ALLOCATOR_SHARED_MEMORY_E@, or @B_android#graphics#ImageDecoder#ALLOCATOR_HARDWARE_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Choose the backing for the pixel memory. This is ignored for animated drawables. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setAllocator (int allocator)"}, "setMemorySizePolicy(int)": {"Returns": [], "Parameters": [["int", "int: Value is @B_android#graphics#ImageDecoder#MEMORY_POLICY_DEFAULT_E@, or @B_android#graphics#ImageDecoder#MEMORY_POLICY_LOW_RAM_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify the memory policy for the decoded @B_android#graphics#Bitmap_E@. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setMemorySizePolicy (int policy)"}, "createSource(android.content.res.AssetManager,java.lang.String)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "This value will never be null."]], "Parameters": [["@B_android#content#res#AssetManager_E@", "AssetManager: This value must never be null."], ["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a file in the \"assets\" directory. This method is safe to call from any thread.", "history": "Added in API level 28", "FullName": "public static ImageDecoder.Source createSource (AssetManager assets, String fileName)"}, "setMutableRequired(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify whether the @B_android#graphics#Bitmap_E@ should be mutable. By default, a @B_android#graphics#Bitmap_E@ created by @B_android#graphics#ImageDecoder#decodeBitmap_E@ will be immutable i.e. @B_android#graphics#Bitmap#isMutable_E@ returns false. This can be changed with setMutableRequired(true). Mutable Bitmaps are incompatible with @B_android#graphics#ImageDecoder#ALLOCATOR_HARDWARE_E@, because @B_android#graphics#Bitmap#Config#HARDWARE_E@ Bitmaps cannot be mutable. Attempting to combine them will throw an @B_java#lang#IllegalStateException_E@. Mutable Bitmaps are also incompatible with @B_android#graphics#ImageDecoder#decodeDrawable_E@, which would require retrieving the Bitmap from the returned Drawable in order to modify. Attempting to decode a mutable @B_android#graphics#drawable#Drawable_E@ will throw an @B_java#lang#IllegalStateException_E@. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setMutableRequired (boolean mutable)"}, "getCrop()": {"Returns": [["@B_android#graphics#Rect_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the cropping rectangle, if set.", "history": "Added in API level 28", "FullName": "public Rect getCrop ()"}, "getAllocator()": {"Returns": [["int", "Value is @B_android#graphics#ImageDecoder#ALLOCATOR_DEFAULT_E@, @B_android#graphics#ImageDecoder#ALLOCATOR_SOFTWARE_E@, @B_android#graphics#ImageDecoder#ALLOCATOR_SHARED_MEMORY_E@, or @B_android#graphics#ImageDecoder#ALLOCATOR_HARDWARE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the allocator for the pixel memory.", "history": "Added in API level 28", "FullName": "public int getAllocator ()"}, "createSource(java.nio.ByteBuffer)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_java#nio#ByteBuffer_E@", "ByteBuffer: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a @B_java#nio#ByteBuffer_E@. Decoding will start from @B_java#nio#Buffer#position_E@. The position of buffer will not be affected. Note: If this Source is passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@, and the encoded image is animated, the returned @B_android#graphics#drawable#AnimatedImageDrawable_E@ will continue reading from the buffer, so its contents must not be modified, even after the AnimatedImageDrawable is returned. buffer's contents should never be modified during decode. This method is safe to call from any thread.", "history": "Added in API level 28", "FullName": "public static ImageDecoder.Source createSource (ByteBuffer buffer)"}, "isMutableRequired()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether the decoded @B_android#graphics#Bitmap_E@ will be mutable.", "history": "Added in API level 28", "FullName": "public boolean isMutableRequired ()"}, "isMimeTypeSupported(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return if the given MIME type is a supported file format that can be decoded by this class. This can be useful to determine if a file can be decoded directly, or if it needs to be converted into a more general format using an API like @B_android#content#ContentResolver#openTypedAssetFile_E@.", "history": "Added in API level 29", "FullName": "public static boolean isMimeTypeSupported (String mimeType)"}, "getPostProcessor()": {"Returns": [["@B_android#graphics#PostProcessor_E@", "This value may be null."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the @B_android#graphics#PostProcessor_E@ currently set.", "history": "Added in API level 28", "FullName": "public PostProcessor getPostProcessor ()"}, "decodeDrawable(android.graphics.ImageDecoder.Source,android.graphics.ImageDecoder.OnHeaderDecodedListener)": {"Returns": [["@B_android#graphics#drawable#Drawable_E@", "Drawable for displaying the image. This value will never be null."]], "Parameters": [["@B_android#graphics#ImageDecoder#Source_E@", "ImageDecoder.Source: representing the encoded image. This value must never be null."], ["@B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@", "ImageDecoder.OnHeaderDecodedListener: for learning the @B_android#graphics#ImageDecoder#ImageInfo_E@ and changing any default settings on the ImageDecoder. This will be called on the same thread as decodeDrawable before that method returns. This is required in order to change any of the default settings. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if src is not found, is an unsupported format, or cannot be decoded for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#graphics#drawable#Drawable_E@ from a Source. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 28", "FullName": "public static Drawable decodeDrawable (ImageDecoder.Source src, ImageDecoder.OnHeaderDecodedListener listener)"}, "setOnPartialImageListener(android.graphics.ImageDecoder.OnPartialImageListener)": {"Returns": [], "Parameters": [["@B_android#graphics#ImageDecoder#OnPartialImageListener_E@", "ImageDecoder.OnPartialImageListener: This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set (replace) the @B_android#graphics#ImageDecoder#OnPartialImageListener_E@ on this object. Will be called if there is an error in the input. Without one, an error will result in an Exception being thrown. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setOnPartialImageListener (ImageDecoder.OnPartialImageListener listener)"}, "createSource(java.util.concurrent.Callable<android.content.res.AssetFileDescriptor>)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a @B_java#util#concurrent#Callable_E@ that returns a new @B_android#content#res#AssetFileDescriptor_E@ for each request. This provides control over how the @B_android#content#res#AssetFileDescriptor_E@ is created, such as passing options into @B_android#content#ContentResolver#openTypedAssetFileDescriptor_E@, or enabling use of a @B_android#os#CancellationSignal_E@. It's important for the given @B_java#util#concurrent#Callable_E@ to return a new, unique @B_android#content#res#AssetFileDescriptor_E@ for each invocation, to support reuse of the returned @B_android#graphics#ImageDecoder#Source_E@. This method is safe to call from any thread.", "history": "Added in API level 29", "FullName": "public static ImageDecoder.Source createSource (Callable<AssetFileDescriptor> callable)"}, "finalize()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#Throwable_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Called by the garbage collector on an object when garbage collection determines that there are no more references to the object. A subclass overrides the finalize method to dispose of system resources or to perform other cleanup. The general contract of finalize is that it is invoked if and when the Java\u2122 virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The finalize method may take any action, including making this object available again to other threads; the usual purpose of finalize, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded. The finalize method of class Object performs no special action; it simply returns normally. Subclasses of Object may override this definition. The Java programming language does not guarantee which thread will invoke the finalize method for any given object. It is guaranteed, however, that the thread that invokes finalize will not be holding any user-visible synchronization locks when finalize is invoked. If an uncaught exception is thrown by the finalize method, the exception is ignored and finalization of that object terminates. After the finalize method has been invoked for an object, no further action is taken until the Java virtual machine has again determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, including possible actions by other objects or classes which are ready to be finalized, at which point the object may be discarded. The finalize method is never invoked more than once by a Java virtual machine for any given object. Any exception thrown by the finalize method causes the finalization of this object to be halted, but is otherwise ignored.", "history": "Added in API level 28", "FullName": "protected void finalize ()"}, "decodeBitmap(android.graphics.ImageDecoder.Source)": {"Returns": [["@B_android#graphics#Bitmap_E@", "Bitmap containing the image. This value will never be null."]], "Parameters": [["@B_android#graphics#ImageDecoder#Source_E@", "ImageDecoder.Source: representing the encoded image. This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", "if src is not found, is an unsupported format, or cannot be decoded for any reason."]], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#graphics#Bitmap_E@ from a Source. Since there is no @B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@, the default settings will be used. In order to change any settings, call @B_android#graphics#ImageDecoder#decodeBitmap_E@ instead. This method may take several seconds to complete, so it should only be called from a worker thread.", "history": "Added in API level 28", "FullName": "public static Bitmap decodeBitmap (ImageDecoder.Source src)"}, "createSource(android.content.res.Resources, int)": {"Returns": [["@B_android#graphics#ImageDecoder#Source_E@", "a new Source object, which can be passed to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. This value will never be null."]], "Parameters": [["@B_android#content#res#Resources_E@", "Resources: the @B_android#content#res#Resources_E@ object containing the image data.This value must never be null."], ["int", "int: resource ID of the image data."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new @B_android#graphics#ImageDecoder#Source_E@ from a resource.This method is safe to call from any thread.", "history": "added in API level 28", "FullName": "public static ImageDecoder.Source createSource (Resources res, int resId)"}, "setUnpremultipliedRequired(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Specify whether the @B_android#graphics#Bitmap_E@ should have unpremultiplied pixels. By default, ImageDecoder will create a @B_android#graphics#Bitmap_E@ with premultiplied pixels, which is required for drawing with the @B_android#view#View_E@ system (i.e. to a @B_android#graphics#Canvas_E@). Calling this method with a value of true will result in @B_android#graphics#ImageDecoder#decodeBitmap_E@ returning a @B_android#graphics#Bitmap_E@ with unpremultiplied pixels. See @B_android#graphics#Bitmap#isPremultiplied_E@. This is incompatible with @B_android#graphics#ImageDecoder#decodeDrawable_E@; attempting to decode an unpremultiplied @B_android#graphics#drawable#Drawable_E@ will throw an @B_java#lang#IllegalStateException_E@. Like all setters on ImageDecoder, this must be called inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@.", "history": "Added in API level 28", "FullName": "public void setUnpremultipliedRequired (boolean unpremultipliedRequired)"}}, "Inheritance": [], "ClassName": "android.graphics.ImageDecoder", "ClassDesc": "A class for converting encoded images (like PNG, JPEG, WEBP, GIF, or HEIF) into @B_android#graphics#drawable#Drawable_E@ or @B_android#graphics#Bitmap_E@ objects. To use it, first create a @B_android#graphics#ImageDecoder#Source_E@ using one of the createSource overloads. For example, to decode from a @B_java#io#File_E@, call @B_android#graphics#ImageDecoder#createSource_E@ and pass the result to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@: To change the default settings, pass the @B_android#graphics#ImageDecoder#Source_E@ and an @B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@ to @B_android#graphics#ImageDecoder#decodeDrawable_E@ or @B_android#graphics#ImageDecoder#decodeBitmap_E@. For example, to create a sampled image with half the width and height of the original image, call @B_android#graphics#ImageDecoder#setTargetSampleSize_E@ inside @B_android#graphics#ImageDecoder#OnHeaderDecodedListener#onHeaderDecoded_E@: The @B_android#graphics#ImageDecoder#ImageInfo_E@ contains information about the encoded image, like its width and height, and the @B_android#graphics#ImageDecoder#Source_E@ can be used to match to a particular @B_android#graphics#ImageDecoder#Source_E@ if a single @B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@ is used with multiple @B_android#graphics#ImageDecoder#Source_E@ objects. The @B_android#graphics#ImageDecoder#OnHeaderDecodedListener_E@ can also be implemented as a lambda: If the encoded image is an animated GIF or WEBP, @B_android#graphics#ImageDecoder#decodeDrawable_E@ will return an @B_android#graphics#drawable#AnimatedImageDrawable_E@. To start its animation, call @B_android#graphics#drawable#AnimatedImageDrawable#start_E@: By default, a @B_android#graphics#Bitmap_E@ created by @B_android#graphics#ImageDecoder_E@ (including one that is inside a @B_android#graphics#drawable#Drawable_E@) will be immutable (i.e. @B_android#graphics#Bitmap#isMutable_E@ returns false), and it will typically have Config @B_android#graphics#Bitmap#Config#HARDWARE_E@. Although these properties can be changed with @B_android#graphics#ImageDecoder#setMutableRequired_E@ (which is only compatible with @B_android#graphics#ImageDecoder#decodeBitmap_E@ and @B_android#graphics#ImageDecoder#decodeBitmap_E@) and @B_android#graphics#ImageDecoder#setAllocator_E@, it is also possible to apply custom effects regardless of the mutability of the final returned object by passing a @B_android#graphics#PostProcessor_E@ to @B_android#graphics#ImageDecoder#setPostProcessor_E@. A @B_android#graphics#PostProcessor_E@ can also be a lambda: If the encoded image is incomplete or contains an error, or if an @B_java#lang#Exception_E@ occurs during decoding, a @B_android#graphics#ImageDecoder#DecodeException_E@ will be thrown. In some cases, the @B_android#graphics#ImageDecoder_E@ may have decoded part of the image. In order to display the partial image, an @B_android#graphics#ImageDecoder#OnPartialImageListener_E@ must be passed to @B_android#graphics#ImageDecoder#setOnPartialImageListener_E@. For example:"}