{"Functions": {"newValidator()": {"Returns": [["@B_javax#xml#validation#Validator_E@", "Always return a non-null valid object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_javax#xml#validation#Validator_E@ for this @B_javax#xml#validation#Schema_E@. A validator enforces/checks the set of constraints this object represents.", "history": "Added in API level 8", "FullName": "public abstract Validator newValidator ()"}, "newValidatorHandler()": {"Returns": [["@B_javax#xml#validation#ValidatorHandler_E@", "Always return a non-null valid object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new @B_javax#xml#validation#ValidatorHandler_E@ for this @B_javax#xml#validation#Schema_E@.", "history": "Added in API level 8", "FullName": "public abstract ValidatorHandler newValidatorHandler ()"}, "Schema()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor for the derived class. The constructor does nothing.", "history": "Added in API level 8", "FullName": "protected Schema ()"}}, "Inheritance": [], "ClassName": "javax.xml.validation.Schema", "ClassDesc": "Immutable in-memory representation of grammar. This object represents a set of constraints that can be checked/ enforced against an XML document. A @B_javax#xml#validation#Schema_E@ object is thread safe and applications are encouraged to share it across many parsers in many threads. A @B_javax#xml#validation#Schema_E@ object is immutable in the sense that it shouldn't change the set of constraints once it is created. In other words, if an application validates the same document twice against the same @B_javax#xml#validation#Schema_E@, it must always produce the same result. A @B_javax#xml#validation#Schema_E@ object is usually created from @B_javax#xml#validation#SchemaFactory_E@. Two kinds of validators can be created from a @B_javax#xml#validation#Schema_E@ object. One is @B_javax#xml#validation#Validator_E@, which provides highly-level validation operations that cover typical use cases. The other is @B_javax#xml#validation#ValidatorHandler_E@, which works on top of SAX for better modularity. This specification does not refine the @B_java#lang#Object#equals_E@ method. In other words, if you parse the same schema twice, you may still get !schemaA.equals(schemaB)."}