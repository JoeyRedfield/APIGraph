{"Functions": {"getTurnStatus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getTurnStatus ()"}, "getStatus()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getStatus ()"}, "getLastUpdatedTimestamp()": {"Returns": [["", "The server timestamp at which the match was last modified."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the timestamp at which the match was last modified.", "history": "", "FullName": "public long getLastUpdatedTimestamp ()"}, "getAutoMatchCriteria()": {"Returns": [["", "A bundle containing the automatch criteria for this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves the automatch criteria used to create or join this match, if any. May be null if the match has no automatch properties.", "history": "", "FullName": "public Bundle getAutoMatchCriteria ()"}, "getAvailableAutoMatchSlots()": {"Returns": [["", "The maximum number of additional players that can be added to this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the maximum number of available automatch slots for this match. If automatch criteria were not specified during match creation, or if all slots have been filled, this will return 0.", "history": "", "FullName": "public int getAvailableAutoMatchSlots ()"}, "canRematch()": {"Returns": [["", "Whether or not this match can be rematched."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether or not this match can be rematched. This will return true when the match has complete and has not already been rematched.", "history": "", "FullName": "public boolean canRematch ()"}, "getGame()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public Game getGame ()"}, "describeContents()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int describeContents ()"}, "getDescriptionParticipant()": {"Returns": [["", "The participant representing the primary opponent in the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the participant representing the primary opponent in the match. Note that this will return null if there is no primary opponent. This could happen if an automatch slot has not been filled.", "history": "", "FullName": "public Participant getDescriptionParticipant ()"}, "getParticipant(java.lang.String)": {"Returns": [["", "The participant corresponding to the given ID."]], "Parameters": [["String", "Match-local ID of the participant to retrieve status for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a participant in a match by its ID. Note that the participant ID must correspond to a participant in this match, or this method will throw an exception.", "history": "", "FullName": "public Participant getParticipant (String participantId)"}, "getData()": {"Returns": [["", "Byte array representing the current (game-specific) match state data."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current (game-specific) data for this match.", "history": "", "FullName": "public byte[] getData ()"}, "getPreviousMatchData()": {"Returns": [["", "Byte array of data from the previous match of a rematch, or null if not available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match data from the previous match, if available. Note that this is only provided on the first turn of a rematched match.", "history": "", "FullName": "public byte[] getPreviousMatchData ()"}, "getDescriptionParticipantId()": {"Returns": [["", "The participant ID of the primary opponent in the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the ID of another participant in the match that can be used when describing the participants the user is playing with. For example, in a four player match this might be used to state \"Martha (and 2 others)\". Note that this will return null if there is no primary opponent. This could happen if an automatch slot has not been filled.", "history": "", "FullName": "public String getDescriptionParticipantId ()"}, "equals(java.lang.Object)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public boolean equals (Object obj)"}, "getPendingParticipantId()": {"Returns": [["", "The ID of the participant that is considered pending, if any. Returns null if no participant is pending."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ID of the participant that is considered pending. If no participant is considered pending (ie, the match is over, etc), this function will return null.", "history": "", "FullName": "public String getPendingParticipantId ()"}, "getMatchId()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getMatchId ()"}, "getCreationTimestamp()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public long getCreationTimestamp ()"}, "isDataValid()": {"Returns": [["", "whether or not the object is valid for use."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Check to see if this object is valid for use. If the object is still volatile, this method will indicate whether or not the object can be safely used. The output of a call to @B_com#google#android#gms#common#data#Freezable#freeze_E@ will always be valid.", "history": "", "FullName": "public boolean isDataValid ()"}, "isLocallyModified()": {"Returns": [["", "Whether this match has local modifications or not."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return whether or not this match has been locally modified. If this is true, the local device has match state which has not successfully synced to the server yet. In this state, further mutations to the match will fail with a status of @B_com#google#android#gms#games#GamesStatusCodes#STATUS_MATCH_ERROR_LOCALLY_MODIFIED_E@.", "history": "", "FullName": "public boolean isLocallyModified ()"}, "getRematchId()": {"Returns": [["", "The match ID of the rematch, or null if no rematch exists."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match ID of the rematch that was created from this match, if any. This will only be non-null if a rematch has been created.", "history": "", "FullName": "public String getRematchId ()"}, "getMatchNumber()": {"Returns": [["", "The match sequence number for this match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the match sequence number for this match. This number starts at 1, and increases every time a rematch is created.", "history": "", "FullName": "public int getMatchNumber ()"}, "getCreatorId()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getCreatorId ()"}, "getDescription()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String getDescription ()"}, "writeToParcel(android.os.Parcel, int)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public void writeToParcel (Parcel out, int flags)"}, "freeze()": {"Returns": [["", "A concrete implementation of the data object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freeze a volatile representation into an immutable representation. Objects returned from this call are safe to cache. Note that the output of freeze may not be identical to the parent object, but should be equal. In other words:", "history": "", "FullName": "public TurnBasedMatch freeze ()"}, "getVersion()": {"Returns": [["", "The current version of the match."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the current version of the match.", "history": "", "FullName": "public int getVersion ()"}, "toString()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public String toString ()"}, "getDescription(android.database.CharArrayBuffer)": {"Returns": [], "Parameters": [["CharArrayBuffer", "The buffer to load the data into."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Loads the match description into the given @B_android#database#CharArrayBuffer_E@.", "history": "", "FullName": "public void getDescription (CharArrayBuffer dataOut)"}, "getLastUpdaterId()": {"Returns": [["", "The ID of the last participant who updated this Match object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the ID of the participant who updated the match most recently.", "history": "", "FullName": "public String getLastUpdaterId ()"}, "getParticipantIds()": {"Returns": [["", "The IDs of the participants in this match. These are returned in the participant order of the match. Note that these are not stable across matches."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the IDs of the participants of the given match.", "history": "", "FullName": "public ArrayList<String> getParticipantIds ()"}, "getVariant()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int getVariant ()"}, "getParticipantStatus(java.lang.String)": {"Returns": [["", "The current status of the participant in this match. One of @B_com#google#android#gms#games#multiplayer#Participant#STATUS_INVITED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_JOINED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_DECLINED_E@, @B_com#google#android#gms#games#multiplayer#Participant#STATUS_LEFT_E@, or @B_com#google#android#gms#games#multiplayer#Participant#STATUS_NOT_INVITED_YET_E@."]], "Parameters": [["String", "Match-local ID of the participant to retrieve status for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the status of a participant in a match. Note that the participant ID must correspond to a participant in this match, or this method will throw an exception.", "history": "", "FullName": "public int getParticipantStatus (String participantId)"}, "hashCode()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "", "FullName": "public int hashCode ()"}, "getParticipantId(java.lang.String)": {"Returns": [["", "The participant ID corresponding to given player, or null if none found."]], "Parameters": [["String", "Player ID to find participant ID for."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the participant ID for a given player. This will only return a non-null ID if the player is actually a participant in the match and that player's identity is visible to the current player. Note that this will always return non-null for the current player. To find the player ID for the current player, use @B_com#google#android#gms#games#Players#getCurrentPlayerId_E@.", "history": "", "FullName": "public String getParticipantId (String playerId)"}, "getParticipants()": {"Returns": [["", "A list of @B_com#google#android#gms#games#multiplayer#Participant_E@s for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieve the @B_com#google#android#gms#games#multiplayer#Participant_E@s for this object. This is a list of all Participants applicable to the given object.", "history": "", "FullName": "public ArrayList<Participant> getParticipants ()"}}, "Inheritance": ["java.lang.Object"], "ClassName": "com.google.android.gms.games.multiplayer.turnbased.TurnBasedMatchEntity", "ClassDesc": "Data object representing the data for a turn-based match. This is immutable, and therefore safe to cache or store. Note, however, that the data it represents may grow stale. This class exists solely to support parceling these objects and should not be used directly."}