{"Functions": {"onStart()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes internal state after construction but before processing any tasks. If you override this method, you must invoke super.onStart() at the beginning of the method. Initialization requires care: Most fields must have legal default values, to ensure that attempted accesses from other threads work correctly even before this thread starts processing tasks.", "history": "Added in API level 21", "FullName": "protected void onStart ()"}, "onTermination(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the exception causing this thread to abort due to an unrecoverable error, or null if completed normally"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Performs cleanup associated with termination of this worker thread. If you override this method, you must invoke super.onTermination at the end of the overridden method.", "history": "Added in API level 21", "FullName": "protected void onTermination (Throwable exception)"}, "ForkJoinWorkerThread(java.util.concurrent.ForkJoinPool)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#ForkJoinPool_E@", "ForkJoinPool: the pool this thread works in"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if pool is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a ForkJoinWorkerThread operating in the given pool.", "history": "Added in API level 21", "FullName": "protected ForkJoinWorkerThread (ForkJoinPool pool)"}, "getPool()": {"Returns": [["@B_java#util#concurrent#ForkJoinPool_E@", "the pool"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pool hosting this thread.", "history": "Added in API level 21", "FullName": "public ForkJoinPool getPool ()"}, "run()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is required to be public, but should never be called explicitly. It performs the main run loop to execute @B_java#util#concurrent#ForkJoinTask_E@s.", "history": "Added in API level 21", "FullName": "public void run ()"}, "getPoolIndex()": {"Returns": [["int", "the index number"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the unique index number of this thread in its pool. The returned value ranges from zero to the maximum number of threads (minus one) that may exist in the pool, and does not change during the lifetime of the thread. This method may be useful for applications that track status or collect results per-worker-thread rather than per-task.", "history": "Added in API level 21", "FullName": "public int getPoolIndex ()"}}, "Inheritance": ["@B_java#lang#Thread_E@"], "ClassName": "java.util.concurrent.ForkJoinWorkerThread", "ClassDesc": "A thread managed by a @B_java#util#concurrent#ForkJoinPool_E@, which executes @B_java#util#concurrent#ForkJoinTask_E@s. This class is subclassable solely for the sake of adding functionality -- there are no overridable methods dealing with scheduling or execution. However, you can override initialization and termination methods surrounding the main task processing loop. If you do create such a subclass, you will also need to supply a custom @B_java#util#concurrent#ForkJoinPool#ForkJoinWorkerThreadFactory_E@ to ForkJoinPool."}