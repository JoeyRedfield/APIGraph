{"Functions": {"onRejectSharedElements(java.util.List<android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: Views containing visual information of shared elements that are not part of the entering scene. These Views are positioned relative to the Window decor View. A View removed from this list will not be transitioned automatically."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called after @B_android#app#SharedElementCallback#onMapSharedElements_E@ when transferring shared elements in. Any shared elements that have no mapping will be in SharedElementCallback. Views in rejectedSharedElements will have their position and size set to the position of the calling shared element, relative to the Window decor View and contain snapshots of the View from the calling Activity or Fragment. This view may be safely added to the decor View's overlay to remain in position. This method is not called for Fragment Transitions. All rejected shared elements will be handled by the exit transition.", "history": "Added in API level 21", "FullName": "public void onRejectSharedElements (List<View> rejectedSharedElements)"}, "onCaptureSharedElementSnapshot(android.view.View,android.graphics.Matrix,android.graphics.RectF)": {"Returns": [["@B_android#os#Parcelable_E@", "A snapshot to send to the remote Activity to be reconstituted with @B_android#app#SharedElementCallback#onCreateSnapshotView_E@ and passed into @B_android#app#SharedElementCallback#onSharedElementStart_E@ and @B_android#app#SharedElementCallback#onSharedElementEnd_E@."]], "Parameters": [["@B_android#view#View_E@", "View: The shared element View to create a snapshot for."], ["@B_android#graphics#Matrix_E@", "Matrix: A matrix containing a transform from the view to the screen coordinates."], ["@B_android#graphics#RectF_E@", "RectF: The bounds of shared element in screen coordinate space. This is the bounds of the view with the viewToGlobalMatrix applied."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a snapshot of a shared element to be used by the remote Activity and reconstituted with @B_android#app#SharedElementCallback#onCreateSnapshotView_E@. A null return value will mean that the remote Activity will have a null snapshot View in @B_android#app#SharedElementCallback#onSharedElementStart_E@ and @B_android#app#SharedElementCallback#onSharedElementEnd_E@. This is not called for Fragment Transitions.", "history": "Added in API level 21", "FullName": "public Parcelable onCaptureSharedElementSnapshot (View sharedElement, Matrix viewToGlobalMatrix, RectF screenBounds)"}, "SharedElementCallback()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 21", "FullName": "public SharedElementCallback ()"}, "onMapSharedElements(java.util.List<java.lang.String>,java.util.Map<java.lang.String,android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The names of all shared elements transferred from the calling Activity or Fragment in the order they were provided."], ["@B_java#util#Map_E@", "Map: The mapping of shared element names to Views. The best guess will be filled into sharedElements based on the transitionNames."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Lets the SharedElementCallback adjust the mapping of shared element names to Views.", "history": "Added in API level 21", "FullName": "public void onMapSharedElements (List<String> names, Map<String, View> sharedElements)"}, "onCreateSnapshotView(android.content.Context,android.os.Parcelable)": {"Returns": [["@B_android#view#View_E@", "A View to be sent in @B_android#app#SharedElementCallback#onSharedElementStart_E@ and @B_android#app#SharedElementCallback#onSharedElementEnd_E@. A null value will produce a null snapshot value for those two methods."]], "Parameters": [["@B_android#content#Context_E@", "Context: The Context used to create the snapshot View."], ["@B_android#os#Parcelable_E@", "Parcelable: The Parcelable returned by @B_android#app#SharedElementCallback#onCaptureSharedElementSnapshot_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Reconstitutes a snapshot View from a Parcelable returned in @B_android#app#SharedElementCallback#onCaptureSharedElementSnapshot_E@ to be used in @B_android#app#SharedElementCallback#onSharedElementStart_E@ and @B_android#app#SharedElementCallback#onSharedElementEnd_E@. The returned View will be sized and positioned after this call so that it is ready to be added to the decor View's overlay. This is not called for Fragment Transitions.", "history": "Added in API level 21", "FullName": "public View onCreateSnapshotView (Context context, Parcelable snapshot)"}, "onSharedElementEnd(java.util.List<java.lang.String>,java.util.List<android.view.View>,java.util.List<android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The names of the shared elements that were accepted into the View hierarchy."], ["@B_java#util#List_E@", "List: The shared elements that are part of the View hierarchy."], ["@B_java#util#List_E@", "List: The Views containing snap shots of the shared element from the launching Window. These elements will not be part of the scene, but will be positioned relative to the Window decor View. This list will be null for Fragment Transitions."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "In Activity Transitions, onSharedElementEnd is called immediately before capturing the end of the shared element state on enter and reenter transitions and immediately before capturing the start of the shared element state for exit and return transitions. In Fragment Transitions, onSharedElementEnd is called immediately before capturing the end state of all shared element transitions. This call can be used to adjust the transition end state by modifying the shared element Views. Note that no layout step will be executed between onSharedElementEnd and the transition state capture. Any changes made in @B_android#app#SharedElementCallback#onSharedElementStart_E@ that are not updated during layout should be corrected in onSharedElementEnd. For example, rotation or scale will not be affected by layout and if changed in @B_android#app#SharedElementCallback#onSharedElementStart_E@, it will also have to be reset in onSharedElementEnd again to correct the end state.", "history": "Added in API level 21", "FullName": "public void onSharedElementEnd (List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)"}, "onSharedElementStart(java.util.List<java.lang.String>,java.util.List<android.view.View>,java.util.List<android.view.View>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The names of the shared elements that were accepted into the View hierarchy."], ["@B_java#util#List_E@", "List: The shared elements that are part of the View hierarchy."], ["@B_java#util#List_E@", "List: The Views containing snap shots of the shared element from the launching Window. These elements will not be part of the scene, but will be positioned relative to the Window decor View. This list is null for Fragment Transitions."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "In Activity Transitions, onSharedElementStart is called immediately before capturing the start of the shared element state on enter and reenter transitions and immediately before capturing the end of the shared element state for exit and return transitions. In Fragment Transitions, onSharedElementStart is called immediately before capturing the start state of all shared element transitions. This call can be used to adjust the transition start state by modifying the shared element Views. Note that no layout step will be executed between onSharedElementStart and the transition state capture. For Activity Transitions, any changes made in @B_android#app#SharedElementCallback#onSharedElementEnd_E@ that are not updated during by layout should be corrected in onSharedElementStart for exit and return transitions. For example, rotation or scale will not be affected by layout and if changed in @B_android#app#SharedElementCallback#onSharedElementEnd_E@, it will also have to be reset in onSharedElementStart again to correct the end state.", "history": "Added in API level 21", "FullName": "public void onSharedElementStart (List<String> sharedElementNames, List<View> sharedElements, List<View> sharedElementSnapshots)"}, "onSharedElementsArrived(java.util.List<java.lang.String>,java.util.List<android.view.View>,android.app.SharedElementCallback.OnSharedElementsReadyListener)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: The names of the shared elements that are being transferred.."], ["@B_java#util#List_E@", "List: The shared elements that are part of the View hierarchy."], ["@B_android#app#SharedElementCallback#OnSharedElementsReadyListener_E@", "SharedElementCallback.OnSharedElementsReadyListener: The listener to call when the shared elements are ready to be hidden in the source Activity or shown in the destination Activity."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called during an Activity Transition when the shared elements have arrived at the final location and are ready to be transferred. This method is called for both the source and destination Activities. When the shared elements are ready to be transferred, @B_android#app#SharedElementCallback#OnSharedElementsReadyListener#onSharedElementsReady_E@ must be called to trigger the transfer. The default behavior is to trigger the transfer immediately.", "history": "Added in API level 23", "FullName": "public void onSharedElementsArrived (List<String> sharedElementNames, List<View> sharedElements, SharedElementCallback.OnSharedElementsReadyListener listener)"}}, "Inheritance": [], "ClassName": "android.app.SharedElementCallback", "ClassDesc": "Listener provided in @B_android#app#Activity#setEnterSharedElementCallback_E@ and @B_android#app#Activity#setExitSharedElementCallback_E@ as well as @B_android#app#Fragment#setEnterSharedElementCallback_E@ and @B_android#app#Fragment#setExitSharedElementCallback_E@ to monitor the Shared element transitions. The events can be used to customize Activity and Fragment Transition behavior."}