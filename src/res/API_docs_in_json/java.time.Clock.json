{"Functions": {"fixed(java.time.Instant, java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock that always returns the same instant, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to use as the clock, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use to convert the instant to date-time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that always returns the same instant. This clock simply returns the specified instant. As such, it is not a clock in the conventional sense. The main use case for this is in testing, where the fixed clock ensures tests are not dependent on the current clock. The returned implementation is immutable, thread-safe and Serializable.", "history": "added in API level 26", "FullName": "public static Clock fixed (Instant fixedInstant, ZoneId zone)"}, "system(java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock that uses the best available system clock in the specified zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use to convert the instant to date-time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns the current instant using best available system clock. This clock is based on the best available system clock. This may use @B_java#lang#System#currentTimeMillis_E@, or a higher resolution clock if one is available. Conversion from instant to date or time uses the specified time-zone. The returned implementation is immutable, thread-safe and Serializable.", "history": "Added in API level 26", "FullName": "public static Clock system (ZoneId zone)"}, "getZone()": {"Returns": [["@B_java#time#ZoneId_E@", "the time-zone being used to interpret instants, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time-zone being used to create dates and times. A clock will typically obtain the current instant and then convert that to a date or time using a time-zone. This method returns the time-zone used.", "history": "Added in API level 26", "FullName": "public abstract ZoneId getZone ()"}, "millis()": {"Returns": [["long", "the current millisecond instant from this clock, measured from the Java epoch of 1970-01-01T00:00Z (UTC), not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if the instant cannot be obtained, not thrown by most implementations"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the current millisecond instant of the clock. This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC). This is equivalent to the definition of @B_java#lang#System#currentTimeMillis_E@. Most applications should avoid this method and use @B_java#time#Instant_E@ to represent an instant on the time-line rather than a raw millisecond value. This method is provided to allow the use of the clock in high performance use cases where the creation of an object would be unacceptable. The default implementation currently calls @B_java#time#Clock#instant_E@.", "history": "Added in API level 26", "FullName": "public long millis ()"}, "withZone(java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock based on this clock with the specified time-zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to change to, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a copy of this clock with a different time-zone. A clock will typically obtain the current instant and then convert that to a date or time using a time-zone. This method returns a clock with similar properties but using a different time-zone.", "history": "Added in API level 26", "FullName": "public abstract Clock withZone (ZoneId zone)"}, "tick(java.time.Clock, java.time.Duration)": {"Returns": [["@B_java#time#Clock_E@", "a clock that ticks in whole units of the duration, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the base clock to base the ticking clock on, not null"], ["@B_java#time#Duration_E@", "Duration: the duration of each visible tick, not negative, not null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the duration is negative, or has a part smaller than a whole millisecond such that the whole duration is not divisible into one second"], ["@B_java#lang#ArithmeticException_E@", "if the duration is too large to be represented as nanos"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration. This clock will only tick as per the specified duration. Thus, if the duration is half a second, the clock will return instants truncated to the half second. The tick duration must be positive. If it has a part smaller than a whole millisecond, then the whole duration must divide into one second without leaving a remainder. All normal tick durations will match these criteria, including any multiple of hours, minutes, seconds and milliseconds, and sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns. A duration of zero or one nanosecond would have no truncation effect. Passing one of these will return the underlying clock. Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the requested duration observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.", "history": "added in API level 26", "FullName": "public static Clock tick (Clock baseClock, Duration tickDuration)"}, "offset(java.time.Clock, java.time.Duration)": {"Returns": [["@B_java#time#Clock_E@", "a clock based on the base clock with the duration added, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the base clock to add the duration to, not null"], ["@B_java#time#Duration_E@", "Duration: the duration to add, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns instants from the specified clock with the specified duration added This clock wraps another clock, returning instants that are later by the specified duration. If the duration is negative, the instants will be earlier than the current date and time. The main use case for this is to simulate running in the future or in the past. A duration of zero would have no offsetting effect. Passing zero will return the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.", "history": "added in API level 26", "FullName": "public static Clock offset (Clock baseClock, Duration offsetDuration)"}, "systemDefaultZone()": {"Returns": [["@B_java#time#Clock_E@", "a clock that uses the best available system clock in the default zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#time#ZoneId#systemDefault_E@"], "Permissions": [], "Description": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the default time-zone. This clock is based on the best available system clock. This may use @B_java#lang#System#currentTimeMillis_E@, or a higher resolution clock if one is available. Using this method hard codes a dependency to the default time-zone into your application. It is recommended to avoid this and use a specific time-zone whenever possible. The @B_java#time#Clock#systemUTC_E@ should be used when you need the current instant without the date or time. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to system(ZoneId.systemDefault()).", "history": "Added in API level 26", "FullName": "public static Clock systemDefaultZone ()"}, "Clock()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructor accessible by subclasses.", "history": "Added in API level 26", "FullName": "protected Clock ()"}, "fixed(java.time.Instant,java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock that always returns the same instant, not null"]], "Parameters": [["@B_java#time#Instant_E@", "Instant: the instant to use as the clock, not null"], ["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use to convert the instant to date-time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that always returns the same instant. This clock simply returns the specified instant. As such, it is not a clock in the conventional sense. The main use case for this is in testing, where the fixed clock ensures tests are not dependent on the current clock. The returned implementation is immutable, thread-safe and Serializable.", "history": "Added in API level 26", "FullName": "public static Clock fixed (Instant fixedInstant, ZoneId zone)"}, "tickMinutes(java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock that ticks in whole minutes using the specified zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use to convert the instant to date-time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns the current instant ticking in whole minutes using best available system clock. This clock will always have the nano-of-second and second-of-minute fields set to zero. This ensures that the visible time ticks in whole minutes. The underlying clock is the best available system clock, equivalent to using @B_java#time#Clock#system_E@. Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the minute observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofMinutes(1)).", "history": "Added in API level 26", "FullName": "public static Clock tickMinutes (ZoneId zone)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this is equal to the other clock"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to check, null returns false"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Checks if this clock is equal to another clock. Clocks should override this method to compare equals based on their state and to meet the contract of @B_java#lang#Object#equals_E@. If not overridden, the behavior is defined by @B_java#lang#Object#equals_E@", "history": "Added in API level 26", "FullName": "public boolean equals (Object obj)"}, "tick(java.time.Clock,java.time.Duration)": {"Returns": [["@B_java#time#Clock_E@", "a clock that ticks in whole units of the duration, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the base clock to base the ticking clock on, not null"], ["@B_java#time#Duration_E@", "Duration: the duration of each visible tick, not negative, not null"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the duration is negative, or has a part smaller than a whole millisecond such that the whole duration is not divisible into one second"], ["@B_java#lang#ArithmeticException_E@", "if the duration is too large to be represented as nanos"]], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns instants from the specified clock truncated to the nearest occurrence of the specified duration. This clock will only tick as per the specified duration. Thus, if the duration is half a second, the clock will return instants truncated to the half second. The tick duration must be positive. If it has a part smaller than a whole millisecond, then the whole duration must divide into one second without leaving a remainder. All normal tick durations will match these criteria, including any multiple of hours, minutes, seconds and milliseconds, and sensible nanosecond durations, such as 20ns, 250,000ns and 500,000ns. A duration of zero or one nanosecond would have no truncation effect. Passing one of these will return the underlying clock. Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the requested duration observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.", "history": "Added in API level 26", "FullName": "public static Clock tick (Clock baseClock, Duration tickDuration)"}, "systemUTC()": {"Returns": [["@B_java#time#Clock_E@", "a clock that uses the best available system clock in the UTC zone, not null"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns the current instant using the best available system clock, converting to date and time using the UTC time-zone. This clock, rather than @B_java#time#Clock#systemDefaultZone_E@, should be used when you need the current instant without the date or time. This clock is based on the best available system clock. This may use @B_java#lang#System#currentTimeMillis_E@, or a higher resolution clock if one is available. Conversion from instant to date or time uses the The returned implementation is immutable, thread-safe and Serializable. It is equivalent to system(ZoneOffset.UTC).", "history": "Added in API level 26", "FullName": "public static Clock systemUTC ()"}, "offset(java.time.Clock,java.time.Duration)": {"Returns": [["@B_java#time#Clock_E@", "a clock based on the base clock with the duration added, not null"]], "Parameters": [["@B_java#time#Clock_E@", "Clock: the base clock to add the duration to, not null"], ["@B_java#time#Duration_E@", "Duration: the duration to add, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns instants from the specified clock with the specified duration added This clock wraps another clock, returning instants that are later by the specified duration. If the duration is negative, the instants will be earlier than the current date and time. The main use case for this is to simulate running in the future or in the past. A duration of zero would have no offsetting effect. Passing zero will return the underlying clock. The returned implementation is immutable, thread-safe and Serializable providing that the base clock is.", "history": "Added in API level 26", "FullName": "public static Clock offset (Clock baseClock, Duration offsetDuration)"}, "tickSeconds(java.time.ZoneId)": {"Returns": [["@B_java#time#Clock_E@", "a clock that ticks in whole seconds using the specified zone, not null"]], "Parameters": [["@B_java#time#ZoneId_E@", "ZoneId: the time-zone to use to convert the instant to date-time, not null"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains a clock that returns the current instant ticking in whole seconds using best available system clock. This clock will always have the nano-of-second field set to zero. This ensures that the visible time ticks in whole seconds. The underlying clock is the best available system clock, equivalent to using @B_java#time#Clock#system_E@. Implementations may use a caching strategy for performance reasons. As such, it is possible that the start of the second observed via this clock will be later than that observed directly via the underlying clock. The returned implementation is immutable, thread-safe and Serializable. It is equivalent to tick(system(zone), Duration.ofSeconds(1)).", "history": "Added in API level 26", "FullName": "public static Clock tickSeconds (ZoneId zone)"}, "instant()": {"Returns": [["@B_java#time#Instant_E@", "the current instant from this clock, not null"]], "Parameters": [], "Throws": [["@B_java#time#DateTimeException_E@", "if the instant cannot be obtained, not thrown by most implementations"]], "SeeAlso": [], "Permissions": [], "Description": "Gets the current instant of the clock. This returns an instant representing the current instant as defined by the clock.", "history": "Added in API level 26", "FullName": "public abstract Instant instant ()"}, "hashCode()": {"Returns": [["int", "a suitable hash code"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "A hash code for this clock. Clocks should override this method based on their state and to meet the contract of @B_java#lang#Object#hashCode_E@. If not overridden, the behavior is defined by @B_java#lang#Object#hashCode_E@", "history": "Added in API level 26", "FullName": "public int hashCode ()"}}, "Inheritance": [], "ClassName": "java.time.Clock", "ClassDesc": "A clock providing access to the current instant, date and time using a time-zone. Instances of this class are used to find the current instant, which can be interpreted using the stored time-zone to find the current date and time. As such, a clock can be used instead of @B_java#lang#System#currentTimeMillis_E@ and @B_java#util#TimeZone#getDefault_E@. Use of a Clock is optional. All key date-time classes also have a now() factory method that uses the system clock in the default time zone. The primary purpose of this abstraction is to allow alternate clocks to be plugged in as and when required. Applications use an object to obtain the current time rather than a static method. This can simplify testing. Best practice for applications is to pass a Clock into any method that requires the current instant. A dependency injection framework is one way to achieve this: @B_java#time#Clock#fixed_E@ or @B_java#time#Clock#offset_E@ to be used during testing. The system factory methods provide clocks based on the best available system clock This may use @B_java#lang#System#currentTimeMillis_E@, or a higher resolution clock if one is available."}