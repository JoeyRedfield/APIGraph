{"Functions": {"setTextSize(int, float)": {"Returns": [], "Parameters": [["int", "int: The desired dimension unit"], ["float", "float: The desired size in the given units"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the default text size to a given unit and value. See @B_android#util#TypedValue_E@ for the possible dimension units. Example: to set the text size to 14px, use setTextSize(TypedValue.COMPLEX_UNIT_PX, 14);", "history": "added in version 22.0.0", "FullName": "void setTextSize (int unit, float size)"}, "setTextColor(int)": {"Returns": [], "Parameters": [["int", "int: Color hex code in 0xAARRGGBB format"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the color value used as the base color for all displayed page titles. Alpha will be ignored for non-primary page titles. See @B_android#support#v4#view#PagerTitleStrip#setNonPrimaryAlpha_E@.", "history": "added in version 22.0.0", "FullName": "void setTextColor (int color)"}, "requestLayout()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Call this when something has changed which has invalidated the layout of this view. This will schedule a layout pass of the view tree. This should not be called while the view hierarchy is currently in a layout pass (@B_android#view#View#isInLayout_E@. If layout is happening, the request may be honored at the end of the current layout pass (and then layout will run again) or after the current frame is drawn and the next layout occurs. Subclasses which override this method should call the superclass method to handle possible request-during-layout errors correctly.", "history": "", "FullName": "void requestLayout ()"}, "setNonPrimaryAlpha(float)": {"Returns": [], "Parameters": [["float", "float: Opacity value in the range 0-1f Value is between 0.0 and 1.0 inclusive."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the alpha value used for non-primary page titles.", "history": "added in version 22.0.0", "FullName": "void setNonPrimaryAlpha (float alpha)"}, "setTextSpacing(int)": {"Returns": [], "Parameters": [["int", "int: Spacing between each title displayed in pixels"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the required spacing between title segments.", "history": "added in version 22.0.0", "FullName": "void setTextSpacing (int spacingPixels)"}, "PagerTitleStrip(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "PagerTitleStrip (Context context)"}, "getTextSpacing()": {"Returns": [["int", "The required spacing between title segments in pixels"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 22.0.0", "FullName": "int getTextSpacing ()"}, "onAttachedToWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is attached to a window. At this point it has a Surface and will start drawing. Note that this function is guaranteed to be called before @B_android#view#View#onDraw_E@, however it may be called any time before the first onDraw -- including before or after @B_android#view#View#onMeasure_E@.", "history": "", "FullName": "void onAttachedToWindow ()"}, "onLayout(boolean, int, int, int, int)": {"Returns": [], "Parameters": [["boolean", "boolean: This is a new size or position for this view"], ["int", "int: Left position, relative to parent"], ["int", "int: Top position, relative to parent"], ["int", "int: Right position, relative to parent"], ["int", "int: Bottom position, relative to parent"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called from layout when this view should assign a size and position to each of its children. Derived classes with children should override this method and call layout on each of their children.", "history": "added in version 22.0.0", "FullName": "void onLayout (boolean changed, int l, int t, int r, int b)"}, "setGravity(int)": {"Returns": [], "Parameters": [["int", "int: @B_android#view#Gravity_E@ constant for positioning title text"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the @B_android#view#Gravity_E@ used to position text within the title strip. Only the vertical gravity component is used.", "history": "added in version 22.0.0", "FullName": "void setGravity (int gravity)"}, "onMeasure(int, int)": {"Returns": [], "Parameters": [["int", "int: horizontal space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."], ["int", "int: vertical space requirements as imposed by the parent. The requirements are encoded with @B_android#view#View#MeasureSpec_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Measure the view and its content to determine the measured width and the measured height. This method is invoked by @B_android#view#View#measure_E@ and should be overridden by subclasses to provide accurate and efficient measurement of their contents. must call @B_android#view#View#setMeasuredDimension_E@ to store the measured width and height of this view. Failure to do so will trigger an IllegalStateException, thrown by @B_android#view#View#measure_E@. Calling the superclass' @B_android#view#View#onMeasure_E@ is a valid use. The base class implementation of measure defaults to the background size, unless a larger size is allowed by the MeasureSpec. Subclasses should override @B_android#view#View#onMeasure_E@ to provide better measurements of their content. If this method is overridden, it is the subclass's responsibility to make sure the measured height and width are at least the view's minimum height and width (@B_android#view#View#getSuggestedMinimumHeight_E@ and @B_android#view#View#getSuggestedMinimumWidth_E@).", "history": "", "FullName": "void onMeasure (int widthMeasureSpec, int heightMeasureSpec)"}, "onDetachedFromWindow()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This is called when the view is detached from a window. At this point it no longer has a surface for drawing.", "history": "", "FullName": "void onDetachedFromWindow ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@"], "ClassName": "android.support.v4.view.PagerTitleStrip", "ClassDesc": "PagerTitleStrip is a non-interactive indicator of the current, next, and previous pages of a @B_android#support#v4#view#ViewPager_E@. It is intended to be used as a child view of a ViewPager widget in your XML layout. Add it as a child of a ViewPager in your layout file and set its android:layout_gravity to TOP or BOTTOM to pin it to the top or bottom of the ViewPager. The title from each page is supplied by the method @B_android#support#v4#view#PagerAdapter#getPageTitle_E@ in the adapter supplied to the ViewPager. For an interactive indicator, see @B_android#support#v4#view#PagerTabStrip_E@."}