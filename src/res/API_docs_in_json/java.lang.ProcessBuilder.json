{"Functions": {"redirectInput(java.lang.ProcessBuilder.Redirect)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#lang#ProcessBuilder#Redirect_E@", "ProcessBuilder.Redirect: the new standard input source"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the redirect does not correspond to a valid source of data, that is, has type @B_java#lang#ProcessBuilder#Redirect#Type#WRITE_E@ or @B_java#lang#ProcessBuilder#Redirect#Type#APPEND_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard input source. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method obtain their standard input from this source. If the source is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@ (the initial value), then the standard input of a subprocess can be written to using the output stream returned by @B_java#lang#Process#getOutputStream_E@. If the source is set to any other value, then @B_java#lang#Process#getOutputStream_E@ will return a", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectInput (ProcessBuilder.Redirect source)"}, "redirectOutput(java.io.File)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#io#File_E@", "File: the new standard output destination"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard output destination to a file. This is a convenience method. An invocation of the form redirectOutput(file) behaves in exactly the same way as the invocation @B_java#lang#ProcessBuilder#redirectOutput_E@ (Redirect.to(file)).", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectOutput (File file)"}, "redirectError(java.lang.ProcessBuilder.Redirect)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#lang#ProcessBuilder#Redirect_E@", "ProcessBuilder.Redirect: the new standard error destination"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the redirect does not correspond to a valid destination of data, that is, has type @B_java#lang#ProcessBuilder#Redirect#Type#READ_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard error destination. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method send their standard error to this destination. If the destination is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@ (the initial value), then the error output of a subprocess can be read using the input stream returned by @B_java#lang#Process#getErrorStream_E@. If the destination is set to any other value, then @B_java#lang#Process#getErrorStream_E@ will return a If the @B_java#lang#ProcessBuilder#redirectErrorStream_E@ attribute has been set true, then the redirection set by this method has no effect.", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectError (ProcessBuilder.Redirect destination)"}, "directory()": {"Returns": [["@B_java#io#File_E@", "this process builder's working directory"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process builder's working directory. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method will use this as their working directory. The returned value may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.", "history": "Added in API level 1", "FullName": "public File directory ()"}, "redirectOutput()": {"Returns": [["@B_java#lang#ProcessBuilder#Redirect_E@", "this process builder's standard output destination"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process builder's standard output destination. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method redirect their standard output to this destination. The initial value is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@.", "history": "Added in API level 26", "FullName": "public ProcessBuilder.Redirect redirectOutput ()"}, "redirectErrorStream(boolean)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["boolean", "boolean: the new property value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's redirectErrorStream property. If this property is true, then any error output generated by subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method will be merged with the standard output, so that both can be read using the @B_java#lang#Process#getInputStream_E@ method. This makes it easier to correlate error messages with the corresponding output. The initial value is false.", "history": "Added in API level 1", "FullName": "public ProcessBuilder redirectErrorStream (boolean redirectErrorStream)"}, "inheritIO()": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the source and destination for subprocess standard I/O to be the same as those of the current Java process. This is a convenience method. An invocation of the form system().", "history": "Added in API level 26", "FullName": "public ProcessBuilder inheritIO ()"}, "command(java.util.List<java.lang.String>)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#util#List_E@", "List: the list containing the program and its arguments"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's operating system program and arguments. This method does command list. Subsequent updates to the list will be reflected in the state of the process builder. It is not checked whether command corresponds to a valid operating system command.", "history": "Added in API level 1", "FullName": "public ProcessBuilder command (List<String> command)"}, "directory(java.io.File)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#io#File_E@", "File: the new working directory"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's working directory. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method will use this as their working directory. The argument may be null -- this means to use the working directory of the current Java process, usually the directory named by the system property user.dir, as the working directory of the child process.", "history": "Added in API level 1", "FullName": "public ProcessBuilder directory (File directory)"}, "redirectErrorStream()": {"Returns": [["boolean", "this process builder's redirectErrorStream property"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this process builder merges standard error and standard output. If this property is true, then any error output generated by subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method will be merged with the standard output, so that both can be read using the @B_java#lang#Process#getInputStream_E@ method. This makes it easier to correlate error messages with the corresponding output. The initial value is false.", "history": "Added in API level 1", "FullName": "public boolean redirectErrorStream ()"}, "redirectInput(java.io.File)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#io#File_E@", "File: the new standard input source"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard input source to a file. This is a convenience method. An invocation of the form redirectInput(file) behaves in exactly the same way as the invocation @B_java#lang#ProcessBuilder#redirectInput_E@ (Redirect.from(file)).", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectInput (File file)"}, "ProcessBuilder(java.util.List<java.lang.String>)": {"Returns": [], "Parameters": [["@B_java#util#List_E@", "List: the list containing the program and its arguments"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the argument is null"]], "SeeAlso": [], "Permissions": [], "Description": "Constructs a process builder with the specified operating system program and arguments. This constructor does command list. Subsequent updates to the list will be reflected in the state of the process builder. It is not checked whether command corresponds to a valid operating system command.", "history": "Added in API level 1", "FullName": "public ProcessBuilder (List<String> command)"}, "redirectError(java.io.File)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#io#File_E@", "File: the new standard error destination"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard error destination to a file. This is a convenience method. An invocation of the form redirectError(file) behaves in exactly the same way as the invocation @B_java#lang#ProcessBuilder#redirectError_E@ (Redirect.to(file)).", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectError (File file)"}, "command(java.lang.String...)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#lang#String_E@", "String: a string array containing the program and its arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's operating system program and arguments. This is a convenience method that sets the command to a string list containing the same strings as the command array, in the same order. It is not checked whether command corresponds to a valid operating system command.", "history": "Added in API level 1", "FullName": "public ProcessBuilder command (String... command)"}, "redirectError()": {"Returns": [["@B_java#lang#ProcessBuilder#Redirect_E@", "this process builder's standard error destination"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process builder's standard error destination. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method redirect their standard error to this destination. The initial value is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@.", "history": "Added in API level 26", "FullName": "public ProcessBuilder.Redirect redirectError ()"}, "redirectInput()": {"Returns": [["@B_java#lang#ProcessBuilder#Redirect_E@", "this process builder's standard input source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process builder's standard input source. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method obtain their standard input from this source. The initial value is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@.", "history": "Added in API level 26", "FullName": "public ProcessBuilder.Redirect redirectInput ()"}, "environment()": {"Returns": [["@B_java#util#Map_E@", "this process builder's environment"]], "Parameters": [], "Throws": [["@B_java#lang#SecurityException_E@", "if a security manager exists and its @B_java#lang#SecurityManager#checkPermission_E@ method doesn't allow access to the process environment"]], "SeeAlso": ["@B_java#lang#Runtime#exec_E@", "@B_java#lang#System#getenv_E@"], "Permissions": [], "Description": "Returns a string map view of this process builder's environment. Whenever a process builder is created, the environment is initialized to a copy of the current process environment (see @B_java#lang#System#getenv_E@). Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method will use this map as their environment. The returned object may be modified using ordinary @B_java#util#Map_E@ operations. These modifications will be visible to subprocesses started via the @B_java#lang#ProcessBuilder#start_E@ method. Two ProcessBuilder instances always contain independent process environments, so changes to the returned map will never be reflected in any other ProcessBuilder instance or the values returned by @B_java#lang#System#getenv_E@. If the system does not support environment variables, an empty map is returned. The returned map does not permit null keys or values. Attempting to insert or query the presence of a null key or value will throw a @B_java#lang#NullPointerException_E@. Attempting to query the presence of a key or value which is not of type @B_java#lang#String_E@ will throw a @B_java#lang#ClassCastException_E@. The behavior of the returned map is system-dependent. A system may not allow modifications to environment variables or may forbid certain variable names or values. For this reason, attempts to modify the map may fail with @B_java#lang#UnsupportedOperationException_E@ or @B_java#lang#IllegalArgumentException_E@ if the modification is not permitted by the operating system. Since the external format of environment variable names and values is system-dependent, there may not be a one-to-one mapping between them and Java's Unicode strings. Nevertheless, the map is implemented in such a way that environment variables which are not modified by Java code will have an unmodified native representation in the subprocess. The returned map and its collection views may not obey the general contract of the @B_java#lang#Object#equals_E@ and @B_java#lang#Object#hashCode_E@ methods. The returned map is typically case-sensitive on all platforms. If a security manager exists, its @B_java#lang#SecurityManager#checkPermission_E@ method is called with a @B_java#lang#RuntimePermission_E@(\"getenv.*\") permission. This may result in a @B_java#lang#SecurityException_E@ being thrown. When passing information to a Java subprocess,", "history": "Added in API level 1", "FullName": "public Map<String, String> environment ()"}, "redirectOutput(java.lang.ProcessBuilder.Redirect)": {"Returns": [["@B_java#lang#ProcessBuilder_E@", "this process builder"]], "Parameters": [["@B_java#lang#ProcessBuilder#Redirect_E@", "ProcessBuilder.Redirect: the new standard output destination"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the redirect does not correspond to a valid destination of data, that is, has type @B_java#lang#ProcessBuilder#Redirect#Type#READ_E@"]], "SeeAlso": [], "Permissions": [], "Description": "Sets this process builder's standard output destination. Subprocesses subsequently started by this object's @B_java#lang#ProcessBuilder#start_E@ method send their standard output to this destination. If the destination is @B_java#lang#ProcessBuilder#Redirect#PIPE_E@ (the initial value), then the standard output of a subprocess can be read using the input stream returned by @B_java#lang#Process#getInputStream_E@. If the destination is set to any other value, then @B_java#lang#Process#getInputStream_E@ will return a", "history": "Added in API level 26", "FullName": "public ProcessBuilder redirectOutput (ProcessBuilder.Redirect destination)"}, "ProcessBuilder(java.lang.String...)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: a string array containing the program and its arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Constructs a process builder with the specified operating system program and arguments. This is a convenience constructor that sets the process builder's command to a string list containing the same strings as the command array, in the same order. It is not checked whether command corresponds to a valid operating system command.", "history": "Added in API level 1", "FullName": "public ProcessBuilder (String... command)"}, "start()": {"Returns": [["@B_java#lang#Process_E@", "a new @B_java#lang#Process_E@ object for managing the subprocess"]], "Parameters": [], "Throws": [["@B_java#lang#NullPointerException_E@", "if an element of the command list is null"], ["@B_java#lang#IndexOutOfBoundsException_E@", "if the command is an empty list (has size 0)"], ["@B_java#lang#SecurityException_E@", "if a security manager exists and its SecurityManager#checkExec method doesn't allow creation of the subprocess, or the standard input to the subprocess was redirected from a file and the security manager's SecurityManager#checkRead method denies read access to the file, or the standard output or standard error of the subprocess was redirected to a file and the security manager's SecurityManager#checkWrite method denies write access to the file"], ["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": ["@B_java#lang#Runtime#exec_E@"], "Permissions": [], "Description": "Starts a new process using the attributes of this process builder. The new process will invoke the command and arguments given by @B_java#lang#ProcessBuilder#command_E@, in a working directory as given by @B_java#lang#ProcessBuilder#directory_E@, with a process environment as given by @B_java#lang#ProcessBuilder#environment_E@. This method checks that the command is a valid operating system command. Which commands are valid is system-dependent, but at the very least the command must be a non-empty list of non-null strings. A minimal set of system dependent environment variables may be required to start a process on some operating systems. As a result, the subprocess may inherit additional environment variable settings beyond those in the process builder's @B_java#lang#ProcessBuilder#environment_E@. If there is a security manager, its @B_java#lang#SecurityManager#checkExec_E@ method is called with the first component of this object's command array as its argument. This may result in a @B_java#lang#SecurityException_E@ being thrown. Starting an operating system process is highly system-dependent. Among the many things that can go wrong are: The operating system program file was not found. Access to the program file was denied. The working directory does not exist. In such cases an exception will be thrown. The exact nature of the exception is system-dependent, but it will always be a subclass of @B_java#io#IOException_E@. Subsequent modifications to this process builder will not affect the returned @B_java#lang#Process_E@.", "history": "Added in API level 1", "FullName": "public Process start ()"}, "command()": {"Returns": [["@B_java#util#List_E@", "this process builder's program and its arguments"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns this process builder's operating system program and arguments. The returned list is", "history": "Added in API level 1", "FullName": "public List<String> command ()"}}, "Inheritance": [], "ClassName": "java.lang.ProcessBuilder", "ClassDesc": "This class is used to create operating system processes. Each ProcessBuilder instance manages a collection of process attributes. The @B_java#lang#ProcessBuilder#start_E@ method creates a new @B_java#lang#Process_E@ instance with those attributes. The @B_java#lang#ProcessBuilder#start_E@ method can be invoked repeatedly from the same instance to create new subprocesses with identical or related attributes. Each process builder manages these process attributes: a an @B_java#lang#System#getenv_E@). a user.dir. @B_java#lang#Process#getOutputStream_E@. However, standard input may be redirected to another source using @B_java#lang#ProcessBuilder#redirectInput_E@. In this case, @B_java#lang#Process#getOutputStream_E@ will return a the @B_java#io#OutputStream#write_E@ methods always throw IOException the @B_java#io#OutputStream#close_E@ method does nothing @B_java#lang#Process#getInputStream_E@ and @B_java#lang#Process#getErrorStream_E@. However, standard output and standard error may be redirected to other destinations using @B_java#lang#ProcessBuilder#redirectOutput_E@ and @B_java#lang#ProcessBuilder#redirectError_E@. In this case, @B_java#lang#Process#getInputStream_E@ and/or @B_java#lang#Process#getErrorStream_E@ will return a the @B_java#io#InputStream#read_E@ methods always return -1 the @B_java#io#InputStream#available_E@ method always returns 0 the @B_java#io#InputStream#close_E@ method does nothing a false, meaning that the standard output and error output of a subprocess are sent to two separate streams, which can be accessed using the @B_java#lang#Process#getInputStream_E@ and @B_java#lang#Process#getErrorStream_E@ methods. If the value is set to true, then: standard error is merged with the standard output and always sent to the same destination (this makes it easier to correlate error messages with the corresponding output) the common destination of standard error and standard output can be redirected using @B_java#lang#ProcessBuilder#redirectOutput_E@ any redirection set by the @B_java#lang#ProcessBuilder#redirectError_E@ method is ignored when creating a subprocess the stream returned from @B_java#lang#Process#getErrorStream_E@ will always be a Modifying a process builder's attributes will affect processes subsequently started by that object's @B_java#lang#ProcessBuilder#start_E@ method, but will never affect previously started processes or the Java process itself. Most error checking is performed by the @B_java#lang#ProcessBuilder#start_E@ method. It is possible to modify the state of an object so that @B_java#lang#ProcessBuilder#start_E@ will fail. For example, setting the command attribute to an empty list will not throw an exception unless @B_java#lang#ProcessBuilder#start_E@ is invoked. ProcessBuilder instance concurrently, and at least one of the threads modifies one of the attributes structurally, it Starting a new process which uses the default working directory and environment is easy: Here is an example that starts a process with a modified working directory and environment, and redirects standard output and error to be appended to a log file: To start a process with an explicit set of environment variables, first call @B_java#util#Map#clear_E@ before adding environment variables."}