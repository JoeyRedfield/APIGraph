{"Functions": {"getAvailableIDs(int)": {"Returns": [["@B_java#lang#String_E@", "an array of IDs for system TimeZones with the given raw offset. If there are none, return a zero-length array."]], "Parameters": [["int", "int: the offset in milliseconds from GMT"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getAvailableIDs_E@"], "Permissions": [], "Description": "Return a new String array containing all system TimeZone IDs with the given raw offset from GMT. These IDs may be passed to get() to construct the corresponding TimeZone object.", "history": "Added in API level 24", "FullName": "public static String[] getAvailableIDs (int rawOffset)"}, "getDisplayName(boolean, int, java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale or in the default locale if the given locale is not recognized."]], "Parameters": [["boolean", "boolean: if true, return the daylight savings name."], ["int", "int: the output style of the display name. Valid styles are SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT, SHORT_COMMONLY_USED or GENERIC_LOCATION."], ["@B_java#util#Locale_E@", "Locale: the locale in which to supply the display name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "style is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the specified locale. If the display name is not available for the locale, then this method returns a string in the localized GMT offset format such as GMT[+-]HH:mm.", "history": "added in API level 24", "FullName": "public String getDisplayName (boolean daylight, int style, Locale locale)"}, "getCanonicalID(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "The canonical system time zone ID or the custom time zone ID in normalized format for the given time zone ID. When the given time zone ID is neither a known system time zone ID nor a valid custom time zone ID, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The input time zone ID to be canonicalized."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getCanonicalID (String id)"}, "getID()": {"Returns": [["@B_java#lang#String_E@", "the ID of this time zone."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the ID of this time zone.", "history": "Added in API level 24", "FullName": "public String getID ()"}, "getTimeZone(java.lang.String, int)": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the specified TimeZone, or a mutable clone of the UNKNOWN_ZONE if the given ID cannot be understood or if the given ID is \"Etc/Unknown\"."]], "Parameters": [["@B_java#lang#String_E@", "String: the ID for a TimeZone, such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations, such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used."], ["int", "int: Time zone type, either TIMEZONE_ICU or TIMEZONE_JDK."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone_E@"], "Permissions": [], "Description": "Gets the TimeZone for the given ID and the timezone type.", "history": "added in API level 24", "FullName": "public static TimeZone getTimeZone (String ID, int type)"}, "setRawOffset(int)": {"Returns": [], "Parameters": [["int", "int: the given base time zone offset to GMT."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the base time zone offset to GMT. This is the offset to add *to* UTC to get local time.", "history": "Added in API level 24", "FullName": "public abstract void setRawOffset (int offsetMillis)"}, "getCanonicalID(java.lang.String, boolean[])": {"Returns": [["@B_java#lang#String_E@", "The canonical system time zone ID or the custom time zone ID in normalized format for the given time zone ID. When the given time zone ID is neither a known system time zone ID nor a valid custom time zone ID, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The input time zone ID to be canonicalized."], ["boolean[]", "boolean: When non-null boolean array is specified and the given ID is a known system time zone ID, true is set to isSystemID[0]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public static String getCanonicalID (String id, boolean[] isSystemID)"}, "getAvailableIDs(android.icu.util.TimeZone.SystemTimeZoneType,java.lang.String,java.lang.Integer)": {"Returns": [["@B_java#util#Set_E@", "an immutable set of system time zone IDs."]], "Parameters": [["@B_android#icu#util#TimeZone#SystemTimeZoneType_E@", "TimeZone.SystemTimeZoneType: The system time zone type."], ["@B_java#lang#String_E@", "String: The ISO 3166 two-letter country code or UN M.49 three-digit area code. When null, no filtering done by region."], ["@B_java#lang#Integer_E@", "Integer: An offset from GMT in milliseconds, ignoring the effect of daylight savings time, if any. When null, no filtering done by zone offset."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#SystemTimeZoneType_E@"], "Permissions": [], "Description": "Set returned by this method is immutable.", "history": "Added in API level 24", "FullName": "public static Set<String> getAvailableIDs (TimeZone.SystemTimeZoneType zoneType, String region, Integer rawOffset)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if this object is the same as the obj argument; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the reference object with which to compare."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "getTimeZone(java.lang.String)": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the specified TimeZone, or a mutable clone of the UNKNOWN_ZONE if the given ID cannot be understood or if the given ID is \"Etc/Unknown\"."]], "Parameters": [["@B_java#lang#String_E@", "String: the ID for a TimeZone, such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations, such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone_E@"], "Permissions": [], "Description": "Gets the TimeZone for the given ID.", "history": "Added in API level 24", "FullName": "public static TimeZone getTimeZone (String ID)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides hashCode.", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "cloneAsThawed()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Provides for the clone operation. Any clone is initially unfrozen.", "history": "Added in API level 24", "FullName": "public TimeZone cloneAsThawed ()"}, "getDSTSavings()": {"Returns": [["int", "the amount of saving time in milliseconds"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the amount of time to be added to local standard time to get local wall clock time. The default implementation always returns 3600000 milliseconds (i.e., one hour) if this time zone observes Daylight Saving Time. Otherwise, 0 (zero) is returned. If an underlying TimeZone implementation subclass supports historical Daylight Saving Time changes, this method returns the known latest daylight saving value.", "history": "Added in API level 24", "FullName": "public int getDSTSavings ()"}, "getTimeZone(java.lang.String,int)": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the specified TimeZone, or a mutable clone of the UNKNOWN_ZONE if the given ID cannot be understood or if the given ID is \"Etc/Unknown\"."]], "Parameters": [["@B_java#lang#String_E@", "String: the ID for a TimeZone, such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations, such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used."], ["int", "int: Time zone type, either TIMEZONE_ICU or TIMEZONE_JDK."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone_E@"], "Permissions": [], "Description": "Gets the TimeZone for the given ID and the timezone type.", "history": "Added in API level 24", "FullName": "public static TimeZone getTimeZone (String ID, int type)"}, "getFrozenTimeZone(java.lang.String)": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the specified TimeZone, or the UNKNOWN_ZONE if the given ID cannot be understood."]], "Parameters": [["@B_java#lang#String_E@", "String: the ID for a TimeZone, such as \"America/Los_Angeles\", or a custom ID such as \"GMT-8:00\". Note that the support of abbreviations, such as \"PST\", is for JDK 1.1.x compatibility only and full names should be used."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone_E@"], "Permissions": [], "Description": "Gets the TimeZone for the given ID. The instance of TimeZone returned by this method is immutable. Any methods mutate the instance(@B_android#icu#util#TimeZone#setID_E@, @B_android#icu#util#TimeZone#setRawOffset_E@) will throw UnsupportedOperationException upon its invocation.", "history": "Added in API level 24", "FullName": "public static TimeZone getFrozenTimeZone (String ID)"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the default DISPLAY locale. This method returns the long generic name. If the display name is not available for the locale, a fallback based on the country, city, or time zone id will be used.", "history": "Added in API level 24", "FullName": "public final String getDisplayName ()"}, "freeze()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "the object itself."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Freezes the object.", "history": "Added in API level 24", "FullName": "public TimeZone freeze ()"}, "getEquivalentID(java.lang.String,int)": {"Returns": [["@B_java#lang#String_E@", "the ID of the index-th zone in the equivalency group containing 'id', or an empty string if 'id' is not a valid system ID or 'index' is out of range"]], "Parameters": [["@B_java#lang#String_E@", "String: a system time zone ID"], ["int", "int: a value from 0 to n-1, where n is the value returned by countEquivalentIDs(id)"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#countEquivalentIDs_E@"], "Permissions": [], "Description": "Returns an ID in the equivalency group that includes the given ID. An equivalency group contains zones that have the same GMT offset and rules. The given index must be in the range 0..n-1, where n is the value returned by countEquivalentIDs(id). For some value of 'index', the returned value will be equal to the given id. If the given id is not a valid system time zone, or if 'index' is out of range, then returns an empty string.", "history": "Added in API level 24", "FullName": "public static String getEquivalentID (String id, int index)"}, "getEquivalentID(java.lang.String, int)": {"Returns": [["@B_java#lang#String_E@", "the ID of the index-th zone in the equivalency group containing 'id', or an empty string if 'id' is not a valid system ID or 'index' is out of range"]], "Parameters": [["@B_java#lang#String_E@", "String: a system time zone ID"], ["int", "int: a value from 0 to n-1, where n is the value returned by countEquivalentIDs(id)"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#countEquivalentIDs_E@"], "Permissions": [], "Description": "Returns an ID in the equivalency group that includes the given ID. An equivalency group contains zones that have the same GMT offset and rules. The given index must be in the range 0..n-1, where n is the value returned by countEquivalentIDs(id). For some value of 'index', the returned value will be equal to the given id. If the given id is not a valid system time zone, or if 'index' is out of range, then returns an empty string.", "history": "added in API level 24", "FullName": "public static String getEquivalentID (String id, int index)"}, "getRegion(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "the region code associated with the given system time zone ID."]], "Parameters": [["@B_java#lang#String_E@", "String: the system time zone ID."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if id is not a known system ID."]], "SeeAlso": ["@B_android#icu#util#TimeZone#getAvailableIDs_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getRegion (String id)"}, "countEquivalentIDs(java.lang.String)": {"Returns": [["int", "the number of zones in the equivalency group containing 'id', or zero if 'id' is not a valid system ID"]], "Parameters": [["@B_java#lang#String_E@", "String: a system time zone ID"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getEquivalentID_E@"], "Permissions": [], "Description": "The returned count includes the given ID; it is always >= 1 for valid IDs. The given ID must be a system time zone. If it is not, returns zero.", "history": "Added in API level 24", "FullName": "public static int countEquivalentIDs (String id)"}, "getWindowsID(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "A Windows time zone ID mapped from the input system time zone ID, or null when the input ID is unknown or unmappable."]], "Parameters": [["@B_java#lang#String_E@", "String: A system time zone ID"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getIDForWindowsID_E@"], "Permissions": [], "Description": "There are system time zones that cannot be mapped to Windows zones. When the input system time zone ID is unknown or unmappable to a Windows time zone, then this method returns null. This implementation utilizes", "history": "Added in API level 24", "FullName": "public static String getWindowsID (String id)"}, "hasSameRules(android.icu.util.TimeZone)": {"Returns": [["boolean", "true if the other zone is not null and is the same as this one, with the possible exception of the ID"]], "Parameters": [["@B_android#icu#util#TimeZone_E@", "TimeZone: the TimeZone object to be compared with"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this zone has the same rule and offset as another zone. That is, if this zone differs only in ID, if at all. Returns false if the other zone is null.", "history": "Added in API level 24", "FullName": "public boolean hasSameRules (TimeZone other)"}, "setID(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the new time zone ID."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the time zone ID. This does not change any other data in the time zone object.", "history": "Added in API level 24", "FullName": "public void setID (String ID)"}, "getOffset(int, int, int, int, int, int)": {"Returns": [["int", "the offset to add *to* GMT to get local time."]], "Parameters": [["int", "int: the era of the given date."], ["int", "int: the year in the given date."], ["int", "int: the month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: the day-in-month of the given date."], ["int", "int: the day-of-week of the given date."], ["int", "int: the millis in day in standard local time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add *to* UTC to get local time.", "history": "added in API level 24", "FullName": "public abstract int getOffset (int era, int year, int month, int day, int dayOfWeek, int milliseconds)"}, "getAvailableIDs(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "an array of IDs for system TimeZones in the given country. If there are none, return a zero-length array."]], "Parameters": [["@B_java#lang#String_E@", "String: a two-letter ISO 3166 country code, or null to return zones not associated with any country"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getAvailableIDs_E@"], "Permissions": [], "Description": "Return a new String array containing all system TimeZone IDs associated with the given country. These IDs may be passed to get() to construct the corresponding TimeZone object.", "history": "Added in API level 24", "FullName": "public static String[] getAvailableIDs (String country)"}, "getTZDataVersion()": {"Returns": [["@B_java#lang#String_E@", "the version string, such as \"2007f\""]], "Parameters": [], "Throws": [["@B_java#util#MissingResourceException_E@", "if ICU time zone resource bundle is missing or the version information is not available."]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getTZDataVersion ()"}, "getDisplayName(boolean,int)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [["boolean", "boolean: if true, return the daylight savings name."], ["int", "int: the output style of the display name. Valid styles are SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT, SHORT_COMMONLY_USED or GENERIC_LOCATION."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the default DISPLAY locale. If the display name is not available for the locale, then this method returns a string in the localized GMT offset format such as GMT[+-]HH:mm.", "history": "Added in API level 24", "FullName": "public final String getDisplayName (boolean daylight, int style)"}, "TimeZone()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Default constructor. (For invocation by subclass constructors, typically implicit.)", "history": "Added in API level 24", "FullName": "public TimeZone ()"}, "getRawOffset()": {"Returns": [["int", "the unmodified offset to add *to* UTC to get local time."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets unmodified offset, NOT modified in case of daylight savings. This is the offset to add *to* UTC to get local time.", "history": "Added in API level 24", "FullName": "public abstract int getRawOffset ()"}, "getDisplayName(android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale or in the default ulocale if the given ulocale is not recognized."]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the ulocale in which to supply the display name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the specified locale. This method returns the long name, not including daylight savings. If the display name is not available for the locale, a fallback based on the country, city, or time zone id will be used.", "history": "Added in API level 24", "FullName": "public final String getDisplayName (ULocale locale)"}, "useDaylightTime()": {"Returns": [["boolean", "true if this time zone uses daylight savings time, false, otherwise. Note:The default implementation of ICU TimeZone uses the tz database, which supports historic rule changes, for system time zones. With the implementation, there are time zones that used daylight savings time in the past, but no longer used currently. For example, Asia/Tokyo has never used daylight savings time since 1951. Most clients would expect that this method to return false for such case. The default implementation of this method returns true when the time zone uses daylight savings time in the current (Gregorian) calendar year."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if this time zone uses daylight savings time.", "history": "Added in API level 24", "FullName": "public abstract boolean useDaylightTime ()"}, "getDisplayName(boolean, int)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the default locale."]], "Parameters": [["boolean", "boolean: if true, return the daylight savings name."], ["int", "int: the output style of the display name. Valid styles are SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT, SHORT_COMMONLY_USED or GENERIC_LOCATION."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the default DISPLAY locale. If the display name is not available for the locale, then this method returns a string in the localized GMT offset format such as GMT[+-]HH:mm.", "history": "added in API level 24", "FullName": "public final String getDisplayName (boolean daylight, int style)"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides clone.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "getOffset(long, boolean, int[])": {"Returns": [], "Parameters": [["long", "long: moment in time for which to return offsets, in units of milliseconds from January 1, 1970 0:00 GMT, either GMT time or local wall time, depending on `local'."], ["boolean", "boolean: if true, `date' is local wall time; otherwise it is in GMT time."], ["int[]", "int: output parameter to receive the raw offset, that is, the offset not including DST adjustments, in offsets[0], and the DST offset, that is, the offset to be added to `rawOffset' to obtain the total offset between local and GMT time, in offsets[1]. If DST is not in effect, the DST offset is zero; otherwise it is a positive value, typically one hour."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time zone raw and GMT offset for the given moment in time. Upon return, local-millis = GMT-millis + rawOffset + dstOffset. All computations are performed in the proleptic Gregorian calendar. The default implementation in the TimeZone class delegates to the 8-argument getOffset().", "history": "added in API level 24", "FullName": "public void getOffset (long date, boolean local, int[] offsets)"}, "getDefault()": {"Returns": [["@B_android#icu#util#TimeZone_E@", "a default TimeZone."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the default TimeZone for this host. The source of the default TimeZone may vary with implementation.", "history": "Added in API level 24", "FullName": "public static TimeZone getDefault ()"}, "getOffset(long,boolean,int[])": {"Returns": [], "Parameters": [["long", "long: moment in time for which to return offsets, in units of milliseconds from January 1, 1970 0:00 GMT, either GMT time or local wall time, depending on `local'."], ["boolean", "boolean: if true, `date' is local wall time; otherwise it is in GMT time."], ["int[]", "int: output parameter to receive the raw offset, that is, the offset not including DST adjustments, in offsets[0], and the DST offset, that is, the offset to be added to `rawOffset' to obtain the total offset between local and GMT time, in offsets[1]. If DST is not in effect, the DST offset is zero; otherwise it is a positive value, typically one hour."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the time zone raw and GMT offset for the given moment in time. Upon return, local-millis = GMT-millis + rawOffset + dstOffset. All computations are performed in the proleptic Gregorian calendar. The default implementation in the TimeZone class delegates to the 8-argument getOffset().", "history": "Added in API level 24", "FullName": "public void getOffset (long date, boolean local, int[] offsets)"}, "getOffset(long)": {"Returns": [["int", "the amount of time in milliseconds to add to UTC to get local time."]], "Parameters": [["long", "long: the date represented in milliseconds since January 1, 1970 00:00:00 GMT"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar_E@", "@B_android#icu#util#TimeZone#getOffset_E@"], "Permissions": [], "Description": "Returns the offset of this time zone from UTC at the specified date. If Daylight Saving Time is in effect at the specified date, the offset value is adjusted with the amount of daylight saving.", "history": "Added in API level 24", "FullName": "public int getOffset (long date)"}, "getDisplayName(boolean,int,android.icu.util.ULocale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale or in the default locale if the given locale is not recognized."]], "Parameters": [["boolean", "boolean: if true, return the daylight savings name."], ["int", "int: the output style of the display name. Valid styles are SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT, SHORT_COMMONLY_USED or GENERIC_LOCATION."], ["@B_android#icu#util#ULocale_E@", "ULocale: the locale in which to supply the display name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "style is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the specified locale. If the display name is not available for the locale, then this method returns a string in the localized GMT offset format such as GMT[+-]HH:mm.", "history": "Added in API level 24", "FullName": "public String getDisplayName (boolean daylight, int style, ULocale locale)"}, "isFrozen()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Determines whether the object has been frozen or not.", "history": "Added in API level 24", "FullName": "public boolean isFrozen ()"}, "getDisplayName(boolean,int,java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale or in the default locale if the given locale is not recognized."]], "Parameters": [["boolean", "boolean: if true, return the daylight savings name."], ["int", "int: the output style of the display name. Valid styles are SHORT, LONG, SHORT_GENERIC, LONG_GENERIC, SHORT_GMT, LONG_GMT, SHORT_COMMONLY_USED or GENERIC_LOCATION."], ["@B_java#util#Locale_E@", "Locale: the locale in which to supply the display name."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "style is invalid."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the specified locale. If the display name is not available for the locale, then this method returns a string in the localized GMT offset format such as GMT[+-]HH:mm.", "history": "Added in API level 24", "FullName": "public String getDisplayName (boolean daylight, int style, Locale locale)"}, "inDaylightTime(java.util.Date)": {"Returns": [["boolean", "true if the given date is in daylight savings time, false, otherwise."]], "Parameters": [["@B_java#util#Date_E@", "Date: the given Date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Queries if the given date is in daylight savings time in this time zone.", "history": "Added in API level 24", "FullName": "public abstract boolean inDaylightTime (Date date)"}, "getAvailableIDs()": {"Returns": [["@B_java#lang#String_E@", "an array of all system TimeZone IDs"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getAvailableIDs_E@"], "Permissions": [], "Description": "Return a new String array containing all system TimeZone IDs. These IDs (and only these IDs) may be passed to get() to construct the corresponding TimeZone object.", "history": "Added in API level 24", "FullName": "public static String[] getAvailableIDs ()"}, "getCanonicalID(java.lang.String,boolean[])": {"Returns": [["@B_java#lang#String_E@", "The canonical system time zone ID or the custom time zone ID in normalized format for the given time zone ID. When the given time zone ID is neither a known system time zone ID nor a valid custom time zone ID, null is returned."]], "Parameters": [["@B_java#lang#String_E@", "String: The input time zone ID to be canonicalized."], ["boolean[]", "boolean: When non-null boolean array is specified and the given ID is a known system time zone ID, true is set to isSystemID[0]"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static String getCanonicalID (String id, boolean[] isSystemID)"}, "observesDaylightTime()": {"Returns": [["boolean", "true if this time zone is in daylight saving time or will observe daylight saving time at any future time."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#useDaylightTime_E@"], "Permissions": [], "Description": "Queries if this time zone is in daylight saving time or will observe daylight saving time at any future time. The default implementation in this class returns true if @B_android#icu#util#TimeZone#useDaylightTime_E@ or @B_android#icu#util#TimeZone#inDaylightTime_E@ returns true. @B_java#util#TimeZone_E@ compatibility support. The @B_java#util#TimeZone#useDaylightTime_E@ method only checks the last known rule(s), therefore it may return false even the zone observes daylight saving time currently. @B_java#util#TimeZone_E@ added observesDaylightTime() to resolve the issue. In ICU, @B_android#icu#util#TimeZone#useDaylightTime_E@ works differently. The ICU implementation checks if the zone uses daylight saving time in the current calendar year. Therefore, it will never return false if daylight saving time is currently used. ICU's TimeZone subclass implementations override this method to support the same behavior with @B_java#util#TimeZone#observesDaylightTime_E@. Unlike @B_android#icu#util#TimeZone#useDaylightTime_E@, the implementation does not take past daylight saving time into account, so that this method may return false even when @B_android#icu#util#TimeZone#useDaylightTime_E@ returns true.", "history": "Added in API level 24", "FullName": "public boolean observesDaylightTime ()"}, "getDisplayName(java.util.Locale)": {"Returns": [["@B_java#lang#String_E@", "the human-readable name of this time zone in the given locale or in the default locale if the given locale is not recognized."]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale in which to supply the display name."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a name of this time zone suitable for presentation to the user in the specified locale. This method returns the long generic name. If the display name is not available for the locale, a fallback based on the country, city, or time zone id will be used.", "history": "Added in API level 24", "FullName": "public final String getDisplayName (Locale locale)"}, "getIDForWindowsID(java.lang.String,java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "A system time zone ID mapped from the input Windows time zone ID, or null when the input ID is unknown or unmappable."]], "Parameters": [["@B_java#lang#String_E@", "String: A Windows time zone ID"], ["@B_java#lang#String_E@", "String: A region code, or null if no regional preference."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#TimeZone#getWindowsID_E@"], "Permissions": [], "Description": "null), \"America/Vancouver\" is returned for the same Windows ID \"Pacific Standard Time\" and region \"CA\". Not all Windows time zones can be mapped to system time zones. When the input Windows time zone ID is unknown or unmappable to a system time zone, then this method returns null. This implementation utilizes", "history": "Added in API level 24", "FullName": "public static String getIDForWindowsID (String winid, String region)"}, "getOffset(int,int,int,int,int,int)": {"Returns": [["int", "the offset to add *to* GMT to get local time."]], "Parameters": [["int", "int: the era of the given date."], ["int", "int: the year in the given date."], ["int", "int: the month in the given date. Month is 0-based. e.g., 0 for January."], ["int", "int: the day-in-month of the given date."], ["int", "int: the day-of-week of the given date."], ["int", "int: the millis in day in standard local time."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the time zone offset, for current date, modified in case of daylight savings. This is the offset to add *to* UTC to get local time.", "history": "Added in API level 24", "FullName": "public abstract int getOffset (int era, int year, int month, int day, int dayOfWeek, int milliseconds)"}}, "Inheritance": [], "ClassName": "android.icu.util.TimeZone", "ClassDesc": "@B_java#util#TimeZone_E@. Methods, fields, and other functionality specific to ICU are labeled 'TimeZone represents a time zone offset, and also computes daylight savings. Typically, you get a TimeZone using @B_android#icu#util#TimeZone#getDefault_E@ which creates a TimeZone based on the time zone where the program is running. For example, for a program running in Japan, getDefault creates a TimeZone object based on Japanese Standard Time. You can also get a TimeZone using @B_android#icu#util#TimeZone#getTimeZone_E@ along with a time zone ID. For instance, the time zone ID for the U.S. Pacific Time zone is \"America/Los_Angeles\". So, you can get a U.S. Pacific Time TimeZone object with: @B_android#icu#util#TimeZone#getAvailableIDs_E@ method to iterate through all the supported time zone IDs, or getCanonicalID method to check if a time zone ID is supported or not. You can then choose a supported ID to get a TimeZone. If the time zone you want is not represented by one of the supported IDs, then you can create a custom time zone ID with the following syntax: TimeZone that is returned when you specify a custom time zone ID uses the specified offset from GMT(=UTC) and does not observe daylight saving time. For example, you might specify GMT+14:00 as a custom time zone ID to create a TimeZone representing 14 hours ahead of GMT (with no daylight saving time). In addition, getCanonicalID can also be used to normalize a custom time zone ID. For compatibility with JDK 1.1.x, some other three-letter time zone IDs (such as \"PST\", \"CTT\", \"AST\") are also supported. However,"}