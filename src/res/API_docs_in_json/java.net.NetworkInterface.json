{"Functions": {"isPointToPoint()": {"Returns": [["boolean", "true if the interface is a point to point interface."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a network interface is a point to point interface. A typical point to point interface would be a PPP connection through a modem.", "history": "Added in API level 9", "FullName": "public boolean isPointToPoint ()"}, "getHardwareAddress()": {"Returns": [["byte[]", "a byte array containing the address, or null if the address doesn't exist, is not accessible or a security manager is set and the caller does not have the permission NetPermission(\"getNetworkInformation\")"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the hardware address (usually MAC) of the interface if it has one and if it can be accessed given the current privileges. If a security manager is set, then the caller must have the permission @B_java#net#NetPermission_E@(\"getNetworkInformation\").", "history": "Added in API level 9", "FullName": "public byte[] getHardwareAddress ()"}, "isUp()": {"Returns": [["boolean", "true if the interface is up and running."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a network interface is up and running.", "history": "Added in API level 9", "FullName": "public boolean isUp ()"}, "supportsMulticast()": {"Returns": [["boolean", "true if the interface supports Multicasting."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a network interface supports multicasting or not.", "history": "Added in API level 9", "FullName": "public boolean supportsMulticast ()"}, "getParent()": {"Returns": [["@B_java#net#NetworkInterface_E@", "The NetworkInterface this interface is attached to."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the parent NetworkInterface of this interface if this is a subinterface, or null if it is a physical (non virtual) interface or has no parent.", "history": "Added in API level 9", "FullName": "public NetworkInterface getParent ()"}, "getInterfaceAddresses()": {"Returns": [["@B_java#util#List_E@", "a List object with all or a subset of the InterfaceAddresss of this network interface"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a List of all or a subset of the InterfaceAddresses of this network interface. If there is a security manager, its checkConnect method is called with the InetAddress for each InterfaceAddress. Only InterfaceAddresses where the checkConnect doesn't throw a SecurityException will be returned in the List.", "history": "Added in API level 9", "FullName": "public List<InterfaceAddress> getInterfaceAddresses ()"}, "isLoopback()": {"Returns": [["boolean", "true if the interface is a loopback interface."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns whether a network interface is a loopback interface.", "history": "Added in API level 9", "FullName": "public boolean isLoopback ()"}, "getIndex()": {"Returns": [["int", "the index of this network interface or -1 if the index is unknown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#net#NetworkInterface#getByIndex_E@"], "Permissions": [], "Description": "Returns the index of this network interface. The index is an integer greater or equal to zero, or -1 for unknown. This is a system specific value and interfaces with the same name can have different indexes on different machines.", "history": "Added in API level 19", "FullName": "public int getIndex ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "a string representation of the object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string representation of the object. In general, the toString method returns a string that \"textually represents\" this object. The result should be a concise but informative representation that is easy for a person to read. It is recommended that all subclasses override this method. The toString method for class Object returns a string consisting of the name of the class of which the object is an instance, the at-sign character `@', and the unsigned hexadecimal representation of the hash code of the object. In other words, this method returns a string equal to the value of:", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getNetworkInterfaces()": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration of NetworkInterfaces found on this machine"]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns all the interfaces on this machine. The Enumeration contains at least one element, possibly representing a loopback interface that only supports communication between entities on this machine. NOTE: can use getNetworkInterfaces()+getInetAddresses() to obtain all IP addresses for this node", "history": "Added in API level 1", "FullName": "public static Enumeration<NetworkInterface> getNetworkInterfaces ()"}, "isVirtual()": {"Returns": [["boolean", "true if this interface is a virtual interface."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns whether this interface is a virtual interface (also called subinterface). Virtual interfaces are, on some systems, interfaces created as a child of a physical interface and given different settings (like address or MTU). Usually the name of the interface will the name of the parent followed by a colon (:) and a number identifying the child since there can be several virtual interfaces attached to a single physical interface.", "history": "Added in API level 9", "FullName": "public boolean isVirtual ()"}, "getByIndex(int)": {"Returns": [["@B_java#net#NetworkInterface_E@", "the NetworkInterface obtained from its index, or null if there is no interface with such an index on the system"]], "Parameters": [["int", "int: an integer, the index of the interface"]], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."], ["@B_java#lang#IllegalArgumentException_E@", "if index has a negative value"]], "SeeAlso": ["@B_java#net#NetworkInterface#getIndex_E@"], "Permissions": [], "Description": "Get a network interface given its index.", "history": "Added in API level 19", "FullName": "public static NetworkInterface getByIndex (int index)"}, "getByName(java.lang.String)": {"Returns": [["@B_java#net#NetworkInterface_E@", "A NetworkInterface with the specified name, or null if there is no network interface with the specified name."]], "Parameters": [["@B_java#lang#String_E@", "String: The name of the network interface."]], "Throws": [["@B_java#net#SocketException_E@", "If an I/O error occurs."], ["@B_java#lang#NullPointerException_E@", "If the specified name is null."]], "SeeAlso": [], "Permissions": [], "Description": "Searches for the network interface with the specified name.", "history": "Added in API level 1", "FullName": "public static NetworkInterface getByName (String name)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the objects are the same; false otherwise."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against."]], "Throws": [], "SeeAlso": ["@B_java#net#InetAddress#getAddress_E@"], "Permissions": [], "Description": "Compares this object against the specified object. The result is true if and only if the argument is not null and it represents the same NetworkInterface as this object. Two instances of NetworkInterface represent the same NetworkInterface if both name and addrs are the same for both.", "history": "Added in API level 1", "FullName": "public boolean equals (Object obj)"}, "getDisplayName()": {"Returns": [["@B_java#lang#String_E@", "a non-empty string representing the display name of this network interface, or null if no display name is available."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the display name of this network interface. A display name is a human readable String describing the network device.", "history": "Added in API level 1", "FullName": "public String getDisplayName ()"}, "getByInetAddress(java.net.InetAddress)": {"Returns": [["@B_java#net#NetworkInterface_E@", "A NetworkInterface or null if there is no network interface with the specified IP address."]], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The InetAddress to search with."]], "Throws": [["@B_java#net#SocketException_E@", "If an I/O error occurs."], ["@B_java#lang#NullPointerException_E@", "If the specified address is null."]], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to search for a network interface that has the specified Internet Protocol (IP) address bound to it. If the specified IP address is bound to multiple network interfaces it is not defined which network interface is returned.", "history": "Added in API level 1", "FullName": "public static NetworkInterface getByInetAddress (InetAddress addr)"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "getMTU()": {"Returns": [["int", "the value of the MTU for that interface."]], "Parameters": [], "Throws": [["@B_java#net#SocketException_E@", "if an I/O error occurs."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the Maximum Transmission Unit (MTU) of this interface.", "history": "Added in API level 9", "FullName": "public int getMTU ()"}, "getSubInterfaces()": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration object with all of the subinterfaces of this network interface"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get an Enumeration with all the subinterfaces (also known as virtual interfaces) attached to this network interface. For instance eth0:1 will be a subinterface to eth0.", "history": "Added in API level 9", "FullName": "public Enumeration<NetworkInterface> getSubInterfaces ()"}, "getName()": {"Returns": [["@B_java#lang#String_E@", "the name of this network interface"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the name of this network interface.", "history": "Added in API level 1", "FullName": "public String getName ()"}, "getInetAddresses()": {"Returns": [["@B_java#util#Enumeration_E@", "an Enumeration object with all or a subset of the InetAddresses bound to this network interface"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to return an Enumeration with all or a subset of the InetAddresses bound to this network interface. If there is a security manager, its checkConnect method is called for each InetAddress. Only InetAddresses where the checkConnect doesn't throw a SecurityException will be returned in the Enumeration. However, if the caller has the @B_java#net#NetPermission_E@(\"getNetworkInformation\") permission, then all InetAddresses are returned.", "history": "Added in API level 1", "FullName": "public Enumeration<InetAddress> getInetAddresses ()"}}, "Inheritance": [], "ClassName": "java.net.NetworkInterface", "ClassDesc": "This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. It is used to identify the local interface on which a multicast group is joined. Interfaces are normally known by names such as \"le0\"."}