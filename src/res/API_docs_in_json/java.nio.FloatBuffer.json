{"Functions": {"put(float[],int,int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The array from which floats are to be read"], ["int", "int: The offset within the array of the first float to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of floats to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers floats into this buffer from the given source array. If there are more floats to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public FloatBuffer put (float[] src, int offset, int length)"}, "get()": {"Returns": [["float", "The float at the buffer's current position"]], "Parameters": [], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If the buffer's current position is not smaller than its limit"]], "SeeAlso": [], "Permissions": [], "Description": "Relative", "history": "Added in API level 1", "FullName": "public abstract float get ()"}, "isDirect()": {"Returns": [["boolean", "true if, and only if, this buffer is direct"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this float buffer is direct.", "history": "Added in API level 1", "FullName": "public abstract boolean isDirect ()"}, "put(float[], int, int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The array from which floats are to be read"], ["int", "int: The offset within the array of the first float to be read; must be non-negative and no larger than array.length"], ["int", "int: The number of floats to be read from the given array; must be non-negative and no larger than array.length - offset"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers floats into this buffer from the given source array. If there are more floats to be copied from the array than remain in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public FloatBuffer put (float[] src, int offset, int length)"}, "order()": {"Returns": [["@B_java#nio#ByteOrder_E@", "This buffer's byte order"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Retrieves this buffer's byte order. The byte order of a float buffer created by allocation or by wrapping an existing @B_java#nio#ByteOrder#nativeOrder_E@ of the underlying hardware. The byte order of a float buffer created as a", "history": "Added in API level 1", "FullName": "public abstract ByteOrder order ()"}, "wrap(float[], int, int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [["float[]", "float: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a float array into a buffer. The new buffer will be backed by the given float array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#FloatBuffer#array_E@ will be the given array, and its @B_java#nio#FloatBuffer#arrayOffset_E@ will be zero.", "history": "added in API level 1", "FullName": "public static FloatBuffer wrap (float[] array, int offset, int length)"}, "hasArray()": {"Returns": [["boolean", "true if, and only if, this buffer is backed by an array and is not read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is backed by an accessible float array. If this method returns @B_java#nio#FloatBuffer#array_E@ and @B_java#nio#FloatBuffer#arrayOffset_E@ methods may safely be invoked.", "history": "Added in API level 1", "FullName": "public final boolean hasArray ()"}, "wrap(float[],int,int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [["float[]", "float: The array that will back the new buffer"], ["int", "int: The offset of the subarray to be used; must be non-negative and no larger than array.length. The new buffer's position will be set to this value."], ["int", "int: The length of the subarray to be used; must be non-negative and no larger than array.length - offset. The new buffer's limit will be set to offset + length."]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Wraps a float array into a buffer. The new buffer will be backed by the given float array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity will be @B_java#nio#FloatBuffer#array_E@ will be the given array, and its @B_java#nio#FloatBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static FloatBuffer wrap (float[] array, int offset, int length)"}, "clear()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Clears this buffer. The position is set to zero, the limit is set to the capacity, and the mark is discarded. Invoke this method before using a sequence of channel-read or This method does not actually erase the data in the buffer, but it is named as if it did because it will most often be used in situations in which that might as well be the case.", "history": "Added in API level 1", "FullName": "public Buffer clear ()"}, "flip()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Flips this buffer. The limit is set to the current position and then the position is set to zero. If the mark is defined then it is discarded. After a sequence of channel-read or This method is often used in conjunction with the @B_java#nio#ByteBuffer#compact_E@ method when transferring data from one place to another.", "history": "Added in API level 1", "FullName": "public Buffer flip ()"}, "get(float[])": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The destination array"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length floats remaining in this buffer"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers floats from this buffer into the given destination array. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public FloatBuffer get (float[] dst)"}, "duplicate()": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new float buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer duplicate ()"}, "compareTo(java.nio.FloatBuffer)": {"Returns": [["int", "A negative integer, zero, or a positive integer as this buffer is less than, equal to, or greater than the given buffer"]], "Parameters": [["@B_java#nio#FloatBuffer_E@", "FloatBuffer no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares this buffer to another. Two float buffers are compared by comparing their sequences of remaining elements lexicographically, without regard to the starting position of each sequence within its corresponding buffer. Pairs of float elements are compared as if by invoking @B_java#lang#Float#compare_E@, except that -0.0 and 0.0 are considered to be equal. Float.NaN is considered by this method to be equal to itself and greater than all other float values (including Float.POSITIVE_INFINITY). A float buffer is not comparable to any other type of object.", "history": "Added in API level 1", "FullName": "public int compareTo (FloatBuffer that)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if, and only if, this buffer is equal to the given object"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to which this buffer is to be compared"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this buffer is equal to another object. Two float buffers are equal if, and only if, A float buffer is not equal to any other type of object.", "history": "Added in API level 1", "FullName": "public boolean equals (Object ob)"}, "wrap(float[])": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [["float[]", "float: The array that will back this buffer"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Wraps a float array into a buffer. The new buffer will be backed by the given float array; that is, modifications to the buffer will cause the array to be modified and vice versa. The new buffer's capacity and limit will be @B_java#nio#FloatBuffer#array_E@ will be the given array, and its @B_java#nio#FloatBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static FloatBuffer wrap (float[] array)"}, "slice()": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new float buffer whose content is a shared subsequence of this buffer's content. The content of the new buffer will start at this buffer's current position. Changes to this buffer's content will be visible in the new buffer, and vice versa; the two buffers' position, limit, and mark values will be independent. The new buffer's position will be zero, its capacity and its limit will be the number of floats remaining in this buffer, and its mark will be undefined. The new buffer will be direct if, and only if, this buffer is direct, and it will be read-only if, and only if, this buffer is read-only.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer slice ()"}, "hashCode()": {"Returns": [["int", "The current hash code of this buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current hash code of this buffer. The hash code of a float buffer depends only upon its remaining elements; that is, upon the elements from Because buffer hash codes are content-dependent, it is inadvisable to use buffers as keys in hash maps or similar data structures unless it is known that their contents will not change.", "history": "Added in API level 1", "FullName": "public int hashCode ()"}, "arrayOffset()": {"Returns": [["int", "The offset within this buffer's array of the first element of the buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset within this buffer's backing array of the first element of the buffer If this buffer is backed by an array then buffer position Invoke the @B_java#nio#FloatBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final int arrayOffset ()"}, "asReadOnlyBuffer()": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new, read-only float buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new, read-only float buffer that shares this buffer's content. The content of the new buffer will be that of this buffer. Changes to this buffer's content will be visible in the new buffer; the new buffer itself, however, will be read-only and will not allow the shared content to be modified. The two buffers' position, limit, and mark values will be independent. The new buffer's capacity, limit, position, and mark values will be identical to those of this buffer. If this buffer is itself read-only then this method behaves in exactly the same way as the @B_java#nio#FloatBuffer#duplicate_E@ method.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer asReadOnlyBuffer ()"}, "position(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new position value; must be non-negative and no larger than the current limit"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's position. If the mark is defined and larger than the new position then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer position (int newPosition)"}, "reset()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Resets this buffer's position to the previously-marked position. Invoking this method neither changes nor discards the mark's value.", "history": "Added in API level 1", "FullName": "public Buffer reset ()"}, "put(float[])": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The source array"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the entire content of the given source float array into this buffer. An invocation of this method of the form", "history": "Added in API level 1", "FullName": "public final FloatBuffer put (float[] src)"}, "array()": {"Returns": [["float[]", "The array that backs this buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is backed by an array but is read-only"], ["@B_java#lang#UnsupportedOperationException_E@", "If this buffer is not backed by an accessible array"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the float array that backs this buffer Modifications to this buffer's content will cause the returned array's content to be modified, and vice versa. Invoke the @B_java#nio#FloatBuffer#hasArray_E@ method before invoking this method in order to ensure that this buffer has an accessible backing array.", "history": "Added in API level 1", "FullName": "public final float[] array ()"}, "rewind()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Rewinds this buffer. The position is set to zero and the mark is discarded. Invoke this method before a sequence of channel-write or", "history": "Added in API level 1", "FullName": "public Buffer rewind ()"}, "compact()": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [], "Throws": [["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Compacts this buffer The floats between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the float at index The buffer's position is set to the number of floats copied, rather than to zero, so that an invocation of this method can be followed immediately by an invocation of another relative", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer compact ()"}, "put(int, float)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the float will be written"], ["float", "float: The float value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given float into this buffer at the given index.", "history": "added in API level 1", "FullName": "public abstract FloatBuffer put (int index, float f)"}, "allocate(int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "The new float buffer"]], "Parameters": [["int", "int: The new buffer's capacity, in floats"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "If the capacity is a negative integer"]], "SeeAlso": [], "Permissions": [], "Description": "Allocates a new float buffer. The new buffer's position will be zero, its limit will be its capacity, its mark will be undefined, and each of its elements will be initialized to zero. It will have a @B_java#nio#FloatBuffer#array_E@, and its @B_java#nio#FloatBuffer#arrayOffset_E@ will be zero.", "history": "Added in API level 1", "FullName": "public static FloatBuffer allocate (int capacity)"}, "put(java.nio.FloatBuffer)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["@B_java#nio#FloatBuffer_E@", "FloatBuffer: The source buffer from which floats are to be read; must not be this buffer"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If there is insufficient space in this buffer for the remaining floats in the source buffer"], ["@B_java#lang#IllegalArgumentException_E@", "If the source buffer is this buffer"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers the floats remaining in the given source buffer into this buffer. If there are more floats remaining in the source buffer than in this buffer, that is, if @B_java#nio#BufferOverflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public FloatBuffer put (FloatBuffer src)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "A summary string"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a string summarizing the state of this buffer.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "get(float[],int,int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The array into which floats are to be written"], ["int", "int: The offset within the array of the first float to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of floats to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length floats remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers floats from this buffer into the given destination array. If there are fewer floats remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "Added in API level 1", "FullName": "public FloatBuffer get (float[] dst, int offset, int length)"}, "get(int)": {"Returns": [["float", "The float at the given index"]], "Parameters": [["int", "int: The index from which the float will be read"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute", "history": "Added in API level 1", "FullName": "public abstract float get (int index)"}, "limit(int)": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [["int", "int: The new limit value; must be non-negative and no larger than this buffer's capacity"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's limit. If the position is larger than the new limit then it is set to the new limit. If the mark is defined and larger than the new limit then it is discarded.", "history": "Added in API level 1", "FullName": "public Buffer limit (int newLimit)"}, "put(float)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float", "float: The float to be written"]], "Throws": [["@B_java#nio#BufferOverflowException_E@", "If this buffer's current position is not smaller than its limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Relative Writes the given float into this buffer at the current position, and then increments the position.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer put (float f)"}, "put(int,float)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["int", "int: The index at which the float will be written"], ["float", "float: The float value to be written"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "If index is negative or not smaller than the buffer's limit"], ["@B_java#nio#ReadOnlyBufferException_E@", "If this buffer is read-only"]], "SeeAlso": [], "Permissions": [], "Description": "Absolute Writes the given float into this buffer at the given index.", "history": "Added in API level 1", "FullName": "public abstract FloatBuffer put (int index, float f)"}, "get(float[], int, int)": {"Returns": [["@B_java#nio#FloatBuffer_E@", "This buffer"]], "Parameters": [["float[]", "float: The array into which floats are to be written"], ["int", "int: The offset within the array of the first float to be written; must be non-negative and no larger than dst.length"], ["int", "int: The maximum number of floats to be written to the given array; must be non-negative and no larger than dst.length - offset"]], "Throws": [["@B_java#nio#BufferUnderflowException_E@", "If there are fewer than length floats remaining in this buffer"], ["@B_java#lang#IndexOutOfBoundsException_E@", "If the preconditions on the offset and length parameters do not hold"]], "SeeAlso": [], "Permissions": [], "Description": "Relative bulk This method transfers floats from this buffer into the given destination array. If there are fewer floats remaining in the buffer than are required to satisfy the request, that is, if @B_java#nio#BufferUnderflowException_E@ is thrown. Otherwise, this method copies In other words, an invocation of this method of the form", "history": "added in API level 1", "FullName": "public FloatBuffer get (float[] dst, int offset, int length)"}, "mark()": {"Returns": [["@B_java#nio#Buffer_E@", "This buffer"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this buffer's mark at its position.", "history": "Added in API level 1", "FullName": "public Buffer mark ()"}}, "Inheritance": ["@B_java#nio#Buffer_E@"], "ClassName": "java.nio.FloatBuffer", "ClassDesc": "A float buffer. This class defines four categories of operations upon float buffers: Absolute and relative @B_java#nio#FloatBuffer#get_E@ and @B_java#nio#FloatBuffer#put_E@ methods that read and write single floats; Relative @B_java#nio#FloatBuffer#get_E@ methods that transfer contiguous sequences of floats from this buffer into an array; and Relative @B_java#nio#FloatBuffer#put_E@ methods that transfer contiguous sequences of floats from a float array or some other float buffer into this buffer; and Methods for @B_java#nio#FloatBuffer#compact_E@, @B_java#nio#FloatBuffer#duplicate_E@, and @B_java#nio#FloatBuffer#slice_E@ a float buffer. Float buffers can be created either by @B_java#nio#FloatBuffer#allocate_E@, which allocates space for the buffer's content, by @B_java#nio#FloatBuffer#wrap_E@ an existing float array into a buffer, or by creating a Like a byte buffer, a float buffer is either @B_java#nio#FloatBuffer#isDirect_E@ method. Methods in this class that do not otherwise have a value to return are specified to return the buffer upon which they are invoked. This allows method invocations to be chained."}