{"Functions": {"AudioStream(java.net.InetAddress)": {"Returns": [], "Parameters": [["@B_java#net#InetAddress_E@", "InetAddress: The network address of the local host to bind to."]], "Throws": [["@B_java#net#SocketException_E@", "if the address cannot be bound or a problem occurs during binding."]], "SeeAlso": [], "Permissions": [], "Description": "Creates an AudioStream on the given local address. Note that the local port is assigned automatically to conform with RFC 3550.", "history": "Added in API level 12", "FullName": "public AudioStream (InetAddress address)"}, "join(android.net.rtp.AudioGroup)": {"Returns": [], "Parameters": [["@B_android#net#rtp#AudioGroup_E@", "AudioGroup: The AudioGroup to join or null to leave."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if the stream is not properly configured."]], "SeeAlso": ["@B_android#net#rtp#AudioGroup_E@"], "Permissions": [], "Description": "Joins an @B_android#net#rtp#AudioGroup_E@. Each stream can join only one group at a time. The group can be changed by passing a different one or removed by calling this method with null.", "history": "Added in API level 12", "FullName": "public void join (AudioGroup group)"}, "setCodec(android.net.rtp.AudioCodec)": {"Returns": [], "Parameters": [["@B_android#net#rtp#AudioCodec_E@", "AudioCodec: The AudioCodec to be used."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if its type is used by DTMF."], ["@B_java#lang#IllegalStateException_E@", "if the stream is busy."]], "SeeAlso": [], "Permissions": [], "Description": "Sets the @B_android#net#rtp#AudioCodec_E@.", "history": "Added in API level 12", "FullName": "public void setCodec (AudioCodec codec)"}, "getGroup()": {"Returns": [["@B_android#net#rtp#AudioGroup_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the joined @B_android#net#rtp#AudioGroup_E@.", "history": "Added in API level 12", "FullName": "public AudioGroup getGroup ()"}, "getDtmfType()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#rtp#AudioStream#setDtmfType_E@"], "Permissions": [], "Description": "Returns the RTP payload type for dual-tone multi-frequency (DTMF) digits, or -1 if it is not enabled.", "history": "Added in API level 12", "FullName": "public int getDtmfType ()"}, "setDtmfType(int)": {"Returns": [], "Parameters": [["int", "int: The RTP payload type to be used or -1 to disable it."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the type is invalid or used by codec."], ["@B_java#lang#IllegalStateException_E@", "if the stream is busy."]], "SeeAlso": ["@B_android#net#rtp#AudioGroup#sendDtmf_E@"], "Permissions": [], "Description": "Sets the RTP payload type for dual-tone multi-frequency (DTMF) digits. The primary usage is to send digits to the remote gateway to perform certain tasks, such as second-stage dialing. According to RFC 2833, the RTP payload type for DTMF is assigned dynamically, so it must be in the range of 96 and 127. One can use -1 to disable DTMF and free up the previous assigned type. This method cannot be called when the stream already joined an @B_android#net#rtp#AudioGroup_E@.", "history": "Added in API level 12", "FullName": "public void setDtmfType (int type)"}, "getCodec()": {"Returns": [["@B_android#net#rtp#AudioCodec_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#net#rtp#AudioStream#setCodec_E@"], "Permissions": [], "Description": "Returns the @B_android#net#rtp#AudioCodec_E@, or null if it is not set.", "history": "Added in API level 12", "FullName": "public AudioCodec getCodec ()"}, "isBusy()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the stream has already joined an @B_android#net#rtp#AudioGroup_E@.", "history": "Added in API level 12", "FullName": "public final boolean isBusy ()"}}, "Inheritance": ["@B_android#net#rtp#RtpStream_E@"], "ClassName": "android.net.rtp.AudioStream", "ClassDesc": "An AudioStream is a @B_android#net#rtp#RtpStream_E@ which carrys audio payloads over Real-time Transport Protocol (RTP). Two different classes are developed in order to support various usages such as audio conferencing. An AudioStream represents a remote endpoint which consists of a network mapping and a configured @B_android#net#rtp#AudioCodec_E@. On the other side, An @B_android#net#rtp#AudioGroup_E@ represents a local endpoint which mixes all the AudioStreams and optionally interacts with the speaker and the microphone at the same time. The simplest usage includes one for each endpoints. For other combinations, developers should be aware of the limitations described in @B_android#net#rtp#AudioGroup_E@. An AudioStream becomes busy when it joins an AudioGroup. In this case most of the setter methods are disabled. This is designed to ease the task of managing native resources. One can always make an AudioStream leave its AudioGroup by calling @B_android#net#rtp#AudioStream#join_E@ with null and put it back after the modification is done. Using this class requires @B_android#Manifest#permission#INTERNET_E@ permission."}