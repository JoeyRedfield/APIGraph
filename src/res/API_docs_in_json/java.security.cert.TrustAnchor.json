{"Functions": {"toString()": {"Returns": [["@B_java#lang#String_E@", "a formatted string describing the TrustAnchor"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a formatted string describing the TrustAnchor.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "TrustAnchor(javax.security.auth.x500.X500Principal,java.security.PublicKey,byte[])": {"Returns": [], "Parameters": [["@B_javax#security#auth#x500#X500Principal_E@", "X500Principal: the name of the most-trusted CA as X500Principal"], ["@B_java#security#PublicKey_E@", "PublicKey: the public key of the most-trusted CA"], ["byte[]", "byte: a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Specify null to omit the parameter."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified caPrincipal or pubKey parameter is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of TrustAnchor where the most-trusted CA is specified as an X500Principal and public key. Name constraints are an optional parameter, and are intended to be used as additional constraints when validating an X.509 certification path. The name constraints are specified as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#TrustAnchor#TrustAnchor_E@. Note that the name constraints byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public TrustAnchor (X500Principal caPrincipal, PublicKey pubKey, byte[] nameConstraints)"}, "TrustAnchor(java.lang.String,java.security.PublicKey,byte[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the X.500 distinguished name of the most-trusted CA in RFC 2253 String format"], ["@B_java#security#PublicKey_E@", "PublicKey: the public key of the most-trusted CA"], ["byte[]", "byte: a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Specify null to omit the parameter."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the specified caName parameter is empty (caName.length() == 0) or incorrectly formatted or the name constraints cannot be decoded"], ["@B_java#lang#NullPointerException_E@", "if the specified caName or pubKey parameter is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of TrustAnchor where the most-trusted CA is specified as a distinguished name and public key. Name constraints are an optional parameter, and are intended to be used as additional constraints when validating an X.509 certification path. The name constraints are specified as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#TrustAnchor#TrustAnchor_E@. Note that the name constraints byte array supplied here is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public TrustAnchor (String caName, PublicKey pubKey, byte[] nameConstraints)"}, "getTrustedCert()": {"Returns": [["@B_java#security#cert#X509Certificate_E@", "a trusted X509Certificate or null if the trust anchor was not specified as a trusted certificate"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the most-trusted CA certificate.", "history": "Added in API level 1", "FullName": "public final X509Certificate getTrustedCert ()"}, "getCAPublicKey()": {"Returns": [["@B_java#security#PublicKey_E@", "the public key of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the public key of the most-trusted CA.", "history": "Added in API level 1", "FullName": "public final PublicKey getCAPublicKey ()"}, "TrustAnchor(java.security.cert.X509Certificate,byte[])": {"Returns": [], "Parameters": [["@B_java#security#cert#X509Certificate_E@", "X509Certificate: a trusted X509Certificate"], ["byte[]", "byte: a byte array containing the ASN.1 DER encoding of a NameConstraints extension to be used for checking name constraints. Only the value of the extension is included, not the OID or criticality flag. Specify null to omit the parameter."]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if the name constraints cannot be decoded"], ["@B_java#lang#NullPointerException_E@", "if the specified X509Certificate is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates an instance of TrustAnchor with the specified X509Certificate and optional name constraints, which are intended to be used as additional constraints when validating an X.509 certification path. The name constraints are specified as a byte array. This byte array should contain the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in Note that the name constraints byte array supplied is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public TrustAnchor (X509Certificate trustedCert, byte[] nameConstraints)"}, "getNameConstraints()": {"Returns": [["byte[]", "a byte array containing the ASN.1 DER encoding of a NameConstraints extension used for checking name constraints, or null if not set."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name constraints parameter. The specified name constraints are associated with this trust anchor and are intended to be used as additional constraints when validating an X.509 certification path. The name constraints are returned as a byte array. This byte array contains the DER encoded form of the name constraints, as they would appear in the NameConstraints structure defined in RFC 3280 and X.509. The ASN.1 notation for this structure is supplied in the documentation for @B_java#security#cert#TrustAnchor#TrustAnchor_E@. Note that the byte array returned is cloned to protect against subsequent modifications.", "history": "Added in API level 1", "FullName": "public final byte[] getNameConstraints ()"}, "getCAName()": {"Returns": [["@B_java#lang#String_E@", "the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the most-trusted CA in RFC 2253 String format.", "history": "Added in API level 1", "FullName": "public final String getCAName ()"}, "getCA()": {"Returns": [["@B_javax#security#auth#x500#X500Principal_E@", "the X.500 distinguished name of the most-trusted CA, or null if the trust anchor was not specified as a trusted public key and name or X500Principal pair"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of the most-trusted CA as an X500Principal.", "history": "Added in API level 1", "FullName": "public final X500Principal getCA ()"}}, "Inheritance": [], "ClassName": "java.security.cert.TrustAnchor", "ClassDesc": "A trust anchor or most-trusted Certification Authority (CA). This class represents a \"most-trusted CA\", which is used as a trust anchor for validating X.509 certification paths. A most-trusted CA includes the public key of the CA, the CA's name, and any constraints upon the set of paths which may be validated using this key. These parameters can be specified in the form of a trusted X509Certificate or as individual parameters. All TrustAnchor objects must be immutable and thread-safe. That is, multiple threads may concurrently invoke the methods defined in this class on a single TrustAnchor object (or more than one) with no ill effects. Requiring TrustAnchor objects to be immutable and thread-safe allows them to be passed around to various pieces of code without worrying about coordinating access. This stipulation applies to all public fields and methods of this class and any added or overridden by subclasses."}