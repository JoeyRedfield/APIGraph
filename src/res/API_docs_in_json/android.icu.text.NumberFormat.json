{"Functions": {"parseCurrency(java.lang.CharSequence,java.text.ParsePosition)": {"Returns": [["@B_android#icu#util#CurrencyAmount_E@", "a CurrencyAmount, or null upon failure"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence: the text to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: input-output position; on input, the position within text to match; must have 0 <= pos.getIndex() < text.length(); on output, the position after the last matched character. If the parse fails, the position in unchanged upon output."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Parses text from the given string as a CurrencyAmount. Unlike the parse() method, this method will attempt to parse a generic currency name, searching for a match of this object's locale's currency display names, or for a 3-letter ISO currency code. This method will fail if this format is not a currency format, that is, if it does not contain the currency pattern symbol (U+00A4) in its prefix or suffix.", "history": "Added in API level 24", "FullName": "public CurrencyAmount parseCurrency (CharSequence text, ParsePosition pos)"}, "setMaximumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of fraction digits to be shown; if less than zero, then zero is used. The concrete subclass may enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getMaximumFractionDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the fraction portion of a number. This must be >= minimumFractionDigits. If the new value for maximumFractionDigits is less than the current value of minimumFractionDigits, then minimumFractionDigits will also be set to the new value.", "history": "Added in API level 24", "FullName": "public void setMaximumFractionDigits (int newValue)"}, "format(android.icu.util.CurrencyAmount,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#CurrencyAmount_E@", "CurrencyAmount no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public StringBuffer format (CurrencyAmount currAmt, StringBuffer toAppendTo, FieldPosition pos)"}, "setMinimumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of integer digits to be shown; if less than zero, then zero is used. Subclasses might enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the integer portion of a number. This must be <= maximumIntegerDigits. If the new value for minimumIntegerDigits is more than the current value of maximumIntegerDigits, then maximumIntegerDigits will also be set to the new value.", "history": "Added in API level 24", "FullName": "public void setMinimumIntegerDigits (int newValue)"}, "setMinimumFractionDigits(int)": {"Returns": [], "Parameters": [["int", "int: the minimum number of fraction digits to be shown; if less than zero, then zero is used. Subclasses might enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getMinimumFractionDigits_E@"], "Permissions": [], "Description": "Sets the minimum number of digits allowed in the fraction portion of a number. This must be <= maximumFractionDigits. If the new value for minimumFractionDigits exceeds the current value of maximumFractionDigits, then maximumFractionDigits will also be set to the new value.", "history": "Added in API level 24", "FullName": "public void setMinimumFractionDigits (int newValue)"}, "getPattern(android.icu.util.ULocale, int)": {"Returns": [["@B_java#lang#String_E@", "the pattern"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale of the data."], ["int", "int: the pattern format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern for the provided locale and choice.", "history": "added in API level 24", "FullName": "protected static String getPattern (ULocale forLocale, int choice)"}, "getCurrencyInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for currency"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getCurrencyInstance (ULocale inLocale)"}, "getNumberInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a general-purpose number format for the specified locale.", "history": "Added in API level 24", "FullName": "public static NumberFormat getNumberInstance (Locale inLocale)"}, "setContext(android.icu.text.DisplayContext)": {"Returns": [], "Parameters": [["@B_android#icu#text#DisplayContext_E@", "DisplayContext: The DisplayContext value to set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public void setContext (DisplayContext context)"}, "parse(java.lang.String)": {"Returns": [["@B_java#lang#Number_E@", "A Number parsed from the string."]], "Parameters": [["@B_java#lang#String_E@", "String: A String whose beginning should be parsed."]], "Throws": [["@B_java#text#ParseException_E@", "if the beginning of the specified string cannot be parsed."]], "SeeAlso": ["@B_android#icu#text#NumberFormat#format_E@"], "Permissions": [], "Description": "Parses text from the beginning of the given string to produce a number. The method might not use the entire text of the given string.", "history": "Added in API level 24", "FullName": "public Number parse (String text)"}, "setParseStrict(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True to enable strict parsing. Default is false."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#isParseStrict_E@"], "Permissions": [], "Description": "The presence and position of special symbols, including currency, must match the pattern. '+123' fails (there is no plus sign in the pattern) Leading or doubled grouping separators ',123' and '1,,234\" fail Groups of incorrect length when grouping is used '1,23' and '1234,567' fail, but '1234' passes Grouping separators used in numbers followed by exponents '1,234E5' fails, but '1234E5' and '1,234E' pass ('E' is not an exponent when not followed by a number) When strict parsing is off, all grouping separators are ignored. This is the default behavior.", "history": "Added in API level 24", "FullName": "public void setParseStrict (boolean value)"}, "getScientificInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a scientific number format"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getScientificInstance ()"}, "getInstance(android.icu.util.ULocale,int)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the specific locale."], ["int", "int: number format style"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if choice is not one of NUMBERSTYLE, CURRENCYSTYLE, PERCENTSTYLE, SCIENTIFICSTYLE, INTEGERSTYLE, ISOCURRENCYSTYLE, PLURALCURRENCYSTYLE, ACCOUNTINGCURRENCYSTYLE. CASHCURRENCYSTYLE, STANDARDCURRENCYSTYLE."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specific style number format for a specific locale.", "history": "Added in API level 24", "FullName": "public static NumberFormat getInstance (ULocale desiredLocale, int choice)"}, "getInstance(android.icu.util.ULocale, int)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the specific locale."], ["int", "int: number format style"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if choice is not one of NUMBERSTYLE, CURRENCYSTYLE, PERCENTSTYLE, SCIENTIFICSTYLE, INTEGERSTYLE, ISOCURRENCYSTYLE, PLURALCURRENCYSTYLE, ACCOUNTINGCURRENCYSTYLE. CASHCURRENCYSTYLE, STANDARDCURRENCYSTYLE."]], "SeeAlso": [], "Permissions": [], "Description": "Returns a specific style number format for a specific locale.", "history": "added in API level 24", "FullName": "public static NumberFormat getInstance (ULocale desiredLocale, int choice)"}, "getNumberInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getNumberInstance (ULocale inLocale)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the object is equal to this."]], "Parameters": [["@B_java#lang#Object_E@", "Object: the object to compare against"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides equals. Two NumberFormats are equal they are of the same class and the user-specified values for settings (groupingUsed, parseIntegerOnly, maximumIntegerDigits, etc.) are equal.", "history": "Added in API level 24", "FullName": "public boolean equals (Object obj)"}, "isParseIntegerOnly()": {"Returns": [["boolean", "true if this will parse integers only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this format will parse numbers as integers only. For example in the English locale, with ParseIntegerOnly true, the string \"1234.\" would be parsed as the integer value 1234 and parsing would stop at the \".\" character. The decimal separator accepted by the parse operation is locale-dependent and determined by the subclass.", "history": "Added in API level 24", "FullName": "public boolean isParseIntegerOnly ()"}, "setRoundingMode(int)": {"Returns": [], "Parameters": [["int", "int: A rounding mode, between BigDecimal.ROUND_UP and BigDecimal.ROUND_UNNECESSARY."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getRoundingMode_E@"], "Permissions": [], "Description": "Set the rounding mode used in this NumberFormat. The default implementation of tis method in NumberFormat always throws UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public void setRoundingMode (int roundingMode)"}, "getIntegerInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for integer values"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale for which a number format is needed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "@B_android#icu#math#BigDecimal#ROUND_HALF_EVEN_E@) for formatting, and to parse only the integer part of an input string (see @B_android#icu#text#NumberFormat#isParseIntegerOnly_E@).", "history": "Added in API level 24", "FullName": "public static NumberFormat getIntegerInstance (ULocale inLocale)"}, "getIntegerInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for integer values"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns an integer number format for the current default FORMAT locale. The returned number format is configured to round floating point numbers to the nearest integer using IEEE half-even rounding (see @B_android#icu#math#BigDecimal#ROUND_HALF_EVEN_E@) for formatting, and to parse only the integer part of an input string (see @B_android#icu#text#NumberFormat#isParseIntegerOnly_E@).", "history": "Added in API level 24", "FullName": "public static final NumberFormat getIntegerInstance ()"}, "getInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getInstance (ULocale inLocale)"}, "format(long,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (long number, StringBuffer toAppendTo, FieldPosition pos)"}, "getScientificInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a scientific number format"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getScientificInstance (Locale inLocale)"}, "getInstance(int)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["int", "int: number format style"]], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getInstance (int style)"}, "format(android.icu.util.CurrencyAmount)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#util#CurrencyAmount_E@", "CurrencyAmount no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public final String format (CurrencyAmount currAmt)"}, "getPattern(android.icu.util.ULocale,int)": {"Returns": [["@B_java#lang#String_E@", "the pattern"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale: the locale of the data."], ["int", "int: the pattern format."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the pattern for the provided locale and choice.", "history": "Added in API level 24", "FullName": "protected static String getPattern (ULocale forLocale, int choice)"}, "setGroupingUsed(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to use grouping."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#isGroupingUsed_E@"], "Permissions": [], "Description": "Sets whether or not grouping will be used in this format. Grouping affects both parsing and formatting.", "history": "Added in API level 24", "FullName": "public void setGroupingUsed (boolean newValue)"}, "format(java.math.BigDecimal)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Convenience method to format a BigDecimal.", "history": "Added in API level 24", "FullName": "public final String format (BigDecimal number)"}, "parse(java.lang.String, java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#isParseIntegerOnly_E@", "@B_android#icu#text#DecimalFormat#setParseBigDecimal_E@", "@B_java#text#Format#parseObject_E@"], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double. The return type is not guaranteed other than for the Long case. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! For more detail on parsing, see the \"Parsing\" header in the class documentation of @B_android#icu#text#DecimalFormat_E@.", "history": "added in API level 24", "FullName": "public abstract Number parse (String text, ParsePosition parsePosition)"}, "getMaximumFractionDigits()": {"Returns": [["int", "the maximum number of fraction digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setMaximumFractionDigits_E@"], "Permissions": [], "Description": "Returns the maximum number of digits allowed in the fraction portion of a number. The default value is 3, which subclasses can override. When formatting, the exact behavior when this value is exceeded is subclass-specific. When parsing, this has no effect.", "history": "Added in API level 24", "FullName": "public int getMaximumFractionDigits ()"}, "getIntegerInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for integer values"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the locale for which a number format is needed"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns an integer number format for the specified locale. The returned number format is configured to round floating point numbers to the nearest integer using IEEE half-even rounding (see @B_android#icu#math#BigDecimal#ROUND_HALF_EVEN_E@) for formatting, and to parse only the integer part of an input string (see @B_android#icu#text#NumberFormat#isParseIntegerOnly_E@).", "history": "Added in API level 24", "FullName": "public static NumberFormat getIntegerInstance (Locale inLocale)"}, "isParseStrict()": {"Returns": [["boolean", "true if strict parsing is in effect"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setParseStrict_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public boolean isParseStrict ()"}, "hashCode()": {"Returns": [["int", "a hash code value for this object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a hash code value for the object. This method is supported for the benefit of hash tables such as those provided by @B_java#util#HashMap_E@. The general contract of hashCode is: Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. If two objects are equal according to the equals(Object) method, then calling the hashCode method on each of the two objects must produce the same integer result. It is not required that if two objects are unequal according to the @B_java#lang#Object#equals_E@ method, then calling the hashCode method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables. As much as is reasonably practical, the hashCode method defined by class Object does return distinct integers for distinct objects. (This is typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the Java\u2122 programming language.)", "history": "Added in API level 24", "FullName": "public int hashCode ()"}, "getPercentInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for percents"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getPercentInstance (ULocale inLocale)"}, "getInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the default number format for the specified locale. The default format is one of the styles provided by the other factory methods: getNumberInstance, getCurrencyInstance or getPercentInstance. Exactly which one is locale-dependent.", "history": "Added in API level 24", "FullName": "public static NumberFormat getInstance (Locale inLocale)"}, "getAvailableLocales()": {"Returns": [["@B_java#util#Locale_E@", "the available locales"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the list of Locales for which NumberFormats are available.", "history": "Added in API level 24", "FullName": "public static Locale[] getAvailableLocales ()"}, "getCurrencyInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for currency"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a currency format for the specified locale.", "history": "Added in API level 24", "FullName": "public static NumberFormat getCurrencyInstance (Locale inLocale)"}, "getInstance(java.util.Locale,int)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the specific locale."], ["int", "int: number format style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getInstance (Locale inLocale, int style)"}, "format(java.math.BigInteger)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public final String format (BigInteger number)"}, "getInstance(java.util.Locale, int)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [["@B_java#util#Locale_E@", "Locale: the specific locale."], ["int", "int: number format style"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 24", "FullName": "public static NumberFormat getInstance (Locale inLocale, int style)"}, "format(double,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["double", "double no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (double number, StringBuffer toAppendTo, FieldPosition pos)"}, "parseObject(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Object_E@", "the parsed number, or null"]], "Parameters": [["@B_java#lang#String_E@", "String: the String to parse"], ["@B_java#text#ParsePosition_E@", "ParsePosition: the position at which to start the parse"]], "Throws": [], "SeeAlso": ["@B_java#text#NumberFormat#parseObject_E@"], "Permissions": [], "Description": "Parses text from a string to produce a number.", "history": "Added in API level 24", "FullName": "public final Object parseObject (String source, ParsePosition parsePosition)"}, "getMinimumFractionDigits()": {"Returns": [["int", "the minimum number of fraction digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setMinimumFractionDigits_E@"], "Permissions": [], "Description": "Returns the minimum number of digits allowed in the fraction portion of a number. The default value is 0, which subclasses can override. When formatting, if this value is not reached, numbers are padded on the right with the locale-specific '0' character to ensure at least this number of fraction digits. When parsing, this has no effect.", "history": "Added in API level 24", "FullName": "public int getMinimumFractionDigits ()"}, "format(double)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["double", "double no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public final String format (double number)"}, "getMinimumIntegerDigits()": {"Returns": [["int", "the minimum number of integer digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setMinimumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the minimum number of digits allowed in the integer portion of a number. The default value is 1, which subclasses can override. When formatting, if this value is not reached, numbers are padded on the left with the locale-specific '0' character to ensure at least this number of integer digits. When parsing, this has no effect.", "history": "Added in API level 24", "FullName": "public int getMinimumIntegerDigits ()"}, "setCurrency(android.icu.util.Currency)": {"Returns": [], "Parameters": [["@B_android#icu#util#Currency_E@", "Currency: new currency object to use. May be null for some subclasses."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the", "history": "Added in API level 24", "FullName": "public void setCurrency (Currency theCurrency)"}, "format(java.lang.Object,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "the string buffer passed in as toAppendTo, with formatted text appended"]], "Parameters": [["@B_java#lang#Object_E@", "Object: The object to format"], ["@B_java#lang#StringBuffer_E@", "StringBuffer: where the text is to be appended"], ["@B_java#text#FieldPosition_E@", "FieldPosition: A FieldPosition identifying a field in the formatted text"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Formats a number and appends the resulting text to the given string buffer. BigInteger and BigDecimal objects.", "history": "Added in API level 24", "FullName": "public StringBuffer format (Object number, StringBuffer toAppendTo, FieldPosition pos)"}, "getMaximumIntegerDigits()": {"Returns": [["int", "the maximum number of integer digits"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Returns the maximum number of digits allowed in the integer portion of a number. The default value is 40, which subclasses can override. When formatting, if the number of digits exceeds this value, the highest- significance digits are truncated until the limit is reached, in accordance with UTS#35. This setting has no effect on parsing.", "history": "Added in API level 24", "FullName": "public int getMaximumIntegerDigits ()"}, "getNumberInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a general-purpose number format for the current default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getNumberInstance ()"}, "getPercentInstance(java.util.Locale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for percents"]], "Parameters": [["@B_java#util#Locale_E@", "Locale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a percentage format for the specified locale.", "history": "Added in API level 24", "FullName": "public static NumberFormat getPercentInstance (Locale inLocale)"}, "getContext(android.icu.text.DisplayContext.Type)": {"Returns": [["@B_android#icu#text#DisplayContext_E@", "the current DisplayContext setting for the specified type"]], "Parameters": [["@B_android#icu#text#DisplayContext#Type_E@", "DisplayContext.Type: the DisplayContext.Type whose value to return"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public DisplayContext getContext (DisplayContext.Type type)"}, "format(java.math.BigInteger,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigInteger_E@", "BigInteger no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (BigInteger number, StringBuffer toAppendTo, FieldPosition pos)"}, "getPercentInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for percents"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a percentage format for the current default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getPercentInstance ()"}, "setMaximumIntegerDigits(int)": {"Returns": [], "Parameters": [["int", "int: the maximum number of integer digits to be shown; if less than zero, then zero is used. Subclasses might enforce an upper limit to this value appropriate to the numeric type being formatted."]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#getMaximumIntegerDigits_E@"], "Permissions": [], "Description": "Sets the maximum number of digits allowed in the integer portion of a number. This must be >= minimumIntegerDigits. If the new value for maximumIntegerDigits is less than the current value of minimumIntegerDigits, then minimumIntegerDigits will also be set to the new value.", "history": "Added in API level 24", "FullName": "public void setMaximumIntegerDigits (int newValue)"}, "getCurrencyInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a number format for currency"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns a currency format for the current default FORMAT locale.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getCurrencyInstance ()"}, "clone()": {"Returns": [["@B_java#lang#Object_E@", "a clone of this instance."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Overrides clone.", "history": "Added in API level 24", "FullName": "public Object clone ()"}, "format(android.icu.math.BigDecimal)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public final String format (BigDecimal number)"}, "getCurrency()": {"Returns": [["@B_android#icu#util#Currency_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the", "history": "Added in API level 24", "FullName": "public Currency getCurrency ()"}, "getInstance()": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#ULocale#Category_E@"], "Permissions": [], "Description": "Returns the default number format for the current default FORMAT locale. The default format is one of the styles provided by the other factory methods: getNumberInstance, getIntegerInstance, getCurrencyInstance or getPercentInstance. Exactly which one is locale-dependent.", "history": "Added in API level 24", "FullName": "public static final NumberFormat getInstance ()"}, "NumberFormat()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Empty constructor. Public for API compatibility with historic versions of @B_java#text#NumberFormat_E@ which had public constructor even though this is an abstract class.", "history": "Added in API level 24", "FullName": "public NumberFormat ()"}, "format(long)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["long", "long no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "Specialization of format.", "history": "Added in API level 24", "FullName": "public final String format (long number)"}, "getScientificInstance(android.icu.util.ULocale)": {"Returns": [["@B_android#icu#text#NumberFormat_E@", "a scientific number format"]], "Parameters": [["@B_android#icu#util#ULocale_E@", "ULocale no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public static NumberFormat getScientificInstance (ULocale inLocale)"}, "getRoundingMode()": {"Returns": [["int", "A rounding mode, between BigDecimal.ROUND_UP and BigDecimal.ROUND_UNNECESSARY."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setRoundingMode_E@"], "Permissions": [], "Description": "Returns the rounding mode used in this NumberFormat. The default implementation of tis method in NumberFormat always throws UnsupportedOperationException.", "history": "Added in API level 24", "FullName": "public int getRoundingMode ()"}, "isGroupingUsed()": {"Returns": [["boolean", "true if grouping is used"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#setGroupingUsed_E@"], "Permissions": [], "Description": "Returns true if grouping is used in this format. For example, in the en_US locale, with grouping on, the number 1234567 will be formatted as \"1,234,567\". The grouping separator as well as the size of each group is locale-dependent and is determined by subclasses of NumberFormat. Grouping affects both parsing and formatting.", "history": "Added in API level 24", "FullName": "public boolean isGroupingUsed ()"}, "format(android.icu.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_android#icu#math#BigDecimal_E@", "BigDecimal no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)"}, "setParseIntegerOnly(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true if this should parse integers only"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#isParseIntegerOnly_E@"], "Permissions": [], "Description": "Sets whether to ignore the fraction part of a number when parsing (defaults to false). If a string contains a decimal point, parsing will stop before the decimal point. Note that determining whether a character is a decimal point depends on the locale. For example, in en-US, parsing the string \"123.45\" will return the number 123 and parse position 3.", "history": "Added in API level 24", "FullName": "public void setParseIntegerOnly (boolean value)"}, "parse(java.lang.String,java.text.ParsePosition)": {"Returns": [["@B_java#lang#Number_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#text#ParsePosition_E@", "ParsePosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_android#icu#text#NumberFormat#isParseIntegerOnly_E@", "@B_android#icu#text#DecimalFormat#setParseBigDecimal_E@", "@B_java#text#Format#parseObject_E@"], "Permissions": [], "Description": "Returns a Long if possible (e.g., within the range [Long.MIN_VALUE, Long.MAX_VALUE] and with no decimals); otherwise, returns another type, such as a BigDecimal, BigInteger, or Double. The return type is not guaranteed other than for the Long case. If IntegerOnly is set, will stop at a decimal point (or equivalent; e.g., for rational numbers \"1 2/3\", will stop after the 1). Does not throw an exception; if no object can be parsed, index is unchanged! For more detail on parsing, see the \"Parsing\" header in the class documentation of @B_android#icu#text#DecimalFormat_E@.", "history": "Added in API level 24", "FullName": "public abstract Number parse (String text, ParsePosition parsePosition)"}, "format(java.math.BigDecimal,java.lang.StringBuffer,java.text.FieldPosition)": {"Returns": [["@B_java#lang#StringBuffer_E@", "no returns description in source"]], "Parameters": [["@B_java#math#BigDecimal_E@", "BigDecimal no parameter comment"], ["@B_java#lang#StringBuffer_E@", "StringBuffer no parameter comment"], ["@B_java#text#FieldPosition_E@", "FieldPosition no parameter comment"]], "Throws": [], "SeeAlso": ["@B_java#text#Format#format_E@"], "Permissions": [], "Description": "", "history": "Added in API level 24", "FullName": "public abstract StringBuffer format (BigDecimal number, StringBuffer toAppendTo, FieldPosition pos)"}}, "Inheritance": ["@B_java#text#Format_E@", "@B_android#icu#text#UFormat_E@"], "ClassName": "android.icu.text.NumberFormat", "ClassDesc": "@B_java#text#NumberFormat_E@. Methods, fields, and other functionality specific to ICU are labeled ' NumberFormatter fits their use case. Although not deprecated, this class, NumberFormat, is only provided for java.text.NumberFormat compatibility. NumberFormat is the abstract base class for all number formats. This class provides the interface for formatting and parsing numbers. NumberFormat also provides methods for determining which locales have number formats, and what their names are. NumberFormat helps you to format and parse numbers for any locale. Your code can be completely independent of the locale conventions for decimal points, thousands-separators, or even the particular decimal digits used, or whether the number format is even decimal. To format a number for the current Locale, use one of the factory class methods: getInstance. NumberFormat to parse numbers: getInstance or getNumberInstance to get the normal number format. Use getIntegerInstance to get an integer number format. Use getCurrencyInstance to get the currency number format. And use getPercentInstance to get a format for displaying percentages. Some factory methods are found within subclasses of NumberFormat. With this format, a fraction like 0.53 is displayed as 53%. Starting from ICU 4.2, you can use getInstance() by passing in a 'style' as parameter to get the correct instance. For example, use getInstance(...NUMBERSTYLE) to get the normal number format, getInstance(...PERCENTSTYLE) to get a format for displaying percentage, getInstance(...SCIENTIFICSTYLE) to get a format for displaying scientific number, getInstance(...INTEGERSTYLE) to get an integer number format, getInstance(...CURRENCYSTYLE) to get the currency number format, in which the currency is represented by its symbol, for example, \"$3.00\". getInstance(...ISOCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its ISO code, for example \"USD3.00\". getInstance(...PLURALCURRENCYSTYLE) to get the currency number format, in which the currency is represented by its full name in plural format, for example, \"3.00 US dollars\" or \"1.00 US dollar\". You can also control the display of numbers with such methods as setMinimumFractionDigits. If you want even more control over the format or parsing, or want to give your users more control, you can try casting the NumberFormat you get from the factory methods to a DecimalFormat. This will work for the vast majority of locales; just remember to put it in a try block in case you encounter an unusual one. NumberFormat is designed such that some controls work for formatting and others work for parsing. The following is the detailed description for each these control methods, setParseIntegerOnly : only affects parsing, e.g. if true, \"3456.78\" -> 3456 (and leaves the parse position just after '6') if false, \"3456.78\" -> 3456.78 (and leaves the parse position just after '8') This is independent of formatting. If you want to not show a decimal point where there might be no digits after the decimal point, use setDecimalSeparatorAlwaysShown on DecimalFormat. You can also use forms of the parse and format methods with ParsePosition and FieldPosition to allow you to: progressively parse through pieces of a string align the decimal point and other areas For example, you can align numbers in two ways: Number formats are generally not synchronized. It is recommended to create separate format instances for each thread. If multiple threads access a format concurrently, it must be synchronized externally. DecimalFormat is the concrete implementation of NumberFormat, and the NumberFormat API is essentially an abstraction from DecimalFormat's API. Refer to DecimalFormat for more information about this API. see DecimalFormat see java.text.ChoiceFormat"}