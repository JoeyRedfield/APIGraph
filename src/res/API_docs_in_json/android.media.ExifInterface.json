{"Functions": {"getAttributeDouble(java.lang.String,double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag. This value must never be null."], ["double", "double: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value of the tag that is specified as rational or contains a double-formatted value. If there is no such tag in the image file or the value cannot be parsed as double, return", "history": "Added in API level 8", "FullName": "public double getAttributeDouble (String tag, double defaultValue)"}, "isThumbnailCompressed()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if thumbnail image is JPEG Compressed, or false if either thumbnail image does not exist or thumbnail image is uncompressed.", "history": "Added in API level 26", "FullName": "public boolean isThumbnailCompressed ()"}, "getThumbnail()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the JPEG compressed thumbnail inside the image file, or null if there is no JPEG compressed thumbnail. The returned data can be decoded using @B_android#graphics#BitmapFactory#decodeByteArray_E@", "history": "Added in API level 5", "FullName": "public byte[] getThumbnail ()"}, "getThumbnailBitmap()": {"Returns": [["@B_android#graphics#Bitmap_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates and returns a Bitmap object of the thumbnail image based on the byte array and the thumbnail compression value, or null if the compression type is unsupported.", "history": "Added in API level 26", "FullName": "public Bitmap getThumbnailBitmap ()"}, "saveAttributes()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Save the tag data into the original image file. This is expensive because it involves copying all the data from one file to another and deleting the old file and renaming the other. It's best to use @B_android#media#ExifInterface#setAttribute_E@ to set all attributes to write and make a single call rather than multiple calls for each attribute. This method is only supported for JPEG files. Note: after calling this method, any attempts to obtain range information from @B_android#media#ExifInterface#getAttributeRange_E@ or @B_android#media#ExifInterface#getThumbnailRange_E@ will throw @B_java#lang#IllegalStateException_E@, since the offsets may have changed in the newly written file.", "history": "Added in API level 5", "FullName": "public void saveAttributes ()"}, "getAttributeRange(java.lang.String)": {"Returns": [["long[]", "two-element array, the offset in the first value, and length in the second, or null if no tag was found."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_java#lang#IllegalStateException_E@", "if @B_android#media#ExifInterface#saveAttributes_E@ has been called since the underlying file was initially parsed, since that means offsets may have changed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset and length of the requested tag inside the image file, or null if the tag is not contained.", "history": "Added in API level 29", "FullName": "public long[] getAttributeRange (String tag)"}, "getAttributeInt(java.lang.String,int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag. This value must never be null."], ["int", "int: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the integer value of the specified tag. If there is no such tag in the image file or the value cannot be parsed as integer, return", "history": "Added in API level 5", "FullName": "public int getAttributeInt (String tag, int defaultValue)"}, "hasAttribute(java.lang.String)": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the image file has the given attribute defined.", "history": "Added in API level 29", "FullName": "public boolean hasAttribute (String tag)"}, "getAttributeBytes(java.lang.String)": {"Returns": [["byte[]", "raw bytes for the value of the requested tag, or null if no tag was found."]], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the raw bytes for the value of the requested tag inside the image file, or null if the tag is not contained.", "history": "Added in API level 29", "FullName": "public byte[] getAttributeBytes (String tag)"}, "getAttributeInt(java.lang.String, int)": {"Returns": [["int", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["int", "int: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the integer value of the specified tag. If there is no such tag in the image file or the value cannot be parsed as integer, return", "history": "added in API level 5", "FullName": "public int getAttributeInt (String tag, int defaultValue)"}, "ExifInterface(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image file.", "history": "Added in API level 5", "FullName": "public ExifInterface (String filename)"}, "getThumbnailRange()": {"Returns": [["long[]", "two-element array, the offset in the first value, and length in the second, or null if no thumbnail was found."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalStateException_E@", "if @B_android#media#ExifInterface#saveAttributes_E@ has been called since the underlying file was initially parsed, since that means offsets may have changed."]], "SeeAlso": [], "Permissions": [], "Description": "Returns the offset and length of thumbnail inside the image file, or null if there is no thumbnail.", "history": "Added in API level 24", "FullName": "public long[] getThumbnailRange ()"}, "getAttributeDouble(java.lang.String, double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["double", "double: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the double value of the tag that is specified as rational or contains a double-formatted value. If there is no such tag in the image file or the value cannot be parsed as double, return", "history": "added in API level 8", "FullName": "public double getAttributeDouble (String tag, double defaultValue)"}, "setAttribute(java.lang.String, java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag."], ["@B_java#lang#String_E@", "String: the value of the tag."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value of the specified tag.", "history": "added in API level 5", "FullName": "public void setAttribute (String tag, String value)"}, "ExifInterface(java.io.File)": {"Returns": [], "Parameters": [["@B_java#io#File_E@", "File: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image file.", "history": "Added in API level 29", "FullName": "public ExifInterface (File file)"}, "setAttribute(java.lang.String,java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag. This value must never be null."], ["@B_java#lang#String_E@", "String: the value of the tag. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the value of the specified tag.", "history": "Added in API level 5", "FullName": "public void setAttribute (String tag, String value)"}, "getAltitude(double)": {"Returns": [["double", "no returns description in source"]], "Parameters": [["double", "double: the value to return if the tag is not available."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the altitude in meters. If the exif tag does not exist, return", "history": "Added in API level 9", "FullName": "public double getAltitude (double defaultValue)"}, "ExifInterface(java.io.FileDescriptor)": {"Returns": [], "Parameters": [["@B_java#io#FileDescriptor_E@", "FileDescriptor: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image file descriptor. Attribute mutation is supported for writable and seekable file descriptors only. This constructor will not rewind the offset of the given file descriptor. Developers should close the file descriptor after use.", "history": "Added in API level 24", "FullName": "public ExifInterface (FileDescriptor fileDescriptor)"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#String_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#String_E@", "String: the name of the tag. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of the specified tag or null if there is no such tag in the image file.", "history": "Added in API level 5", "FullName": "public String getAttribute (String tag)"}, "getThumbnailBytes()": {"Returns": [["byte[]", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the thumbnail bytes inside the image file, regardless of the compression type of the thumbnail image.", "history": "Added in API level 26", "FullName": "public byte[] getThumbnailBytes ()"}, "ExifInterface(java.io.InputStream)": {"Returns": [], "Parameters": [["@B_java#io#InputStream_E@", "InputStream: This value must never be null."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Reads Exif tags from the specified image input stream. Attribute mutation is not supported for input streams. The given input stream will proceed its current position. Developers should close the input stream after use.", "history": "Added in API level 24", "FullName": "public ExifInterface (InputStream inputStream)"}, "getLatLong(float[])": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [["float[]", "float no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stores the latitude and longitude value in a float array. The first element is the latitude, and the second element is the longitude. Returns false if the Exif tags are not available.", "history": "Added in API level 5", "FullName": "public boolean getLatLong (float[] output)"}, "hasThumbnail()": {"Returns": [["boolean", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if the image file has a thumbnail.", "history": "Added in API level 5", "FullName": "public boolean hasThumbnail ()"}}, "Inheritance": [], "ClassName": "android.media.ExifInterface", "ClassDesc": "This is a class for reading and writing Exif tags in a JPEG file or a RAW image file. Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF, PEF, SRW, RAF and HEIF. Attribute mutation is supported for JPEG image files. Note: It is recommended to use the"}