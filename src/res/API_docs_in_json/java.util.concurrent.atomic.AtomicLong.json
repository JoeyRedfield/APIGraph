{"Functions": {"lazySet(long)": {"Returns": [], "Parameters": [["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (long newValue)"}, "intValue()": {"Returns": [["int", "the numeric value represented by this object after conversion to type int."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicLong as an int after a narrowing primitive conversion.", "history": "Added in API level 1", "FullName": "public int intValue ()"}, "compareAndSet(long, long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (long expect, long update)"}, "longValue()": {"Returns": [["long", "the numeric value represented by this object after conversion to type long."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicLong as a long. Equivalent to @B_java#util#concurrent#atomic#AtomicLong#get_E@.", "history": "Added in API level 1", "FullName": "public long longValue ()"}, "weakCompareAndSet(long, long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (long expect, long update)"}, "weakCompareAndSet(long,long)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (long expect, long update)"}, "AtomicLong(long)": {"Returns": [], "Parameters": [["long", "long: the initial value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicLong with the given initial value.", "history": "Added in API level 1", "FullName": "public AtomicLong (long initialValue)"}, "updateAndGet(java.util.function.LongUnaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long updateAndGet (LongUnaryOperator updateFunction)"}, "getAndAccumulate(long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long getAndAccumulate (long x, LongBinaryOperator accumulatorFunction)"}, "getAndUpdate(java.util.function.LongUnaryOperator)": {"Returns": [["long", "the previous value"]], "Parameters": [["@B_java#util#function#LongUnaryOperator_E@", "LongUnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final long getAndUpdate (LongUnaryOperator updateFunction)"}, "set(long)": {"Returns": [], "Parameters": [["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets to the given value.", "history": "Added in API level 1", "FullName": "public final void set (long newValue)"}, "getAndDecrement()": {"Returns": [["long", "the previous value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value.", "history": "Added in API level 1", "FullName": "public final long getAndDecrement ()"}, "doubleValue()": {"Returns": [["double", "the numeric value represented by this object after conversion to type double."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicLong as a double after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public double doubleValue ()"}, "incrementAndGet()": {"Returns": [["long", "the updated value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value.", "history": "Added in API level 1", "FullName": "public final long incrementAndGet ()"}, "decrementAndGet()": {"Returns": [["long", "the updated value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically decrements by one the current value.", "history": "Added in API level 1", "FullName": "public final long decrementAndGet ()"}, "AtomicLong()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicLong with initial value 0.", "history": "Added in API level 1", "FullName": "public AtomicLong ()"}, "addAndGet(long)": {"Returns": [["long", "the updated value"]], "Parameters": [["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value.", "history": "Added in API level 1", "FullName": "public final long addAndGet (long delta)"}, "get()": {"Returns": [["long", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value.", "history": "Added in API level 1", "FullName": "public final long get ()"}, "getAndSet(long)": {"Returns": [["long", "the previous value"]], "Parameters": [["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final long getAndSet (long newValue)"}, "floatValue()": {"Returns": [["float", "the numeric value represented by this object after conversion to type float."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value of this AtomicLong as a float after a widening primitive conversion.", "history": "Added in API level 1", "FullName": "public float floatValue ()"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current value.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "getAndIncrement()": {"Returns": [["long", "the previous value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically increments by one the current value.", "history": "Added in API level 1", "FullName": "public final long getAndIncrement ()"}, "compareAndSet(long,long)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["long", "long: the expected value"], ["long", "long: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (long expect, long update)"}, "accumulateAndGet(long,java.util.function.LongBinaryOperator)": {"Returns": [["long", "the updated value"]], "Parameters": [["long", "long: the update value"], ["@B_java#util#function#LongBinaryOperator_E@", "LongBinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final long accumulateAndGet (long x, LongBinaryOperator accumulatorFunction)"}, "getAndAdd(long)": {"Returns": [["long", "the previous value"]], "Parameters": [["long", "long: the value to add"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically adds the given value to the current value.", "history": "Added in API level 1", "FullName": "public final long getAndAdd (long delta)"}}, "Inheritance": ["@B_java#lang#Number_E@"], "ClassName": "java.util.concurrent.atomic.AtomicLong", "ClassDesc": "A long value that may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables. An AtomicLong is used in applications such as atomically incremented sequence numbers, and cannot be used as a replacement for a @B_java#lang#Long_E@. However, this class does extend Number to allow uniform access by tools and utilities that deal with numerically-based classes."}