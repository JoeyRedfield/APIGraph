{"Functions": {"set(V)": {"Returns": [], "Parameters": [["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets to the given value.", "history": "Added in API level 1", "FullName": "public final void set (V newValue)"}, "get()": {"Returns": [["V", "the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the current value.", "history": "Added in API level 1", "FullName": "public final V get ()"}, "weakCompareAndSet(V,V)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value"], ["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "Added in API level 1", "FullName": "public final boolean weakCompareAndSet (V expect, V update)"}, "getAndUpdate(java.util.function.UnaryOperator<V>)": {"Returns": [["V", "the previous value"]], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final V getAndUpdate (UnaryOperator<V> updateFunction)"}, "AtomicReference(V)": {"Returns": [], "Parameters": [["V", "V: the initial value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicReference with the given initial value.", "history": "Added in API level 1", "FullName": "public AtomicReference (V initialValue)"}, "toString()": {"Returns": [["@B_java#lang#String_E@", "the String representation of the current value"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the String representation of the current value.", "history": "Added in API level 1", "FullName": "public String toString ()"}, "compareAndSet(V, V)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["V", "V: the expected value"], ["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "added in API level 1", "FullName": "public final boolean compareAndSet (V expect, V update)"}, "getAndSet(V)": {"Returns": [["V", "the previous value"]], "Parameters": [["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets to the given value and returns the old value.", "history": "Added in API level 1", "FullName": "public final V getAndSet (V newValue)"}, "updateAndGet(java.util.function.UnaryOperator<V>)": {"Returns": [["V", "the updated value"]], "Parameters": [["@B_java#util#function#UnaryOperator_E@", "UnaryOperator: a side-effect-free function"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads.", "history": "Added in API level 24", "FullName": "public final V updateAndGet (UnaryOperator<V> updateFunction)"}, "accumulateAndGet(V,java.util.function.BinaryOperator<V>)": {"Returns": [["V", "the updated value"]], "Parameters": [["V", "V: the update value"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final V accumulateAndGet (V x, BinaryOperator<V> accumulatorFunction)"}, "getAndAccumulate(V,java.util.function.BinaryOperator<V>)": {"Returns": [["V", "the previous value"]], "Parameters": [["V", "V: the update value"], ["@B_java#util#function#BinaryOperator_E@", "BinaryOperator: a side-effect-free function of two arguments"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value. The function should be side-effect-free, since it may be re-applied when attempted updates fail due to contention among threads. The function is applied with the current value as its first argument, and the given update as the second argument.", "history": "Added in API level 24", "FullName": "public final V getAndAccumulate (V x, BinaryOperator<V> accumulatorFunction)"}, "AtomicReference()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Creates a new AtomicReference with null initial value.", "history": "Added in API level 1", "FullName": "public AtomicReference ()"}, "compareAndSet(V,V)": {"Returns": [["boolean", "true if successful. False return indicates that the actual value was not equal to the expected value."]], "Parameters": [["V", "V: the expected value"], ["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value.", "history": "Added in API level 1", "FullName": "public final boolean compareAndSet (V expect, V update)"}, "weakCompareAndSet(V, V)": {"Returns": [["boolean", "true if successful"]], "Parameters": [["V", "V: the expected value"], ["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Atomically sets the value to the given updated value if the current value == the expected value. compareAndSet.", "history": "added in API level 1", "FullName": "public final boolean weakCompareAndSet (V expect, V update)"}, "lazySet(V)": {"Returns": [], "Parameters": [["V", "V: the new value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Eventually sets to the given value.", "history": "Added in API level 9", "FullName": "public final void lazySet (V newValue)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.atomic.AtomicReference<V>", "ClassDesc": "An object reference that may be updated atomically. See the @B_java#util#concurrent#atomic#package-summary_E@ package specification for description of the properties of atomic variables."}