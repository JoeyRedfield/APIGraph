{"Functions": {"type()": {"Returns": [["@B_java#lang#String_E@", "a string representing the type of this file store"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the type of this file store. The format of the string returned by this method is highly implementation specific. It may indicate, for example, the format used or if the file store is local or remote.", "history": "Added in API level 26", "FullName": "public abstract String type ()"}, "getTotalSpace()": {"Returns": [["long", "the size of the file store, in bytes"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the size, in bytes, of the file store.", "history": "Added in API level 26", "FullName": "public abstract long getTotalSpace ()"}, "getUnallocatedSpace()": {"Returns": [["long", "the number of unallocated bytes"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of unallocated bytes in the file store. The returned number of unallocated bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of unallocated bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this virtual machine.", "history": "Added in API level 26", "FullName": "public abstract long getUnallocatedSpace ()"}, "FileStore()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initializes a new instance of this class.", "history": "Added in API level 26", "FullName": "protected FileStore ()"}, "supportsFileAttributeView(java.lang.Class<?extendsjava.nio.file.attribute.FileAttributeView>)": {"Returns": [["boolean", "true if, and only if, the file attribute view is supported"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the file attribute view type"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this file store supports the file attributes identified by the given file attribute view. Invoking this method to test if the file store supports @B_java#nio#file#attribute#BasicFileAttributeView_E@ will always return true. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.", "history": "Added in API level 26", "FullName": "public abstract boolean supportsFileAttributeView (Class<? extends FileAttributeView> type)"}, "supportsFileAttributeView(java.lang.String)": {"Returns": [["boolean", "true if, and only if, the file attribute view is supported"]], "Parameters": [["@B_java#lang#String_E@", "String: the @B_java#nio#file#attribute#AttributeView#name_E@ of file attribute view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether or not this file store supports the file attributes identified by the given file attribute view. Invoking this method to test if the file store supports @B_java#nio#file#attribute#BasicFileAttributeView_E@, identified by the name \"basic\" will always return true. In the case of the default provider, this method cannot guarantee to give the correct result when the file store is not a local storage device. The reasons for this are implementation specific and therefore unspecified.", "history": "Added in API level 26", "FullName": "public abstract boolean supportsFileAttributeView (String name)"}, "isReadOnly()": {"Returns": [["boolean", "true if, and only if, this file store is read-only"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tells whether this file store is read-only. A file store is read-only if it does not support write operations or other changes to files. Any attempt to create a file, open an existing file for writing etc. causes an IOException to be thrown.", "history": "Added in API level 26", "FullName": "public abstract boolean isReadOnly ()"}, "getAttribute(java.lang.String)": {"Returns": [["@B_java#lang#Object_E@", "the attribute value; null may be a valid valid for some attributes"]], "Parameters": [["@B_java#lang#String_E@", "String: the attribute to read"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the attribute view is not available or it does not support reading the attribute"], ["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Reads the value of a file store attribute. The attribute parameter identifies the attribute to be read and takes the form: ':' stands for itself. @B_java#nio#file#attribute#AttributeView#name_E@ of a @B_java#nio#file#FileStore_E@ that identifies a set of file attributes.", "history": "Added in API level 26", "FullName": "public abstract Object getAttribute (String attribute)"}, "getFileStoreAttributeView(java.lang.Class<V>)": {"Returns": [["V", "a file store attribute view of the specified type or null if the attribute view is not available"]], "Parameters": [["@B_java#lang#Class_E@", "Class: the Class object corresponding to the attribute view"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a FileStoreAttributeView of the given type. This method is intended to be used where the file store attribute view defines type-safe methods to read or update the file store attributes. The type parameter is the type of the attribute view required and the method returns an instance of that type if supported.", "history": "Added in API level 26", "FullName": "public abstract V getFileStoreAttributeView (Class<V> type)"}, "name()": {"Returns": [["@B_java#lang#String_E@", "the name of this file store"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the name of this file store. The format of the name is highly implementation specific. It will typically be the name of the storage pool or volume. The string returned by this method may differ from the string returned by the @B_java#lang#Object#toString_E@ method.", "history": "Added in API level 26", "FullName": "public abstract String name ()"}, "getUsableSpace()": {"Returns": [["long", "the number of bytes available"]], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of bytes available to this Java virtual machine on the file store. The returned number of available bytes is a hint, but not a guarantee, that it is possible to use most or any of these bytes. The number of usable bytes is most likely to be accurate immediately after the space attributes are obtained. It is likely to be made inaccurate by any external I/O operations including those made on the system outside of this Java virtual machine.", "history": "Added in API level 26", "FullName": "public abstract long getUsableSpace ()"}}, "Inheritance": [], "ClassName": "java.nio.file.FileStore", "ClassDesc": "Storage for files. A FileStore represents a storage pool, device, partition, volume, concrete file system or other implementation specific means of file storage. The FileStore for where a file is stored is obtained by invoking the @B_java#nio#file#Files#getFileStore_E@ method, or all file stores can be enumerated by invoking the @B_java#nio#file#FileSystem#getFileStores_E@ method. In addition to the methods defined by this class, a file store may support one or more @B_java#nio#file#attribute#FileStoreAttributeView_E@ classes that provide a read-only or updatable view of a set of file store attributes."}