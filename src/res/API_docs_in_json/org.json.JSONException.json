{"Functions": {"JSONException(java.lang.String)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public JSONException (String s)"}, "JSONException(java.lang.String,java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#lang#Throwable_E@", "Throwable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 27", "FullName": "public JSONException (String message, Throwable cause)"}, "JSONException(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 27", "FullName": "public JSONException (Throwable cause)"}}, "Inheritance": ["@B_java#lang#Throwable_E@", "@B_java#lang#Exception_E@"], "ClassName": "org.json.JSONException", "ClassDesc": "Thrown to indicate a problem with the JSON API. Such problems include: Attempts to parse or construct malformed documents Use of null as a name Use of numeric types not available to JSON, such as @B_java#lang#Double#isNaN_E@ or @B_java#lang#Double#isInfinite_E@. Lookups using an out of range index or nonexistent name Type mismatches on lookups Although this is a checked exception, it is rarely recoverable. Most callers should simply wrap this exception in an unchecked exception and rethrow:"}