{"Functions": {"get()": {"Returns": [["V", "the computed result"]], "Parameters": [], "Throws": [["@B_java#util#concurrent#CancellationException_E@", ""], ["@B_java#util#concurrent#ExecutionException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for the computation to complete, and then retrieves its result.", "history": "Added in API level 1", "FullName": "public V get ()"}, "done()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Protected method invoked when this task transitions to state isDone (whether normally or via cancellation). The default implementation does nothing. Subclasses may override this method to invoke completion callbacks or perform bookkeeping. Note that you can query status inside the implementation of this method to determine whether this task has been cancelled.", "history": "Added in API level 1", "FullName": "protected void done ()"}, "get(long,java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", ""], ["@B_java#util#concurrent#ExecutionException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""], ["@B_java#util#concurrent#TimeoutException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "Added in API level 1", "FullName": "public V get (long timeout, TimeUnit unit)"}, "get(long, java.util.concurrent.TimeUnit)": {"Returns": [["V", "the computed result"]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#util#concurrent#CancellationException_E@", ""], ["@B_java#lang#InterruptedException_E@", ""], ["@B_java#util#concurrent#ExecutionException_E@", ""], ["@B_java#util#concurrent#TimeoutException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Waits if necessary for at most the given time for the computation to complete, and then retrieves its result, if available.", "history": "added in API level 1", "FullName": "public V get (long timeout, TimeUnit unit)"}, "FutureTask(java.util.concurrent.Callable<V>)": {"Returns": [], "Parameters": [["@B_java#util#concurrent#Callable_E@", "Callable: the callable task"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the callable is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a FutureTask that will, upon running, execute the given Callable.", "history": "Added in API level 1", "FullName": "public FutureTask (Callable<V> callable)"}, "set(V)": {"Returns": [], "Parameters": [["V", "V: the value"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the result of this future to the given value unless this future has already been set or has been cancelled. This method is invoked internally by the @B_java#util#concurrent#FutureTask#run_E@ method upon successful completion of the computation.", "history": "Added in API level 1", "FullName": "protected void set (V v)"}, "run()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets this Future to the result of its computation unless it has been cancelled.", "history": "Added in API level 1", "FullName": "public void run ()"}, "runAndReset()": {"Returns": [["boolean", "true if successfully run and reset"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Executes the computation without setting its result, and then resets this future to initial state, failing to do so if the computation encounters an exception or is cancelled. This is designed for use with tasks that intrinsically execute more than once.", "history": "Added in API level 1", "FullName": "protected boolean runAndReset ()"}, "FutureTask(java.lang.Runnable,V)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task"], ["V", "V: the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: Future<?> f = new FutureTask<Void>(runnable, null)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the runnable is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a FutureTask that will, upon running, execute the given Runnable, and arrange that get will return the given result on successful completion.", "history": "Added in API level 1", "FullName": "public FutureTask (Runnable runnable, V result)"}, "cancel(boolean)": {"Returns": [["boolean", "false if the task could not be cancelled, typically because it has already completed normally; true otherwise"]], "Parameters": [["boolean", "boolean: true if the thread executing this task should be interrupted; otherwise, in-progress tasks are allowed to complete"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Attempts to cancel execution of this task. This attempt will fail if the task has already completed, has already been cancelled, or could not be cancelled for some other reason. If successful, and this task has not started when cancel is called, this task should never run. If the task has already started, then the mayInterruptIfRunning parameter determines whether the thread executing this task should be interrupted in an attempt to stop the task. After this method returns, subsequent calls to @B_java#util#concurrent#Future#isDone_E@ will always return true. Subsequent calls to @B_java#util#concurrent#Future#isCancelled_E@ will always return true if this method returned true.", "history": "Added in API level 1", "FullName": "public boolean cancel (boolean mayInterruptIfRunning)"}, "isDone()": {"Returns": [["boolean", "true if this task completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task completed. Completion may be due to normal termination, an exception, or cancellation -- in all of these cases, this method will return true.", "history": "Added in API level 1", "FullName": "public boolean isDone ()"}, "setException(java.lang.Throwable)": {"Returns": [], "Parameters": [["@B_java#lang#Throwable_E@", "Throwable: the cause of failure"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Causes this future to report an @B_java#util#concurrent#ExecutionException_E@ with the given throwable as its cause, unless this future has already been set or has been cancelled. This method is invoked internally by the @B_java#util#concurrent#FutureTask#run_E@ method upon failure of the computation.", "history": "Added in API level 1", "FullName": "protected void setException (Throwable t)"}, "isCancelled()": {"Returns": [["boolean", "true if this task was cancelled before it completed"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this task was cancelled before it completed normally.", "history": "Added in API level 1", "FullName": "public boolean isCancelled ()"}, "FutureTask(java.lang.Runnable, V)": {"Returns": [], "Parameters": [["@B_java#lang#Runnable_E@", "Runnable: the runnable task"], ["V", "V: the result to return on successful completion. If you don't need a particular result, consider using constructions of the form: Future<?> f = new FutureTask<Void>(runnable, null)"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the runnable is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a FutureTask that will, upon running, execute the given Runnable, and arrange that get will return the given result on successful completion.", "history": "added in API level 1", "FullName": "public FutureTask (Runnable runnable, V result)"}}, "Inheritance": [], "ClassName": "java.util.concurrent.FutureTask<V>", "ClassDesc": "A cancellable asynchronous computation. This class provides a base implementation of @B_java#util#concurrent#Future_E@, with methods to start and cancel a computation, query to see if the computation is complete, and retrieve the result of the computation. The result can only be retrieved when the computation has completed; the get methods will block if the computation has not yet completed. Once the computation has completed, the computation cannot be restarted or cancelled (unless the computation is invoked using @B_java#util#concurrent#FutureTask#runAndReset_E@). A FutureTask can be used to wrap a @B_java#util#concurrent#Callable_E@ or @B_java#lang#Runnable_E@ object. Because FutureTask implements Runnable, a FutureTask can be submitted to an @B_java#util#concurrent#Executor_E@ for execution. In addition to serving as a standalone class, this class provides protected functionality that may be useful when creating customized task classes."}