{"Functions": {"remove()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Removes the current thread's value for this thread-local variable. If this thread-local variable is subsequently @B_java#lang#ThreadLocal#initialValue_E@ method, unless its value is initialValue method in the current thread.", "history": "Added in API level 1", "FullName": "public void remove ()"}, "ThreadLocal()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#lang#ThreadLocal#withInitial_E@"], "Permissions": [], "Description": "Creates a thread local variable.", "history": "Added in API level 1", "FullName": "public ThreadLocal ()"}, "initialValue()": {"Returns": [["T", "the initial value for this thread-local"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the current thread's \"initial value\" for this thread-local variable. This method will be invoked the first time a thread accesses the variable with the @B_java#lang#ThreadLocal#get_E@ method, unless the thread previously invoked the @B_java#lang#ThreadLocal#set_E@ method, in which case the initialValue method will not be invoked for the thread. Normally, this method is invoked at most once per thread, but it may be invoked again in case of subsequent invocations of @B_java#lang#ThreadLocal#remove_E@ followed by @B_java#lang#ThreadLocal#get_E@. This implementation simply returns null; if the programmer desires thread-local variables to have an initial value other than null, ThreadLocal must be subclassed, and this method overridden. Typically, an anonymous inner class will be used.", "history": "Added in API level 1", "FullName": "protected T initialValue ()"}, "set(T)": {"Returns": [], "Parameters": [["T", "T: the value to be stored in the current thread's copy of this thread-local."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the current thread's copy of this thread-local variable to the specified value. Most subclasses will have no need to override this method, relying solely on the @B_java#lang#ThreadLocal#initialValue_E@ method to set the values of thread-locals.", "history": "Added in API level 1", "FullName": "public void set (T value)"}, "get()": {"Returns": [["T", "the current thread's value of this thread-local"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the value in the current thread's copy of this thread-local variable. If the variable has no value for the current thread, it is first initialized to the value returned by an invocation of the @B_java#lang#ThreadLocal#initialValue_E@ method.", "history": "Added in API level 1", "FullName": "public T get ()"}, "withInitial(java.util.function.Supplier<?extendsS>)": {"Returns": [["@B_java#lang#ThreadLocal_E@", "a new thread local variable"]], "Parameters": [["@B_java#util#function#Supplier_E@", "Supplier: the supplier to be used to determine the initial value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified supplier is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a thread local variable. The initial value of the variable is determined by invoking the get method on the Supplier.", "history": "Added in API level 26", "FullName": "public static ThreadLocal<S> withInitial (Supplier<? extends S> supplier)"}}, "Inheritance": [], "ClassName": "java.lang.ThreadLocal<T>", "ClassDesc": "This class provides thread-local variables. These variables differ from their normal counterparts in that each thread that accesses one (via its get or set method) has its own, independently initialized copy of the variable. ThreadLocal instances are typically private static fields in classes that wish to associate state with a thread (e.g., a user ID or Transaction ID). For example, the class below generates unique identifiers local to each thread. A thread's id is assigned the first time it invokes ThreadId.get() and remains unchanged on subsequent calls. Each thread holds an implicit reference to its copy of a thread-local variable as long as the thread is alive and the ThreadLocal instance is accessible; after a thread goes away, all of its copies of thread-local instances are subject to garbage collection (unless other references to these copies exist)."}