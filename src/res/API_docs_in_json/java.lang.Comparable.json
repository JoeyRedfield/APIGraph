{"Functions": {"compareTo(T)": {"Returns": [["int", "a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object."]], "Parameters": [["T", "T: the object to be compared."]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified object is null"], ["@B_java#lang#ClassCastException_E@", "if the specified object's type prevents it from being compared to this object."]], "SeeAlso": [], "Permissions": [], "Description": "Compares this object with the specified object for order. Returns a negative integer, zero, or a positive integer as this object is less than, equal to, or greater than the specified object. The implementor must ensure The implementor must also ensure that the relation is transitive: Finally, the implementor must ensure that It is strongly recommended, but In the foregoing description, the notation", "history": "Added in API level 1", "FullName": "public abstract int compareTo (T o)"}}, "Inheritance": [], "ClassName": "java.lang.Comparable<T>", "ClassDesc": "This interface imposes a total ordering on the objects of each class that implements it. This ordering is referred to as the class's Lists (and arrays) of objects that implement this interface can be sorted automatically by @B_java#util#Collections#sort_E@ (and @B_java#util#Arrays#sort_E@). Objects that implement this interface can be used as keys in a The natural ordering for a class It is strongly recommended (though not required) that natural orderings be consistent with equals. This is so because sorted sets (and sorted maps) without explicit comparators behave \"strangely\" when they are used with elements (or keys) whose natural ordering is inconsistent with equals. In particular, such a sorted set (or sorted map) violates the general contract for set (or map), which is defined in terms of the For example, if one adds two keys (!a.equals(b) && a.compareTo(b) == 0) to a sorted set that does not use an explicit comparator, the second Virtually all Java core classes that implement For the mathematically inclined, the @B_java#lang#Object#equals_E@ method: This interface is a member of the"}