{"Functions": {"getOutputStream()": {"Returns": [["@B_java#io#OutputStream_E@", "the output stream connected to the normal input of the subprocess"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the output stream connected to the normal input of the subprocess. Output to the stream is piped into the standard input of the process represented by this Process object. If the standard input of the subprocess has been redirected using @B_java#lang#ProcessBuilder#redirectInput_E@ then this method will return a Implementation note: It is a good idea for the returned output stream to be buffered.", "history": "Added in API level 1", "FullName": "public abstract OutputStream getOutputStream ()"}, "exitValue()": {"Returns": [["int", "the exit value of the subprocess represented by this Process object. By convention, the value 0 indicates normal termination."]], "Parameters": [], "Throws": [["@B_java#lang#IllegalThreadStateException_E@", "if the subprocess represented by this Process object has not yet terminated"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the exit value for the subprocess.", "history": "Added in API level 1", "FullName": "public abstract int exitValue ()"}, "waitFor(long,java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the subprocess has exited and false if the waiting time elapsed before the subprocess has exited."]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted while waiting."], ["@B_java#lang#NullPointerException_E@", "if unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait, if necessary, until the subprocess represented by this Process object has terminated, or the specified waiting time elapses. If the subprocess has already terminated then this method returns immediately with the value true. If the process has not terminated and the timeout value is less than, or equal to, zero, then this method returns immediately with the value false. The default implementation of this methods polls the exitValue to check if the process has terminated. Concrete implementations of this class are strongly encouraged to override this method with a more efficient implementation.", "history": "Added in API level 26", "FullName": "public boolean waitFor (long timeout, TimeUnit unit)"}, "destroyForcibly()": {"Returns": [["@B_java#lang#Process_E@", "the Process object representing the subprocess to be forcibly destroyed."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Kills the subprocess. The subprocess represented by this Process object is forcibly terminated. The default implementation of this method invokes @B_java#lang#Process#destroy_E@ and so may not forcibly terminate the process. Concrete implementations of this class are strongly encouraged to override this method with a compliant implementation. Invoking this method on Process objects returned by @B_java#lang#ProcessBuilder#start_E@ and @B_java#lang#Runtime#exec_E@ will forcibly terminate the process. Note: The subprocess may not terminate immediately. i.e. isAlive() may return true for a brief period after destroyForcibly() is called. This method may be chained to waitFor() if needed.", "history": "Added in API level 26", "FullName": "public Process destroyForcibly ()"}, "waitFor(long, java.util.concurrent.TimeUnit)": {"Returns": [["boolean", "true if the subprocess has exited and false if the waiting time elapsed before the subprocess has exited."]], "Parameters": [["long", "long: the maximum time to wait"], ["@B_java#util#concurrent#TimeUnit_E@", "TimeUnit: the time unit of the timeout argument"]], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is interrupted while waiting."], ["@B_java#lang#NullPointerException_E@", "if unit is null"]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait, if necessary, until the subprocess represented by this Process object has terminated, or the specified waiting time elapses. If the subprocess has already terminated then this method returns immediately with the value true. If the process has not terminated and the timeout value is less than, or equal to, zero, then this method returns immediately with the value false. The default implementation of this methods polls the exitValue to check if the process has terminated. Concrete implementations of this class are strongly encouraged to override this method with a more efficient implementation.", "history": "added in API level 26", "FullName": "public boolean waitFor (long timeout, TimeUnit unit)"}, "waitFor()": {"Returns": [["int", "the exit value of the subprocess represented by this Process object. By convention, the value 0 indicates normal termination."]], "Parameters": [], "Throws": [["@B_java#lang#InterruptedException_E@", "if the current thread is Thread#interrupt() by another thread while it is waiting, then the wait is ended and an @B_java#lang#InterruptedException_E@ is thrown."]], "SeeAlso": [], "Permissions": [], "Description": "Causes the current thread to wait, if necessary, until the process represented by this Process object has terminated. This method returns immediately if the subprocess has already terminated. If the subprocess has not yet terminated, the calling thread will be blocked until the subprocess exits.", "history": "Added in API level 1", "FullName": "public abstract int waitFor ()"}, "getErrorStream()": {"Returns": [["@B_java#io#InputStream_E@", "the input stream connected to the error output of the subprocess"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input stream connected to the error output of the subprocess. The stream obtains data piped from the error output of the process represented by this Process object. If the standard error of the subprocess has been redirected using @B_java#lang#ProcessBuilder#redirectError_E@ or @B_java#lang#ProcessBuilder#redirectErrorStream_E@ then this method will return a Implementation note: It is a good idea for the returned input stream to be buffered.", "history": "Added in API level 1", "FullName": "public abstract InputStream getErrorStream ()"}, "isAlive()": {"Returns": [["boolean", "true if the subprocess represented by this Process object has not yet terminated."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Tests whether the subprocess represented by this Process is alive.", "history": "Added in API level 26", "FullName": "public boolean isAlive ()"}, "getInputStream()": {"Returns": [["@B_java#io#InputStream_E@", "the input stream connected to the normal output of the subprocess"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the input stream connected to the normal output of the subprocess. The stream obtains data piped from the standard output of the process represented by this Process object. If the standard output of the subprocess has been redirected using @B_java#lang#ProcessBuilder#redirectOutput_E@ then this method will return a Otherwise, if the standard error of the subprocess has been redirected using @B_java#lang#ProcessBuilder#redirectErrorStream_E@ then the input stream returned by this method will receive the merged standard output and the standard error of the subprocess. Implementation note: It is a good idea for the returned input stream to be buffered.", "history": "Added in API level 1", "FullName": "public abstract InputStream getInputStream ()"}, "Process()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public Process ()"}, "destroy()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Kills the subprocess. Whether the subprocess represented by this Process object is forcibly terminated or not is implementation dependent.", "history": "Added in API level 1", "FullName": "public abstract void destroy ()"}}, "Inheritance": [], "ClassName": "java.lang.Process", "ClassDesc": "The @B_java#lang#ProcessBuilder#start_E@ and @B_java#lang#Runtime#exec_E@ methods create a native process and return an instance of a subclass of Process that can be used to control the process and obtain information about it. The class Process provides methods for performing input from the process, performing output to the process, waiting for the process to complete, checking the exit status of the process, and destroying (killing) the process. The methods that create processes may not work well for special processes on certain native platforms, such as native windowing processes, daemon processes, Win16/DOS processes on Microsoft Windows, or shell scripts. By default, the created subprocess does not have its own terminal or console. All its standard I/O (i.e. stdin, stdout, stderr) operations will be redirected to the parent process, where they can be accessed via the streams obtained using the methods @B_java#lang#Process#getOutputStream_E@, @B_java#lang#Process#getInputStream_E@, and @B_java#lang#Process#getErrorStream_E@. The parent process uses these streams to feed input to and get output from the subprocess. Because some native platforms only provide limited buffer size for standard input and output streams, failure to promptly write the input stream or read the output stream of the subprocess may cause the subprocess to block, or even deadlock. Where desired, @B_java#lang#ProcessBuilder_E@ class. The subprocess is not killed when there are no more references to the Process object, but rather the subprocess continues executing asynchronously. There is no requirement that a process represented by a Process object execute asynchronously or concurrently with respect to the Java process that owns the Process object. As of 1.5, @B_java#lang#ProcessBuilder#start_E@ is the preferred way to create a Process."}