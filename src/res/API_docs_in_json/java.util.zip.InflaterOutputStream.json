{"Functions": {"finish()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Finishes writing uncompressed data to the output stream without closing the underlying stream. Use this method when applying multiple filters in succession to the same output stream.", "history": "Added in API level 9", "FullName": "public void finish ()"}, "InflaterOutputStream(java.io.OutputStream,java.util.zip.Inflater)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: output stream to write the uncompressed data to"], ["@B_java#util#zip#Inflater_E@", "Inflater: decompressor (\"inflater\") for this stream"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if out or infl is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new output stream with the specified decompressor and a default buffer size.", "history": "Added in API level 9", "FullName": "public InflaterOutputStream (OutputStream out, Inflater infl)"}, "InflaterOutputStream(java.io.OutputStream,java.util.zip.Inflater,int)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: output stream to write the uncompressed data to"], ["@B_java#util#zip#Inflater_E@", "Inflater: decompressor (\"inflater\") for this stream"], ["int", "int: decompression buffer size"]], "Throws": [["@B_java#lang#IllegalArgumentException_E@", "if bufLen <= 0"], ["@B_java#lang#NullPointerException_E@", "if out or infl is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new output stream with the specified decompressor and buffer size.", "history": "Added in API level 9", "FullName": "public InflaterOutputStream (OutputStream out, Inflater infl, int bufLen)"}, "flush()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or this stream is already closed"]], "SeeAlso": [], "Permissions": [], "Description": "Flushes this output stream, forcing any pending buffered output bytes to be written.", "history": "Added in API level 9", "FullName": "public void flush ()"}, "write(byte[], int, int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer containing compressed data to decompress and write to the output stream"], ["int", "int: starting offset of the compressed data within b"], ["int", "int: number of bytes to decompress from b"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if off < 0, or if len < 0, or if len > b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs or this stream is already closed"], ["@B_java#lang#NullPointerException_E@", "if b is null"], ["@B_java#util#zip#ZipException_E@", "if a compression (ZIP) format error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an array of bytes to the uncompressed output stream.", "history": "added in API level 9", "FullName": "public void write (byte[] b, int off, int len)"}, "write(byte[],int,int)": {"Returns": [], "Parameters": [["byte[]", "byte: buffer containing compressed data to decompress and write to the output stream"], ["int", "int: starting offset of the compressed data within b"], ["int", "int: number of bytes to decompress from b"]], "Throws": [["@B_java#lang#IndexOutOfBoundsException_E@", "if off < 0, or if len < 0, or if len > b.length - off"], ["@B_java#io#IOException_E@", "if an I/O error occurs or this stream is already closed"], ["@B_java#lang#NullPointerException_E@", "if b is null"], ["@B_java#util#zip#ZipException_E@", "if a compression (ZIP) format error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes an array of bytes to the uncompressed output stream.", "history": "Added in API level 9", "FullName": "public void write (byte[] b, int off, int len)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes any remaining uncompressed data to the output stream and closes the underlying output stream.", "history": "Added in API level 9", "FullName": "public void close ()"}, "write(int)": {"Returns": [], "Parameters": [["int", "int: a single byte of compressed data to decompress and write to the output stream"]], "Throws": [["@B_java#io#IOException_E@", "if an I/O error occurs or this stream is already closed"], ["@B_java#util#zip#ZipException_E@", "if a compression (ZIP) format error occurs"]], "SeeAlso": [], "Permissions": [], "Description": "Writes a byte to the uncompressed output stream.", "history": "Added in API level 9", "FullName": "public void write (int b)"}, "InflaterOutputStream(java.io.OutputStream)": {"Returns": [], "Parameters": [["@B_java#io#OutputStream_E@", "OutputStream: output stream to write the uncompressed data to"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if out is null"]], "SeeAlso": [], "Permissions": [], "Description": "Creates a new output stream with a default decompressor and buffer size.", "history": "Added in API level 9", "FullName": "public InflaterOutputStream (OutputStream out)"}}, "Inheritance": ["@B_java#io#OutputStream_E@", "@B_java#io#FilterOutputStream_E@"], "ClassName": "java.util.zip.InflaterOutputStream", "ClassDesc": "Implements an output stream filter for uncompressing data stored in the \"deflate\" compression format."}