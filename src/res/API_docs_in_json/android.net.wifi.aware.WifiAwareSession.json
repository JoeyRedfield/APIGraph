{"Functions": {"createNetworkSpecifierOpen(int, byte[])": {"Returns": [["@B_android#net#NetworkSpecifier_E@", "A @B_android#net#NetworkSpecifier_E@ to be used to construct @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to pass to @B_android#net#ConnectivityManager#requestNetwork_E@ [or other varieties of that API]."]], "Parameters": [["int", "int: The role of this device: @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR_E@ or @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER_E@"], ["byte[]", "byte: The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer.This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ for an unencrypted WiFi Aware connection (link) to the specified peer. The @B_android#net#NetworkRequest#Builder#addTransportType_E@ should be set to @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - @B_android#net#wifi#aware#DiscoverySession#createNetworkSpecifierOpen_E@. To set up an encrypted link use the @B_android#net#wifi#aware#WifiAwareSession#createNetworkSpecifierPassphrase_E@ API.", "history": "added in API level 26", "FullName": "public NetworkSpecifier createNetworkSpecifierOpen (int role, byte[] peer)"}, "createNetworkSpecifierPassphrase(int,byte[],java.lang.String)": {"Returns": [["@B_android#net#NetworkSpecifier_E@", "A @B_android#net#NetworkSpecifier_E@ to be used to construct @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to pass to @B_android#net#ConnectivityManager#requestNetwork_E@ [or other varieties of that API]."]], "Parameters": [["int", "int: The role of this device: @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR_E@ or @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER_E@ Value is @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR_E@, or @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER_E@"], ["byte[]", "byte: The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. This value must never be null."], ["@B_java#lang#String_E@", "String: The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use @B_android#net#wifi#aware#WifiAwareSession#createNetworkSpecifierOpen_E@ to specify an open (unencrypted) link. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ for an encrypted WiFi Aware connection (link) to the specified peer. The @B_android#net#NetworkRequest#Builder#addTransportType_E@ should be set to @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@.", "history": "Added in API level 26", "FullName": "public NetworkSpecifier createNetworkSpecifierPassphrase (int role, byte[] peer, String passphrase)"}, "createNetworkSpecifierOpen(int,byte[])": {"Returns": [["@B_android#net#NetworkSpecifier_E@", "A @B_android#net#NetworkSpecifier_E@ to be used to construct @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ to pass to @B_android#net#ConnectivityManager#requestNetwork_E@ [or other varieties of that API]."]], "Parameters": [["int", "int: The role of this device: @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR_E@ or @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER_E@ Value is @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR_E@, or @B_android#net#wifi#aware#WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER_E@"], ["byte[]", "byte: The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. This value must never be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a @B_android#net#NetworkRequest#Builder#setNetworkSpecifier_E@ for an unencrypted WiFi Aware connection (link) to the specified peer. The @B_android#net#NetworkRequest#Builder#addTransportType_E@ should be set to @B_android#net#NetworkCapabilities#TRANSPORT_WIFI_AWARE_E@. This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - @B_android#net#wifi#aware#WifiAwareNetworkSpecifier#Builder_E@. To set up an encrypted link use the @B_android#net#wifi#aware#WifiAwareSession#createNetworkSpecifierPassphrase_E@ API.", "history": "Added in API level 26", "FullName": "public NetworkSpecifier createNetworkSpecifierOpen (int role, byte[] peer)"}, "publish(android.net.wifi.aware.PublishConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#wifi#aware#PublishConfig_E@", "PublishConfig: The @B_android#net#wifi#aware#PublishConfig_E@ specifying the configuration of the requested publish session. This value must never be null."], ["@B_android#net#wifi#aware#DiscoverySessionCallback_E@", "DiscoverySessionCallback: A @B_android#net#wifi#aware#DiscoverySessionCallback_E@ derived object to be used for session event callbacks. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The Handler on whose thread to execute the callbacks of the callback object. If a null is provided then the application's main thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Issue a request to the Aware service to create a new Aware publish discovery session, using the specified publishConfig configuration. The results of the publish operation are routed to the callbacks of @B_android#net#wifi#aware#DiscoverySessionCallback_E@: @B_android#net#wifi#aware#DiscoverySessionCallback#onPublishStarted_E@ is called when the publish session is created and provides a handle to the session. Further operations on the publish session can be executed on that object. @B_android#net#wifi#aware#DiscoverySessionCallback#onSessionConfigFailed_E@ is called if the publish operation failed. Other results of the publish session operations will also be routed to callbacks on the callback object. The resulting publish session can be modified using @B_android#net#wifi#aware#PublishDiscoverySession#updatePublish_E@. An application must use the @B_android#net#wifi#aware#DiscoverySession#close_E@ to terminate the publish discovery session once it isn't needed. This will free resources as well terminate any on-air transmissions. The application must have the @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission to start a publish discovery session.", "history": "Added in API level 26", "FullName": "public void publish (PublishConfig publishConfig, DiscoverySessionCallback callback, Handler handler)"}, "close()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Destroy the Wi-Fi Aware service session and, if no other applications are attached to Aware, also disable Aware. This method destroys all outstanding operations - i.e. all publish and subscribes are terminated, and any outstanding data-links are shut-down. However, it is good practice to destroy these discovery sessions and connections explicitly before a session-wide destroy. An application may re-attach after a destroy using @B_android#net#wifi#aware#WifiAwareManager#attach_E@ .", "history": "Added in API level 26", "FullName": "public void close ()"}, "subscribe(android.net.wifi.aware.SubscribeConfig,android.net.wifi.aware.DiscoverySessionCallback,android.os.Handler)": {"Returns": [], "Parameters": [["@B_android#net#wifi#aware#SubscribeConfig_E@", "SubscribeConfig: The @B_android#net#wifi#aware#SubscribeConfig_E@ specifying the configuration of the requested subscribe session. This value must never be null."], ["@B_android#net#wifi#aware#DiscoverySessionCallback_E@", "DiscoverySessionCallback: A @B_android#net#wifi#aware#DiscoverySessionCallback_E@ derived object to be used for session event callbacks. This value must never be null."], ["@B_android#os#Handler_E@", "Handler: The Handler on whose thread to execute the callbacks of the callback object. If a null is provided then the application's main thread will be used. This value may be null."]], "Throws": [], "SeeAlso": [], "Permissions": ["@B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@"], "Description": "Issue a request to the Aware service to create a new Aware subscribe discovery session, using the specified subscribeConfig configuration. The results of the subscribe operation are routed to the callbacks of @B_android#net#wifi#aware#DiscoverySessionCallback_E@: @B_android#net#wifi#aware#DiscoverySessionCallback#onSubscribeStarted_E@ is called when the subscribe session is created and provides a handle to the session. Further operations on the subscribe session can be executed on that object. @B_android#net#wifi#aware#DiscoverySessionCallback#onSessionConfigFailed_E@ is called if the subscribe operation failed. Other results of the subscribe session operations will also be routed to callbacks on the callback object. The resulting subscribe session can be modified using @B_android#net#wifi#aware#SubscribeDiscoverySession#updateSubscribe_E@. An application must use the @B_android#net#wifi#aware#DiscoverySession#close_E@ to terminate the subscribe discovery session once it isn't needed. This will free resources as well terminate any on-air transmissions. The application must have the @B_android#Manifest#permission#ACCESS_FINE_LOCATION_E@ permission to start a subscribe discovery session.", "history": "Added in API level 26", "FullName": "public void subscribe (SubscribeConfig subscribeConfig, DiscoverySessionCallback callback, Handler handler)"}}, "Inheritance": [], "ClassName": "android.net.wifi.aware.WifiAwareSession", "ClassDesc": "This class represents a Wi-Fi Aware session - an attachment to the Wi-Fi Aware service through which the app can execute discovery operations."}