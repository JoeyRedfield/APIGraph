{"Functions": {"dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: Text to print at the front of each line."], ["@B_java#io#FileDescriptor_E@", "FileDescriptor: The raw file descriptor that the dump is being sent to."], ["@B_java#io#PrintWriter_E@", "PrintWriter: A PrintWriter to which the dump is to be set."], ["@B_java#lang#String_E@", "String: Additional arguments to the dump request."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Print the LoaderManager's state into the given stream.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void dump (String prefix, FileDescriptor fd, PrintWriter writer, String[] args)"}, "restartLoader(int,android.os.Bundle,android.app.LoaderManager.LoaderCallbacks<D>)": {"Returns": [["@B_android#content#Loader_E@", "no returns description in source"]], "Parameters": [["int", "int: A unique identifier for this loader. Can be whatever you want. Identifiers are scoped to a particular LoaderManager instance."], ["@B_android#os#Bundle_E@", "Bundle: Optional arguments to supply to the loader at construction."], ["@B_android#app#LoaderManager#LoaderCallbacks_E@", "LoaderCallbacks: Interface the LoaderManager will call to report about changes in the state of the loader. Required."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Starts a new or restarts an existing @B_android#content#Loader_E@ in this manager, registers the callbacks to it, and (if the activity/fragment is currently started) starts loading it. If a loader with the same id has previously been started it will automatically be destroyed when the new loader completes its work. The callback will be delivered before the old loader is destroyed.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Loader<D> restartLoader (int id, Bundle args, LoaderCallbacks<D> callback)"}, "LoaderManager()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 11", "FullName": "public LoaderManager ()"}, "initLoader(int,android.os.Bundle,android.app.LoaderManager.LoaderCallbacks<D>)": {"Returns": [["@B_android#content#Loader_E@", "no returns description in source"]], "Parameters": [["int", "int: A unique identifier for this loader. Can be whatever you want. Identifiers are scoped to a particular LoaderManager instance."], ["@B_android#os#Bundle_E@", "Bundle: Optional arguments to supply to the loader at construction. If a loader already exists (a new one does not need to be created), this parameter will be ignored and the last arguments continue to be used."], ["@B_android#app#LoaderManager#LoaderCallbacks_E@", "LoaderCallbacks: Interface the LoaderManager will call to report about changes in the state of the loader. Required."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Ensures a loader is initialized and active. If the loader doesn't already exist, one is created and (if the activity/fragment is currently started) starts the loader. Otherwise the last created loader is re-used. In either case, the given callback is associated with the loader, and will be called as the loader state changes. If at the point of call the caller is in its started state, and the requested loader already exists and has generated its data, then callback @B_android#app#LoaderManager#LoaderCallbacks#onLoadFinished_E@ will be called immediately (inside of this function), so you must be prepared for this to happen.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Loader<D> initLoader (int id, Bundle args, LoaderCallbacks<D> callback)"}, "getLoader(int)": {"Returns": [["@B_android#content#Loader_E@", "no returns description in source"]], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the Loader with the given id or null if no matching Loader is found.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract Loader<D> getLoader (int id)"}, "destroyLoader(int)": {"Returns": [], "Parameters": [["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Stops and removes the loader with the given ID. If this loader had previously reported data to the client through @B_android#app#LoaderManager#LoaderCallbacks#onLoadFinished_E@, a call will be made to @B_android#app#LoaderManager#LoaderCallbacks#onLoaderReset_E@.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public abstract void destroyLoader (int id)"}, "enableDebugLogging(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Control whether the framework's internal loader manager debugging logs are turned on. If enabled, you will see output in logcat as the framework performs loader operations.", "history": "Added in API level 11 Deprecated in API level 28", "FullName": "public static void enableDebugLogging (boolean enabled)"}}, "Inheritance": [], "ClassName": "android.app.LoaderManager", "ClassDesc": "Use the https:##developer#android#com@B_android#support#v4#app#LoaderManager_E@ Interface associated with an @B_android#app#Activity_E@ or @B_android#app#Fragment_E@ for managing one or more @B_android#content#Loader_E@ instances associated with it. This helps an application manage longer-running operations in conjunction with the Activity or Fragment lifecycle; the most common use of this is with a @B_android#content#CursorLoader_E@, however applications are free to write their own loaders for loading other types of data. While the LoaderManager API was introduced in @B_android#os#Build#VERSION_CODES#HONEYCOMB_E@, a version of the API at is also available for use on older platforms through https:##developer#android#com@B_android#support#v4#app#FragmentActivity_E@. See the blog post As an example, here is the full implementation of a @B_android#app#Fragment_E@ that displays a @B_android#widget#ListView_E@ containing the results of a query against the contacts content provider. It uses a @B_android#content#CursorLoader_E@ to manage the query on the provider."}