{"Functions": {"opening(java.net.Socket, org.apache.http.HttpHost)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "the unconnected socket which is about to be connected."], ["@B_org#apache#http#HttpHost_E@", "the target host of this connection"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Signals that this connection is in the process of being open. By calling this method, you can provide the connection with the unconnected socket that will be connected before @B_org#apache#http#conn#OperatedClientConnection#openCompleted_E@ is called. This allows the connection to close that socket if @B_org#apache#http#HttpConnection#shutdown_E@ is called before it is open. Closing the unconnected socket will interrupt a thread that is blocked on the connect. Otherwise, that thread will either time out on the connect, or it returns successfully and then opens this connection which was just shut down. You also must call @B_org#apache#http#conn#OperatedClientConnection#openCompleted_E@ in order to complete the process", "history": "Added in API level 1", "FullName": "public void opening (Socket sock, HttpHost target)"}, "getSocket()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public final Socket getSocket ()"}, "shutdown()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", "in case of a problem"]], "SeeAlso": [], "Permissions": [], "Description": "Force-closes this connection. If the connection is still in the process of being open (the method @B_org#apache#http#impl#conn#DefaultClientConnection#opening_E@ was already called but @B_org#apache#http#impl#conn#DefaultClientConnection#openCompleted_E@ was not), the associated socket that is being connected to a remote address will be closed. That will interrupt a thread that is blocked on connecting the socket. If the connection is not yet open, this will prevent the connection from being opened.", "history": "Added in API level 1", "FullName": "public void shutdown ()"}, "receiveResponseHeader()": {"Returns": [["", "a new HttpResponse object with status line and headers initialized."]], "Parameters": [], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Receives the request line and headers of the next response available from this connection. The caller should examine the HttpResponse object to find out if it should try to receive a response entity as well.", "history": "Added in API level 1", "FullName": "public HttpResponse receiveResponseHeader ()"}, "close()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Closes this connection gracefully. This method will attempt to flush the transmitter's internal buffer prior to closing the underlying socket. This method MUST NOT be called from a different thread to force shutdown of the connection. Use @B_org#apache#http#HttpConnection#shutdown_E@ instead.", "history": "Added in API level 1", "FullName": "public void close ()"}, "DefaultClientConnection()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DefaultClientConnection ()"}, "openCompleted(boolean, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["boolean", "true if this connection is secure, for example if an SSLSocket is used, or false if it is not secure"], ["@B_org#apache#http#params#HttpParams_E@", "parameters for this connection. The parameters will be used when creating dependent objects, for example to determine buffer sizes."]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Signals that the connection has been successfully open. An attempt to call this method on an open connection will cause an exception.", "history": "Added in API level 1", "FullName": "public void openCompleted (boolean secure, HttpParams params)"}, "createSessionInputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected SessionInputBuffer createSessionInputBuffer (Socket socket, int buffersize, HttpParams params)"}, "sendRequestHeader(org.apache.http.HttpRequest)": {"Returns": [], "Parameters": [["@B_org#apache#http#HttpRequest_E@", "the request whose headers to send."]], "Throws": [["@B_org#apache#http#HttpException_E@", ""], ["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Sends the request line and all headers over the connection.", "history": "Added in API level 1", "FullName": "public void sendRequestHeader (HttpRequest request)"}, "getTargetHost()": {"Returns": [["", "the host to which this connection is opened"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Obtains the target host for this connection. If the connection is to a proxy but not tunnelled, this is the proxy. If the connection is tunnelled through a proxy, this is the target of the tunnel. The return value is well-defined only while the connection is open. It may change even while the connection is open, because of an @B_org#apache#http#conn#OperatedClientConnection#update_E@.", "history": "Added in API level 1", "FullName": "public final HttpHost getTargetHost ()"}, "update(java.net.Socket, org.apache.http.HttpHost, boolean, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [["@B_java#net#Socket_E@", "the new socket for communicating with the target host, or null to continue using the old socket. If null is passed, helper objects that depend on the socket should be re-used. In that case, some changes in the parameters will not take effect."], ["@B_org#apache#http#HttpHost_E@", "the new target host of this connection"], ["boolean", "true if this connection is now secure, false if it is not secure"], ["@B_org#apache#http#params#HttpParams_E@", "new parameters for this connection"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "Updates this connection. A connection can be updated only while it is open. Updates are used for example when a tunnel has been established, or when a TLS/SSL connection has been layered on top of a plain socket connection.", "history": "Added in API level 1", "FullName": "public void update (Socket sock, HttpHost target, boolean secure, HttpParams params)"}, "createResponseParser(org.apache.http.io.SessionInputBuffer, org.apache.http.HttpResponseFactory, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected HttpMessageParser createResponseParser (SessionInputBuffer buffer, HttpResponseFactory responseFactory, HttpParams params)"}, "createSessionOutputBuffer(java.net.Socket, int, org.apache.http.params.HttpParams)": {"Returns": [], "Parameters": [], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "protected SessionOutputBuffer createSessionOutputBuffer (Socket socket, int buffersize, HttpParams params)"}, "isSecure()": {"Returns": [["", "true if this connection is secure, false otherwise"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether this connection is secure. The return value is well-defined only while the connection is open. It may change even while the connection is open, because of an @B_org#apache#http#conn#OperatedClientConnection#update_E@.", "history": "Added in API level 1", "FullName": "public final boolean isSecure ()"}}, "Inheritance": ["@B_org#apache#http#impl#AbstractHttpClientConnection_E@", "@B_org#apache#http#impl#SocketHttpClientConnection_E@"], "ClassName": "org.apache.http.impl.conn.DefaultClientConnection", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Default implementation of an operated client connection."}