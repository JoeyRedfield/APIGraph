{"Functions": {"getItem(int)": {"Returns": [["@B_java#lang#Object_E@", "The data at the specified position."]], "Parameters": [["int", "int: Position of the item whose data we want within the adapter's data set."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the data item associated with the specified position in the data set.", "history": "Added in API level 1", "FullName": "public abstract Object getItem (int position)"}, "getItemId(int)": {"Returns": [["long", "The id of the item at the specified position."]], "Parameters": [["int", "int: The position of the item within the adapter's data set whose row id we want."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get the row id associated with the specified position in the list.", "history": "Added in API level 1", "FullName": "public abstract long getItemId (int position)"}, "hasStableIds()": {"Returns": [["boolean", "True if the same id always refers to the same object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Indicates whether the item ids are stable across changes to the underlying data.", "history": "Added in API level 1", "FullName": "public abstract boolean hasStableIds ()"}, "isEmpty()": {"Returns": [["boolean", "true if this adapter doesn't contain any data. This is used to determine whether the empty view should be displayed. A typical implementation will return getCount() == 0 but since getCount() includes the headers and footers, specialized adapters might want a different behavior."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public abstract boolean isEmpty ()"}, "unregisterDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object to unregister."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Unregister an observer that has previously been registered with this adapter via @B_android#widget#Adapter#registerDataSetObserver_E@.", "history": "Added in API level 1", "FullName": "public abstract void unregisterDataSetObserver (DataSetObserver observer)"}, "getViewTypeCount()": {"Returns": [["int", "The number of types of Views that will be created by this adapter"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of types of Views that will be created by @B_android#widget#Adapter#getView_E@. Each type represents a set of views that can be converted in @B_android#widget#Adapter#getView_E@. If the adapter always returns the same type of View for all items, this method should return 1. This method will only be called when the adapter is set on the @B_android#widget#AdapterView_E@.", "history": "Added in API level 1", "FullName": "public abstract int getViewTypeCount ()"}, "getView(int,android.view.View,android.view.ViewGroup)": {"Returns": [["@B_android#view#View_E@", "A View corresponding to the data at the specified position."]], "Parameters": [["int", "int: The position of the item within the adapter's data set of the item whose view we want."], ["@B_android#view#View_E@", "View: The old view to reuse, if possible. Note: You should check that this view is non-null and of an appropriate type before using. If it is not possible to convert this view to display the correct data, this method can create a new view. Heterogeneous lists can specify their number of view types, so that this View is always of the right type (see @B_android#widget#Adapter#getViewTypeCount_E@ and @B_android#widget#Adapter#getItemViewType_E@)."], ["@B_android#view#ViewGroup_E@", "ViewGroup: The parent that this view will eventually be attached to"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Get a View that displays the data at the specified position in the data set. You can either create a View manually or inflate it from an XML layout file. When the View is inflated, the parent View (GridView, ListView...) will apply default layout parameters unless you use @B_android#view#LayoutInflater#inflate_E@ to specify a root view and to prevent attachment to the root.", "history": "Added in API level 1", "FullName": "public abstract View getView (int position, View convertView, ViewGroup parent)"}, "registerDataSetObserver(android.database.DataSetObserver)": {"Returns": [], "Parameters": [["@B_android#database#DataSetObserver_E@", "DataSetObserver: the object that gets notified when the data set changes."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Register an observer that is called when changes happen to the data used by this adapter.", "history": "Added in API level 1", "FullName": "public abstract void registerDataSetObserver (DataSetObserver observer)"}, "getItemViewType(int)": {"Returns": [["int", "An integer representing the type of View. Two views should share the same type if one can be converted to the other in @B_android#widget#Adapter#getView_E@. Note: Integers must be in the range 0 to @B_android#widget#Adapter#getViewTypeCount_E@ - 1. @B_android#widget#Adapter#IGNORE_ITEM_VIEW_TYPE_E@ can also be returned."]], "Parameters": [["int", "int: The position of the item within the adapter's data set whose view type we want."]], "Throws": [], "SeeAlso": ["@B_android#widget#Adapter_E@"], "Permissions": [], "Description": "Get the type of View that will be created by @B_android#widget#Adapter#getView_E@ for the specified item.", "history": "Added in API level 1", "FullName": "public abstract int getItemViewType (int position)"}, "getAutofillOptions()": {"Returns": [["@B_java#lang#CharSequence_E@", "null by default, unless implementations override it."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets a string representation of the adapter data that can help @B_android#service#autofill#AutofillService_E@ autofill the view backed by the adapter. It should only be set (i.e., non-null if the values do not represent PII (Personally Identifiable Information - sensitive data such as email addresses, credit card numbers, passwords, etc...). For example, it's ok to return a list of month names, but not a list of usernames. A good rule of thumb is that if the adapter data comes from static resources, such data is not PII - see @B_android#view#ViewStructure#setDataIsSensitive_E@ for more info.", "history": "Added in API level 26", "FullName": "public CharSequence[] getAutofillOptions ()"}, "getCount()": {"Returns": [["int", "Count of items."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "How many items are in the data set represented by this Adapter.", "history": "Added in API level 1", "FullName": "public abstract int getCount ()"}}, "Inheritance": [], "ClassName": "android.widget.Adapter", "ClassDesc": "An Adapter object acts as a bridge between an @B_android#widget#AdapterView_E@ and the underlying data for that view. The Adapter provides access to the data items. The Adapter is also responsible for making a @B_android#view#View_E@ for each item in the data set."}