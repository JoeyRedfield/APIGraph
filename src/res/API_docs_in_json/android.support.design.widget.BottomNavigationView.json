{"Functions": {"onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#support#design#widget#BottomNavigationView#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state.", "history": "", "FullName": "void onRestoreInstanceState (Parcelable state)"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view.", "history": "", "FullName": "Parcelable onSaveInstanceState ()"}, "BottomNavigationView(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.0.0", "FullName": "BottomNavigationView (Context context)"}, "getItemBackgroundResource()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#BottomNavigationView#setItemBackgroundResource_E@"], "Permissions": [], "Description": "Returns the background resource of the menu items.", "history": "added in version 25.0.0", "FullName": "int getItemBackgroundResource ()"}, "getMaxItemCount()": {"Returns": [["int", "The maximum number of items that can be shown in BottomNavigationView."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in version 25.0.0", "FullName": "int getMaxItemCount ()"}, "getSelectedItemId()": {"Returns": [["int", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#BottomNavigationView#setSelectedItemId_E@"], "Permissions": [], "Description": "Returns the currently selected menu item ID, or zero if there is no menu.", "history": "added in version 25.3.0", "FullName": "int getSelectedItemId ()"}, "setItemBackgroundResource(int)": {"Returns": [], "Parameters": [["int", "int: The identifier of the resource."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the background of our menu items to the given resource.", "history": "added in version 25.0.0", "FullName": "void setItemBackgroundResource (int resId)"}, "setSelectedItemId(int)": {"Returns": [], "Parameters": [["int", "int: The menu item ID. If no item has this ID, the current selection is unchanged."]], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#BottomNavigationView#getSelectedItemId_E@"], "Permissions": [], "Description": "Set the selected menu item ID. This behaves the same as tapping on an item.", "history": "added in version 25.3.0", "FullName": "void setSelectedItemId (int itemId)"}, "getItemIconTintList()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#BottomNavigationView#setItemIconTintList_E@"], "Permissions": [], "Description": "Returns the tint which is applied to our menu items' icons.", "history": "added in version 25.0.0", "FullName": "ColorStateList getItemIconTintList ()"}, "inflateMenu(int)": {"Returns": [], "Parameters": [["int", "int: ID of a menu resource to inflate"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Inflate a menu resource into this navigation view. Existing items in the menu will not be modified or removed.", "history": "added in version 25.0.0", "FullName": "void inflateMenu (int resId)"}, "getItemTextColor()": {"Returns": [["@B_android#content#res#ColorStateList_E@", "the ColorStateList of colors used for the different states of the menu items text."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#support#design#widget#BottomNavigationView#setItemTextColor_E@"], "Permissions": [], "Description": "Returns colors used for the different states (normal, selected, focused, etc.) of the menu item text.", "history": "added in version 25.0.0", "FullName": "ColorStateList getItemTextColor ()"}, "getMenu()": {"Returns": [["@B_android#view#Menu_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the @B_android#view#Menu_E@ instance associated with this bottom navigation bar.", "history": "added in version 25.0.0", "FullName": "Menu getMenu ()"}}, "Inheritance": ["java.lang.Object", "https:##developer#android#com@B_android#view#View_E@", "https:##developer#android#com@B_android#view#ViewGroup_E@", "https:##developer#android#com@B_android#widget#FrameLayout_E@"], "ClassName": "android.support.design.widget.BottomNavigationView", "ClassDesc": "Represents a standard bottom navigation bar for application. It is an implementation of Bottom navigation bars make it easy for users to explore and switch between top-level views in a single tap. It should be used when application has three to five top-level destinations. The bar contents can be populated by specifying a menu resource file. Each menu item title, icon and enabled state will be used for displaying bottom navigation bar items. Menu items can also be used for programmatically selecting which destination is currently active. It can be done using MenuItem#setChecked(true)"}