{"Functions": {"containsKey(java.lang.Object)": {"Returns": [["boolean", "true if this map contains a mapping for the specified key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the key is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains a mapping for the specified key. More formally, returns true if and only if this map contains a mapping for a key k such that Objects.equals(key, k). (There can be at most one such mapping.)", "history": "Added in API level 1", "FullName": "public abstract boolean containsKey (Object key)"}, "remove(java.lang.Object, java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean remove (Object key, Object value)"}, "computeIfPresent(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not support null keys, or the remappingFunction is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value. If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfPresent (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "putIfAbsent(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "Added in API level 24", "FullName": "public V putIfAbsent (K key, V value)"}, "put(K, V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if @B_java#util#Map#containsKey_E@ would return true.)", "history": "added in API level 1", "FullName": "public abstract V put (K key, V value)"}, "replace(K, V, V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of a specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if a specified key or newValue is null, and this map does not permit null keys or values"], ["@B_java#lang#NullPointerException_E@", "if oldValue is null and this map does not permit null values (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "getOrDefault(java.lang.Object,V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the key is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "Added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "equals(java.lang.Object)": {"Returns": [["boolean", "true if the specified object is equal to this map"]], "Parameters": [["@B_java#lang#Object_E@", "Object: object to be compared for equality with this map"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Compares the specified object with this map for equality. Returns true if the given object is also a map and the two maps represent the same mappings. More formally, two maps m1 and m2 represent the same mappings if m1.entrySet().equals(m2.entrySet()). This ensures that the equals method works properly across different implementations of the Map interface.", "history": "Added in API level 1", "FullName": "public abstract boolean equals (Object o)"}, "compute(K,java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if none"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not support null keys, or the remappingFunction is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping). For example, to either create or append a String msg to a value mapping: @B_java#util#Map#merge_E@ is often simpler to use for such purposes.) If the remapping function returns null, the mapping is removed (or remains absent if initially absent). If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V compute (K key, BiFunction<? super K, ? super V, ? extends V> remappingFunction)"}, "replace(K,V,V)": {"Returns": [["boolean", "true if the value was replaced"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value expected to be associated with the specified key"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of a specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if a specified key or newValue is null, and this map does not permit null keys or values"], ["@B_java#lang#NullPointerException_E@", "if oldValue is null and this map does not permit null values (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean replace (K key, V oldValue, V newValue)"}, "keySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the keys contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the keys contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll, and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public abstract Set<K> keySet ()"}, "hashCode()": {"Returns": [["int", "the hash code value for this map"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_java#util#Map#Entry#hashCode_E@", "@B_java#lang#Object#equals_E@", "@B_java#util#Map#equals_E@"], "Permissions": [], "Description": "Returns the hash code value for this map. The hash code of a map is defined to be the sum of the hash codes of each entry in the map's entrySet() view. This ensures that m1.equals(m2) implies that m1.hashCode()==m2.hashCode() for any two maps m1 and m2, as required by the general contract of @B_java#lang#Object#hashCode_E@.", "history": "Added in API level 1", "FullName": "public abstract int hashCode ()"}, "replaceAll(java.util.function.BiFunction<?superK,?superV,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiFunction_E@", "BiFunction: the function to apply to each entry"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the set operation is not supported by this map's entry set iterator."], ["@B_java#lang#ClassCastException_E@", "if the class of a replacement value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified function is null, or the specified replacement value is null, and this map does not permit null values"], ["@B_java#lang#ClassCastException_E@", "if a replacement value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if function or a replacement value is null, and this map does not permit null keys or values (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a replacement value prevents it from being stored in this map (optional)"], ["@B_java#util#ConcurrentModificationException_E@", "if an entry is found to be removed during iteration"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces each entry's value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception. Exceptions thrown by the function are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void replaceAll (BiFunction<? super K, ? super V, ? extends V> function)"}, "get(java.lang.Object)": {"Returns": [["V", "the value to which the specified key is mapped, or null if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the key is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key. More formally, if this map contains a mapping from a key k to a value v such that Objects.equals(key, k), then this method returns v; otherwise it returns null. (There can be at most one such mapping.) If this map permits null values, then a return value of null does not null. The @B_java#util#Map#containsKey_E@ operation may be used to distinguish these two cases.", "history": "Added in API level 1", "FullName": "public abstract V get (Object key)"}, "size()": {"Returns": [["int", "the number of key-value mappings in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the number of key-value mappings in this map. If the map contains more than Integer.MAX_VALUE elements, returns Integer.MAX_VALUE.", "history": "Added in API level 1", "FullName": "public abstract int size ()"}, "merge(K,V,java.util.function.BiFunction<?superV,?superV,?extendsV>)": {"Returns": [["V", "the new value associated with the specified key, or null if no value is associated with the key"]], "Parameters": [["K", "K: key with which the resulting value is to be associated"], ["V", "V: the non-null value to be merged with the existing value associated with the key or, if no existing value or a null value is associated with the key, to be associated with the key"], ["@B_java#util#function#BiFunction_E@", "BiFunction: the remapping function to recompute a value if present"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not support null keys or the value or remappingFunction is null"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. Otherwise, replaces the associated value with the results of the given remapping function, or removes if the result is null. This method may be of use when combining multiple mapped values for a key. For example, to either create or append a String msg to a value mapping: If the remapping function returns null, the mapping is removed. If the remapping function itself throws an (unchecked) exception, the exception is rethrown, and the current mapping is left unchanged. The remapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V merge (K key, V value, BiFunction<? super V, ? super V, ? extends V> remappingFunction)"}, "putAll(java.util.Map<?extendsK,?extendsV>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the putAll operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of a key or value in the specified map prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a key or value in the specified map prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling @B_java#util#Map#put_E@ on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.", "history": "Added in API level 1", "FullName": "public abstract void putAll (Map<? extends K, ? extends V> m)"}, "remove(java.lang.Object,java.lang.Object)": {"Returns": [["boolean", "true if the value was removed"]], "Parameters": [["@B_java#lang#Object_E@", "Object: key with which the specified value is associated"], ["@B_java#lang#Object_E@", "Object: value expected to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the entry for the specified key only if it is currently mapped to the specified value.", "history": "Added in API level 24", "FullName": "public boolean remove (Object key, Object value)"}, "values()": {"Returns": [["@B_java#util#Collection_E@", "a collection view of the values contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Collection_E@ view of the values contained in this map. The collection is backed by the map, so changes to the map are reflected in the collection, and vice-versa. If the map is modified while an iteration over the collection is in progress (except through the iterator's own remove operation), the results of the iteration are undefined. The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public abstract Collection<V> values ()"}, "isEmpty()": {"Returns": [["boolean", "true if this map contains no key-value mappings"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map contains no key-value mappings.", "history": "Added in API level 1", "FullName": "public abstract boolean isEmpty ()"}, "remove(java.lang.Object)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key."]], "Parameters": [["@B_java#lang#Object_E@", "Object: key whose mapping is to be removed from the map"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the remove operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the key is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Removes the mapping for a key from this map if it is present (optional operation). More formally, if this map contains a mapping from key k to value v such that Objects.equals(key, k), that mapping is removed. (The map can contain at most one such mapping.) Returns the value to which this map previously associated the key, or null if the map contained no mapping for the key. If this map permits null values, then a return value of null does not null. The map will not contain a mapping for the specified key once the call returns.", "history": "Added in API level 1", "FullName": "public abstract V remove (Object key)"}, "containsValue(java.lang.Object)": {"Returns": [["boolean", "true if this map maps one or more keys to the specified value"]], "Parameters": [["@B_java#lang#Object_E@", "Object: value whose presence in this map is to be tested"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified value is null and this map does not permit null values (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns true if this map maps one or more keys to the specified value. More formally, returns true if and only if this map contains at least one mapping to a value v such that Objects.equals(value, v). This operation will probably require time linear in the map size for most implementations of the Map interface.", "history": "Added in API level 1", "FullName": "public abstract boolean containsValue (Object value)"}, "putIfAbsent(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the key or value is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.", "history": "added in API level 24", "FullName": "public V putIfAbsent (K key, V value)"}, "clear()": {"Returns": [], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the clear operation is not supported by this map"]], "SeeAlso": [], "Permissions": [], "Description": "Removes all of the mappings from this map (optional operation). The map will be empty after this call returns.", "history": "Added in API level 1", "FullName": "public abstract void clear ()"}, "entrySet()": {"Returns": [["@B_java#util#Set_E@", "a set view of the mappings contained in this map"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a @B_java#util#Set_E@ view of the mappings contained in this map. The set is backed by the map, so changes to the map are reflected in the set, and vice-versa. If the map is modified while an iteration over the set is in progress (except through the iterator's own remove operation, or through the setValue operation on a map entry returned by the iterator) the results of the iteration are undefined. The set supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Set.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations.", "history": "Added in API level 1", "FullName": "public abstract Set<Entry<K, V>> entrySet ()"}, "replace(K,V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "Added in API level 24", "FullName": "public V replace (K key, V value)"}, "computeIfAbsent(K,java.util.function.Function<?superK,?extendsV>)": {"Returns": [["V", "the current (existing or computed) value associated with the specified key, or null if the computed value is null"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["@B_java#util#function#Function_E@", "Function: the mapping function to compute a value"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not support null keys, or the mappingFunction is null"], ["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null. If the mapping function returns null, no mapping is recorded. If the mapping function itself throws an (unchecked) exception, the exception is rethrown, and no mapping is recorded. The most common usage is to construct a new object serving as an initial mapped value or memoized result, as in: Or to implement a multi-value map, Map<K,Collection<V>>, supporting multiple values per key: The mapping function should not modify this map during computation.", "history": "Added in API level 24", "FullName": "public V computeIfAbsent (K key, Function<? super K, ? extends V> mappingFunction)"}, "replace(K, V)": {"Returns": [["V", "the previous value associated with the specified key, or null if there was no mapping for the key. (A null return can also indicate that the map previously associated null with the key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map (optional)"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null, and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Replaces the entry for the specified key only if it is currently mapped to some value.", "history": "added in API level 24", "FullName": "public V replace (K key, V value)"}, "forEach(java.util.function.BiConsumer<?superK,?superV>)": {"Returns": [], "Parameters": [["@B_java#util#function#BiConsumer_E@", "BiConsumer: The action to be performed for each entry"]], "Throws": [["@B_java#lang#NullPointerException_E@", "if the specified action is null"], ["@B_java#util#ConcurrentModificationException_E@", "if an entry is found to be removed during iteration"]], "SeeAlso": [], "Permissions": [], "Description": "Performs the given action for each entry in this map until all entries have been processed or the action throws an exception. Unless otherwise specified by the implementing class, actions are performed in the order of entry set iteration (if an iteration order is specified.) Exceptions thrown by the action are relayed to the caller.", "history": "Added in API level 24", "FullName": "public void forEach (BiConsumer<? super K, ? super V> action)"}, "getOrDefault(java.lang.Object, V)": {"Returns": [["V", "the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key"]], "Parameters": [["@B_java#lang#Object_E@", "Object: the key whose associated value is to be returned"], ["V", "V: the default mapping of the key"]], "Throws": [["@B_java#lang#ClassCastException_E@", "if the key is of an inappropriate type for this map (optional)"], ["@B_java#lang#NullPointerException_E@", "if the specified key is null and this map does not permit null keys (optional)"]], "SeeAlso": [], "Permissions": [], "Description": "Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.", "history": "added in API level 24", "FullName": "public V getOrDefault (Object key, V defaultValue)"}, "putAll(java.util.Map<? extends K, ? extends V>)": {"Returns": [], "Parameters": [["@B_java#util#Map_E@", "Map: mappings to be stored in this map"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the putAll operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of a key or value in the specified map prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified map is null, or if this map does not permit null keys or values, and the specified map contains null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of a key or value in the specified map prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Copies all of the mappings from the specified map to this map (optional operation). The effect of this call is equivalent to that of calling @B_java#util#Map#put_E@ on this map once for each mapping from key k to value v in the specified map. The behavior of this operation is undefined if the specified map is modified while the operation is in progress.", "history": "added in API level 1", "FullName": "public abstract void putAll (Map<? extends K, ? extends V> m)"}, "put(K,V)": {"Returns": [["V", "the previous value associated with key, or null if there was no mapping for key. (A null return can also indicate that the map previously associated null with key, if the implementation supports null values.)"]], "Parameters": [["K", "K: key with which the specified value is to be associated"], ["V", "V: value to be associated with the specified key"]], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if the put operation is not supported by this map"], ["@B_java#lang#ClassCastException_E@", "if the class of the specified key or value prevents it from being stored in this map"], ["@B_java#lang#NullPointerException_E@", "if the specified key or value is null and this map does not permit null keys or values"], ["@B_java#lang#IllegalArgumentException_E@", "if some property of the specified key or value prevents it from being stored in this map"]], "SeeAlso": [], "Permissions": [], "Description": "Associates the specified value with the specified key in this map (optional operation). If the map previously contained a mapping for the key, the old value is replaced by the specified value. (A map m is said to contain a mapping for a key k if and only if @B_java#util#Map#containsKey_E@ would return true.)", "history": "Added in API level 1", "FullName": "public abstract V put (K key, V value)"}}, "Inheritance": [], "ClassName": "java.util.Map<K, V>", "ClassDesc": "An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value. This interface takes the place of the Dictionary class, which was a totally abstract class rather than an interface. The Map interface provides three TreeMap class, make specific guarantees as to their order; others, like the HashMap class, do not. Note: great care must be exercised if mutable objects are used as map keys. The behavior of a map is not specified if the value of an object is changed in a manner that affects equals comparisons while the object is a key in the map. A special case of this prohibition is that it is not permissible for a map to contain itself as a key. While it is permissible for a map to contain itself as a value, extreme caution is advised: the equals and hashCode methods are no longer well defined on such a map. All general-purpose map implementation classes should provide two \"standard\" constructors: a void (no arguments) constructor which creates an empty map, and a constructor with a single argument of type Map, which creates a new map with the same key-value mappings as its argument. In effect, the latter constructor allows the user to copy any map, producing an equivalent map of the desired class. There is no way to enforce this recommendation (as interfaces cannot contain constructors) but all of the general-purpose map implementations in the JDK comply. The \"destructive\" methods contained in this interface, that is, the methods that modify the map on which they operate, are specified to throw UnsupportedOperationException if this map does not support the operation. If this is the case, these methods may, but are not required to, throw an UnsupportedOperationException if the invocation would have no effect on the map. For example, invoking the @B_java#util#Map#putAll_E@ method on an unmodifiable map may, but is not required to, throw the exception if the map whose mappings are to be \"superimposed\" is empty. Some map implementations have restrictions on the keys and values they may contain. For example, some implementations prohibit null keys and values, and some have restrictions on the types of their keys. Attempting to insert an ineligible key or value throws an unchecked exception, typically NullPointerException or ClassCastException. Attempting to query the presence of an ineligible key or value may throw an exception, or it may simply return false; some implementations will exhibit the former behavior and some will exhibit the latter. More generally, attempting an operation on an ineligible key or value whose completion would not result in the insertion of an ineligible element into the map may throw an exception or it may succeed, at the option of the implementation. Such exceptions are marked as \"optional\" in the specification for this interface. Many methods in Collections Framework interfaces are defined in terms of the @B_java#lang#Object#equals_E@ method. For example, the specification for the @B_java#util#Map#containsKey_E@ method says: \"returns true if and only if this map contains a mapping for a key k such that (key==null ? k==null : key.equals(k)).\" This specification should Map.containsKey with a non-null argument key will cause key.equals(k) to be invoked for any key k. Implementations are free to implement optimizations whereby the equals invocation is avoided, for example, by first comparing the hash codes of the two keys. (The @B_java#lang#Object#hashCode_E@ specification guarantees that two objects with unequal hash codes cannot be equal.) More generally, implementations of the various Collections Framework interfaces are free to take advantage of the specified behavior of underlying @B_java#lang#Object_E@ methods wherever the implementor deems it appropriate. Some map operations which perform recursive traversal of the map may fail with an exception for self-referential instances where the map directly or indirectly contains itself. This includes the clone(), equals(), hashCode() and toString() methods. Implementations may optionally handle the self-referential scenario, however most current implementations do not do so."}