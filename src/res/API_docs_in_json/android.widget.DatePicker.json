{"Functions": {"setEnabled(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: True if this view is enabled, false otherwise."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the enabled state of this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 1", "FullName": "public void setEnabled (boolean enabled)"}, "getYear()": {"Returns": [["int", "The selected year."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getYear ()"}, "setFirstDayOfWeek(int)": {"Returns": [], "Parameters": [["int", "int: The first day of the week conforming to the @B_android#widget#CalendarView_E@ APIs."]], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "Sets the first day of week.", "history": "Added in API level 21", "FullName": "public void setFirstDayOfWeek (int firstDayOfWeek)"}, "dispatchProvideAutofillStructure(android.view.ViewStructure,int)": {"Returns": [], "Parameters": [["@B_android#view#ViewStructure_E@", "ViewStructure: fill in with structured view data for autofill purposes. This value must never be null."], ["int", "int: Value is either 0 or @B_android#view#View#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_E@"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Dispatches creation of a @B_android#view#ViewStructure_E@s for autofill purposes down the hierarchy, when an Assist structure is being created as part of an autofill request. The default implementation does the following: Sets the @B_android#view#autofill#AutofillId_E@ in the structure. Calls @B_android#view#View#onProvideAutofillStructure_E@. Calls @B_android#view#View#onProvideAutofillVirtualStructure_E@. Typically, this method should only be overridden by subclasses that provide a view hierarchy (such as @B_android#view#ViewGroup_E@) - other classes should override @B_android#view#View#onProvideAutofillStructure_E@ or @B_android#view#View#onProvideAutofillVirtualStructure_E@ instead. When overridden, it must: Either call super.dispatchProvideAutofillStructure(structure, flags) or explicitly set the @B_android#view#autofill#AutofillId_E@ in the structure (for example, by calling structure.setAutofillId(getAutofillId())). Decide how to handle the @B_android#view#View#AUTOFILL_FLAG_INCLUDE_NOT_IMPORTANT_VIEWS_E@ flag - when set, all views in the structure should be considered important for autofill, regardless of what @B_android#view#View#isImportantForAutofill_E@ returns. We encourage you to respect this flag to provide a better user experience - this flag is typically used when an user explicitly requested autofill. If the flag is not set, then only views marked as important for autofill should be included in the structure - skipping non-important views optimizes the overall autofill performance. This implementation adds in all child views of the view group, in addition to calling the default @B_android#view#View_E@ implementation.", "history": "Added in API level 26", "FullName": "public void dispatchProvideAutofillStructure (ViewStructure structure, int flags)"}, "DatePicker(android.content.Context,android.util.AttributeSet)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DatePicker (Context context, AttributeSet attrs)"}, "DatePicker(android.content.Context,android.util.AttributeSet,int,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 21", "FullName": "public DatePicker (Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes)"}, "getMonth()": {"Returns": [["int", "The selected month."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getMonth ()"}, "setMaxDate(long)": {"Returns": [], "Parameters": [["long", "long: The maximal supported date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the maximal date supported by this @B_android#widget#DatePicker_E@ in milliseconds since January 1, 1970 00:00:00 in @B_android#icu#util#TimeZone#getDefault_E@ time zone.", "history": "Added in API level 11", "FullName": "public void setMaxDate (long maxDate)"}, "onConfigurationChanged(android.content.res.Configuration)": {"Returns": [], "Parameters": [["@B_android#content#res#Configuration_E@", "Configuration: The new resource configuration."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called when the current configuration of the resources being used by the application have changed. You can use this to decide when to reload resources that can changed based on orientation and other configuration characteristics. You only need to use this if you are not relying on the normal @B_android#app#Activity_E@ mechanism of recreating the activity instance upon a configuration change.", "history": "Added in API level 8", "FullName": "protected void onConfigurationChanged (Configuration newConfig)"}, "getCalendarViewShown()": {"Returns": [["boolean", "true if the calendar view is shown"]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#widget#DatePicker#getCalendarView_E@"], "Permissions": [], "Description": "Not supported by Material-style calendar mode Returns whether the @B_android#widget#CalendarView_E@ is shown. false when the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar.", "history": "Added in API level 11 Deprecated in API level 24", "FullName": "public boolean getCalendarViewShown ()"}, "setOnDateChangedListener(android.widget.DatePicker.OnDateChangedListener)": {"Returns": [], "Parameters": [["@B_android#widget#DatePicker#OnDateChangedListener_E@", "DatePicker.OnDateChangedListener: How user is notified date is changed by user, can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Set the callback that indicates the date has been adjusted by the user.", "history": "Added in API level 26", "FullName": "public void setOnDateChangedListener (DatePicker.OnDateChangedListener onDateChangedListener)"}, "getFirstDayOfWeek()": {"Returns": [["int", "The first day of the week conforming to the @B_android#widget#CalendarView_E@ APIs."]], "Parameters": [], "Throws": [], "SeeAlso": ["@B_android#icu#util#Calendar_E@"], "Permissions": [], "Description": "Gets the first day of week.", "history": "Added in API level 21", "FullName": "public int getFirstDayOfWeek ()"}, "getAutofillValue()": {"Returns": [["@B_android#view#autofill#AutofillValue_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the @B_android#view#View_E@'s current autofill value. By default returns null, but subclasses should override it and return an appropriate value to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public AutofillValue getAutofillValue ()"}, "setMinDate(long)": {"Returns": [], "Parameters": [["long", "long: The minimal supported date."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Sets the minimal date supported by this @B_android#widget#NumberPicker_E@ in milliseconds since January 1, 1970 00:00:00 in @B_android#icu#util#TimeZone#getDefault_E@ time zone.", "history": "Added in API level 11", "FullName": "public void setMinDate (long minDate)"}, "getDayOfMonth()": {"Returns": [["int", "The selected day of month."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public int getDayOfMonth ()"}, "getSpinnersShown()": {"Returns": [["boolean", "true if the spinners are shown"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Not supported by Material-style calendar mode Returns whether the spinners are shown. false when the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar.", "history": "Added in API level 11 Deprecated in API level 24", "FullName": "public boolean getSpinnersShown ()"}, "dispatchRestoreInstanceState(android.util.SparseArray<android.os.Parcelable>)": {"Returns": [], "Parameters": [["@B_android#util#SparseArray_E@", "SparseArray: The SparseArray which holds previously saved state."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Called by @B_android#view#View#restoreHierarchyState_E@ to retrieve the state for this view and its children. May be overridden to modify how restoring happens to a view's children; for example, some views may want to not store state for their children.", "history": "Added in API level 1", "FullName": "protected void dispatchRestoreInstanceState (SparseArray<Parcelable> container)"}, "DatePicker(android.content.Context)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DatePicker (Context context)"}, "updateDate(int, int, int)": {"Returns": [], "Parameters": [["int", "int: The year."], ["int", "int: The month which is starting from zero."], ["int", "int: The day of the month."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the current date.", "history": "added in API level 1", "FullName": "public void updateDate (int year, int month, int dayOfMonth)"}, "DatePicker(android.content.Context,android.util.AttributeSet,int)": {"Returns": [], "Parameters": [["@B_android#content#Context_E@", "Context no parameter comment"], ["@B_android#util#AttributeSet_E@", "AttributeSet no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public DatePicker (Context context, AttributeSet attrs, int defStyleAttr)"}, "onRestoreInstanceState(android.os.Parcelable)": {"Returns": [], "Parameters": [["@B_android#os#Parcelable_E@", "Parcelable: The frozen state that had previously been returned by @B_android#widget#DatePicker#onSaveInstanceState_E@."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to re-apply a representation of its internal state that had previously been generated by @B_android#view#View#onSaveInstanceState_E@. This function will never be called with a null state. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected void onRestoreInstanceState (Parcelable state)"}, "autofill(android.view.autofill.AutofillValue)": {"Returns": [], "Parameters": [["@B_android#view#autofill#AutofillValue_E@", "AutofillValue: value to be autofilled."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Automatically fills the content of this view with the value. Views support the Autofill Framework mainly by: Providing the metadata defining what the view means and how it can be autofilled. Implementing the methods that autofill the view. @B_android#view#View#onProvideAutofillStructure_E@ is responsible for the former, this method is responsible for latter. This method does nothing by default, but when overridden it typically: For example, a text-field view could implement the method this way: If the value is updated asynchronously, the next call to @B_android#view#autofill#AutofillManager#notifyValueChanged_E@ must happen @B_android#view#View#getAutofillValue_E@ must be equal to the value passed to it, otherwise the view will not be highlighted as autofilled.", "history": "Added in API level 26", "FullName": "public void autofill (AutofillValue value)"}, "setSpinnersShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to show the spinners, false to hide them"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Not supported by Material-style calendar mode Sets whether the spinners are shown. Calling this method has no effect when the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar.", "history": "Added in API level 11 Deprecated in API level 24", "FullName": "public void setSpinnersShown (boolean shown)"}, "getCalendarView()": {"Returns": [["@B_android#widget#CalendarView_E@", "the calendar view"]], "Parameters": [], "Throws": [["@B_java#lang#UnsupportedOperationException_E@", "if called when the picker is displayed in calendar mode"]], "SeeAlso": ["@B_android#widget#DatePicker#getCalendarViewShown_E@"], "Permissions": [], "Description": "Not supported by Material-style calendar mode Returns the @B_android#widget#CalendarView_E@ used by this picker. @B_java#lang#UnsupportedOperationException_E@ when the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar.", "history": "Added in API level 12 Deprecated in API level 24", "FullName": "public CalendarView getCalendarView ()"}, "isEnabled()": {"Returns": [["boolean", "True if this view is enabled, false otherwise."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns the enabled status for this view. The interpretation of the enabled state varies by subclass.", "history": "Added in API level 1", "FullName": "public boolean isEnabled ()"}, "updateDate(int,int,int)": {"Returns": [], "Parameters": [["int", "int: The year."], ["int", "int: The month which is starting from zero."], ["int", "int: The day of the month."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Update the current date.", "history": "Added in API level 1", "FullName": "public void updateDate (int year, int month, int dayOfMonth)"}, "getAutofillType()": {"Returns": [["int", "Value is @B_android#view#View#AUTOFILL_TYPE_NONE_E@, @B_android#view#View#AUTOFILL_TYPE_TEXT_E@, @B_android#view#View#AUTOFILL_TYPE_TOGGLE_E@, @B_android#view#View#AUTOFILL_TYPE_LIST_E@, or @B_android#view#View#AUTOFILL_TYPE_DATE_E@"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Describes the autofill type of this view, so an @B_android#service#autofill#AutofillService_E@ can create the proper @B_android#view#autofill#AutofillValue_E@ when autofilling the view. By default returns @B_android#view#View#AUTOFILL_TYPE_NONE_E@, but views should override it to properly support the Autofill Framework.", "history": "Added in API level 26", "FullName": "public int getAutofillType ()"}, "getMinDate()": {"Returns": [["long", "The minimal supported date."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the minimal date supported by this @B_android#widget#DatePicker_E@ in milliseconds since January 1, 1970 00:00:00 in @B_android#icu#util#TimeZone#getDefault_E@ time zone. Note: The default minimal date is 01/01/1900.", "history": "Added in API level 11", "FullName": "public long getMinDate ()"}, "onSaveInstanceState()": {"Returns": [["@B_android#os#Parcelable_E@", "Returns a Parcelable object containing the view's current dynamic state, or null if there is nothing interesting to save."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Hook allowing a view to generate a representation of its internal state that can later be used to create a new instance with that same state. This state should only contain information that is not persistent or can not be reconstructed later. For example, you will never store your current position on screen because that will be computed again when a new instance of the view is placed in its view hierarchy. Some examples of things you may store here: the current cursor position in a text view (but usually not the text itself since that is stored in a content provider or other persistent storage), the currently selected item in a list view. If you override this method you must call through to the superclass implementation.", "history": "Added in API level 1", "FullName": "protected Parcelable onSaveInstanceState ()"}, "setCalendarViewShown(boolean)": {"Returns": [], "Parameters": [["boolean", "boolean: true to show the calendar view, false to hide it"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Not supported by Material-style calendar mode Sets whether the @B_android#widget#CalendarView_E@ is shown. @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar.", "history": "Added in API level 11 Deprecated in API level 24", "FullName": "public void setCalendarViewShown (boolean shown)"}, "getAccessibilityClassName()": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Return the class name of this object to be used for accessibility purposes. Subclasses should only override this if they are implementing something that should be seen as a completely new class of view when used by accessibility, unrelated to the class it is deriving from. This is used to fill in @B_android#view#accessibility#AccessibilityNodeInfo#setClassName_E@.", "history": "Added in API level 23", "FullName": "public CharSequence getAccessibilityClassName ()"}, "getMaxDate()": {"Returns": [["long", "The maximal supported date."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Gets the maximal date supported by this @B_android#widget#DatePicker_E@ in milliseconds since January 1, 1970 00:00:00 in @B_android#icu#util#TimeZone#getDefault_E@ time zone. Note: The default maximal date is 12/31/2100.", "history": "Added in API level 11", "FullName": "public long getMaxDate ()"}, "init(int,int,int,android.widget.DatePicker.OnDateChangedListener)": {"Returns": [], "Parameters": [["int", "int: The initial year."], ["int", "int: The initial month starting from zero."], ["int", "int: The initial day of the month."], ["@B_android#widget#DatePicker#OnDateChangedListener_E@", "DatePicker.OnDateChangedListener: How user is notified date is changed by user, can be null."]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Initialize the state. If the provided values designate an inconsistent date the values are normalized before updating the spinners.", "history": "Added in API level 1", "FullName": "public void init (int year, int monthOfYear, int dayOfMonth, DatePicker.OnDateChangedListener onDateChangedListener)"}}, "Inheritance": ["@B_android#view#View_E@", "@B_android#view#ViewGroup_E@", "@B_android#widget#FrameLayout_E@"], "ClassName": "android.widget.DatePicker", "ClassDesc": "Provides a widget for selecting a date. When the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to spinner, the date can be selected using year, month, and day spinners or a @B_android#widget#CalendarView_E@. The set of spinners and the calendar view are automatically synchronized. The client can customize whether only the spinners, or only the calendar view, or both to be displayed. When the @B_android#R#styleable#DatePicker_datePickerMode_E@ attribute is set to calendar, the month and day can be selected using a calendar-style view while the year can be selected separately using a list. See the For a dialog using this view, see @B_android#app#DatePickerDialog_E@."}