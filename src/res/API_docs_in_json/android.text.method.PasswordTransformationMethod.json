{"Functions": {"afterTextChanged(android.text.Editable)": {"Returns": [], "Parameters": [["@B_android#text#Editable_E@", "Editable no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that, somewhere within s, the text has been changed. It is legitimate to make further changes to s from this callback, but be careful not to get yourself into an infinite loop, because any changes you make will cause this method to be called again recursively. (You are not told where the change took place because other afterTextChanged() methods may already have made other changes and invalidated the offsets. But if you need to know here, you can use @B_android#text#Spannable#setSpan_E@ in @B_android#text#TextWatcher#onTextChanged_E@ to mark your place and then look up from here where the span ended up.", "history": "Added in API level 1", "FullName": "public void afterTextChanged (Editable s)"}, "getTransformation(java.lang.CharSequence,android.view.View)": {"Returns": [["@B_java#lang#CharSequence_E@", "no returns description in source"]], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["@B_android#view#View_E@", "View no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Returns a CharSequence that is a transformation of the source text -- for example, replacing each character with a dot in a password field. Beware that the returned text must be exactly the same length as the source text, and that if the source text is Editable, the returned text must mirror it dynamically instead of doing a one-time copy. The method should not return null unless source is null.", "history": "Added in API level 1", "FullName": "public CharSequence getTransformation (CharSequence source, View view)"}, "beforeTextChanged(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that, within s, the count characters beginning at start are about to be replaced by new text with length after. It is an error to attempt to make changes to s from this callback.", "history": "Added in API level 1", "FullName": "public void beforeTextChanged (CharSequence s, int start, int count, int after)"}, "getInstance()": {"Returns": [["@B_android#text#method#PasswordTransformationMethod_E@", "no returns description in source"]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1", "FullName": "public static PasswordTransformationMethod getInstance ()"}, "onTextChanged(java.lang.CharSequence,int,int,int)": {"Returns": [], "Parameters": [["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"], ["int", "int no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called to notify you that, within s, the count characters beginning at start have just replaced old text that had length before. It is an error to attempt to make changes to s from this callback.", "history": "Added in API level 1", "FullName": "public void onTextChanged (CharSequence s, int start, int before, int count)"}, "PasswordTransformationMethod()": {"Returns": [], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public PasswordTransformationMethod ()"}, "onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)": {"Returns": [], "Parameters": [["@B_android#view#View_E@", "View no parameter comment"], ["@B_java#lang#CharSequence_E@", "CharSequence no parameter comment"], ["boolean", "boolean no parameter comment"], ["int", "int no parameter comment"], ["@B_android#graphics#Rect_E@", "Rect no parameter comment"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "This method is called when the TextView that uses this TransformationMethod gains or loses focus.", "history": "Added in API level 1", "FullName": "public void onFocusChanged (View view, CharSequence sourceText, boolean focused, int direction, Rect previouslyFocusedRect)"}}, "Inheritance": [], "ClassName": "android.text.method.PasswordTransformationMethod", "ClassDesc": ""}