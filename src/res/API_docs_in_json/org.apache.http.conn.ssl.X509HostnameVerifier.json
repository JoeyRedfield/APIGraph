{"Functions": {"verify(java.lang.String,javax.net.ssl.SSLSocket)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_javax#net#ssl#SSLSocket_E@", "SSLSocket no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract void verify (String host, SSLSocket ssl)"}, "verify(java.lang.String, javax.net.ssl.SSLSocket)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_javax#net#ssl#SSLSocket_E@", "SSLSocket no parameter comment"]], "Throws": [["@B_java#io#IOException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "added in API level 1", "FullName": "public abstract void verify (String host, SSLSocket ssl)"}, "verify(java.lang.String,javax.net.ssl.SSLSession)": {"Returns": [["boolean", "true if the host name is acceptable"]], "Parameters": [["@B_java#lang#String_E@", "String: the host name"], ["@B_javax#net#ssl#SSLSession_E@", "SSLSession: SSLSession used on the connection to host"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Verify that the host name is an acceptable match with the server's authentication scheme.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract boolean verify (String host, SSLSession session)"}, "verify(java.lang.String,java.security.cert.X509Certificate)": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String no parameter comment"], ["@B_java#security#cert#X509Certificate_E@", "X509Certificate no parameter comment"]], "Throws": [["@B_javax#net#ssl#SSLException_E@", ""]], "SeeAlso": [], "Permissions": [], "Description": "", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract void verify (String host, X509Certificate cert)"}, "verify(java.lang.String,java.lang.String[],java.lang.String[])": {"Returns": [], "Parameters": [["@B_java#lang#String_E@", "String: The hostname to verify."], ["@B_java#lang#String_E@", "String: CN fields, in order, as extracted from the X.509 certificate."], ["@B_java#lang#String_E@", "String: Subject-Alt fields of type 2 (\"DNS\"), as extracted from the X.509 certificate."]], "Throws": [["@B_javax#net#ssl#SSLException_E@", "If verification failed."]], "SeeAlso": [], "Permissions": [], "Description": "Checks to see if the supplied hostname matches any of the supplied CNs or \"DNS\" Subject-Alts. Most implementations only look at the first CN, and ignore any additional CNs. Most implementations do look at all of the \"DNS\" Subject-Alts. The CNs or Subject-Alts may contain wildcards according to RFC 2818.", "history": "Added in API level 1 Deprecated in API level 22", "FullName": "public abstract void verify (String host, String[] cns, String[] subjectAlts)"}, "verify(java.lang.String, javax.net.ssl.SSLSession)": {"Returns": [["boolean", "true if the host name is acceptable"]], "Parameters": [["@B_java#lang#String_E@", "String: the host name"], ["@B_javax#net#ssl#SSLSession_E@", "SSLSession: SSLSession used on the connection to host"]], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Verify that the host name is an acceptable match with the server's authentication scheme.", "history": "added in API level 1", "FullName": "public abstract boolean verify (String host, SSLSession session)"}}, "Inheritance": [], "ClassName": "org.apache.http.conn.ssl.X509HostnameVerifier", "ClassDesc": "Please use @B_java#net#URL#openConnection_E@ instead. Please visit Interface for checking if a hostname matches the names stored inside the server's X.509 certificate. Implements javax.net.ssl.HostnameVerifier, but we don't actually use that interface. Instead we added some methods that take String parameters (instead of javax.net.ssl.HostnameVerifier's SSLSession). JUnit is a lot easier this way! :-) We provide the HostnameVerifier.DEFAULT, HostnameVerifier.STRICT, and HostnameVerifier.ALLOW_ALL implementations. But feel free to define your own implementation! Inspired by Sebastian Hauer's original StrictSSLProtocolSocketFactory in the HttpClient \"contrib\" repository."}