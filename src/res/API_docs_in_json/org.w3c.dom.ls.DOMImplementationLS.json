{"Functions": {"createLSOutput()": {"Returns": [["@B_org#w3c#dom#ls#LSOutput_E@", "The newly created output object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty output destination object where LSOutput.characterStream, LSOutput.byteStream, LSOutput.systemId, LSOutput.encoding are null.", "history": "Added in API level 8", "FullName": "public abstract LSOutput createLSOutput ()"}, "createLSParser(short,java.lang.String)": {"Returns": [["@B_org#w3c#dom#ls#LSParser_E@", "The newly created LSParser object. This LSParser is either synchronous or asynchronous depending on the value of the mode argument. http:##www#w3#org#TR#DOM-Level-3-Core#core#parameter-error-handler_E@"]], "Parameters": [["short", "short: The mode argument is either MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS, if mode is MODE_SYNCHRONOUS then the LSParser that is created will operate in synchronous mode, if it's MODE_ASYNCHRONOUS then the LSParser that is created will operate in asynchronous mode."], ["@B_java#lang#String_E@", "String: An absolute URI representing the type of the schema language used during the load of a Document using the newly created LSParser. Note that no lexical checking is done on the absolute URI. In order to create a LSParser for any kind of schema types (i.e. the LSParser will be free to use any schema found), use the value null. http:##www#w3#org#TR#2001#REC-xmlschema-1-20010502#_E@"]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new LSParser. The newly constructed parser may then be configured by means of its DOMConfiguration object, and used to parse documents by means of its parse method.", "history": "Added in API level 8", "FullName": "public abstract LSParser createLSParser (short mode, String schemaType)"}, "createLSSerializer()": {"Returns": [["@B_org#w3c#dom#ls#LSSerializer_E@", "The newly created LSSerializer object. Note: By default, the newly created LSSerializer has no DOMErrorHandler, i.e. the value of the \"error-handler\" configuration parameter is null. However, implementations may provide a default error handler at creation time. In that case, the initial value of the \"error-handler\" configuration parameter on the new LSSerializer object contains a reference to the default error handler."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new LSSerializer object.", "history": "Added in API level 8", "FullName": "public abstract LSSerializer createLSSerializer ()"}, "createLSParser(short, java.lang.String)": {"Returns": [["@B_org#w3c#dom#ls#LSParser_E@", "The newly created LSParser object. This LSParser is either synchronous or asynchronous depending on the value of the mode argument. r_E@"]], "Parameters": [["short", "short: The mode argument is either MODE_SYNCHRONOUS or MODE_ASYNCHRONOUS, if mode is MODE_SYNCHRONOUS then the LSParser that is created will operate in synchronous mode, if it's MODE_ASYNCHRONOUS then the LSParser that is created will operate in asynchronous mode."], ["@B_java#lang#String_E@", "String: An absolute URI representing the type of the schema language used during the load of a Document using the newly created LSParser. Note that no lexical checking is done on the absolute URI. In order to create a LSParser for any kind of schema types (i.e. the LSParser will be free to use any schema found), use the value null. #_E@"]], "Throws": [["@B_org#w3c#dom#DOMException_E@", "NOT_SUPPORTED_ERR: Raised if the requested mode or schema type is not supported."]], "SeeAlso": [], "Permissions": [], "Description": "Create a new LSParser. The newly constructed parser may then be configured by means of its DOMConfiguration object, and used to parse documents by means of its parse method.", "history": "added in API level 8", "FullName": "public abstract LSParser createLSParser (short mode, String schemaType)"}, "createLSInput()": {"Returns": [["@B_org#w3c#dom#ls#LSInput_E@", "The newly created input object."]], "Parameters": [], "Throws": [], "SeeAlso": [], "Permissions": [], "Description": "Create a new empty input source object where LSInput.characterStream, LSInput.byteStream , LSInput.stringData LSInput.systemId, LSInput.publicId, LSInput.baseURI, and LSInput.encoding are null, and LSInput.certifiedText is false.", "history": "Added in API level 8", "FullName": "public abstract LSInput createLSInput ()"}}, "Inheritance": [], "ClassName": "org.w3c.dom.ls.DOMImplementationLS", "ClassDesc": "DOMImplementationLS contains the factory methods for creating Load and Save objects. The expectation is that an instance of the DOMImplementationLS interface can be obtained by using binding-specific casting methods on an instance of the DOMImplementation interface or, if the Document supports the feature \"Core\" version \"3.0\" defined in [DOMImplementation.getFeature with parameter values \"LS\" (or \"LS-Async\") and \"3.0\" (respectively). See also the"}